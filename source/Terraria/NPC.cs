using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using ReLogic.Utilities;
using Terraria.Audio;
using Terraria.Chat;
using Terraria.DataStructures;
using Terraria.Enums;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Creative;
using Terraria.GameContent.Drawing;
using Terraria.GameContent.Events;
using Terraria.GameContent.ItemDropRules;
using Terraria.GameContent.RGB;
using Terraria.GameContent.Tile_Entities;
using Terraria.GameContent.UI;
using Terraria.GameContent.UI.BigProgressBar;
using Terraria.Graphics.CameraModifiers;
using Terraria.Graphics.Effects;
using Terraria.ID;
using Terraria.Localization;
using Terraria.ModLoader;
using Terraria.ModLoader.Core;
using Terraria.Utilities;
using Terraria.WorldBuilding;

namespace Terraria;

public class NPC : Entity, IEntityWithGlobals<GlobalNPC>
{
	[StructLayout(LayoutKind.Sequential, Size = 1)]
	private readonly ref struct NPCNameFakeLanguageCategoryPassthrough
	{
		public struct V
		{
			public string Value;
		}

		public V RandomFromCategory(string category, UnifiedRandom _)
		{
			V result = default(V);
			result.Value = category;
			return result;
		}
	}

	/// <summary>
	/// Represents a damage calculation in the process of being calculated for damage to be applied to an NPC. The final damage calculation will be present in the resulting <see cref="T:Terraria.NPC.HitInfo" />.
	/// </summary>
	public struct HitModifiers
	{
		public delegate void HitInfoModifier(ref HitInfo info);

		/// <summary>
		/// Use this to enhance or scale the base damage of the item/projectile/hit. This damage modifier will apply to <see cref="P:Terraria.NPC.HitInfo.SourceDamage" /> and be transferred to on-hit effects. <br />
		/// <br />
		/// For effects which apply to all damage dealt by the player, or a specific damage type, consider using <see cref="M:Terraria.Player.GetDamage(Terraria.ModLoader.DamageClass)" /> instead. <br />
		/// For effects which apply to all damage dealt by an item, consider using <see cref="M:Terraria.ModLoader.GlobalItem.ModifyWeaponDamage(Terraria.Item,Terraria.Player,Terraria.ModLoader.StatModifier@)" /> instead. <br />
		/// <br />
		/// Used by vanilla for weapons with unique scaling such as jousting lance, ham bat, breaker blade. And for accessories which enhance a projectile (strong bees)
		/// </summary>
		public StatModifier SourceDamage;

		/// <summary>
		/// Use this to add bonus damage to the hit, but not to on-hit effects. <br />
		/// <br />
		/// Used by vanilla for most summon tag damage.
		/// </summary>
		public AddableFloat FlatBonusDamage;

		/// <summary>
		/// Use this to add bonus <br />
		/// Used by vanilla for melee parry buff (+4f) and some summon tag damage.
		/// </summary>
		public AddableFloat ScalingBonusDamage;

		/// <summary>
		/// Not recommended for modded use due to difficulty balancing around defense, consider multiplying <see cref="F:Terraria.NPC.HitModifiers.FinalDamage" /> instead. <br />
		/// Used by vanilla for banners, cultist projectile resistances, extra damage for stakes against vampires etc.
		/// </summary>
		public MultipliableFloat TargetDamageMultiplier;

		/// <summary>
		/// The defense of the receiver, including any temporary modifiers (buffs/debuffs). <br />
		/// <br />
		/// Increase <see cref="F:Terraria.ModLoader.StatModifier.Base" /> to add extra defense. <br />
		/// Add for scaling buffs (eg +0.1f for +10% defense). <br />
		/// Multiply for debuffs (eg *0.9f for -10% defense). <br />
		/// Decrease <see cref="F:Terraria.ModLoader.StatModifier.Flat" /> to provide flat debuffs like ichor or betsys curse <br />
		/// </summary>
		public StatModifier Defense;

		/// <summary>
		/// Flat defense reduction. Applies after <see cref="F:Terraria.NPC.HitModifiers.ScalingArmorPenetration" />. <br />
		/// Add to give bonus flat armor penetration. <br />
		/// Do not subtract or multiply, consider altering <see cref="F:Terraria.NPC.HitModifiers.Defense" /> or <see cref="F:Terraria.NPC.HitModifiers.ScalingArmorPenetration" /> instead.
		/// <br />
		/// Used by the <see cref="P:Terraria.Projectile.ArmorPenetration" />, <see cref="P:Terraria.Item.ArmorPenetration" /> and <see cref="M:Terraria.Player.GetTotalArmorPenetration(Terraria.ModLoader.DamageClass)" /> stats.
		/// </summary>
		public AddableFloat ArmorPenetration;

		/// <summary>
		/// Used to ignore a fraction of enemy armor. Applies before flat <see cref="F:Terraria.NPC.HitModifiers.ArmorPenetration" />. <br />
		/// Recommend only additive buffs, no multiplication or subtraction. <br />
		/// <br />
		/// At 1f, the attack will completely ignore all defense.
		/// </summary>
		public AddableFloat ScalingArmorPenetration;

		/// <summary>
		/// The conversion ratio between defense and damage reduction. Defaults to 0.5 for NPCs. Depends on difficulty for players. <br />
		/// Increase to make defense more effective and armor penetration more important. <br />
		/// <br />
		/// Recommend only multiplication, no addition or subtraction. <br />
		/// Not recommended to for buffs/debuffs. Use for gamemode tweaks, or if an enemy revolves very heavily around armor penetration.
		/// </summary>
		public MultipliableFloat DefenseEffectiveness;

		/// <summary>
		/// Applied to the final damage (after defense) result when the hit is a crit. Defaults to +1f additive (+100% damage). <br />
		///  <br />
		/// Add to give hits extra crit damage (eg +0.1f for 10% extra crit damage (total +110% or 2.1 times base). <br />
		/// Add to <see cref="F:Terraria.ModLoader.StatModifier.Flat" /> to give crits extra flat damage. Use with caution as this extra damage will not be reduced by armor. <br />
		/// Multiplication not recommended for buffs. Could be used to decrease the effectiveness of crits on an enemy without disabling completely. <br />
		/// Use of <see cref="F:Terraria.ModLoader.StatModifier.Base" /> also not recommended. <br />
		/// </summary>
		public StatModifier CritDamage;

		/// <summary>
		/// Applied to damage after defense and before <see cref="F:Terraria.NPC.HitModifiers.FinalDamage" /> when the hit is _not_ a crit. <br />
		/// Effectively a compliment for <see cref="F:Terraria.NPC.HitModifiers.CritDamage" />
		/// </summary>
		public StatModifier NonCritDamage;

		/// <summary>
		/// Applied to the final damage result. <br />
		/// Used by <see cref="F:Terraria.NPC.takenDamageMultiplier" /> to make enemies extra susceptible/resistant to damage. <br />
		/// <br />
		/// Multiply to make your enemy more susceptible or resistant to damage. <br />
		/// Add to give 'bonus' post-mitigation damage. <br />
		/// Add to <see cref="F:Terraria.ModLoader.StatModifier.Base" /> to deal damage which ignores armor, but still respects scaling damage reductions or increases. <br />
		/// Adding to <see cref="F:Terraria.ModLoader.StatModifier.Flat" /> will ignore all reductions or increases to deal unconditional damage. Not recommended due to potential compatibility issues with enemy or player damage reduction effects, use <see cref="F:Terraria.ModLoader.StatModifier.Base" /> instead.
		/// </summary>
		public StatModifier FinalDamage;

		/// <summary>
		/// Multiply to adjust the damage variation of the hit. <br />
		/// Multiply by 0 to disable damage variation.<br />
		/// Default damage variation is 15%, so maximum scale is ~6.67 <br />
		/// Only affects hits where damage variation is enabled (which is most projectile/item/NPC damage)
		/// </summary>
		public MultipliableFloat DamageVariationScale;

		private int _damageLimit;

		private bool? _critOverride;

		/// <summary>
		/// Used by <see cref="F:Terraria.NPC.onFire2" /> buff (additive) and <see cref="F:Terraria.NPC.knockBackResist" /> (multiplicative) <br />
		/// <br />
		/// Recommend using <see cref="M:Terraria.ModLoader.GlobalItem.ModifyWeaponKnockback(Terraria.Item,Terraria.Player,Terraria.ModLoader.StatModifier@)" /> or <see cref="M:Terraria.Player.GetKnockback(Terraria.ModLoader.DamageClass)" /> instead where possible.<br />
		/// <br />
		/// Add for knockback buffs. <br />
		/// Multiply for knockback resistances. <br />
		/// Subtraction not recommended. <br />
		/// <br />
		/// Knockback falloff still applies after this, so high knockback has diminishing returns. <br />
		/// </summary>
		public StatModifier Knockback;

		private bool _instantKill;

		private bool _combatTextHidden;

		/// <summary>
		/// The DamageType of the hit.
		/// </summary>
		public DamageClass DamageType { get; init; }

		/// <summary>
		/// The direction to apply knockback. If 0, no knockback will be applied. <br />
		/// Could potentially be used for directional resistances. <br />
		/// Can be overridden by <see cref="P:Terraria.NPC.HitModifiers.HitDirectionOverride" />
		/// </summary>
		public int HitDirection { get; init; }

		/// <summary>
		/// If true, no amount of damage can get through the defense of this NPC, damage will be reduced to 1. <br />
		/// <see cref="F:Terraria.NPC.HitModifiers.CritDamage" /> will still apply, but only Additive and Multiplicative. Maximum crit damage will be capped at 4. <br />
		/// </summary>
		public bool SuperArmor { get; init; }

		/// <summary>
		/// Overrides the direction to apply knockback. <br />
		/// Will not affect <see cref="P:Terraria.NPC.HitModifiers.HitDirection" />, only the final <see cref="F:Terraria.NPC.HitInfo.HitDirection" /><br />
		/// If set by multiple mods, only the last override will apply. <br />
		/// Intended for use by flails, or other projectiles which need to hit the NPC away from the player, even when striking from behind.
		/// </summary>
		public int? HitDirectionOverride { private get; set; }

		/// <summary>
		/// Use with caution and consider other alternatives first.<br />
		/// Can be used to register a callback to freely modify the <see cref="T:Terraria.NPC.HitInfo" /> produced by <see cref="M:Terraria.NPC.HitModifiers.ToHitInfo(System.Single,System.Boolean,System.Single,System.Boolean,System.Single)" /> before it is returned<br />
		/// If multiple mods register different callbacks which modify the hit info in different ways the results could be a mess!
		/// </summary>
		public event HitInfoModifier ModifyHitInfo;

		/// <summary>
		/// Sets an inclusive upper bound on the final damage of the hit. <br />
		/// Can be set by multiple mods, in which case the lowest limit will be used. <br />
		/// Cannot be set to less than 1
		/// </summary>
		public void SetMaxDamage(int limit)
		{
			_damageLimit = Math.Min(_damageLimit, Math.Max(limit, 1));
		}

		/// <summary>
		/// Disables <see cref="F:Terraria.NPC.HitModifiers.CritDamage" /> calculations, and clears <see cref="F:Terraria.NPC.HitInfo.Crit" /> flag from the resulting hit.
		/// </summary>
		public void DisableCrit()
		{
			_critOverride = false;
		}

		/// <summary>
		/// Sets the hit to be a crit. Does nothing if <see cref="M:Terraria.NPC.HitModifiers.DisableCrit" /> has been called
		/// </summary>
		public void SetCrit()
		{
			bool valueOrDefault = _critOverride.GetValueOrDefault();
			if (!_critOverride.HasValue)
			{
				valueOrDefault = true;
				_critOverride = valueOrDefault;
			}
		}

		/// <summary>
		/// Set to make the hit instantly kill the target, dealing as much damage as necessary. <br />
		/// Combat text will not be shown.
		/// </summary>
		public void SetInstantKill()
		{
			_instantKill = true;
		}

		/// <summary>
		/// Set to hide the damage number popup for this hit.
		/// </summary>
		public void HideCombatText()
		{
			_combatTextHidden = true;
		}

		public HitModifiers()
		{
			DamageType = DamageClass.Default;
			HitDirection = 0;
			SuperArmor = false;
			SourceDamage = new StatModifier();
			FlatBonusDamage = default(AddableFloat);
			ScalingBonusDamage = default(AddableFloat);
			TargetDamageMultiplier = new MultipliableFloat();
			Defense = new StatModifier();
			ArmorPenetration = default(AddableFloat);
			ScalingArmorPenetration = default(AddableFloat);
			DefenseEffectiveness = MultipliableFloat.One * 0.5f;
			CritDamage = new StatModifier(2f, 1f);
			NonCritDamage = new StatModifier();
			FinalDamage = new StatModifier();
			DamageVariationScale = new MultipliableFloat();
			_damageLimit = int.MaxValue;
			_critOverride = null;
			Knockback = new StatModifier();
			HitDirectionOverride = null;
			_instantKill = false;
			_combatTextHidden = false;
			this.ModifyHitInfo = null;
		}

		public readonly int GetDamage(float baseDamage, bool crit, bool damageVariation = false, float luck = 0f)
		{
			crit = _critOverride ?? crit;
			if (SuperArmor)
			{
				float dmg = 1f;
				if (crit)
				{
					dmg *= CritDamage.Additive * CritDamage.Multiplicative;
				}
				return Math.Clamp((int)dmg, 1, Math.Min(_damageLimit, 4));
			}
			float damage = SourceDamage.ApplyTo(baseDamage);
			damage += FlatBonusDamage.Value + ScalingBonusDamage.Value * damage;
			damage *= TargetDamageMultiplier.Value;
			int variationPercent = Utils.Clamp((int)Math.Round((float)Main.DefaultDamageVariationPercent * DamageVariationScale.Value), 0, 100);
			if (damageVariation && variationPercent > 0)
			{
				damage = Main.DamageVar(damage, variationPercent, luck);
			}
			float num = Math.Max(Defense.ApplyTo(0f), 0f);
			float armorPenetration = num * Math.Clamp(ScalingArmorPenetration.Value, 0f, 1f) + ArmorPenetration.Value;
			float damageReduction = Math.Max(num - armorPenetration, 0f) * DefenseEffectiveness.Value;
			damage = Math.Max(damage - damageReduction, 1f);
			damage = (crit ? CritDamage : NonCritDamage).ApplyTo(damage);
			return Math.Clamp((int)FinalDamage.ApplyTo(damage), 1, _damageLimit);
		}

		public readonly float GetKnockback(float baseKnockback)
		{
			return Math.Max(Knockback.ApplyTo(baseKnockback), 0f);
		}

		public HitInfo ToHitInfo(float baseDamage, bool crit, float baseKnockback, bool damageVariation = false, float luck = 0f)
		{
			HitInfo hitInfo2 = new HitInfo();
			hitInfo2.DamageType = DamageType ?? DamageClass.Default;
			hitInfo2.SourceDamage = Math.Max((int)SourceDamage.ApplyTo(baseDamage), 1);
			hitInfo2.Damage = (_instantKill ? 1 : GetDamage(baseDamage, crit, damageVariation, luck));
			hitInfo2.Crit = _critOverride ?? crit;
			hitInfo2.Knockback = GetKnockback(baseKnockback);
			hitInfo2.HitDirection = HitDirectionOverride ?? HitDirection;
			hitInfo2.InstantKill = _instantKill;
			hitInfo2.HideCombatText = _combatTextHidden;
			HitInfo hitInfo = hitInfo2;
			this.ModifyHitInfo?.Invoke(ref hitInfo);
			this.ModifyHitInfo = null;
			return hitInfo;
		}
	}

	/// <summary>
	/// Represents a finalized damage calculation for damage about to be applied to an NPC. This is the result of the all modifications done previously in a <see cref="T:Terraria.NPC.HitModifiers" />.
	/// </summary>
	public struct HitInfo
	{
		/// <summary>
		/// The DamageType of the hit.
		/// </summary>
		public DamageClass DamageType;

		private int _sourceDamage;

		private int _damage;

		/// <summary>
		/// Whether or not the hit is a crit
		/// </summary>
		public bool Crit;

		/// <summary>
		/// The direction to apply knockback in.
		/// </summary>
		public int HitDirection;

		/// <summary>
		/// The amount of knockback to apply. Should always be &gt;= 0. <br />
		/// Note that <see cref="M:Terraria.NPC.StrikeNPC(Terraria.NPC.HitInfo,System.Boolean,System.Boolean)" /> has a staggered knockback falloff, and that critical strikes automatically get extra 40% knockback in excess of this value.
		/// </summary>
		public float Knockback;

		/// <summary>
		/// If true, as much damage as necessary will be dealt, and damage number popups will not be shown for this hit. <br />
		/// Has no effect if the NPC is <see cref="F:Terraria.NPC.immortal" />
		/// </summary>
		public bool InstantKill;

		/// <summary>
		/// If true, damage number popups will not be shown for this hit.
		/// </summary>
		public bool HideCombatText;

		/// <summary>
		/// The amount of damage 'dealt' to the NPC, before incoming damage multipliers, armor, critical strikes etc.<br />
		/// Use this to trigger effects which scale based on damage dealt, and also deal damage.<br />
		/// Cannot be set to less than 1.<br />
		/// <br />
		/// Using this instead of <see cref="P:Terraria.NPC.HitInfo.Damage" /> can prevent diminishing returns from NPC defense, double crits, or excessively strong effects if the NPC has a vulnerability to the weapon/projectile (like vampires and stakes).
		/// <br />
		/// Used by vanilla for dryad ward retaliation, and many sword on-hit projectiles like volcano and beekeeper
		/// </summary>
		public int SourceDamage
		{
			readonly get
			{
				return _sourceDamage;
			}
			set
			{
				_sourceDamage = Math.Max(value, 1);
			}
		}

		/// <summary>
		/// The amount of damage received by the NPC. How much life the NPC will lose. <br />
		/// Is NOT capped at the NPC's current life. <br />
		/// Will be 1 if <see cref="F:Terraria.NPC.HitInfo.InstantKill" /> is set. <br />
		/// Cannot be set to less than 1.
		/// </summary>
		public int Damage
		{
			readonly get
			{
				return _damage;
			}
			set
			{
				_damage = Math.Max(value, 1);
			}
		}

		public HitInfo()
		{
			DamageType = DamageClass.Default;
			_sourceDamage = 1;
			_damage = 1;
			Crit = false;
			HitDirection = 0;
			Knockback = 0f;
			InstantKill = false;
			HideCombatText = false;
		}
	}

	private const int NPC_TARGETS_START = 300;

	public bool IsABestiaryIconDummy;

	public bool ForcePartyHatOn;

	public float waterMovementSpeed = 0.5f;

	public float lavaMovementSpeed = 0.5f;

	public float honeyMovementSpeed = 0.25f;

	public float shimmerMovementSpeed = 0.375f;

	public static readonly int[,,,] MoonLordAttacksArray = InitializeMoonLordAttacks();

	public static readonly int[,] MoonLordAttacksArray2 = InitializeMoonLordAttacks2();

	public static int MoonLordFightingDistance = 4500;

	public static int MoonLordCountdown = 0;

	public static int MaxMoonLordCountdown = 3600;

	public const int NaturalMoonlordCountdownTime = 3600;

	public const int ItemMoonlordCountdownTime = 720;

	public int teleportStyle;

	public float teleportTime;

	public static int immuneTime = 20;

	public static int maxAI = 4;

	public int netSpam;

	public static int goldCritterChance = 400;

	public static int[] killCount = new int[NPCID.Count];

	public static float totalInvasionPoints = 0f;

	public static float waveKills = 0f;

	public static int waveNumber = 0;

	public const float nameOverIncrement = 0.025f;

	public const float nameOverDistance = 350f;

	public float nameOver;

	public bool SpawnedFromStatue;

	public bool CanBeReplacedByOtherNPCs;

	public bool dripping;

	public bool drippingSlime;

	public bool drippingSparkleSlime;

	public static readonly int AFKTimeNeededForNoWorms = 300;

	public static bool[] ShimmeredTownNPCs = new bool[NPCID.Count];

	public int altTexture;

	public int townNpcVariationIndex;

	public Vector2 netOffset = Vector2.Zero;

	/// <summary>
	/// The numerical ID of the item that this NPC becomes when caught.<br />
	/// Mainly used for critters that can be caught with bug nets, such as butterflies and worms.<br />
	/// Bug nets and other catching tools will only work on NPCs with this field set to something greater than 0.
	/// </summary>
	public int catchItem;

	/// <summary>
	/// Identifies the player who released this NPC into the world. Used mainly for released critters. Helps limit how many critters a player can release. Default to 255, indicating that the npc was not released by a player.
	/// </summary>
	public short releaseOwner = 255;

	/// <summary>
	/// How rare the NPC is for the Lifeform Analyzer. For example: 4 is for Tim and Mimics, 1 is for bound town NPCs.
	/// <br /> Defaults to 0.
	/// </summary>
	public int rarity;

	public static bool taxCollector = false;

	/// <summary>
	/// Tracks which <see cref="T:Terraria.Player" />s have damaged this NPC. Damaging boss minions or other parts of a boss is usually counted as damaging the main body of the boss. Used to determine which players participated in a boss fight and should receive a boss bag.<br /><br />
	/// Indexed by each players <see cref="F:Terraria.Entity.whoAmI" /> (or <see cref="F:Terraria.Main.myPlayer" /> for code running locally).<br /><br />
	/// <see cref="F:Terraria.NPC.lastInteraction" /> tracks which player was the last player to damage this NPC. <see cref="M:Terraria.NPC.AnyInteractions" /> can be used to easily check if any player has damaged the NPC.
	/// </summary>
	public bool[] playerInteraction = new bool[256];

	/// <summary>
	/// The <see cref="F:Terraria.Entity.whoAmI" /> of the <see cref="T:Terraria.Player" /> that last damaged this NPC. Used to award Banner items to the player that killed the NPC, but can be used for many other effects.<br /><br />
	/// The default value is 255. If the value is 255, the NPC has not been damaged by any <see cref="T:Terraria.Player" />.<br /><br />
	/// The <see cref="F:Terraria.NPC.playerInteraction" /> array tracks all players that have damaged this NPC.
	/// </summary>
	public int lastInteraction = 255;

	public float takenDamageMultiplier = 1f;

	public static bool freeCake = false;

	private static int spawnSpaceX = 3;

	private static int spawnSpaceY = 3;

	/// <summary>
	/// An offset from the actual position of the npc that will be added to the draw position. Used to fake the effect of NPC smoothly traveling up single block obstacles. 
	/// </summary>
	public float gfxOffY;

	/// <summary>
	/// Has nothing to do with the speed that this NPC travels, that is dictated by AI code adjusting <see cref="F:Terraria.Entity.velocity" />.
	/// </summary>
	public float stepSpeed;

	public bool teleporting;

	private static int maxAttack = 20;

	private static int[] attackNPC = new int[maxAttack];

	public bool stairFall;

	public static int fireFlyFriendly = 0;

	public static int fireFlyChance = 0;

	public static int fireFlyMultiple = 0;

	public static int butterflyChance = 0;

	public static int stinkBugChance = 0;

	private int netStream;

	private int[] streamPlayer = new int[255];

	private bool needsUniqueInfoUpdate = true;

	public Vector2[] oldPos = (Vector2[])(object)new Vector2[10];

	public float[] oldRot = new float[10];

	public bool setFrameSize;

	public static int golemBoss = -1;

	public static int plantBoss = -1;

	public static int crimsonBoss = -1;

	public static int deerclopsBoss = -1;

	public int netSkip;

	public bool netAlways;

	/// <summary>
	/// Stores the index (the <see cref="F:Terraria.Entity.whoAmI" />) of a single NPC. This NPC will then share a health pool with that NPC.<br />
	/// Used for the Destroyer's various segments and the Wall of Flesh's eyes and mouth.<br />
	/// This is useful for worm enemies. All the segments will point to the same npc, usually the "head" of the npc, and the head and all other non-multi-part NPCs will have the default value of -1 still.
	/// <br /> Defaults to -1.
	/// </summary>
	public int realLife = -1;

	private string _givenName = "";

	public static int sWidth = 1920;

	public static int sHeight = 1080;

	private static int spawnRangeX = (int)((double)(sWidth / 16) * 0.7);

	private static int spawnRangeY = (int)((double)(sHeight / 16) * 0.7);

	public static int safeRangeX = (int)((double)(sWidth / 16) * 0.52);

	public static int safeRangeY = (int)((double)(sHeight / 16) * 0.52);

	private static int activeRangeX = (int)((double)sWidth * 2.1);

	private static int activeRangeY = (int)((double)sHeight * 2.1);

	private static int townRangeX = sWidth;

	private static int townRangeY = sHeight;

	/// <summary>
	/// Represents how much this npc counts towards the npc spawn limit. Small critters like worms or flies have values around 0.1f and 0.25f. Enemies that are more difficult than normal have values higher than 1f, and bosses and mini bosses have values around 6.
	/// <br /> Proper npcSlots values help balance the game and prevents the player from randomly being overwhelmed by powerful enemies. The <see href="https://terraria.wiki.gg/wiki/NPC_spawning#Spawn_rates">Spawn rates section on the NPC spawning wiki page</see> lists vanilla npcSlots values. Use this as a guide to find a suitable value.
	/// <br /> Defaults to 1f.
	/// </summary>
	public float npcSlots = 1f;

	private static bool noSpawnCycle = false;

	public static int activeTime = 750;

	private static int defaultSpawnRate = 600;

	private static int defaultMaxSpawns = 5;

	public float shimmerTransparency;

	public bool dontCountMe;

	public static readonly int maxBuffs = 20;

	public int[] buffType = new int[maxBuffs];

	public int[] buffTime = new int[maxBuffs];

	/// <summary>
	/// Contains the NPC buff immunities for this NPC. The default values in this array are populated from <see cref="F:Terraria.ID.NPCID.Sets.ImmuneToAllBuffs" />, <see cref="F:Terraria.ID.NPCID.Sets.ImmuneToRegularBuffs" />, <see cref="F:Terraria.ID.NPCID.Sets.SpecificDebuffImmunity" />, and <see cref="F:Terraria.ID.BuffID.Sets.GrantImmunityWith" />. 
	/// </summary>
	public bool[] buffImmune = new bool[BuffLoader.BuffCount];

	public bool canDisplayBuffs = true;

	public bool midas;

	public bool ichor;

	public bool onFire;

	public bool onFire2;

	public bool onFire3;

	public bool onFrostBurn;

	public bool onFrostBurn2;

	public bool poisoned;

	public bool markedByScytheWhip;

	public bool venom;

	public bool shadowFlame;

	public bool soulDrain;

	public bool shimmering;

	public int lifeRegen;

	public int lifeRegenCount;

	public int lifeRegenExpectedLossPerSecond = -1;

	public bool confused;

	public bool loveStruck;

	public bool stinky;

	public bool dryadWard;

	public bool immortal;

	public bool chaseable = true;

	public bool canGhostHeal = true;

	public bool javelined;

	public bool tentacleSpiked;

	public bool bloodButchered;

	public bool celled;

	public bool dryadBane;

	public bool daybreak;

	public bool dontTakeDamageFromHostiles;

	public bool betsysCurse;

	public bool oiled;

	public static bool savedTaxCollector = false;

	public static bool savedGoblin = false;

	public static bool savedWizard = false;

	public static bool savedMech = false;

	public static bool savedAngler = false;

	public static bool savedStylist = false;

	public static bool savedBartender = false;

	public static bool savedGolfer = false;

	public static bool boughtCat = false;

	public static bool boughtDog = false;

	public static bool boughtBunny = false;

	public static bool unlockedSlimeBlueSpawn = false;

	public static bool unlockedSlimeGreenSpawn = false;

	public static bool unlockedSlimeOldSpawn = false;

	public static bool unlockedSlimePurpleSpawn = false;

	public static bool unlockedSlimeRainbowSpawn = false;

	public static bool unlockedSlimeRedSpawn = false;

	public static bool unlockedSlimeYellowSpawn = false;

	public static bool unlockedSlimeCopperSpawn = false;

	public static bool unlockedMerchantSpawn = false;

	public static bool unlockedDemolitionistSpawn = false;

	public static bool unlockedPartyGirlSpawn = false;

	public static bool unlockedDyeTraderSpawn = false;

	public static bool unlockedTruffleSpawn = false;

	public static bool unlockedArmsDealerSpawn = false;

	public static bool unlockedNurseSpawn = false;

	public static bool unlockedPrincessSpawn = false;

	/// <summary>
	/// Denotes whether or not Advanced Combat Techniques has been used in the current world.
	/// </summary>
	public static bool combatBookWasUsed = false;

	public static bool combatBookVolumeTwoWasUsed = false;

	public static bool peddlersSatchelWasUsed = false;

	/// <summary>
	/// Denotes whether or not the Eye of Cthulhu has been defeated at least once in the current world.
	/// </summary>
	public static bool downedBoss1 = false;

	/// <summary>
	/// Denotes whether or not the Eater of Worlds OR the Brain of Cthulhu have been defeated at least once in the current world.<br />
	/// This does NOT track the two of them separately; you will need to establish your own fields in a <see cref="T:Terraria.ModLoader.ModSystem" /> for that.<br />
	/// </summary>
	public static bool downedBoss2 = false;

	/// <summary>
	/// Denotes whether or not Skeletron has been defeated at least once in the current world.
	/// </summary>
	public static bool downedBoss3 = false;

	/// <summary>
	/// Denotes whether or not at least one Queen Bee has been defeated in the current world.
	/// </summary>
	public static bool downedQueenBee = false;

	/// <summary>
	/// Denotes whether or not King Slime has been defeated at least once in the current world.
	/// </summary>
	public static bool downedSlimeKing = false;

	/// <summary>
	/// Denotes whether or not at least one Goblin Army has been defeated in the current world.
	/// </summary>
	public static bool downedGoblins = false;

	/// <summary>
	/// Denotes whether or not the Frost Legion has been defeated at least once in the current world.
	/// </summary>
	public static bool downedFrost = false;

	/// <summary>
	/// Denotes whether or not at least one Pirate Invasion has been defeated in the current world.
	/// </summary>
	public static bool downedPirates = false;

	/// <summary>
	/// Denotes whether or not at least one Clown has been killed in the current world.<br />
	/// Only used to make the Clothier sell the Clown set once at least one has been killed.
	/// </summary>
	public static bool downedClown = false;

	/// <summary>
	/// Denotes whether or not Plantera has been defeated at least once in the current world.
	/// </summary>
	public static bool downedPlantBoss = false;

	/// <summary>
	/// Denotes whether or not Golem has been defeated at least once in the current world.
	/// </summary>
	public static bool downedGolemBoss = false;

	/// <summary>
	/// Denotes whether or not at least one Martian Madness event has been cleared in the current world.
	/// </summary>
	public static bool downedMartians = false;

	/// <summary>
	/// Denotes whether or not Duke Fishron has been defeated at least once in the current world.
	/// </summary>
	public static bool downedFishron = false;

	/// <summary>
	/// Denotes whether or not at least one Mourning Wood has been defeated in the current world.
	/// </summary>
	public static bool downedHalloweenTree = false;

	/// <summary>
	/// Denotes whether or not at least one Pumpking has been defeated in the current world.
	/// </summary>
	public static bool downedHalloweenKing = false;

	/// <summary>
	/// Denotes whether or not at least one Ice Queen has been defeated in the current world.
	/// </summary>
	public static bool downedChristmasIceQueen = false;

	/// <summary>
	/// Denotes whether or not at least one Everscream has been defeated in the current world.
	/// </summary>
	public static bool downedChristmasTree = false;

	/// <summary>
	/// Denotes whether or not at least one Santa-NK1 has been defeated in the current world.
	/// </summary>
	public static bool downedChristmasSantank = false;

	/// <summary>
	/// Denotes whether or not the Lunatic Cultist has been defeated at least once in the current world.
	/// </summary>
	public static bool downedAncientCultist = false;

	/// <summary>
	/// Denotes whether or not the Moon Lord has been defeated at least once in the current world.
	/// </summary>
	public static bool downedMoonlord = false;

	/// <summary>
	/// Denotes whether or not the Solar Pillar has been defeated at least once in the current world.
	/// </summary>
	public static bool downedTowerSolar = false;

	/// <summary>
	/// Denotes whether or not the Vortex Pillar has been defeated at least once in the current world.
	/// </summary>
	public static bool downedTowerVortex = false;

	/// <summary>
	/// Denotes whether or not the Nebula Pillar has been defeated at least once in the current world.
	/// </summary>
	public static bool downedTowerNebula = false;

	/// <summary>
	/// Denotes whether or not the Stardust Pillar has been defeated at least once in the current world.
	/// </summary>
	public static bool downedTowerStardust = false;

	/// <summary>
	/// Denotes whether or not the Empress of Light has been defeated at least once in the current world.
	/// </summary>
	public static bool downedEmpressOfLight = false;

	/// <summary>
	/// Denotes whether or not Queen Slime has been defeated at least once in the current world.
	/// </summary>
	public static bool downedQueenSlime = false;

	/// <summary>
	/// Denotes whether or not the Deerclops has been defeated at least once in the current world.
	/// </summary>
	public static bool downedDeerclops = false;

	public static int ShieldStrengthTowerSolar = 0;

	public static int ShieldStrengthTowerVortex = 0;

	public static int ShieldStrengthTowerNebula = 0;

	public static int ShieldStrengthTowerStardust = 0;

	public static int LunarShieldPowerNormal = 100;

	public static int LunarShieldPowerMax = 100;

	public static bool TowerActiveSolar = false;

	public static bool TowerActiveVortex = false;

	public static bool TowerActiveNebula = false;

	public static bool TowerActiveStardust = false;

	public static bool LunarApocalypseIsUp = false;

	/// <summary>
	/// Denotes whether or not ANY Mechanical Boss has been defeated at least once in the current world.
	/// </summary>
	public static bool downedMechBossAny = false;

	/// <summary>
	/// Denotes whether or not the Destroyer has been defeated at least once in the current world.
	/// </summary>
	public static bool downedMechBoss1 = false;

	/// <summary>
	/// Denotes whether or not the Twins have been defeated at least once in the current world.
	/// </summary>
	public static bool downedMechBoss2 = false;

	/// <summary>
	/// Denotes whether or not Skeletron Prime has been defeated at least once in the current world.
	/// </summary>
	public static bool downedMechBoss3 = false;

	public static bool[] npcsFoundForCheckActive = new bool[NPCID.Count];

	public static int[] lazyNPCOwnedProjectileSearchArray = new int[200];

	private static int spawnRate = defaultSpawnRate;

	private static int maxSpawns = defaultMaxSpawns;

	public int soundDelay;

	public static CoinLossRevengeSystem RevengeManager = new CoinLossRevengeSystem();

	/// <summary>
	/// This determines if an NPC can be hit by a item or projectile owned by a particular player (it is an array, each slot corresponds to different players (whoAmI)). It is decremented towards 0 every update. Melee items set immune[Player.whoAmI] to Player.itemAnimation, which starts at item.useAnimation and decrements towards 0. Penetrating projectiles usually set immune to 10, while non-penetrating projectiles do not set immune. <see href="https://github.com/tModLoader/tModLoader/blob/1.4.4/ExampleMod/Content/Projectiles/ExamplePiercingProjectile.cs">ExamplePiercingProjectile.cs</see> explains more about options for npc and projectile immunity.
	/// </summary>
	public int[] immune = new int[256];

	public int directionY = 1;

	/// <summary>
	/// The NPC ID of this NPC. The NPC ID is a unique number assigned to each NPC loaded into the game. This will be equal to either an <see cref="T:Terraria.ID.NPCID" /> entry or <see cref="M:Terraria.ModLoader.ModContent.NPCType``1" />, for example <see cref="F:Terraria.ID.NPCID.AngryBones" /> or ModContent.NPCType&lt;MyModNPC&gt;(). To check if an NPC instance is a specific NPC, check <c>NPC.type == NPCID.VanillaNPCHere</c> or <c>NPC.type == ModContent.NPCType&lt;ModdedNPCHere&gt;()</c> in an <see langword="if" /> statement.
	/// <br /><br /><inheritdoc cref="F:Terraria.NPC.type" path="/negativenote/node()" />
	/// </summary>
	/// <negativenote>There are a few NPC that share the same <see cref="F:Terraria.NPC.type" /> number, usually slight variations of enemies. <see cref="F:Terraria.ID.NPCID.GreenSlime" /> and <see cref="F:Terraria.ID.NPCID.RedSlime" /> have values of -3 and -8, respectively, but after they are spawned they will have the type equal to 1, which is the same value as <see cref="F:Terraria.ID.NPCID.BlueSlime" />. If code logic requires differentiating between these variations, use <see cref="F:Terraria.NPC.netID" /> instead.</negativenote>
	public int type;

	/// <summary>
	/// An array with 4 slots used for any sort of data storage, which is occasionally synced from the server to clients. Each vanilla <see cref="T:Terraria.ID.NPCAIStyleID" /> uses these slots for different purposes. Set <see cref="F:Terraria.NPC.netUpdate" /> to true to manually sync. The advantage of using these 4 floats is that they are synced automatically. Using fields in your <see cref="P:Terraria.NPC.ModNPC" /> class will work just the same, but they might need to be synced via <see cref="M:Terraria.ModLoader.ModNPC.SendExtraAI(System.IO.BinaryWriter)" /> and <see cref="M:Terraria.ModLoader.ModNPC.ReceiveExtraAI(System.IO.BinaryReader)" /> if necessary.
	/// <br /> Clever use of <see href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref#reference-return-values">Reference return values</see> as seen in <see href="https://github.com/tModLoader/tModLoader/blob/1.4.4/ExampleMod/Content/NPCs/ExampleCustomAISlimeNPC.cs#L36">ExampleCustomAISlimeNPC.cs</see> can be used to reuse the ai array entries with readable names.
	/// <br /> Defaults to the values passed into <see cref="M:Terraria.NPC.NewNPC(Terraria.DataStructures.IEntitySource,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32)" />, usually [0, 0, 0, 0].
	/// </summary>
	public float[] ai = new float[maxAI];

	/// <summary>
	/// Acts like <see cref="F:Terraria.NPC.ai" />, but does not sync to the server. Many vanilla <see cref="T:Terraria.ID.NPCAIStyleID" /> use these slots for various purposes.
	/// <br /> Defaults to [0, 0, 0, 0]
	/// </summary>
	public float[] localAI = new float[maxAI];

	public int aiAction;

	/// <summary>
	/// Selects which vanilla code to use for the AI method. Vanilla NPC AI styles are enumerated in the <see cref="T:Terraria.ID.NPCAIStyleID" /> class. Modders can use vanilla aiStyle and optionally <see cref="P:Terraria.ModLoader.ModNPC.AIType" /> to mimic AI code already in the game. This is usually only useful as a prototyping tool since it is difficult to customize existing aiStyle code. See <see cref="P:Terraria.ModLoader.ModNPC.AIType" /> and <see href="https://github.com/tModLoader/tModLoader/blob/1.4.4/ExampleMod/Content/NPCs/PartyZombie.cs">PartyZombie</see> to see how to use vanilla ai. If you are using custom AI code, there is no need to set this field.
	/// <br /> Customizing an existing aiStyle usually requires following the <see href="https://github.com/tModLoader/tModLoader/wiki/Advanced-Vanilla-Code-Adaption#example-projectile-or-npc-ai-code">Vanilla Code Adaption Guide</see>.
	/// <br /> If you are using completely custom AI, set this to -1 since an aiStyle of 0 will face the player automatically, which may interfere with your logic.
	/// <br /> Defaults to 0.
	/// </summary>
	public int aiStyle;

	public bool justHit;

	public int timeLeft;

	public int target = -1;

	/// <summary>
	/// The amount of contact damage this NPC deals.<br />
	/// Changing this WILL NOT change the amount of damage done by projectiles.<br />
	/// Usually damage is scaled by some factor when NPC spawn projectiles with Projectile.NewProjectile in AI code. For example, passing in <c>(int)(NPC.damage * 0.5f)</c> as the Damage parameter.
	/// <br /> The <see href="https://terraria.wiki.gg/wiki/List_of_NPCs">List of NPCs wiki page</see> can be useful for finding appropriate values.
	/// </summary>
	public int damage;

	/// <summary>
	/// How resistant to damage this NPC is.
	/// <br /> The <see href="https://terraria.wiki.gg/wiki/List_of_NPCs">List of NPCs wiki page</see> can be useful for finding appropriate values.
	/// </summary>
	public int defense;

	/// <summary>
	/// Stores the value of <see cref="F:Terraria.NPC.damage" /> at the end of SetDefaults. Useful for scaling damage in AI code conditionally.
	/// </summary>
	public int defDamage;

	/// <summary>
	/// Stores the value of <see cref="F:Terraria.NPC.defense" /> at the end of SetDefaults. Useful for scaling defense in AI code, like how King Slime changes defense as it gets smaller.
	/// </summary>
	public int defDefense;

	/// <summary>
	/// Denotes whether or not this NPC counts as dealing cold damage for the purposes of the Warmth Potion.<br />
	/// Defaults to false.
	/// </summary>
	public bool coldDamage;

	public bool trapImmune;

	/// <summary>
	/// The sound that plays when this npc is hit. Set this to an existing <see cref="T:Terraria.ID.SoundID" /> entry or assign to a new <see cref="T:Terraria.Audio.SoundStyle" /> for a custom sound.
	/// <br /> The <see href="https://github.com/tModLoader/tModLoader/wiki/Basic-Sounds">Basic Sounds Guide</see> teaches how to find existing sounds to use, how to use custom sounds, and how to customize the playback properties of the sounds.
	/// <br /> For example <c>NPC.HitSound = SoundID.NPCHit1;</c> can be used for the typical NPC hit sound.
	/// <br /> Defaults to null.
	/// </summary>
	public SoundStyle? HitSound;

	/// <summary>
	/// The sound that plays when this npc dies. Set this to an existing <see cref="T:Terraria.ID.SoundID" /> entry or assign to a new <see cref="T:Terraria.Audio.SoundStyle" /> for a custom sound.
	/// <br /> The <see href="https://github.com/tModLoader/tModLoader/wiki/Basic-Sounds">Basic Sounds Guide</see> teaches how to find existing sounds to use, how to use custom sounds, and how to customize the playback properties of the sounds.
	/// <br /> For example <c>NPC.DeathSound = SoundID.NPCDeath1;</c> can be used for the typical NPC kill sound.
	/// <br /> Defaults to null.
	/// </summary>
	public SoundStyle? DeathSound;

	/// <summary>
	/// The current life of the NPC. Automatically set to the value of <see cref="F:Terraria.NPC.lifeMax" /> at the end of SetDefaults.
	/// </summary>
	public int life;

	/// <summary>
	/// The maximum life of this NPC.
	/// </summary>
	public int lifeMax;

	public Rectangle targetRect;

	public double frameCounter;

	public Rectangle frame;

	public Color color;

	/// <summary>
	/// 0 is opaque, and 255 is transparent. Note that this is the opposite of how alpha is typically expressed in computer graphics. Can be used to fade an NPC in and out.
	/// <br /> Use <see cref="P:Terraria.NPC.Opacity" /> instead for a 0f to 1f scaling that uses the high value for fully opaque, as is more typical in computer graphics.
	/// <br /> Defaults to 0.
	/// </summary>
	public int alpha;

	/// <summary>
	/// Indicates that this NPC is drawn at a specific layer in the render order. Must use in conjunction with <see cref="M:Terraria.ModLoader.ModNPC.DrawBehind(System.Int32)" />.
	/// <br /> See <see href="https://github.com/tModLoader/tModLoader/blob/1.4.4/ExampleMod/Content/NPCs/ExampleDrawBehindNPC.cs">ExampleDrawBehindNPC</see> for examples of how to use this and all available layers to draw in.
	/// </summary>
	public bool hide;

	/// <summary>
	/// Makes the NPC bigger or smaller. Bigger than 1f is bigger.
	/// <br /> Defaults to 1f.
	/// </summary>
	public float scale = 1f;

	/// <summary>
	/// How much of the knockback it receives will actually apply. 1f: full knockback; 0f: no knockback.
	/// <br /> Defaults to 1f.
	/// </summary>
	public float knockBackResist = 1f;

	public int oldDirectionY;

	public int oldTarget;

	public float rotation;

	/// <summary>
	/// If true, the npc will not be affected by gravity. Demon Eyes and other floating npc use this.
	/// <br /> Defaults to <see langword="false" />.
	/// </summary>
	public bool noGravity;

	/// <summary>
	/// If true, the npc does not collide with tiles, making the npc pass through tiles freely. Meteor Head and Worm npc use this.
	/// <br /> Defaults to <see langword="false" />.
	/// </summary>
	public bool noTileCollide;

	public bool netUpdate;

	public bool netUpdate2;

	public bool collideX;

	public bool collideY;

	/// <summary>
	/// Set to true if the NPC is a boss. Prevents off-screen despawn. Bosses also need <c>[AutoloadBossHead]</c> annotated on the ModNPC class itself to fully register as a boss.
	/// </summary>
	public bool boss;

	public int spriteDirection = -1;

	/// <summary>
	/// Indicates that this NPC draws behind solid tiles.
	/// <br /> See <see href="https://github.com/tModLoader/tModLoader/blob/1.4.4/ExampleMod/Content/NPCs/ExampleDrawBehindNPC.cs">ExampleDrawBehindNPC</see> for examples of how to use this and other options for layers to draw in.
	/// </summary>
	public bool behindTiles;

	public bool lavaImmune;

	/// <summary>
	/// How many copper coins the NPC will drop when killed (100 copper coins = 1 silver coin etc.).
	/// </summary>
	public float value;

	public int extraValue;

	public bool dontTakeDamage;

	private int catchableNPCTempImmunityCounter;

	/// <summary>
	/// Similar to <see cref="F:Terraria.NPC.type" />, but accounts for negative <see cref="T:Terraria.ID.NPCID" /> values. <br />
	/// <br /><br /><inheritdoc cref="F:Terraria.NPC.type" path="/negativenote/node()" />
	/// </summary>
	public int netID;

	public int statsAreScaledForThisManyPlayers;

	public float strengthMultiplier = 1f;

	public bool townNPC;

	public static bool travelNPC = false;

	public bool homeless;

	public int homeTileX = -1;

	public int homeTileY = -1;

	public int housingCategory;

	public bool oldHomeless;

	public int oldHomeTileX = -1;

	public int oldHomeTileY = -1;

	/// <summary>
	/// Indicates that an NPC is friendly to players. If true, a player won't damage the NPC and the NPC won't deal contact damage to players, unless otherwise forced. <br />
	/// Mostly set to true for town npc and rescuable town npc. <br />
	/// Naturally spawned critter NPC that are <see cref="F:Terraria.Main.npcCatchable" /> will automatically be friendly for 1.5 seconds after spawning. <br />
	/// </summary>
	public bool friendly;

	public bool closeDoor;

	public int doorX;

	public int doorY;

	public int friendlyRegen;

	public int breath;

	public const int breathMax = 200;

	public int breathCounter;

	public bool reflectsProjectiles;

	public int lastPortalColorIndex;

	public bool despawnEncouraged;

	private bool netShimmer;

	public static int[,] cavernMonsterType = new int[2, 3];

	public static int mechQueen = -1;

	public static int brainOfGravity = -1;

	public static bool empressRageMode = false;

	private static readonly int[] _deerclopsAttack1Frames = new int[12]
	{
		12, 13, 14, 13, 14, 13, 14, 13, 14, 15,
		16, 17
	};

	private static readonly int[] _deerclopsAttack2Frames = new int[13]
	{
		12, 15, 16, 17, 17, 17, 17, 13, 18, 18,
		18, 18, 12
	};

	private static readonly int[] _deerclopsAttack3Frames = new int[16]
	{
		19, 20, 21, 22, 21, 22, 21, 22, 23, 24,
		23, 24, 23, 24, 20, 19
	};

	public static int[] MoonEventRequiredPointsPerWaveLookup = new int[21]
	{
		0, 25, 40, 50, 80, 100, 160, 180, 200, 250,
		300, 375, 450, 525, 675, 850, 1025, 1325, 1550, 2000,
		0
	};

	private static bool EoCKilledToday;

	private static bool WoFKilledToday;

	public static bool fairyLog = false;

	private static bool dayTimeHax;

	private static bool rainingHax;

	private static float cloudAlphaHax;

	public static int ladyBugGoodLuckTime = 43200;

	public static int ladyBugBadLuckTime = -10800;

	private static int ladyBugRainTime = 1800;

	private static int maximumAmountOfTimesLadyBugRainCanStack = 10 * ladyBugRainTime;

	public static int offSetDelayTime = 60;

	public static bool PreventJojaColaDialog = false;

	public static int RerollDryadText = 0;

	internal readonly IEntitySource thisEntitySourceCache;

	internal GlobalNPC[] _globals;

	private bool catchableNPCOriginallyFriendly;

	/// <summary>
	/// Used to keep vanilla and modded gravity effects working neatly
	/// </summary>
	private float vanillaGravity = 0.3f;

	/// <summary>
	/// Multiply this value in order to change the NPCs active gravity, this can be done in AI as gravity values are reset slightly beforehand, and used slightly after.
	/// </summary>
	public MultipliableFloat GravityMultiplier = MultipliableFloat.One;

	/// <summary>
	/// Used to keep vanilla and modded gravity effects working neatly
	/// </summary>
	private float vanillaMaxFallSpeed = 10f;

	/// <summary>
	/// Multiply this value in order to change the NPCs active maxFallSpeed, this can be done in AI as gravity values are reset slightly beforehand
	/// </summary>
	public MultipliableFloat MaxFallSpeedMultiplier = MultipliableFloat.One;

	/// <summary>
	/// Set to disable vanilla type and AI based NPC gravity calculations. <br />
	/// Affects types 258, 425, 576, 577, 427, 426, 541, and the aiStyle 7. <br />
	/// Use with caution
	/// </summary>
	public bool GravityIgnoresType;

	/// <summary>
	/// Set to disable the effect of being in space on NPC gravity.
	/// </summary>
	public bool GravityIgnoresSpace;

	/// <summary>
	/// Set to disable the effect of being submerged in liquid on NPC gravity. <br />
	/// Note that being submerged in liquid overrides both type and space effects.
	/// </summary>
	public bool GravityIgnoresLiquid;

	public bool CanTalk
	{
		get
		{
			if (isLikeATownNPC && aiStyle == 7 && velocity.Y == 0f)
			{
				return !NPCID.Sets.IsTownPet[type];
			}
			return false;
		}
	}

	public bool CanBeTalkedTo
	{
		get
		{
			if (isLikeATownNPC && aiStyle == 7)
			{
				return velocity.Y == 0f;
			}
			return false;
		}
	}

	public bool HasValidTarget
	{
		get
		{
			if (!HasPlayerTarget || !Main.player[target].active || Main.player[target].dead || Main.player[target].ghost)
			{
				if (SupportsNPCTargets && HasNPCTarget)
				{
					return Main.npc[TranslatedTargetIndex].active;
				}
				return false;
			}
			return true;
		}
	}

	public bool HasPlayerTarget
	{
		get
		{
			if (target >= 0)
			{
				return target < 255;
			}
			return false;
		}
	}

	public bool HasNPCTarget
	{
		get
		{
			if (target >= 300)
			{
				return target < 500;
			}
			return false;
		}
	}

	public bool SupportsNPCTargets => NPCID.Sets.UsesNewTargetting[type];

	public int TranslatedTargetIndex
	{
		get
		{
			if (HasNPCTarget)
			{
				return target - 300;
			}
			return target;
		}
	}

	public int WhoAmIToTargettingIndex => whoAmI + 300;

	public bool IsShimmerVariant
	{
		get
		{
			if (townNpcVariationIndex == 1)
			{
				return NPCID.Sets.ShimmerTownTransform[type];
			}
			return false;
		}
	}

	/// <summary>
	/// The TYPE name of this NPC.<br />
	/// Type names are the base titles given to any NPC, and are typically shared amongst all instances of an NPC. For example, the Stylist's type name will always be "Stylist".<br />
	/// To modify the type name of a specific NPC, make use of the ModifyTypeName hooks in <see cref="T:Terraria.ModLoader.GlobalNPC" /> and <see cref="T:Terraria.ModLoader.ModNPC" />, according to your needs.<br />
	/// </summary>
	public string TypeName => NPCLoader.ModifyTypeName(this, Lang.GetNPCNameValue(netID));

	/// <summary>
	/// The FULL name of this NPC.<br />
	/// If the NPC doesn't have a given name, this will just return the type name. A Stylist without a given name will always return "Stylist" here.<br />
	/// If the NPC does have a given name, this will return the NPC's full name; given name first, then type name.<br />
	/// Full name with a given name is given in the format of "X the Y", where X is their given name and Y is their type name.<br />
	/// For example, a Stylist might return "Scarlett the Stylist" here; with Scarlett being her given name, and Stylist being her type name.<br />
	/// </summary>
	public string FullName
	{
		get
		{
			if (!HasGivenName)
			{
				return TypeName;
			}
			return Language.GetTextValue("Game.NPCTitle", _givenName, TypeName);
		}
	}

	/// <summary>
	/// Whether or not this NPC has a given name.<br />
	/// </summary>
	public bool HasGivenName => _givenName.Length != 0;

	/// <summary>
	/// If this NPC has a given name, returns their given name; otherwise, returns their type name.<br />
	/// </summary>
	public string GivenOrTypeName
	{
		get
		{
			if (!HasGivenName)
			{
				return TypeName;
			}
			return _givenName;
		}
	}

	/// <summary>
	/// The GIVEN name of this NPC. Can be set directly.<br />
	/// Given names are unique to each NPC, though two NPCs can have the same given name.<br />
	/// Some vanilla examples of given names are Andrew (for the Guide), Yorai (for the Princess), Whitney (for the Steampunker), or Scarlett (for the Stylist).<br />
	/// </summary>
	public string GivenName
	{
		get
		{
			return _givenName;
		}
		set
		{
			_givenName = value ?? "";
		}
	}

	public static bool downedTowers
	{
		get
		{
			if (downedTowerSolar && downedTowerVortex && downedTowerNebula)
			{
				return downedTowerStardust;
			}
			return false;
		}
	}

	public static int ShieldStrengthTowerMax
	{
		get
		{
			int num = LunarShieldPowerNormal;
			if (downedMoonlord)
			{
				num /= 2;
			}
			return num;
		}
	}

	public static bool TowersDefeated
	{
		get
		{
			if (TowerActiveSolar && TowerActiveVortex && TowerActiveNebula)
			{
				return TowerActiveStardust;
			}
			return false;
		}
	}

	public float Opacity
	{
		get
		{
			return 1f - (float)alpha / 255f;
		}
		set
		{
			alpha = (int)MathHelper.Clamp((1f - value) * 255f, 0f, 255f);
		}
	}

	public bool isLikeATownNPC
	{
		get
		{
			if (NPCID.Sets.ActsLikeTownNPC[type])
			{
				return true;
			}
			return townNPC;
		}
	}

	public static bool IsMechQueenUp
	{
		get
		{
			if (mechQueen >= 0 && mechQueen < 200)
			{
				if (Main.npc[mechQueen].active && Main.npc[mechQueen].type == 127)
				{
					return true;
				}
				mechQueen = -1;
				return false;
			}
			return false;
		}
	}

	public static bool TooWindyForButterflies => Math.Abs(Main.windSpeedTarget) >= 0.4f;

	public bool CountsAsACritter
	{
		get
		{
			if (lifeMax <= 5 && damage == 0 && type != 594)
			{
				return type != 686;
			}
			return false;
		}
	}

	public ModNPC ModNPC { get; internal set; }

	int IEntityWithGlobals<GlobalNPC>.Type => type;

	public RefReadOnlyArray<GlobalNPC> EntityGlobals => _globals;

	public EntityGlobalsEnumerator<GlobalNPC> Globals => new EntityGlobalsEnumerator<GlobalNPC>(this);

	/// <summary> Provides access to (static) happiness data associated with this NPC's type. </summary>
	public NPCHappiness Happiness => NPCHappiness.Get(type);

	public bool ShowNameOnHover { get; set; }

	/// <summary>
	/// Helper property for defense &gt;= 9999. Extremely high defense is interpreted as 'super armor' where attacks will only do 1 damage (or 2 for crits), no matter how strong they are. <br />
	/// Passed to <see cref="P:Terraria.NPC.HitModifiers.SuperArmor" /> when doing damage calculations. See the docs there for more info. <br />
	/// The only way to bypass super armor is to call <see cref="M:Terraria.NPC.StrikeNPC(Terraria.NPC.HitInfo,System.Boolean,System.Boolean)" />, or set NPC life directly.
	/// </summary>
	public bool SuperArmor
	{
		get
		{
			return defense >= 9999;
		}
		set
		{
			defense = (value ? 9999 : 0);
		}
	}

	/// <summary>
	/// If true, damage combat text will not be shown by <see cref="M:Terraria.NPC.StrikeNPC(Terraria.NPC.HitInfo,System.Boolean,System.Boolean)" /> and dps meter will not record damage against this NPC. <br />
	/// Recommended for use with <see cref="F:Terraria.NPC.immortal" />
	/// </summary>
	public bool HideStrikeDamage { get; set; }

	/// <summary>
	/// Assign a special boss bar, vanilla or modded. Not used by vanilla.
	/// <para>To assign a modded boss bar, use NPC.BossBar = ModContent.GetInstance&lt;ExampleBossBar&gt;(); where ExampleBossBar is a ModBossBar</para>
	/// <para>To assign a vanilla boss bar for whatever reason, fetch it first through the NPC type using Main.BigBossProgressBar.TryGetSpecialVanillaBossBar</para>
	/// </summary>
	public IBigProgressBar BossBar { get; set; }

	/// <summary>
	/// The current change in velocity due to gravity applied every frame. <br />
	/// Multiply <see cref="F:Terraria.NPC.GravityMultiplier" /> to modify this value
	/// </summary>
	public float gravity
	{
		get
		{
			return vanillaGravity * GravityMultiplier.Value;
		}
		private set
		{
			GravityMultiplier = MultipliableFloat.One;
			vanillaGravity = value;
		}
	}

	/// <summary>
	/// The current fall speed cap in velocity applied every frame. <br />
	/// Multiply <see cref="F:Terraria.NPC.MaxFallSpeedMultiplier" /> to modify this value
	/// </summary>
	public float maxFallSpeed
	{
		get
		{
			return vanillaMaxFallSpeed * MaxFallSpeedMultiplier.Value;
		}
		private set
		{
			MaxFallSpeedMultiplier = MultipliableFloat.One;
			vanillaMaxFallSpeed = value;
		}
	}

	/// <summary>
	/// The effect of different liquids on NPC gravity. Provided for reference only, modifying these will have no effect. <br />
	/// Corresponds with wet, lavaWet, honetWet, and shimmerWet.
	/// </summary>
	public static float[] GravityWetMultipliers { get; } = new float[4]
	{
		2f / 3f,
		2f / 3f,
		1f / 3f,
		0.5f
	};


	/// <summary>
	/// The effect of different liquids on NPC maxFallSpeed. Provided for reference only, modifying these will have no effect. <br />
	/// Corresponds with wet, lavaWet, honetWet, and shimmerWet.
	/// </summary>
	public static float[] MaxFallSpeedWetMultipliers { get; } = new float[4] { 0.7f, 0.7f, 0.4f, 0.55f };


	public NPCAimedTarget GetTargetData(bool ignorePlayerTankPets = true)
	{
		if (!HasValidTarget)
		{
			return default(NPCAimedTarget);
		}
		if (SupportsNPCTargets && HasNPCTarget)
		{
			return new NPCAimedTarget(Main.npc[TranslatedTargetIndex]);
		}
		return new NPCAimedTarget(Main.player[target], ignorePlayerTankPets);
	}

	public static int[,,,] InitializeMoonLordAttacks()
	{
		int[,,,] array = null;
		if (MoonLordAttacksArray != null)
		{
			array = MoonLordAttacksArray;
			for (int i = 0; i < array.GetLength(0); i++)
			{
				for (int j = 0; j < array.GetLength(1); j++)
				{
					for (int k = 0; k < array.GetLength(2); k++)
					{
						for (int l = 0; l < array.GetLength(3); l++)
						{
							array[i, j, k, l] = 0;
						}
					}
				}
			}
		}
		else
		{
			array = new int[3, 3, 2, 5];
		}
		array[0, 0, 0, 0] = 0;
		array[0, 0, 1, 0] = 50;
		array[0, 0, 0, 1] = 1;
		array[0, 0, 1, 1] = 70;
		array[0, 0, 0, 2] = 2;
		array[0, 0, 1, 2] = 330;
		array[0, 0, 0, 3] = 0;
		array[0, 0, 1, 3] = 60;
		array[0, 0, 0, 4] = 3;
		array[0, 0, 1, 4] = 90;
		array[0, 1, 0, 0] = 1;
		array[0, 1, 1, 0] = 70;
		array[0, 1, 0, 1] = 0;
		array[0, 1, 1, 1] = 50;
		array[0, 1, 0, 2] = 3;
		array[0, 1, 1, 2] = 90;
		array[0, 1, 0, 3] = 0;
		array[0, 1, 1, 3] = 60;
		array[0, 1, 0, 4] = 2;
		array[0, 1, 1, 4] = 330;
		array[0, 2, 0, 0] = 3;
		array[0, 2, 1, 0] = 180;
		array[0, 2, 0, 1] = 0;
		array[0, 2, 1, 1] = 30;
		array[0, 2, 0, 2] = 2;
		array[0, 2, 1, 2] = 435;
		array[0, 2, 0, 3] = 3;
		array[0, 2, 1, 3] = 180;
		array[0, 2, 0, 4] = 1;
		array[0, 2, 1, 4] = 375;
		array[1, 0, 0, 0] = 0;
		array[1, 0, 1, 0] = 0;
		array[1, 0, 0, 1] = 0;
		array[1, 0, 1, 1] = 0;
		array[1, 0, 0, 2] = 0;
		array[1, 0, 1, 2] = 0;
		array[1, 0, 0, 3] = 0;
		array[1, 0, 1, 3] = 0;
		array[1, 0, 0, 4] = 0;
		array[1, 0, 1, 4] = 0;
		array[1, 1, 0, 0] = 0;
		array[1, 1, 1, 0] = 0;
		array[1, 1, 0, 1] = 0;
		array[1, 1, 1, 1] = 0;
		array[1, 1, 0, 2] = 0;
		array[1, 1, 1, 2] = 0;
		array[1, 1, 0, 3] = 0;
		array[1, 1, 1, 3] = 0;
		array[1, 1, 0, 4] = 0;
		array[1, 1, 1, 4] = 0;
		array[1, 2, 0, 0] = 0;
		array[1, 2, 1, 0] = 0;
		array[1, 2, 0, 1] = 0;
		array[1, 2, 1, 1] = 0;
		array[1, 2, 0, 2] = 0;
		array[1, 2, 1, 2] = 0;
		array[1, 2, 0, 3] = 0;
		array[1, 2, 1, 3] = 0;
		array[1, 2, 0, 4] = 0;
		array[1, 2, 1, 4] = 0;
		array[2, 0, 0, 0] = 0;
		array[2, 0, 1, 0] = 0;
		array[2, 0, 0, 1] = 0;
		array[2, 0, 1, 1] = 0;
		array[2, 0, 0, 2] = 0;
		array[2, 0, 1, 2] = 0;
		array[2, 0, 0, 3] = 0;
		array[2, 0, 1, 3] = 0;
		array[2, 0, 0, 4] = 0;
		array[2, 0, 1, 4] = 0;
		array[2, 1, 0, 0] = 0;
		array[2, 1, 1, 0] = 0;
		array[2, 1, 0, 1] = 0;
		array[2, 1, 1, 1] = 0;
		array[2, 1, 0, 2] = 0;
		array[2, 1, 1, 2] = 0;
		array[2, 1, 0, 3] = 0;
		array[2, 1, 1, 3] = 0;
		array[2, 1, 0, 4] = 0;
		array[2, 1, 1, 4] = 0;
		array[2, 2, 0, 0] = 0;
		array[2, 2, 1, 0] = 0;
		array[2, 2, 0, 1] = 0;
		array[2, 2, 1, 1] = 0;
		array[2, 2, 0, 2] = 0;
		array[2, 2, 1, 2] = 0;
		array[2, 2, 0, 3] = 0;
		array[2, 2, 1, 3] = 0;
		array[2, 2, 0, 4] = 0;
		array[2, 2, 1, 4] = 0;
		InitializeMoonLordAttacks2();
		return array;
	}

	public static int[,] InitializeMoonLordAttacks2()
	{
		int[,] array = null;
		if (MoonLordAttacksArray2 != null)
		{
			array = MoonLordAttacksArray2;
			for (int i = 0; i < array.GetLength(0); i++)
			{
				for (int j = 0; j < array.GetLength(1); j++)
				{
					array[i, j] = 0;
				}
			}
		}
		else
		{
			array = new int[2, 10];
		}
		array[0, 0] = 0;
		array[1, 0] = 90;
		array[0, 1] = 1;
		array[1, 1] = 90;
		array[0, 2] = 0;
		array[1, 2] = 90;
		array[0, 3] = 2;
		array[1, 3] = 135;
		array[0, 4] = 0;
		array[1, 4] = 90;
		array[0, 5] = 3;
		array[1, 5] = 200;
		array[0, 6] = 0;
		array[1, 6] = 90;
		array[0, 7] = 4;
		array[1, 7] = 375;
		array[0, 8] = 0;
		array[1, 8] = 90;
		array[0, 9] = 2;
		array[1, 9] = 135;
		return array;
	}

	/// <summary>
	/// Returns the <see cref="P:Terraria.NPC.FullName" /> of the first active NPC of the given type in the world. If not found, the type name is returned instead.
	/// </summary>
	/// <param name="npcID"></param>
	/// <returns></returns>
	public static string GetFullnameByID(int npcID)
	{
		for (int i = 0; i < 200; i++)
		{
			if (Main.npc[i].active && Main.npc[i].type == npcID)
			{
				return Main.npc[i].FullName;
			}
		}
		return Lang.GetNPCNameValue(npcID);
	}

	public static bool BusyWithAnyInvasionOfSorts()
	{
		if (Main.slimeRainTime == 0.0 && !Main.bloodMoon && !Main.eclipse && !Main.snowMoon && !Main.pumpkinMoon && Main.invasionType == 0)
		{
			return DD2Event.Ongoing;
		}
		return true;
	}

	public int GetAttackDamage_ScaledByStrength(float normalDamage)
	{
		return (int)(normalDamage * Main.GameModeInfo.EnemyDamageMultiplier * strengthMultiplier);
	}

	public float GetAttackDamage_LerpBetweenFinalValuesFloat(float normalDamage, float expertDamage)
	{
		float amount = (Main.expertMode ? 1 : 0);
		if (Main.GameModeInfo.IsJourneyMode)
		{
			amount = MathHelper.Clamp(strengthMultiplier - 1f, 0f, 1f);
		}
		return MathHelper.Lerp(normalDamage, expertDamage, amount);
	}

	public int GetAttackDamage_LerpBetweenFinalValues(float normalDamage, float expertDamage)
	{
		float amount = (Main.expertMode ? 1 : 0);
		if (Main.GameModeInfo.IsJourneyMode)
		{
			amount = MathHelper.Clamp(strengthMultiplier - 1f, 0f, 1f);
		}
		return (int)MathHelper.Lerp(normalDamage, expertDamage, amount);
	}

	public int GetAttackDamage_ForProjectiles(float normalDamage, float expertDamage)
	{
		float amount = (Main.expertMode ? 1 : 0);
		if (Main.GameModeInfo.IsJourneyMode)
		{
			amount = MathHelper.Clamp(strengthMultiplier - 1f, 0f, 1f);
		}
		return (int)MathHelper.Lerp(normalDamage, expertDamage, amount);
	}

	public int GetAttackDamage_ForProjectiles_MultiLerp(float normalDamage, float expertDamage, float masterDamage)
	{
		float percent = (Main.masterMode ? 1f : (Main.expertMode ? 0.5f : 0f));
		if (Main.GameModeInfo.IsJourneyMode)
		{
			percent = MathHelper.Clamp(strengthMultiplier - 1f, 0f, 2f);
			percent /= 2f;
		}
		return (int)Utils.MultiLerp(percent, normalDamage, expertDamage, masterDamage);
	}

	public static bool SpawnAllowed_Demolitionist()
	{
		if (unlockedDemolitionistSpawn)
		{
			return true;
		}
		for (int i = 0; i < 255; i++)
		{
			Player player = Main.player[i];
			if (!player.active)
			{
				continue;
			}
			for (int j = 0; j < 58; j++)
			{
				Item item = player.inventory[j];
				if (item != null && item.stack > 0 && ItemID.Sets.ItemsThatCountAsBombsForDemolitionistToSpawn[item.type])
				{
					return true;
				}
			}
		}
		return false;
	}

	public static bool SpawnAllowed_ArmsDealer()
	{
		if (unlockedArmsDealerSpawn)
		{
			return true;
		}
		for (int i = 0; i < 255; i++)
		{
			Player player = Main.player[i];
			if (!player.active)
			{
				continue;
			}
			for (int j = 0; j < 58; j++)
			{
				Item item = player.inventory[j];
				if (item != null && item.stack > 0 && (item.ammo == AmmoID.Bullet || item.useAmmo == AmmoID.Bullet))
				{
					return true;
				}
			}
		}
		return false;
	}

	public static bool SpawnAllowed_DyeTrader()
	{
		if (unlockedDyeTraderSpawn)
		{
			return true;
		}
		for (int i = 0; i < 255; i++)
		{
			Player player = Main.player[i];
			if (!player.active)
			{
				continue;
			}
			for (int j = 0; j < 58; j++)
			{
				Item item = player.inventory[j];
				if (item != null && item.stack > 0 && (item.dye > 0 || (item.type >= 1107 && item.type <= 1120) || (item.type >= 3385 && item.type <= 3388)))
				{
					return true;
				}
			}
			for (int k = 0; k < 10; k++)
			{
				Item item2 = player.dye[k];
				if (item2 != null && item2.stack > 0 && item2.dye > 0)
				{
					return true;
				}
			}
			for (int l = 0; l < 5; l++)
			{
				Item item3 = player.miscDyes[l];
				if (item3 != null && item3.stack > 0 && item3.dye > 0)
				{
					return true;
				}
			}
		}
		return false;
	}

	public static bool SpawnAllowed_Nurse()
	{
		if (unlockedNurseSpawn)
		{
			return true;
		}
		for (int i = 0; i < 255; i++)
		{
			Player player = Main.player[i];
			if (player.active && player.ConsumedLifeCrystals > 0)
			{
				return true;
			}
		}
		return false;
	}

	public static bool SpawnAllowed_Merchant()
	{
		if (unlockedMerchantSpawn)
		{
			return true;
		}
		double num = 5000.0;
		int num2 = 0;
		for (int i = 0; i < 255; i++)
		{
			Player player = Main.player[i];
			if (!player.active)
			{
				continue;
			}
			for (int j = 0; j < 58; j++)
			{
				Item item = player.inventory[j];
				if (item != null && item.stack > 0)
				{
					if (item.type == 71)
					{
						num2 += item.stack;
					}
					if (item.type == 72)
					{
						num2 += item.stack * 100;
					}
					if (item.type == 73)
					{
						num2 += item.stack * 10000;
					}
					if (item.type == 74)
					{
						num2 += item.stack * 1000000;
					}
					if ((double)num2 >= num)
					{
						return true;
					}
				}
			}
		}
		return false;
	}

	public static void ClearFoundActiveNPCs()
	{
		for (int i = 0; i < npcsFoundForCheckActive.Length; i++)
		{
			npcsFoundForCheckActive[i] = false;
		}
	}

	public static void UpdateFoundActiveNPCs()
	{
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = Main.npc[i];
			if (nPC.active && nPC.type >= 0)
			{
				npcsFoundForCheckActive[nPC.type] = true;
			}
		}
		UpdateRGBPeriheralProbe();
	}

	public static void ClearFoundNPCTypesForBestiary()
	{
		for (int i = 0; i < npcsFoundForCheckActive.Length; i++)
		{
			npcsFoundForCheckActive[i] = false;
		}
	}

	public static void UpdateRGBPeriheralProbe()
	{
		int highestTierBossOrEvent = 0;
		bool zoneOverworldHeight = Main.LocalPlayer.ZoneOverworldHeight;
		if (npcsFoundForCheckActive[4])
		{
			highestTierBossOrEvent = 4;
		}
		if (npcsFoundForCheckActive[50])
		{
			highestTierBossOrEvent = 50;
		}
		if (zoneOverworldHeight && Main.invasionType == 1)
		{
			highestTierBossOrEvent = -1;
		}
		if (npcsFoundForCheckActive[13])
		{
			highestTierBossOrEvent = 13;
		}
		if (npcsFoundForCheckActive[266])
		{
			highestTierBossOrEvent = 266;
		}
		if (npcsFoundForCheckActive[222])
		{
			highestTierBossOrEvent = 222;
		}
		if (npcsFoundForCheckActive[35])
		{
			highestTierBossOrEvent = 35;
		}
		if (npcsFoundForCheckActive[113])
		{
			highestTierBossOrEvent = 113;
		}
		if (zoneOverworldHeight && Main.invasionType == 2)
		{
			highestTierBossOrEvent = -2;
		}
		if (npcsFoundForCheckActive[657])
		{
			highestTierBossOrEvent = 657;
		}
		if (npcsFoundForCheckActive[126] || npcsFoundForCheckActive[125])
		{
			highestTierBossOrEvent = 126;
		}
		if (npcsFoundForCheckActive[134])
		{
			highestTierBossOrEvent = 134;
		}
		if (npcsFoundForCheckActive[127])
		{
			highestTierBossOrEvent = 127;
		}
		if (zoneOverworldHeight && Main.invasionType == 3)
		{
			highestTierBossOrEvent = -3;
		}
		if (npcsFoundForCheckActive[262])
		{
			highestTierBossOrEvent = 262;
		}
		if (npcsFoundForCheckActive[245])
		{
			highestTierBossOrEvent = 245;
		}
		if (npcsFoundForCheckActive[636])
		{
			highestTierBossOrEvent = 636;
		}
		if (npcsFoundForCheckActive[668] && IsDeerclopsHostile())
		{
			highestTierBossOrEvent = 668;
		}
		if (DD2Event.Ongoing)
		{
			highestTierBossOrEvent = -6;
		}
		if (zoneOverworldHeight && Main.invasionType == 4)
		{
			highestTierBossOrEvent = -4;
		}
		if (npcsFoundForCheckActive[439])
		{
			highestTierBossOrEvent = 439;
		}
		if (npcsFoundForCheckActive[370])
		{
			highestTierBossOrEvent = 370;
		}
		if (npcsFoundForCheckActive[398])
		{
			highestTierBossOrEvent = 398;
		}
		CommonConditions.Boss.HighestTierBossOrEvent = highestTierBossOrEvent;
	}

	public void SpawnWithHigherTime(int timeMult)
	{
		timeLeft = activeTime * timeMult;
	}

	public void EncourageDespawn(int despawnTime)
	{
		if (timeLeft > despawnTime)
		{
			timeLeft = despawnTime;
		}
		despawnEncouraged = true;
	}

	public void DiscourageDespawn(int despawnTime)
	{
		if (timeLeft < despawnTime)
		{
			timeLeft = despawnTime;
		}
		despawnEncouraged = false;
	}

	public static bool WouldBeEncouragedToDespawn(int aistyle, int type)
	{
		if (aistyle == 4)
		{
			return Main.dayTime;
		}
		return false;
	}

	public string getNewNPCName()
	{
		string npcNameCategoryKey = getNewNPCNameInner(type);
		List<string> npcNameList = new List<string>();
		if (!string.IsNullOrEmpty(npcNameCategoryKey))
		{
			npcNameList = LanguageManager.Instance.GetLocalizedEntriesInCategory(npcNameCategoryKey);
		}
		npcNameList = NPCLoader.ModifyNPCNameList(this, npcNameList);
		if (npcNameList != null && npcNameList.Count > 0)
		{
			return npcNameList[WorldGen.genRand.Next(npcNameList.Count)];
		}
		return "";
	}

	private static string getNewNPCNameInner(int npcType)
	{
		NPCNameFakeLanguageCategoryPassthrough Language = default(NPCNameFakeLanguageCategoryPassthrough);
		return npcType switch
		{
			17 => Language.RandomFromCategory("MerchantNames", WorldGen.genRand).Value, 
			18 => Language.RandomFromCategory("NurseNames", WorldGen.genRand).Value, 
			19 => Language.RandomFromCategory("ArmsDealerNames", WorldGen.genRand).Value, 
			20 => Language.RandomFromCategory("DryadNames", WorldGen.genRand).Value, 
			22 => Language.RandomFromCategory("GuideNames", WorldGen.genRand).Value, 
			38 => Language.RandomFromCategory("DemolitionistNames", WorldGen.genRand).Value, 
			54 => Language.RandomFromCategory("ClothierNames", WorldGen.genRand).Value, 
			107 => Language.RandomFromCategory("GoblinTinkererNames", WorldGen.genRand).Value, 
			108 => Language.RandomFromCategory("WizardNames", WorldGen.genRand).Value, 
			124 => Language.RandomFromCategory("MechanicNames", WorldGen.genRand).Value, 
			160 => Language.RandomFromCategory("TruffleNames", WorldGen.genRand).Value, 
			178 => Language.RandomFromCategory("SteampunkerNames", WorldGen.genRand).Value, 
			207 => Language.RandomFromCategory("DyeTraderNames", WorldGen.genRand).Value, 
			208 => Language.RandomFromCategory("PartyGirlNames", WorldGen.genRand).Value, 
			209 => Language.RandomFromCategory("CyborgNames", WorldGen.genRand).Value, 
			227 => Language.RandomFromCategory("PainterNames", WorldGen.genRand).Value, 
			228 => Language.RandomFromCategory("WitchDoctorNames", WorldGen.genRand).Value, 
			229 => Language.RandomFromCategory("PirateNames", WorldGen.genRand).Value, 
			353 => Language.RandomFromCategory("StylistNames", WorldGen.genRand).Value, 
			368 => Language.RandomFromCategory("TravelingMerchantNames", WorldGen.genRand).Value, 
			369 => Language.RandomFromCategory("AnglerNames", WorldGen.genRand).Value, 
			453 => Language.RandomFromCategory("SkeletonMerchantNames", WorldGen.genRand).Value, 
			441 => Language.RandomFromCategory("TaxCollectorNames", WorldGen.genRand).Value, 
			550 => Language.RandomFromCategory("BartenderNames", WorldGen.genRand).Value, 
			588 => Language.RandomFromCategory("GolferNames", WorldGen.genRand).Value, 
			633 => Language.RandomFromCategory("BestiaryGirlNames", WorldGen.genRand).Value, 
			663 => Language.RandomFromCategory("PrincessNames", WorldGen.genRand).Value, 
			637 => Language.RandomFromCategory("CatNames_Siamese", WorldGen.genRand).Value, 
			638 => Language.RandomFromCategory("DogNames_Labrador", WorldGen.genRand).Value, 
			656 => Language.RandomFromCategory("BunnyNames_White", WorldGen.genRand).Value, 
			670 => Language.RandomFromCategory("SlimeNames_Blue", WorldGen.genRand).Value, 
			678 => Language.RandomFromCategory("SlimeNames_Green", WorldGen.genRand).Value, 
			679 => Language.RandomFromCategory("SlimeNames_Old", WorldGen.genRand).Value, 
			680 => Language.RandomFromCategory("SlimeNames_Purple", WorldGen.genRand).Value, 
			681 => Language.RandomFromCategory("SlimeNames_Rainbow", WorldGen.genRand).Value, 
			682 => Language.RandomFromCategory("SlimeNames_Red", WorldGen.genRand).Value, 
			683 => Language.RandomFromCategory("SlimeNames_Yellow", WorldGen.genRand).Value, 
			684 => Language.RandomFromCategory("SlimeNames_Copper", WorldGen.genRand).Value, 
			_ => "", 
		};
	}

	public NetworkText GetTypeNetName()
	{
		return NetworkText.FromKey(Lang.GetNPCName(netID).Key);
	}

	public void GetLifeStats(out int statLife, out int statLifeMax)
	{
		statLife = life;
		statLifeMax = lifeMax;
		if (realLife != -1)
		{
			statLife = Main.npc[realLife].life;
			statLifeMax = Main.npc[realLife].lifeMax;
		}
	}

	public float GetLifePercent()
	{
		GetLifeStats(out var statLife, out var statLifeMax);
		return (float)statLife / (float)statLifeMax;
	}

	public NetworkText GetFullNetName()
	{
		if (!HasGivenName)
		{
			return GetTypeNetName();
		}
		return NetworkText.FromKey("Game.NPCTitle", GetGivenNetName(), GetTypeNetName());
	}

	public NetworkText GetGivenOrTypeNetName()
	{
		if (!HasGivenName)
		{
			return GetTypeNetName();
		}
		return GetGivenNetName();
	}

	public NetworkText GetGivenNetName()
	{
		return NetworkText.FromLiteral(_givenName);
	}

	public static void setNPCName(string newName, int npcType, bool resetExtras = false)
	{
		bool flag = false;
		for (int i = 0; i < 200; i++)
		{
			if (!Main.npc[i].active || Main.npc[i].type != npcType)
			{
				continue;
			}
			if (flag)
			{
				Main.npc[i].GivenName = Main.npc[i].getNewNPCName();
				Main.npc[i].needsUniqueInfoUpdate = true;
				continue;
			}
			Main.npc[i].GivenName = newName;
			if (resetExtras)
			{
				flag = true;
				continue;
			}
			break;
		}
	}

	/// <summary>
	/// Returns the <see cref="P:Terraria.NPC.GivenOrTypeName" /> of the first active NPC of the given type in the world. If not found, null is returned.
	/// </summary>
	/// <param name="npcType"></param>
	/// <returns></returns>
	public static string GetFirstNPCNameOrNull(int npcType)
	{
		for (int i = 0; i < 200; i++)
		{
			if (Main.npc[i].active && Main.npc[i].type == npcType)
			{
				return Main.npc[i].GivenOrTypeName;
			}
		}
		return null;
	}

	/// <summary>
	/// Use to check if a mechanism is allowed to spawn an NPC of the provided type at the provided world coordinates. Checks nearby area to see if the <see href="https://terraria.wiki.gg/wiki/Statues#Spawn_limits">Spawn Limits</see> have been reached.
	/// </summary>
	public static bool MechSpawn(float x, float y, int type)
	{
		//IL_026c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0285: Unknown result type (might be due to invalid IL or missing references)
		int num = 0;
		int num2 = 0;
		int num3 = 0;
		Vector2 vector = default(Vector2);
		for (int i = 0; i < 200; i++)
		{
			if (!Main.npc[i].active)
			{
				continue;
			}
			bool flag = false;
			if (Main.npc[i].type == type)
			{
				flag = true;
			}
			else if (type == 74 || type == 297 || type == 298)
			{
				if (Main.npc[i].type == 74 || Main.npc[i].type == 297 || Main.npc[i].type == 298)
				{
					flag = true;
				}
			}
			else if (type == 46 || type == 540 || type == 303 || type == 337)
			{
				if (Main.npc[i].type == 46 || Main.npc[i].type == 540 || Main.npc[i].type == 303 || Main.npc[i].type == 337)
				{
					flag = true;
				}
			}
			else if (type == 362 || type == 364)
			{
				if (Main.npc[i].type == 362 || Main.npc[i].type == 363 || Main.npc[i].type == 364 || Main.npc[i].type == 365)
				{
					flag = true;
				}
			}
			else if (type == 602)
			{
				if (Main.npc[i].type == 602 || Main.npc[i].type == 603)
				{
					flag = true;
				}
			}
			else if (type == 608)
			{
				if (Main.npc[i].type == 608 || Main.npc[i].type == 609)
				{
					flag = true;
				}
			}
			else if (type == 616 || type == 617)
			{
				if (Main.npc[i].type == 616 || Main.npc[i].type == 617)
				{
					flag = true;
				}
			}
			else if (type == 55 && Main.npc[i].type == 230)
			{
				flag = true;
			}
			else if (NPCID.Sets.IsDragonfly[type] && NPCID.Sets.IsDragonfly[Main.npc[i].type])
			{
				flag = true;
			}
			if (flag)
			{
				num++;
				((Vector2)(ref vector))._002Ector(x, y);
				float num5 = Main.npc[i].position.X - vector.X;
				float num4 = Main.npc[i].position.Y - vector.Y;
				float num6 = (float)Math.Sqrt(num5 * num5 + num4 * num4);
				if (num6 < 200f)
				{
					num2++;
				}
				if (num6 < 600f)
				{
					num3++;
				}
			}
		}
		if (num2 >= 3 || num3 >= 6 || num >= 10)
		{
			return false;
		}
		return true;
	}

	public static int TypeToDefaultHeadIndex(int type)
	{
		return type switch
		{
			0 => 0, 
			17 => 2, 
			18 => 3, 
			19 => 6, 
			20 => 5, 
			22 => 1, 
			38 => 4, 
			54 => 7, 
			107 => 9, 
			108 => 10, 
			124 => 8, 
			142 => 11, 
			160 => 12, 
			178 => 13, 
			207 => 14, 
			208 => 15, 
			209 => 16, 
			227 => 17, 
			228 => 18, 
			229 => 19, 
			353 => 20, 
			368 => 21, 
			369 => 22, 
			441 => 23, 
			550 => 24, 
			588 => 25, 
			633 => 26, 
			663 => 45, 
			637 => 27, 
			638 => 33, 
			656 => 39, 
			670 => 46, 
			678 => 47, 
			679 => 48, 
			680 => 49, 
			681 => 50, 
			682 => 51, 
			683 => 52, 
			684 => 53, 
			_ => NPCHeadLoader.GetNPCHeadSlot(type), 
		};
	}

	public int GetBossHeadTextureIndex()
	{
		int result = NPCID.Sets.BossHeadTextures[type];
		switch (type)
		{
		case 4:
			if (ai[0] >= 2f)
			{
				result = 1;
			}
			break;
		case 266:
			if (ai[0] < 0f)
			{
				result = -1;
			}
			break;
		case 262:
			if (life <= lifeMax / 2)
			{
				result = 12;
			}
			break;
		case 125:
			if (ai[0] >= 3f)
			{
				result = 16;
			}
			break;
		case 126:
			if (ai[0] >= 3f)
			{
				result = 21;
			}
			break;
		case 439:
			if (ai[0] == 5f && alpha == 255)
			{
				result = -1;
			}
			break;
		case 440:
			if (ai[0] != 5f || alpha == 255)
			{
				result = -1;
			}
			break;
		}
		NPCLoader.BossHeadSlot(this, ref result);
		return result;
	}

	public float GetBossHeadRotation()
	{
		float result = 0f;
		switch (type)
		{
		case 68:
		case 262:
			result = rotation;
			break;
		case 35:
		case 127:
			if (ai[1] == 1f || ai[1] == 2f)
			{
				result = rotation;
			}
			break;
		case 345:
			if (ai[0] == 2f)
			{
				result = rotation;
			}
			break;
		}
		NPCLoader.BossHeadRotation(this, ref result);
		return result;
	}

	public SpriteEffects GetBossHeadSpriteEffects()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		SpriteEffects result = (SpriteEffects)0;
		if (type == 491 && spriteDirection == 1)
		{
			result = (SpriteEffects)1;
		}
		NPCLoader.BossHeadSpriteEffects(this, ref result);
		return result;
	}

	public int BannerID()
	{
		if (netID >= -10)
		{
			return netID;
		}
		return type;
	}

	private void SetDefaultsFromNetId(int id, NPCSpawnParams spawnparams = default(NPCSpawnParams))
	{
		//IL_0449: Unknown result type (might be due to invalid IL or missing references)
		//IL_044e: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0400: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0364: Unknown result type (might be due to invalid IL or missing references)
		//IL_0369: Unknown result type (might be due to invalid IL or missing references)
		//IL_0302: Unknown result type (might be due to invalid IL or missing references)
		//IL_0307: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0257: Unknown result type (might be due to invalid IL or missing references)
		//IL_025c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fd: Unknown result type (might be due to invalid IL or missing references)
		bool flag = false;
		int num = NPCID.FromNetId(id);
		SetDefaults(0);
		switch (id)
		{
		default:
			return;
		case -1:
			SetDefaults_ForNetId(num, 0.6f);
			flag = true;
			damage = 45;
			defense = 10;
			life = 90;
			knockBackResist *= 1.2f;
			value = 100f;
			break;
		case -2:
			SetDefaults_ForNetId(num, 0.9f);
			flag = true;
			damage = 45;
			defense = 20;
			life = 90;
			knockBackResist *= 1.2f;
			value = 100f;
			break;
		case -3:
			SetDefaults_ForNetId(num, 0.9f);
			flag = true;
			damage = 6;
			defense = 0;
			life = 14;
			knockBackResist *= 1.2f;
			color = new Color(0, 220, 40, 100);
			value = 3f;
			break;
		case -4:
			SetDefaults_ForNetId(num, 0.6f);
			flag = true;
			damage = 5;
			defense = 5;
			life = 150;
			knockBackResist *= 1.4f;
			color = new Color(250, 30, 90, 90);
			value = 10000f;
			rarity = 2;
			break;
		case -5:
			SetDefaults_ForNetId(num, 0.9f);
			flag = true;
			damage = 13;
			defense = 4;
			life = 30;
			knockBackResist *= 0.95f;
			alpha = 120;
			color = new Color(0, 0, 0, 50);
			value = 10f;
			break;
		case -6:
			SetDefaults_ForNetId(num, 1.05f);
			flag = true;
			damage = 15;
			defense = 4;
			life = 45;
			color = new Color(0, 0, 0, 50);
			value = 20f;
			break;
		case -7:
			SetDefaults_ForNetId(num, 1.2f);
			flag = true;
			damage = 12;
			defense = 6;
			life = 40;
			knockBackResist *= 0.9f;
			color = new Color(200, 0, 255, 150);
			value = 10f;
			break;
		case -8:
			SetDefaults_ForNetId(num, 1.025f);
			flag = true;
			damage = 12;
			defense = 4;
			life = 35;
			color = new Color(255, 30, 0, 100);
			value = 8f;
			break;
		case -9:
			SetDefaults_ForNetId(num, 1.2f);
			flag = true;
			damage = 15;
			defense = 7;
			life = 45;
			color = new Color(255, 255, 0, 100);
			value = 10f;
			break;
		case -10:
			SetDefaults_ForNetId(num, 1.1f);
			flag = true;
			damage = 18;
			defense = 6;
			life = 60;
			color = new Color(143, 215, 93, 100);
			value = 500f;
			break;
		case -11:
		{
			float num5 = 0.85f;
			if (Main.remixWorld)
			{
				num5 *= 1.3f;
			}
			SetDefaults_ForNetId(num, spawnparams, num5);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		}
		case -12:
		{
			float num4 = 1.15f;
			if (Main.remixWorld || Main.getGoodWorld)
			{
				num4 *= 1.3f;
			}
			SetDefaults_ForNetId(num, spawnparams, num4);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		}
		case -13:
			SetDefaults_ForNetId(num, spawnparams, 0.9f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			break;
		case -14:
			SetDefaults_ForNetId(num, spawnparams, 1.15f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((double)((float)damage * scale) * 1.1);
			life = (int)((double)((float)life * scale) * 1.1);
			value = (int)(value * scale);
			npcSlots = 2f;
			knockBackResist *= 2f - scale;
			break;
		case -15:
			SetDefaults_ForNetId(num, spawnparams, 1.15f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((double)((float)damage * scale) * 1.1);
			life = 400;
			value = (int)(value * scale);
			npcSlots = 2f;
			knockBackResist *= 2f - scale;
			height = 44;
			break;
		case -16:
			SetDefaults_ForNetId(num, spawnparams, 0.85f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -17:
			SetDefaults_ForNetId(num, spawnparams, 1.2f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -18:
			SetDefaults_ForNetId(num, spawnparams, 0.8f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -19:
			SetDefaults_ForNetId(num, spawnparams, 0.9f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -20:
			SetDefaults_ForNetId(num, 1.1f);
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -21:
			SetDefaults_ForNetId(num, spawnparams, 1.2f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -22:
		{
			float num3 = 0.85f;
			if (Main.remixWorld)
			{
				num3 *= 1.3f;
			}
			SetDefaults_ForNetId(num, spawnparams, num3);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		}
		case -23:
		{
			float num2 = 1.15f;
			if (Main.remixWorld)
			{
				num2 *= 1.3f;
			}
			SetDefaults_ForNetId(num, spawnparams, num2);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		}
		case -24:
			SetDefaults_ForNetId(num, spawnparams, 0.85f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -25:
			SetDefaults_ForNetId(num, spawnparams, 1.15f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -26:
			SetDefaults_ForNetId(num, spawnparams, 0.9f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -27:
			SetDefaults_ForNetId(num, spawnparams, 1.1f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -28:
			SetDefaults_ForNetId(num, spawnparams, 0.85f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -29:
			SetDefaults_ForNetId(num, spawnparams, 1.15f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -30:
			SetDefaults_ForNetId(num, spawnparams, 0.93f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -31:
			SetDefaults_ForNetId(num, spawnparams, 1.13f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -32:
			SetDefaults_ForNetId(num, spawnparams, 0.89f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -33:
			SetDefaults_ForNetId(num, spawnparams, 1.11f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -34:
			SetDefaults_ForNetId(num, spawnparams, 0.87f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -35:
			SetDefaults_ForNetId(num, spawnparams, 1.13f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -36:
			SetDefaults_ForNetId(num, spawnparams, 0.92f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -37:
			SetDefaults_ForNetId(num, spawnparams, 1.08f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -38:
			SetDefaults_ForNetId(num, spawnparams, 1.15f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -39:
			SetDefaults_ForNetId(num, spawnparams, 1.1f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -40:
			SetDefaults_ForNetId(num, spawnparams, 0.9f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -41:
			SetDefaults_ForNetId(num, spawnparams, 0.85f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -42:
			SetDefaults_ForNetId(num, spawnparams, 1.1f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -43:
			SetDefaults_ForNetId(num, spawnparams, 1.15f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -44:
			SetDefaults_ForNetId(num, spawnparams, 0.87f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -45:
			SetDefaults_ForNetId(num, spawnparams, 1.05f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -46:
			SetDefaults_ForNetId(num, spawnparams, 0.9f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -47:
			SetDefaults_ForNetId(num, spawnparams, 1.1f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -48:
			SetDefaults_ForNetId(num, spawnparams, 0.93f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -49:
			SetDefaults_ForNetId(num, spawnparams, 1.07f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -50:
			SetDefaults_ForNetId(num, spawnparams, 0.87f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -51:
			SetDefaults_ForNetId(num, spawnparams, 1.13f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -52:
			SetDefaults_ForNetId(num, spawnparams, 0.85f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -53:
			SetDefaults_ForNetId(num, spawnparams, 1.15f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -54:
			SetDefaults_ForNetId(num, spawnparams, 0.9f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -55:
			SetDefaults_ForNetId(num, spawnparams, 1.1f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -56:
			SetDefaults_ForNetId(num, spawnparams, 0.85f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -57:
			SetDefaults_ForNetId(num, spawnparams, 1.25f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -58:
			SetDefaults_ForNetId(num, spawnparams, 0.8f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -59:
			SetDefaults_ForNetId(num, spawnparams, 1.15f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -60:
			SetDefaults_ForNetId(num, spawnparams, 0.92f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -61:
			SetDefaults_ForNetId(num, spawnparams, 1.1f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -62:
			SetDefaults_ForNetId(num, spawnparams, 0.78f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -63:
			SetDefaults_ForNetId(num, spawnparams, 1.16f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -64:
			SetDefaults_ForNetId(num, spawnparams, 0.87f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		case -65:
			SetDefaults_ForNetId(num, spawnparams, 1.21f);
			flag = false;
			defense = (int)((float)defense * scale);
			damage = (int)((float)damage * scale);
			life = (int)((float)life * scale);
			value = (int)(value * scale);
			npcSlots *= scale;
			knockBackResist *= 2f - scale;
			break;
		}
		netID = id;
		lifeMax = life;
		defDamage = damage;
		defDefense = defense;
		if (flag)
		{
			ScaleStats(spawnparams.playerCountForMultiplayerDifficultyOverride, spawnparams.gameModeData ?? Main.GameModeInfo, spawnparams.strengthMultiplierOverride);
			life = lifeMax;
		}
	}

	public void CloneDefaults(int Type)
	{
		int originalType = type;
		int originalNetID = netID;
		ModNPC originalModNPC = ModNPC;
		GlobalNPC[] originalGlobals = _globals;
		SetDefaultsKeepPlayerInteraction(Type);
		type = originalType;
		netID = originalNetID;
		ModNPC = originalModNPC;
		_globals = originalGlobals;
	}

	public void SetDefaultsKeepPlayerInteraction(int Type)
	{
		bool[] array = new bool[playerInteraction.Length];
		for (int i = 0; i < playerInteraction.Length; i++)
		{
			array[i] = playerInteraction[i];
		}
		SetDefaults(Type);
		for (int j = 0; j < playerInteraction.Length; j++)
		{
			playerInteraction[j] = array[j];
		}
	}

	public void SetDefaults_ForNetId(int Type, float scaleOverride)
	{
		SetDefaults(Type, new NPCSpawnParams
		{
			playerCountForMultiplayerDifficultyOverride = 1,
			sizeScaleOverride = scaleOverride,
			strengthMultiplierOverride = 1f
		});
	}

	public void SetDefaults_ForNetId(int Type, NPCSpawnParams spawnparams, float scaleOverride)
	{
		SetDefaults(Type, spawnparams.WithScale(scaleOverride));
	}

	public void SetNetShimmerEffect()
	{
		netShimmer = true;
		shimmerTransparency = 1f;
	}

	public void SetDefaults(int Type, NPCSpawnParams spawnparams = default(NPCSpawnParams))
	{
		//IL_0136: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_046d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0515: Unknown result type (might be due to invalid IL or missing references)
		//IL_066a: Unknown result type (might be due to invalid IL or missing references)
		//IL_066f: Unknown result type (might be due to invalid IL or missing references)
		//IL_14f98: Unknown result type (might be due to invalid IL or missing references)
		//IL_142e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1433: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ff3: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ff8: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d68: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d72: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d77: Unknown result type (might be due to invalid IL or missing references)
		if (!spawnparams.gameModeData.HasValue)
		{
			spawnparams.gameModeData = Main.GameModeInfo;
		}
		if (Main.getGoodWorld && spawnparams.sizeScaleOverride.HasValue)
		{
			spawnparams.sizeScaleOverride = (spawnparams.sizeScaleOverride + spawnparams.sizeScaleOverride * spawnparams.sizeScaleOverride) / 2f;
		}
		if (Type < 0)
		{
			SetDefaultsFromNetId(Type, spawnparams);
			return;
		}
		ModNPC = null;
		ShowNameOnHover = true;
		HideStrikeDamage = false;
		BossBar = null;
		_globals = null;
		GravityIgnoresLiquid = false;
		GravityIgnoresSpace = false;
		GravityIgnoresType = false;
		waterMovementSpeed = (lavaMovementSpeed = 0.5f);
		honeyMovementSpeed = 0.25f;
		netOffset *= 0f;
		altTexture = 0;
		townNpcVariationIndex = 0;
		nameOver = 0f;
		takenDamageMultiplier = 1f;
		extraValue = 0;
		for (int k = 0; k < playerInteraction.Length; k++)
		{
			playerInteraction[k] = false;
		}
		rarity = 0;
		dontCountMe = false;
		releaseOwner = 255;
		catchItem = 0;
		needsUniqueInfoUpdate = true;
		netStream = 32;
		netID = 0;
		netAlways = false;
		netSpam = 0;
		SpawnedFromStatue = false;
		CanBeReplacedByOtherNPCs = false;
		shimmerTransparency = 0f;
		if (netShimmer)
		{
			shimmerTransparency = 1f;
			netShimmer = false;
		}
		statsAreScaledForThisManyPlayers = 0;
		strengthMultiplier = 1f;
		int num = 10;
		if (Type >= 0)
		{
			num = NPCID.Sets.TrailCacheLength[Type];
		}
		if (num != oldPos.Length)
		{
			Array.Resize(ref oldPos, num);
			Array.Resize(ref oldRot, num);
		}
		for (int j2 = 0; j2 < oldPos.Length; j2++)
		{
			oldRot[j2] = 0f;
			oldPos[j2].X = 0f;
			oldPos[j2].Y = 0f;
		}
		for (int k2 = 0; k2 < maxBuffs; k2++)
		{
			buffTime[k2] = 0;
			buffType[k2] = 0;
		}
		if (buffImmune.Length != BuffLoader.BuffCount)
		{
			Array.Resize(ref buffImmune, BuffLoader.BuffCount);
		}
		for (int l2 = 0; l2 < buffImmune.Length; l2++)
		{
			buffImmune[l2] = false;
		}
		aiStyle = ((type >= NPCID.Count) ? (-1) : 0);
		setFrameSize = false;
		netSkip = -2;
		realLife = -1;
		lifeRegen = 0;
		lifeRegenExpectedLossPerSecond = -1;
		lifeRegenCount = 0;
		markedByScytheWhip = false;
		poisoned = false;
		soulDrain = false;
		venom = false;
		shadowFlame = false;
		canDisplayBuffs = true;
		onFire = false;
		midas = false;
		ichor = false;
		onFrostBurn = false;
		onFrostBurn2 = false;
		shimmering = false;
		confused = false;
		loveStruck = false;
		dontTakeDamageFromHostiles = false;
		stinky = false;
		dryadWard = false;
		onFire2 = false;
		onFire3 = false;
		justHit = false;
		dontTakeDamage = false;
		catchableNPCTempImmunityCounter = 0;
		npcSlots = 1f;
		lavaImmune = false;
		lavaWet = false;
		wetCount = 0;
		wet = false;
		townNPC = false;
		homeless = false;
		homeTileX = -1;
		homeTileY = -1;
		housingCategory = 0;
		friendly = false;
		behindTiles = false;
		boss = false;
		noTileCollide = false;
		rotation = 0f;
		active = true;
		alpha = 0;
		color = default(Color);
		collideX = false;
		collideY = false;
		direction = 0;
		oldDirection = direction;
		frameCounter = 0.0;
		netUpdate = true;
		netUpdate2 = false;
		knockBackResist = 1f;
		GivenName = "";
		noGravity = false;
		scale = 1f;
		HitSound = null;
		DeathSound = null;
		spriteDirection = -1;
		target = 255;
		oldTarget = target;
		targetRect = default(Rectangle);
		timeLeft = activeTime;
		type = Type;
		value = 0f;
		coldDamage = false;
		trapImmune = false;
		hide = false;
		immortal = false;
		chaseable = true;
		breath = 200;
		breathCounter = 0;
		reflectsProjectiles = false;
		canGhostHeal = true;
		javelined = false;
		tentacleSpiked = false;
		bloodButchered = false;
		daybreak = false;
		celled = false;
		dryadBane = false;
		betsysCurse = false;
		oiled = false;
		despawnEncouraged = false;
		for (int m2 = 0; m2 < maxAI; m2++)
		{
			ai[m2] = 0f;
		}
		for (int n2 = 0; n2 < maxAI; n2++)
		{
			localAI[n2] = 0f;
		}
		if (type == 1)
		{
			width = 24;
			height = 18;
			aiStyle = 1;
			damage = 7;
			defense = 2;
			lifeMax = 25;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			alpha = 175;
			color = new Color(0, 80, 255, 100);
			value = 25f;
		}
		else if (type == 2)
		{
			width = 30;
			height = 32;
			aiStyle = 2;
			damage = 18;
			defense = 2;
			lifeMax = 60;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.8f;
			DeathSound = SoundID.NPCDeath1;
			value = 75f;
		}
		else if (type == 3)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 14;
			defense = 6;
			lifeMax = 45;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 60f;
		}
		else if (type == 430)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 14;
			defense = 6;
			lifeMax = 45;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 60f;
		}
		else if (type == 431)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 16;
			defense = 8;
			lifeMax = 50;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.45f;
			value = 80f;
		}
		else if (type == 432)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 16;
			defense = 8;
			lifeMax = 50;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.45f;
			value = 65f;
		}
		else if (type == 433)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 13;
			defense = 6;
			lifeMax = 40;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.55f;
			value = 55f;
		}
		else if (type == 434)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 13;
			defense = 8;
			lifeMax = 45;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.45f;
			value = 80f;
		}
		else if (type == 435)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 16;
			defense = 4;
			lifeMax = 45;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.55f;
			value = 70f;
		}
		else if (type == 436)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 12;
			defense = 4;
			lifeMax = 38;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.6f;
			value = 65f;
		}
		else if (type == 4)
		{
			width = 100;
			height = 110;
			aiStyle = 4;
			damage = 15;
			defense = 12;
			lifeMax = 2800;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0f;
			noGravity = true;
			noTileCollide = true;
			SpawnWithHigherTime(30);
			boss = true;
			value = 30000f;
			npcSlots = 5f;
		}
		else if (type == 5)
		{
			width = 20;
			height = 20;
			aiStyle = 5;
			damage = 12;
			defense = 0;
			lifeMax = 8;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
		}
		else if (type == 6)
		{
			npcSlots = 1f;
			width = 30;
			height = 30;
			aiStyle = 5;
			damage = 22;
			defense = 8;
			lifeMax = 40;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			knockBackResist = 0.5f;
			value = 90f;
			if (Main.remixWorld)
			{
				scale *= 1.3f;
				damage = (int)((float)damage * scale);
				defense = (int)((float)defense * scale);
				lifeMax = (int)((float)lifeMax * scale);
				value = (int)(value * scale);
			}
			else if (Main.getGoodWorld)
			{
				scale *= 1.3f;
			}
		}
		else if (type == 7)
		{
			npcSlots = 3.5f;
			width = 22;
			height = 22;
			aiStyle = 6;
			damage = 31;
			defense = 2;
			lifeMax = 100;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			value = 140f;
			netAlways = true;
			if (Main.remixWorld)
			{
				scale *= 1.3f;
				damage = (int)((float)damage * scale);
				defense = (int)((float)defense * scale);
				lifeMax = (int)((float)lifeMax * scale);
				value = (int)(value * scale);
			}
		}
		else if (type == 8)
		{
			width = 22;
			height = 22;
			aiStyle = 6;
			netAlways = true;
			damage = 16;
			defense = 6;
			lifeMax = 100;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			value = 140f;
			dontCountMe = true;
			if (Main.remixWorld)
			{
				scale *= 1.3f;
				damage = (int)((float)damage * scale);
				defense = (int)((float)defense * scale);
				lifeMax = (int)((float)lifeMax * scale);
				value = (int)(value * scale);
			}
		}
		else if (type == 9)
		{
			width = 22;
			height = 22;
			aiStyle = 6;
			netAlways = true;
			damage = 13;
			defense = 10;
			lifeMax = 100;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			value = 140f;
			dontCountMe = true;
			if (Main.remixWorld)
			{
				scale *= 1.3f;
				damage = (int)((float)damage * scale);
				defense = (int)((float)defense * scale);
				lifeMax = (int)((float)lifeMax * scale);
				value = (int)(value * scale);
			}
		}
		else if (type == 10)
		{
			width = 14;
			height = 14;
			aiStyle = 6;
			netAlways = true;
			damage = 8;
			defense = 0;
			lifeMax = 30;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			value = 40f;
		}
		else if (type == 11)
		{
			width = 14;
			height = 14;
			aiStyle = 6;
			netAlways = true;
			damage = 4;
			defense = 4;
			lifeMax = 30;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			value = 40f;
			dontCountMe = true;
		}
		else if (type == 12)
		{
			width = 14;
			height = 14;
			aiStyle = 6;
			netAlways = true;
			damage = 4;
			defense = 6;
			lifeMax = 30;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			value = 40f;
			dontCountMe = true;
		}
		else if (type == 13)
		{
			npcSlots = 5f;
			width = 38;
			height = 38;
			aiStyle = 6;
			netAlways = true;
			damage = 22;
			defense = 2;
			lifeMax = 150;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			value = 800f;
			scale = 1f;
			alpha = 255;
		}
		else if (type == 14)
		{
			width = 38;
			height = 38;
			aiStyle = 6;
			netAlways = true;
			damage = 13;
			defense = 4;
			lifeMax = 150;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			value = 800f;
			scale = 1f;
			dontCountMe = true;
			alpha = 255;
		}
		else if (type == 15)
		{
			width = 38;
			height = 38;
			aiStyle = 6;
			netAlways = true;
			damage = 11;
			defense = 8;
			lifeMax = 150;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			value = 800f;
			scale = 1f;
			dontCountMe = true;
			alpha = 255;
		}
		else if (type == 16)
		{
			npcSlots = 2f;
			width = 36;
			height = 24;
			aiStyle = 1;
			damage = 20;
			defense = 7;
			lifeMax = 90;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			alpha = 120;
			color = new Color(0, 0, 0, 50);
			value = 75f;
			scale = 1.25f;
			knockBackResist = 0.6f;
		}
		else if (type == 17)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 18)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 19)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 20)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 21)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 20;
			defense = 8;
			lifeMax = 60;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 100f;
		}
		else if (type == 22)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 23)
		{
			width = 22;
			height = 22;
			aiStyle = 5;
			damage = 40;
			defense = 6;
			lifeMax = 26;
			HitSound = SoundID.NPCHit3;
			DeathSound = SoundID.NPCDeath3;
			noGravity = true;
			noTileCollide = true;
			value = 80f;
			knockBackResist = 0.4f;
		}
		else if (type == 24)
		{
			npcSlots = 3f;
			width = 18;
			height = 40;
			aiStyle = 8;
			damage = 30;
			defense = 16;
			lifeMax = 70;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
			lavaImmune = true;
			value = 350f;
		}
		else if (type == 25)
		{
			width = 16;
			height = 16;
			aiStyle = 9;
			damage = 30;
			defense = 0;
			lifeMax = 1;
			HitSound = SoundID.NPCHit3;
			DeathSound = SoundID.NPCDeath3;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			alpha = 100;
		}
		else if (type == 31)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 26;
			defense = 8;
			lifeMax = 80;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.8f;
			value = 130f;
		}
		else if (type == 32)
		{
			width = 18;
			height = 40;
			aiStyle = 8;
			damage = 20;
			defense = 2;
			lifeMax = 50;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.6f;
			value = 140f;
			npcSlots = 2f;
		}
		else if (type == 33)
		{
			width = 16;
			height = 16;
			aiStyle = 9;
			damage = 20;
			defense = 0;
			lifeMax = 1;
			HitSound = SoundID.NPCHit3;
			DeathSound = SoundID.NPCDeath3;
			noGravity = true;
			noTileCollide = true;
			alpha = 255;
			knockBackResist = 0f;
		}
		else if (type == 34)
		{
			width = 26;
			height = 28;
			aiStyle = 10;
			damage = 35;
			defense = 6;
			lifeMax = 40;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			noGravity = true;
			noTileCollide = true;
			value = 150f;
			knockBackResist = 0.2f;
			npcSlots = 0.75f;
		}
		else if (type == 35)
		{
			width = 80;
			height = 102;
			aiStyle = 11;
			damage = 32;
			defense = 10;
			lifeMax = 4400;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			noGravity = true;
			noTileCollide = true;
			value = 50000f;
			knockBackResist = 0f;
			boss = true;
			npcSlots = 6f;
		}
		else if (type == 36)
		{
			width = 52;
			height = 52;
			aiStyle = 12;
			damage = 20;
			defense = 14;
			lifeMax = 600;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
		}
		else if (type == 37)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 38)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 39)
		{
			npcSlots = 6f;
			width = 22;
			height = 22;
			aiStyle = 6;
			netAlways = true;
			damage = 36;
			defense = 12;
			lifeMax = 300;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath5;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			value = 1200f;
			if (Main.getGoodWorld)
			{
				lifeMax += 100;
				defense += 2;
				damage += 4;
				scale = 1.1f;
				if (Main.remixWorld)
				{
					lifeMax += 50;
					scale *= 1.2f;
					defense += 4;
				}
			}
		}
		else if (type == 40)
		{
			width = 22;
			height = 22;
			aiStyle = 6;
			netAlways = true;
			damage = 20;
			defense = 18;
			lifeMax = 300;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath5;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			value = 1200f;
			dontCountMe = true;
			if (Main.getGoodWorld)
			{
				lifeMax += 100;
				defense += 2;
				damage += 4;
				scale = 1.1f;
				if (Main.remixWorld)
				{
					lifeMax += 50;
					scale *= 1.2f;
					defense += 4;
				}
			}
		}
		else if (type == 41)
		{
			width = 22;
			height = 22;
			aiStyle = 6;
			netAlways = true;
			damage = 16;
			defense = 18;
			lifeMax = 300;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath5;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			value = 1200f;
			dontCountMe = true;
			if (Main.getGoodWorld)
			{
				lifeMax += 100;
				defense += 2;
				damage += 4;
				scale = 1.1f;
				if (Main.remixWorld)
				{
					lifeMax += 50;
					scale *= 1.2f;
					defense += 4;
				}
			}
		}
		else if (type == 42)
		{
			width = 34;
			height = 32;
			aiStyle = 5;
			damage = 26;
			defense = 12;
			lifeMax = 48;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.5f;
			DeathSound = SoundID.NPCDeath1;
			value = 200f;
			noGravity = true;
		}
		else if (type == 43)
		{
			noGravity = true;
			noTileCollide = true;
			width = 30;
			height = 30;
			aiStyle = 13;
			damage = 34;
			defense = 10;
			lifeMax = 110;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0f;
			DeathSound = SoundID.NPCDeath1;
			value = 350f;
		}
		else if (type == 44)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 22;
			defense = 9;
			lifeMax = 70;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 250f;
			rarity = 1;
		}
		else if (type == 45)
		{
			width = 18;
			height = 40;
			aiStyle = 8;
			damage = 20;
			defense = 4;
			lifeMax = 200;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.6f;
			value = 5000f;
			rarity = 4;
		}
		else if (type == 46 || type == 303 || type == 337 || type == 540)
		{
			width = 18;
			height = 20;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 2019;
		}
		else if (type == 47)
		{
			width = 18;
			height = 20;
			aiStyle = 3;
			damage = 20;
			defense = 4;
			lifeMax = 70;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 500f;
		}
		else if (type == 48)
		{
			width = 24;
			height = 34;
			aiStyle = 14;
			damage = 25;
			defense = 8;
			lifeMax = 100;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.6f;
			DeathSound = SoundID.NPCDeath1;
			value = 300f;
		}
		else if (type == 49)
		{
			npcSlots = 0.5f;
			width = 22;
			height = 18;
			aiStyle = 14;
			damage = 13;
			defense = 2;
			lifeMax = 16;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.8f;
			DeathSound = SoundID.NPCDeath4;
			value = 90f;
		}
		else if (type == 50)
		{
			boss = true;
			width = 98;
			height = 92;
			aiStyle = 15;
			damage = 40;
			defense = 10;
			lifeMax = 2000;
			knockBackResist = 0f;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			alpha = 30;
			value = 10000f;
			scale = 1.25f;
			SpawnWithHigherTime(30);
			npcSlots = 5f;
		}
		else if (type == 51)
		{
			npcSlots = 0.5f;
			width = 22;
			height = 18;
			aiStyle = 14;
			damage = 20;
			defense = 4;
			lifeMax = 34;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.8f;
			DeathSound = SoundID.NPCDeath4;
			value = 80f;
		}
		else if (type == 52)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 20;
			defense = 10;
			lifeMax = 500;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 1000f;
			rarity = 2;
		}
		else if (type == 53)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 14;
			defense = 8;
			lifeMax = 200;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 1000f;
			rarity = 2;
		}
		else if (type == 54)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 55)
		{
			noGravity = true;
			width = 20;
			height = 18;
			aiStyle = 16;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
			catchItem = 261;
		}
		else if (type == 56)
		{
			noTileCollide = true;
			noGravity = true;
			width = 30;
			height = 30;
			aiStyle = 13;
			damage = 25;
			defense = 10;
			lifeMax = 60;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0f;
			DeathSound = SoundID.NPCDeath1;
			value = 90f;
		}
		else if (type == 57)
		{
			noGravity = true;
			width = 18;
			height = 20;
			aiStyle = 16;
			damage = 30;
			defense = 6;
			lifeMax = 100;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 500f;
		}
		else if (type == 58)
		{
			npcSlots = 0.5f;
			noGravity = true;
			width = 18;
			height = 20;
			aiStyle = 16;
			damage = 25;
			defense = 2;
			lifeMax = 30;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 50f;
		}
		else if (type == 59)
		{
			width = 24;
			height = 18;
			aiStyle = 1;
			damage = 15;
			defense = 10;
			lifeMax = 50;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			scale = 1.1f;
			alpha = 50;
			lavaImmune = true;
			value = 120f;
			if (Main.remixWorld)
			{
				damage = 7;
				defense = 2;
				lifeMax = 25;
				value = 25f;
			}
		}
		else if (type == 60)
		{
			npcSlots = 0.5f;
			width = 22;
			height = 18;
			aiStyle = 14;
			damage = 35;
			defense = 8;
			lifeMax = 46;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.8f;
			DeathSound = SoundID.NPCDeath4;
			value = 120f;
			scale = 1.1f;
			lavaImmune = true;
		}
		else if (type == 61)
		{
			width = 36;
			height = 36;
			aiStyle = 17;
			damage = 15;
			defense = 4;
			lifeMax = 40;
			knockBackResist = 0.8f;
			HitSound = SoundID.NPCHit28;
			DeathSound = SoundID.NPCDeath31;
			value = 60f;
		}
		else if (type == 62)
		{
			npcSlots = 2f;
			width = 28;
			height = 48;
			aiStyle = 14;
			damage = 32;
			defense = 8;
			lifeMax = 120;
			HitSound = SoundID.NPCHit21;
			knockBackResist = 0.8f;
			DeathSound = SoundID.NPCDeath24;
			value = 300f;
			lavaImmune = true;
		}
		else if (type == 63)
		{
			noGravity = true;
			width = 26;
			height = 26;
			aiStyle = 18;
			damage = 25;
			defense = 4;
			lifeMax = 34;
			HitSound = SoundID.NPCHit25;
			DeathSound = SoundID.NPCDeath28;
			value = 100f;
			alpha = 20;
		}
		else if (type == 64)
		{
			noGravity = true;
			width = 26;
			height = 26;
			aiStyle = 18;
			damage = 30;
			defense = 6;
			lifeMax = 70;
			HitSound = SoundID.NPCHit25;
			DeathSound = SoundID.NPCDeath28;
			value = 100f;
			alpha = 20;
		}
		else if (type == 65)
		{
			noGravity = true;
			width = 100;
			height = 24;
			aiStyle = 16;
			damage = 40;
			defense = 2;
			lifeMax = 300;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 400f;
			knockBackResist = 0.7f;
		}
		else if (type == 66)
		{
			npcSlots = 2f;
			width = 28;
			height = 48;
			aiStyle = 14;
			damage = 32;
			defense = 8;
			lifeMax = 140;
			HitSound = SoundID.NPCHit21;
			knockBackResist = 0.8f;
			DeathSound = SoundID.NPCDeath24;
			value = 1000f;
			lavaImmune = true;
			rarity = 1;
		}
		else if (type == 67)
		{
			width = 28;
			height = 20;
			aiStyle = 3;
			damage = 20;
			defense = 10;
			lifeMax = 40;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 60f;
		}
		else if (type == 68)
		{
			width = 80;
			height = 102;
			aiStyle = 11;
			damage = 1000;
			defense = 9999;
			lifeMax = 9999;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
		}
		else if (type == 69)
		{
			width = 24;
			height = 24;
			aiStyle = 19;
			damage = 10;
			defense = 6;
			lifeMax = 45;
			HitSound = SoundID.NPCHit31;
			DeathSound = SoundID.NPCDeath34;
			knockBackResist = 0f;
			value = 60f;
			behindTiles = true;
		}
		else if (type == 70)
		{
			npcSlots = 0.3f;
			width = 34;
			height = 34;
			aiStyle = 20;
			damage = 32;
			defense = 100;
			lifeMax = 100;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0f;
			noGravity = true;
			noTileCollide = true;
			dontTakeDamage = true;
			scale = 1.5f;
		}
		else if (type == 71)
		{
			npcSlots = 2f;
			width = 36;
			height = 24;
			aiStyle = 1;
			damage = 30;
			defense = 7;
			lifeMax = 150;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			alpha = 60;
			value = 150f;
			scale = 1.25f;
			knockBackResist = 0.6f;
			rarity = 1;
		}
		else if (type == 72)
		{
			npcSlots = 0.3f;
			width = 34;
			height = 34;
			aiStyle = 21;
			damage = 24;
			defense = 100;
			lifeMax = 100;
			alpha = 100;
			behindTiles = true;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0f;
			noGravity = true;
			dontTakeDamage = true;
			scale = 1.2f;
		}
		else if (type == 73)
		{
			scale = 0.95f;
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 20;
			defense = 6;
			lifeMax = 80;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.7f;
			value = 200f;
			rarity = 1;
		}
		else if (type == 74 || type == 297 || type == 298)
		{
			width = 14;
			height = 14;
			aiStyle = 24;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.8f;
			DeathSound = SoundID.NPCDeath1;
			if (type == 74)
			{
				catchItem = 2015;
			}
			if (type == 297)
			{
				catchItem = 2016;
			}
			if (type == 298)
			{
				catchItem = 2017;
			}
			npcSlots = 0.4f;
		}
		else if (type == 75)
		{
			noGravity = true;
			width = 20;
			height = 20;
			aiStyle = 22;
			damage = 55;
			defense = 20;
			lifeMax = 150;
			HitSound = SoundID.NPCHit5;
			knockBackResist = 0.6f;
			DeathSound = SoundID.NPCDeath7;
			value = 350f;
		}
		else if (type == 77)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 40;
			defense = 28;
			lifeMax = 260;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.4f;
			value = 400f;
		}
		else if (type == 78)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 50;
			defense = 16;
			lifeMax = 130;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0.6f;
			value = 600f;
		}
		else if (type == 79)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 60;
			defense = 18;
			lifeMax = 180;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0.5f;
			value = 700f;
		}
		else if (type == 80)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 55;
			defense = 18;
			lifeMax = 200;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0.55f;
			value = 700f;
		}
		else if (type == 81)
		{
			width = 40;
			height = 30;
			aiStyle = 1;
			damage = 55;
			defense = 20;
			lifeMax = 170;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			alpha = 55;
			value = 400f;
			scale = 1.1f;
		}
		else if (type == 82)
		{
			noGravity = true;
			noTileCollide = true;
			width = 24;
			height = 44;
			aiStyle = 22;
			damage = 65;
			defense = 16;
			lifeMax = 160;
			HitSound = SoundID.NPCHit54;
			DeathSound = SoundID.NPCDeath52;
			alpha = 100;
			value = 500f;
			knockBackResist = 0.7f;
			if (Main.remixWorld)
			{
				scale *= 1.2f;
				damage = (int)((float)damage * scale);
				defense = (int)((float)defense * scale);
				lifeMax = (int)((float)lifeMax * scale);
				value = (int)(value * scale);
			}
		}
		else if (type == 83)
		{
			width = 40;
			height = 40;
			aiStyle = 23;
			damage = 80;
			defense = 18;
			lifeMax = 200;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath6;
			value = 1000f;
			knockBackResist = 0.4f;
		}
		else if (type == 84)
		{
			width = 40;
			height = 40;
			aiStyle = 23;
			damage = 80;
			defense = 18;
			lifeMax = 200;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath6;
			value = 1000f;
			knockBackResist = 0.4f;
		}
		else if (type == 85)
		{
			width = 24;
			height = 24;
			aiStyle = 25;
			damage = 80;
			defense = 30;
			lifeMax = 500;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath6;
			value = 100000f;
			knockBackResist = 0.3f;
			rarity = 4;
			if (Main.remixWorld && !Main.hardMode)
			{
				damage = 30;
				defense = 12;
				lifeMax = 300;
				value = Item.buyPrice(0, 2);
			}
		}
		else if (type == 86)
		{
			width = 46;
			height = 42;
			aiStyle = 26;
			damage = 65;
			defense = 30;
			lifeMax = 400;
			HitSound = SoundID.NPCHit12;
			DeathSound = SoundID.NPCDeath18;
			knockBackResist = 0.3f;
			value = 1000f;
		}
		else if (type == 87)
		{
			noTileCollide = true;
			npcSlots = 5f;
			width = 32;
			height = 32;
			aiStyle = 6;
			netAlways = true;
			damage = 80;
			defense = 10;
			lifeMax = 4000;
			HitSound = SoundID.NPCHit7;
			DeathSound = SoundID.NPCDeath8;
			noGravity = true;
			knockBackResist = 0f;
			value = 10000f;
			scale = 1f;
		}
		else if (type == 88)
		{
			noTileCollide = true;
			width = 32;
			height = 32;
			aiStyle = 6;
			netAlways = true;
			damage = 40;
			defense = 20;
			lifeMax = 4000;
			HitSound = SoundID.NPCHit7;
			DeathSound = SoundID.NPCDeath8;
			noGravity = true;
			knockBackResist = 0f;
			value = 10000f;
			scale = 1f;
			dontCountMe = true;
		}
		else if (type == 89)
		{
			noTileCollide = true;
			width = 32;
			height = 32;
			aiStyle = 6;
			netAlways = true;
			damage = 40;
			defense = 20;
			lifeMax = 4000;
			HitSound = SoundID.NPCHit7;
			DeathSound = SoundID.NPCDeath8;
			noGravity = true;
			knockBackResist = 0f;
			value = 2000f;
			scale = 1f;
			dontCountMe = true;
		}
		else if (type == 90)
		{
			noTileCollide = true;
			width = 32;
			height = 32;
			aiStyle = 6;
			netAlways = true;
			damage = 40;
			defense = 20;
			lifeMax = 4000;
			HitSound = SoundID.NPCHit7;
			DeathSound = SoundID.NPCDeath8;
			noGravity = true;
			knockBackResist = 0f;
			value = 10000f;
			scale = 1f;
			dontCountMe = true;
		}
		else if (type == 91)
		{
			noTileCollide = true;
			width = 32;
			height = 32;
			aiStyle = 6;
			netAlways = true;
			damage = 40;
			defense = 20;
			lifeMax = 4000;
			HitSound = SoundID.NPCHit7;
			DeathSound = SoundID.NPCDeath8;
			noGravity = true;
			knockBackResist = 0f;
			value = 10000f;
			scale = 1f;
			dontCountMe = true;
		}
		else if (type == 92)
		{
			noTileCollide = true;
			width = 32;
			height = 32;
			aiStyle = 6;
			netAlways = true;
			damage = 40;
			defense = 20;
			lifeMax = 4000;
			HitSound = SoundID.NPCHit7;
			DeathSound = SoundID.NPCDeath8;
			noGravity = true;
			knockBackResist = 0f;
			value = 10000f;
			scale = 1f;
			dontCountMe = true;
		}
		else if (type == 93)
		{
			npcSlots = 0.5f;
			width = 26;
			height = 20;
			aiStyle = 14;
			damage = 45;
			defense = 16;
			lifeMax = 100;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.75f;
			DeathSound = SoundID.NPCDeath4;
			value = 400f;
		}
		else if (type == 94)
		{
			npcSlots = 1f;
			width = 44;
			height = 44;
			aiStyle = 5;
			damage = 60;
			defense = 32;
			lifeMax = 230;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			knockBackResist = 0.55f;
			value = 500f;
		}
		else if (type == 95)
		{
			width = 22;
			height = 22;
			aiStyle = 6;
			netAlways = true;
			damage = 45;
			defense = 10;
			lifeMax = 200;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			scale = 0.9f;
			value = 300f;
		}
		else if (type == 96)
		{
			width = 22;
			height = 22;
			aiStyle = 6;
			netAlways = true;
			damage = 28;
			defense = 20;
			lifeMax = 200;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			scale = 0.9f;
			value = 300f;
			dontCountMe = true;
		}
		else if (type == 97)
		{
			width = 22;
			height = 22;
			aiStyle = 6;
			netAlways = true;
			damage = 26;
			defense = 30;
			lifeMax = 200;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			scale = 0.9f;
			value = 300f;
			dontCountMe = true;
		}
		else if (type == 98)
		{
			npcSlots = 3.5f;
			width = 22;
			height = 22;
			aiStyle = 6;
			netAlways = true;
			damage = 70;
			defense = 36;
			lifeMax = 500;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			value = 700f;
		}
		else if (type == 99)
		{
			width = 22;
			height = 22;
			aiStyle = 6;
			netAlways = true;
			damage = 55;
			defense = 40;
			lifeMax = 500;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			value = 700f;
			dontCountMe = true;
		}
		else if (type == 100)
		{
			width = 22;
			height = 22;
			aiStyle = 6;
			netAlways = true;
			damage = 40;
			defense = 44;
			lifeMax = 500;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			value = 700f;
			dontCountMe = true;
		}
		else if (type == 101)
		{
			noGravity = true;
			noTileCollide = true;
			behindTiles = true;
			width = 30;
			height = 30;
			aiStyle = 13;
			damage = 70;
			defense = 30;
			lifeMax = 320;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.2f;
			DeathSound = SoundID.NPCDeath1;
			value = 600f;
		}
		else if (type == 102)
		{
			npcSlots = 0.5f;
			noGravity = true;
			width = 18;
			height = 20;
			aiStyle = 16;
			damage = 80;
			defense = 22;
			lifeMax = 90;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 500f;
		}
		else if (type == 103)
		{
			noGravity = true;
			width = 26;
			height = 26;
			aiStyle = 18;
			damage = 80;
			defense = 30;
			lifeMax = 120;
			HitSound = SoundID.NPCHit25;
			DeathSound = SoundID.NPCDeath28;
			value = 800f;
			alpha = 20;
		}
		else if (type == 104)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 70;
			defense = 38;
			lifeMax = 350;
			HitSound = SoundID.NPCHit6;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.4f;
			value = 1000f;
		}
		else if (type == 105)
		{
			friendly = true;
			width = 18;
			height = 34;
			aiStyle = 0;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
			rarity = 1;
		}
		else if (type == 106)
		{
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 0;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
			rarity = 1;
		}
		else if (type == 107)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 108)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 109)
		{
			width = 34;
			height = 78;
			aiStyle = 3;
			damage = 60;
			defense = 25;
			lifeMax = 800;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.2f;
			value = 10000f;
			rarity = 1;
		}
		else if (type == 110)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 45;
			defense = 14;
			lifeMax = 210;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.55f;
			value = 400f;
		}
		else if (type == 112)
		{
			width = 16;
			height = 16;
			aiStyle = 9;
			damage = 65;
			defense = 0;
			lifeMax = 1;
			HitSound = null;
			DeathSound = SoundID.NPCDeath9;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			scale = 0.9f;
			alpha = 80;
		}
		else if (type == 113)
		{
			npcSlots = 10f;
			width = 100;
			height = 100;
			aiStyle = 27;
			damage = 50;
			defense = 12;
			lifeMax = 8000;
			HitSound = SoundID.NPCHit8;
			DeathSound = SoundID.NPCDeath10;
			noGravity = true;
			noTileCollide = true;
			behindTiles = true;
			knockBackResist = 0f;
			scale = 1.2f;
			boss = true;
			value = 80000f;
		}
		else if (type == 114)
		{
			width = 100;
			height = 100;
			aiStyle = 28;
			damage = 50;
			defense = 0;
			lifeMax = 8000;
			HitSound = SoundID.NPCHit8;
			DeathSound = SoundID.NPCDeath10;
			noGravity = true;
			noTileCollide = true;
			behindTiles = true;
			knockBackResist = 0f;
			scale = 1.2f;
			value = 80000f;
		}
		else if (type == 115)
		{
			width = 30;
			height = 30;
			aiStyle = 29;
			damage = 30;
			defense = 10;
			lifeMax = 240;
			HitSound = SoundID.NPCHit9;
			DeathSound = SoundID.NPCDeath11;
			noGravity = true;
			behindTiles = true;
			noTileCollide = true;
			knockBackResist = 1.1f;
		}
		else if (type == 116)
		{
			width = 30;
			height = 32;
			aiStyle = 2;
			damage = 30;
			defense = 6;
			lifeMax = 80;
			HitSound = SoundID.NPCHit9;
			knockBackResist = 0.8f;
			DeathSound = SoundID.NPCDeath12;
		}
		else if (type == 117)
		{
			width = 14;
			height = 14;
			aiStyle = 6;
			netAlways = true;
			damage = 26;
			defense = 2;
			lifeMax = 60;
			HitSound = SoundID.NPCHit9;
			DeathSound = SoundID.NPCDeath12;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
		}
		else if (type == 118)
		{
			width = 14;
			height = 14;
			aiStyle = 6;
			netAlways = true;
			damage = 22;
			defense = 6;
			lifeMax = 60;
			if (Main.getGoodWorld)
			{
				damage += 10;
				defense += 14;
				lifeMax *= 3;
			}
			HitSound = SoundID.NPCHit9;
			DeathSound = SoundID.NPCDeath12;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
		}
		else if (type == 119)
		{
			width = 14;
			height = 14;
			aiStyle = 6;
			netAlways = true;
			damage = 18;
			defense = 10;
			lifeMax = 60;
			HitSound = SoundID.NPCHit9;
			DeathSound = SoundID.NPCDeath12;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
		}
		else if (type == 120)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 40;
			defense = 30;
			lifeMax = 370;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0.4f;
			value = 600f;
		}
		else if (type == 121)
		{
			width = 40;
			height = 30;
			aiStyle = 14;
			damage = 45;
			defense = 20;
			lifeMax = 60;
			HitSound = SoundID.NPCHit1;
			alpha = 55;
			knockBackResist = 0.8f;
			scale = 1.1f;
		}
		else if (type == 122)
		{
			noGravity = true;
			width = 20;
			height = 20;
			aiStyle = 22;
			damage = 60;
			defense = 22;
			lifeMax = 220;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.8f;
			DeathSound = SoundID.NPCDeath1;
			value = 600f;
		}
		else if (type == 123)
		{
			friendly = true;
			width = 18;
			height = 34;
			aiStyle = 0;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
			scale = 0.9f;
			rarity = 1;
		}
		else if (type == 124)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 125)
		{
			width = 100;
			height = 110;
			aiStyle = 30;
			defense = 10;
			damage = 45;
			lifeMax = 20000;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath14;
			knockBackResist = 0f;
			noGravity = true;
			noTileCollide = true;
			SpawnWithHigherTime(30);
			boss = true;
			value = 120000f;
			npcSlots = 5f;
		}
		else if (type == 126)
		{
			width = 100;
			height = 110;
			aiStyle = 31;
			defense = 10;
			damage = 50;
			lifeMax = 23000;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath14;
			knockBackResist = 0f;
			noGravity = true;
			noTileCollide = true;
			SpawnWithHigherTime(30);
			boss = true;
			value = 120000f;
			npcSlots = 5f;
		}
		else if (type == 127)
		{
			width = 80;
			height = 102;
			aiStyle = 32;
			damage = 47;
			defense = 24;
			lifeMax = 28000;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath14;
			noGravity = true;
			noTileCollide = true;
			value = 120000f;
			knockBackResist = 0f;
			boss = true;
			npcSlots = 6f;
		}
		else if (type == 128)
		{
			width = 52;
			height = 52;
			aiStyle = 35;
			damage = 30;
			defense = 23;
			lifeMax = 7000;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath14;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			netAlways = true;
		}
		else if (type == 129)
		{
			width = 52;
			height = 52;
			aiStyle = 33;
			damage = 56;
			defense = 38;
			lifeMax = 9000;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath14;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			netAlways = true;
		}
		else if (type == 130)
		{
			width = 52;
			height = 52;
			aiStyle = 34;
			damage = 52;
			defense = 34;
			lifeMax = 9000;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath14;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			netAlways = true;
		}
		else if (type == 131)
		{
			width = 52;
			height = 52;
			aiStyle = 36;
			damage = 29;
			defense = 20;
			lifeMax = 6000;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath14;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			netAlways = true;
		}
		else if (type == 132)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 15;
			defense = 5;
			lifeMax = 40;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 65f;
		}
		else if (type == 133)
		{
			width = 30;
			height = 32;
			aiStyle = 2;
			damage = 40;
			defense = 20;
			lifeMax = 300;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.8f;
			DeathSound = SoundID.NPCDeath1;
			value = 500f;
		}
		else if (type == 134)
		{
			npcSlots = 5f;
			width = 38;
			height = 38;
			aiStyle = 37;
			defense = 0;
			damage = 70;
			lifeMax = 80000;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath14;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			value = 120000f;
			scale = 1.25f;
			boss = true;
			netAlways = true;
			alpha = 255;
		}
		else if (type == 135)
		{
			npcSlots = 5f;
			width = 38;
			height = 38;
			aiStyle = 37;
			damage = 55;
			defense = 30;
			lifeMax = 80000;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath14;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			netAlways = true;
			scale = 1.25f;
			dontCountMe = true;
			alpha = 255;
		}
		else if (type == 136)
		{
			npcSlots = 5f;
			width = 38;
			height = 38;
			aiStyle = 37;
			damage = 40;
			defense = 35;
			lifeMax = 80000;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath14;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			scale = 1.25f;
			netAlways = true;
			dontCountMe = true;
			alpha = 255;
		}
		else if (type == 139)
		{
			npcSlots = 1f;
			width = 30;
			height = 30;
			aiStyle = 5;
			damage = 50;
			defense = 20;
			lifeMax = 200;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath14;
			noGravity = true;
			knockBackResist = 0.8f;
			noTileCollide = true;
		}
		else if (type == 137)
		{
			width = 26;
			height = 20;
			aiStyle = 14;
			damage = 75;
			defense = 30;
			lifeMax = 200;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.75f;
			DeathSound = SoundID.NPCDeath6;
			value = 500f;
		}
		else if (type == 138)
		{
			width = 24;
			height = 18;
			aiStyle = 1;
			damage = 70;
			defense = 30;
			lifeMax = 180;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			alpha = 100;
			value = 400f;
			knockBackResist = 0.85f;
			scale = 1.05f;
		}
		else if (type == 140)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 55;
			defense = 28;
			lifeMax = 260;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0.4f;
			value = 400f;
		}
		else if (type == 141)
		{
			width = 34;
			height = 28;
			aiStyle = 1;
			damage = 50;
			defense = 18;
			lifeMax = 150;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			alpha = 55;
			value = 400f;
			scale = 1.1f;
			knockBackResist = 0.8f;
		}
		else if (type == 142)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 143)
		{
			width = 26;
			height = 40;
			aiStyle = 38;
			damage = 50;
			defense = 20;
			lifeMax = 200;
			HitSound = SoundID.NPCHit11;
			DeathSound = SoundID.NPCDeath15;
			knockBackResist = 0.6f;
			value = 400f;
			coldDamage = true;
		}
		else if (type == 144)
		{
			width = 26;
			height = 40;
			aiStyle = 38;
			damage = 65;
			defense = 26;
			lifeMax = 240;
			HitSound = SoundID.NPCHit11;
			DeathSound = SoundID.NPCDeath15;
			knockBackResist = 0.6f;
			value = 400f;
			coldDamage = true;
		}
		else if (type == 145)
		{
			width = 26;
			height = 40;
			aiStyle = 38;
			damage = 55;
			defense = 22;
			lifeMax = 220;
			HitSound = SoundID.NPCHit11;
			DeathSound = SoundID.NPCDeath15;
			knockBackResist = 0.6f;
			value = 400f;
			coldDamage = true;
		}
		else if (type == 147)
		{
			width = 24;
			height = 18;
			aiStyle = 1;
			damage = 8;
			defense = 4;
			lifeMax = 30;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			alpha = 50;
			value = 50f;
			coldDamage = true;
		}
		else if (type == 148)
		{
			width = 16;
			height = 34;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 2205;
		}
		else if (type == 149)
		{
			width = 16;
			height = 34;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 2205;
		}
		else if (type == 150)
		{
			npcSlots = 0.5f;
			width = 22;
			height = 22;
			aiStyle = 14;
			damage = 18;
			defense = 6;
			lifeMax = 30;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.8f;
			DeathSound = SoundID.NPCDeath4;
			value = 250f;
			coldDamage = true;
		}
		else if (type == 151)
		{
			npcSlots = 0.5f;
			width = 22;
			height = 22;
			aiStyle = 14;
			damage = 50;
			defense = 16;
			lifeMax = 160;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.6f;
			DeathSound = SoundID.NPCDeath4;
			value = 400f;
			scale = 1.15f;
			lavaImmune = true;
		}
		else if (type == 152)
		{
			npcSlots = 0.5f;
			width = 38;
			height = 34;
			aiStyle = 14;
			damage = 80;
			defense = 24;
			lifeMax = 220;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.65f;
			DeathSound = SoundID.NPCDeath4;
			value = 400f;
		}
		else if (type == 153)
		{
			npcSlots = 2f;
			width = 46;
			height = 32;
			aiStyle = 39;
			damage = 80;
			defense = 30;
			lifeMax = 470;
			HitSound = SoundID.NPCHit24;
			knockBackResist = 0.3f;
			DeathSound = SoundID.NPCDeath27;
			value = 500f;
			noGravity = false;
		}
		else if (type == 154)
		{
			npcSlots = 1.5f;
			width = 46;
			height = 32;
			aiStyle = 39;
			damage = 55;
			defense = 28;
			lifeMax = 400;
			HitSound = SoundID.NPCHit24;
			knockBackResist = 0.3f;
			DeathSound = SoundID.NPCDeath27;
			value = 450f;
			noGravity = false;
			coldDamage = true;
		}
		else if (type == 155)
		{
			width = 46;
			height = 30;
			aiStyle = 26;
			damage = 65;
			defense = 30;
			lifeMax = 300;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.3f;
			value = 1000f;
		}
		else if (type == 156)
		{
			npcSlots = 2f;
			width = 28;
			height = 48;
			aiStyle = 14;
			damage = 50;
			defense = 40;
			lifeMax = 600;
			HitSound = SoundID.NPCHit21;
			knockBackResist = 0.5f;
			DeathSound = SoundID.NPCDeath24;
			value = 1200f;
			lavaImmune = true;
		}
		else if (type == 157)
		{
			npcSlots = 0.5f;
			noGravity = true;
			width = 74;
			height = 20;
			aiStyle = 16;
			damage = 75;
			defense = 30;
			lifeMax = 200;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 500f;
		}
		else if (type == 160)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 161)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 16;
			defense = 8;
			lifeMax = 50;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.45f;
			value = 80f;
		}
		else if (type == 163)
		{
			width = 50;
			height = 20;
			aiStyle = 3;
			damage = 90;
			defense = 40;
			lifeMax = 350;
			HitSound = SoundID.NPCHit29;
			DeathSound = SoundID.NPCDeath32;
			knockBackResist = 0.25f;
			value = 500f;
			npcSlots = 0.5f;
			SpawnWithHigherTime(2);
		}
		else if (type == 238)
		{
			noGravity = true;
			width = 36;
			height = 36;
			aiStyle = 40;
			damage = 100;
			defense = 40;
			lifeMax = 350;
			HitSound = SoundID.NPCHit29;
			DeathSound = SoundID.NPCDeath32;
			knockBackResist = 0.25f;
			value = 500f;
			SpawnWithHigherTime(2);
			npcSlots = 0.5f;
		}
		else if (type == 164)
		{
			width = 50;
			height = 20;
			aiStyle = 3;
			damage = 30;
			defense = 10;
			lifeMax = 80;
			HitSound = SoundID.NPCHit29;
			DeathSound = SoundID.NPCDeath32;
			knockBackResist = 0.25f;
			value = 100f;
			SpawnWithHigherTime(2);
			npcSlots = 0.5f;
		}
		else if (type == 165)
		{
			noGravity = true;
			width = 36;
			height = 36;
			aiStyle = 40;
			damage = 30;
			defense = 10;
			lifeMax = 80;
			HitSound = SoundID.NPCHit29;
			DeathSound = SoundID.NPCDeath32;
			knockBackResist = 0.25f;
			value = 100f;
			SpawnWithHigherTime(2);
			npcSlots = 0.5f;
		}
		else if (type == 167)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 24;
			defense = 10;
			lifeMax = 70;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 200f;
		}
		else if (type == 168)
		{
			width = 16;
			height = 34;
			aiStyle = 3;
			damage = 20;
			defense = 4;
			lifeMax = 70;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 500f;
		}
		else if (type == 169)
		{
			noGravity = true;
			width = 18;
			height = 40;
			aiStyle = 22;
			damage = 55;
			defense = 20;
			lifeMax = 200;
			HitSound = SoundID.NPCHit5;
			knockBackResist = 0.6f;
			DeathSound = SoundID.NPCDeath7;
			value = 1500f;
			coldDamage = true;
		}
		else if (type == 170)
		{
			width = 44;
			height = 36;
			aiStyle = 2;
			damage = 70;
			defense = 16;
			lifeMax = 210;
			HitSound = SoundID.NPCHit27;
			DeathSound = SoundID.NPCDeath30;
			knockBackResist = 0.5f;
			value = 2000f;
		}
		else if (type == 171)
		{
			width = 44;
			height = 36;
			aiStyle = 2;
			damage = 70;
			defense = 16;
			lifeMax = 210;
			HitSound = SoundID.NPCHit27;
			DeathSound = SoundID.NPCDeath30;
			knockBackResist = 0.5f;
			value = 2000f;
		}
		else if (type == 172)
		{
			width = 18;
			height = 40;
			aiStyle = 8;
			damage = 200;
			defense = 30;
			lifeMax = 600;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.3f;
			value = 5000f;
			rarity = 4;
		}
		else if (type == 173)
		{
			npcSlots = 1f;
			width = 30;
			height = 30;
			aiStyle = 5;
			damage = 22;
			defense = 8;
			lifeMax = 40;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			knockBackResist = 0.5f;
			value = 90f;
			if (Main.remixWorld)
			{
				scale *= 1.3f;
				damage = (int)((float)damage * scale);
				defense = (int)((float)defense * scale);
				lifeMax = (int)((float)lifeMax * scale);
				value = (int)(value * scale);
			}
		}
		else if (type == 174)
		{
			npcSlots = 1f;
			width = 52;
			height = 26;
			aiStyle = 41;
			damage = 65;
			defense = 26;
			lifeMax = 220;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.3f;
			value = 450f;
		}
		else if (type == 175)
		{
			noGravity = true;
			noTileCollide = true;
			width = 30;
			height = 30;
			aiStyle = 13;
			damage = 100;
			defense = 30;
			lifeMax = 300;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.25f;
			DeathSound = SoundID.NPCDeath1;
			value = 650f;
		}
		else if (type == 176)
		{
			width = 34;
			height = 32;
			aiStyle = 5;
			damage = 70;
			defense = 22;
			lifeMax = 220;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.5f;
			DeathSound = SoundID.NPCDeath1;
			value = 600f;
			noGravity = true;
			npcSlots = 1.5f;
		}
		else if (type == 177)
		{
			npcSlots = 1f;
			width = 58;
			height = 44;
			aiStyle = 41;
			damage = 80;
			defense = 26;
			lifeMax = 300;
			HitSound = SoundID.NPCHit22;
			DeathSound = SoundID.NPCDeath25;
			knockBackResist = 0.5f;
			value = 500f;
		}
		else if (type == 178)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 179)
		{
			width = 40;
			height = 40;
			aiStyle = 23;
			damage = 80;
			defense = 18;
			lifeMax = 200;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath6;
			value = 1000f;
			knockBackResist = 0.4f;
		}
		else if (type == 180)
		{
			width = 44;
			height = 36;
			aiStyle = 2;
			damage = 70;
			defense = 16;
			lifeMax = 210;
			HitSound = SoundID.NPCHit27;
			DeathSound = SoundID.NPCDeath30;
			knockBackResist = 0.5f;
			value = 2000f;
		}
		else if (type == 181)
		{
			width = 18;
			height = 44;
			aiStyle = 3;
			damage = 25;
			defense = 10;
			lifeMax = 70;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.4f;
			value = 200f;
			if (Main.remixWorld)
			{
				scale *= 1.1f;
				damage = (int)((double)((float)damage * scale) * 1.2);
				defense = (int)((double)((float)defense * scale) * 1.2);
				lifeMax = (int)((double)((float)lifeMax * scale) * 1.2);
				value = (int)((double)(value * scale) * 1.2);
			}
		}
		else if (type == 182)
		{
			noGravity = true;
			noTileCollide = true;
			width = 24;
			height = 62;
			aiStyle = 22;
			damage = 65;
			defense = 18;
			lifeMax = 240;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			alpha = 100;
			value = 500f;
			knockBackResist = 0.7f;
		}
		else if (type == 183)
		{
			width = 40;
			height = 30;
			aiStyle = 1;
			damage = 60;
			defense = 26;
			lifeMax = 200;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			alpha = 55;
			value = 400f;
			scale = 1.1f;
		}
		else if (type == 184)
		{
			width = 24;
			height = 18;
			aiStyle = 1;
			damage = 12;
			defense = 8;
			lifeMax = 60;
			scale = 1.1f;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			alpha = 50;
			value = 200f;
			coldDamage = true;
		}
		else if (type == 185)
		{
			width = 28;
			height = 28;
			aiStyle = 3;
			damage = 26;
			defense = 12;
			lifeMax = 70;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 1.1f;
			value = 200f;
			coldDamage = true;
		}
		else if (type == 186)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 16;
			defense = 8;
			lifeMax = 50;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.45f;
			value = 65f;
		}
		else if (type == 187)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 13;
			defense = 6;
			lifeMax = 40;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.55f;
			value = 55f;
		}
		else if (type == 188)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 13;
			defense = 8;
			lifeMax = 45;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.45f;
			value = 80f;
		}
		else if (type == 189)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 16;
			defense = 4;
			lifeMax = 45;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.55f;
			value = 70f;
		}
		else if (type == 190)
		{
			width = 30;
			height = 32;
			aiStyle = 2;
			damage = 18;
			defense = 4;
			lifeMax = 65;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.7f;
			DeathSound = SoundID.NPCDeath1;
			value = 75f;
		}
		else if (type == 191)
		{
			width = 30;
			height = 32;
			aiStyle = 2;
			damage = 16;
			defense = 2;
			lifeMax = 60;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.85f;
			DeathSound = SoundID.NPCDeath1;
			value = 75f;
		}
		else if (type == 192)
		{
			width = 30;
			height = 32;
			aiStyle = 2;
			damage = 18;
			defense = 2;
			lifeMax = 50;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.8f;
			DeathSound = SoundID.NPCDeath1;
			value = 75f;
		}
		else if (type == 193)
		{
			width = 30;
			height = 32;
			aiStyle = 2;
			damage = 20;
			defense = 0;
			lifeMax = 60;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.8f;
			DeathSound = SoundID.NPCDeath1;
			value = 75f;
		}
		else if (type == 194)
		{
			width = 30;
			height = 32;
			aiStyle = 2;
			damage = 14;
			defense = 4;
			lifeMax = 60;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.8f;
			DeathSound = SoundID.NPCDeath1;
			value = 75f;
		}
		else if (type == 195)
		{
			width = 18;
			height = 40;
			aiStyle = 42;
			damage = 10;
			defense = 30;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
			rarity = 2;
			value = Item.buyPrice(0, 2);
		}
		else if (type == 196)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 35;
			defense = 16;
			lifeMax = 300;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.4f;
			value = Item.buyPrice(0, 2);
			rarity = 2;
		}
		else if (type == 197)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 50;
			defense = 28;
			lifeMax = 280;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.45f;
			value = 500f;
		}
		else if (type == 198)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 38;
			defense = 20;
			lifeMax = 400;
			HitSound = SoundID.NPCHit26;
			DeathSound = SoundID.NPCDeath29;
			knockBackResist = 0.4f;
			value = 650f;
		}
		else if (type == 199)
		{
			width = 42;
			height = 30;
			aiStyle = 3;
			damage = 60;
			defense = 30;
			lifeMax = 400;
			HitSound = SoundID.NPCHit26;
			DeathSound = SoundID.NPCDeath29;
			knockBackResist = 0f;
			value = 650f;
		}
		else if (type == 200)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 12;
			defense = 4;
			lifeMax = 38;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.6f;
			value = 65f;
		}
		else if (type == 201)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 20;
			defense = 12;
			lifeMax = 55;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 130f;
		}
		else if (type == 202)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 18;
			defense = 8;
			lifeMax = 65;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 120f;
		}
		else if (type == 203)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 22;
			defense = 8;
			lifeMax = 60;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 110f;
		}
		else if (type == 204)
		{
			width = 24;
			height = 18;
			aiStyle = 1;
			damage = 28;
			defense = 8;
			lifeMax = 65;
			scale = 1.15f;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			alpha = 50;
			value = 300f;
		}
		else if (type == 205)
		{
			width = 40;
			height = 40;
			aiStyle = 5;
			damage = 70;
			defense = 28;
			lifeMax = 1000;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.4f;
			DeathSound = SoundID.NPCDeath1;
			value = 600f;
			noGravity = true;
			rarity = 2;
		}
		else if (type == 206)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 60;
			defense = 30;
			lifeMax = 280;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
			value = 500f;
			coldDamage = true;
		}
		else if (type == 207)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 208)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 209)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 210)
		{
			width = 12;
			height = 12;
			aiStyle = 5;
			damage = 20;
			defense = 5;
			lifeMax = 20;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.5f;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
		}
		else if (type == 211)
		{
			width = 8;
			height = 8;
			aiStyle = 5;
			damage = 15;
			defense = 2;
			lifeMax = 10;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.5f;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
		}
		else if (type == 212)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 35;
			defense = 17;
			lifeMax = 300;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.4f;
			value = 700f;
		}
		else if (type == 213)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 50;
			defense = 22;
			lifeMax = 450;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.2f;
			value = 1000f;
		}
		else if (type == 214)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 30;
			defense = 14;
			lifeMax = 225;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.3f;
			value = 1000f;
		}
		else if (type == 215)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 35;
			defense = 20;
			lifeMax = 350;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.35f;
			value = 1500f;
		}
		else if (type == 216)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 70;
			defense = 30;
			lifeMax = 3000;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0f;
			value = 50000f;
			rarity = 1;
		}
		else if (type == 217)
		{
			width = 28;
			height = 20;
			aiStyle = 3;
			damage = 20;
			defense = 10;
			lifeMax = 40;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath16;
			value = 60f;
			rarity = 1;
		}
		else if (type == 218)
		{
			width = 28;
			height = 20;
			aiStyle = 3;
			damage = 20;
			defense = 10;
			lifeMax = 40;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath16;
			value = 60f;
			rarity = 1;
		}
		else if (type == 219)
		{
			width = 28;
			height = 20;
			aiStyle = 3;
			damage = 20;
			defense = 10;
			lifeMax = 40;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath16;
			value = 60f;
			rarity = 1;
		}
		else if (type == 220)
		{
			width = 28;
			height = 20;
			aiStyle = 3;
			damage = 20;
			defense = 10;
			lifeMax = 40;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 60f;
			rarity = 2;
		}
		else if (type == 221)
		{
			noGravity = true;
			width = 26;
			height = 26;
			aiStyle = 18;
			damage = 20;
			defense = 2;
			lifeMax = 30;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 100f;
			alpha = 20;
			rarity = 1;
		}
		else if (type == 222)
		{
			width = 66;
			height = 66;
			aiStyle = 43;
			damage = 30;
			defense = 8;
			lifeMax = 3400;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath66;
			knockBackResist = 0f;
			noGravity = true;
			noTileCollide = true;
			SpawnWithHigherTime(30);
			boss = true;
			value = 50000f;
			npcSlots = 7f;
		}
		else if (type == 223)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 16;
			defense = 8;
			lifeMax = 50;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.45f;
			value = 70f;
		}
		else if (type == 224)
		{
			width = 32;
			height = 18;
			aiStyle = 44;
			damage = 9;
			defense = 4;
			lifeMax = 20;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.8f;
			DeathSound = SoundID.NPCDeath1;
			value = 300f;
		}
		if (type == 225)
		{
			width = 38;
			height = 26;
			aiStyle = 1;
			damage = 10;
			defense = 5;
			lifeMax = 35;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.75f;
			value = 200f;
		}
		else if (type == 226)
		{
			npcSlots = 0.5f;
			width = 34;
			height = 50;
			aiStyle = 14;
			damage = 85;
			defense = 28;
			lifeMax = 260;
			HitSound = SoundID.NPCHit23;
			knockBackResist = 0.65f;
			DeathSound = SoundID.NPCDeath26;
			value = 400f;
		}
		else if (type == 227)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 228)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 229)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 230)
		{
			width = 18;
			height = 20;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 261;
		}
		else if (type == 231)
		{
			width = 34;
			height = 32;
			aiStyle = 5;
			damage = 22;
			defense = 16;
			lifeMax = 50;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.3f;
			DeathSound = SoundID.NPCDeath1;
			value = 200f;
			noGravity = true;
		}
		else if (type == 232)
		{
			width = 34;
			height = 32;
			aiStyle = 5;
			damage = 28;
			defense = 12;
			lifeMax = 42;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.6f;
			DeathSound = SoundID.NPCDeath1;
			value = 200f;
			noGravity = true;
		}
		else if (type == 233)
		{
			width = 34;
			height = 32;
			aiStyle = 5;
			damage = 30;
			defense = 14;
			lifeMax = 38;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.45f;
			DeathSound = SoundID.NPCDeath1;
			value = 200f;
			noGravity = true;
		}
		else if (type == 234)
		{
			width = 34;
			height = 32;
			aiStyle = 5;
			damage = 32;
			defense = 6;
			lifeMax = 42;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.55f;
			DeathSound = SoundID.NPCDeath1;
			value = 200f;
			noGravity = true;
		}
		else if (type == 235)
		{
			width = 34;
			height = 32;
			aiStyle = 5;
			damage = 34;
			defense = 4;
			lifeMax = 38;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.6f;
			DeathSound = SoundID.NPCDeath1;
			value = 200f;
			noGravity = true;
		}
		else if (type == 236)
		{
			width = 50;
			height = 20;
			aiStyle = 3;
			damage = 100;
			defense = 28;
			lifeMax = 400;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.25f;
			value = 1000f;
			SpawnWithHigherTime(2);
			npcSlots = 0.75f;
		}
		else if (type == 237)
		{
			noGravity = true;
			width = 36;
			height = 36;
			aiStyle = 40;
			damage = 100;
			defense = 28;
			lifeMax = 400;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.25f;
			value = 1000f;
			SpawnWithHigherTime(2);
			npcSlots = 0.75f;
		}
		else if (type == 239)
		{
			width = 50;
			height = 20;
			aiStyle = 3;
			damage = 30;
			defense = 8;
			lifeMax = 60;
			HitSound = SoundID.NPCHit20;
			DeathSound = SoundID.NPCDeath23;
			knockBackResist = 0.5f;
			value = 130f;
			SpawnWithHigherTime(2);
		}
		else if (type == 240)
		{
			noGravity = true;
			width = 36;
			height = 36;
			aiStyle = 40;
			damage = 30;
			defense = 8;
			lifeMax = 60;
			HitSound = SoundID.NPCHit20;
			DeathSound = SoundID.NPCDeath23;
			knockBackResist = 0.5f;
			value = 130f;
			SpawnWithHigherTime(2);
		}
		else if (type == 241)
		{
			npcSlots = 0.5f;
			noGravity = true;
			width = 18;
			height = 20;
			aiStyle = 16;
			damage = 50;
			defense = 20;
			lifeMax = 150;
			HitSound = SoundID.NPCHit13;
			DeathSound = SoundID.NPCDeath19;
			value = 500f;
		}
		else if (type == 242)
		{
			noGravity = true;
			width = 26;
			height = 26;
			aiStyle = 18;
			damage = 75;
			defense = 20;
			lifeMax = 150;
			HitSound = SoundID.NPCHit13;
			DeathSound = SoundID.NPCDeath19;
			value = 800f;
			alpha = 20;
		}
		else if (type == 243)
		{
			width = 30;
			height = 114;
			aiStyle = 3;
			damage = 60;
			defense = 32;
			lifeMax = 4000;
			HitSound = SoundID.NPCHit5;
			DeathSound = SoundID.NPCDeath7;
			knockBackResist = 0.05f;
			value = Item.buyPrice(0, 1, 50);
			coldDamage = true;
			rarity = 2;
		}
		else if (type == 244)
		{
			width = 60;
			height = 42;
			aiStyle = 1;
			damage = 85;
			defense = 26;
			lifeMax = 400;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			alpha = 175;
			value = Item.buyPrice(0, 0, 20);
			knockBackResist = 0.3f;
			rarity = 1;
		}
		else if (type == 245)
		{
			width = 140;
			height = 140;
			aiStyle = 45;
			damage = 72;
			defense = 26;
			lifeMax = 15000;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath14;
			knockBackResist = 0f;
			value = Item.buyPrice(0, 15);
			alpha = 255;
			boss = true;
			npcSlots = 5f;
		}
		else if (type == 246)
		{
			noGravity = true;
			width = 70;
			height = 70;
			aiStyle = 46;
			damage = 64;
			defense = 20;
			lifeMax = 25000;
			HitSound = SoundID.NPCHit4;
			DeathSound = null;
			knockBackResist = 0f;
			alpha = 255;
		}
		else if (type == 247 || type == 248)
		{
			noGravity = true;
			width = 40;
			height = 30;
			aiStyle = 47;
			damage = 59;
			defense = 28;
			lifeMax = 10000;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath14;
			alpha = 255;
			knockBackResist = 0f;
		}
		else if (type == 249)
		{
			noGravity = true;
			width = 70;
			height = 70;
			aiStyle = 48;
			damage = 80;
			defense = 32;
			lifeMax = 16000;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath14;
			knockBackResist = 0f;
			dontTakeDamage = true;
		}
		else if (type == 250)
		{
			width = 34;
			height = 26;
			aiStyle = 49;
			damage = 50;
			defense = 24;
			lifeMax = 300;
			HitSound = SoundID.NPCHit30;
			DeathSound = SoundID.NPCDeath33;
			knockBackResist = 0.3f;
			value = 300f;
		}
		else if (type == 251)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 50;
			defense = 30;
			lifeMax = 1000;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.3f;
			value = Item.buyPrice(0, 0, 50);
			rarity = 2;
		}
		else if (type == 252)
		{
			noGravity = true;
			npcSlots = 0.5f;
			width = 32;
			height = 32;
			aiStyle = 5;
			damage = 80;
			defense = 12;
			lifeMax = 100;
			HitSound = SoundID.NPCHit46;
			knockBackResist = 0.7f;
			DeathSound = SoundID.NPCDeath48;
			value = 500f;
		}
		else if (type == 254)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 40;
			defense = 10;
			lifeMax = 180;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0.4f;
			value = 1000f;
		}
		else if (type == 255)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 38;
			defense = 16;
			lifeMax = 220;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0.3f;
			value = 1200f;
		}
		else if (type == 256)
		{
			noGravity = true;
			width = 26;
			height = 26;
			aiStyle = 18;
			damage = 90;
			defense = 20;
			lifeMax = 140;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			value = 1200f;
			alpha = 20;
			npcSlots = 0.3f;
		}
		else if (type == 257)
		{
			width = 44;
			height = 34;
			aiStyle = 3;
			damage = 38;
			defense = 24;
			lifeMax = 230;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0.3f;
			value = 1300f;
			npcSlots = 0.3f;
		}
		else if (type == 258)
		{
			width = 30;
			height = 24;
			aiStyle = 3;
			damage = 60;
			defense = 16;
			lifeMax = 220;
			HitSound = SoundID.NPCHit45;
			DeathSound = SoundID.NPCDeath47;
			knockBackResist = 0.3f;
			value = 1500f;
			npcSlots = 0.3f;
		}
		else if (type == 259)
		{
			noGravity = true;
			noTileCollide = true;
			width = 20;
			height = 20;
			aiStyle = 13;
			damage = 24;
			defense = 4;
			lifeMax = 90;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0f;
			DeathSound = SoundID.NPCDeath1;
			value = 350f;
			npcSlots = 0.3f;
		}
		else if (type == 260)
		{
			noGravity = true;
			noTileCollide = true;
			width = 36;
			height = 36;
			aiStyle = 13;
			damage = 70;
			defense = 20;
			lifeMax = 300;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0f;
			DeathSound = SoundID.NPCDeath1;
			value = 1250f;
			npcSlots = 0.3f;
		}
		else if (type == 261)
		{
			width = 12;
			height = 12;
			aiStyle = 50;
			damage = 80;
			defense = 0;
			lifeMax = 1;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			npcSlots = 0f;
		}
		else if (type == 262)
		{
			noTileCollide = true;
			width = 86;
			height = 86;
			aiStyle = 51;
			damage = 50;
			defense = 14;
			lifeMax = 30000;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0f;
			value = Item.buyPrice(0, 15);
			noGravity = true;
			boss = true;
			npcSlots = 16f;
		}
		else if (type == 263)
		{
			noTileCollide = true;
			noGravity = true;
			width = 40;
			height = 40;
			aiStyle = 52;
			damage = 60;
			defense = 24;
			lifeMax = 4000;
			dontTakeDamage = true;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
		}
		else if (type == 264)
		{
			width = 24;
			height = 24;
			aiStyle = 53;
			damage = 60;
			defense = 20;
			lifeMax = 1000;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
		}
		else if (type == 265)
		{
			width = 18;
			height = 18;
			aiStyle = 50;
			damage = 70;
			defense = 0;
			lifeMax = 1;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			npcSlots = 0f;
		}
		else if (type == 266)
		{
			dontTakeDamage = true;
			width = 160;
			height = 110;
			aiStyle = 54;
			damage = 30;
			defense = 14;
			lifeMax = 1250;
			HitSound = SoundID.NPCHit9;
			DeathSound = SoundID.NPCDeath11;
			knockBackResist = 0.45f;
			noGravity = true;
			noTileCollide = true;
			SpawnWithHigherTime(30);
			boss = true;
			value = 50000f;
			npcSlots = 6f;
		}
		else if (type == 267)
		{
			width = 30;
			height = 30;
			aiStyle = 55;
			damage = 20;
			defense = 10;
			lifeMax = 100;
			HitSound = SoundID.NPCHit9;
			DeathSound = SoundID.NPCDeath11;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0.8f;
		}
		else if (type == 268)
		{
			noGravity = true;
			width = 28;
			height = 56;
			aiStyle = 22;
			damage = 55;
			defense = 20;
			lifeMax = 340;
			HitSound = SoundID.NPCHit13;
			DeathSound = SoundID.NPCDeath19;
			knockBackResist = 0.6f;
			value = 450f;
		}
		else if (type == 269)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 70;
			defense = 34;
			lifeMax = 550;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.3f;
			value = 1000f;
		}
		else if (type == 270)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 55;
			defense = 50;
			lifeMax = 400;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.2f;
			value = 1000f;
		}
		else if (type == 271)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 70;
			defense = 40;
			lifeMax = 450;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.25f;
			value = 1000f;
		}
		else if (type == 272)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 75;
			defense = 28;
			lifeMax = 400;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.35f;
			value = 1000f;
		}
		else if (type == 273)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 45;
			defense = 50;
			lifeMax = 500;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.15f;
			value = 1000f;
		}
		else if (type == 274)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 65;
			defense = 34;
			lifeMax = 350;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.4f;
			value = 1000f;
		}
		else if (type == 275)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 45;
			defense = 50;
			lifeMax = 550;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.15f;
			value = 1000f;
		}
		else if (type == 276)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 85;
			defense = 54;
			lifeMax = 500;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.2f;
			value = 1000f;
		}
		else if (type == 277)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 70;
			defense = 32;
			lifeMax = 400;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.4f;
			value = 1000f;
		}
		else if (type == 278)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 65;
			defense = 48;
			lifeMax = 450;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.3f;
			value = 1000f;
		}
		else if (type == 279)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 40;
			defense = 54;
			lifeMax = 500;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.2f;
			value = 1000f;
		}
		else if (type == 280)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 75;
			defense = 34;
			lifeMax = 500;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.4f;
			value = 1000f;
		}
		else if (type == 281)
		{
			width = 18;
			height = 40;
			aiStyle = 8;
			damage = 40;
			defense = 20;
			lifeMax = 400;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.6f;
			value = 1500f;
			npcSlots = 2f;
		}
		else if (type == 282)
		{
			width = 18;
			height = 40;
			aiStyle = 8;
			damage = 35;
			defense = 28;
			lifeMax = 450;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 1500f;
			npcSlots = 2f;
		}
		else if (type == 283)
		{
			width = 18;
			height = 40;
			aiStyle = 8;
			damage = 50;
			defense = 18;
			lifeMax = 300;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.55f;
			value = 1500f;
			npcSlots = 2f;
		}
		else if (type == 284)
		{
			width = 18;
			height = 40;
			aiStyle = 8;
			damage = 35;
			defense = 24;
			lifeMax = 450;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 1500f;
			npcSlots = 2f;
		}
		else if (type == 285)
		{
			width = 18;
			height = 40;
			aiStyle = 8;
			damage = 50;
			defense = 12;
			lifeMax = 200;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.7f;
			value = 1500f;
			npcSlots = 2f;
		}
		else if (type == 286)
		{
			width = 18;
			height = 40;
			aiStyle = 8;
			damage = 60;
			defense = 10;
			lifeMax = 250;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.65f;
			value = 1500f;
			npcSlots = 2f;
		}
		else if (type == 287)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 90;
			defense = 42;
			lifeMax = 1000;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.3f;
			value = 2000f;
			rarity = 1;
		}
		else if (type == 288)
		{
			width = 20;
			height = 20;
			aiStyle = 56;
			damage = 70;
			defense = 30;
			lifeMax = 200;
			knockBackResist = 0.2f;
			HitSound = SoundID.NPCHit36;
			DeathSound = SoundID.NPCDeath39;
			value = 500f;
			noTileCollide = true;
			noGravity = true;
		}
		else if (type == 289)
		{
			width = 44;
			height = 44;
			aiStyle = 10;
			damage = 60;
			defense = 20;
			lifeMax = 400;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			noGravity = true;
			noTileCollide = true;
			value = 150f;
			knockBackResist = 0.2f;
			npcSlots = 0.75f;
		}
		else if (type == 290)
		{
			width = 34;
			height = 62;
			aiStyle = 3;
			damage = 100;
			defense = 50;
			lifeMax = 5000;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0f;
			value = 50000f;
			rarity = 2;
		}
		else if (type == 291)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 60;
			defense = 28;
			lifeMax = 400;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.4f;
			value = 1000f;
			rarity = 1;
		}
		else if (type == 292)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 60;
			defense = 28;
			lifeMax = 400;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.4f;
			value = 1000f;
			rarity = 1;
		}
		else if (type == 293)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 60;
			defense = 28;
			lifeMax = 400;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.4f;
			value = 1000f;
			rarity = 1;
		}
		else if (type == 294)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 34;
			defense = 6;
			lifeMax = 70;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.9f;
			value = 130f;
		}
		else if (type == 295)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 28;
			defense = 12;
			lifeMax = 70;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.7f;
			value = 130f;
		}
		else if (type == 296)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 24;
			defense = 14;
			lifeMax = 120;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.6f;
			value = 130f;
		}
		else if (type == 299)
		{
			width = 18;
			height = 20;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 2018;
		}
		else if (type == 300)
		{
			width = 14;
			height = 12;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath4;
			npcSlots = 0.25f;
			catchItem = 2003;
		}
		else if (type == 301)
		{
			width = 36;
			height = 26;
			aiStyle = 17;
			damage = 12;
			defense = 2;
			lifeMax = 35;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.85f;
			DeathSound = SoundID.NPCDeath1;
			value = 50f;
		}
		if (type == 302)
		{
			width = 24;
			height = 18;
			aiStyle = 1;
			damage = 7;
			defense = 2;
			lifeMax = 25;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 25f;
		}
		else if (type == 304)
		{
			width = 34;
			height = 28;
			aiStyle = 1;
			damage = 80;
			defense = 20;
			lifeMax = 175;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 500f;
			scale = 1.1f;
			knockBackResist = 0.5f;
			npcSlots = 0.3f;
		}
		else if (type >= 305 && type <= 314)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			value = 1200f;
			npcSlots = 0.5f;
			if (type == 305 || type == 310)
			{
				damage = 60;
				defense = 18;
				lifeMax = 500;
				knockBackResist = 0.4f;
			}
			else if (type == 306 || type == 311)
			{
				damage = 52;
				defense = 14;
				lifeMax = 400;
				knockBackResist = 0.2f;
				scale = 1.05f;
			}
			else if (type == 307 || type == 312)
			{
				damage = 78;
				defense = 16;
				lifeMax = 600;
				knockBackResist = 0.25f;
				scale = 0.9f;
			}
			else if (type == 308 || type == 313)
			{
				damage = 66;
				defense = 14;
				lifeMax = 650;
				knockBackResist = 0.35f;
				scale = 0.95f;
			}
			else if (type == 309 || type == 314)
			{
				damage = 52;
				defense = 26;
				lifeMax = 450;
				knockBackResist = 0.5f;
				scale = 1.1f;
			}
		}
		else if (type == 315)
		{
			width = 74;
			height = 70;
			aiStyle = 26;
			damage = 130;
			defense = 40;
			lifeMax = 5000;
			HitSound = SoundID.NPCHit12;
			DeathSound = SoundID.NPCDeath18;
			knockBackResist = 0f;
			value = 10000f;
		}
		else if (type == 316)
		{
			noGravity = true;
			noTileCollide = true;
			width = 24;
			height = 44;
			aiStyle = 22;
			damage = 15;
			defense = 4;
			lifeMax = 50;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			alpha = 100;
			value = 90f;
			knockBackResist = 0.5f;
		}
		else if (type == 317)
		{
			width = 30;
			height = 32;
			aiStyle = 2;
			damage = 16;
			defense = 6;
			lifeMax = 75;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.7f;
			DeathSound = SoundID.NPCDeath1;
			value = 100f;
		}
		else if (type == 318)
		{
			width = 30;
			height = 32;
			aiStyle = 2;
			damage = 20;
			defense = 4;
			lifeMax = 60;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.65f;
			DeathSound = SoundID.NPCDeath1;
			value = 100f;
		}
		else if (type == 319)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 20;
			defense = 6;
			lifeMax = 40;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.6f;
			value = 85f;
			scale = 0.9f;
		}
		else if (type == 320)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 15;
			defense = 8;
			lifeMax = 60;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 105f;
			scale = 1.05f;
		}
		else if (type == 321)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 20;
			defense = 14;
			lifeMax = 34;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.3f;
			value = 120f;
			scale = 1.1f;
		}
		else if (type == 322)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 23;
			defense = 0;
			lifeMax = 115;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.65f;
			value = 130f;
		}
		else if (type == 323)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 18;
			defense = 10;
			lifeMax = 65;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 120f;
		}
		else if (type == 324)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 22;
			defense = 10;
			lifeMax = 70;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.4f;
			value = 130f;
			scale = 1.05f;
		}
		else if (type == 325)
		{
			width = 164;
			height = 154;
			aiStyle = 57;
			damage = 120;
			defense = 34;
			lifeMax = 14000;
			HitSound = SoundID.NPCHit7;
			DeathSound = SoundID.NPCDeath5;
			knockBackResist = 0f;
			value = 10000f;
			npcSlots = 3f;
		}
		else if (type == 326)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 100;
			defense = 32;
			lifeMax = 1200;
			HitSound = SoundID.NPCHit7;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0.2f;
			value = 2000f;
		}
		else if (type == 327)
		{
			width = 100;
			height = 100;
			aiStyle = 58;
			damage = 50;
			defense = 40;
			lifeMax = 26000;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			value = 50000f;
			knockBackResist = 0f;
			npcSlots = 5f;
		}
		else if (type == 328)
		{
			width = 80;
			height = 80;
			aiStyle = 59;
			damage = 65;
			defense = 14;
			lifeMax = 5000;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			dontTakeDamage = true;
			npcSlots = 0f;
			dontCountMe = true;
		}
		else if (type == 329)
		{
			width = 46;
			height = 30;
			aiStyle = 26;
			damage = 80;
			defense = 38;
			lifeMax = 1800;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath5;
			knockBackResist = 0.3f;
			value = 3000f;
		}
		else if (type == 330)
		{
			noGravity = true;
			noTileCollide = true;
			width = 24;
			height = 44;
			aiStyle = 22;
			damage = 90;
			defense = 44;
			lifeMax = 1250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			alpha = 100;
			value = 4500f;
			knockBackResist = 0.4f;
		}
		else if (type == 331)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 14;
			defense = 6;
			lifeMax = 45;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 60f;
		}
		else if (type == 332)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 14;
			defense = 6;
			lifeMax = 45;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 60f;
		}
		if (type == 333)
		{
			width = 24;
			height = 18;
			aiStyle = 1;
			damage = 7;
			defense = 2;
			lifeMax = 25;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 25f;
		}
		if (type == 334)
		{
			width = 24;
			height = 18;
			aiStyle = 1;
			damage = 6;
			defense = 2;
			lifeMax = 23;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			scale = 0.9f;
			value = 25f;
		}
		if (type == 335)
		{
			width = 24;
			height = 18;
			aiStyle = 1;
			damage = 8;
			defense = 3;
			lifeMax = 29;
			scale = 1.05f;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 25f;
		}
		if (type == 336)
		{
			width = 24;
			height = 18;
			aiStyle = 1;
			damage = 5;
			defense = 1;
			lifeMax = 22;
			scale = 0.85f;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 25f;
		}
		else if (type >= 338 && type <= 340)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 1200f;
			npcSlots = 0.5f;
			if (type == 338)
			{
				damage = 65;
				defense = 18;
				lifeMax = 600;
				knockBackResist = 0.4f;
			}
			else if (type == 339)
			{
				damage = 52;
				defense = 24;
				lifeMax = 700;
				knockBackResist = 0.2f;
				scale = 1.05f;
			}
			else if (type == 340)
			{
				damage = 78;
				defense = 14;
				lifeMax = 500;
				knockBackResist = 0.25f;
				scale = 0.9f;
			}
		}
		else if (type == 341)
		{
			width = 24;
			height = 24;
			aiStyle = 25;
			damage = 100;
			defense = 32;
			lifeMax = 900;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath6;
			value = Item.buyPrice(0, 0, 20);
			knockBackResist = 0.25f;
		}
		else if (type == 342)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 90;
			defense = 26;
			lifeMax = 750;
			HitSound = SoundID.NPCHit7;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0.2f;
			value = 1800f;
		}
		else if (type == 343)
		{
			width = 38;
			height = 78;
			aiStyle = 3;
			damage = 140;
			defense = 50;
			lifeMax = 3500;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0f;
			value = 3000f;
			npcSlots = 2f;
			coldDamage = true;
		}
		else if (type == 344)
		{
			width = 172;
			height = 130;
			aiStyle = 57;
			damage = 110;
			defense = 38;
			lifeMax = 13000;
			HitSound = SoundID.NPCHit7;
			DeathSound = SoundID.NPCDeath5;
			knockBackResist = 0f;
			value = 10000f;
			npcSlots = 3f;
		}
		else if (type == 345)
		{
			width = 130;
			height = 140;
			aiStyle = 60;
			damage = 120;
			defense = 38;
			lifeMax = 34000;
			HitSound = SoundID.NPCHit7;
			DeathSound = SoundID.NPCDeath5;
			knockBackResist = 0f;
			value = 50000f;
			noTileCollide = true;
			noGravity = true;
			npcSlots = 5f;
			coldDamage = true;
		}
		else if (type == 346)
		{
			width = 112;
			height = 140;
			aiStyle = 61;
			damage = 120;
			defense = 56;
			lifeMax = 18000;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath14;
			knockBackResist = 0f;
			value = 10000f;
			npcSlots = 4f;
		}
		else if (type == 347)
		{
			width = 50;
			height = 50;
			aiStyle = 62;
			damage = 60;
			defense = 28;
			lifeMax = 1200;
			HitSound = SoundID.NPCHit4;
			knockBackResist = 0.4f;
			DeathSound = SoundID.NPCDeath14;
			value = 1000f;
			noTileCollide = true;
			noGravity = true;
			npcSlots = 1.5f;
		}
		else if (type == 348)
		{
			width = 28;
			height = 76;
			aiStyle = 3;
			damage = 80;
			defense = 26;
			lifeMax = 1800;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.4f;
			value = 1500f;
			npcSlots = 1.5f;
		}
		else if (type == 349)
		{
			width = 28;
			height = 76;
			aiStyle = 3;
			damage = 100;
			defense = 42;
			lifeMax = 1800;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.1f;
			value = 1500f;
			npcSlots = 1.5f;
		}
		else if (type == 350)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 70;
			defense = 30;
			lifeMax = 900;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.45f;
			value = 900f;
		}
		else if (type == 351)
		{
			width = 18;
			height = 90;
			aiStyle = 3;
			damage = 100;
			defense = 40;
			lifeMax = 2500;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.1f;
			value = 3000f;
			npcSlots = 1.75f;
		}
		else if (type == 352)
		{
			width = 54;
			height = 54;
			aiStyle = 63;
			damage = 75;
			defense = 8;
			lifeMax = 450;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			value = 500f;
			knockBackResist = 0.4f;
			noGravity = true;
			noTileCollide = true;
			npcSlots = 2f;
			coldDamage = true;
		}
		else if (type == 353)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 354)
		{
			friendly = true;
			width = 18;
			height = 34;
			aiStyle = 0;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
			scale = 0.9f;
			rarity = 1;
		}
		else if (type == 355)
		{
			width = 10;
			height = 10;
			aiStyle = 64;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			npcSlots = 0.2f;
			noGravity = true;
			catchItem = 1992;
		}
		else if (type == 356)
		{
			width = 10;
			height = 10;
			aiStyle = 65;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			npcSlots = 0.25f;
			noGravity = true;
			catchItem = 1994;
		}
		else if (type == 357)
		{
			width = 10;
			height = 4;
			aiStyle = 66;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			npcSlots = 0.1f;
			catchItem = 2002;
		}
		else if (type == 358)
		{
			width = 12;
			height = 12;
			aiStyle = 64;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			npcSlots = 0.2f;
			noGravity = true;
			catchItem = 2004;
		}
		else if (type == 359)
		{
			width = 12;
			height = 12;
			aiStyle = 67;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			npcSlots = 0.5f;
			noGravity = true;
			catchItem = 2006;
		}
		else if (type == 360)
		{
			width = 14;
			height = 14;
			aiStyle = 67;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			npcSlots = 0.5f;
			noGravity = true;
			catchItem = 2007;
		}
		else if (type == 361)
		{
			width = 12;
			height = 10;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 2121;
		}
		else if (type == 362)
		{
			width = 22;
			height = 26;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 2122;
		}
		else if (type == 363)
		{
			width = 28;
			height = 22;
			aiStyle = 68;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 2122;
		}
		else if (type == 364)
		{
			width = 22;
			height = 26;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 2123;
		}
		else if (type == 365)
		{
			width = 28;
			height = 22;
			aiStyle = 68;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 2123;
		}
		else if (type == 366 || type == 367)
		{
			width = 26;
			height = 18;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			catchItem = (short)(2156 + type - 366);
		}
		else if (type == 368)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 369)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0.5f;
		}
		else if (type == 370)
		{
			width = 150;
			height = 100;
			aiStyle = 69;
			damage = 100;
			defense = 50;
			lifeMax = 60000;
			knockBackResist = 0f;
			noTileCollide = true;
			noGravity = true;
			npcSlots = 10f;
			HitSound = SoundID.NPCHit14;
			DeathSound = SoundID.NPCDeath20;
			value = 250000f;
			boss = true;
			netAlways = true;
			SpawnWithHigherTime(30);
		}
		else if (type == 371)
		{
			width = 36;
			height = 36;
			aiStyle = 70;
			damage = 100;
			defense = 0;
			lifeMax = 1;
			HitSound = SoundID.NPCHit3;
			DeathSound = SoundID.NPCDeath3;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			alpha = 255;
		}
		else if (type == 372)
		{
			noGravity = true;
			width = 120;
			height = 24;
			aiStyle = 71;
			damage = 100;
			defense = 100;
			lifeMax = 100;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0f;
			alpha = 255;
		}
		else if (type == 373)
		{
			noGravity = true;
			width = 100;
			height = 24;
			aiStyle = 71;
			damage = 120;
			defense = 100;
			lifeMax = 100;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0f;
			alpha = 255;
		}
		else if (type == 374)
		{
			width = 20;
			height = 10;
			aiStyle = 66;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			npcSlots = 0.15f;
			catchItem = 2673;
			rarity = 4;
			dontTakeDamageFromHostiles = true;
		}
		else if (type == 375)
		{
			width = 10;
			height = 10;
			aiStyle = 6;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			npcSlots = 0.15f;
			catchItem = 2673;
			rarity = 4;
			dontTakeDamageFromHostiles = true;
		}
		else if (type == 376)
		{
			friendly = true;
			width = 34;
			height = 8;
			aiStyle = 0;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0.5f;
			scale = 0.9f;
			rarity = 1;
		}
		else if (type == 377)
		{
			width = 14;
			height = 10;
			aiStyle = 1;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 2740;
			npcSlots = 0.1f;
		}
		else if (type == 378)
		{
			npcSlots = 1f;
			width = 20;
			height = 26;
			aiStyle = 41;
			damage = 120;
			defense = 30;
			lifeMax = 200;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
			value = 450f;
		}
		else if (type >= 379 && type <= 380)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 45;
			defense = 14;
			lifeMax = 210;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.55f;
			value = 1000f;
			npcSlots = 0f;
			lavaImmune = true;
			netAlways = true;
			chaseable = false;
		}
		else if (type >= 381 && type <= 382)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 50;
			defense = 25;
			lifeMax = 350;
			HitSound = SoundID.NPCHit39;
			DeathSound = SoundID.NPCDeath57;
			knockBackResist = 0.35f;
			value = 1000f;
		}
		else if (type == 383)
		{
			lifeMax = 300;
			defense = 50;
			damage = 75;
			width = 18;
			height = 40;
			aiStyle = 3;
			HitSound = SoundID.NPCHit39;
			DeathSound = SoundID.NPCDeath57;
			value = 1200f;
			knockBackResist = 0.25f;
		}
		else if (type == 384)
		{
			lifeMax = 1000;
			width = 18;
			defense = 20;
			height = 40;
			aiStyle = 72;
			HitSound = SoundID.NPCHit43;
			DeathSound = SoundID.NPCDeath45;
			npcSlots = 0f;
			noTileCollide = true;
			canGhostHeal = false;
		}
		else if (type == 385)
		{
			lifeMax = 750;
			defense = 30;
			damage = 80;
			width = 18;
			height = 40;
			aiStyle = 3;
			HitSound = SoundID.NPCHit39;
			DeathSound = SoundID.NPCDeath57;
			value = 600f;
			knockBackResist = 0f;
			npcSlots = 0.75f;
		}
		else if (type == 386)
		{
			lifeMax = 400;
			defense = 34;
			damage = 40;
			width = 18;
			height = 40;
			aiStyle = 3;
			HitSound = SoundID.NPCHit39;
			DeathSound = SoundID.NPCDeath57;
			value = 1200f;
			knockBackResist = 0.4f;
		}
		else if (type == 387)
		{
			width = 20;
			height = 50;
			aiStyle = 73;
			damage = 10;
			defense = 40;
			lifeMax = 200;
			HitSound = SoundID.NPCHit53;
			DeathSound = SoundID.NPCDeath56;
			knockBackResist = 0f;
			canGhostHeal = false;
		}
		else if (type == 388)
		{
			width = 40;
			height = 30;
			aiStyle = 74;
			damage = 60;
			defense = 16;
			lifeMax = 300;
			HitSound = SoundID.NPCHit42;
			knockBackResist = 0.4f;
			DeathSound = SoundID.NPCDeath44;
			value = 1000f;
			noTileCollide = true;
			noGravity = true;
			npcSlots = 1.5f;
			canGhostHeal = false;
		}
		else if (type == 389)
		{
			lifeMax = 600;
			defense = 38;
			damage = 75;
			width = 18;
			height = 40;
			aiStyle = 3;
			HitSound = SoundID.NPCHit39;
			DeathSound = SoundID.NPCDeath57;
			value = 1200f;
			npcSlots = 0.5f;
			knockBackResist = 0.3f;
		}
		else if (type == 390)
		{
			damage = 65;
			defense = 30;
			lifeMax = 350;
			width = 18;
			height = 40;
			aiStyle = 75;
			HitSound = SoundID.NPCHit39;
			DeathSound = SoundID.NPCDeath57;
			value = 1200f;
			npcSlots = 0.5f;
		}
		else if (type == 391)
		{
			lifeMax = 600;
			defense = 30;
			damage = 85;
			width = 60;
			height = 40;
			aiStyle = 3;
			HitSound = SoundID.NPCHit51;
			DeathSound = SoundID.NPCDeath54;
			value = 1200f;
			npcSlots = 0.5f;
			knockBackResist = 0.1f;
		}
		else if (type == 392)
		{
			lifeMax = 100;
			defense = 100;
			damage = 50;
			width = 150;
			height = 80;
			aiStyle = 75;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath14;
			value = 0f;
			npcSlots = 0f;
			knockBackResist = 0f;
			noGravity = true;
			noTileCollide = true;
			dontTakeDamage = true;
			netAlways = true;
		}
		else if (type == 393)
		{
			lifeMax = 5000;
			defense = 20;
			damage = 60;
			width = 40;
			height = 16;
			aiStyle = 75;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath14;
			value = 0f;
			npcSlots = 1f;
			knockBackResist = 0f;
			noGravity = true;
			noTileCollide = true;
			netAlways = true;
		}
		else if (type == 394)
		{
			lifeMax = 3500;
			defense = 20;
			damage = 60;
			width = 46;
			height = 36;
			aiStyle = 75;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath14;
			value = 0f;
			npcSlots = 1f;
			knockBackResist = 0f;
			noGravity = true;
			noTileCollide = true;
			netAlways = true;
		}
		else if (type == 395)
		{
			lifeMax = 10000;
			defense = 0;
			damage = 80;
			width = 120;
			height = 90;
			aiStyle = 76;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath14;
			value = 0f;
			npcSlots = 6f;
			knockBackResist = 0f;
			noGravity = true;
			noTileCollide = true;
			dontTakeDamage = true;
			boss = true;
			netAlways = true;
		}
		else if (type == 399)
		{
			defense = 5;
			damage = 5;
			lifeMax = 500;
			aiStyle = 80;
			width = 42;
			height = 72;
			value = 0f;
			knockBackResist = 0f;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath14;
			npcSlots = 0f;
			noGravity = true;
			SpawnWithHigherTime(30);
			chaseable = false;
			netAlways = true;
			rarity = 1;
		}
		else if (type == 396)
		{
			lifeMax = 45000;
			defense = 50;
			damage = 0;
			width = 38;
			height = 56;
			aiStyle = 79;
			HitSound = SoundID.NPCHit57;
			DeathSound = SoundID.NPCDeath62;
			value = 0f;
			npcSlots = 6f;
			knockBackResist = 0f;
			noGravity = true;
			noTileCollide = true;
			boss = true;
			hide = true;
			netAlways = true;
		}
		else if (type == 397)
		{
			lifeMax = 25000;
			defense = 40;
			damage = 0;
			width = 46;
			height = 66;
			aiStyle = 78;
			HitSound = SoundID.NPCHit57;
			DeathSound = SoundID.NPCDeath62;
			value = 0f;
			npcSlots = 6f;
			knockBackResist = 0f;
			noGravity = true;
			noTileCollide = true;
			boss = true;
			hide = true;
			netAlways = true;
		}
		else if (type == 398)
		{
			lifeMax = 50000;
			defense = 70;
			damage = 0;
			width = 46;
			height = 66;
			aiStyle = 77;
			HitSound = SoundID.NPCHit57;
			DeathSound = null;
			value = 1000000f;
			npcSlots = 6f;
			knockBackResist = 0f;
			noGravity = true;
			noTileCollide = true;
			dontTakeDamage = true;
			boss = true;
			behindTiles = true;
			hide = true;
			netAlways = true;
		}
		else if (type == 400)
		{
			defense = 0;
			damage = 60;
			lifeMax = 100;
			aiStyle = 81;
			width = 60;
			height = 60;
			value = 0f;
			knockBackResist = 0f;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			npcSlots = 0f;
			noGravity = true;
			dontTakeDamage = true;
			noTileCollide = true;
			netAlways = true;
		}
		else if (type == 401)
		{
			lifeMax = 400;
			defense = 0;
			damage = 0;
			width = 30;
			height = 30;
			aiStyle = 82;
			HitSound = SoundID.NPCHit57;
			DeathSound = SoundID.NPCDeath62;
			value = 0f;
			npcSlots = 0f;
			knockBackResist = 0f;
			noGravity = true;
			noTileCollide = true;
			hide = true;
		}
		else if (type == 437)
		{
			lifeMax = 400;
			defense = 0;
			damage = 0;
			width = 54;
			height = 54;
			aiStyle = 83;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath14;
			value = 0f;
			npcSlots = 0f;
			knockBackResist = 0f;
			noGravity = true;
			noTileCollide = true;
			dontTakeDamage = true;
			netAlways = true;
			chaseable = false;
		}
		else if (type == 438)
		{
			lifeMax = 400;
			defense = 0;
			damage = 0;
			width = 22;
			height = 40;
			aiStyle = 83;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 0f;
			npcSlots = 0f;
			knockBackResist = 0f;
			lavaImmune = true;
			netAlways = true;
			chaseable = false;
		}
		else if (type == 439)
		{
			width = 24;
			height = 50;
			aiStyle = 84;
			damage = 50;
			defense = 42;
			lifeMax = 32000;
			knockBackResist = 0f;
			noTileCollide = true;
			noGravity = true;
			npcSlots = 10f;
			HitSound = SoundID.NPCHit55;
			DeathSound = SoundID.NPCDeath59;
			value = 100000f;
			boss = true;
			netAlways = true;
			SpawnWithHigherTime(30);
		}
		else if (type == 440)
		{
			width = 24;
			height = 50;
			aiStyle = 84;
			damage = 0;
			defense = 35;
			lifeMax = 10000;
			knockBackResist = 0f;
			noTileCollide = true;
			noGravity = true;
			npcSlots = 0f;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			netAlways = true;
			SpawnWithHigherTime(30);
			chaseable = false;
		}
		else if (type == 442)
		{
			width = 14;
			height = 14;
			aiStyle = 24;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.8f;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 2889;
			npcSlots = 0.4f;
			rarity = 3;
		}
		else if (type == 443)
		{
			width = 18;
			height = 20;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 2890;
			rarity = 3;
		}
		else if (type == 444)
		{
			width = 10;
			height = 10;
			aiStyle = 65;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			npcSlots = 0.25f;
			noGravity = true;
			catchItem = 2891;
			rarity = 3;
		}
		else if (type == 445)
		{
			width = 12;
			height = 10;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 2892;
			rarity = 3;
		}
		else if (type == 446)
		{
			width = 14;
			height = 10;
			aiStyle = 1;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 2893;
			npcSlots = 0.1f;
			rarity = 3;
		}
		else if (type == 447)
		{
			width = 14;
			height = 12;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath4;
			npcSlots = 0.25f;
			catchItem = 2894;
			rarity = 3;
		}
		else if (type == 448)
		{
			width = 10;
			height = 4;
			aiStyle = 66;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			npcSlots = 0.1f;
			catchItem = 2895;
			rarity = 3;
		}
		else if (type == 449)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 20;
			defense = 8;
			lifeMax = 60;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 100f;
		}
		else if (type == 450)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 20;
			defense = 12;
			lifeMax = 55;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 130f;
		}
		else if (type == 451)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 18;
			defense = 8;
			lifeMax = 65;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 120f;
		}
		else if (type == 452)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 22;
			defense = 8;
			lifeMax = 60;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 110f;
		}
		else if (type == 453)
		{
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 30;
			lifeMax = 250;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			npcSlots = 7f;
			rarity = 1;
		}
		else if (type == 454)
		{
			noTileCollide = true;
			npcSlots = 5f;
			width = 32;
			height = 32;
			aiStyle = 6;
			netAlways = true;
			damage = 100;
			defense = 15;
			lifeMax = 10000;
			HitSound = SoundID.NPCHit56;
			DeathSound = SoundID.NPCDeath60;
			noGravity = true;
			knockBackResist = 0f;
			value = 0f;
			scale = 1f;
			alpha = 255;
		}
		else if (type == 459)
		{
			noTileCollide = true;
			width = 32;
			height = 32;
			aiStyle = 6;
			netAlways = true;
			damage = 50;
			defense = 30;
			lifeMax = 10000;
			HitSound = SoundID.NPCHit56;
			DeathSound = SoundID.NPCDeath60;
			noGravity = true;
			knockBackResist = 0f;
			value = 0f;
			scale = 1f;
			alpha = 255;
			dontCountMe = true;
		}
		else if (type == 455 || type == 456 || type == 457 || type == 458)
		{
			noTileCollide = true;
			width = 32;
			height = 32;
			aiStyle = 6;
			netAlways = true;
			damage = 50;
			defense = 30;
			lifeMax = 10000;
			HitSound = SoundID.NPCHit56;
			DeathSound = SoundID.NPCDeath60;
			noGravity = true;
			knockBackResist = 0f;
			value = 0f;
			scale = 1f;
			alpha = 255;
			dontCountMe = true;
		}
		else if (type == 464)
		{
			width = 18;
			height = 20;
			aiStyle = 3;
			damage = 21;
			defense = 5;
			lifeMax = 75;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 500f;
		}
		else if (type == 465)
		{
			noGravity = true;
			width = 18;
			height = 20;
			aiStyle = 16;
			damage = 31;
			defense = 7;
			lifeMax = 110;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 500f;
		}
		else if (type == 470)
		{
			width = 16;
			height = 34;
			aiStyle = 3;
			damage = 21;
			defense = 5;
			lifeMax = 75;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 500f;
		}
		else if (type == 473 || type == 474 || type == 475 || type == 476)
		{
			width = 28;
			height = 44;
			aiStyle = 87;
			damage = 90;
			defense = 34;
			lifeMax = 3500;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath6;
			value = 30000f;
			knockBackResist = 0.1f;
			rarity = 5;
		}
		else if (type == 480)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 30;
			defense = 20;
			lifeMax = 400;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.15f;
			value = 1000f;
			rarity = 1;
		}
		else if (type == 481)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 22;
			defense = 10;
			lifeMax = 70;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.4f;
			value = 300f;
		}
		else if (type == 482)
		{
			width = 28;
			height = 48;
			aiStyle = 3;
			damage = 30;
			defense = 18;
			lifeMax = 110;
			HitSound = SoundID.NPCHit41;
			DeathSound = SoundID.NPCDeath43;
			knockBackResist = 0.35f;
			value = 500f;
		}
		else if (type == 483)
		{
			npcSlots = 0.5f;
			width = 20;
			height = 30;
			aiStyle = 91;
			damage = 24;
			defense = 8;
			lifeMax = 40;
			HitSound = SoundID.NPCHit7;
			knockBackResist = 0.6f;
			DeathSound = SoundID.NPCDeath6;
			value = 1000f;
		}
		else if (type >= 484 && type <= 487)
		{
			width = 10;
			height = 4;
			aiStyle = 66;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			npcSlots = 0.1f;
			catchItem = (short)(3191 + type - 484);
		}
		else if (type == 488)
		{
			width = 18;
			height = 40;
			aiStyle = 92;
			damage = 0;
			defense = 0;
			lifeMax = 1000;
			HitSound = SoundID.NPCHit15;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0f;
			value = 0f;
			immortal = true;
			netAlways = true;
		}
		else if (type == 489)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 20;
			defense = 8;
			lifeMax = 75;
			HitSound = SoundID.NPCHit18;
			DeathSound = SoundID.NPCDeath21;
			knockBackResist = 0.4f;
			value = 150f;
		}
		else if (type == 490)
		{
			noGravity = true;
			width = 28;
			height = 30;
			aiStyle = 22;
			damage = 28;
			defense = 14;
			lifeMax = 50;
			HitSound = SoundID.NPCHit19;
			knockBackResist = 0.6f;
			DeathSound = SoundID.NPCDeath22;
			value = 150f;
		}
		else if (type == 491)
		{
			noGravity = true;
			width = 350;
			height = 120;
			aiStyle = 93;
			damage = 0;
			defense = 100;
			lifeMax = 50;
			HitSound = SoundID.NPCHit19;
			knockBackResist = 0f;
			DeathSound = SoundID.NPCDeath22;
			value = 0f;
			dontTakeDamage = true;
			netAlways = true;
		}
		else if (type == 492)
		{
			lifeMax = 2000;
			defense = 20;
			damage = 30;
			width = 30;
			height = 30;
			aiStyle = 75;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath14;
			value = 0f;
			npcSlots = 1f;
			knockBackResist = 0f;
			noGravity = true;
			noTileCollide = true;
			hide = true;
			netAlways = true;
		}
		else if (type >= 494 && type <= 495)
		{
			width = 28;
			height = 22;
			aiStyle = 3;
			damage = 28;
			defense = 6;
			lifeMax = 50;
			HitSound = SoundID.NPCHit33;
			DeathSound = SoundID.NPCDeath36;
			value = 120f;
		}
		else if (type >= 496 && type <= 497)
		{
			width = 28;
			height = 22;
			aiStyle = 39;
			damage = 16;
			defense = 12;
			lifeMax = 50;
			HitSound = SoundID.NPCHit38;
			DeathSound = SoundID.NPCDeath41;
			knockBackResist = 0.75f;
			value = 120f;
		}
		else if (type >= 498 && type <= 506)
		{
			width = 24;
			height = 44;
			aiStyle = 3;
			damage = 18;
			defense = 10;
			lifeMax = 65;
			HitSound = SoundID.NPCHit50;
			DeathSound = SoundID.NPCDeath53;
			knockBackResist = 0.45f;
			value = 120f;
		}
		else if (type == 441)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 513)
		{
			npcSlots = 4f;
			width = 22;
			height = 22;
			aiStyle = 6;
			damage = 18;
			defense = 0;
			lifeMax = 60;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			value = 130f;
		}
		else if (type == 514)
		{
			width = 22;
			height = 22;
			aiStyle = 6;
			netAlways = true;
			damage = 7;
			defense = 12;
			lifeMax = 60;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			value = 130f;
			dontCountMe = true;
			npcSlots = 0f;
		}
		else if (type == 515)
		{
			width = 22;
			height = 22;
			aiStyle = 6;
			netAlways = true;
			damage = 7;
			defense = 14;
			lifeMax = 60;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			value = 130f;
			dontCountMe = true;
			npcSlots = 0f;
		}
		else if (type == 510)
		{
			npcSlots = 5f;
			width = 34;
			height = 34;
			aiStyle = 6;
			damage = 58;
			defense = 18;
			lifeMax = 500;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			value = 700f;
		}
		else if (type == 511)
		{
			width = 34;
			height = 34;
			aiStyle = 6;
			netAlways = true;
			damage = 54;
			defense = 28;
			lifeMax = 500;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			value = 700f;
			dontCountMe = true;
			npcSlots = 0f;
		}
		else if (type == 512)
		{
			width = 34;
			height = 34;
			aiStyle = 6;
			netAlways = true;
			damage = 50;
			defense = 34;
			lifeMax = 500;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			value = 700f;
			dontCountMe = true;
			npcSlots = 0f;
		}
		else if (type == 508)
		{
			width = 50;
			height = 31;
			aiStyle = 3;
			damage = 38;
			defense = 16;
			lifeMax = 110;
			HitSound = SoundID.NPCHit31;
			DeathSound = SoundID.NPCDeath34;
			knockBackResist = 0.4f;
			value = 175f;
		}
		else if (type == 509)
		{
			width = 40;
			height = 31;
			aiStyle = 44;
			damage = 34;
			defense = 12;
			lifeMax = 90;
			knockBackResist = 0.3f;
			HitSound = SoundID.NPCHit32;
			DeathSound = SoundID.NPCDeath35;
			value = 195f;
		}
		else if (type == 580)
		{
			width = 26;
			height = 26;
			aiStyle = 3;
			damage = 25;
			defense = 10;
			lifeMax = 80;
			HitSound = SoundID.NPCHit31;
			DeathSound = SoundID.NPCDeath34;
			knockBackResist = 0.5f;
			value = 80f;
			npcSlots = 0.8f;
		}
		else if (type == 581)
		{
			width = 30;
			height = 22;
			aiStyle = 44;
			damage = 29;
			defense = 8;
			lifeMax = 60;
			knockBackResist = 0.5f;
			HitSound = SoundID.NPCHit32;
			DeathSound = SoundID.NPCDeath35;
			value = 90f;
			npcSlots = 0.8f;
		}
		else if (type >= 524 && type <= 527)
		{
			width = 24;
			height = 44;
			aiStyle = 3;
			damage = 50;
			defense = 26;
			lifeMax = 180;
			HitSound = SoundID.NPCHit37;
			DeathSound = SoundID.NPCDeath40;
			knockBackResist = 0.6f;
			value = 500f;
			npcSlots = 0.5f;
			switch (type)
			{
			case 525:
				lifeMax += 70;
				defense += 4;
				damage += 10;
				knockBackResist -= 0.1f;
				value += 150f;
				break;
			case 526:
				lifeMax += 40;
				defense += 6;
				damage += 14;
				knockBackResist -= 0.1f;
				value += 150f;
				break;
			case 527:
				lifeMax += 120;
				defense += 6;
				damage += 4;
				knockBackResist -= 0.2f;
				value += 250f;
				break;
			}
		}
		else if (type >= 528 && type <= 529)
		{
			width = 24;
			height = 44;
			aiStyle = 3;
			damage = 52;
			defense = 28;
			lifeMax = 350;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.35f;
			value = 600f;
		}
		else if (type == 530)
		{
			width = 50;
			height = 20;
			aiStyle = 3;
			damage = 66;
			defense = 24;
			lifeMax = 320;
			HitSound = SoundID.NPCHit13;
			DeathSound = SoundID.NPCDeath19;
			knockBackResist = 0.5f;
			value = 600f;
			SpawnWithHigherTime(2);
		}
		else if (type == 531)
		{
			noGravity = true;
			width = 36;
			height = 36;
			aiStyle = 40;
			damage = 66;
			defense = 24;
			lifeMax = 320;
			HitSound = SoundID.NPCHit13;
			DeathSound = SoundID.NPCDeath19;
			knockBackResist = 0.5f;
			value = 600f;
			SpawnWithHigherTime(2);
		}
		else if (type == 532)
		{
			width = 32;
			height = 31;
			aiStyle = 3;
			damage = 65;
			defense = 34;
			lifeMax = 270;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.3f;
			value = 800f;
			npcSlots = 0.75f;
		}
		else if (type == 533)
		{
			width = 28;
			height = 62;
			aiStyle = 8;
			damage = 40;
			defense = 20;
			lifeMax = 220;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0f;
			value = 1200f;
			npcSlots = 2f;
		}
		else if (type == 493)
		{
			lifeMax = 20000;
			defense = 20;
			damage = 0;
			width = 130;
			height = 270;
			aiStyle = 94;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 0f;
			knockBackResist = 0f;
			noGravity = true;
			noTileCollide = true;
			npcSlots = 0f;
		}
		else if (type == 402)
		{
			noTileCollide = true;
			npcSlots = 1f;
			width = 32;
			height = 32;
			aiStyle = 6;
			netAlways = true;
			damage = 80;
			defense = 10;
			lifeMax = 1200;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			knockBackResist = 0f;
			value = 0f;
			scale = 1f;
		}
		else if (type == 405)
		{
			width = 44;
			height = 44;
			aiStyle = 85;
			damage = 120;
			defense = 50;
			lifeMax = 300;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.3f;
			noGravity = true;
			npcSlots = 2f;
		}
		else if (type == 406)
		{
			width = 22;
			height = 22;
			aiStyle = 95;
			damage = 70;
			defense = 0;
			lifeMax = 300;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.4f;
			noGravity = true;
		}
		else if (type == 411)
		{
			width = 22;
			height = 56;
			aiStyle = 3;
			damage = 80;
			defense = 34;
			lifeMax = 700;
			HitSound = SoundID.NPCHit6;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.4f;
		}
		else if (type == 409)
		{
			width = 34;
			height = 42;
			aiStyle = 3;
			damage = 70;
			defense = 40;
			lifeMax = 800;
			HitSound = SoundID.NPCHit6;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.4f;
			npcSlots = 3f;
		}
		else if (type == 410)
		{
			width = 22;
			height = 22;
			aiStyle = 26;
			damage = 80;
			defense = 10;
			lifeMax = 200;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath5;
			knockBackResist = 0.3f;
			npcSlots = 0.5f;
		}
		else if (type == 407)
		{
			width = 40;
			height = 60;
			aiStyle = 96;
			damage = 70;
			defense = 38;
			lifeMax = 1500;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			knockBackResist = 0.03f;
			npcSlots = 3f;
		}
		else if (type == 507)
		{
			lifeMax = 20000;
			defense = 20;
			damage = 0;
			width = 130;
			height = 270;
			aiStyle = 94;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 0f;
			knockBackResist = 0f;
			noGravity = true;
			noTileCollide = true;
			npcSlots = 0f;
		}
		else if (type == 423)
		{
			width = 50;
			height = 44;
			aiStyle = 26;
			damage = 90;
			defense = 46;
			lifeMax = 850;
			HitSound = SoundID.NPCHit6;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.2f;
			npcSlots = 1f;
		}
		else if (type == 421)
		{
			width = 44;
			height = 44;
			aiStyle = 85;
			damage = 70;
			defense = 34;
			lifeMax = 330;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
			noGravity = true;
			npcSlots = 1f;
		}
		else if (type == 424)
		{
			width = 22;
			height = 56;
			aiStyle = 3;
			damage = 80;
			defense = 30;
			lifeMax = 700;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath5;
			knockBackResist = 0.6f;
			npcSlots = 2f;
		}
		else if (type == 420)
		{
			width = 40;
			height = 40;
			aiStyle = 97;
			damage = 75;
			defense = 20;
			lifeMax = 1300;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
			noTileCollide = true;
			noGravity = true;
			npcSlots = 3f;
		}
		else if (type == 422)
		{
			lifeMax = 20000;
			defense = 20;
			damage = 0;
			width = 130;
			height = 270;
			aiStyle = 94;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 0f;
			knockBackResist = 0f;
			noGravity = true;
			noTileCollide = true;
			npcSlots = 0f;
		}
		else if (type == 425)
		{
			width = 30;
			height = 56;
			aiStyle = 3;
			damage = 100;
			defense = 40;
			lifeMax = 800;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0.4f;
		}
		else if (type == 429)
		{
			width = 22;
			height = 56;
			aiStyle = 3;
			damage = 90;
			defense = 34;
			lifeMax = 700;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath5;
			knockBackResist = 0.6f;
			npcSlots = 2f;
		}
		else if (type == 428)
		{
			width = 24;
			height = 26;
			aiStyle = 3;
			damage = 50;
			defense = 6;
			lifeMax = 200;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
		}
		else if (type == 427)
		{
			width = 40;
			height = 28;
			aiStyle = 3;
			damage = 75;
			defense = 20;
			lifeMax = 500;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0.5f;
			npcSlots = 0.5f;
		}
		else if (type == 426)
		{
			width = 50;
			height = 62;
			aiStyle = 3;
			damage = 100;
			defense = 44;
			lifeMax = 1000;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0.3f;
		}
		else if (type == 517)
		{
			lifeMax = 20000;
			defense = 20;
			damage = 0;
			width = 130;
			height = 270;
			aiStyle = 94;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 0f;
			knockBackResist = 0f;
			noGravity = true;
			noTileCollide = true;
			npcSlots = 0f;
		}
		else if (type == 412)
		{
			width = 20;
			height = 20;
			aiStyle = 6;
			netAlways = true;
			damage = 120;
			defense = 1000;
			lifeMax = 10000;
			HitSound = SoundID.NPCHit11;
			DeathSound = SoundID.NPCDeath22;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			dontTakeDamage = true;
			npcSlots = 2f;
		}
		else if (type == 413)
		{
			width = 20;
			height = 20;
			aiStyle = 6;
			netAlways = true;
			damage = 80;
			defense = 1000;
			lifeMax = 10000;
			HitSound = SoundID.NPCHit11;
			DeathSound = SoundID.NPCDeath22;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			dontCountMe = true;
			dontTakeDamage = true;
			npcSlots = 0f;
		}
		else if (type == 414)
		{
			width = 20;
			height = 20;
			aiStyle = 6;
			netAlways = true;
			damage = 50;
			defense = 0;
			lifeMax = 10000;
			HitSound = SoundID.NPCHit8;
			DeathSound = SoundID.NPCDeath22;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			dontCountMe = true;
			takenDamageMultiplier = 10f;
			npcSlots = 0f;
		}
		else if (type == 415)
		{
			lifeMax = 800;
			defense = 32;
			damage = 55;
			width = 60;
			height = 40;
			aiStyle = 3;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.2f;
		}
		else if (type == 416)
		{
			damage = 80;
			defense = 28;
			lifeMax = 800;
			width = 18;
			height = 40;
			aiStyle = 75;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.2f;
		}
		else if (type == 518)
		{
			lifeMax = 1000;
			defense = 28;
			damage = 80;
			width = 22;
			height = 56;
			aiStyle = 3;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.4f;
		}
		else if (type == 417)
		{
			npcSlots = 2f;
			width = 46;
			height = 52;
			aiStyle = 39;
			damage = 80;
			defense = 34;
			lifeMax = 700;
			HitSound = SoundID.NPCHit7;
			knockBackResist = 0f;
			DeathSound = SoundID.NPCDeath5;
		}
		else if (type == 418)
		{
			width = 38;
			height = 38;
			aiStyle = 74;
			damage = 70;
			defense = 26;
			lifeMax = 600;
			HitSound = SoundID.NPCHit3;
			DeathSound = SoundID.NPCDeath3;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0.2f;
		}
		else if (type == 419)
		{
			lifeMax = 800;
			defense = 30;
			damage = 90;
			width = 22;
			height = 56;
			aiStyle = 3;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.4f;
		}
		else if (type == 516)
		{
			width = 26;
			height = 26;
			aiStyle = 9;
			damage = 100;
			defense = 0;
			lifeMax = 1;
			HitSound = null;
			DeathSound = null;
			noGravity = true;
			noTileCollide = false;
			alpha = 0;
			knockBackResist = 0f;
		}
		else if (type == 519)
		{
			width = 26;
			height = 26;
			aiStyle = 99;
			damage = 120;
			defense = 0;
			lifeMax = 1;
			HitSound = null;
			DeathSound = null;
			noGravity = true;
			noTileCollide = false;
			alpha = 0;
			knockBackResist = 0f;
		}
		else if (type == 162)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 65;
			defense = 18;
			lifeMax = 350;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.3f;
			value = 600f;
		}
		else if (type == 166)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 70;
			defense = 26;
			lifeMax = 450;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.2f;
			value = 1000f;
		}
		else if (type == 253)
		{
			noGravity = true;
			noTileCollide = true;
			width = 24;
			height = 44;
			aiStyle = 22;
			damage = 80;
			defense = 22;
			lifeMax = 700;
			HitSound = SoundID.NPCHit49;
			DeathSound = SoundID.NPCDeath51;
			alpha = 100;
			value = 1500f;
			knockBackResist = 0.6f;
		}
		else if (type == 158)
		{
			npcSlots = 2f;
			width = 22;
			height = 22;
			aiStyle = 14;
			damage = 60;
			defense = 32;
			lifeMax = 750;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.75f;
			DeathSound = SoundID.NPCDeath6;
			value = 5000f;
		}
		else if (type == 159)
		{
			npcSlots = 2f;
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 80;
			defense = 24;
			lifeMax = 750;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0.4f;
			value = 5000f;
		}
		else if (type == 460)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 70;
			defense = 30;
			lifeMax = 700;
			HitSound = SoundID.NPCHit7;
			DeathSound = SoundID.NPCDeath17;
			knockBackResist = 0.25f;
			value = 1000f;
		}
		else if (type == 461)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 60;
			defense = 22;
			lifeMax = 400;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.3f;
			value = 1000f;
		}
		else if (type == 462)
		{
			width = 20;
			height = 24;
			aiStyle = 3;
			damage = 70;
			defense = 14;
			lifeMax = 270;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.7f;
			value = 600f;
			npcSlots = 0.5f;
		}
		else if (type == 463)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 100;
			defense = 34;
			lifeMax = 4000;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.1f;
			value = 3000f;
		}
		else if (type == 466)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 70;
			defense = 40;
			lifeMax = 550;
			HitSound = SoundID.NPCHit48;
			DeathSound = SoundID.NPCDeath50;
			knockBackResist = 0.5f;
			value = 1500f;
		}
		else if (type == 467)
		{
			width = 22;
			height = 22;
			aiStyle = 85;
			damage = 100;
			defense = 80;
			lifeMax = 350;
			HitSound = SoundID.NPCHit34;
			DeathSound = SoundID.NPCDeath37;
			value = 900f;
			knockBackResist = 0.7f;
			noGravity = true;
		}
		else if (type == 469)
		{
			width = 38;
			height = 26;
			aiStyle = 3;
			damage = 68;
			defense = 28;
			lifeMax = 600;
			HitSound = SoundID.NPCHit47;
			DeathSound = SoundID.NPCDeath49;
			knockBackResist = 0.35f;
			value = 1300f;
		}
		else if (type == 468)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 65;
			defense = 24;
			lifeMax = 500;
			HitSound = SoundID.NPCHit35;
			DeathSound = SoundID.NPCDeath38;
			knockBackResist = 0.6f;
			value = 1300f;
		}
		else if (type == 477)
		{
			noGravity = true;
			netAlways = true;
			width = 80;
			height = 50;
			aiStyle = 88;
			damage = 80;
			defense = 30;
			lifeMax = 6000;
			HitSound = SoundID.NPCHit44;
			DeathSound = SoundID.NPCDeath46;
			value = 50000f;
			knockBackResist = 0.2f;
			rarity = 1;
		}
		else if (type == 478)
		{
			width = 34;
			height = 34;
			aiStyle = 89;
			damage = 0;
			defense = 30;
			lifeMax = 200;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 0f;
			knockBackResist = 0.7f;
			npcSlots = 0f;
		}
		else if (type == 479)
		{
			width = 46;
			height = 30;
			aiStyle = 90;
			damage = 50;
			defense = 14;
			lifeMax = 700;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.3f;
			value = 0f;
			npcSlots = 0.1f;
		}
		else if (type == 26)
		{
			scale = 0.9f;
			width = 18;
			height = 38;
			aiStyle = 3;
			damage = 12;
			defense = 4;
			lifeMax = 60;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.8f;
			value = 100f;
		}
		else if (type == 27)
		{
			scale = 0.95f;
			width = 18;
			height = 38;
			aiStyle = 3;
			damage = 20;
			defense = 6;
			lifeMax = 80;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.7f;
			value = 200f;
		}
		else if (type == 28)
		{
			scale = 1.1f;
			width = 18;
			height = 38;
			aiStyle = 3;
			damage = 25;
			defense = 8;
			lifeMax = 110;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
			value = 150f;
		}
		else if (type == 29)
		{
			width = 18;
			height = 38;
			aiStyle = 8;
			damage = 20;
			defense = 2;
			lifeMax = 40;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.6f;
			value = 200f;
		}
		else if (type == 30)
		{
			width = 16;
			height = 16;
			aiStyle = 9;
			damage = 20;
			defense = 0;
			lifeMax = 1;
			HitSound = SoundID.NPCHit3;
			DeathSound = SoundID.NPCDeath3;
			noGravity = true;
			noTileCollide = true;
			alpha = 100;
			knockBackResist = 0f;
		}
		else if (type == 111)
		{
			scale = 0.95f;
			width = 18;
			height = 38;
			aiStyle = 3;
			damage = 20;
			defense = 6;
			lifeMax = 80;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.7f;
			value = 200f;
		}
		else if (type == 471)
		{
			width = 18;
			height = 38;
			aiStyle = 3;
			damage = 80;
			defense = 26;
			lifeMax = 2000;
			HitSound = SoundID.NPCHit40;
			DeathSound = SoundID.NPCDeath42;
			knockBackResist = 0.15f;
			value = 5000f;
			rarity = 1;
		}
		else if (type == 472)
		{
			width = 40;
			height = 24;
			aiStyle = 86;
			damage = 50;
			defense = 18;
			lifeMax = 180;
			HitSound = SoundID.NPCHit52;
			DeathSound = SoundID.NPCDeath55;
			knockBackResist = 0f;
			value = 0f;
			npcSlots = 0.1f;
		}
		else if (type == 520)
		{
			width = 34;
			height = 110;
			aiStyle = 3;
			damage = 60;
			defense = 40;
			lifeMax = 2000;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath14;
			knockBackResist = 0f;
		}
		else if (type == 521)
		{
			width = 60;
			height = 60;
			aiStyle = 86;
			damage = 90;
			defense = 30;
			lifeMax = 2000;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0f;
		}
		else if (type == 522)
		{
			width = 26;
			height = 26;
			aiStyle = 100;
			damage = 120;
			defense = 0;
			lifeMax = 400;
			HitSound = null;
			DeathSound = null;
			noGravity = true;
			noTileCollide = true;
			alpha = 0;
			knockBackResist = 0f;
		}
		else if (type == 523)
		{
			width = 42;
			height = 42;
			aiStyle = 101;
			damage = 30;
			defense = 0;
			lifeMax = 500;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			noGravity = true;
			noTileCollide = true;
			alpha = 0;
			knockBackResist = 0f;
			chaseable = false;
			alpha = 255;
			canGhostHeal = false;
		}
		else if (type == 534)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 14;
			defense = 20;
			lifeMax = 400;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.3f;
			value = 0f;
			lavaImmune = true;
			netAlways = true;
			rarity = 2;
		}
		else if (type == 535)
		{
			width = 24;
			height = 18;
			aiStyle = 1;
			damage = 14;
			defense = 5;
			lifeMax = 50;
			scale = 1.1f;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			alpha = 0;
			value = 40f;
		}
		else if (type == 536)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 14;
			defense = 8;
			lifeMax = 200;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 1000f;
			rarity = 2;
		}
		else if (type == 537)
		{
			npcSlots = 2f;
			width = 30;
			height = 24;
			aiStyle = 1;
			damage = 15;
			defense = 5;
			lifeMax = 50;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			alpha = 50;
			color = new Color(255, 250, 0, 0) * 0.2f;
			value = 75f;
			knockBackResist = 0.7f;
		}
		else if (type == 538)
		{
			width = 18;
			height = 20;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 3563;
		}
		else if (type == 539)
		{
			width = 18;
			height = 20;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 3564;
			rarity = 3;
		}
		else if (type == 541)
		{
			width = 30;
			height = 76;
			aiStyle = 102;
			damage = 40;
			defense = 30;
			lifeMax = 5000;
			HitSound = SoundID.NPCHit23;
			DeathSound = SoundID.NPCDeath39;
			knockBackResist = 0.05f;
			value = Item.buyPrice(0, 1, 50);
			rarity = 2;
		}
		else if (type == 542)
		{
			noGravity = true;
			width = 100;
			height = 24;
			aiStyle = 103;
			damage = 50;
			defense = 20;
			lifeMax = 360;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 400f;
			knockBackResist = 0.9f;
			behindTiles = true;
		}
		else if (type == 543)
		{
			noGravity = true;
			width = 100;
			height = 24;
			aiStyle = 103;
			damage = 60;
			defense = 24;
			lifeMax = 380;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 400f;
			knockBackResist = 0.8f;
			behindTiles = true;
		}
		else if (type == 544)
		{
			noGravity = true;
			width = 100;
			height = 24;
			aiStyle = 103;
			damage = 64;
			defense = 22;
			lifeMax = 400;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 400f;
			knockBackResist = 0.8f;
			behindTiles = true;
		}
		else if (type == 545)
		{
			noGravity = true;
			width = 100;
			height = 24;
			aiStyle = 103;
			damage = 54;
			defense = 26;
			lifeMax = 450;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 400f;
			knockBackResist = 0.7f;
			behindTiles = true;
		}
		else if (type == 546)
		{
			width = 30;
			height = 30;
			aiStyle = 26;
			damage = 30;
			defense = 6;
			lifeMax = 50;
			HitSound = SoundID.NPCHit11;
			DeathSound = SoundID.NPCDeath15;
			knockBackResist = 0.8f;
			value = 100f;
		}
		else if (type == 547)
		{
			width = 16;
			height = 16;
			aiStyle = 104;
			defense = 10;
			lifeMax = 10;
			HitSound = SoundID.NPCHit11;
			DeathSound = SoundID.NPCDeath15;
			knockBackResist = 1f;
			noGravity = true;
			noTileCollide = true;
		}
		else if (type == 548)
		{
			width = 40;
			height = 40;
			aiStyle = 105;
			defense = 14;
			lifeMax = 1000;
			HitSound = SoundID.DD2_CrystalCartImpact;
			DeathSound = SoundID.NPCDeath15;
			knockBackResist = 0f;
			friendly = true;
			npcSlots = 0f;
			hide = true;
			if (Main.hardMode && downedMechBossAny)
			{
				defense = 18;
				lifeMax = 3000;
			}
			if (downedGolemBoss && Main.hardMode)
			{
				defense = 20;
				lifeMax = 5000;
			}
			if (Main.masterMode)
			{
				lifeMax *= 3;
			}
			else if (Main.expertMode)
			{
				lifeMax *= 2;
			}
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 549)
		{
			lifeMax = 5;
			defense = 20;
			damage = 0;
			width = 78;
			height = 130;
			aiStyle = 106;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			value = 0f;
			knockBackResist = 0f;
			noGravity = true;
			noTileCollide = true;
			npcSlots = 0f;
			behindTiles = true;
			dontTakeDamage = true;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 552)
		{
			lifeMax = 30;
			defense = 14;
			damage = 18;
			width = 18;
			height = 40;
			aiStyle = 107;
			HitSound = SoundID.DD2_GoblinHurt;
			DeathSound = SoundID.DD2_GoblinDeath;
			knockBackResist = 0.2f;
			value = 0f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 553)
		{
			lifeMax = 170;
			defense = 20;
			damage = 46;
			width = 18;
			height = 40;
			aiStyle = 107;
			HitSound = SoundID.DD2_GoblinHurt;
			DeathSound = SoundID.DD2_GoblinDeath;
			knockBackResist = 0.2f;
			value = 0f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 554)
		{
			lifeMax = 560;
			defense = 28;
			damage = 70;
			width = 18;
			height = 40;
			aiStyle = 107;
			HitSound = SoundID.DD2_GoblinHurt;
			DeathSound = SoundID.DD2_GoblinDeath;
			knockBackResist = 0.15f;
			value = 0f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 561)
		{
			lifeMax = 60;
			defense = 18;
			damage = 30;
			width = 26;
			height = 52;
			aiStyle = 107;
			HitSound = SoundID.DD2_JavelinThrowersHurt;
			DeathSound = SoundID.DD2_JavelinThrowersDeath;
			knockBackResist = 0.1f;
			value = 0f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 562)
		{
			lifeMax = 300;
			defense = 28;
			damage = 60;
			width = 26;
			height = 52;
			aiStyle = 107;
			HitSound = SoundID.DD2_JavelinThrowersHurt;
			DeathSound = SoundID.DD2_JavelinThrowersDeath;
			knockBackResist = 0.1f;
			value = 0f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 563)
		{
			lifeMax = 1000;
			defense = 38;
			damage = 80;
			width = 26;
			height = 52;
			aiStyle = 107;
			HitSound = SoundID.DD2_JavelinThrowersHurt;
			DeathSound = SoundID.DD2_JavelinThrowersDeath;
			knockBackResist = 0.05f;
			value = 0f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 555)
		{
			lifeMax = 50;
			defense = 16;
			damage = 26;
			width = 18;
			height = 40;
			aiStyle = 107;
			HitSound = SoundID.DD2_GoblinBomberHurt;
			DeathSound = SoundID.DD2_GoblinBomberDeath;
			knockBackResist = 0.2f;
			value = 0f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 556)
		{
			lifeMax = 200;
			defense = 26;
			damage = 55;
			width = 18;
			height = 40;
			aiStyle = 107;
			HitSound = SoundID.DD2_GoblinBomberHurt;
			DeathSound = SoundID.DD2_GoblinBomberDeath;
			knockBackResist = 0.2f;
			value = 0f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 557)
		{
			lifeMax = 700;
			defense = 34;
			damage = 75;
			width = 18;
			height = 40;
			aiStyle = 107;
			HitSound = SoundID.DD2_GoblinBomberHurt;
			DeathSound = SoundID.DD2_GoblinBomberDeath;
			knockBackResist = 0.15f;
			value = 0f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 558)
		{
			width = 38;
			height = 38;
			aiStyle = 108;
			damage = 30;
			defense = 4;
			lifeMax = 60;
			HitSound = SoundID.DD2_WyvernHurt;
			DeathSound = SoundID.DD2_WyvernDeath;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0.2f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 559)
		{
			width = 38;
			height = 38;
			aiStyle = 108;
			damage = 75;
			defense = 16;
			lifeMax = 180;
			HitSound = SoundID.DD2_WyvernHurt;
			DeathSound = SoundID.DD2_WyvernDeath;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0.2f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 560)
		{
			width = 38;
			height = 38;
			aiStyle = 108;
			damage = 100;
			defense = 30;
			lifeMax = 600;
			HitSound = SoundID.DD2_WyvernHurt;
			DeathSound = SoundID.DD2_WyvernDeath;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0.05f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 550)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 576)
		{
			lifeMax = 5000;
			defense = 34;
			damage = 70;
			width = 96;
			height = 124;
			aiStyle = 107;
			HitSound = SoundID.DD2_OgreHurt;
			DeathSound = SoundID.DD2_OgreDeath;
			knockBackResist = 0f;
			value = 0f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 577)
		{
			lifeMax = 13000;
			defense = 40;
			damage = 90;
			width = 96;
			height = 124;
			aiStyle = 107;
			HitSound = SoundID.DD2_OgreHurt;
			DeathSound = SoundID.DD2_OgreDeath;
			knockBackResist = 0f;
			value = 0f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 568)
		{
			lifeMax = 500;
			defense = 30;
			damage = 50;
			width = 18;
			height = 40;
			aiStyle = 107;
			HitSound = SoundID.DD2_WitherBeastHurt;
			DeathSound = SoundID.DD2_WitherBeastDeath;
			knockBackResist = 0.15f;
			value = 0f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 569)
		{
			lifeMax = 1400;
			defense = 40;
			damage = 80;
			width = 18;
			height = 40;
			aiStyle = 107;
			HitSound = SoundID.DD2_WitherBeastHurt;
			DeathSound = SoundID.DD2_WitherBeastDeath;
			knockBackResist = 0.05f;
			value = 0f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 566)
		{
			lifeMax = 25;
			defense = 12;
			damage = 18;
			width = 18;
			height = 40;
			aiStyle = 107;
			HitSound = SoundID.DD2_SkeletonHurt;
			DeathSound = SoundID.DD2_SkeletonDeath;
			knockBackResist = 0.3f;
			value = 0f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 567)
		{
			lifeMax = 480;
			defense = 22;
			damage = 70;
			width = 18;
			height = 40;
			aiStyle = 107;
			HitSound = SoundID.DD2_SkeletonHurt;
			DeathSound = SoundID.DD2_SkeletonDeath;
			knockBackResist = 0.2f;
			value = 0f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 572)
		{
			lifeMax = 260;
			defense = 26;
			damage = 60;
			width = 18;
			height = 40;
			aiStyle = 107;
			HitSound = SoundID.DD2_KoboldHurt;
			DeathSound = SoundID.DD2_KoboldDeath;
			knockBackResist = 0.2f;
			value = 0f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 573)
		{
			lifeMax = 800;
			defense = 32;
			damage = 80;
			width = 18;
			height = 40;
			aiStyle = 107;
			HitSound = SoundID.DD2_KoboldHurt;
			DeathSound = SoundID.DD2_KoboldDeath;
			knockBackResist = 0.1f;
			value = 0f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 570)
		{
			lifeMax = 900;
			defense = 30;
			damage = 60;
			width = 42;
			height = 58;
			aiStyle = 107;
			HitSound = SoundID.DD2_DrakinHurt;
			DeathSound = SoundID.DD2_DrakinDeath;
			knockBackResist = 0f;
			value = 0f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 571)
		{
			lifeMax = 3000;
			defense = 40;
			damage = 90;
			width = 42;
			height = 58;
			aiStyle = 107;
			HitSound = SoundID.DD2_DrakinHurt;
			DeathSound = SoundID.DD2_DrakinDeath;
			knockBackResist = 0f;
			value = 0f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 564)
		{
			lifeMax = 800;
			defense = 18;
			damage = 40;
			width = 34;
			height = 62;
			aiStyle = 109;
			HitSound = SoundID.DD2_DarkMageHurt;
			DeathSound = SoundID.DD2_DarkMageDeath;
			knockBackResist = 0f;
			value = 0f;
			npcSlots = 0f;
			noGravity = true;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 565)
		{
			lifeMax = 4000;
			defense = 38;
			damage = 90;
			width = 34;
			height = 62;
			aiStyle = 109;
			HitSound = SoundID.DD2_DarkMageHurt;
			DeathSound = SoundID.DD2_DarkMageDeath;
			knockBackResist = 0f;
			value = 0f;
			npcSlots = 0f;
			noGravity = true;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 574)
		{
			width = 38;
			height = 38;
			aiStyle = 108;
			damage = 50;
			defense = 16;
			lifeMax = 170;
			HitSound = SoundID.DD2_KoboldFlyerHurt;
			DeathSound = SoundID.DD2_KoboldFlyerDeath;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0.4f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 575)
		{
			width = 38;
			height = 38;
			aiStyle = 108;
			damage = 80;
			defense = 32;
			lifeMax = 580;
			HitSound = SoundID.DD2_KoboldFlyerHurt;
			DeathSound = SoundID.DD2_KoboldFlyerDeath;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0.25f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 551)
		{
			damage = 80;
			defense = 38;
			lifeMax = 50000;
			width = 190;
			height = 90;
			aiStyle = 110;
			HitSound = SoundID.DD2_BetsyHurt;
			DeathSound = SoundID.DD2_BetsyDeath;
			knockBackResist = 0f;
			value = 0f;
			noGravity = true;
			noTileCollide = true;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 578)
		{
			width = 30;
			height = 24;
			aiStyle = 111;
			damage = 80;
			defense = 36;
			lifeMax = 500;
			HitSound = SoundID.DD2_LightningBugHurt;
			DeathSound = SoundID.DD2_LightningBugDeath;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0.8f;
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
		}
		else if (type == 579)
		{
			friendly = true;
			width = 34;
			height = 8;
			aiStyle = 0;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0.5f;
			scale = 1f;
			rarity = 1;
		}
		else if (type == 582)
		{
			width = 18;
			height = 18;
			aiStyle = 3;
			damage = 10;
			defense = 2;
			lifeMax = 30;
			HitSound = SoundID.NPCHit31;
			DeathSound = SoundID.NPCDeath34;
			knockBackResist = 0.75f;
			value = 40f;
			npcSlots = 0.4f;
		}
		else if (type == 583 || type == 584 || type == 585)
		{
			width = 18;
			height = 20;
			aiStyle = 112;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			switch (type)
			{
			case 583:
				catchItem = 4068;
				break;
			case 584:
				catchItem = 4069;
				break;
			case 585:
				catchItem = 4070;
				break;
			}
			noGravity = true;
			rarity = 2;
		}
		else if (type == 586)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 40;
			defense = 20;
			lifeMax = 400;
			HitSound = SoundID.NPCHit18;
			DeathSound = SoundID.NPCDeath21;
			knockBackResist = 0f;
			value = 1000f;
			alpha = 255;
			rarity = 1;
		}
		else if (type == 587)
		{
			width = 32;
			height = 18;
			aiStyle = 44;
			damage = 35;
			defense = 18;
			lifeMax = 300;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0f;
			DeathSound = SoundID.NPCDeath1;
			value = 1000f;
			alpha = 255;
			rarity = 1;
		}
		else if (type == 588)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 589)
		{
			friendly = true;
			width = 18;
			height = 34;
			aiStyle = 0;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
			rarity = 1;
		}
		else if (type == 590 || type == 591)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 14;
			defense = 6;
			lifeMax = 45;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 60f;
		}
		else if (type == 592)
		{
			noGravity = true;
			width = 20;
			height = 18;
			aiStyle = 16;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
			catchItem = 4274;
			rarity = 3;
		}
		else if (type == 593)
		{
			width = 18;
			height = 20;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 4274;
			rarity = 3;
		}
		else if (type == 594)
		{
			width = 20;
			height = 20;
			aiStyle = 113;
			damage = 0;
			defense = 0;
			knockBackResist = 0.3f;
			lifeMax = 1;
			DeathSound = SoundID.NPCDeath63;
			value = 0f;
			noGravity = true;
		}
		else if (type >= 595 && type <= 601)
		{
			timeLeft *= 3;
			width = 10;
			height = 10;
			aiStyle = 114;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			npcSlots = 0.25f;
			noGravity = true;
			if (type == 601)
			{
				rarity = 3;
			}
			catchItem = (short)(type - 595 + 4334);
		}
		else if (type == 602)
		{
			width = 22;
			height = 26;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 4359;
		}
		else if (type == 603)
		{
			width = 28;
			height = 22;
			aiStyle = 68;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 4359;
		}
		else if (type == 604 || type == 605)
		{
			width = 10;
			height = 10;
			aiStyle = 115;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			npcSlots = 0.25f;
			noGravity = true;
			if (type == 605)
			{
				rarity = 3;
			}
			catchItem = (short)(type - 604 + 4361);
		}
		else if (type == 606)
		{
			width = 10;
			height = 4;
			aiStyle = 66;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			npcSlots = 0.1f;
			catchItem = 4363;
		}
		else if (type == 607)
		{
			noGravity = true;
			width = 20;
			height = 18;
			aiStyle = 16;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
			catchItem = 4373;
		}
		else if (type == 608)
		{
			width = 22;
			height = 26;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 4374;
		}
		else if (type == 609)
		{
			width = 28;
			height = 22;
			aiStyle = 68;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 4374;
		}
		else if (type == 610)
		{
			width = 14;
			height = 12;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath4;
			npcSlots = 0.25f;
			catchItem = 4375;
		}
		else if (type == 611)
		{
			width = 18;
			height = 34;
			aiStyle = 24;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.8f;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 4395;
			npcSlots = 0.4f;
		}
		else if (type == 612 || type == 613)
		{
			width = 10;
			height = 10;
			aiStyle = 116;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			npcSlots = 0.25f;
			if (type == 613)
			{
				rarity = 3;
			}
			catchItem = (short)(type - 612 + 4418);
			waterMovementSpeed = 1f;
			lavaMovementSpeed = 1f;
			honeyMovementSpeed = 1f;
		}
		else if (type == 614)
		{
			width = 18;
			height = 20;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = null;
			catchItem = 1338;
		}
		else if (type == 615)
		{
			noGravity = true;
			width = 20;
			height = 18;
			aiStyle = 16;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 616 || type == 617)
		{
			width = 22;
			height = 20;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
			catchItem = (short)(type - 616 + 4464);
		}
		else if (type == 618)
		{
			noGravity = true;
			width = 100;
			height = 100;
			aiStyle = 117;
			damage = 55;
			defense = 24;
			lifeMax = 7000;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0f;
			value = Item.buyPrice(0, 2);
			noTileCollide = true;
			rarity = 1;
		}
		else if (type == 619)
		{
			npcSlots = 1f;
			width = 44;
			height = 44;
			aiStyle = 5;
			damage = 60;
			defense = 16;
			lifeMax = 750;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			knockBackResist = 0f;
			value = 500f;
			alpha = 255;
		}
		else if (type == 620)
		{
			lifeMax = 5000;
			defense = 30;
			damage = 70;
			width = 34;
			height = 58;
			aiStyle = 107;
			HitSound = SoundID.DD2_DrakinHurt;
			DeathSound = SoundID.DD2_DrakinDeath;
			knockBackResist = 0f;
			value = Item.buyPrice(0, 0, 75);
			npcSlots = 0f;
			lavaImmune = true;
			LazySetLiquidMovementDD2();
			netAlways = true;
			alpha = 255;
			rarity = 1;
		}
		else if (type == 621)
		{
			npcSlots = 5f;
			width = 28;
			height = 28;
			aiStyle = 6;
			damage = 90;
			defense = 0;
			lifeMax = 6000;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			value = Item.buyPrice(0, 0, 75);
			alpha = 255;
			rarity = 1;
		}
		else if (type == 622)
		{
			width = 28;
			height = 28;
			aiStyle = 6;
			netAlways = true;
			damage = 60;
			defense = 30;
			lifeMax = 6000;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			dontCountMe = true;
			npcSlots = 0f;
			alpha = 255;
		}
		else if (type == 623)
		{
			width = 28;
			height = 28;
			aiStyle = 6;
			netAlways = true;
			damage = 50;
			defense = 40;
			lifeMax = 6000;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			behindTiles = true;
			dontCountMe = true;
			npcSlots = 0f;
			alpha = 255;
		}
		else if (type == 624)
		{
			width = 14;
			height = 30;
			aiStyle = 3;
			damage = 10;
			defense = 0;
			lifeMax = 25;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 1f;
			rarity = 1;
		}
		else if (type == 625)
		{
			width = 22;
			height = 20;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 626 || type == 627)
		{
			width = 16;
			height = 20;
			aiStyle = 118;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 1f;
			if (type == 627)
			{
				rarity = 3;
			}
			catchItem = 4480;
			if (type == 627)
			{
				catchItem = 4482;
			}
		}
		else if (type == 628)
		{
			width = 22;
			height = 40;
			aiStyle = 119;
			damage = 15;
			defense = 0;
			lifeMax = 50;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0f;
			value = 50f;
		}
		else if (type == 629)
		{
			width = 24;
			height = 24;
			aiStyle = 25;
			damage = 80;
			defense = 30;
			lifeMax = 500;
			HitSound = SoundID.NPCHit4;
			DeathSound = SoundID.NPCDeath6;
			value = 100000f;
			knockBackResist = 0.3f;
			rarity = 4;
			coldDamage = true;
			if (Main.remixWorld && !Main.hardMode)
			{
				damage = 30;
				defense = 12;
				lifeMax = 300;
				value = Item.buyPrice(0, 2);
			}
		}
		else if (type == 630)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 60;
			defense = 18;
			lifeMax = 180;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0.5f;
			value = 700f;
		}
		else if (type == 631)
		{
			width = 36;
			height = 48;
			scale = 1.1f;
			aiStyle = 3;
			damage = 85;
			defense = 35;
			lifeMax = 1000;
			HitSound = SoundID.NPCHit41;
			DeathSound = SoundID.NPCDeath43;
			knockBackResist = 0.1f;
			value = 25000f;
		}
		else if (type == 632)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 14;
			defense = 6;
			lifeMax = 45;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 60f;
		}
		else if (type == 633)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.5f;
		}
		else if (type == 634)
		{
			npcSlots = 0.5f;
			width = 22;
			height = 18;
			aiStyle = 14;
			damage = 13;
			defense = 2;
			lifeMax = 16;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.8f;
			DeathSound = SoundID.NPCDeath4;
			value = 90f;
		}
		else if (type == 635)
		{
			width = 18;
			height = 40;
			aiStyle = 3;
			damage = 20;
			defense = 8;
			lifeMax = 60;
			HitSound = SoundID.NPCHit2;
			DeathSound = SoundID.NPCDeath2;
			knockBackResist = 0.5f;
			value = 100f;
		}
		else if (type == 636)
		{
			noGravity = true;
			width = 100;
			height = 100;
			aiStyle = 120;
			damage = 80;
			defense = 50;
			lifeMax = 70000;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath65;
			knockBackResist = 0f;
			value = 250000f;
			noTileCollide = true;
			boss = true;
			Opacity = 0f;
			dontTakeDamage = true;
			npcSlots = 16f;
		}
		else if (type == 637 || type == 638)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 28;
			if (type == 637)
			{
				height = 20;
			}
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0.5f;
			housingCategory = 1;
		}
		else if (type >= 639 && type <= 645)
		{
			width = 18;
			height = 20;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			catchItem = (short)(4831 + (type - 639));
		}
		else if (type >= 646 && type <= 652)
		{
			width = 18;
			height = 20;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			catchItem = (short)(4838 + (type - 646));
		}
		else if (type == 653)
		{
			width = 10;
			height = 10;
			aiStyle = 65;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			npcSlots = 0.25f;
			noGravity = true;
			lavaImmune = true;
			catchItem = 4845;
		}
		else if (type == 654)
		{
			width = 10;
			height = 10;
			aiStyle = 64;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			npcSlots = 0.2f;
			noGravity = true;
			lavaImmune = true;
			catchItem = 4847;
		}
		else if (type == 655)
		{
			width = 14;
			height = 14;
			aiStyle = 67;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			npcSlots = 0.5f;
			noGravity = true;
			lavaImmune = true;
			catchItem = 4849;
		}
		else if (type == 656)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 20;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0.5f;
			housingCategory = 1;
		}
		else if (type == 657)
		{
			width = 114;
			height = 100;
			aiStyle = 121;
			damage = 60;
			defense = 26;
			lifeMax = 18000;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath64;
			lavaImmune = true;
			knockBackResist = 0f;
			value = 60000f;
			boss = true;
			npcSlots = 5f;
		}
		else if (type == 658 || type == 659)
		{
			width = 24;
			height = 18;
			aiStyle = 1;
			damage = 40;
			defense = 35;
			lifeMax = 150;
			scale = 1f;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
		}
		else if (type == 660)
		{
			width = 40;
			height = 30;
			aiStyle = 14;
			damage = 50;
			defense = 30;
			lifeMax = 120;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			knockBackResist = 0.8f;
			scale = 1f;
		}
		else if (type == 661)
		{
			width = 10;
			height = 10;
			aiStyle = 65;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			npcSlots = 0.25f;
			noGravity = true;
			lavaImmune = true;
			catchItem = 4961;
			rarity = 4;
		}
		else if (type == 662)
		{
			width = 18;
			height = 40;
			aiStyle = 122;
			damage = 75;
			defense = 22;
			lifeMax = 500;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0.2f;
			value = 0f;
			noTileCollide = true;
			lavaImmune = true;
			trapImmune = true;
			noGravity = true;
		}
		else if (type == 663)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 40;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0.5f;
		}
		else if (type == 664)
		{
			lifeMax = 20;
			boss = true;
		}
		else if (type == 665)
		{
			width = 16;
			height = 16;
			aiStyle = 9;
			damage = 20;
			defense = 0;
			lifeMax = 1;
			HitSound = SoundID.NPCHit3;
			DeathSound = SoundID.NPCDeath3;
			noGravity = true;
			noTileCollide = true;
			alpha = 100;
			knockBackResist = 0f;
		}
		else if (type == 666)
		{
			width = 16;
			height = 16;
			aiStyle = 9;
			damage = 65;
			defense = 0;
			lifeMax = 1;
			HitSound = null;
			DeathSound = SoundID.NPCDeath9;
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			scale = 0.9f;
			alpha = 80;
		}
		else if (type == 667)
		{
			width = 24;
			height = 18;
			aiStyle = 1;
			damage = 5;
			defense = 5;
			lifeMax = 300;
			knockBackResist *= 1.4f;
			rarity = 2;
			scale = 1f;
			value = Item.buyPrice(0, 15);
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
		}
		else if (type == 668)
		{
			width = 60;
			height = 154;
			aiStyle = 123;
			damage = 20;
			defense = 10;
			lifeMax = 7000;
			HitSound = SoundID.DeerclopsHit;
			DeathSound = SoundID.DeerclopsDeath;
			knockBackResist = 0f;
			boss = true;
			noGravity = true;
			noTileCollide = true;
			value = Item.buyPrice(0, 5);
			npcSlots = 10f;
			coldDamage = true;
		}
		else if (type == 669)
		{
			width = 10;
			height = 10;
			aiStyle = 115;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			npcSlots = 0.25f;
			noGravity = true;
			catchItem = 5132;
		}
		else if (type == 670)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 20;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0.5f;
			housingCategory = 1;
		}
		else if (type == 671)
		{
			width = 14;
			height = 14;
			aiStyle = 24;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.8f;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 5212;
			npcSlots = 1f;
		}
		else if (type == 672)
		{
			width = 14;
			height = 14;
			aiStyle = 24;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.8f;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 5300;
			npcSlots = 1f;
		}
		else if (type == 673)
		{
			width = 14;
			height = 14;
			aiStyle = 24;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.8f;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 5311;
			npcSlots = 1f;
		}
		else if (type == 674)
		{
			width = 14;
			height = 14;
			aiStyle = 24;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.8f;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 5312;
			npcSlots = 1f;
		}
		else if (type == 675)
		{
			width = 14;
			height = 14;
			aiStyle = 24;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			knockBackResist = 0.8f;
			DeathSound = SoundID.NPCDeath1;
			catchItem = 5313;
			npcSlots = 1f;
		}
		else if (type == 676)
		{
			width = 24;
			height = 18;
			aiStyle = 1;
			damage = 20;
			defense = 5;
			lifeMax = 80;
			scale = 1f;
			value = Item.buyPrice(0, 0, 1, 50);
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
		}
		else if (type == 677)
		{
			width = 10;
			height = 10;
			aiStyle = 64;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath1;
			npcSlots = 0.2f;
			noGravity = true;
			catchItem = 5350;
			noTileCollide = true;
		}
		else if (type == 678 || type == 679 || type == 680 || type == 681 || type == 682 || type == 683 || type == 684)
		{
			townNPC = true;
			friendly = true;
			width = 18;
			height = 20;
			aiStyle = 7;
			damage = 10;
			defense = 15;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			knockBackResist = 0.5f;
			housingCategory = 1;
		}
		else if (type == 685)
		{
			width = 30;
			height = 28;
			aiStyle = 1;
			damage = 0;
			defense = 10;
			knockBackResist = 0.3f;
			lifeMax = 250;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			value = 0f;
			rarity = 2;
			friendly = true;
		}
		else if (type == 686)
		{
			width = 20;
			height = 20;
			aiStyle = 125;
			damage = 0;
			defense = 0;
			knockBackResist = 0.3f;
			lifeMax = 1;
			DeathSound = SoundID.NPCDeath63;
			value = 0f;
			rarity = 2;
			noGravity = true;
			noTileCollide = true;
			dontTakeDamageFromHostiles = true;
		}
		else if (type == 687)
		{
			width = 18;
			height = 20;
			aiStyle = 7;
			damage = 0;
			defense = 0;
			lifeMax = 5;
			rarity = 2;
			HitSound = SoundID.NPCHit1;
			DeathSound = SoundID.NPCDeath6;
			catchItem = 2121;
		}
		if (NPCID.Sets.ImmuneToAllBuffs[type])
		{
			Array.Fill(buffImmune, value: true);
		}
		if (NPCID.Sets.ImmuneToRegularBuffs[type] || NPCID.Sets.ImmuneToAllBuffs[type])
		{
			if (!NPCID.Sets.ImmuneToAllBuffs[type])
			{
				for (int m = 0; m < buffImmune.Length; m++)
				{
					buffImmune[m] = !BuffID.Sets.IsATagBuff[m];
				}
			}
			for (int l = 0; l < NPCID.Sets.SpecificDebuffImmunity[type].Length; l++)
			{
				if ((!NPCID.Sets.SpecificDebuffImmunity[type][l]) ?? false)
				{
					buffImmune[l] = false;
				}
			}
			int i;
			for (i = 0; i < BuffID.Sets.GrantImmunityWith.Length; i++)
			{
				List<int> buffsToInherit = BuffID.Sets.GrantImmunityWith[i];
				if (buffsToInherit.Count > 0 && buffsToInherit.All((int x) => !buffImmune[i]))
				{
					buffImmune[i] = false;
				}
			}
			for (int j = 0; j < NPCID.Sets.SpecificDebuffImmunity[type].Length; j++)
			{
				if (NPCID.Sets.SpecificDebuffImmunity[type][j] ?? false)
				{
					buffImmune[j] = true;
				}
			}
		}
		else
		{
			for (int i3 = 0; i3 < NPCID.Sets.SpecificDebuffImmunity[type].Length; i3++)
			{
				if (NPCID.Sets.SpecificDebuffImmunity[type][i3] ?? false)
				{
					buffImmune[i3] = true;
				}
			}
			for (int i2 = 0; i2 < BuffID.Sets.GrantImmunityWith.Length; i2++)
			{
				foreach (int inheritableBuff in BuffID.Sets.GrantImmunityWith[i2])
				{
					if (buffImmune[inheritableBuff])
					{
						buffImmune[i2] = true;
						break;
					}
				}
			}
			for (int n = 0; n < NPCID.Sets.SpecificDebuffImmunity[type].Length; n++)
			{
				if ((!NPCID.Sets.SpecificDebuffImmunity[type][n]) ?? false)
				{
					buffImmune[n] = false;
				}
			}
		}
		NPCLoader.SetDefaults(this);
		if (Main.dedServ)
		{
			frame = default(Rectangle);
		}
		else if (TextureAssets.Npc[type] != null && TextureAssets.Npc[type].IsLoaded)
		{
			frame = new Rectangle(0, 0, TextureAssets.Npc[type].Width(), TextureAssets.Npc[type].Height() / Main.npcFrameCount[type]);
		}
		else
		{
			setFrameSize = true;
		}
		if (spawnparams.sizeScaleOverride.HasValue)
		{
			int num2 = (int)((float)width * scale);
			int num3 = (int)((float)height * scale);
			position.X += num2 / 2;
			position.Y += num3;
			scale = spawnparams.sizeScaleOverride.Value;
			width = (int)((float)width * scale);
			height = (int)((float)height * scale);
			if (height == 16 || height == 32)
			{
				height++;
			}
			position.X -= width / 2;
			position.Y -= height;
		}
		else
		{
			width = (int)((float)width * scale);
			height = (int)((float)height * scale);
		}
		life = lifeMax;
		defDamage = damage;
		defDefense = defense;
		netID = type;
		if (Main.zenithWorld)
		{
			getZenithSeedAdjustmentsBeforeEverything();
		}
		if (Main.getGoodWorld)
		{
			getGoodAdjustments();
		}
		else if (Main.tenthAnniversaryWorld)
		{
			getTenthAnniversaryAdjustments();
		}
		if (type >= 0 && Main.npcCatchable[type] && catchableNPCTempImmunityCounter < 1)
		{
			catchableNPCTempImmunityCounter = 90;
			catchableNPCOriginallyFriendly = friendly;
			friendly = true;
		}
		ScaleStats(spawnparams.playerCountForMultiplayerDifficultyOverride, spawnparams.gameModeData.Value, spawnparams.strengthMultiplierOverride);
		life = lifeMax;
	}

	private void getTenthAnniversaryAdjustments()
	{
		float num = scale;
		float num2 = 0.5f;
		switch (type)
		{
		case 4:
			scale *= num2;
			break;
		case 13:
		case 14:
		case 15:
			scale *= num2;
			break;
		case 266:
		case 267:
			scale *= num2;
			break;
		case 35:
		case 36:
			scale *= num2;
			break;
		case 222:
			scale *= num2;
			break;
		case 113:
		case 114:
		case 115:
		case 116:
			scale *= num2;
			break;
		case 134:
		case 135:
		case 136:
		case 139:
			scale *= num2;
			break;
		case 125:
		case 126:
			scale *= num2;
			break;
		case 127:
		case 128:
		case 129:
		case 130:
		case 131:
			scale *= num2;
			break;
		case 370:
			scale *= num2;
			break;
		case 636:
			scale *= num2;
			break;
		case 422:
		case 493:
		case 507:
		case 517:
			scale *= num2;
			break;
		}
		if (IsABestiaryIconDummy)
		{
			scale = num;
			return;
		}
		width = (int)((float)width * scale);
		height = (int)((float)height * scale);
	}

	private void getZenithSeedAdjustmentsBeforeEverything()
	{
		int num = type;
		if ((uint)(num - 125) <= 6u || num == 139)
		{
			lifeMax = (int)((float)lifeMax * 0.8f);
		}
	}

	private void getGoodAdjustments()
	{
		float num = scale;
		if (type == 13)
		{
			scale *= 1.35f;
			defense += 2;
		}
		else if (type == 14)
		{
			scale *= 1.4f;
			defense += 2;
		}
		else if (type == 15)
		{
			scale *= 1.4f;
			defense += 2;
		}
		else if (type == 35)
		{
			scale *= 1.25f;
		}
		else if (type == 36)
		{
			scale *= 1.15f;
		}
		else if (type == 113)
		{
			scale *= 0.65f;
			lifeMax = (int)((double)lifeMax * 1.5);
			defense += 3;
		}
		else if (type == 114)
		{
			scale *= 0.65f;
			lifeMax = (int)((double)lifeMax * 1.5);
			defense += 3;
		}
		else if (type == 115)
		{
			scale *= 1.4f;
		}
		else if (type == 116)
		{
			scale *= 1.4f;
		}
		else if (type == 222)
		{
			scale *= 1.2f;
		}
		else if (type == 245)
		{
			canDisplayBuffs = false;
			scale *= 0.5f;
		}
		else if (type == 246)
		{
			canDisplayBuffs = false;
			scale *= 0.5f;
		}
		else if (type == 247 || type == 248)
		{
			canDisplayBuffs = false;
			scale *= 0.5f;
		}
		else if (type == 249)
		{
			scale *= 0.5f;
		}
		else if (type == 262)
		{
			scale *= 1.3f;
		}
		else if (type == 266)
		{
			defense = (int)((double)defense * 1.5);
			damage = (int)((double)damage * 1.2);
			scale *= 1.1f;
		}
		else if (type == 125)
		{
			scale *= 0.8f;
		}
		else if (type == 126)
		{
			scale *= 0.8f;
		}
		else if (type == 127)
		{
			scale *= 1.1f;
		}
		else if (type == 128)
		{
			scale *= 1.1f;
		}
		else if (type == 129)
		{
			scale *= 1.1f;
		}
		else if (type == 130)
		{
			scale *= 1.1f;
		}
		else if (type == 131)
		{
			scale *= 1.1f;
		}
		else if (type == 134)
		{
			scale *= 1.3f;
		}
		else if (type == 135)
		{
			scale *= 1.3f;
		}
		else if (type == 136)
		{
			scale *= 1.3f;
		}
		else
		{
			if (type != 139)
			{
				return;
			}
			scale *= 1.6f;
		}
		if (IsABestiaryIconDummy)
		{
			scale = num;
			return;
		}
		width = (int)((float)width * scale);
		height = (int)((float)height * scale);
	}

	private void LazySetLiquidMovementDD2()
	{
		waterMovementSpeed = 1f;
		lavaMovementSpeed = 1f;
		honeyMovementSpeed = 1f;
	}

	public static void SetWorldSpecificMonstersByWorldID()
	{
		UnifiedRandom unifiedRandom = new UnifiedRandom(Main.worldID);
		int num = unifiedRandom.Next(3);
		int num2 = unifiedRandom.Next(3);
		while (num == num2)
		{
			num = unifiedRandom.Next(3);
		}
		for (int i = 0; i < 2; i++)
		{
			int num3 = num;
			if (i == 1)
			{
				num3 = num2;
			}
			for (int j = 0; j < 3; j++)
			{
				switch (num3)
				{
				case 0:
					cavernMonsterType[i, j] = unifiedRandom.Next(494, 496);
					break;
				case 1:
					cavernMonsterType[i, j] = unifiedRandom.Next(496, 498);
					break;
				default:
					cavernMonsterType[i, j] = unifiedRandom.Next(498, 507);
					break;
				}
			}
		}
	}

	public NPCSpawnParams GetMatchingSpawnParams()
	{
		NPCSpawnParams result = default(NPCSpawnParams);
		result.sizeScaleOverride = -1f;
		result.playerCountForMultiplayerDifficultyOverride = statsAreScaledForThisManyPlayers;
		result.strengthMultiplierOverride = strengthMultiplier;
		return result;
	}

	public void ScaleStats(int? activePlayersCount, GameModeData gameModeData, float? strengthOverride)
	{
		if ((!NPCID.Sets.NeedsExpertScaling.IndexInRange(type) || !NPCID.Sets.NeedsExpertScaling[type]) && (lifeMax <= 5 || damage == 0 || friendly || townNPC))
		{
			return;
		}
		float num = 1f;
		if (strengthOverride.HasValue)
		{
			num = strengthOverride.Value;
		}
		else if (gameModeData.IsJourneyMode)
		{
			CreativePowers.DifficultySliderPower power = CreativePowerManager.Instance.GetPower<CreativePowers.DifficultySliderPower>();
			if (power != null && power.GetIsUnlocked())
			{
				num = power.StrengthMultiplierToGiveNPCs;
			}
		}
		float num2 = num;
		if (gameModeData.IsJourneyMode && Main.getGoodWorld)
		{
			num += 1f;
		}
		NPCStrengthHelper nPCStrengthHelper = new NPCStrengthHelper(gameModeData, num, Main.getGoodWorld);
		if (nPCStrengthHelper.IsExpertMode)
		{
			ScaleStats_ApplyExpertTweaks();
		}
		ScaleStats_ApplyGameMode(gameModeData);
		if (Main.getGoodWorld && nPCStrengthHelper.ExtraDamageForGetGoodWorld)
		{
			damage += damage / 3;
		}
		if (nPCStrengthHelper.IsExpertMode)
		{
			int num3 = 1;
			num3 = (statsAreScaledForThisManyPlayers = ((!activePlayersCount.HasValue) ? GetActivePlayerCount() : activePlayersCount.Value));
			GetStatScalingFactors(num3, out var balance, out var boost);
			float bossAdjustment = 1f;
			if (nPCStrengthHelper.IsMasterMode)
			{
				bossAdjustment = 0.85f;
			}
			ScaleStats_ApplyMultiplayerStats(num3, balance, boost, bossAdjustment);
		}
		ScaleStats_UseStrengthMultiplier(num);
		strengthMultiplier = num2;
		if ((type < 0 || !NPCID.Sets.ProjectileNPC[type]) && lifeMax < 6)
		{
			lifeMax = 6;
		}
		life = lifeMax;
		defDamage = damage;
		defDefense = defense;
	}

	public void ScaleStats_UseStrengthMultiplier(float strength)
	{
		if (strength == 1f)
		{
			return;
		}
		int num;
		if (type >= 0)
		{
			num = (NPCID.Sets.ProjectileNPC[type] ? 1 : 0);
			if (num != 0)
			{
				goto IL_003c;
			}
		}
		else
		{
			num = 0;
		}
		lifeMax = (int)((float)lifeMax * strength);
		goto IL_003c;
		IL_003c:
		damage = (int)((float)damage * strength);
		float num2 = 1f;
		float num3 = 2f;
		float num4 = 3f;
		if (Main.getGoodWorld)
		{
			num2 += 1f;
			num3 += 1f;
			num4 += 1f;
		}
		if (num == 0)
		{
			float num5 = GameModeData.NormalMode.EnemyMoneyDropMultiplier;
			float num6 = GameModeData.ExpertMode.EnemyMoneyDropMultiplier;
			if (Main.getGoodWorld)
			{
				num5 += 1f;
				num6 += 1f;
			}
			float num7 = Utils.Remap(strength, num2, num3, num5, num6);
			value = (int)(value * num7);
		}
		float knockbackToEnemiesMultiplier = GameModeData.NormalMode.KnockbackToEnemiesMultiplier;
		float knockbackToEnemiesMultiplier2 = GameModeData.MasterMode.KnockbackToEnemiesMultiplier;
		float num8 = Utils.Remap(strength, num2, num4, knockbackToEnemiesMultiplier, knockbackToEnemiesMultiplier2);
		knockBackResist *= num8;
	}

	public static float GetBalance()
	{
		GetStatScalingFactors(GetActivePlayerCount(), out var balance, out var _);
		return balance;
	}

	public float GetMyBalance()
	{
		if (statsAreScaledForThisManyPlayers <= 1)
		{
			return 1f;
		}
		GetStatScalingFactors(statsAreScaledForThisManyPlayers, out var balance, out var _);
		return balance;
	}

	public static int GetActivePlayerCount()
	{
		if (Main.netMode == 0)
		{
			return 1;
		}
		int num = 0;
		for (int i = 0; i < 255; i++)
		{
			if (Main.player[i] != null && Main.player[i].active)
			{
				num++;
			}
		}
		return num;
	}

	private void ScaleStats_ApplyExpertTweaks()
	{
		bool flag = type >= 0 && NPCID.Sets.ProjectileNPC[type];
		bool flag2 = !NPCID.Sets.DontDoHardmodeScaling[type];
		if (Main.getGoodWorld)
		{
			if ((type == 24 || type == 25) && AnyNPCs(113))
			{
				flag2 = false;
			}
			if ((type == 32 || type == 33) && AnyNPCs(35))
			{
				flag2 = false;
			}
			if (type == 6 && AnyNPCs(13))
			{
				flag2 = false;
			}
		}
		if (flag2 && Main.hardMode && !boss && lifeMax < 1000)
		{
			int num = damage + defense + lifeMax / 4;
			if (num == 0)
			{
				num = 1;
			}
			int num2 = 80;
			if (downedPlantBoss)
			{
				num2 += 20;
			}
			if (num < num2)
			{
				float num3 = num2 / num;
				damage = (int)((double)((float)damage * num3) * 0.9);
				if (!flag)
				{
					defense = (int)((float)defense * num3);
					lifeMax = (int)((double)((float)lifeMax * num3) * 1.1);
					value = (int)((double)(value * num3) * 0.8);
				}
			}
		}
		if (type == 210 || type == 211)
		{
			damage = (int)((float)damage * 0.6f);
			lifeMax = (int)((float)lifeMax * 0.8f);
			defense = (int)((float)defense * 0.8f);
		}
	}

	private void ScaleStats_ApplyGameMode(GameModeData gameModeData)
	{
		bool num3 = type >= 0 && NPCID.Sets.ProjectileNPC[type];
		int num2 = 0;
		if (!gameModeData.IsJourneyMode && Main.getGoodWorld)
		{
			num2++;
		}
		if (!num3)
		{
			value = (int)(value * (gameModeData.EnemyMoneyDropMultiplier + (float)num2));
			lifeMax = (int)((float)lifeMax * (gameModeData.EnemyMaxLifeMultiplier + (float)num2));
		}
		damage = (int)((float)damage * (gameModeData.EnemyDamageMultiplier + (float)num2));
		knockBackResist *= gameModeData.KnockbackToEnemiesMultiplier;
	}

	private void ScaleStats_ApplyMultiplayerStats(int numPlayers, float balance, float boost, float bossAdjustment)
	{
		int num = numPlayers - 1;
		if (type == 5)
		{
			lifeMax = (int)((float)lifeMax * 0.75f * bossAdjustment);
		}
		if (type == 4)
		{
			lifeMax = (int)((double)lifeMax * 0.65 * (double)balance * (double)bossAdjustment);
		}
		if (type >= 13 && type <= 15)
		{
			lifeMax = (int)((double)lifeMax * 0.7 * (double)balance * (double)bossAdjustment);
			if (type == 13)
			{
				damage = (int)((double)damage * 1.1);
			}
			if (type == 14)
			{
				damage = (int)((double)damage * 0.8);
			}
			if (type == 15)
			{
				damage = (int)((double)damage * 0.8);
			}
			scale *= 1.2f;
			defense += 2;
		}
		if (type == 266 || type == 267)
		{
			lifeMax = (int)((double)lifeMax * 0.85 * (double)balance * (double)bossAdjustment);
			damage = (int)((double)damage * 0.9);
			scale *= 1.05f;
			for (float num2 = 1f; num2 < balance; num2 += 0.34f)
			{
				if ((double)knockBackResist < 0.1)
				{
					knockBackResist = 0f;
					break;
				}
				knockBackResist *= 0.8f;
			}
		}
		if (type == 50)
		{
			lifeMax = (int)((double)lifeMax * 0.7 * (double)balance * (double)bossAdjustment);
			damage = (int)((double)damage * 0.8);
		}
		if (type == 471)
		{
			lifeMax = (int)((double)lifeMax * 0.85 * (double)(balance * 2f + 1f) / 3.0);
		}
		if (type == 472)
		{
			lifeMax = (int)((double)lifeMax * 0.85 * (double)(balance + 1f) / 2.0);
			damage = (int)((double)damage * 0.8);
		}
		if (type == 222)
		{
			lifeMax = (int)((double)lifeMax * 0.7 * (double)balance * (double)bossAdjustment);
			damage = (int)((double)damage * 0.9);
		}
		if (type == 210 || type == 211)
		{
			lifeMax = (int)((double)lifeMax * 0.75);
		}
		if (type == 35)
		{
			lifeMax = (int)((float)lifeMax * balance * bossAdjustment);
			damage = (int)((double)damage * 1.1);
		}
		else if (type == 36)
		{
			lifeMax = (int)((double)lifeMax * 1.3 * (double)balance * (double)bossAdjustment);
			damage = (int)((double)damage * 1.1);
		}
		if (type == 668)
		{
			lifeMax = (int)((double)lifeMax * 0.85 * (double)balance * (double)bossAdjustment);
			damage = damage;
		}
		if (type == 113 || type == 114)
		{
			defense += 6;
			lifeMax = (int)((double)lifeMax * 0.7 * (double)balance * (double)bossAdjustment);
			damage = (int)((double)damage * 1.5);
		}
		else if (type == 115)
		{
			lifeMax = (int)((double)lifeMax * 0.7 * (double)balance);
			if (numPlayers > 4)
			{
				knockBackResist = 0f;
			}
			else if (numPlayers > 1)
			{
				knockBackResist *= 1f - boost;
			}
			defense += 6;
		}
		else if (type == 116)
		{
			lifeMax = (int)((double)lifeMax * 0.7 * (double)balance);
			if (numPlayers > 4)
			{
				knockBackResist = 0f;
			}
			else if (numPlayers > 1)
			{
				knockBackResist *= 1f - boost;
			}
		}
		else if (type == 117 || type == 118 || type == 119)
		{
			lifeMax = (int)((double)lifeMax * 0.8);
		}
		if (type == 657)
		{
			lifeMax = (int)((float)lifeMax * 0.8f * balance * bossAdjustment);
		}
		if (type >= 658 && type <= 660)
		{
			lifeMax = (int)((float)lifeMax * 0.75f * balance * bossAdjustment);
		}
		if (type >= 134 && type <= 136)
		{
			lifeMax = (int)((double)lifeMax * 0.75 * (double)balance * (double)bossAdjustment);
			if (type == 134)
			{
				damage *= 2;
			}
			if (type == 135)
			{
				damage = (int)((double)damage * 0.85);
			}
			if (type == 136)
			{
				damage = (int)((double)damage * 0.85);
			}
			scale *= 1.05f;
		}
		else if (type == 139)
		{
			lifeMax = (int)((double)lifeMax * 0.75 * (double)(balance * 2f + 1f) / 3.0);
			damage = (int)((double)damage * 0.8);
			scale *= 1.05f;
		}
		if (type >= 127 && type <= 131)
		{
			lifeMax = (int)((double)lifeMax * 0.75 * (double)balance * (double)bossAdjustment);
			damage = (int)((double)damage * 0.85);
		}
		if (type >= 125 && type <= 126)
		{
			lifeMax = (int)((double)lifeMax * 0.75 * (double)balance * (double)bossAdjustment);
			damage = (int)((double)damage * 0.85);
		}
		if (type == 262)
		{
			lifeMax = (int)((double)lifeMax * 0.7 * (double)balance * (double)bossAdjustment);
			damage = (int)((double)damage * 1.15);
		}
		else if (type == 264)
		{
			lifeMax = (int)((float)lifeMax * balance * bossAdjustment);
			damage = (int)((double)damage * 1.15);
		}
		if (type == 636)
		{
			lifeMax = (int)((double)lifeMax * 0.7 * (double)balance * (double)bossAdjustment);
			damage = (int)((double)damage * 1.15);
		}
		if (type >= 245 && type <= 249)
		{
			lifeMax = (int)((double)lifeMax * 0.75 * (double)balance * (double)bossAdjustment);
			damage = (int)((double)damage * 0.8);
		}
		if (type == 370)
		{
			lifeMax = (int)((double)lifeMax * 0.65 * (double)balance * (double)bossAdjustment);
			damage = (int)((double)damage * 0.7);
		}
		else if (type == 371 || type == 372 || type == 373)
		{
			if (type != 371)
			{
				lifeMax = (int)((double)lifeMax * 0.75);
			}
			damage = (int)((double)damage * 0.75);
		}
		if (type == 439 || type == 440 || (type >= 454 && type <= 459) || type == 522 || type == 523)
		{
			if (type != 522)
			{
				lifeMax = (int)((float)lifeMax * 0.75f * balance * bossAdjustment);
			}
			damage = (int)((double)damage * 0.75);
		}
		if (type == 397 || type == 396 || type == 398)
		{
			lifeMax = (int)((double)lifeMax * 0.75 * (double)balance * (double)bossAdjustment);
			damage = (int)((double)damage * 0.75);
		}
		if (type == 551)
		{
			lifeMax = (int)((double)lifeMax * 0.75 * (double)balance * (double)bossAdjustment);
			damage = (int)((double)damage * 0.65);
		}
		else if (NPCID.Sets.BelongsToInvasionOldOnesArmy[type])
		{
			int num3 = 7;
			float num4 = (balance * (float)(num3 - 1) + 1f) / (float)num3;
			lifeMax = (int)((float)lifeMax * num4 * bossAdjustment);
		}
		float num5 = 1f + (float)num * 0.2f;
		switch (type)
		{
		case 305:
		case 306:
		case 307:
		case 308:
		case 309:
		case 310:
		case 311:
		case 312:
		case 313:
		case 314:
		case 326:
		case 329:
		case 330:
			lifeMax = (int)((double)lifeMax * 0.75 * (double)num5);
			damage = (int)((double)damage * 0.75);
			break;
		case 315:
		case 325:
		case 327:
			lifeMax = (int)((double)lifeMax * 0.65 * (double)bossAdjustment);
			damage = (int)((double)damage * 0.75);
			break;
		}
		switch (type)
		{
		case 338:
		case 339:
		case 340:
		case 341:
		case 342:
		case 343:
		case 347:
		case 348:
		case 349:
		case 350:
		case 351:
		case 352:
			lifeMax = (int)((double)lifeMax * 0.75 * (double)num5);
			damage = (int)((double)damage * 0.75);
			break;
		case 344:
		case 345:
		case 346:
			lifeMax = (int)((double)lifeMax * 0.65 * (double)bossAdjustment);
			damage = (int)((double)damage * 0.75);
			break;
		}
		if (Main.getGoodWorld)
		{
			if (type == 6 && AnyNPCs(13))
			{
				lifeMax = (int)((double)lifeMax * 1.5 * (double)bossAdjustment);
				defense += 2;
			}
			if (type == 32 && AnyNPCs(35))
			{
				lifeMax = (int)((double)lifeMax * 1.5 * (double)bossAdjustment);
				defense += 6;
			}
			if (type == 24 && AnyNPCs(113))
			{
				lifeMax = (int)((double)lifeMax * 1.5 * (double)bossAdjustment);
				defense += 10;
			}
		}
		NPCLoader.ApplyDifficultyAndPlayerScaling(this, numPlayers, balance, bossAdjustment);
		defDefense = defense;
		defDamage = damage;
		life = lifeMax;
	}

	public static void GetStatScalingFactors(int numPlayers, out float balance, out float boost)
	{
		balance = 1f;
		boost = 0.35f;
		for (int i = 1; i < numPlayers; i++)
		{
			balance += boost;
			boost += (1f - boost) / 3f;
		}
		if (balance > 8f)
		{
			balance = (balance * 2f + 8f) / 3f;
		}
		if (balance > 1000f)
		{
			balance = 1000f;
		}
	}

	public static bool GetNPCLocation(int i, bool seekHead, bool averageDirection, out int index, out Vector2 pos)
	{
		//IL_0379: Unknown result type (might be due to invalid IL or missing references)
		//IL_037e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0256: Unknown result type (might be due to invalid IL or missing references)
		//IL_025b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0274: Unknown result type (might be due to invalid IL or missing references)
		//IL_0279: Unknown result type (might be due to invalid IL or missing references)
		//IL_0243: Unknown result type (might be due to invalid IL or missing references)
		//IL_0248: Unknown result type (might be due to invalid IL or missing references)
		//IL_0361: Unknown result type (might be due to invalid IL or missing references)
		//IL_0366: Unknown result type (might be due to invalid IL or missing references)
		//IL_0333: Unknown result type (might be due to invalid IL or missing references)
		//IL_033c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0341: Unknown result type (might be due to invalid IL or missing references)
		//IL_0346: Unknown result type (might be due to invalid IL or missing references)
		//IL_0349: Unknown result type (might be due to invalid IL or missing references)
		//IL_034f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0354: Unknown result type (might be due to invalid IL or missing references)
		//IL_0323: Unknown result type (might be due to invalid IL or missing references)
		//IL_0328: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a1: Unknown result type (might be due to invalid IL or missing references)
		int num = Main.npc[i].type;
		int num2 = -1;
		int num3 = -1;
		switch (num)
		{
		case 13:
			num3 = 15;
			num2 = 0;
			break;
		case 14:
		case 15:
			num3 = 13;
			num2 = 1;
			break;
		case 134:
			num3 = 136;
			num2 = 0;
			break;
		case 135:
		case 136:
			num3 = 134;
			num2 = 1;
			break;
		case 454:
			num3 = 459;
			num2 = 0;
			break;
		case 455:
		case 456:
		case 457:
		case 458:
		case 459:
			num3 = 454;
			num2 = 1;
			break;
		case 98:
			num3 = 100;
			num2 = 0;
			break;
		case 99:
		case 100:
			num3 = 98;
			num2 = 1;
			break;
		case 39:
			num3 = 41;
			num2 = 0;
			break;
		case 40:
		case 41:
			num3 = 39;
			num2 = 1;
			break;
		case 510:
			num3 = 512;
			num2 = 0;
			break;
		case 511:
		case 512:
			num3 = 510;
			num2 = 1;
			break;
		case 621:
			num3 = 623;
			num2 = 0;
			break;
		case 622:
		case 623:
			num3 = 621;
			num2 = 1;
			break;
		case 513:
			num3 = 515;
			num2 = 0;
			break;
		case 514:
		case 515:
			num3 = 513;
			num2 = 1;
			break;
		case 87:
			num3 = 92;
			num2 = 0;
			break;
		case 88:
		case 89:
		case 90:
		case 91:
		case 92:
			num3 = 87;
			num2 = 1;
			break;
		case 117:
			num3 = 119;
			num2 = 0;
			break;
		case 118:
		case 119:
			num3 = 117;
			num2 = 1;
			break;
		case 7:
			num3 = 9;
			num2 = 0;
			break;
		case 8:
		case 9:
			num3 = 7;
			num2 = 1;
			break;
		case 95:
			num3 = 97;
			num2 = 0;
			break;
		case 96:
		case 97:
			num3 = 95;
			num2 = 1;
			break;
		case 10:
			num3 = 12;
			num2 = 0;
			break;
		case 11:
		case 12:
			num3 = 10;
			num2 = 1;
			break;
		}
		if (num2 != -1)
		{
			if (seekHead && num2 == 1)
			{
				index = -1;
				pos = Vector2.Zero;
				return false;
			}
			Vector2 center = Main.npc[i].Center;
			int num4 = -1;
			float num5 = -1f;
			int num6 = -1;
			Vector2 center2 = Main.player[Main.myPlayer].Center;
			int num7 = (int)Main.npc[i].ai[num2];
			int num8 = 0;
			while (num7 >= 0 && num7 < 200 && ++num8 < 100 && Main.npc[num7].active)
			{
				if (!averageDirection && (num6 == -1 || Main.npc[num7].Distance(center2) < num5))
				{
					num5 = Main.npc[num7].Distance(center2);
					num6 = num7;
				}
				if (Main.npc[num7].type == num3)
				{
					num4 = num7;
					break;
				}
				num7 = (int)Main.npc[num7].ai[num2];
			}
			if (num4 >= 0)
			{
				if (!averageDirection)
				{
					pos = Main.npc[num6].Center;
					index = num6;
				}
				else
				{
					center += Main.npc[num4].Center;
					pos = center / 2f;
					index = num4;
				}
				return true;
			}
			pos = Vector2.Zero;
			index = -1;
			return false;
		}
		pos = Main.npc[i].Center;
		index = i;
		return true;
	}

	public void PopAllAttachedProjectilesAndTakeDamageForThem()
	{
		bool[] isAnNPCAttachedExplosive = ProjectileID.Sets.IsAnNPCAttachedExplosive;
		for (int i = 0; i < 1000; i++)
		{
			Projectile projectile = Main.projectile[i];
			if (projectile.active && projectile.owner == Main.myPlayer && isAnNPCAttachedExplosive[projectile.type] && projectile.IsAttachedTo(this))
			{
				projectile.Kill();
			}
		}
	}

	public bool AI_AttemptToFindTeleportSpot(ref Vector2 chosenTile, int targetTileX, int targetTileY, int rangeFromTargetTile = 20, int telefragPreventionDistanceInTiles = 5, int solidTileCheckFluff = 1, bool solidTileCheckCentered = false, bool teleportInAir = false)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0272: Unknown result type (might be due to invalid IL or missing references)
		//IL_0277: Unknown result type (might be due to invalid IL or missing references)
		//IL_0204: Unknown result type (might be due to invalid IL or missing references)
		//IL_0209: Unknown result type (might be due to invalid IL or missing references)
		//IL_020b: Unknown result type (might be due to invalid IL or missing references)
		//IL_022f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0234: Unknown result type (might be due to invalid IL or missing references)
		//IL_0243: Unknown result type (might be due to invalid IL or missing references)
		int num = (int)base.Center.X / 16;
		int num2 = (int)base.Center.Y / 16;
		int num3 = 0;
		bool flag = false;
		float num4 = 20f;
		if (Math.Abs(num * 16 - targetTileX * 16) + Math.Abs(num2 * 16 - targetTileY * 16) > 2000)
		{
			num3 = 100;
			flag = false;
		}
		Rectangle rectangle = default(Rectangle);
		while (!flag && num3 < 100)
		{
			num3++;
			int num5 = Main.rand.Next(targetTileX - rangeFromTargetTile, targetTileX + rangeFromTargetTile + 1);
			for (int i = Main.rand.Next(targetTileY - rangeFromTargetTile, targetTileY + rangeFromTargetTile + 1); i < targetTileY + rangeFromTargetTile; i++)
			{
				if ((i >= num2 - 1 && i <= num2 + 1 && num5 >= num - 1 && num5 <= num + 1) || (!teleportInAir && !Main.tile[num5, i].nactive()))
				{
					continue;
				}
				bool flag2 = true;
				if ((type == 32 || (type >= 281 && type <= 286)) && !Main.wallDungeon[Main.tile[num5, i - 1].wall])
				{
					if (!AnyNPCs(35))
					{
						flag2 = false;
					}
				}
				else if (Main.tile[num5, i - 1].lava())
				{
					flag2 = false;
				}
				if (!flag2 || (!teleportInAir && !Main.tileSolid[Main.tile[num5, i].type]) || !((!solidTileCheckCentered) ? (!Collision.SolidTiles(num5 - solidTileCheckFluff, num5 + solidTileCheckFluff, i - 3 - solidTileCheckFluff, i - 1)) : (!Collision.SolidTiles(num5 - solidTileCheckFluff, num5 + solidTileCheckFluff, i - solidTileCheckFluff, i + solidTileCheckFluff))))
				{
					continue;
				}
				((Rectangle)(ref rectangle))._002Ector(num5 * 16, i * 16, 16, 16);
				((Rectangle)(ref rectangle)).Inflate(telefragPreventionDistanceInTiles * 16, telefragPreventionDistanceInTiles * 16);
				for (int j = 0; j < Main.player.Length; j++)
				{
					Player player = Main.player[j];
					if (player != null && player.active && !player.DeadOrGhost)
					{
						Rectangle value = player.Hitbox;
						Rectangle value2 = value.Modified((int)(player.velocity.X * num4), (int)(player.velocity.Y * num4), 0, 0);
						Rectangle.Union(ref value2, ref value, ref value2);
						if (((Rectangle)(ref value2)).Intersects(rectangle))
						{
							flag2 = false;
							flag = false;
							break;
						}
					}
				}
				if (flag2)
				{
					chosenTile = new Vector2((float)num5, (float)i);
					flag = true;
				}
				break;
			}
		}
		return flag;
	}

	public static void TransformElderSlime(int npcIndex)
	{
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		if (Main.netMode == 1)
		{
			NetMessage.SendData(140, -1, -1, null, 2, npcIndex);
		}
		else if (!unlockedSlimeOldSpawn && Main.npc.IndexInRange(npcIndex))
		{
			NPC nPC = Main.npc[npcIndex];
			if (nPC.type == 685)
			{
				unlockedSlimeOldSpawn = true;
				NetMessage.SendData(7);
				Vector2 vector = nPC.velocity;
				nPC.Transform(679);
				nPC.netUpdate = true;
				nPC.velocity = vector;
				ParticleOrchestrator.BroadcastParticleSpawn(ParticleOrchestraType.TownSlimeTransform, new ParticleOrchestraSettings
				{
					PositionInWorld = nPC.Center,
					MovementVector = Vector2.Zero,
					UniqueInfoPiece = 2
				});
			}
		}
	}

	public static void TransformCopperSlime(int npcIndex)
	{
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		if (Main.netMode == 1)
		{
			NetMessage.SendData(140, -1, -1, null, 1, npcIndex);
		}
		else if (!unlockedSlimeCopperSpawn && Main.npc.IndexInRange(npcIndex))
		{
			NPC nPC = Main.npc[npcIndex];
			if (nPC.type >= 0 && NPCID.Sets.CanConvertIntoCopperSlimeTownNPC[nPC.type])
			{
				unlockedSlimeCopperSpawn = true;
				NetMessage.SendData(7);
				Vector2 vector = nPC.velocity;
				nPC.Transform(684);
				nPC.netUpdate = true;
				nPC.velocity = vector;
				ParticleOrchestrator.BroadcastParticleSpawn(ParticleOrchestraType.TownSlimeTransform, new ParticleOrchestraSettings
				{
					PositionInWorld = nPC.Center,
					MovementVector = Vector2.Zero,
					UniqueInfoPiece = 1
				});
			}
		}
	}

	public static void HaveDryadDoStardewAnimation()
	{
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_014b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_0165: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_0157: Unknown result type (might be due to invalid IL or missing references)
		Vector2 vector2 = default(Vector2);
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = Main.npc[i];
			if (!nPC.active || nPC.type != 20)
			{
				continue;
			}
			nPC.localAI[2] = 480f;
			nPC.ai[0] = 24f;
			nPC.ai[1] = 480f;
			nPC.ai[2] = 0f;
			nPC.localAI[3] = 0f;
			nPC.netUpdate = true;
			nPC.direction = 1;
			nPC.spriteDirection = 1;
			Vector2 vector = nPC.Bottom + new Vector2(100f, 0f);
			Point p = vector.ToTileCoordinates();
			p.Y = Utils.Clamp(p.Y - 10, 10, Main.maxTilesY - 10);
			int y = p.Y;
			int num = 15;
			int num2 = p.Y + num;
			bool flag = false;
			for (int j = p.Y; j < num2; j++)
			{
				Tile tile = Main.tile[p.X, j];
				p.Y = j;
				if (tile.active() && Main.tileSolid[tile.type])
				{
					if (j == y)
					{
						flag = true;
					}
					break;
				}
			}
			((Vector2)(ref vector2))._002Ector(0f, -52f);
			Vector2 vector3 = p.ToWorldCoordinates(8f, 0f);
			if (flag)
			{
				vector3 = vector;
			}
			Projectile.NewProjectile(new EntitySource_DebugCommand("DryadStardewAnimation"), vector3 + vector2, Vector2.Zero, 995, 0, 0f, Main.myPlayer);
			break;
		}
	}

	private void AI_047_GolemFist()
	{
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0134: Unknown result type (might be due to invalid IL or missing references)
		//IL_0420: Unknown result type (might be due to invalid IL or missing references)
		//IL_0432: Unknown result type (might be due to invalid IL or missing references)
		//IL_0437: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_09e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a00: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_07fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0465: Unknown result type (might be due to invalid IL or missing references)
		//IL_046a: Unknown result type (might be due to invalid IL or missing references)
		//IL_046c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0473: Unknown result type (might be due to invalid IL or missing references)
		//IL_047d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0482: Unknown result type (might be due to invalid IL or missing references)
		//IL_0493: Unknown result type (might be due to invalid IL or missing references)
		//IL_0498: Unknown result type (might be due to invalid IL or missing references)
		//IL_049b: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_081c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0826: Unknown result type (might be due to invalid IL or missing references)
		//IL_082b: Unknown result type (might be due to invalid IL or missing references)
		//IL_083c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0841: Unknown result type (might be due to invalid IL or missing references)
		//IL_0844: Unknown result type (might be due to invalid IL or missing references)
		//IL_0849: Unknown result type (might be due to invalid IL or missing references)
		//IL_084b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0850: Unknown result type (might be due to invalid IL or missing references)
		//IL_0852: Unknown result type (might be due to invalid IL or missing references)
		//IL_085c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0864: Unknown result type (might be due to invalid IL or missing references)
		//IL_0919: Unknown result type (might be due to invalid IL or missing references)
		//IL_0924: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_08bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_0608: Unknown result type (might be due to invalid IL or missing references)
		//IL_0612: Unknown result type (might be due to invalid IL or missing references)
		//IL_0628: Unknown result type (might be due to invalid IL or missing references)
		//IL_0632: Unknown result type (might be due to invalid IL or missing references)
		//IL_094a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0955: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0301: Unknown result type (might be due to invalid IL or missing references)
		//IL_031b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0337: Unknown result type (might be due to invalid IL or missing references)
		float num = GetMyBalance();
		if (Main.getGoodWorld)
		{
			num += 3f;
		}
		if ((!Main.player[target].ZoneLihzhardTemple && !Main.player[target].ZoneJungle) || (double)Main.player[target].Center.Y < Main.worldSurface * 16.0)
		{
			num *= 2f;
		}
		if (golemBoss < 0)
		{
			StrikeNPCNoInteraction(9999, 0f, 0);
			return;
		}
		if (alpha > 0)
		{
			alpha -= 10;
			if (alpha < 0)
			{
				alpha = 0;
			}
			ai[1] = 0f;
		}
		Player player = Main.player[target];
		NPC nPC = Main.npc[golemBoss];
		Vector2 vector = nPC.Center + nPC.velocity + new Vector2(0f, -9f * scale);
		vector.X += (float)((type == 247) ? (-84) : 78) * scale;
		Vector2 vector2 = vector - base.Center;
		float num6 = ((Vector2)(ref vector2)).Length();
		if (ai[0] == 0f)
		{
			noTileCollide = true;
			float num7 = 14f;
			if (life < lifeMax / 2)
			{
				num7 += 3f;
			}
			if (life < lifeMax / 4)
			{
				num7 += 3f;
			}
			if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax)
			{
				num7 += 8f;
			}
			num7 *= (num + 3f) / 4f;
			if (num7 > 32f)
			{
				num7 = 32f;
			}
			float x = vector2.X;
			float y = vector2.Y;
			float num8 = num6;
			if (num8 < 12f + num7)
			{
				rotation = 0f;
				velocity.X = x;
				velocity.Y = y;
				float num9 = num;
				ai[1] += num9;
				if (life < lifeMax / 2)
				{
					ai[1] += num9;
				}
				if (life < lifeMax / 4)
				{
					ai[1] += num9;
				}
				if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax)
				{
					ai[1] += 10f * num9;
				}
				if (ai[1] >= 60f)
				{
					TargetClosest();
					if ((type == 247 && base.Center.X + 100f > Main.player[target].Center.X) || (type == 248 && base.Center.X - 100f < Main.player[target].Center.X))
					{
						ai[1] = 0f;
						ai[0] = 1f;
					}
					else
					{
						ai[1] = 0f;
					}
				}
			}
			else
			{
				num8 = num7 / num8;
				velocity.X = x * num8;
				velocity.Y = y * num8;
				rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
				if (type == 247)
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
				}
			}
		}
		else if (ai[0] == 1f)
		{
			ai[1] += 1f;
			base.Center = vector;
			rotation = 0f;
			velocity = Vector2.Zero;
			if (ai[1] <= 15f)
			{
				for (int i = 0; i < 1; i++)
				{
					Vector2 vector3 = Main.rand.NextVector2Circular(80f, 80f);
					Vector2 vector4 = vector3 * -1f * 0.05f;
					Vector2 vector5 = Main.rand.NextVector2Circular(20f, 20f);
					Dust dust = Dust.NewDustPerfect(base.Center + vector4 + vector3 + vector5, 228, vector4);
					dust.fadeIn = 1.5f;
					dust.scale = 0.5f;
					if (Main.getGoodWorld)
					{
						dust.noLight = true;
					}
					dust.noGravity = true;
				}
			}
			if (ai[1] >= 30f)
			{
				noTileCollide = true;
				collideX = false;
				collideY = false;
				ai[0] = 2f;
				ai[1] = 0f;
				float num10 = 12f;
				if (life < lifeMax / 2)
				{
					num10 += 4f;
				}
				if (life < lifeMax / 4)
				{
					num10 += 4f;
				}
				if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax)
				{
					num10 += 10f;
				}
				num10 *= (num + 3f) / 4f;
				if (num10 > 48f)
				{
					num10 = 48f;
				}
				Vector2 vector6 = default(Vector2);
				((Vector2)(ref vector6))._002Ector(base.Center.X, base.Center.Y);
				float num11 = Main.player[target].Center.X - vector6.X;
				float num12 = Main.player[target].Center.Y - vector6.Y;
				float num13 = (float)Math.Sqrt(num11 * num11 + num12 * num12);
				num13 = num10 / num13;
				velocity.X = num11 * num13;
				velocity.Y = num12 * num13;
				rotation = (float)Math.Atan2(velocity.Y, velocity.X);
				if (type == 247)
				{
					rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
				}
			}
		}
		else if (ai[0] == 2f)
		{
			if (Main.netMode != 1 && Main.getGoodWorld)
			{
				for (int j = (int)(position.X / 16f) - 1; (float)j < (position.X + (float)width) / 16f + 1f; j++)
				{
					for (int k = (int)(position.Y / 16f) - 1; (float)k < (position.Y + (float)width) / 16f + 1f; k++)
					{
						if (Main.tile[j, k].type == 4)
						{
							Main.tile[j, k].active(active: false);
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, j, k);
							}
						}
					}
				}
			}
			ai[1] += 1f;
			if (ai[1] == 1f)
			{
				SoundEngine.PlaySound(in SoundID.Item14, position);
			}
			if (Main.rand.Next(2) == 0)
			{
				Vector2 vector7 = velocity * 0.5f;
				Vector2 vector8 = Main.rand.NextVector2Circular(20f, 20f);
				Dust.NewDustPerfect(base.Center + vector7 + vector8, 306, vector7, 0, Main.OurFavoriteColor).scale = 2f;
			}
			if (Math.Abs(velocity.X) > Math.Abs(velocity.Y))
			{
				if (velocity.X > 0f && base.Center.X > player.Center.X)
				{
					noTileCollide = false;
				}
				if (velocity.X < 0f && base.Center.X < player.Center.X)
				{
					noTileCollide = false;
				}
			}
			else
			{
				if (velocity.Y > 0f && base.Center.Y > player.Center.Y)
				{
					noTileCollide = false;
				}
				if (velocity.Y < 0f && base.Center.Y < player.Center.Y)
				{
					noTileCollide = false;
				}
			}
			if (num6 > 700f || collideX || collideY)
			{
				noTileCollide = true;
				ai[0] = 0f;
			}
		}
		else
		{
			if (ai[0] != 3f)
			{
				return;
			}
			noTileCollide = true;
			float num2 = 0.4f;
			Vector2 vector9 = default(Vector2);
			((Vector2)(ref vector9))._002Ector(base.Center.X, base.Center.Y);
			float num3 = Main.player[target].Center.X - vector9.X;
			float num4 = Main.player[target].Center.Y - vector9.Y;
			float num5 = (float)Math.Sqrt(num3 * num3 + num4 * num4);
			num5 = 12f / num5;
			num3 *= num5;
			num4 *= num5;
			if (velocity.X < num3)
			{
				velocity.X += num2;
				if (velocity.X < 0f && num3 > 0f)
				{
					velocity.X += num2 * 2f;
				}
			}
			else if (velocity.X > num3)
			{
				velocity.X -= num2;
				if (velocity.X > 0f && num3 < 0f)
				{
					velocity.X -= num2 * 2f;
				}
			}
			if (velocity.Y < num4)
			{
				velocity.Y += num2;
				if (velocity.Y < 0f && num4 > 0f)
				{
					velocity.Y += num2 * 2f;
				}
			}
			else if (velocity.Y > num4)
			{
				velocity.Y -= num2;
				if (velocity.Y > 0f && num4 < 0f)
				{
					velocity.Y -= num2 * 2f;
				}
			}
			rotation = (float)Math.Atan2(velocity.Y, velocity.X);
			if (type == 247)
			{
				rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
			}
		}
	}

	private void AI_045_Golem()
	{
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0365: Unknown result type (might be due to invalid IL or missing references)
		//IL_036b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0370: Unknown result type (might be due to invalid IL or missing references)
		//IL_0375: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_06fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_038b: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0407: Unknown result type (might be due to invalid IL or missing references)
		//IL_0411: Unknown result type (might be due to invalid IL or missing references)
		//IL_0416: Unknown result type (might be due to invalid IL or missing references)
		//IL_053e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0556: Unknown result type (might be due to invalid IL or missing references)
		//IL_0566: Unknown result type (might be due to invalid IL or missing references)
		//IL_057d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0583: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0482: Unknown result type (might be due to invalid IL or missing references)
		//IL_049a: Unknown result type (might be due to invalid IL or missing references)
		//IL_04aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_04bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0761: Unknown result type (might be due to invalid IL or missing references)
		//IL_077e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0735: Unknown result type (might be due to invalid IL or missing references)
		//IL_074b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0635: Unknown result type (might be due to invalid IL or missing references)
		//IL_064d: Unknown result type (might be due to invalid IL or missing references)
		//IL_065d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0672: Unknown result type (might be due to invalid IL or missing references)
		//IL_0678: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_078d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d07: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d51: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d62: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d78: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b77: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a33: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a54: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a59: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a88: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a95: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aba: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac9: Unknown result type (might be due to invalid IL or missing references)
		golemBoss = whoAmI;
		float num = GetMyBalance();
		if (Main.getGoodWorld)
		{
			num += 2f;
		}
		if ((!Main.player[target].ZoneLihzhardTemple && !Main.player[target].ZoneJungle) || (double)Main.player[target].Center.Y < Main.worldSurface * 16.0)
		{
			num *= 2f;
		}
		if (localAI[0] == 0f)
		{
			localAI[0] = 1f;
			NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X - 84, (int)base.Center.Y - 9, 247);
			NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X + 78, (int)base.Center.Y - 9, 248);
			NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X - 3, (int)base.Center.Y - 57, 246);
		}
		if (target >= 0 && Main.player[target].dead)
		{
			TargetClosest();
			if (Main.player[target].dead)
			{
				noTileCollide = true;
			}
		}
		if (alpha > 0)
		{
			alpha -= 10;
			if (alpha < 0)
			{
				alpha = 0;
			}
			ai[1] = 0f;
		}
		bool flag = false;
		bool flag2 = false;
		bool flag3 = false;
		dontTakeDamage = false;
		for (int i = 0; i < 200; i++)
		{
			if (Main.npc[i].active && Main.npc[i].type == 246)
			{
				flag = true;
			}
			if (Main.npc[i].active && Main.npc[i].type == 247)
			{
				flag2 = true;
			}
			if (Main.npc[i].active && Main.npc[i].type == 248)
			{
				flag3 = true;
			}
		}
		dontTakeDamage = flag;
		if (Main.netMode != 1 && Main.getGoodWorld && velocity.Y > 0f)
		{
			for (int j = (int)(position.X / 16f); (float)j < (position.X + (float)width) / 16f; j++)
			{
				for (int k = (int)(position.Y / 16f); (float)k < (position.Y + (float)width) / 16f; k++)
				{
					if (Main.tile[j, k].type == 4)
					{
						Main.tile[j, k].active(active: false);
						if (Main.netMode == 2)
						{
							NetMessage.SendTileSquare(-1, j, k);
						}
					}
				}
			}
		}
		position += netOffset;
		if (!Main.getGoodWorld)
		{
			if (!flag2)
			{
				int num2 = Dust.NewDust(new Vector2(base.Center.X - 80f * scale, base.Center.Y - 9f), 8, 8, 31, 0f, 0f, 100);
				Main.dust[num2].alpha += Main.rand.Next(100);
				Dust obj = Main.dust[num2];
				obj.velocity *= 0.2f;
				Main.dust[num2].velocity.Y -= 0.5f + (float)Main.rand.Next(10) * 0.1f;
				Main.dust[num2].fadeIn = 0.5f + (float)Main.rand.Next(10) * 0.1f;
				if (Main.rand.Next(10) == 0)
				{
					num2 = Dust.NewDust(new Vector2(base.Center.X - 80f * scale, base.Center.Y - 9f), 8, 8, 6);
					if (Main.rand.Next(20) != 0)
					{
						Main.dust[num2].noGravity = true;
						Main.dust[num2].scale *= 1f + (float)Main.rand.Next(10) * 0.1f;
						Main.dust[num2].velocity.Y -= 1f;
					}
				}
			}
			if (!flag3)
			{
				int num3 = Dust.NewDust(new Vector2(base.Center.X + 62f * scale, base.Center.Y - 9f), 8, 8, 31, 0f, 0f, 100);
				Main.dust[num3].alpha += Main.rand.Next(100);
				Dust obj2 = Main.dust[num3];
				obj2.velocity *= 0.2f;
				Main.dust[num3].velocity.Y -= 0.5f + (float)Main.rand.Next(10) * 0.1f;
				Main.dust[num3].fadeIn = 0.5f + (float)Main.rand.Next(10) * 0.1f;
				if (Main.rand.Next(10) == 0)
				{
					num3 = Dust.NewDust(new Vector2(base.Center.X + 62f * scale, base.Center.Y - 9f), 8, 8, 6);
					if (Main.rand.Next(20) != 0)
					{
						Main.dust[num3].noGravity = true;
						Main.dust[num3].scale *= 1f + (float)Main.rand.Next(10) * 0.1f;
						Main.dust[num3].velocity.Y -= 1f;
					}
				}
			}
		}
		position -= netOffset;
		if (noTileCollide && !Main.player[target].dead)
		{
			if (velocity.Y > 0f && base.Bottom.Y > Main.player[target].Top.Y)
			{
				noTileCollide = false;
			}
			else if (Collision.CanHit(position, width, height, Main.player[target].Center, 1, 1) && !Collision.SolidTiles(position, width, height))
			{
				noTileCollide = false;
			}
		}
		if (ai[0] == 0f)
		{
			if (velocity.Y == 0f)
			{
				velocity.X *= 0.8f;
				float num4 = 1f;
				if (ai[1] > 0f)
				{
					if (!flag2)
					{
						num4 += 2f;
					}
					if (!flag3)
					{
						num4 += 2f;
					}
					if (!flag)
					{
						num4 += 2f;
					}
					if (life < lifeMax)
					{
						num4 += 1f;
					}
					if (life < lifeMax / 2)
					{
						num4 += 4f;
					}
					if (life < lifeMax / 3)
					{
						num4 += 8f;
					}
					num4 *= num;
					if (Main.getGoodWorld)
					{
						num4 += 100f;
					}
				}
				ai[1] += num4;
				if (ai[1] >= 300f)
				{
					ai[1] = -20f;
					frameCounter = 0.0;
				}
				else if (ai[1] == -1f)
				{
					noTileCollide = true;
					TargetClosest();
					velocity.X = 4 * direction;
					if (life < lifeMax)
					{
						velocity.Y = -12.1f * (num + 9f) / 10f;
						if ((double)velocity.Y < -19.1)
						{
							velocity.Y = -19.1f;
						}
					}
					else
					{
						velocity.Y = -12.1f;
					}
					ai[0] = 1f;
					ai[1] = 0f;
				}
			}
		}
		else if (ai[0] == 1f)
		{
			if (velocity.Y == 0f)
			{
				SoundEngine.PlaySound(in SoundID.Item14, position);
				ai[0] = 0f;
				for (int l = (int)position.X - 20; l < (int)position.X + width + 40; l += 20)
				{
					for (int m = 0; m < 4; m++)
					{
						int num5 = Dust.NewDust(new Vector2(position.X - 20f, position.Y + (float)height), width + 20, 4, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust obj3 = Main.dust[num5];
						obj3.velocity *= 0.2f;
					}
					int num6 = Gore.NewGore(new Vector2((float)(l - 20), position.Y + (float)height - 8f), default(Vector2), Main.rand.Next(61, 64));
					Gore obj4 = Main.gore[num6];
					obj4.velocity *= 0.4f;
				}
			}
			else
			{
				TargetClosest();
				if (position.X < Main.player[target].position.X && position.X + (float)width > Main.player[target].position.X + (float)Main.player[target].width)
				{
					velocity.X *= 0.9f;
					if (base.Bottom.Y < Main.player[target].position.Y)
					{
						velocity.Y += 0.2f * (num + 1f) / 2f;
					}
				}
				else
				{
					if (direction < 0)
					{
						velocity.X -= 0.2f;
					}
					else if (direction > 0)
					{
						velocity.X += 0.2f;
					}
					float num7 = 3f;
					if (life < lifeMax)
					{
						num7 += 1f;
					}
					if (life < lifeMax / 2)
					{
						num7 += 1f;
					}
					if (life < lifeMax / 4)
					{
						num7 += 1f;
					}
					num7 *= (num + 1f) / 2f;
					if (velocity.X < 0f - num7)
					{
						velocity.X = 0f - num7;
					}
					if (velocity.X > num7)
					{
						velocity.X = num7;
					}
				}
			}
		}
		if (target <= 0 || target == 255 || Main.player[target].dead)
		{
			TargetClosest();
		}
		int num8 = 3000;
		if (Math.Abs(base.Center.X - Main.player[target].Center.X) + Math.Abs(base.Center.Y - Main.player[target].Center.Y) > (float)num8)
		{
			TargetClosest();
			if (Math.Abs(base.Center.X - Main.player[target].Center.X) + Math.Abs(base.Center.Y - Main.player[target].Center.Y) > (float)num8)
			{
				active = false;
			}
		}
	}

	public static bool SpawnMechQueen(int onWhichPlayer)
	{
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_018e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f8: Unknown result type (might be due to invalid IL or missing references)
		if (AnyNPCs(127) || AnyNPCs(134) || AnyNPCs(125) || AnyNPCs(126))
		{
			return false;
		}
		if (!Main.remixWorld && !Main.getGoodWorld)
		{
			return false;
		}
		if (Main.netMode == 1)
		{
			NetMessage.SendData(61, -1, -1, null, onWhichPlayer, -16f);
		}
		else
		{
			mechQueen = -2;
			SpawnOnPlayer(onWhichPlayer, 127);
			mechQueen = FindFirstNPC(127);
			NewNPC(GetBossSpawnSource(onWhichPlayer), (int)Main.npc[mechQueen].Center.X, (int)Main.npc[mechQueen].Center.Y, 125, 1);
			NewNPC(GetBossSpawnSource(onWhichPlayer), (int)Main.npc[mechQueen].Center.X, (int)Main.npc[mechQueen].Center.Y, 126, 1);
			int num = NewNPC(GetBossSpawnSource(onWhichPlayer), (int)Main.npc[mechQueen].Center.X, (int)Main.npc[mechQueen].Center.Y, 134, 1);
			NewNPC(GetBossSpawnSource(onWhichPlayer), (int)Main.npc[mechQueen].Center.X, (int)Main.npc[mechQueen].Center.Y, 139, 1, 0f, 0f, num, -1f);
			NewNPC(GetBossSpawnSource(onWhichPlayer), (int)Main.npc[mechQueen].Center.X, (int)Main.npc[mechQueen].Center.Y, 139, 1, 0f, 0f, num, 1f);
		}
		return true;
	}

	public void AI()
	{
		NPCLoader.NPCAI(this);
	}

	public void VanillaAI()
	{
		using (IEntitySource.PushFallback(thisEntitySourceCache))
		{
			VanillaAI_Inner();
		}
	}

	private void VanillaAI_Inner()
	{
		//IL_2ab66: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ab93: Unknown result type (might be due to invalid IL or missing references)
		//IL_2abd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2abe7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ac15: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ac2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0198: Unknown result type (might be due to invalid IL or missing references)
		//IL_014b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ad4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ad70: Unknown result type (might be due to invalid IL or missing references)
		//IL_2afa2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2afad: Unknown result type (might be due to invalid IL or missing references)
		//IL_2afd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aff6: Unknown result type (might be due to invalid IL or missing references)
		//IL_580a: Unknown result type (might be due to invalid IL or missing references)
		//IL_583f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c70: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c76: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c80: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c89: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b104: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b10f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b129: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b133: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b150: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b15a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ca9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c92: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c97: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dad: Unknown result type (might be due to invalid IL or missing references)
		//IL_2db3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2db8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b070: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d22: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ce3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d00: Unknown result type (might be due to invalid IL or missing references)
		//IL_2de0: Unknown result type (might be due to invalid IL or missing references)
		//IL_50ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f19: Unknown result type (might be due to invalid IL or missing references)
		//IL_32d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_32da: Unknown result type (might be due to invalid IL or missing references)
		//IL_32df: Unknown result type (might be due to invalid IL or missing references)
		//IL_32e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3335: Unknown result type (might be due to invalid IL or missing references)
		//IL_333f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3344: Unknown result type (might be due to invalid IL or missing references)
		//IL_3389: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a31: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a62: Unknown result type (might be due to invalid IL or missing references)
		//IL_520c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5212: Unknown result type (might be due to invalid IL or missing references)
		//IL_5217: Unknown result type (might be due to invalid IL or missing references)
		//IL_521c: Unknown result type (might be due to invalid IL or missing references)
		//IL_515f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5164: Unknown result type (might be due to invalid IL or missing references)
		//IL_5172: Unknown result type (might be due to invalid IL or missing references)
		//IL_5177: Unknown result type (might be due to invalid IL or missing references)
		//IL_5179: Unknown result type (might be due to invalid IL or missing references)
		//IL_517b: Unknown result type (might be due to invalid IL or missing references)
		//IL_517d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5182: Unknown result type (might be due to invalid IL or missing references)
		//IL_518b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e26: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e47: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e75: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e84: Unknown result type (might be due to invalid IL or missing references)
		//IL_502a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5030: Unknown result type (might be due to invalid IL or missing references)
		//IL_5035: Unknown result type (might be due to invalid IL or missing references)
		//IL_5056: Unknown result type (might be due to invalid IL or missing references)
		//IL_505c: Unknown result type (might be due to invalid IL or missing references)
		//IL_507c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5086: Unknown result type (might be due to invalid IL or missing references)
		//IL_508b: Unknown result type (might be due to invalid IL or missing references)
		//IL_50a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_50a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_50ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_50b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_51a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_51b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_51bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_51cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_51d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_51d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_51dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee01: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee29: Unknown result type (might be due to invalid IL or missing references)
		//IL_b548: Unknown result type (might be due to invalid IL or missing references)
		//IL_b559: Unknown result type (might be due to invalid IL or missing references)
		//IL_92b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_92d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_7db9: Unknown result type (might be due to invalid IL or missing references)
		//IL_7dea: Unknown result type (might be due to invalid IL or missing references)
		//IL_576e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5774: Unknown result type (might be due to invalid IL or missing references)
		//IL_5779: Unknown result type (might be due to invalid IL or missing references)
		//IL_577e: Unknown result type (might be due to invalid IL or missing references)
		//IL_51f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_51ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_5204: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ed6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2efa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f00: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f20: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_33cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_33f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_33f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_341e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3428: Unknown result type (might be due to invalid IL or missing references)
		//IL_342d: Unknown result type (might be due to invalid IL or missing references)
		//IL_cedd: Unknown result type (might be due to invalid IL or missing references)
		//IL_b5c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_b5d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_b58a: Unknown result type (might be due to invalid IL or missing references)
		//IL_b59b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7bff: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_c986: Unknown result type (might be due to invalid IL or missing references)
		//IL_c9b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_791e: Unknown result type (might be due to invalid IL or missing references)
		//IL_794b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4507: Unknown result type (might be due to invalid IL or missing references)
		//IL_450d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4512: Unknown result type (might be due to invalid IL or missing references)
		//IL_4517: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c05: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c21: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c31: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c36: Unknown result type (might be due to invalid IL or missing references)
		//IL_347f: Unknown result type (might be due to invalid IL or missing references)
		//IL_34a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_34a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_34c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_34d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_34d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_efd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_dba4: Unknown result type (might be due to invalid IL or missing references)
		//IL_dba9: Unknown result type (might be due to invalid IL or missing references)
		//IL_dbb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_5272: Unknown result type (might be due to invalid IL or missing references)
		//IL_52ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_52b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_52df: Unknown result type (might be due to invalid IL or missing references)
		//IL_52e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_52ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c60: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3021: Unknown result type (might be due to invalid IL or missing references)
		//IL_3045: Unknown result type (might be due to invalid IL or missing references)
		//IL_304b: Unknown result type (might be due to invalid IL or missing references)
		//IL_306b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3075: Unknown result type (might be due to invalid IL or missing references)
		//IL_307a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3516: Unknown result type (might be due to invalid IL or missing references)
		//IL_3537: Unknown result type (might be due to invalid IL or missing references)
		//IL_353d: Unknown result type (might be due to invalid IL or missing references)
		//IL_355d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3567: Unknown result type (might be due to invalid IL or missing references)
		//IL_356c: Unknown result type (might be due to invalid IL or missing references)
		//IL_f026: Unknown result type (might be due to invalid IL or missing references)
		//IL_f043: Unknown result type (might be due to invalid IL or missing references)
		//IL_805d: Unknown result type (might be due to invalid IL or missing references)
		//IL_809a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c51: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_55ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_55f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_55f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_5619: Unknown result type (might be due to invalid IL or missing references)
		//IL_5623: Unknown result type (might be due to invalid IL or missing references)
		//IL_5628: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c01: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c06: Unknown result type (might be due to invalid IL or missing references)
		//IL_455f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4598: Unknown result type (might be due to invalid IL or missing references)
		//IL_459e: Unknown result type (might be due to invalid IL or missing references)
		//IL_35b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_35da: Unknown result type (might be due to invalid IL or missing references)
		//IL_35e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3600: Unknown result type (might be due to invalid IL or missing references)
		//IL_360a: Unknown result type (might be due to invalid IL or missing references)
		//IL_360f: Unknown result type (might be due to invalid IL or missing references)
		//IL_f097: Unknown result type (might be due to invalid IL or missing references)
		//IL_f0a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_56a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_56e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_56e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_53c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_53f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_53f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_5426: Unknown result type (might be due to invalid IL or missing references)
		//IL_5430: Unknown result type (might be due to invalid IL or missing references)
		//IL_5435: Unknown result type (might be due to invalid IL or missing references)
		//IL_544c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5452: Unknown result type (might be due to invalid IL or missing references)
		//IL_545c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5461: Unknown result type (might be due to invalid IL or missing references)
		//IL_5466: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_30c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_30e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_30ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_310f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3119: Unknown result type (might be due to invalid IL or missing references)
		//IL_311e: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_cea7: Unknown result type (might be due to invalid IL or missing references)
		//IL_846f: Unknown result type (might be due to invalid IL or missing references)
		//IL_84b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_69cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a04: Unknown result type (might be due to invalid IL or missing references)
		//IL_54e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_5514: Unknown result type (might be due to invalid IL or missing references)
		//IL_551a: Unknown result type (might be due to invalid IL or missing references)
		//IL_553a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5544: Unknown result type (might be due to invalid IL or missing references)
		//IL_5549: Unknown result type (might be due to invalid IL or missing references)
		//IL_5560: Unknown result type (might be due to invalid IL or missing references)
		//IL_5566: Unknown result type (might be due to invalid IL or missing references)
		//IL_5570: Unknown result type (might be due to invalid IL or missing references)
		//IL_5575: Unknown result type (might be due to invalid IL or missing references)
		//IL_557a: Unknown result type (might be due to invalid IL or missing references)
		//IL_462f: Unknown result type (might be due to invalid IL or missing references)
		//IL_466b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4671: Unknown result type (might be due to invalid IL or missing references)
		//IL_4210: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d12: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d17: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d25: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d43: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d48: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_365e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3682: Unknown result type (might be due to invalid IL or missing references)
		//IL_3688: Unknown result type (might be due to invalid IL or missing references)
		//IL_36a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_36b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_36b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1376f: Unknown result type (might be due to invalid IL or missing references)
		//IL_e161: Unknown result type (might be due to invalid IL or missing references)
		//IL_e17e: Unknown result type (might be due to invalid IL or missing references)
		//IL_b6e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_b6ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_b6f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_b705: Unknown result type (might be due to invalid IL or missing references)
		//IL_b70a: Unknown result type (might be due to invalid IL or missing references)
		//IL_b70f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b721: Unknown result type (might be due to invalid IL or missing references)
		//IL_b727: Unknown result type (might be due to invalid IL or missing references)
		//IL_b72c: Unknown result type (might be due to invalid IL or missing references)
		//IL_b731: Unknown result type (might be due to invalid IL or missing references)
		//IL_315c: Unknown result type (might be due to invalid IL or missing references)
		//IL_317d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3183: Unknown result type (might be due to invalid IL or missing references)
		//IL_31a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_31ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_31b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_081a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0820: Unknown result type (might be due to invalid IL or missing references)
		//IL_1379a: Unknown result type (might be due to invalid IL or missing references)
		//IL_137aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_e452: Unknown result type (might be due to invalid IL or missing references)
		//IL_e1b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_e1be: Unknown result type (might be due to invalid IL or missing references)
		//IL_e1c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_e1c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc51: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd88: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_bda1: Unknown result type (might be due to invalid IL or missing references)
		//IL_bda7: Unknown result type (might be due to invalid IL or missing references)
		//IL_48b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_48d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_48d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3259: Unknown result type (might be due to invalid IL or missing references)
		//IL_3279: Unknown result type (might be due to invalid IL or missing references)
		//IL_327f: Unknown result type (might be due to invalid IL or missing references)
		//IL_329f: Unknown result type (might be due to invalid IL or missing references)
		//IL_32a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_32ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_31d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_31f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_31ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_321f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3229: Unknown result type (might be due to invalid IL or missing references)
		//IL_322e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3702: Unknown result type (might be due to invalid IL or missing references)
		//IL_3726: Unknown result type (might be due to invalid IL or missing references)
		//IL_372c: Unknown result type (might be due to invalid IL or missing references)
		//IL_374c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3756: Unknown result type (might be due to invalid IL or missing references)
		//IL_375b: Unknown result type (might be due to invalid IL or missing references)
		//IL_139b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_139f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1198a: Unknown result type (might be due to invalid IL or missing references)
		//IL_119c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_c52e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c57a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c584: Unknown result type (might be due to invalid IL or missing references)
		//IL_c589: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d94: Unknown result type (might be due to invalid IL or missing references)
		//IL_6dbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_6dc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_615a: Unknown result type (might be due to invalid IL or missing references)
		//IL_615f: Unknown result type (might be due to invalid IL or missing references)
		//IL_618c: Unknown result type (might be due to invalid IL or missing references)
		//IL_61c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_61df: Unknown result type (might be due to invalid IL or missing references)
		//IL_61ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d87: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d91: Unknown result type (might be due to invalid IL or missing references)
		//IL_3da9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3db3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb37: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb48: Unknown result type (might be due to invalid IL or missing references)
		//IL_bde4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4975: Unknown result type (might be due to invalid IL or missing references)
		//IL_49b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_49b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_49e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_49ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_49f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4759: Unknown result type (might be due to invalid IL or missing references)
		//IL_4792: Unknown result type (might be due to invalid IL or missing references)
		//IL_4798: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e03: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3802: Unknown result type (might be due to invalid IL or missing references)
		//IL_3822: Unknown result type (might be due to invalid IL or missing references)
		//IL_3828: Unknown result type (might be due to invalid IL or missing references)
		//IL_3848: Unknown result type (might be due to invalid IL or missing references)
		//IL_3852: Unknown result type (might be due to invalid IL or missing references)
		//IL_3857: Unknown result type (might be due to invalid IL or missing references)
		//IL_3781: Unknown result type (might be due to invalid IL or missing references)
		//IL_37a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_37a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_37c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_37d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_37d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_11bb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_11bc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_11bc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_11aea: Unknown result type (might be due to invalid IL or missing references)
		//IL_11af4: Unknown result type (might be due to invalid IL or missing references)
		//IL_11af9: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb74: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb85: Unknown result type (might be due to invalid IL or missing references)
		//IL_c02a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c02f: Unknown result type (might be due to invalid IL or missing references)
		//IL_c039: Unknown result type (might be due to invalid IL or missing references)
		//IL_c03e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c07c: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb53: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b7c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_b7d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_b7fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_b80c: Unknown result type (might be due to invalid IL or missing references)
		//IL_b82a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ea2: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ea8: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ed6: Unknown result type (might be due to invalid IL or missing references)
		//IL_6edc: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ee1: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ee6: Unknown result type (might be due to invalid IL or missing references)
		//IL_6264: Unknown result type (might be due to invalid IL or missing references)
		//IL_62ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_633a: Unknown result type (might be due to invalid IL or missing references)
		//IL_633e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6343: Unknown result type (might be due to invalid IL or missing references)
		//IL_6345: Unknown result type (might be due to invalid IL or missing references)
		//IL_6348: Unknown result type (might be due to invalid IL or missing references)
		//IL_634d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6352: Unknown result type (might be due to invalid IL or missing references)
		//IL_6354: Unknown result type (might be due to invalid IL or missing references)
		//IL_635d: Unknown result type (might be due to invalid IL or missing references)
		//IL_637f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6381: Unknown result type (might be due to invalid IL or missing references)
		//IL_6388: Unknown result type (might be due to invalid IL or missing references)
		//IL_638d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6392: Unknown result type (might be due to invalid IL or missing references)
		//IL_639a: Unknown result type (might be due to invalid IL or missing references)
		//IL_63a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_43bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4405: Unknown result type (might be due to invalid IL or missing references)
		//IL_4459: Unknown result type (might be due to invalid IL or missing references)
		//IL_4460: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fe3: Unknown result type (might be due to invalid IL or missing references)
		//IL_401c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e11: Unknown result type (might be due to invalid IL or missing references)
		//IL_3de4: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3af: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_f412: Unknown result type (might be due to invalid IL or missing references)
		//IL_f418: Unknown result type (might be due to invalid IL or missing references)
		//IL_b895: Unknown result type (might be due to invalid IL or missing references)
		//IL_b844: Unknown result type (might be due to invalid IL or missing references)
		//IL_67c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_67e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a67: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aa9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ad7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ae1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ae6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3df2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0967: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1027d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10283: Unknown result type (might be due to invalid IL or missing references)
		//IL_10288: Unknown result type (might be due to invalid IL or missing references)
		//IL_1028d: Unknown result type (might be due to invalid IL or missing references)
		//IL_f4c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_f4c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_f4cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_f4d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_be58: Unknown result type (might be due to invalid IL or missing references)
		//IL_be5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_be67: Unknown result type (might be due to invalid IL or missing references)
		//IL_be6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_beaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_beef: Unknown result type (might be due to invalid IL or missing references)
		//IL_bef9: Unknown result type (might be due to invalid IL or missing references)
		//IL_befe: Unknown result type (might be due to invalid IL or missing references)
		//IL_b8af: Unknown result type (might be due to invalid IL or missing references)
		//IL_b85e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b10: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_100e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1018: Unknown result type (might be due to invalid IL or missing references)
		//IL_101d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f26: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ad89: Unknown result type (might be due to invalid IL or missing references)
		//IL_1adba: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_10371: Unknown result type (might be due to invalid IL or missing references)
		//IL_10377: Unknown result type (might be due to invalid IL or missing references)
		//IL_1037c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10381: Unknown result type (might be due to invalid IL or missing references)
		//IL_102a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_102c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_102f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_10300: Unknown result type (might be due to invalid IL or missing references)
		//IL_10305: Unknown result type (might be due to invalid IL or missing references)
		//IL_e741: Unknown result type (might be due to invalid IL or missing references)
		//IL_e74b: Unknown result type (might be due to invalid IL or missing references)
		//IL_e750: Unknown result type (might be due to invalid IL or missing references)
		//IL_b8c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_b878: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b92: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b98: Unknown result type (might be due to invalid IL or missing references)
		//IL_1953: Unknown result type (might be due to invalid IL or missing references)
		//IL_198e: Unknown result type (might be due to invalid IL or missing references)
		//IL_102b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1035: Unknown result type (might be due to invalid IL or missing references)
		//IL_103a: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e37: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_13efd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c171: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c1a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d36: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10807: Unknown result type (might be due to invalid IL or missing references)
		//IL_10812: Unknown result type (might be due to invalid IL or missing references)
		//IL_1046d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10473: Unknown result type (might be due to invalid IL or missing references)
		//IL_10478: Unknown result type (might be due to invalid IL or missing references)
		//IL_1047d: Unknown result type (might be due to invalid IL or missing references)
		//IL_103eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1040f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10415: Unknown result type (might be due to invalid IL or missing references)
		//IL_10445: Unknown result type (might be due to invalid IL or missing references)
		//IL_1044f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10454: Unknown result type (might be due to invalid IL or missing references)
		//IL_10345: Unknown result type (might be due to invalid IL or missing references)
		//IL_1034b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10350: Unknown result type (might be due to invalid IL or missing references)
		//IL_10355: Unknown result type (might be due to invalid IL or missing references)
		//IL_e76c: Unknown result type (might be due to invalid IL or missing references)
		//IL_e776: Unknown result type (might be due to invalid IL or missing references)
		//IL_e77b: Unknown result type (might be due to invalid IL or missing references)
		//IL_e6ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_e6c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_b8e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_a848: Unknown result type (might be due to invalid IL or missing references)
		//IL_a889: Unknown result type (might be due to invalid IL or missing references)
		//IL_1048: Unknown result type (might be due to invalid IL or missing references)
		//IL_1052: Unknown result type (might be due to invalid IL or missing references)
		//IL_1057: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d72: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10517: Unknown result type (might be due to invalid IL or missing references)
		//IL_10554: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_10003: Unknown result type (might be due to invalid IL or missing references)
		//IL_10099: Unknown result type (might be due to invalid IL or missing references)
		//IL_100ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_100b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_100b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_100c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_100ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_100f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_e79a: Unknown result type (might be due to invalid IL or missing references)
		//IL_e7a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_e7a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1756: Unknown result type (might be due to invalid IL or missing references)
		//IL_1795: Unknown result type (might be due to invalid IL or missing references)
		//IL_179b: Unknown result type (might be due to invalid IL or missing references)
		//IL_14c38: Unknown result type (might be due to invalid IL or missing references)
		//IL_14c7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_141b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_141f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_128bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_128c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_128cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e05: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b24: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b29: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_e7c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_e7d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_e7d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_a9cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_a9ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_a912: Unknown result type (might be due to invalid IL or missing references)
		//IL_a92f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4142: Unknown result type (might be due to invalid IL or missing references)
		//IL_4149: Unknown result type (might be due to invalid IL or missing references)
		//IL_13eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_141d: Unknown result type (might be due to invalid IL or missing references)
		//IL_143a: Unknown result type (might be due to invalid IL or missing references)
		//IL_101d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_101f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_bacc: Unknown result type (might be due to invalid IL or missing references)
		//IL_badf: Unknown result type (might be due to invalid IL or missing references)
		//IL_41ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_41d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_145a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1462: Unknown result type (might be due to invalid IL or missing references)
		//IL_1499: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2088: Unknown result type (might be due to invalid IL or missing references)
		//IL_209e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e75: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e84: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1db0: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b88: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ba0: Unknown result type (might be due to invalid IL or missing references)
		//IL_ac41: Unknown result type (might be due to invalid IL or missing references)
		//IL_ac5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a49: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a81: Unknown result type (might be due to invalid IL or missing references)
		//IL_2176: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e92: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea1: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bef: Unknown result type (might be due to invalid IL or missing references)
		//IL_aef8: Unknown result type (might be due to invalid IL or missing references)
		//IL_af15: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad06: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad57: Unknown result type (might be due to invalid IL or missing references)
		//IL_adf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_adfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_15f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1621: Unknown result type (might be due to invalid IL or missing references)
		//IL_1633: Unknown result type (might be due to invalid IL or missing references)
		//IL_1662: Unknown result type (might be due to invalid IL or missing references)
		//IL_1674: Unknown result type (might be due to invalid IL or missing references)
		//IL_16a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_14f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_14f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1506: Unknown result type (might be due to invalid IL or missing references)
		//IL_1516: Unknown result type (might be due to invalid IL or missing references)
		//IL_151c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2764: Unknown result type (might be due to invalid IL or missing references)
		//IL_2775: Unknown result type (might be due to invalid IL or missing references)
		//IL_1de0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1de39: Unknown result type (might be due to invalid IL or missing references)
		//IL_1de7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_afbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_b00e: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_27bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b98a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b9bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_15527: Unknown result type (might be due to invalid IL or missing references)
		//IL_15554: Unknown result type (might be due to invalid IL or missing references)
		//IL_1555a: Unknown result type (might be due to invalid IL or missing references)
		//IL_108b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_108ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_10677: Unknown result type (might be due to invalid IL or missing references)
		//IL_10682: Unknown result type (might be due to invalid IL or missing references)
		//IL_b1b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_b1d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_1709: Unknown result type (might be due to invalid IL or missing references)
		//IL_170f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ece6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ed29: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b290: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b2cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a20c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a217: Unknown result type (might be due to invalid IL or missing references)
		//IL_1566e: Unknown result type (might be due to invalid IL or missing references)
		//IL_15673: Unknown result type (might be due to invalid IL or missing references)
		//IL_10978: Unknown result type (might be due to invalid IL or missing references)
		//IL_109cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_10aa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_10aae: Unknown result type (might be due to invalid IL or missing references)
		//IL_e8f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_e931: Unknown result type (might be due to invalid IL or missing references)
		//IL_b27a: Unknown result type (might be due to invalid IL or missing references)
		//IL_b2cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_b35e: Unknown result type (might be due to invalid IL or missing references)
		//IL_b365: Unknown result type (might be due to invalid IL or missing references)
		//IL_b36f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b374: Unknown result type (might be due to invalid IL or missing references)
		//IL_b379: Unknown result type (might be due to invalid IL or missing references)
		//IL_b385: Unknown result type (might be due to invalid IL or missing references)
		//IL_b39d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f9ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f9f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fa16: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fa4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fa7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c66f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c6ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ccc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ccf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bcab: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bce8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb14: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb51: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa52: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b03: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b30: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b36: Unknown result type (might be due to invalid IL or missing references)
		//IL_1569a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1569f: Unknown result type (might be due to invalid IL or missing references)
		//IL_156ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_156c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_156ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_156ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_156f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_156f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_156fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_15703: Unknown result type (might be due to invalid IL or missing references)
		//IL_15710: Unknown result type (might be due to invalid IL or missing references)
		//IL_15716: Unknown result type (might be due to invalid IL or missing references)
		//IL_1571b: Unknown result type (might be due to invalid IL or missing references)
		//IL_236d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_23701: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c01: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c21: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c41: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c59: Unknown result type (might be due to invalid IL or missing references)
		//IL_1faa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f2c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f2cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1db2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1db5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c7b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c7bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c7c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cbac: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d073: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d0a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b86f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b8a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a6b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a6ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_17c4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_17c4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10760: Unknown result type (might be due to invalid IL or missing references)
		//IL_1077d: Unknown result type (might be due to invalid IL or missing references)
		//IL_242b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2441: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cea: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d11: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d15: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d41: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_23749: Unknown result type (might be due to invalid IL or missing references)
		//IL_23766: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea05: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea42: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ce87: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cec4: Unknown result type (might be due to invalid IL or missing references)
		//IL_17c76: Unknown result type (might be due to invalid IL or missing references)
		//IL_17c7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_17c96: Unknown result type (might be due to invalid IL or missing references)
		//IL_17ca1: Unknown result type (might be due to invalid IL or missing references)
		//IL_17ca6: Unknown result type (might be due to invalid IL or missing references)
		//IL_17cc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_17cce: Unknown result type (might be due to invalid IL or missing references)
		//IL_17cd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_17cd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_17cdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_17cec: Unknown result type (might be due to invalid IL or missing references)
		//IL_17cf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_17cf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_8bfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2458: Unknown result type (might be due to invalid IL or missing references)
		//IL_246e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e12: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d86: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_228a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_228ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_22945: Unknown result type (might be due to invalid IL or missing references)
		//IL_2294b: Unknown result type (might be due to invalid IL or missing references)
		//IL_22950: Unknown result type (might be due to invalid IL or missing references)
		//IL_22955: Unknown result type (might be due to invalid IL or missing references)
		//IL_2276f: Unknown result type (might be due to invalid IL or missing references)
		//IL_22775: Unknown result type (might be due to invalid IL or missing references)
		//IL_2277a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2277f: Unknown result type (might be due to invalid IL or missing references)
		//IL_22785: Unknown result type (might be due to invalid IL or missing references)
		//IL_2278a: Unknown result type (might be due to invalid IL or missing references)
		//IL_22790: Unknown result type (might be due to invalid IL or missing references)
		//IL_22795: Unknown result type (might be due to invalid IL or missing references)
		//IL_2279f: Unknown result type (might be due to invalid IL or missing references)
		//IL_227a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_227b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_227bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_22811: Unknown result type (might be due to invalid IL or missing references)
		//IL_2281b: Unknown result type (might be due to invalid IL or missing references)
		//IL_22820: Unknown result type (might be due to invalid IL or missing references)
		//IL_22826: Unknown result type (might be due to invalid IL or missing references)
		//IL_22830: Unknown result type (might be due to invalid IL or missing references)
		//IL_22835: Unknown result type (might be due to invalid IL or missing references)
		//IL_2283a: Unknown result type (might be due to invalid IL or missing references)
		//IL_22857: Unknown result type (might be due to invalid IL or missing references)
		//IL_2286c: Unknown result type (might be due to invalid IL or missing references)
		//IL_22872: Unknown result type (might be due to invalid IL or missing references)
		//IL_22874: Unknown result type (might be due to invalid IL or missing references)
		//IL_22879: Unknown result type (might be due to invalid IL or missing references)
		//IL_22880: Unknown result type (might be due to invalid IL or missing references)
		//IL_22886: Unknown result type (might be due to invalid IL or missing references)
		//IL_2288b: Unknown result type (might be due to invalid IL or missing references)
		//IL_22890: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fea6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1feac: Unknown result type (might be due to invalid IL or missing references)
		//IL_1feb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1feb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ef66: Unknown result type (might be due to invalid IL or missing references)
		//IL_1efa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e271: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e27c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dce6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dcf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d290: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d2cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_8eba: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c18: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c35: Unknown result type (might be due to invalid IL or missing references)
		//IL_2909: Unknown result type (might be due to invalid IL or missing references)
		//IL_2926: Unknown result type (might be due to invalid IL or missing references)
		//IL_264c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2662: Unknown result type (might be due to invalid IL or missing references)
		//IL_2581: Unknown result type (might be due to invalid IL or missing references)
		//IL_2597: Unknown result type (might be due to invalid IL or missing references)
		//IL_24c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_24ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_24cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e47: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e52: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e57: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d12: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d23: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff79: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff84: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff89: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fee2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff21: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff63: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff72: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ebbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ebc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a906: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a917: Unknown result type (might be due to invalid IL or missing references)
		//IL_145ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_145e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_8cdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8dd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_8de0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2679: Unknown result type (might be due to invalid IL or missing references)
		//IL_268f: Unknown result type (might be due to invalid IL or missing references)
		//IL_25ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e38: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e62: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c41: Unknown result type (might be due to invalid IL or missing references)
		//IL_22cd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_22cdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ce2: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ce7: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d82: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f5fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f625: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f11f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f12a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bfae: Unknown result type (might be due to invalid IL or missing references)
		//IL_1500f: Unknown result type (might be due to invalid IL or missing references)
		//IL_15024: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f63: Unknown result type (might be due to invalid IL or missing references)
		//IL_28ab7: Unknown result type (might be due to invalid IL or missing references)
		//IL_28ac2: Unknown result type (might be due to invalid IL or missing references)
		//IL_28add: Unknown result type (might be due to invalid IL or missing references)
		//IL_28ae7: Unknown result type (might be due to invalid IL or missing references)
		//IL_28b05: Unknown result type (might be due to invalid IL or missing references)
		//IL_28b0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_23953: Unknown result type (might be due to invalid IL or missing references)
		//IL_23964: Unknown result type (might be due to invalid IL or missing references)
		//IL_2298b: Unknown result type (might be due to invalid IL or missing references)
		//IL_229ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_229b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_20074: Unknown result type (might be due to invalid IL or missing references)
		//IL_200af: Unknown result type (might be due to invalid IL or missing references)
		//IL_200cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f6b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f6c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a952: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a957: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a95c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a967: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a96c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1616d: Unknown result type (might be due to invalid IL or missing references)
		//IL_161aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1589e: Unknown result type (might be due to invalid IL or missing references)
		//IL_158e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1505f: Unknown result type (might be due to invalid IL or missing references)
		//IL_15074: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fe3: Unknown result type (might be due to invalid IL or missing references)
		//IL_9074: Unknown result type (might be due to invalid IL or missing references)
		//IL_9080: Unknown result type (might be due to invalid IL or missing references)
		//IL_27a97: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ca3: Unknown result type (might be due to invalid IL or missing references)
		//IL_26cae: Unknown result type (might be due to invalid IL or missing references)
		//IL_26cc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_26cd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_26cef: Unknown result type (might be due to invalid IL or missing references)
		//IL_26cf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_26201: Unknown result type (might be due to invalid IL or missing references)
		//IL_26214: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e90: Unknown result type (might be due to invalid IL or missing references)
		//IL_25eaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_25eb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_25edf: Unknown result type (might be due to invalid IL or missing references)
		//IL_25ee9: Unknown result type (might be due to invalid IL or missing references)
		//IL_25eee: Unknown result type (might be due to invalid IL or missing references)
		//IL_25f4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_25f53: Unknown result type (might be due to invalid IL or missing references)
		//IL_25f5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_25f62: Unknown result type (might be due to invalid IL or missing references)
		//IL_25f67: Unknown result type (might be due to invalid IL or missing references)
		//IL_17e64: Unknown result type (might be due to invalid IL or missing references)
		//IL_17ea1: Unknown result type (might be due to invalid IL or missing references)
		//IL_16721: Unknown result type (might be due to invalid IL or missing references)
		//IL_16760: Unknown result type (might be due to invalid IL or missing references)
		//IL_16766: Unknown result type (might be due to invalid IL or missing references)
		//IL_16931: Unknown result type (might be due to invalid IL or missing references)
		//IL_16974: Unknown result type (might be due to invalid IL or missing references)
		//IL_15905: Unknown result type (might be due to invalid IL or missing references)
		//IL_15916: Unknown result type (might be due to invalid IL or missing references)
		//IL_1592d: Unknown result type (might be due to invalid IL or missing references)
		//IL_15945: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ac6: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ad9: Unknown result type (might be due to invalid IL or missing references)
		//IL_263a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_26193: Unknown result type (might be due to invalid IL or missing references)
		//IL_26199: Unknown result type (might be due to invalid IL or missing references)
		//IL_2619e: Unknown result type (might be due to invalid IL or missing references)
		//IL_261a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_260c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_260e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_260ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_26118: Unknown result type (might be due to invalid IL or missing references)
		//IL_26122: Unknown result type (might be due to invalid IL or missing references)
		//IL_26127: Unknown result type (might be due to invalid IL or missing references)
		//IL_26172: Unknown result type (might be due to invalid IL or missing references)
		//IL_26178: Unknown result type (might be due to invalid IL or missing references)
		//IL_26182: Unknown result type (might be due to invalid IL or missing references)
		//IL_26187: Unknown result type (might be due to invalid IL or missing references)
		//IL_2618c: Unknown result type (might be due to invalid IL or missing references)
		//IL_22fb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ff3: Unknown result type (might be due to invalid IL or missing references)
		//IL_229ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a25: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a67: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a71: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a76: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a91: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ab1: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ab7: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ae7: Unknown result type (might be due to invalid IL or missing references)
		//IL_22af1: Unknown result type (might be due to invalid IL or missing references)
		//IL_22af6: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a47: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a52: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a57: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a72: Unknown result type (might be due to invalid IL or missing references)
		//IL_20aab: Unknown result type (might be due to invalid IL or missing references)
		//IL_20ab1: Unknown result type (might be due to invalid IL or missing references)
		//IL_20af3: Unknown result type (might be due to invalid IL or missing references)
		//IL_20afd: Unknown result type (might be due to invalid IL or missing references)
		//IL_20b02: Unknown result type (might be due to invalid IL or missing references)
		//IL_20b09: Unknown result type (might be due to invalid IL or missing references)
		//IL_20b0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_20b14: Unknown result type (might be due to invalid IL or missing references)
		//IL_20b19: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ea9: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ee6: Unknown result type (might be due to invalid IL or missing references)
		//IL_186d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1870e: Unknown result type (might be due to invalid IL or missing references)
		//IL_17ec5: Unknown result type (might be due to invalid IL or missing references)
		//IL_17ed6: Unknown result type (might be due to invalid IL or missing references)
		//IL_17eed: Unknown result type (might be due to invalid IL or missing references)
		//IL_17f05: Unknown result type (might be due to invalid IL or missing references)
		//IL_171a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_171e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_16998: Unknown result type (might be due to invalid IL or missing references)
		//IL_169a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_169c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_169d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_265b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_25fc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_25fdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_25fe5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2600f: Unknown result type (might be due to invalid IL or missing references)
		//IL_26019: Unknown result type (might be due to invalid IL or missing references)
		//IL_2601e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2607d: Unknown result type (might be due to invalid IL or missing references)
		//IL_26083: Unknown result type (might be due to invalid IL or missing references)
		//IL_2608d: Unknown result type (might be due to invalid IL or missing references)
		//IL_26092: Unknown result type (might be due to invalid IL or missing references)
		//IL_26097: Unknown result type (might be due to invalid IL or missing references)
		//IL_21164: Unknown result type (might be due to invalid IL or missing references)
		//IL_2116a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2116f: Unknown result type (might be due to invalid IL or missing references)
		//IL_21174: Unknown result type (might be due to invalid IL or missing references)
		//IL_2117a: Unknown result type (might be due to invalid IL or missing references)
		//IL_21184: Unknown result type (might be due to invalid IL or missing references)
		//IL_21189: Unknown result type (might be due to invalid IL or missing references)
		//IL_211b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_211bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_21201: Unknown result type (might be due to invalid IL or missing references)
		//IL_2120b: Unknown result type (might be due to invalid IL or missing references)
		//IL_21210: Unknown result type (might be due to invalid IL or missing references)
		//IL_2122d: Unknown result type (might be due to invalid IL or missing references)
		//IL_21233: Unknown result type (might be due to invalid IL or missing references)
		//IL_21238: Unknown result type (might be due to invalid IL or missing references)
		//IL_2123d: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c16: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c33: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c85: Unknown result type (might be due to invalid IL or missing references)
		//IL_18cc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_18cca: Unknown result type (might be due to invalid IL or missing references)
		//IL_19997: Unknown result type (might be due to invalid IL or missing references)
		//IL_199d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b00: Unknown result type (might be due to invalid IL or missing references)
		//IL_22b37: Unknown result type (might be due to invalid IL or missing references)
		//IL_22b70: Unknown result type (might be due to invalid IL or missing references)
		//IL_22b75: Unknown result type (might be due to invalid IL or missing references)
		//IL_22b7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_22b84: Unknown result type (might be due to invalid IL or missing references)
		//IL_22b89: Unknown result type (might be due to invalid IL or missing references)
		//IL_22b90: Unknown result type (might be due to invalid IL or missing references)
		//IL_22b96: Unknown result type (might be due to invalid IL or missing references)
		//IL_22be0: Unknown result type (might be due to invalid IL or missing references)
		//IL_22bea: Unknown result type (might be due to invalid IL or missing references)
		//IL_22bef: Unknown result type (might be due to invalid IL or missing references)
		//IL_21270: Unknown result type (might be due to invalid IL or missing references)
		//IL_21276: Unknown result type (might be due to invalid IL or missing references)
		//IL_2127b: Unknown result type (might be due to invalid IL or missing references)
		//IL_21280: Unknown result type (might be due to invalid IL or missing references)
		//IL_1659d: Unknown result type (might be due to invalid IL or missing references)
		//IL_165cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_165e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_16611: Unknown result type (might be due to invalid IL or missing references)
		//IL_16623: Unknown result type (might be due to invalid IL or missing references)
		//IL_16652: Unknown result type (might be due to invalid IL or missing references)
		//IL_147db: Unknown result type (might be due to invalid IL or missing references)
		//IL_1481c: Unknown result type (might be due to invalid IL or missing references)
		//IL_148c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_148d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b69: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b84: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_27bac: Unknown result type (might be due to invalid IL or missing references)
		//IL_27bb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2681e: Unknown result type (might be due to invalid IL or missing references)
		//IL_22c8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_21615: Unknown result type (might be due to invalid IL or missing references)
		//IL_21632: Unknown result type (might be due to invalid IL or missing references)
		//IL_21298: Unknown result type (might be due to invalid IL or missing references)
		//IL_212a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_212a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_212ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fdaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1927c: Unknown result type (might be due to invalid IL or missing references)
		//IL_19299: Unknown result type (might be due to invalid IL or missing references)
		//IL_29307: Unknown result type (might be due to invalid IL or missing references)
		//IL_29313: Unknown result type (might be due to invalid IL or missing references)
		//IL_29354: Unknown result type (might be due to invalid IL or missing references)
		//IL_29360: Unknown result type (might be due to invalid IL or missing references)
		//IL_293a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_293ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_270e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_270eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_27113: Unknown result type (might be due to invalid IL or missing references)
		//IL_2711e: Unknown result type (might be due to invalid IL or missing references)
		//IL_216ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fdc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b01: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b30: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b46: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b75: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b87: Unknown result type (might be due to invalid IL or missing references)
		//IL_18bb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_16689: Unknown result type (might be due to invalid IL or missing references)
		//IL_166c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_166ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_17467: Unknown result type (might be due to invalid IL or missing references)
		//IL_174a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cd1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cd28: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cd43: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cd4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cd6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cd75: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ce67: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ce6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ce72: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ce77: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ce7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cea0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cea6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ced6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cee0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cee5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf14: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf24: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b928: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b93e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b94f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b965: Unknown result type (might be due to invalid IL or missing references)
		//IL_2929c: Unknown result type (might be due to invalid IL or missing references)
		//IL_292ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_2716d: Unknown result type (might be due to invalid IL or missing references)
		//IL_27178: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_24ac9: Unknown result type (might be due to invalid IL or missing references)
		//IL_24740: Unknown result type (might be due to invalid IL or missing references)
		//IL_24783: Unknown result type (might be due to invalid IL or missing references)
		//IL_21741: Unknown result type (might be due to invalid IL or missing references)
		//IL_21515: Unknown result type (might be due to invalid IL or missing references)
		//IL_21536: Unknown result type (might be due to invalid IL or missing references)
		//IL_2153c: Unknown result type (might be due to invalid IL or missing references)
		//IL_21566: Unknown result type (might be due to invalid IL or missing references)
		//IL_21575: Unknown result type (might be due to invalid IL or missing references)
		//IL_2157a: Unknown result type (might be due to invalid IL or missing references)
		//IL_212be: Unknown result type (might be due to invalid IL or missing references)
		//IL_212d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_212dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2131f: Unknown result type (might be due to invalid IL or missing references)
		//IL_21329: Unknown result type (might be due to invalid IL or missing references)
		//IL_2132e: Unknown result type (might be due to invalid IL or missing references)
		//IL_21333: Unknown result type (might be due to invalid IL or missing references)
		//IL_2134c: Unknown result type (might be due to invalid IL or missing references)
		//IL_21352: Unknown result type (might be due to invalid IL or missing references)
		//IL_21382: Unknown result type (might be due to invalid IL or missing references)
		//IL_2138c: Unknown result type (might be due to invalid IL or missing references)
		//IL_21391: Unknown result type (might be due to invalid IL or missing references)
		//IL_19745: Unknown result type (might be due to invalid IL or missing references)
		//IL_19788: Unknown result type (might be due to invalid IL or missing references)
		//IL_1979a: Unknown result type (might be due to invalid IL or missing references)
		//IL_197ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_197c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_197da: Unknown result type (might be due to invalid IL or missing references)
		//IL_19306: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d80: Unknown result type (might be due to invalid IL or missing references)
		//IL_16dbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c880: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c88b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c8a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c8af: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c8cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c8d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c1c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c1cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c1e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c1f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c20f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c219: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f30: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f91: Unknown result type (might be due to invalid IL or missing references)
		//IL_26fd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_23cc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_23cda: Unknown result type (might be due to invalid IL or missing references)
		//IL_215df: Unknown result type (might be due to invalid IL or missing references)
		//IL_215e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_215ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_215ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_18bed: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c32: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cbf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc04: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc28: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc45: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb46: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb51: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb56: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b7ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b7ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b8cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b8d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_29459: Unknown result type (might be due to invalid IL or missing references)
		//IL_2947c: Unknown result type (might be due to invalid IL or missing references)
		//IL_28e0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_28e2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_27069: Unknown result type (might be due to invalid IL or missing references)
		//IL_27074: Unknown result type (might be due to invalid IL or missing references)
		//IL_25ce5: Unknown result type (might be due to invalid IL or missing references)
		//IL_25ceb: Unknown result type (might be due to invalid IL or missing references)
		//IL_25cf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_25cf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d06: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d12: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d17: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d35: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d46: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_25321: Unknown result type (might be due to invalid IL or missing references)
		//IL_25364: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d23: Unknown result type (might be due to invalid IL or missing references)
		//IL_213d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_21403: Unknown result type (might be due to invalid IL or missing references)
		//IL_21408: Unknown result type (might be due to invalid IL or missing references)
		//IL_2140d: Unknown result type (might be due to invalid IL or missing references)
		//IL_21417: Unknown result type (might be due to invalid IL or missing references)
		//IL_2141c: Unknown result type (might be due to invalid IL or missing references)
		//IL_21423: Unknown result type (might be due to invalid IL or missing references)
		//IL_21429: Unknown result type (might be due to invalid IL or missing references)
		//IL_21473: Unknown result type (might be due to invalid IL or missing references)
		//IL_2147d: Unknown result type (might be due to invalid IL or missing references)
		//IL_21482: Unknown result type (might be due to invalid IL or missing references)
		//IL_1836a: Unknown result type (might be due to invalid IL or missing references)
		//IL_183a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cbb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cbbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cbc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cbc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cbd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cbd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cbde: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cbe8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cbed: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb79: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb86: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb90: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb95: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cba5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cbaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bbee: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bbf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc14: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc46: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ba25: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ba54: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ba6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ba99: Unknown result type (might be due to invalid IL or missing references)
		//IL_2baaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bade: Unknown result type (might be due to invalid IL or missing references)
		//IL_2baf4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bb23: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e81: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ebe: Unknown result type (might be due to invalid IL or missing references)
		//IL_15eda: Unknown result type (might be due to invalid IL or missing references)
		//IL_15f17: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e5d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a8e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_25745: Unknown result type (might be due to invalid IL or missing references)
		//IL_25750: Unknown result type (might be due to invalid IL or missing references)
		//IL_25761: Unknown result type (might be due to invalid IL or missing references)
		//IL_25774: Unknown result type (might be due to invalid IL or missing references)
		//IL_24f33: Unknown result type (might be due to invalid IL or missing references)
		//IL_24f39: Unknown result type (might be due to invalid IL or missing references)
		//IL_24f6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_24fa7: Unknown result type (might be due to invalid IL or missing references)
		//IL_24ebd: Unknown result type (might be due to invalid IL or missing references)
		//IL_24ec8: Unknown result type (might be due to invalid IL or missing references)
		//IL_24ed9: Unknown result type (might be due to invalid IL or missing references)
		//IL_24eec: Unknown result type (might be due to invalid IL or missing references)
		//IL_24db0: Unknown result type (might be due to invalid IL or missing references)
		//IL_24dbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e11: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e16: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e60: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_184ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_184f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cfbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cfcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cfd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c01d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c027: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c02c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bb42: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bb81: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bb87: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a911: Unknown result type (might be due to invalid IL or missing references)
		//IL_25482: Unknown result type (might be due to invalid IL or missing references)
		//IL_25496: Unknown result type (might be due to invalid IL or missing references)
		//IL_251a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_251aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_251af: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b74: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b79: Unknown result type (might be due to invalid IL or missing references)
		//IL_1605a: Unknown result type (might be due to invalid IL or missing references)
		//IL_16065: Unknown result type (might be due to invalid IL or missing references)
		//IL_31ef7: Unknown result type (might be due to invalid IL or missing references)
		//IL_31f0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_31f51: Unknown result type (might be due to invalid IL or missing references)
		//IL_31f79: Unknown result type (might be due to invalid IL or missing references)
		//IL_31fed: Unknown result type (might be due to invalid IL or missing references)
		//IL_32000: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cff8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d007: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d00c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca47: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca52: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca77: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca95: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_29675: Unknown result type (might be due to invalid IL or missing references)
		//IL_2967f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2969d: Unknown result type (might be due to invalid IL or missing references)
		//IL_296a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_27311: Unknown result type (might be due to invalid IL or missing references)
		//IL_27352: Unknown result type (might be due to invalid IL or missing references)
		//IL_257d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_257d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2580a: Unknown result type (might be due to invalid IL or missing references)
		//IL_25847: Unknown result type (might be due to invalid IL or missing references)
		//IL_254cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_24485: Unknown result type (might be due to invalid IL or missing references)
		//IL_2449b: Unknown result type (might be due to invalid IL or missing references)
		//IL_24441: Unknown result type (might be due to invalid IL or missing references)
		//IL_24457: Unknown result type (might be due to invalid IL or missing references)
		//IL_20810: Unknown result type (might be due to invalid IL or missing references)
		//IL_2081a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2081f: Unknown result type (might be due to invalid IL or missing references)
		//IL_206ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_206f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_206fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_205b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_205bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_205c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_194bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_194f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_175ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1761c: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ef5: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f12: Unknown result type (might be due to invalid IL or missing references)
		//IL_323b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_323cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_32413: Unknown result type (might be due to invalid IL or missing references)
		//IL_32431: Unknown result type (might be due to invalid IL or missing references)
		//IL_3243b: Unknown result type (might be due to invalid IL or missing references)
		//IL_300fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_30113: Unknown result type (might be due to invalid IL or missing references)
		//IL_3012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_30140: Unknown result type (might be due to invalid IL or missing references)
		//IL_300ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_300c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c6a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b45b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b473: Unknown result type (might be due to invalid IL or missing references)
		//IL_273e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_273f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_196b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_196be: Unknown result type (might be due to invalid IL or missing references)
		//IL_1963f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1964a: Unknown result type (might be due to invalid IL or missing references)
		//IL_19650: Unknown result type (might be due to invalid IL or missing references)
		//IL_1965a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1965f: Unknown result type (might be due to invalid IL or missing references)
		//IL_19664: Unknown result type (might be due to invalid IL or missing references)
		//IL_1966a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1967b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1968d: Unknown result type (might be due to invalid IL or missing references)
		//IL_19692: Unknown result type (might be due to invalid IL or missing references)
		//IL_1969d: Unknown result type (might be due to invalid IL or missing references)
		//IL_196a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_196a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1772a: Unknown result type (might be due to invalid IL or missing references)
		//IL_17735: Unknown result type (might be due to invalid IL or missing references)
		//IL_30c82: Unknown result type (might be due to invalid IL or missing references)
		//IL_30c8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_30d0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_30d17: Unknown result type (might be due to invalid IL or missing references)
		//IL_30d1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_30178: Unknown result type (might be due to invalid IL or missing references)
		//IL_3018e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f1f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f21c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f296: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f2a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e1ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e203: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c0d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_244e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_244f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_244f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_17032: Unknown result type (might be due to invalid IL or missing references)
		//IL_1703d: Unknown result type (might be due to invalid IL or missing references)
		//IL_32106: Unknown result type (might be due to invalid IL or missing references)
		//IL_32110: Unknown result type (might be due to invalid IL or missing references)
		//IL_32115: Unknown result type (might be due to invalid IL or missing references)
		//IL_31067: Unknown result type (might be due to invalid IL or missing references)
		//IL_3106c: Unknown result type (might be due to invalid IL or missing references)
		//IL_31072: Unknown result type (might be due to invalid IL or missing references)
		//IL_31078: Unknown result type (might be due to invalid IL or missing references)
		//IL_3107d: Unknown result type (might be due to invalid IL or missing references)
		//IL_31083: Unknown result type (might be due to invalid IL or missing references)
		//IL_3108e: Unknown result type (might be due to invalid IL or missing references)
		//IL_30f51: Unknown result type (might be due to invalid IL or missing references)
		//IL_30f67: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e6d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e6e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2be04: Unknown result type (might be due to invalid IL or missing references)
		//IL_2be1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_274d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_274e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2452e: Unknown result type (might be due to invalid IL or missing references)
		//IL_24538: Unknown result type (might be due to invalid IL or missing references)
		//IL_2453d: Unknown result type (might be due to invalid IL or missing references)
		//IL_22492: Unknown result type (might be due to invalid IL or missing references)
		//IL_224a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_329ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_329b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_329b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_329c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_310a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_310ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_30821: Unknown result type (might be due to invalid IL or missing references)
		//IL_30837: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f405: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f41e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f441: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f45a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f485: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f4a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f4c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f4db: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f4f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f510: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f83b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f86c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e72c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e754: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e86a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e875: Unknown result type (might be due to invalid IL or missing references)
		//IL_297d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_297de: Unknown result type (might be due to invalid IL or missing references)
		//IL_297f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2980b: Unknown result type (might be due to invalid IL or missing references)
		//IL_27fbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_27fc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_28030: Unknown result type (might be due to invalid IL or missing references)
		//IL_28071: Unknown result type (might be due to invalid IL or missing references)
		//IL_32d9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_32db2: Unknown result type (might be due to invalid IL or missing references)
		//IL_32a0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3273c: Unknown result type (might be due to invalid IL or missing references)
		//IL_32752: Unknown result type (might be due to invalid IL or missing references)
		//IL_310bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_30889: Unknown result type (might be due to invalid IL or missing references)
		//IL_3089f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f543: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f55c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f57d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f58d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fa99: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fab2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fac3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fadc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d582: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d5aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d67e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d689: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d194: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d1a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d1ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d1b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d1b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d1c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d1cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d1e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d21c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d226: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d22b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e300: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c41e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c438: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bee4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bee9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2beee: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bef3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bef9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2befe: Unknown result type (might be due to invalid IL or missing references)
		//IL_280f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_280fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_255da: Unknown result type (might be due to invalid IL or missing references)
		//IL_25636: Unknown result type (might be due to invalid IL or missing references)
		//IL_256dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_256e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2460e: Unknown result type (might be due to invalid IL or missing references)
		//IL_24618: Unknown result type (might be due to invalid IL or missing references)
		//IL_2461d: Unknown result type (might be due to invalid IL or missing references)
		//IL_24569: Unknown result type (might be due to invalid IL or missing references)
		//IL_24573: Unknown result type (might be due to invalid IL or missing references)
		//IL_24578: Unknown result type (might be due to invalid IL or missing references)
		//IL_336dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_33706: Unknown result type (might be due to invalid IL or missing references)
		//IL_32a56: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fbd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fc06: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f9c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fa02: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ecae: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ecf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dda1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ddc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2de9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dea8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d2ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d317: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d450: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d45b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf56: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf75: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf15: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf20: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf40: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf45: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_245a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_245ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_245b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_22553: Unknown result type (might be due to invalid IL or missing references)
		//IL_22559: Unknown result type (might be due to invalid IL or missing references)
		//IL_2255e: Unknown result type (might be due to invalid IL or missing references)
		//IL_22563: Unknown result type (might be due to invalid IL or missing references)
		//IL_22574: Unknown result type (might be due to invalid IL or missing references)
		//IL_2257f: Unknown result type (might be due to invalid IL or missing references)
		//IL_22584: Unknown result type (might be due to invalid IL or missing references)
		//IL_225a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_225b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_225bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_225c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_32aa1: Unknown result type (might be due to invalid IL or missing references)
		//IL_321c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_321df: Unknown result type (might be due to invalid IL or missing references)
		//IL_321e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_32345: Unknown result type (might be due to invalid IL or missing references)
		//IL_32350: Unknown result type (might be due to invalid IL or missing references)
		//IL_31b3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_31b54: Unknown result type (might be due to invalid IL or missing references)
		//IL_30e93: Unknown result type (might be due to invalid IL or missing references)
		//IL_30e9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fed4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2feed: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fefe: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ff17: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dfe7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e00f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e410: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c4fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c503: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c508: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c50d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c513: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c518: Unknown result type (might be due to invalid IL or missing references)
		//IL_277c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_277cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_245d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_245e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_245e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_33896: Unknown result type (might be due to invalid IL or missing references)
		//IL_338a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_32fbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_32fd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f662: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f67b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eee5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ef22: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e167: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e172: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dad3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dafb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d80c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d834: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d974: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d97f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c570: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c58f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c529: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c52f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c535: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c53a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c545: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c55a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c55f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c564: Unknown result type (might be due to invalid IL or missing references)
		//IL_27575: Unknown result type (might be due to invalid IL or missing references)
		//IL_27580: Unknown result type (might be due to invalid IL or missing references)
		//IL_34e88: Unknown result type (might be due to invalid IL or missing references)
		//IL_34e8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_34e93: Unknown result type (might be due to invalid IL or missing references)
		//IL_34e98: Unknown result type (might be due to invalid IL or missing references)
		//IL_34e9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_34ea5: Unknown result type (might be due to invalid IL or missing references)
		//IL_34eaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_34eb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_34ebf: Unknown result type (might be due to invalid IL or missing references)
		//IL_34ec4: Unknown result type (might be due to invalid IL or missing references)
		//IL_34ece: Unknown result type (might be due to invalid IL or missing references)
		//IL_34ed3: Unknown result type (might be due to invalid IL or missing references)
		//IL_34e28: Unknown result type (might be due to invalid IL or missing references)
		//IL_34e2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_34e33: Unknown result type (might be due to invalid IL or missing references)
		//IL_34e56: Unknown result type (might be due to invalid IL or missing references)
		//IL_34e5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_34e60: Unknown result type (might be due to invalid IL or missing references)
		//IL_34e6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_34e70: Unknown result type (might be due to invalid IL or missing references)
		//IL_340ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_34111: Unknown result type (might be due to invalid IL or missing references)
		//IL_338d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_338e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_33122: Unknown result type (might be due to invalid IL or missing references)
		//IL_33137: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f6a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f6c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fe00: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fe3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dc53: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dc5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_27885: Unknown result type (might be due to invalid IL or missing references)
		//IL_278c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3416a: Unknown result type (might be due to invalid IL or missing references)
		//IL_34192: Unknown result type (might be due to invalid IL or missing references)
		//IL_32b48: Unknown result type (might be due to invalid IL or missing references)
		//IL_32b4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_31255: Unknown result type (might be due to invalid IL or missing references)
		//IL_3126b: Unknown result type (might be due to invalid IL or missing references)
		//IL_312b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_312d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_312e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_313ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_313f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_31c51: Unknown result type (might be due to invalid IL or missing references)
		//IL_315d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_315ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_3169b: Unknown result type (might be due to invalid IL or missing references)
		//IL_316a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_29a77: Unknown result type (might be due to invalid IL or missing references)
		//IL_29a82: Unknown result type (might be due to invalid IL or missing references)
		//IL_29a9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_29aa7: Unknown result type (might be due to invalid IL or missing references)
		//IL_29ac5: Unknown result type (might be due to invalid IL or missing references)
		//IL_29acf: Unknown result type (might be due to invalid IL or missing references)
		//IL_27987: Unknown result type (might be due to invalid IL or missing references)
		//IL_27992: Unknown result type (might be due to invalid IL or missing references)
		//IL_27620: Unknown result type (might be due to invalid IL or missing references)
		//IL_27661: Unknown result type (might be due to invalid IL or missing references)
		//IL_346dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_346e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_346ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c5e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c5fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2834a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2835d: Unknown result type (might be due to invalid IL or missing references)
		//IL_27722: Unknown result type (might be due to invalid IL or missing references)
		//IL_2772d: Unknown result type (might be due to invalid IL or missing references)
		//IL_35fcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_34fd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_34fdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_335f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_335fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_31d61: Unknown result type (might be due to invalid IL or missing references)
		//IL_373b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_373b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_357cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_357d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_357e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_357eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_35842: Unknown result type (might be due to invalid IL or missing references)
		//IL_35851: Unknown result type (might be due to invalid IL or missing references)
		//IL_3560a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3175c: Unknown result type (might be due to invalid IL or missing references)
		//IL_31772: Unknown result type (might be due to invalid IL or missing references)
		//IL_317b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_317d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_317de: Unknown result type (might be due to invalid IL or missing references)
		//IL_318ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_318f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_35518: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a3b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a3b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a407: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a40d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a45d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a463: Unknown result type (might be due to invalid IL or missing references)
		//IL_35d02: Unknown result type (might be due to invalid IL or missing references)
		//IL_35d11: Unknown result type (might be due to invalid IL or missing references)
		//IL_3553f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3554b: Unknown result type (might be due to invalid IL or missing references)
		//IL_35587: Unknown result type (might be due to invalid IL or missing references)
		//IL_3558d: Unknown result type (might be due to invalid IL or missing references)
		//IL_35592: Unknown result type (might be due to invalid IL or missing references)
		//IL_35597: Unknown result type (might be due to invalid IL or missing references)
		//IL_355a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_355b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_355b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_355c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3520e: Unknown result type (might be due to invalid IL or missing references)
		//IL_35213: Unknown result type (might be due to invalid IL or missing references)
		//IL_35254: Unknown result type (might be due to invalid IL or missing references)
		//IL_35259: Unknown result type (might be due to invalid IL or missing references)
		//IL_3431d: Unknown result type (might be due to invalid IL or missing references)
		//IL_34335: Unknown result type (might be due to invalid IL or missing references)
		//IL_32b9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_32ba5: Unknown result type (might be due to invalid IL or missing references)
		//IL_32c47: Unknown result type (might be due to invalid IL or missing references)
		//IL_32c4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_32cd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_32ce5: Unknown result type (might be due to invalid IL or missing references)
		//IL_32cea: Unknown result type (might be due to invalid IL or missing references)
		//IL_32cf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_32cfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_32d01: Unknown result type (might be due to invalid IL or missing references)
		//IL_32d09: Unknown result type (might be due to invalid IL or missing references)
		//IL_32d0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_32d14: Unknown result type (might be due to invalid IL or missing references)
		//IL_32d19: Unknown result type (might be due to invalid IL or missing references)
		//IL_319c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_319dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_31ad4: Unknown result type (might be due to invalid IL or missing references)
		//IL_31adf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2887b: Unknown result type (might be due to invalid IL or missing references)
		//IL_28881: Unknown result type (might be due to invalid IL or missing references)
		//IL_28886: Unknown result type (might be due to invalid IL or missing references)
		//IL_2888b: Unknown result type (might be due to invalid IL or missing references)
		//IL_288a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_288c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_288cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_288d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_288d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_28907: Unknown result type (might be due to invalid IL or missing references)
		//IL_2891c: Unknown result type (might be due to invalid IL or missing references)
		//IL_28929: Unknown result type (might be due to invalid IL or missing references)
		//IL_2892f: Unknown result type (might be due to invalid IL or missing references)
		//IL_28959: Unknown result type (might be due to invalid IL or missing references)
		//IL_2895f: Unknown result type (might be due to invalid IL or missing references)
		//IL_28964: Unknown result type (might be due to invalid IL or missing references)
		//IL_28969: Unknown result type (might be due to invalid IL or missing references)
		//IL_2897b: Unknown result type (might be due to invalid IL or missing references)
		//IL_289b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_289b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_289c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_289d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_289e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_289eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_28a52: Unknown result type (might be due to invalid IL or missing references)
		//IL_28a58: Unknown result type (might be due to invalid IL or missing references)
		//IL_28a5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_28a62: Unknown result type (might be due to invalid IL or missing references)
		//IL_28a69: Unknown result type (might be due to invalid IL or missing references)
		//IL_28a6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_28a74: Unknown result type (might be due to invalid IL or missing references)
		//IL_28a79: Unknown result type (might be due to invalid IL or missing references)
		//IL_39ced: Unknown result type (might be due to invalid IL or missing references)
		//IL_39cf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_37400: Unknown result type (might be due to invalid IL or missing references)
		//IL_3740c: Unknown result type (might be due to invalid IL or missing references)
		//IL_35a17: Unknown result type (might be due to invalid IL or missing references)
		//IL_35a32: Unknown result type (might be due to invalid IL or missing references)
		//IL_35a38: Unknown result type (might be due to invalid IL or missing references)
		//IL_35a3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_35a49: Unknown result type (might be due to invalid IL or missing references)
		//IL_35a4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_35a53: Unknown result type (might be due to invalid IL or missing references)
		//IL_350d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_33aac: Unknown result type (might be due to invalid IL or missing references)
		//IL_32bd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_32be1: Unknown result type (might be due to invalid IL or missing references)
		//IL_32be6: Unknown result type (might be due to invalid IL or missing references)
		//IL_32beb: Unknown result type (might be due to invalid IL or missing references)
		//IL_32bf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_32c7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_32c89: Unknown result type (might be due to invalid IL or missing references)
		//IL_32c8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_32c93: Unknown result type (might be due to invalid IL or missing references)
		//IL_32c98: Unknown result type (might be due to invalid IL or missing references)
		//IL_32d51: Unknown result type (might be due to invalid IL or missing references)
		//IL_32d56: Unknown result type (might be due to invalid IL or missing references)
		//IL_32d61: Unknown result type (might be due to invalid IL or missing references)
		//IL_32d66: Unknown result type (might be due to invalid IL or missing references)
		//IL_32d6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_32d32: Unknown result type (might be due to invalid IL or missing references)
		//IL_32d37: Unknown result type (might be due to invalid IL or missing references)
		//IL_32d3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_32d46: Unknown result type (might be due to invalid IL or missing references)
		//IL_32d4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_283db: Unknown result type (might be due to invalid IL or missing references)
		//IL_283e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_374fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_37506: Unknown result type (might be due to invalid IL or missing references)
		//IL_374aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_374b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_374b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_35dce: Unknown result type (might be due to invalid IL or missing references)
		//IL_35dd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_35dda: Unknown result type (might be due to invalid IL or missing references)
		//IL_35ddf: Unknown result type (might be due to invalid IL or missing references)
		//IL_35de9: Unknown result type (might be due to invalid IL or missing references)
		//IL_35dee: Unknown result type (might be due to invalid IL or missing references)
		//IL_35df3: Unknown result type (might be due to invalid IL or missing references)
		//IL_35df9: Unknown result type (might be due to invalid IL or missing references)
		//IL_35dff: Unknown result type (might be due to invalid IL or missing references)
		//IL_35e05: Unknown result type (might be due to invalid IL or missing references)
		//IL_35e0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_35eb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_35743: Unknown result type (might be due to invalid IL or missing references)
		//IL_356c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_33b79: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a0f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a102: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b0f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b100: Unknown result type (might be due to invalid IL or missing references)
		//IL_37d73: Unknown result type (might be due to invalid IL or missing references)
		//IL_37d78: Unknown result type (might be due to invalid IL or missing references)
		//IL_37d84: Unknown result type (might be due to invalid IL or missing references)
		//IL_37d89: Unknown result type (might be due to invalid IL or missing references)
		//IL_37dca: Unknown result type (might be due to invalid IL or missing references)
		//IL_37dcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_37dd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_37dda: Unknown result type (might be due to invalid IL or missing references)
		//IL_37639: Unknown result type (might be due to invalid IL or missing references)
		//IL_37643: Unknown result type (might be due to invalid IL or missing references)
		//IL_37648: Unknown result type (might be due to invalid IL or missing references)
		//IL_3764e: Unknown result type (might be due to invalid IL or missing references)
		//IL_37665: Unknown result type (might be due to invalid IL or missing references)
		//IL_3766a: Unknown result type (might be due to invalid IL or missing references)
		//IL_37687: Unknown result type (might be due to invalid IL or missing references)
		//IL_37696: Unknown result type (might be due to invalid IL or missing references)
		//IL_3769c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3769e: Unknown result type (might be due to invalid IL or missing references)
		//IL_376a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_35edd: Unknown result type (might be due to invalid IL or missing references)
		//IL_35ee2: Unknown result type (might be due to invalid IL or missing references)
		//IL_35ee7: Unknown result type (might be due to invalid IL or missing references)
		//IL_35ecb: Unknown result type (might be due to invalid IL or missing references)
		//IL_35a65: Unknown result type (might be due to invalid IL or missing references)
		//IL_35a6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_35c77: Unknown result type (might be due to invalid IL or missing references)
		//IL_35c86: Unknown result type (might be due to invalid IL or missing references)
		//IL_30af6: Unknown result type (might be due to invalid IL or missing references)
		//IL_30b1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_30b36: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b1aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b1b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_39a35: Unknown result type (might be due to invalid IL or missing references)
		//IL_39a54: Unknown result type (might be due to invalid IL or missing references)
		//IL_37a6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_37a78: Unknown result type (might be due to invalid IL or missing references)
		//IL_35eed: Unknown result type (might be due to invalid IL or missing references)
		//IL_35ef8: Unknown result type (might be due to invalid IL or missing references)
		//IL_35efd: Unknown result type (might be due to invalid IL or missing references)
		//IL_35a83: Unknown result type (might be due to invalid IL or missing references)
		//IL_35a8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_35a92: Unknown result type (might be due to invalid IL or missing references)
		//IL_356f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4061e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4062a: Unknown result type (might be due to invalid IL or missing references)
		//IL_40423: Unknown result type (might be due to invalid IL or missing references)
		//IL_4042d: Unknown result type (might be due to invalid IL or missing references)
		//IL_40432: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e8df: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e8e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e8f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e908: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e90d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b589: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b58f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b594: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b5a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b5a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b5ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b2b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b2be: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b1f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_39da3: Unknown result type (might be due to invalid IL or missing references)
		//IL_39da8: Unknown result type (might be due to invalid IL or missing references)
		//IL_39d4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_39d50: Unknown result type (might be due to invalid IL or missing references)
		//IL_37b82: Unknown result type (might be due to invalid IL or missing references)
		//IL_37b8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_37a98: Unknown result type (might be due to invalid IL or missing references)
		//IL_37a8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_37a91: Unknown result type (might be due to invalid IL or missing references)
		//IL_36240: Unknown result type (might be due to invalid IL or missing references)
		//IL_36246: Unknown result type (might be due to invalid IL or missing references)
		//IL_3624b: Unknown result type (might be due to invalid IL or missing references)
		//IL_36250: Unknown result type (might be due to invalid IL or missing references)
		//IL_36256: Unknown result type (might be due to invalid IL or missing references)
		//IL_3627a: Unknown result type (might be due to invalid IL or missing references)
		//IL_36280: Unknown result type (might be due to invalid IL or missing references)
		//IL_362b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_362bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_362c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_35f62: Unknown result type (might be due to invalid IL or missing references)
		//IL_35f6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_35f78: Unknown result type (might be due to invalid IL or missing references)
		//IL_35f83: Unknown result type (might be due to invalid IL or missing references)
		//IL_35aac: Unknown result type (might be due to invalid IL or missing references)
		//IL_35ab6: Unknown result type (might be due to invalid IL or missing references)
		//IL_35abb: Unknown result type (might be due to invalid IL or missing references)
		//IL_34570: Unknown result type (might be due to invalid IL or missing references)
		//IL_30bbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_30bc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_304db: Unknown result type (might be due to invalid IL or missing references)
		//IL_304e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_30549: Unknown result type (might be due to invalid IL or missing references)
		//IL_30567: Unknown result type (might be due to invalid IL or missing references)
		//IL_30571: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a602: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a66a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a31f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a32b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4059e: Unknown result type (might be due to invalid IL or missing references)
		//IL_405a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_405a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_405ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_40248: Unknown result type (might be due to invalid IL or missing references)
		//IL_4024d: Unknown result type (might be due to invalid IL or missing references)
		//IL_40253: Unknown result type (might be due to invalid IL or missing references)
		//IL_40259: Unknown result type (might be due to invalid IL or missing references)
		//IL_4025e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4026c: Unknown result type (might be due to invalid IL or missing references)
		//IL_40277: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b815: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b81b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b820: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b82f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b834: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b839: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b5c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b5cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b5d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b5d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b5e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b5e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b5ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b5f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b5f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b60a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b60f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b61a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b61f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b2f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_39b07: Unknown result type (might be due to invalid IL or missing references)
		//IL_39b26: Unknown result type (might be due to invalid IL or missing references)
		//IL_39bcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_39bd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_37bac: Unknown result type (might be due to invalid IL or missing references)
		//IL_37ba0: Unknown result type (might be due to invalid IL or missing references)
		//IL_37ba5: Unknown result type (might be due to invalid IL or missing references)
		//IL_37aa2: Unknown result type (might be due to invalid IL or missing references)
		//IL_37aa7: Unknown result type (might be due to invalid IL or missing references)
		//IL_37aac: Unknown result type (might be due to invalid IL or missing references)
		//IL_37ab2: Unknown result type (might be due to invalid IL or missing references)
		//IL_37ac9: Unknown result type (might be due to invalid IL or missing references)
		//IL_37ace: Unknown result type (might be due to invalid IL or missing references)
		//IL_37aeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_37afa: Unknown result type (might be due to invalid IL or missing references)
		//IL_37b00: Unknown result type (might be due to invalid IL or missing references)
		//IL_37b02: Unknown result type (might be due to invalid IL or missing references)
		//IL_37b07: Unknown result type (might be due to invalid IL or missing references)
		//IL_37e50: Unknown result type (might be due to invalid IL or missing references)
		//IL_37e55: Unknown result type (might be due to invalid IL or missing references)
		//IL_364f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_364f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_36509: Unknown result type (might be due to invalid IL or missing references)
		//IL_3650e: Unknown result type (might be due to invalid IL or missing references)
		//IL_36514: Unknown result type (might be due to invalid IL or missing references)
		//IL_3651a: Unknown result type (might be due to invalid IL or missing references)
		//IL_36520: Unknown result type (might be due to invalid IL or missing references)
		//IL_36525: Unknown result type (might be due to invalid IL or missing references)
		//IL_3652b: Unknown result type (might be due to invalid IL or missing references)
		//IL_36531: Unknown result type (might be due to invalid IL or missing references)
		//IL_3653c: Unknown result type (might be due to invalid IL or missing references)
		//IL_36541: Unknown result type (might be due to invalid IL or missing references)
		//IL_36546: Unknown result type (might be due to invalid IL or missing references)
		//IL_3654c: Unknown result type (might be due to invalid IL or missing references)
		//IL_36552: Unknown result type (might be due to invalid IL or missing references)
		//IL_36557: Unknown result type (might be due to invalid IL or missing references)
		//IL_362fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_3630b: Unknown result type (might be due to invalid IL or missing references)
		//IL_36311: Unknown result type (might be due to invalid IL or missing references)
		//IL_36313: Unknown result type (might be due to invalid IL or missing references)
		//IL_36318: Unknown result type (might be due to invalid IL or missing references)
		//IL_3632b: Unknown result type (might be due to invalid IL or missing references)
		//IL_36330: Unknown result type (might be due to invalid IL or missing references)
		//IL_36336: Unknown result type (might be due to invalid IL or missing references)
		//IL_3633b: Unknown result type (might be due to invalid IL or missing references)
		//IL_36342: Unknown result type (might be due to invalid IL or missing references)
		//IL_36348: Unknown result type (might be due to invalid IL or missing references)
		//IL_3634d: Unknown result type (might be due to invalid IL or missing references)
		//IL_36352: Unknown result type (might be due to invalid IL or missing references)
		//IL_35ad5: Unknown result type (might be due to invalid IL or missing references)
		//IL_35adf: Unknown result type (might be due to invalid IL or missing references)
		//IL_35ae4: Unknown result type (might be due to invalid IL or missing references)
		//IL_34608: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a71f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a72b: Unknown result type (might be due to invalid IL or missing references)
		//IL_405d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_405e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_405e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_405ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_405f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_405c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_405c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_405ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_405cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_4048b: Unknown result type (might be due to invalid IL or missing references)
		//IL_40496: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b8e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b8eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b8f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b8f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b854: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b85b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b860: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b865: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b86f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b874: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b87b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b880: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b887: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b899: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b89e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b8a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b8ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_37bb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_37bbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_37bc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_37bc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_37bdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_37be2: Unknown result type (might be due to invalid IL or missing references)
		//IL_37bff: Unknown result type (might be due to invalid IL or missing references)
		//IL_37c0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_37c14: Unknown result type (might be due to invalid IL or missing references)
		//IL_37c16: Unknown result type (might be due to invalid IL or missing references)
		//IL_37c1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_382c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_382c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_35b1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_35b39: Unknown result type (might be due to invalid IL or missing references)
		//IL_35b3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_35b70: Unknown result type (might be due to invalid IL or missing references)
		//IL_35b75: Unknown result type (might be due to invalid IL or missing references)
		//IL_35b81: Unknown result type (might be due to invalid IL or missing references)
		//IL_35b86: Unknown result type (might be due to invalid IL or missing references)
		//IL_35b8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_35b91: Unknown result type (might be due to invalid IL or missing references)
		//IL_35b96: Unknown result type (might be due to invalid IL or missing references)
		//IL_35ba7: Unknown result type (might be due to invalid IL or missing references)
		//IL_35bac: Unknown result type (might be due to invalid IL or missing references)
		//IL_35bb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_35bbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_35bc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_35bc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_35be2: Unknown result type (might be due to invalid IL or missing references)
		//IL_35be8: Unknown result type (might be due to invalid IL or missing references)
		//IL_35c19: Unknown result type (might be due to invalid IL or missing references)
		//IL_35c1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_35c2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_35c2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_35c34: Unknown result type (might be due to invalid IL or missing references)
		//IL_35c3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_35c3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_35c50: Unknown result type (might be due to invalid IL or missing references)
		//IL_35c55: Unknown result type (might be due to invalid IL or missing references)
		//IL_35afe: Unknown result type (might be due to invalid IL or missing references)
		//IL_35b08: Unknown result type (might be due to invalid IL or missing references)
		//IL_35b0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_345be: Unknown result type (might be due to invalid IL or missing references)
		//IL_29cf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_29d16: Unknown result type (might be due to invalid IL or missing references)
		//IL_42580: Unknown result type (might be due to invalid IL or missing references)
		//IL_42585: Unknown result type (might be due to invalid IL or missing references)
		//IL_42597: Unknown result type (might be due to invalid IL or missing references)
		//IL_425b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_425b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_425bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_425d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_425db: Unknown result type (might be due to invalid IL or missing references)
		//IL_425e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_425f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_425f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cd9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cda4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cdaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cdc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cdc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cdcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cdd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cdd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cddd: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cde2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cc72: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cc77: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cc7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cc94: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cc99: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cc9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cca4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ccab: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ccb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ccb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c22b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c230: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c237: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c23c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b940: Unknown result type (might be due to invalid IL or missing references)
		//IL_37ced: Unknown result type (might be due to invalid IL or missing references)
		//IL_37d04: Unknown result type (might be due to invalid IL or missing references)
		//IL_37d09: Unknown result type (might be due to invalid IL or missing references)
		//IL_37d26: Unknown result type (might be due to invalid IL or missing references)
		//IL_37d35: Unknown result type (might be due to invalid IL or missing references)
		//IL_37d3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_37d3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_37d42: Unknown result type (might be due to invalid IL or missing references)
		//IL_37ed4: Unknown result type (might be due to invalid IL or missing references)
		//IL_37ef1: Unknown result type (might be due to invalid IL or missing references)
		//IL_36b03: Unknown result type (might be due to invalid IL or missing references)
		//IL_36b14: Unknown result type (might be due to invalid IL or missing references)
		//IL_3657d: Unknown result type (might be due to invalid IL or missing references)
		//IL_36582: Unknown result type (might be due to invalid IL or missing references)
		//IL_36587: Unknown result type (might be due to invalid IL or missing references)
		//IL_3659e: Unknown result type (might be due to invalid IL or missing references)
		//IL_365a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_365af: Unknown result type (might be due to invalid IL or missing references)
		//IL_365b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_365ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_365c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_365cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_365d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_365d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_365ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_345e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_30664: Unknown result type (might be due to invalid IL or missing references)
		//IL_3066f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4337d: Unknown result type (might be due to invalid IL or missing references)
		//IL_43390: Unknown result type (might be due to invalid IL or missing references)
		//IL_43324: Unknown result type (might be due to invalid IL or missing references)
		//IL_4283d: Unknown result type (might be due to invalid IL or missing references)
		//IL_40294: Unknown result type (might be due to invalid IL or missing references)
		//IL_4029f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3efbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_3efc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3efc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3efd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3efdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_3efe2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ce08: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ce13: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ce18: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ce1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ce24: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ce2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ce30: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ccdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cce6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cceb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ccf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ccf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ccfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cd03: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c285: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a9b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a9bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a9c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_38317: Unknown result type (might be due to invalid IL or missing references)
		//IL_38334: Unknown result type (might be due to invalid IL or missing references)
		//IL_37f2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_37f34: Unknown result type (might be due to invalid IL or missing references)
		//IL_37f39: Unknown result type (might be due to invalid IL or missing references)
		//IL_37f3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_37f44: Unknown result type (might be due to invalid IL or missing references)
		//IL_37f4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_37f4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_36b27: Unknown result type (might be due to invalid IL or missing references)
		//IL_36b3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3688d: Unknown result type (might be due to invalid IL or missing references)
		//IL_36898: Unknown result type (might be due to invalid IL or missing references)
		//IL_3689d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a1ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a1ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_29d7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_29d88: Unknown result type (might be due to invalid IL or missing references)
		//IL_28712: Unknown result type (might be due to invalid IL or missing references)
		//IL_2872a: Unknown result type (might be due to invalid IL or missing references)
		//IL_436cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_436d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_436da: Unknown result type (might be due to invalid IL or missing references)
		//IL_436df: Unknown result type (might be due to invalid IL or missing references)
		//IL_433bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_433c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_433c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_433cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_43234: Unknown result type (might be due to invalid IL or missing references)
		//IL_4323f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4260a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4260f: Unknown result type (might be due to invalid IL or missing references)
		//IL_42619: Unknown result type (might be due to invalid IL or missing references)
		//IL_4261e: Unknown result type (might be due to invalid IL or missing references)
		//IL_42623: Unknown result type (might be due to invalid IL or missing references)
		//IL_4263f: Unknown result type (might be due to invalid IL or missing references)
		//IL_42645: Unknown result type (might be due to invalid IL or missing references)
		//IL_42647: Unknown result type (might be due to invalid IL or missing references)
		//IL_4264c: Unknown result type (might be due to invalid IL or missing references)
		//IL_42665: Unknown result type (might be due to invalid IL or missing references)
		//IL_4266b: Unknown result type (might be due to invalid IL or missing references)
		//IL_42689: Unknown result type (might be due to invalid IL or missing references)
		//IL_4268e: Unknown result type (might be due to invalid IL or missing references)
		//IL_42693: Unknown result type (might be due to invalid IL or missing references)
		//IL_426ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_426fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_42705: Unknown result type (might be due to invalid IL or missing references)
		//IL_4270a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d20f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d214: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d22b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d230: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d236: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d23b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d241: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d258: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d25d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d262: Unknown result type (might be due to invalid IL or missing references)
		//IL_3da6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3da73: Unknown result type (might be due to invalid IL or missing references)
		//IL_3da8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3da8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3da95: Unknown result type (might be due to invalid IL or missing references)
		//IL_3da9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3daa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dab7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dabc: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dac1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dac7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dade: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dae3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dae8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3daee: Unknown result type (might be due to invalid IL or missing references)
		//IL_3daf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ce4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ce55: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ce5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ce64: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ce3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cd21: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cd28: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cd32: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cd37: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cd10: Unknown result type (might be due to invalid IL or missing references)
		//IL_38371: Unknown result type (might be due to invalid IL or missing references)
		//IL_38377: Unknown result type (might be due to invalid IL or missing references)
		//IL_3837c: Unknown result type (might be due to invalid IL or missing references)
		//IL_38381: Unknown result type (might be due to invalid IL or missing references)
		//IL_38387: Unknown result type (might be due to invalid IL or missing references)
		//IL_3838d: Unknown result type (might be due to invalid IL or missing references)
		//IL_38392: Unknown result type (might be due to invalid IL or missing references)
		//IL_36d76: Unknown result type (might be due to invalid IL or missing references)
		//IL_36d80: Unknown result type (might be due to invalid IL or missing references)
		//IL_36d85: Unknown result type (might be due to invalid IL or missing references)
		//IL_3690c: Unknown result type (might be due to invalid IL or missing references)
		//IL_36945: Unknown result type (might be due to invalid IL or missing references)
		//IL_3694f: Unknown result type (might be due to invalid IL or missing references)
		//IL_36954: Unknown result type (might be due to invalid IL or missing references)
		//IL_36959: Unknown result type (might be due to invalid IL or missing references)
		//IL_3696a: Unknown result type (might be due to invalid IL or missing references)
		//IL_36976: Unknown result type (might be due to invalid IL or missing references)
		//IL_3697b: Unknown result type (might be due to invalid IL or missing references)
		//IL_36982: Unknown result type (might be due to invalid IL or missing references)
		//IL_36988: Unknown result type (might be due to invalid IL or missing references)
		//IL_36625: Unknown result type (might be due to invalid IL or missing references)
		//IL_29de3: Unknown result type (might be due to invalid IL or missing references)
		//IL_29e24: Unknown result type (might be due to invalid IL or missing references)
		//IL_287eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_287f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_43962: Unknown result type (might be due to invalid IL or missing references)
		//IL_43968: Unknown result type (might be due to invalid IL or missing references)
		//IL_4396d: Unknown result type (might be due to invalid IL or missing references)
		//IL_43972: Unknown result type (might be due to invalid IL or missing references)
		//IL_436fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_43704: Unknown result type (might be due to invalid IL or missing references)
		//IL_43709: Unknown result type (might be due to invalid IL or missing references)
		//IL_4370e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4342b: Unknown result type (might be due to invalid IL or missing references)
		//IL_43430: Unknown result type (might be due to invalid IL or missing references)
		//IL_43448: Unknown result type (might be due to invalid IL or missing references)
		//IL_43457: Unknown result type (might be due to invalid IL or missing references)
		//IL_4345e: Unknown result type (might be due to invalid IL or missing references)
		//IL_43463: Unknown result type (might be due to invalid IL or missing references)
		//IL_43468: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f05a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d88b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d89c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d8a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d8ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d8b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d8b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d8bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d8d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d291: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d298: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d29d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d2a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d2a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d2ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d183: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d19c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d1a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cf84: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cf9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cfa9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3db21: Unknown result type (might be due to invalid IL or missing references)
		//IL_3db2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b398: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b3b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b461: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b46d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aa4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aa67: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aa6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aa6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_383c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_383c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_383cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_383d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_383da: Unknown result type (might be due to invalid IL or missing references)
		//IL_383e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_383e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_383eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_383f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_383f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_36e11: Unknown result type (might be due to invalid IL or missing references)
		//IL_36e16: Unknown result type (might be due to invalid IL or missing references)
		//IL_36e6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_36e6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_36e91: Unknown result type (might be due to invalid IL or missing references)
		//IL_36ea0: Unknown result type (might be due to invalid IL or missing references)
		//IL_36da2: Unknown result type (might be due to invalid IL or missing references)
		//IL_36db3: Unknown result type (might be due to invalid IL or missing references)
		//IL_36bba: Unknown result type (might be due to invalid IL or missing references)
		//IL_36bc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_36bc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3683d: Unknown result type (might be due to invalid IL or missing references)
		//IL_36843: Unknown result type (might be due to invalid IL or missing references)
		//IL_36848: Unknown result type (might be due to invalid IL or missing references)
		//IL_3684d: Unknown result type (might be due to invalid IL or missing references)
		//IL_36852: Unknown result type (might be due to invalid IL or missing references)
		//IL_3685c: Unknown result type (might be due to invalid IL or missing references)
		//IL_36861: Unknown result type (might be due to invalid IL or missing references)
		//IL_36869: Unknown result type (might be due to invalid IL or missing references)
		//IL_3686e: Unknown result type (might be due to invalid IL or missing references)
		//IL_36879: Unknown result type (might be due to invalid IL or missing references)
		//IL_3687e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3663e: Unknown result type (might be due to invalid IL or missing references)
		//IL_45205: Unknown result type (might be due to invalid IL or missing references)
		//IL_4520b: Unknown result type (might be due to invalid IL or missing references)
		//IL_45210: Unknown result type (might be due to invalid IL or missing references)
		//IL_45215: Unknown result type (might be due to invalid IL or missing references)
		//IL_43a88: Unknown result type (might be due to invalid IL or missing references)
		//IL_43a8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_43a94: Unknown result type (might be due to invalid IL or missing references)
		//IL_43a99: Unknown result type (might be due to invalid IL or missing references)
		//IL_439be: Unknown result type (might be due to invalid IL or missing references)
		//IL_439ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_439cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_439d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_439e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_439ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_439f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_439fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_43a01: Unknown result type (might be due to invalid IL or missing references)
		//IL_43774: Unknown result type (might be due to invalid IL or missing references)
		//IL_43780: Unknown result type (might be due to invalid IL or missing references)
		//IL_43785: Unknown result type (might be due to invalid IL or missing references)
		//IL_4378d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4379b: Unknown result type (might be due to invalid IL or missing references)
		//IL_437a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_437a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_437b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_437b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_437bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_437d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4358a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4358f: Unknown result type (might be due to invalid IL or missing references)
		//IL_435a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_435b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_435bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_435c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_435c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_43484: Unknown result type (might be due to invalid IL or missing references)
		//IL_4348b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4271d: Unknown result type (might be due to invalid IL or missing references)
		//IL_42722: Unknown result type (might be due to invalid IL or missing references)
		//IL_4272c: Unknown result type (might be due to invalid IL or missing references)
		//IL_42731: Unknown result type (might be due to invalid IL or missing references)
		//IL_42736: Unknown result type (might be due to invalid IL or missing references)
		//IL_42752: Unknown result type (might be due to invalid IL or missing references)
		//IL_42758: Unknown result type (might be due to invalid IL or missing references)
		//IL_4275a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4275f: Unknown result type (might be due to invalid IL or missing references)
		//IL_42778: Unknown result type (might be due to invalid IL or missing references)
		//IL_4277e: Unknown result type (might be due to invalid IL or missing references)
		//IL_403a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_403b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d2bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d2c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d2d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d2db: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d2f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d300: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d305: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cff6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cffb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d009: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d00e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d013: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d01a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d01f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d025: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d035: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d03f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d044: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d049: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d04f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d054: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d05a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d060: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d06a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d06f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d0ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d0b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d0c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d0cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_3db55: Unknown result type (might be due to invalid IL or missing references)
		//IL_3db5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3db60: Unknown result type (might be due to invalid IL or missing references)
		//IL_3db65: Unknown result type (might be due to invalid IL or missing references)
		//IL_3db6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3db71: Unknown result type (might be due to invalid IL or missing references)
		//IL_3db76: Unknown result type (might be due to invalid IL or missing references)
		//IL_3db7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3db83: Unknown result type (might be due to invalid IL or missing references)
		//IL_3db89: Unknown result type (might be due to invalid IL or missing references)
		//IL_3db8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c184: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bad9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bade: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bae4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3baea: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b063: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b06d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b077: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b088: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b092: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b097: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b09c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b0a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aa99: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aab5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aabb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aabd: Unknown result type (might be due to invalid IL or missing references)
		//IL_388c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_388c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_388cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_388d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_388d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_387f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_386f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_386f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_386fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_38704: Unknown result type (might be due to invalid IL or missing references)
		//IL_3872a: Unknown result type (might be due to invalid IL or missing references)
		//IL_38730: Unknown result type (might be due to invalid IL or missing references)
		//IL_38732: Unknown result type (might be due to invalid IL or missing references)
		//IL_38737: Unknown result type (might be due to invalid IL or missing references)
		//IL_3873d: Unknown result type (might be due to invalid IL or missing references)
		//IL_38748: Unknown result type (might be due to invalid IL or missing references)
		//IL_3874d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3875a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3875f: Unknown result type (might be due to invalid IL or missing references)
		//IL_38769: Unknown result type (might be due to invalid IL or missing references)
		//IL_3876f: Unknown result type (might be due to invalid IL or missing references)
		//IL_38774: Unknown result type (might be due to invalid IL or missing references)
		//IL_38779: Unknown result type (might be due to invalid IL or missing references)
		//IL_38783: Unknown result type (might be due to invalid IL or missing references)
		//IL_38788: Unknown result type (might be due to invalid IL or missing references)
		//IL_3878d: Unknown result type (might be due to invalid IL or missing references)
		//IL_38799: Unknown result type (might be due to invalid IL or missing references)
		//IL_387a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_387af: Unknown result type (might be due to invalid IL or missing references)
		//IL_387ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_3841a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3841f: Unknown result type (might be due to invalid IL or missing references)
		//IL_38408: Unknown result type (might be due to invalid IL or missing references)
		//IL_36c05: Unknown result type (might be due to invalid IL or missing references)
		//IL_36c0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_36c1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_36c21: Unknown result type (might be due to invalid IL or missing references)
		//IL_36c27: Unknown result type (might be due to invalid IL or missing references)
		//IL_36c2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_36c33: Unknown result type (might be due to invalid IL or missing references)
		//IL_36c38: Unknown result type (might be due to invalid IL or missing references)
		//IL_36c49: Unknown result type (might be due to invalid IL or missing references)
		//IL_369af: Unknown result type (might be due to invalid IL or missing references)
		//IL_369b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_369ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_369bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_369c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_369e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_369ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_36a31: Unknown result type (might be due to invalid IL or missing references)
		//IL_36a3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_36a40: Unknown result type (might be due to invalid IL or missing references)
		//IL_36a5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_36a67: Unknown result type (might be due to invalid IL or missing references)
		//IL_36a78: Unknown result type (might be due to invalid IL or missing references)
		//IL_36a7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_36a83: Unknown result type (might be due to invalid IL or missing references)
		//IL_36a88: Unknown result type (might be due to invalid IL or missing references)
		//IL_36a8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_36a92: Unknown result type (might be due to invalid IL or missing references)
		//IL_36a99: Unknown result type (might be due to invalid IL or missing references)
		//IL_36a9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_36aa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_36aa9: Unknown result type (might be due to invalid IL or missing references)
		//IL_366c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_366fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_363bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_363c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_363ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_363cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_363d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_363e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_363e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_36422: Unknown result type (might be due to invalid IL or missing references)
		//IL_36428: Unknown result type (might be due to invalid IL or missing references)
		//IL_3646a: Unknown result type (might be due to invalid IL or missing references)
		//IL_36474: Unknown result type (might be due to invalid IL or missing references)
		//IL_36479: Unknown result type (might be due to invalid IL or missing references)
		//IL_36496: Unknown result type (might be due to invalid IL or missing references)
		//IL_3649c: Unknown result type (might be due to invalid IL or missing references)
		//IL_364a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_364a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_462ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_462b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_462b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_462bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_43ae9: Unknown result type (might be due to invalid IL or missing references)
		//IL_43af5: Unknown result type (might be due to invalid IL or missing references)
		//IL_43afa: Unknown result type (might be due to invalid IL or missing references)
		//IL_43b02: Unknown result type (might be due to invalid IL or missing references)
		//IL_43b13: Unknown result type (might be due to invalid IL or missing references)
		//IL_43b18: Unknown result type (might be due to invalid IL or missing references)
		//IL_43b1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_43b29: Unknown result type (might be due to invalid IL or missing references)
		//IL_43b2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_43a17: Unknown result type (might be due to invalid IL or missing references)
		//IL_435d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_435df: Unknown result type (might be due to invalid IL or missing references)
		//IL_434b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_434c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_434d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_434d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_434ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_409b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_409c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_409cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_409d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_409d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_409dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_409e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_409f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f938: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f949: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f953: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f958: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f95e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f963: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f968: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f97d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f662: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f667: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f66d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f672: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f0fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f101: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d500: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d50a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d50f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d444: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d44a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d450: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d456: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d46d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d473: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d478: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d47d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d483: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d489: Unknown result type (might be due to invalid IL or missing references)
		//IL_3db9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dba2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dba7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c1b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bb01: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bb1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bb22: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bb30: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bb35: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bb3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bb40: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bb46: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bb4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bb51: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bb57: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bb62: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aae7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ab03: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ab09: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ab0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_38905: Unknown result type (might be due to invalid IL or missing references)
		//IL_384f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_384fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_38511: Unknown result type (might be due to invalid IL or missing references)
		//IL_38517: Unknown result type (might be due to invalid IL or missing references)
		//IL_38519: Unknown result type (might be due to invalid IL or missing references)
		//IL_38523: Unknown result type (might be due to invalid IL or missing references)
		//IL_38528: Unknown result type (might be due to invalid IL or missing references)
		//IL_38539: Unknown result type (might be due to invalid IL or missing references)
		//IL_38425: Unknown result type (might be due to invalid IL or missing references)
		//IL_38430: Unknown result type (might be due to invalid IL or missing references)
		//IL_38435: Unknown result type (might be due to invalid IL or missing references)
		//IL_3843b: Unknown result type (might be due to invalid IL or missing references)
		//IL_38441: Unknown result type (might be due to invalid IL or missing references)
		//IL_3844b: Unknown result type (might be due to invalid IL or missing references)
		//IL_38450: Unknown result type (might be due to invalid IL or missing references)
		//IL_38455: Unknown result type (might be due to invalid IL or missing references)
		//IL_381c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_381d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_37fc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_36ecf: Unknown result type (might be due to invalid IL or missing references)
		//IL_36ef0: Unknown result type (might be due to invalid IL or missing references)
		//IL_36ef6: Unknown result type (might be due to invalid IL or missing references)
		//IL_36f26: Unknown result type (might be due to invalid IL or missing references)
		//IL_36f30: Unknown result type (might be due to invalid IL or missing references)
		//IL_36f35: Unknown result type (might be due to invalid IL or missing references)
		//IL_36f57: Unknown result type (might be due to invalid IL or missing references)
		//IL_36f6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_36f73: Unknown result type (might be due to invalid IL or missing references)
		//IL_36f78: Unknown result type (might be due to invalid IL or missing references)
		//IL_36f7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_36cc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_36c6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_36c80: Unknown result type (might be due to invalid IL or missing references)
		//IL_36c85: Unknown result type (might be due to invalid IL or missing references)
		//IL_36c9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_36ca2: Unknown result type (might be due to invalid IL or missing references)
		//IL_36cad: Unknown result type (might be due to invalid IL or missing references)
		//IL_36cb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_36796: Unknown result type (might be due to invalid IL or missing references)
		//IL_367a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4530f: Unknown result type (might be due to invalid IL or missing references)
		//IL_45315: Unknown result type (might be due to invalid IL or missing references)
		//IL_4531a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4531f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4364b: Unknown result type (might be due to invalid IL or missing references)
		//IL_43656: Unknown result type (might be due to invalid IL or missing references)
		//IL_4365b: Unknown result type (might be due to invalid IL or missing references)
		//IL_43663: Unknown result type (might be due to invalid IL or missing references)
		//IL_43668: Unknown result type (might be due to invalid IL or missing references)
		//IL_4366e: Unknown result type (might be due to invalid IL or missing references)
		//IL_43673: Unknown result type (might be due to invalid IL or missing references)
		//IL_43602: Unknown result type (might be due to invalid IL or missing references)
		//IL_43615: Unknown result type (might be due to invalid IL or missing references)
		//IL_43513: Unknown result type (might be due to invalid IL or missing references)
		//IL_4351a: Unknown result type (might be due to invalid IL or missing references)
		//IL_42be7: Unknown result type (might be due to invalid IL or missing references)
		//IL_422de: Unknown result type (might be due to invalid IL or missing references)
		//IL_422e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_422ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_40a6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_40a72: Unknown result type (might be due to invalid IL or missing references)
		//IL_40a84: Unknown result type (might be due to invalid IL or missing references)
		//IL_40a89: Unknown result type (might be due to invalid IL or missing references)
		//IL_40a8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_40a95: Unknown result type (might be due to invalid IL or missing references)
		//IL_40a9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_40aa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_40aa6: Unknown result type (might be due to invalid IL or missing references)
		//IL_40aac: Unknown result type (might be due to invalid IL or missing references)
		//IL_40ab6: Unknown result type (might be due to invalid IL or missing references)
		//IL_40abb: Unknown result type (might be due to invalid IL or missing references)
		//IL_40ac0: Unknown result type (might be due to invalid IL or missing references)
		//IL_40ac6: Unknown result type (might be due to invalid IL or missing references)
		//IL_40acc: Unknown result type (might be due to invalid IL or missing references)
		//IL_40ad7: Unknown result type (might be due to invalid IL or missing references)
		//IL_40adc: Unknown result type (might be due to invalid IL or missing references)
		//IL_40b05: Unknown result type (might be due to invalid IL or missing references)
		//IL_40b39: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f2fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f303: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f308: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f30d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f329: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d52f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d539: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d53e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d498: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d49e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d4b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d4b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d4d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d4db: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d4e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d3cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d3da: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d3df: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d3ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d3f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d401: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d40c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bfc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bfc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bfcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bfd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ac2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ac30: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ac36: Unknown result type (might be due to invalid IL or missing references)
		//IL_38929: Unknown result type (might be due to invalid IL or missing references)
		//IL_3892e: Unknown result type (might be due to invalid IL or missing references)
		//IL_38917: Unknown result type (might be due to invalid IL or missing references)
		//IL_38469: Unknown result type (might be due to invalid IL or missing references)
		//IL_38474: Unknown result type (might be due to invalid IL or missing references)
		//IL_3847f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3848a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3821d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3822d: Unknown result type (might be due to invalid IL or missing references)
		//IL_381ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_37ff8: Unknown result type (might be due to invalid IL or missing references)
		//IL_37ffd: Unknown result type (might be due to invalid IL or missing references)
		//IL_38004: Unknown result type (might be due to invalid IL or missing references)
		//IL_38009: Unknown result type (might be due to invalid IL or missing references)
		//IL_38013: Unknown result type (might be due to invalid IL or missing references)
		//IL_38018: Unknown result type (might be due to invalid IL or missing references)
		//IL_3801d: Unknown result type (might be due to invalid IL or missing references)
		//IL_38023: Unknown result type (might be due to invalid IL or missing references)
		//IL_38029: Unknown result type (might be due to invalid IL or missing references)
		//IL_3802f: Unknown result type (might be due to invalid IL or missing references)
		//IL_38034: Unknown result type (might be due to invalid IL or missing references)
		//IL_380dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_29fe3: Unknown result type (might be due to invalid IL or missing references)
		//IL_29fee: Unknown result type (might be due to invalid IL or missing references)
		//IL_463ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_463b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_463bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_463c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_463cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_463d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_46326: Unknown result type (might be due to invalid IL or missing references)
		//IL_4632c: Unknown result type (might be due to invalid IL or missing references)
		//IL_46331: Unknown result type (might be due to invalid IL or missing references)
		//IL_46336: Unknown result type (might be due to invalid IL or missing references)
		//IL_44450: Unknown result type (might be due to invalid IL or missing references)
		//IL_44456: Unknown result type (might be due to invalid IL or missing references)
		//IL_4445b: Unknown result type (might be due to invalid IL or missing references)
		//IL_44460: Unknown result type (might be due to invalid IL or missing references)
		//IL_445ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_4352c: Unknown result type (might be due to invalid IL or missing references)
		//IL_43540: Unknown result type (might be due to invalid IL or missing references)
		//IL_430a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_430af: Unknown result type (might be due to invalid IL or missing references)
		//IL_430b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_430bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_430c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_430c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_430cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_430d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_430dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_430e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_430ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_430f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_43103: Unknown result type (might be due to invalid IL or missing references)
		//IL_43115: Unknown result type (might be due to invalid IL or missing references)
		//IL_43146: Unknown result type (might be due to invalid IL or missing references)
		//IL_4315f: Unknown result type (might be due to invalid IL or missing references)
		//IL_42e17: Unknown result type (might be due to invalid IL or missing references)
		//IL_42e25: Unknown result type (might be due to invalid IL or missing references)
		//IL_42e2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_42e31: Unknown result type (might be due to invalid IL or missing references)
		//IL_42e36: Unknown result type (might be due to invalid IL or missing references)
		//IL_42e3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_42e42: Unknown result type (might be due to invalid IL or missing references)
		//IL_42e4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_42e52: Unknown result type (might be due to invalid IL or missing references)
		//IL_42e57: Unknown result type (might be due to invalid IL or missing references)
		//IL_42e63: Unknown result type (might be due to invalid IL or missing references)
		//IL_42e6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_42e79: Unknown result type (might be due to invalid IL or missing references)
		//IL_42e8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_42ebc: Unknown result type (might be due to invalid IL or missing references)
		//IL_42ed5: Unknown result type (might be due to invalid IL or missing references)
		//IL_423a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_423b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_423b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_40cd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_40cdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_40ce2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f346: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f367: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f36d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f36f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f374: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f381: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f38c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f396: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f3a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f3e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ecfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ecff: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ed05: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ed0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d9a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d9ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d9b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d9be: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d9c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d9c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d9cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d9d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d9de: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d9eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d9f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3da02: Unknown result type (might be due to invalid IL or missing references)
		//IL_3da0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3da18: Unknown result type (might be due to invalid IL or missing references)
		//IL_3da23: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d55e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d568: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d56d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bfe8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c004: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c009: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c017: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c01c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c022: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c027: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c02d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c033: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c038: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c03e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c049: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bb84: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bb8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c6e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ad9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ad32: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ad4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ad4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ad54: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ad5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ad5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ad72: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ad77: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ad82: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ad8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ad91: Unknown result type (might be due to invalid IL or missing references)
		//IL_38bbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_38b57: Unknown result type (might be due to invalid IL or missing references)
		//IL_38b5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_38b68: Unknown result type (might be due to invalid IL or missing references)
		//IL_38b73: Unknown result type (might be due to invalid IL or missing references)
		//IL_38a77: Unknown result type (might be due to invalid IL or missing references)
		//IL_38990: Unknown result type (might be due to invalid IL or missing references)
		//IL_38995: Unknown result type (might be due to invalid IL or missing references)
		//IL_3899b: Unknown result type (might be due to invalid IL or missing references)
		//IL_389cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_389d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_389d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_389d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_389de: Unknown result type (might be due to invalid IL or missing references)
		//IL_389e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_389ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_389f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_389fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_38a05: Unknown result type (might be due to invalid IL or missing references)
		//IL_38a0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_38a0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_38a1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_38a26: Unknown result type (might be due to invalid IL or missing references)
		//IL_38a31: Unknown result type (might be due to invalid IL or missing references)
		//IL_38a3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3893b: Unknown result type (might be due to invalid IL or missing references)
		//IL_38254: Unknown result type (might be due to invalid IL or missing references)
		//IL_38101: Unknown result type (might be due to invalid IL or missing references)
		//IL_38106: Unknown result type (might be due to invalid IL or missing references)
		//IL_3810b: Unknown result type (might be due to invalid IL or missing references)
		//IL_380ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_36fac: Unknown result type (might be due to invalid IL or missing references)
		//IL_36fd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_36fd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_37018: Unknown result type (might be due to invalid IL or missing references)
		//IL_37022: Unknown result type (might be due to invalid IL or missing references)
		//IL_37027: Unknown result type (might be due to invalid IL or missing references)
		//IL_37049: Unknown result type (might be due to invalid IL or missing references)
		//IL_3705f: Unknown result type (might be due to invalid IL or missing references)
		//IL_37065: Unknown result type (might be due to invalid IL or missing references)
		//IL_3706a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3706f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3708c: Unknown result type (might be due to invalid IL or missing references)
		//IL_37096: Unknown result type (might be due to invalid IL or missing references)
		//IL_370a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_370ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_370b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_370b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_370bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_370c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_46400: Unknown result type (might be due to invalid IL or missing references)
		//IL_46416: Unknown result type (might be due to invalid IL or missing references)
		//IL_4541d: Unknown result type (might be due to invalid IL or missing references)
		//IL_45430: Unknown result type (might be due to invalid IL or missing references)
		//IL_44486: Unknown result type (might be due to invalid IL or missing references)
		//IL_44996: Unknown result type (might be due to invalid IL or missing references)
		//IL_43565: Unknown result type (might be due to invalid IL or missing references)
		//IL_43578: Unknown result type (might be due to invalid IL or missing references)
		//IL_42c33: Unknown result type (might be due to invalid IL or missing references)
		//IL_42d2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4246e: Unknown result type (might be due to invalid IL or missing references)
		//IL_42478: Unknown result type (might be due to invalid IL or missing references)
		//IL_4247d: Unknown result type (might be due to invalid IL or missing references)
		//IL_40d10: Unknown result type (might be due to invalid IL or missing references)
		//IL_40d21: Unknown result type (might be due to invalid IL or missing references)
		//IL_40d2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_40d30: Unknown result type (might be due to invalid IL or missing references)
		//IL_40d36: Unknown result type (might be due to invalid IL or missing references)
		//IL_40d3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_40d40: Unknown result type (might be due to invalid IL or missing references)
		//IL_40d55: Unknown result type (might be due to invalid IL or missing references)
		//IL_40cfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_40cff: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d7d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d7db: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d7e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d7e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d7eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d7f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3df1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3df2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3df31: Unknown result type (might be due to invalid IL or missing references)
		//IL_3df37: Unknown result type (might be due to invalid IL or missing references)
		//IL_3df3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3df41: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e29d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e2a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e2b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e2be: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e2c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e2c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e2cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e2e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e2eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e2f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c715: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c71a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c724: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c729: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c72f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c734: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c739: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c741: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c746: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c74c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c751: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a1af: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a123: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a135: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a13a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a13f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a145: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a14a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a0fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a106: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a10b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a094: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a099: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a09f: Unknown result type (might be due to invalid IL or missing references)
		//IL_38111: Unknown result type (might be due to invalid IL or missing references)
		//IL_3811d: Unknown result type (might be due to invalid IL or missing references)
		//IL_38122: Unknown result type (might be due to invalid IL or missing references)
		//IL_3812e: Unknown result type (might be due to invalid IL or missing references)
		//IL_38139: Unknown result type (might be due to invalid IL or missing references)
		//IL_38144: Unknown result type (might be due to invalid IL or missing references)
		//IL_3814f: Unknown result type (might be due to invalid IL or missing references)
		//IL_370d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_370fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_37101: Unknown result type (might be due to invalid IL or missing references)
		//IL_37143: Unknown result type (might be due to invalid IL or missing references)
		//IL_3714d: Unknown result type (might be due to invalid IL or missing references)
		//IL_37152: Unknown result type (might be due to invalid IL or missing references)
		//IL_37174: Unknown result type (might be due to invalid IL or missing references)
		//IL_3718a: Unknown result type (might be due to invalid IL or missing references)
		//IL_37190: Unknown result type (might be due to invalid IL or missing references)
		//IL_37195: Unknown result type (might be due to invalid IL or missing references)
		//IL_3719a: Unknown result type (might be due to invalid IL or missing references)
		//IL_371b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_371c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_371d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_371d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_371dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_371e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_371e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_371ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_37365: Unknown result type (might be due to invalid IL or missing references)
		//IL_48a26: Unknown result type (might be due to invalid IL or missing references)
		//IL_48a39: Unknown result type (might be due to invalid IL or missing references)
		//IL_48047: Unknown result type (might be due to invalid IL or missing references)
		//IL_4804d: Unknown result type (might be due to invalid IL or missing references)
		//IL_48052: Unknown result type (might be due to invalid IL or missing references)
		//IL_48057: Unknown result type (might be due to invalid IL or missing references)
		//IL_46430: Unknown result type (might be due to invalid IL or missing references)
		//IL_46446: Unknown result type (might be due to invalid IL or missing references)
		//IL_45749: Unknown result type (might be due to invalid IL or missing references)
		//IL_444da: Unknown result type (might be due to invalid IL or missing references)
		//IL_444e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_444ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_444f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_444f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_444fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_44502: Unknown result type (might be due to invalid IL or missing references)
		//IL_44531: Unknown result type (might be due to invalid IL or missing references)
		//IL_44536: Unknown result type (might be due to invalid IL or missing references)
		//IL_4453c: Unknown result type (might be due to invalid IL or missing references)
		//IL_44541: Unknown result type (might be due to invalid IL or missing references)
		//IL_44498: Unknown result type (might be due to invalid IL or missing references)
		//IL_45045: Unknown result type (might be due to invalid IL or missing references)
		//IL_4504b: Unknown result type (might be due to invalid IL or missing references)
		//IL_45050: Unknown result type (might be due to invalid IL or missing references)
		//IL_45055: Unknown result type (might be due to invalid IL or missing references)
		//IL_44603: Unknown result type (might be due to invalid IL or missing references)
		//IL_44609: Unknown result type (might be due to invalid IL or missing references)
		//IL_4460e: Unknown result type (might be due to invalid IL or missing references)
		//IL_44613: Unknown result type (might be due to invalid IL or missing references)
		//IL_43ffc: Unknown result type (might be due to invalid IL or missing references)
		//IL_43fef: Unknown result type (might be due to invalid IL or missing references)
		//IL_43cd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_43cdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_43cee: Unknown result type (might be due to invalid IL or missing references)
		//IL_43cfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_43cff: Unknown result type (might be due to invalid IL or missing references)
		//IL_43d07: Unknown result type (might be due to invalid IL or missing references)
		//IL_43d18: Unknown result type (might be due to invalid IL or missing references)
		//IL_43d1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_43d23: Unknown result type (might be due to invalid IL or missing references)
		//IL_43d2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_43d33: Unknown result type (might be due to invalid IL or missing references)
		//IL_43c4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_43c50: Unknown result type (might be due to invalid IL or missing references)
		//IL_43c55: Unknown result type (might be due to invalid IL or missing references)
		//IL_43c5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_43c94: Unknown result type (might be due to invalid IL or missing references)
		//IL_43c9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_43ca4: Unknown result type (might be due to invalid IL or missing references)
		//IL_43b79: Unknown result type (might be due to invalid IL or missing references)
		//IL_43b8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_42536: Unknown result type (might be due to invalid IL or missing references)
		//IL_42540: Unknown result type (might be due to invalid IL or missing references)
		//IL_42545: Unknown result type (might be due to invalid IL or missing references)
		//IL_40fa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_40faa: Unknown result type (might be due to invalid IL or missing references)
		//IL_40faf: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fa53: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fa58: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fa66: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fa6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fa70: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fa76: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fa7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fa86: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fa8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fa98: Unknown result type (might be due to invalid IL or missing references)
		//IL_3faa2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3faaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fab9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fac5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fad0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f6bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f6c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f165: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f17c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f181: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f187: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f191: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f196: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f19b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f1a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f1a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f1b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f1b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f1ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f1f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f20e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f214: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f21a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f21f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f229: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f241: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f24b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f250: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d800: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d806: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d819: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d81e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d839: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d843: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d848: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d721: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d727: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d72d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d733: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d750: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d756: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d75b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d760: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d766: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d76c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e347: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e34e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e353: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e358: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e35e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e364: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c06b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c076: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bc65: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c799: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c79e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c7a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c7a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3acbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ac57: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ac5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ac68: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ac73: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a17e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a183: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a18e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a198: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a19d: Unknown result type (might be due to invalid IL or missing references)
		//IL_37202: Unknown result type (might be due to invalid IL or missing references)
		//IL_37226: Unknown result type (might be due to invalid IL or missing references)
		//IL_3722c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3725c: Unknown result type (might be due to invalid IL or missing references)
		//IL_37266: Unknown result type (might be due to invalid IL or missing references)
		//IL_3726b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3728d: Unknown result type (might be due to invalid IL or missing references)
		//IL_372a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_372a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_372ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_372b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_372d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_372da: Unknown result type (might be due to invalid IL or missing references)
		//IL_372eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_372f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_372f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_372fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_37300: Unknown result type (might be due to invalid IL or missing references)
		//IL_37305: Unknown result type (might be due to invalid IL or missing references)
		//IL_49de5: Unknown result type (might be due to invalid IL or missing references)
		//IL_49df5: Unknown result type (might be due to invalid IL or missing references)
		//IL_49dfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_48d37: Unknown result type (might be due to invalid IL or missing references)
		//IL_48d3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_48d42: Unknown result type (might be due to invalid IL or missing references)
		//IL_48d47: Unknown result type (might be due to invalid IL or missing references)
		//IL_48d95: Unknown result type (might be due to invalid IL or missing references)
		//IL_48da1: Unknown result type (might be due to invalid IL or missing references)
		//IL_48da6: Unknown result type (might be due to invalid IL or missing references)
		//IL_48dae: Unknown result type (might be due to invalid IL or missing references)
		//IL_48dbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_48dc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_48dc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_48dd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_48dd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_48dde: Unknown result type (might be due to invalid IL or missing references)
		//IL_48df1: Unknown result type (might be due to invalid IL or missing references)
		//IL_48a61: Unknown result type (might be due to invalid IL or missing references)
		//IL_48a67: Unknown result type (might be due to invalid IL or missing references)
		//IL_48a6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_48a71: Unknown result type (might be due to invalid IL or missing references)
		//IL_48ab1: Unknown result type (might be due to invalid IL or missing references)
		//IL_48ab6: Unknown result type (might be due to invalid IL or missing references)
		//IL_48ace: Unknown result type (might be due to invalid IL or missing references)
		//IL_48add: Unknown result type (might be due to invalid IL or missing references)
		//IL_48ae4: Unknown result type (might be due to invalid IL or missing references)
		//IL_48ae9: Unknown result type (might be due to invalid IL or missing references)
		//IL_48aee: Unknown result type (might be due to invalid IL or missing references)
		//IL_459f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_45a05: Unknown result type (might be due to invalid IL or missing references)
		//IL_457c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_457cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_457eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_457f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_457f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_457fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_44a1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_44a21: Unknown result type (might be due to invalid IL or missing references)
		//IL_44a26: Unknown result type (might be due to invalid IL or missing references)
		//IL_44a2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_44a31: Unknown result type (might be due to invalid IL or missing references)
		//IL_44a3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_44a42: Unknown result type (might be due to invalid IL or missing references)
		//IL_44a78: Unknown result type (might be due to invalid IL or missing references)
		//IL_44a7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_44ab6: Unknown result type (might be due to invalid IL or missing references)
		//IL_44abc: Unknown result type (might be due to invalid IL or missing references)
		//IL_44ac1: Unknown result type (might be due to invalid IL or missing references)
		//IL_44ac6: Unknown result type (might be due to invalid IL or missing references)
		//IL_44838: Unknown result type (might be due to invalid IL or missing references)
		//IL_4483e: Unknown result type (might be due to invalid IL or missing references)
		//IL_44843: Unknown result type (might be due to invalid IL or missing references)
		//IL_44848: Unknown result type (might be due to invalid IL or missing references)
		//IL_4484e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4486e: Unknown result type (might be due to invalid IL or missing references)
		//IL_44874: Unknown result type (might be due to invalid IL or missing references)
		//IL_448b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_448c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_448c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_448e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_448ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_448f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_448fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_44903: Unknown result type (might be due to invalid IL or missing references)
		//IL_4491c: Unknown result type (might be due to invalid IL or missing references)
		//IL_44922: Unknown result type (might be due to invalid IL or missing references)
		//IL_44927: Unknown result type (might be due to invalid IL or missing references)
		//IL_4492c: Unknown result type (might be due to invalid IL or missing references)
		//IL_44014: Unknown result type (might be due to invalid IL or missing references)
		//IL_44019: Unknown result type (might be due to invalid IL or missing references)
		//IL_44035: Unknown result type (might be due to invalid IL or missing references)
		//IL_4403a: Unknown result type (might be due to invalid IL or missing references)
		//IL_43d7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_43d8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_42f3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_42f4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_42f51: Unknown result type (might be due to invalid IL or missing references)
		//IL_42f58: Unknown result type (might be due to invalid IL or missing references)
		//IL_42f5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_42f63: Unknown result type (might be due to invalid IL or missing references)
		//IL_42f69: Unknown result type (might be due to invalid IL or missing references)
		//IL_42f74: Unknown result type (might be due to invalid IL or missing references)
		//IL_42f79: Unknown result type (might be due to invalid IL or missing references)
		//IL_42f7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_42f85: Unknown result type (might be due to invalid IL or missing references)
		//IL_42f8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_42fa6: Unknown result type (might be due to invalid IL or missing references)
		//IL_42fab: Unknown result type (might be due to invalid IL or missing references)
		//IL_42fb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_42fba: Unknown result type (might be due to invalid IL or missing references)
		//IL_42fbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_42fc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_42fd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_42fdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_42fe6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4300d: Unknown result type (might be due to invalid IL or missing references)
		//IL_43018: Unknown result type (might be due to invalid IL or missing references)
		//IL_416cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_416d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_416de: Unknown result type (might be due to invalid IL or missing references)
		//IL_40fca: Unknown result type (might be due to invalid IL or missing references)
		//IL_40fcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f6e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f6e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f6ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f6f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f6f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f6fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f54d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f55f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d77b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d781: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d794: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d799: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d7b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d7be: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d7c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d5aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d5d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d5d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d5dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d5e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d5ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d5f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d5f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d5fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d601: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dcf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dd02: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dd07: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dfb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e373: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e379: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e38c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e391: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e3ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e3b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e3bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c0ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c0fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c101: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c103: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c10d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c112: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c11e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c129: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c134: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c13f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bda5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bdaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bdb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bdb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c806: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c80b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c811: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c816: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a443: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a455: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a45a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a45f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a465: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a46a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a471: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a41a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a426: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a42b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a6a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c053: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c059: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c05e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c06d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c072: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c077: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bd4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bd58: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bd5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bd38: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bd42: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bd47: Unknown result type (might be due to invalid IL or missing references)
		//IL_48e42: Unknown result type (might be due to invalid IL or missing references)
		//IL_48e48: Unknown result type (might be due to invalid IL or missing references)
		//IL_48e4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_48e52: Unknown result type (might be due to invalid IL or missing references)
		//IL_48e86: Unknown result type (might be due to invalid IL or missing references)
		//IL_48e92: Unknown result type (might be due to invalid IL or missing references)
		//IL_48e97: Unknown result type (might be due to invalid IL or missing references)
		//IL_48e9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_48ead: Unknown result type (might be due to invalid IL or missing references)
		//IL_48eb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_48eb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_48ec4: Unknown result type (might be due to invalid IL or missing references)
		//IL_48ec9: Unknown result type (might be due to invalid IL or missing references)
		//IL_48c10: Unknown result type (might be due to invalid IL or missing references)
		//IL_48c15: Unknown result type (might be due to invalid IL or missing references)
		//IL_48c2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_48c3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_48c43: Unknown result type (might be due to invalid IL or missing references)
		//IL_48c48: Unknown result type (might be due to invalid IL or missing references)
		//IL_48c4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_48b0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_48b11: Unknown result type (might be due to invalid IL or missing references)
		//IL_4809d: Unknown result type (might be due to invalid IL or missing references)
		//IL_480a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_480a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_480ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_45a14: Unknown result type (might be due to invalid IL or missing references)
		//IL_458f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4590b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4583a: Unknown result type (might be due to invalid IL or missing references)
		//IL_45840: Unknown result type (might be due to invalid IL or missing references)
		//IL_45845: Unknown result type (might be due to invalid IL or missing references)
		//IL_4584a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4585b: Unknown result type (might be due to invalid IL or missing references)
		//IL_45866: Unknown result type (might be due to invalid IL or missing references)
		//IL_4586b: Unknown result type (might be due to invalid IL or missing references)
		//IL_45873: Unknown result type (might be due to invalid IL or missing references)
		//IL_4587d: Unknown result type (might be due to invalid IL or missing references)
		//IL_45882: Unknown result type (might be due to invalid IL or missing references)
		//IL_45888: Unknown result type (might be due to invalid IL or missing references)
		//IL_45892: Unknown result type (might be due to invalid IL or missing references)
		//IL_45897: Unknown result type (might be due to invalid IL or missing references)
		//IL_44f62: Unknown result type (might be due to invalid IL or missing references)
		//IL_44f78: Unknown result type (might be due to invalid IL or missing references)
		//IL_44e60: Unknown result type (might be due to invalid IL or missing references)
		//IL_44e6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_44e70: Unknown result type (might be due to invalid IL or missing references)
		//IL_44c35: Unknown result type (might be due to invalid IL or missing references)
		//IL_44c40: Unknown result type (might be due to invalid IL or missing references)
		//IL_45067: Unknown result type (might be due to invalid IL or missing references)
		//IL_45073: Unknown result type (might be due to invalid IL or missing references)
		//IL_45078: Unknown result type (might be due to invalid IL or missing references)
		//IL_450ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_450b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_45108: Unknown result type (might be due to invalid IL or missing references)
		//IL_4510e: Unknown result type (might be due to invalid IL or missing references)
		//IL_45113: Unknown result type (might be due to invalid IL or missing references)
		//IL_45118: Unknown result type (might be due to invalid IL or missing references)
		//IL_44625: Unknown result type (might be due to invalid IL or missing references)
		//IL_4462a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4467d: Unknown result type (might be due to invalid IL or missing references)
		//IL_44697: Unknown result type (might be due to invalid IL or missing references)
		//IL_4469c: Unknown result type (might be due to invalid IL or missing references)
		//IL_446a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_446a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_446ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_446b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_446c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_446df: Unknown result type (might be due to invalid IL or missing references)
		//IL_446e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_446ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_44701: Unknown result type (might be due to invalid IL or missing references)
		//IL_44707: Unknown result type (might be due to invalid IL or missing references)
		//IL_44725: Unknown result type (might be due to invalid IL or missing references)
		//IL_4472b: Unknown result type (might be due to invalid IL or missing references)
		//IL_44735: Unknown result type (might be due to invalid IL or missing references)
		//IL_4473a: Unknown result type (might be due to invalid IL or missing references)
		//IL_447be: Unknown result type (might be due to invalid IL or missing references)
		//IL_447c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_447c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_447ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_419ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_419f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_419f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_416f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_416fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_41626: Unknown result type (might be due to invalid IL or missing references)
		//IL_41630: Unknown result type (might be due to invalid IL or missing references)
		//IL_41635: Unknown result type (might be due to invalid IL or missing references)
		//IL_414f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_41503: Unknown result type (might be due to invalid IL or missing references)
		//IL_414a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_414af: Unknown result type (might be due to invalid IL or missing references)
		//IL_414b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4139a: Unknown result type (might be due to invalid IL or missing references)
		//IL_413a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_413a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_41091: Unknown result type (might be due to invalid IL or missing references)
		//IL_4109b: Unknown result type (might be due to invalid IL or missing references)
		//IL_410a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_410a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_410c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_410c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_410ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_410cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_410d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_410f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_410f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_410f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_410fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_41104: Unknown result type (might be due to invalid IL or missing references)
		//IL_4110a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4111f: Unknown result type (might be due to invalid IL or missing references)
		//IL_41124: Unknown result type (might be due to invalid IL or missing references)
		//IL_41148: Unknown result type (might be due to invalid IL or missing references)
		//IL_40bac: Unknown result type (might be due to invalid IL or missing references)
		//IL_40bbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f83a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f83f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f84b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f857: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f71b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f726: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f731: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f73c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f57f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f58a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ed54: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ed59: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d625: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d62a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d613: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dd6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dd76: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dd7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e112: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e12b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e137: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e5a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e5b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e5b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e4f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e4f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e4fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e504: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e51d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e523: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e528: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e52d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e533: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e539: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bdcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bde9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bdee: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bdf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bdfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_3be00: Unknown result type (might be due to invalid IL or missing references)
		//IL_3be05: Unknown result type (might be due to invalid IL or missing references)
		//IL_3be0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3be11: Unknown result type (might be due to invalid IL or missing references)
		//IL_3be16: Unknown result type (might be due to invalid IL or missing references)
		//IL_3be23: Unknown result type (might be due to invalid IL or missing references)
		//IL_3be2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bc85: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bc9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bca5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bcca: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bcd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bcdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bcf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bcfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bcff: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bd0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bd25: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bd2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c873: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c878: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c87e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c883: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c09c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c0a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4961d: Unknown result type (might be due to invalid IL or missing references)
		//IL_49639: Unknown result type (might be due to invalid IL or missing references)
		//IL_48f35: Unknown result type (might be due to invalid IL or missing references)
		//IL_48f3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_48f41: Unknown result type (might be due to invalid IL or missing references)
		//IL_48f46: Unknown result type (might be due to invalid IL or missing references)
		//IL_48f7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_48f8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_48f8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_48f97: Unknown result type (might be due to invalid IL or missing references)
		//IL_48fa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_48fad: Unknown result type (might be due to invalid IL or missing references)
		//IL_48fb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_48fbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_48fc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_48edf: Unknown result type (might be due to invalid IL or missing references)
		//IL_48c5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_48c65: Unknown result type (might be due to invalid IL or missing references)
		//IL_48b37: Unknown result type (might be due to invalid IL or missing references)
		//IL_48b4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_48b57: Unknown result type (might be due to invalid IL or missing references)
		//IL_48b5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_48b74: Unknown result type (might be due to invalid IL or missing references)
		//IL_47f3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_47f43: Unknown result type (might be due to invalid IL or missing references)
		//IL_47f48: Unknown result type (might be due to invalid IL or missing references)
		//IL_47f4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_48107: Unknown result type (might be due to invalid IL or missing references)
		//IL_48111: Unknown result type (might be due to invalid IL or missing references)
		//IL_48116: Unknown result type (might be due to invalid IL or missing references)
		//IL_4811c: Unknown result type (might be due to invalid IL or missing references)
		//IL_48126: Unknown result type (might be due to invalid IL or missing references)
		//IL_4812b: Unknown result type (might be due to invalid IL or missing references)
		//IL_47036: Unknown result type (might be due to invalid IL or missing references)
		//IL_4703c: Unknown result type (might be due to invalid IL or missing references)
		//IL_47041: Unknown result type (might be due to invalid IL or missing references)
		//IL_47046: Unknown result type (might be due to invalid IL or missing references)
		//IL_47086: Unknown result type (might be due to invalid IL or missing references)
		//IL_47092: Unknown result type (might be due to invalid IL or missing references)
		//IL_47097: Unknown result type (might be due to invalid IL or missing references)
		//IL_4709f: Unknown result type (might be due to invalid IL or missing references)
		//IL_470b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_470b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_470bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_470c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_470cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_46aaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_46ac0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4658f: Unknown result type (might be due to invalid IL or missing references)
		//IL_46595: Unknown result type (might be due to invalid IL or missing references)
		//IL_4659a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4659f: Unknown result type (might be due to invalid IL or missing references)
		//IL_45bdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_45be5: Unknown result type (might be due to invalid IL or missing references)
		//IL_45bea: Unknown result type (might be due to invalid IL or missing references)
		//IL_45bef: Unknown result type (might be due to invalid IL or missing references)
		//IL_45983: Unknown result type (might be due to invalid IL or missing references)
		//IL_4598e: Unknown result type (might be due to invalid IL or missing references)
		//IL_45993: Unknown result type (might be due to invalid IL or missing references)
		//IL_4599b: Unknown result type (might be due to invalid IL or missing references)
		//IL_459a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_459aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_459b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_459ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_459bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_45923: Unknown result type (might be due to invalid IL or missing references)
		//IL_45939: Unknown result type (might be due to invalid IL or missing references)
		//IL_43dd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_43de6: Unknown result type (might be due to invalid IL or missing references)
		//IL_43deb: Unknown result type (might be due to invalid IL or missing references)
		//IL_438eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_438f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_438fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_41b01: Unknown result type (might be due to invalid IL or missing references)
		//IL_41b0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_41b10: Unknown result type (might be due to invalid IL or missing references)
		//IL_41542: Unknown result type (might be due to invalid IL or missing references)
		//IL_4154c: Unknown result type (might be due to invalid IL or missing references)
		//IL_41551: Unknown result type (might be due to invalid IL or missing references)
		//IL_41558: Unknown result type (might be due to invalid IL or missing references)
		//IL_41563: Unknown result type (might be due to invalid IL or missing references)
		//IL_41568: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ed7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ed7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ed85: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ed8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ed90: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ed96: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d630: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d63b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d640: Unknown result type (might be due to invalid IL or missing references)
		//IL_3de0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3de15: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e186: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e18b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e199: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e19e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e1a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e1aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e1af: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e1b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e1c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e1cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e1d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e1d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e1df: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e1e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e1ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e1f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e1fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e1ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e23b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e246: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e251: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e25c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e548: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e54e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e561: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e566: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e581: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e58b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e590: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e47e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e489: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e48e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e49b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e4a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e4b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e4bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a8fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a90a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a90f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a914: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a91a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a91f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c0c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c0d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c0db: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c13d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4be1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4be23: Unknown result type (might be due to invalid IL or missing references)
		//IL_494e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_494fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_48cd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_48cdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_48ce1: Unknown result type (might be due to invalid IL or missing references)
		//IL_48ce9: Unknown result type (might be due to invalid IL or missing references)
		//IL_48cee: Unknown result type (might be due to invalid IL or missing references)
		//IL_48cf4: Unknown result type (might be due to invalid IL or missing references)
		//IL_48cf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_48c88: Unknown result type (might be due to invalid IL or missing references)
		//IL_48c9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_48b99: Unknown result type (might be due to invalid IL or missing references)
		//IL_48ba0: Unknown result type (might be due to invalid IL or missing references)
		//IL_47f79: Unknown result type (might be due to invalid IL or missing references)
		//IL_47f84: Unknown result type (might be due to invalid IL or missing references)
		//IL_47f89: Unknown result type (might be due to invalid IL or missing references)
		//IL_47f91: Unknown result type (might be due to invalid IL or missing references)
		//IL_47f96: Unknown result type (might be due to invalid IL or missing references)
		//IL_47f9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_47fa1: Unknown result type (might be due to invalid IL or missing references)
		//IL_47fd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_47fd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_47fdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_47fe0: Unknown result type (might be due to invalid IL or missing references)
		//IL_46e42: Unknown result type (might be due to invalid IL or missing references)
		//IL_46e48: Unknown result type (might be due to invalid IL or missing references)
		//IL_46e4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_46e52: Unknown result type (might be due to invalid IL or missing references)
		//IL_46e72: Unknown result type (might be due to invalid IL or missing references)
		//IL_46e88: Unknown result type (might be due to invalid IL or missing references)
		//IL_46ae1: Unknown result type (might be due to invalid IL or missing references)
		//IL_46af2: Unknown result type (might be due to invalid IL or missing references)
		//IL_468fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_46901: Unknown result type (might be due to invalid IL or missing references)
		//IL_46906: Unknown result type (might be due to invalid IL or missing references)
		//IL_4690b: Unknown result type (might be due to invalid IL or missing references)
		//IL_45da9: Unknown result type (might be due to invalid IL or missing references)
		//IL_45aec: Unknown result type (might be due to invalid IL or missing references)
		//IL_458e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_458e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_43e1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_43e1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_43e37: Unknown result type (might be due to invalid IL or missing references)
		//IL_43e47: Unknown result type (might be due to invalid IL or missing references)
		//IL_43e4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_41b28: Unknown result type (might be due to invalid IL or missing references)
		//IL_41b2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_41181: Unknown result type (might be due to invalid IL or missing references)
		//IL_41186: Unknown result type (might be due to invalid IL or missing references)
		//IL_4118c: Unknown result type (might be due to invalid IL or missing references)
		//IL_41191: Unknown result type (might be due to invalid IL or missing references)
		//IL_4119b: Unknown result type (might be due to invalid IL or missing references)
		//IL_411a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_411b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_411bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_411ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_411f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_411ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_41204: Unknown result type (might be due to invalid IL or missing references)
		//IL_41209: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fc98: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fca9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fcae: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fcb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fcb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fcbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_3eed2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3eed7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3eee3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3eeef: Unknown result type (might be due to invalid IL or missing references)
		//IL_3edb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3edbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_3edc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3edd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e73e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e744: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e74a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e750: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e76f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e775: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e77a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e77f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e785: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e78b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3be50: Unknown result type (might be due to invalid IL or missing references)
		//IL_3be5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a956: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a95b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a966: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a970: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a975: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a981: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a98b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a990: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cbd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cbeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c125: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c131: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c136: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c0fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c10d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c112: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a73e: Unknown result type (might be due to invalid IL or missing references)
		//IL_49959: Unknown result type (might be due to invalid IL or missing references)
		//IL_4981c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4982a: Unknown result type (might be due to invalid IL or missing references)
		//IL_49830: Unknown result type (might be due to invalid IL or missing references)
		//IL_49832: Unknown result type (might be due to invalid IL or missing references)
		//IL_49837: Unknown result type (might be due to invalid IL or missing references)
		//IL_4983d: Unknown result type (might be due to invalid IL or missing references)
		//IL_49844: Unknown result type (might be due to invalid IL or missing references)
		//IL_49849: Unknown result type (might be due to invalid IL or missing references)
		//IL_4984e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4985a: Unknown result type (might be due to invalid IL or missing references)
		//IL_49866: Unknown result type (might be due to invalid IL or missing references)
		//IL_498d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_498df: Unknown result type (might be due to invalid IL or missing references)
		//IL_498e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_498e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_49533: Unknown result type (might be due to invalid IL or missing references)
		//IL_49544: Unknown result type (might be due to invalid IL or missing references)
		//IL_48bb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_48bc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_47de0: Unknown result type (might be due to invalid IL or missing references)
		//IL_47df7: Unknown result type (might be due to invalid IL or missing references)
		//IL_47dfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4739d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4722a: Unknown result type (might be due to invalid IL or missing references)
		//IL_47240: Unknown result type (might be due to invalid IL or missing references)
		//IL_469b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_469be: Unknown result type (might be due to invalid IL or missing references)
		//IL_469c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_469cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_469dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_469e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_469e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_469f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_469f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_46643: Unknown result type (might be due to invalid IL or missing references)
		//IL_4664f: Unknown result type (might be due to invalid IL or missing references)
		//IL_46654: Unknown result type (might be due to invalid IL or missing references)
		//IL_4665c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4666d: Unknown result type (might be due to invalid IL or missing references)
		//IL_46672: Unknown result type (might be due to invalid IL or missing references)
		//IL_46678: Unknown result type (might be due to invalid IL or missing references)
		//IL_46683: Unknown result type (might be due to invalid IL or missing references)
		//IL_46688: Unknown result type (might be due to invalid IL or missing references)
		//IL_45df8: Unknown result type (might be due to invalid IL or missing references)
		//IL_45cb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_45cbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_45cc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_45cc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_45cd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_45cd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_45c99: Unknown result type (might be due to invalid IL or missing references)
		//IL_45ca4: Unknown result type (might be due to invalid IL or missing references)
		//IL_45ca9: Unknown result type (might be due to invalid IL or missing references)
		//IL_45c29: Unknown result type (might be due to invalid IL or missing references)
		//IL_44fcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_44fda: Unknown result type (might be due to invalid IL or missing references)
		//IL_44fdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_43ecf: Unknown result type (might be due to invalid IL or missing references)
		//IL_43ed4: Unknown result type (might be due to invalid IL or missing references)
		//IL_43eec: Unknown result type (might be due to invalid IL or missing references)
		//IL_43efc: Unknown result type (might be due to invalid IL or missing references)
		//IL_43f03: Unknown result type (might be due to invalid IL or missing references)
		//IL_43e5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_43e65: Unknown result type (might be due to invalid IL or missing references)
		//IL_41d3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_41d44: Unknown result type (might be due to invalid IL or missing references)
		//IL_41d49: Unknown result type (might be due to invalid IL or missing references)
		//IL_41d4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_41d6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_41b41: Unknown result type (might be due to invalid IL or missing references)
		//IL_41b46: Unknown result type (might be due to invalid IL or missing references)
		//IL_4184b: Unknown result type (might be due to invalid IL or missing references)
		//IL_41850: Unknown result type (might be due to invalid IL or missing references)
		//IL_41856: Unknown result type (might be due to invalid IL or missing references)
		//IL_41863: Unknown result type (might be due to invalid IL or missing references)
		//IL_41868: Unknown result type (might be due to invalid IL or missing references)
		//IL_4189c: Unknown result type (might be due to invalid IL or missing references)
		//IL_418a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_418ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_418b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_418bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_40e78: Unknown result type (might be due to invalid IL or missing references)
		//IL_40e7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_40e8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_40e90: Unknown result type (might be due to invalid IL or missing references)
		//IL_40e95: Unknown result type (might be due to invalid IL or missing references)
		//IL_40e9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_40ea1: Unknown result type (might be due to invalid IL or missing references)
		//IL_40eab: Unknown result type (might be due to invalid IL or missing references)
		//IL_40eb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_40ebd: Unknown result type (might be due to invalid IL or missing references)
		//IL_40ec7: Unknown result type (might be due to invalid IL or missing references)
		//IL_40ed4: Unknown result type (might be due to invalid IL or missing references)
		//IL_40ede: Unknown result type (might be due to invalid IL or missing references)
		//IL_40eea: Unknown result type (might be due to invalid IL or missing references)
		//IL_40ef5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fdb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fdc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fdd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3de27: Unknown result type (might be due to invalid IL or missing references)
		//IL_3de2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ded8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dee2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e79a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e7a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e7b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e7b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e7d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e7dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e7e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e5ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e614: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e61a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e61f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e629: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e62e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e633: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e638: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e63d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e643: Unknown result type (might be due to invalid IL or missing references)
		//IL_3be85: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bea0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bea6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3becb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bed1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bedc: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bee1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3beec: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bf07: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bf0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a66e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a673: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a67e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a688: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a68d: Unknown result type (might be due to invalid IL or missing references)
		//IL_393f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_393f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3940d: Unknown result type (might be due to invalid IL or missing references)
		//IL_39413: Unknown result type (might be due to invalid IL or missing references)
		//IL_39418: Unknown result type (might be due to invalid IL or missing references)
		//IL_3941d: Unknown result type (might be due to invalid IL or missing references)
		//IL_39431: Unknown result type (might be due to invalid IL or missing references)
		//IL_39436: Unknown result type (might be due to invalid IL or missing references)
		//IL_38f7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_38e78: Unknown result type (might be due to invalid IL or missing references)
		//IL_38e9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_38ea4: Unknown result type (might be due to invalid IL or missing references)
		//IL_38ea6: Unknown result type (might be due to invalid IL or missing references)
		//IL_38eab: Unknown result type (might be due to invalid IL or missing references)
		//IL_38eb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_38ebc: Unknown result type (might be due to invalid IL or missing references)
		//IL_38ec1: Unknown result type (might be due to invalid IL or missing references)
		//IL_38ecc: Unknown result type (might be due to invalid IL or missing references)
		//IL_38ed1: Unknown result type (might be due to invalid IL or missing references)
		//IL_38ee5: Unknown result type (might be due to invalid IL or missing references)
		//IL_38eeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_38ef0: Unknown result type (might be due to invalid IL or missing references)
		//IL_38ef5: Unknown result type (might be due to invalid IL or missing references)
		//IL_38f09: Unknown result type (might be due to invalid IL or missing references)
		//IL_38f0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_38f13: Unknown result type (might be due to invalid IL or missing references)
		//IL_38f1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_38f2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_38f35: Unknown result type (might be due to invalid IL or missing references)
		//IL_38f40: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c46e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c482: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c487: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c48c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c49e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c4a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c4a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c4ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c4b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c4c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c2e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c2ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c1ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c1b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a640: Unknown result type (might be due to invalid IL or missing references)
		//IL_48beb: Unknown result type (might be due to invalid IL or missing references)
		//IL_48bfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_4825e: Unknown result type (might be due to invalid IL or missing references)
		//IL_48264: Unknown result type (might be due to invalid IL or missing references)
		//IL_48269: Unknown result type (might be due to invalid IL or missing references)
		//IL_4826e: Unknown result type (might be due to invalid IL or missing references)
		//IL_47265: Unknown result type (might be due to invalid IL or missing references)
		//IL_4727b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4692c: Unknown result type (might be due to invalid IL or missing references)
		//IL_466a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_466ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_466b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_45e4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_44cfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_44d08: Unknown result type (might be due to invalid IL or missing references)
		//IL_43f21: Unknown result type (might be due to invalid IL or missing references)
		//IL_43f28: Unknown result type (might be due to invalid IL or missing references)
		//IL_43e80: Unknown result type (might be due to invalid IL or missing references)
		//IL_43e87: Unknown result type (might be due to invalid IL or missing references)
		//IL_41d87: Unknown result type (might be due to invalid IL or missing references)
		//IL_41da8: Unknown result type (might be due to invalid IL or missing references)
		//IL_41dae: Unknown result type (might be due to invalid IL or missing references)
		//IL_41db0: Unknown result type (might be due to invalid IL or missing references)
		//IL_41db5: Unknown result type (might be due to invalid IL or missing references)
		//IL_41dc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_41dcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_41dd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_41de2: Unknown result type (might be due to invalid IL or missing references)
		//IL_41e29: Unknown result type (might be due to invalid IL or missing references)
		//IL_41263: Unknown result type (might be due to invalid IL or missing references)
		//IL_41269: Unknown result type (might be due to invalid IL or missing references)
		//IL_4126e: Unknown result type (might be due to invalid IL or missing references)
		//IL_41274: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fe02: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fe07: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fe0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fe12: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fe1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fe2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fe34: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fe3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fd36: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e667: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e66c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e655: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c8fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c903: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c909: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c90e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3955d: Unknown result type (might be due to invalid IL or missing references)
		//IL_39571: Unknown result type (might be due to invalid IL or missing references)
		//IL_39577: Unknown result type (might be due to invalid IL or missing references)
		//IL_3957c: Unknown result type (might be due to invalid IL or missing references)
		//IL_39581: Unknown result type (might be due to invalid IL or missing references)
		//IL_39595: Unknown result type (might be due to invalid IL or missing references)
		//IL_3959a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3925c: Unknown result type (might be due to invalid IL or missing references)
		//IL_39158: Unknown result type (might be due to invalid IL or missing references)
		//IL_3917e: Unknown result type (might be due to invalid IL or missing references)
		//IL_39184: Unknown result type (might be due to invalid IL or missing references)
		//IL_39186: Unknown result type (might be due to invalid IL or missing references)
		//IL_3918b: Unknown result type (might be due to invalid IL or missing references)
		//IL_39191: Unknown result type (might be due to invalid IL or missing references)
		//IL_3919c: Unknown result type (might be due to invalid IL or missing references)
		//IL_391a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_391ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_391b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_391c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_391cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_391d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_391d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_391e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_391ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_391f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_391ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_3920a: Unknown result type (might be due to invalid IL or missing references)
		//IL_39215: Unknown result type (might be due to invalid IL or missing references)
		//IL_39220: Unknown result type (might be due to invalid IL or missing references)
		//IL_390e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_38fdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_39005: Unknown result type (might be due to invalid IL or missing references)
		//IL_3900b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3900d: Unknown result type (might be due to invalid IL or missing references)
		//IL_39012: Unknown result type (might be due to invalid IL or missing references)
		//IL_39018: Unknown result type (might be due to invalid IL or missing references)
		//IL_39023: Unknown result type (might be due to invalid IL or missing references)
		//IL_39028: Unknown result type (might be due to invalid IL or missing references)
		//IL_39033: Unknown result type (might be due to invalid IL or missing references)
		//IL_39038: Unknown result type (might be due to invalid IL or missing references)
		//IL_3904c: Unknown result type (might be due to invalid IL or missing references)
		//IL_39052: Unknown result type (might be due to invalid IL or missing references)
		//IL_39057: Unknown result type (might be due to invalid IL or missing references)
		//IL_3905c: Unknown result type (might be due to invalid IL or missing references)
		//IL_39070: Unknown result type (might be due to invalid IL or missing references)
		//IL_39075: Unknown result type (might be due to invalid IL or missing references)
		//IL_3907a: Unknown result type (might be due to invalid IL or missing references)
		//IL_39086: Unknown result type (might be due to invalid IL or missing references)
		//IL_39091: Unknown result type (might be due to invalid IL or missing references)
		//IL_3909c: Unknown result type (might be due to invalid IL or missing references)
		//IL_390a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d96d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d972: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d979: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d97e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cc37: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cc5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c31f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c1e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a668: Unknown result type (might be due to invalid IL or missing references)
		//IL_49138: Unknown result type (might be due to invalid IL or missing references)
		//IL_4913d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4914e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4915a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4915f: Unknown result type (might be due to invalid IL or missing references)
		//IL_49167: Unknown result type (might be due to invalid IL or missing references)
		//IL_49178: Unknown result type (might be due to invalid IL or missing references)
		//IL_4917d: Unknown result type (might be due to invalid IL or missing references)
		//IL_49183: Unknown result type (might be due to invalid IL or missing references)
		//IL_4918e: Unknown result type (might be due to invalid IL or missing references)
		//IL_49193: Unknown result type (might be due to invalid IL or missing references)
		//IL_4900e: Unknown result type (might be due to invalid IL or missing references)
		//IL_49021: Unknown result type (might be due to invalid IL or missing references)
		//IL_4794f: Unknown result type (might be due to invalid IL or missing references)
		//IL_47956: Unknown result type (might be due to invalid IL or missing references)
		//IL_4795b: Unknown result type (might be due to invalid IL or missing references)
		//IL_47960: Unknown result type (might be due to invalid IL or missing references)
		//IL_47299: Unknown result type (might be due to invalid IL or missing references)
		//IL_47136: Unknown result type (might be due to invalid IL or missing references)
		//IL_4713c: Unknown result type (might be due to invalid IL or missing references)
		//IL_46f91: Unknown result type (might be due to invalid IL or missing references)
		//IL_46f9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_46fa2: Unknown result type (might be due to invalid IL or missing references)
		//IL_46faa: Unknown result type (might be due to invalid IL or missing references)
		//IL_46fbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_46fc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_46fc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_46fd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_46fd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_46ed1: Unknown result type (might be due to invalid IL or missing references)
		//IL_46ee7: Unknown result type (might be due to invalid IL or missing references)
		//IL_46c35: Unknown result type (might be due to invalid IL or missing references)
		//IL_46c3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_46c40: Unknown result type (might be due to invalid IL or missing references)
		//IL_46c45: Unknown result type (might be due to invalid IL or missing references)
		//IL_466cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_466d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_466dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_45ea2: Unknown result type (might be due to invalid IL or missing references)
		//IL_44d3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_44d4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_44d7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_44d97: Unknown result type (might be due to invalid IL or missing references)
		//IL_43f4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_43f61: Unknown result type (might be due to invalid IL or missing references)
		//IL_43eaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_43ebd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4190c: Unknown result type (might be due to invalid IL or missing references)
		//IL_41911: Unknown result type (might be due to invalid IL or missing references)
		//IL_41917: Unknown result type (might be due to invalid IL or missing references)
		//IL_41927: Unknown result type (might be due to invalid IL or missing references)
		//IL_41931: Unknown result type (might be due to invalid IL or missing references)
		//IL_41936: Unknown result type (might be due to invalid IL or missing references)
		//IL_4193b: Unknown result type (might be due to invalid IL or missing references)
		//IL_41941: Unknown result type (might be due to invalid IL or missing references)
		//IL_41947: Unknown result type (might be due to invalid IL or missing references)
		//IL_41951: Unknown result type (might be due to invalid IL or missing references)
		//IL_41956: Unknown result type (might be due to invalid IL or missing references)
		//IL_41994: Unknown result type (might be due to invalid IL or missing references)
		//IL_4199f: Unknown result type (might be due to invalid IL or missing references)
		//IL_419aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_419b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_41296: Unknown result type (might be due to invalid IL or missing references)
		//IL_412a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_412a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_412b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_412bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_412ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_412d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_412e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_412eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_41281: Unknown result type (might be due to invalid IL or missing references)
		//IL_4128b: Unknown result type (might be due to invalid IL or missing references)
		//IL_41290: Unknown result type (might be due to invalid IL or missing references)
		//IL_40005: Unknown result type (might be due to invalid IL or missing references)
		//IL_40016: Unknown result type (might be due to invalid IL or missing references)
		//IL_40020: Unknown result type (might be due to invalid IL or missing references)
		//IL_40025: Unknown result type (might be due to invalid IL or missing references)
		//IL_4002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_40030: Unknown result type (might be due to invalid IL or missing references)
		//IL_40035: Unknown result type (might be due to invalid IL or missing references)
		//IL_4004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fef9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3feff: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ff04: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ff09: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ff21: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ff2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ff38: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ff42: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ff4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ff59: Unknown result type (might be due to invalid IL or missing references)
		//IL_3def4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3def9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e672: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e67d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e682: Unknown result type (might be due to invalid IL or missing references)
		//IL_396c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_396c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_396d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_396df: Unknown result type (might be due to invalid IL or missing references)
		//IL_396e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_396e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_396fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_39702: Unknown result type (might be due to invalid IL or missing references)
		//IL_39462: Unknown result type (might be due to invalid IL or missing references)
		//IL_39468: Unknown result type (might be due to invalid IL or missing references)
		//IL_394a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_394c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_394cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_394cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_394d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_394f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_39501: Unknown result type (might be due to invalid IL or missing references)
		//IL_39506: Unknown result type (might be due to invalid IL or missing references)
		//IL_393c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_392bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_392e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_392eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_392ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_392f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_392f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_39303: Unknown result type (might be due to invalid IL or missing references)
		//IL_39308: Unknown result type (might be due to invalid IL or missing references)
		//IL_39313: Unknown result type (might be due to invalid IL or missing references)
		//IL_39318: Unknown result type (might be due to invalid IL or missing references)
		//IL_3932c: Unknown result type (might be due to invalid IL or missing references)
		//IL_39332: Unknown result type (might be due to invalid IL or missing references)
		//IL_39337: Unknown result type (might be due to invalid IL or missing references)
		//IL_3933c: Unknown result type (might be due to invalid IL or missing references)
		//IL_39350: Unknown result type (might be due to invalid IL or missing references)
		//IL_39355: Unknown result type (might be due to invalid IL or missing references)
		//IL_3935a: Unknown result type (might be due to invalid IL or missing references)
		//IL_39366: Unknown result type (might be due to invalid IL or missing references)
		//IL_39371: Unknown result type (might be due to invalid IL or missing references)
		//IL_3937c: Unknown result type (might be due to invalid IL or missing references)
		//IL_39387: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dd9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dd2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dd31: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dd38: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dd3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4da17: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cd08: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cd0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cd13: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cd18: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c653: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c659: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c525: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c2f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c300: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c30f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c314: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c319: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c33d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c348: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c352: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c35d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c1b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c1c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c1d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c1db: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c1e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c204: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c20f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c219: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c224: Unknown result type (might be due to invalid IL or missing references)
		//IL_4be98: Unknown result type (might be due to invalid IL or missing references)
		//IL_4beaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bec3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bec8: Unknown result type (might be due to invalid IL or missing references)
		//IL_4becd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bed3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bed9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bee3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bee8: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bf1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bf22: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bf52: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bf5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bf61: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bf66: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bf77: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bf7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bf83: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bf88: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bf92: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bfaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bfb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bfb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a7fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a800: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a806: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a80b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a810: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a82e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a839: Unknown result type (might be due to invalid IL or missing references)
		//IL_491dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_491ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_490c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_490c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_490cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_490d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4910c: Unknown result type (might be due to invalid IL or missing references)
		//IL_49117: Unknown result type (might be due to invalid IL or missing references)
		//IL_4911c: Unknown result type (might be due to invalid IL or missing references)
		//IL_48689: Unknown result type (might be due to invalid IL or missing references)
		//IL_4868f: Unknown result type (might be due to invalid IL or missing references)
		//IL_48694: Unknown result type (might be due to invalid IL or missing references)
		//IL_48699: Unknown result type (might be due to invalid IL or missing references)
		//IL_486d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_486e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_486ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_486f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_48703: Unknown result type (might be due to invalid IL or missing references)
		//IL_48708: Unknown result type (might be due to invalid IL or missing references)
		//IL_4870e: Unknown result type (might be due to invalid IL or missing references)
		//IL_48719: Unknown result type (might be due to invalid IL or missing references)
		//IL_4871e: Unknown result type (might be due to invalid IL or missing references)
		//IL_48316: Unknown result type (might be due to invalid IL or missing references)
		//IL_48322: Unknown result type (might be due to invalid IL or missing references)
		//IL_48327: Unknown result type (might be due to invalid IL or missing references)
		//IL_4832f: Unknown result type (might be due to invalid IL or missing references)
		//IL_48340: Unknown result type (might be due to invalid IL or missing references)
		//IL_48345: Unknown result type (might be due to invalid IL or missing references)
		//IL_4834b: Unknown result type (might be due to invalid IL or missing references)
		//IL_48356: Unknown result type (might be due to invalid IL or missing references)
		//IL_4835b: Unknown result type (might be due to invalid IL or missing references)
		//IL_47793: Unknown result type (might be due to invalid IL or missing references)
		//IL_4779a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4779f: Unknown result type (might be due to invalid IL or missing references)
		//IL_477a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4740c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4742c: Unknown result type (might be due to invalid IL or missing references)
		//IL_472f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4730d: Unknown result type (might be due to invalid IL or missing references)
		//IL_46eff: Unknown result type (might be due to invalid IL or missing references)
		//IL_46f15: Unknown result type (might be due to invalid IL or missing references)
		//IL_46cdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_46ce7: Unknown result type (might be due to invalid IL or missing references)
		//IL_46cec: Unknown result type (might be due to invalid IL or missing references)
		//IL_46cf4: Unknown result type (might be due to invalid IL or missing references)
		//IL_46d05: Unknown result type (might be due to invalid IL or missing references)
		//IL_46d0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_46d10: Unknown result type (might be due to invalid IL or missing references)
		//IL_46d1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_46d20: Unknown result type (might be due to invalid IL or missing references)
		//IL_45ef7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4143c: Unknown result type (might be due to invalid IL or missing references)
		//IL_41442: Unknown result type (might be due to invalid IL or missing references)
		//IL_41447: Unknown result type (might be due to invalid IL or missing references)
		//IL_4144c: Unknown result type (might be due to invalid IL or missing references)
		//IL_39829: Unknown result type (might be due to invalid IL or missing references)
		//IL_3983d: Unknown result type (might be due to invalid IL or missing references)
		//IL_39843: Unknown result type (might be due to invalid IL or missing references)
		//IL_39848: Unknown result type (might be due to invalid IL or missing references)
		//IL_3984d: Unknown result type (might be due to invalid IL or missing references)
		//IL_39861: Unknown result type (might be due to invalid IL or missing references)
		//IL_39866: Unknown result type (might be due to invalid IL or missing references)
		//IL_395c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_395cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_39600: Unknown result type (might be due to invalid IL or missing references)
		//IL_39625: Unknown result type (might be due to invalid IL or missing references)
		//IL_3962b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3962d: Unknown result type (might be due to invalid IL or missing references)
		//IL_39632: Unknown result type (might be due to invalid IL or missing references)
		//IL_39655: Unknown result type (might be due to invalid IL or missing references)
		//IL_3965f: Unknown result type (might be due to invalid IL or missing references)
		//IL_39664: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cd4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c69e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c6ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c6b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c6b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c6c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c6c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c67d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c689: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c68e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c6d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c6db: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c6e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a855: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a860: Unknown result type (might be due to invalid IL or missing references)
		//IL_48818: Unknown result type (might be due to invalid IL or missing references)
		//IL_48822: Unknown result type (might be due to invalid IL or missing references)
		//IL_48827: Unknown result type (might be due to invalid IL or missing references)
		//IL_484d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_484df: Unknown result type (might be due to invalid IL or missing references)
		//IL_484e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_484e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_48376: Unknown result type (might be due to invalid IL or missing references)
		//IL_48380: Unknown result type (might be due to invalid IL or missing references)
		//IL_48385: Unknown result type (might be due to invalid IL or missing references)
		//IL_47b35: Unknown result type (might be due to invalid IL or missing references)
		//IL_47b46: Unknown result type (might be due to invalid IL or missing references)
		//IL_47b4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_47b51: Unknown result type (might be due to invalid IL or missing references)
		//IL_47b5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_47b61: Unknown result type (might be due to invalid IL or missing references)
		//IL_47b1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_47b28: Unknown result type (might be due to invalid IL or missing references)
		//IL_47b2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_45f4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_41baa: Unknown result type (might be due to invalid IL or missing references)
		//IL_41bc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_41bc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_41bcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_41bd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_41bdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_41be0: Unknown result type (might be due to invalid IL or missing references)
		//IL_41be6: Unknown result type (might be due to invalid IL or missing references)
		//IL_41bec: Unknown result type (might be due to invalid IL or missing references)
		//IL_41bf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_41bfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_41c2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_41c35: Unknown result type (might be due to invalid IL or missing references)
		//IL_41c53: Unknown result type (might be due to invalid IL or missing references)
		//IL_41c59: Unknown result type (might be due to invalid IL or missing references)
		//IL_41c5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_41c64: Unknown result type (might be due to invalid IL or missing references)
		//IL_41c6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_41c86: Unknown result type (might be due to invalid IL or missing references)
		//IL_41c90: Unknown result type (might be due to invalid IL or missing references)
		//IL_41c95: Unknown result type (might be due to invalid IL or missing references)
		//IL_415ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_415f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_40106: Unknown result type (might be due to invalid IL or missing references)
		//IL_40113: Unknown result type (might be due to invalid IL or missing references)
		//IL_40118: Unknown result type (might be due to invalid IL or missing references)
		//IL_40122: Unknown result type (might be due to invalid IL or missing references)
		//IL_40127: Unknown result type (might be due to invalid IL or missing references)
		//IL_40129: Unknown result type (might be due to invalid IL or missing references)
		//IL_4012e: Unknown result type (might be due to invalid IL or missing references)
		//IL_40134: Unknown result type (might be due to invalid IL or missing references)
		//IL_4013a: Unknown result type (might be due to invalid IL or missing references)
		//IL_40144: Unknown result type (might be due to invalid IL or missing references)
		//IL_40149: Unknown result type (might be due to invalid IL or missing references)
		//IL_40156: Unknown result type (might be due to invalid IL or missing references)
		//IL_40160: Unknown result type (might be due to invalid IL or missing references)
		//IL_4016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_40177: Unknown result type (might be due to invalid IL or missing references)
		//IL_40183: Unknown result type (might be due to invalid IL or missing references)
		//IL_4018e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d6c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d6ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_3972e: Unknown result type (might be due to invalid IL or missing references)
		//IL_39734: Unknown result type (might be due to invalid IL or missing references)
		//IL_3976e: Unknown result type (might be due to invalid IL or missing references)
		//IL_39793: Unknown result type (might be due to invalid IL or missing references)
		//IL_39799: Unknown result type (might be due to invalid IL or missing references)
		//IL_3979b: Unknown result type (might be due to invalid IL or missing references)
		//IL_397a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_397c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_397cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_397d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fd24: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fd29: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fd2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fd34: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d052: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d068: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c543: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c566: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c56c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c59c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c5a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c5ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a87b: Unknown result type (might be due to invalid IL or missing references)
		//IL_49be2: Unknown result type (might be due to invalid IL or missing references)
		//IL_49bed: Unknown result type (might be due to invalid IL or missing references)
		//IL_49234: Unknown result type (might be due to invalid IL or missing references)
		//IL_49243: Unknown result type (might be due to invalid IL or missing references)
		//IL_49248: Unknown result type (might be due to invalid IL or missing references)
		//IL_48875: Unknown result type (might be due to invalid IL or missing references)
		//IL_485a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_485b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_485b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_485bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_485ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_485d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_485d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_485e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_485e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_48502: Unknown result type (might be due to invalid IL or missing references)
		//IL_483a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_483aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_483af: Unknown result type (might be due to invalid IL or missing references)
		//IL_47b89: Unknown result type (might be due to invalid IL or missing references)
		//IL_47b94: Unknown result type (might be due to invalid IL or missing references)
		//IL_47b99: Unknown result type (might be due to invalid IL or missing references)
		//IL_47810: Unknown result type (might be due to invalid IL or missing references)
		//IL_47816: Unknown result type (might be due to invalid IL or missing references)
		//IL_4781b: Unknown result type (might be due to invalid IL or missing references)
		//IL_47820: Unknown result type (might be due to invalid IL or missing references)
		//IL_47826: Unknown result type (might be due to invalid IL or missing references)
		//IL_47832: Unknown result type (might be due to invalid IL or missing references)
		//IL_47837: Unknown result type (might be due to invalid IL or missing references)
		//IL_4783f: Unknown result type (might be due to invalid IL or missing references)
		//IL_47850: Unknown result type (might be due to invalid IL or missing references)
		//IL_47855: Unknown result type (might be due to invalid IL or missing references)
		//IL_4785b: Unknown result type (might be due to invalid IL or missing references)
		//IL_47866: Unknown result type (might be due to invalid IL or missing references)
		//IL_4786b: Unknown result type (might be due to invalid IL or missing references)
		//IL_46d5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_46d6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_45f78: Unknown result type (might be due to invalid IL or missing references)
		//IL_45f8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_39892: Unknown result type (might be due to invalid IL or missing references)
		//IL_39898: Unknown result type (might be due to invalid IL or missing references)
		//IL_398cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_398f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_398f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_398f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_398fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_39921: Unknown result type (might be due to invalid IL or missing references)
		//IL_3992b: Unknown result type (might be due to invalid IL or missing references)
		//IL_39930: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f48c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f4a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e286: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e28b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e2af: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d091: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d0a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a9d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a900: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a8b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a8bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_49f4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_49f72: Unknown result type (might be due to invalid IL or missing references)
		//IL_49f78: Unknown result type (might be due to invalid IL or missing references)
		//IL_49f92: Unknown result type (might be due to invalid IL or missing references)
		//IL_49f97: Unknown result type (might be due to invalid IL or missing references)
		//IL_49fa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_49fc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_49fc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_49fd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_49fee: Unknown result type (might be due to invalid IL or missing references)
		//IL_49ff3: Unknown result type (might be due to invalid IL or missing references)
		//IL_49ff8: Unknown result type (might be due to invalid IL or missing references)
		//IL_49275: Unknown result type (might be due to invalid IL or missing references)
		//IL_4927a: Unknown result type (might be due to invalid IL or missing references)
		//IL_49292: Unknown result type (might be due to invalid IL or missing references)
		//IL_492a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_492a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4877e: Unknown result type (might be due to invalid IL or missing references)
		//IL_48784: Unknown result type (might be due to invalid IL or missing references)
		//IL_47893: Unknown result type (might be due to invalid IL or missing references)
		//IL_4789e: Unknown result type (might be due to invalid IL or missing references)
		//IL_478a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4678d: Unknown result type (might be due to invalid IL or missing references)
		//IL_467a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_505ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fdbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fdc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fdc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f4bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f4ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f4cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f420: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f42b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e8d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e8db: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e8e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e8e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e8eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e8fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e8ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e904: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e90b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e910: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e93a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e944: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e949: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e2e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e2f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e2f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e301: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e306: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e311: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e316: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e32c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e332: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e358: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e35d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e372: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e37d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e382: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e387: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e392: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e3a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e3a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e3ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e3b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e3ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_4de10: Unknown result type (might be due to invalid IL or missing references)
		//IL_4de4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4de52: Unknown result type (might be due to invalid IL or missing references)
		//IL_4deaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_4deb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4deb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4da66: Unknown result type (might be due to invalid IL or missing references)
		//IL_4da9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4daa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dafc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4db06: Unknown result type (might be due to invalid IL or missing references)
		//IL_4db0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d272: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d27d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cde7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cdf3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cdf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ce0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ce1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ce21: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ce27: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ce32: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ce37: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c716: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a93f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a55c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a467: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a48c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a492: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a4ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a4b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a4bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a4d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a4db: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a4f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a4fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a500: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a0f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a118: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a11d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a153: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a159: Unknown result type (might be due to invalid IL or missing references)
		//IL_49326: Unknown result type (might be due to invalid IL or missing references)
		//IL_4932b: Unknown result type (might be due to invalid IL or missing references)
		//IL_49343: Unknown result type (might be due to invalid IL or missing references)
		//IL_49353: Unknown result type (might be due to invalid IL or missing references)
		//IL_4935a: Unknown result type (might be due to invalid IL or missing references)
		//IL_492b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_492c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_47636: Unknown result type (might be due to invalid IL or missing references)
		//IL_47647: Unknown result type (might be due to invalid IL or missing references)
		//IL_4764c: Unknown result type (might be due to invalid IL or missing references)
		//IL_47651: Unknown result type (might be due to invalid IL or missing references)
		//IL_5135b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e3fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e408: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e40d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e419: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e41e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e429: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e42e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e447: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e44d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e473: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e478: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e483: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e48e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e493: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e498: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e4a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e4b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e4ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e4bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e4c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e4cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4df23: Unknown result type (might be due to invalid IL or missing references)
		//IL_4df5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4df65: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dfa7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dfb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dfb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4db5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4db95: Unknown result type (might be due to invalid IL or missing references)
		//IL_4db9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dbdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dbe7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dbec: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d29e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d2a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c95b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c960: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c965: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c977: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c97c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c981: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c987: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c98c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c999: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c9a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aa90: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aab5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aabb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aad5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aada: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aae8: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aaff: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ab04: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ab1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ab24: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ab29: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a97e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a989: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a271: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a276: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a284: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a297: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a29c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a2a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a2b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a2ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a2bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_49378: Unknown result type (might be due to invalid IL or missing references)
		//IL_4937f: Unknown result type (might be due to invalid IL or missing references)
		//IL_492db: Unknown result type (might be due to invalid IL or missing references)
		//IL_492e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_47ad9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e707: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e70d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fe00: Unknown result type (might be due to invalid IL or missing references)
		//IL_4eae6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4eaec: Unknown result type (might be due to invalid IL or missing references)
		//IL_4eaf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4eaf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e60f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e62b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e631: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e633: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e50b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e519: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e51e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e52a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e52f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e53a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e53f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e558: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e55e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e578: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e57d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e588: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e593: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e598: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e59d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e5a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e5ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e03d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e042: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e05d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e062: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dffc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e006: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e00b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e0cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e0dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e0e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e0e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e0e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dc85: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dc8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dca5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dcaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dc32: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dc3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dc41: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d45f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d475: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d11f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d12b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c9d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c9e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c734: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c757: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c75d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c78d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c797: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c79c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c803: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c80e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c813: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c838: Unknown result type (might be due to invalid IL or missing references)
		//IL_4adb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4add7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4addd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4adf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4adfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ae0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ae21: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ae26: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ae41: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ae46: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ae4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_49ceb: Unknown result type (might be due to invalid IL or missing references)
		//IL_49cf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_49cff: Unknown result type (might be due to invalid IL or missing references)
		//IL_49d01: Unknown result type (might be due to invalid IL or missing references)
		//IL_49d06: Unknown result type (might be due to invalid IL or missing references)
		//IL_49d12: Unknown result type (might be due to invalid IL or missing references)
		//IL_49d2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_49d31: Unknown result type (might be due to invalid IL or missing references)
		//IL_49d4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_49d50: Unknown result type (might be due to invalid IL or missing references)
		//IL_49d56: Unknown result type (might be due to invalid IL or missing references)
		//IL_49d5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_49d66: Unknown result type (might be due to invalid IL or missing references)
		//IL_49d6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_493a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_493b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_49305: Unknown result type (might be due to invalid IL or missing references)
		//IL_49318: Unknown result type (might be due to invalid IL or missing references)
		//IL_5139b: Unknown result type (might be due to invalid IL or missing references)
		//IL_50811: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e998: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e9b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e9b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e9d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e9db: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e9f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ea00: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ea1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ea1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ea25: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ea2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e0ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e109: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e10e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b022: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b047: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b04d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b067: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b06c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b07a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b091: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b096: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b0b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b0b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b0bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a307: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a322: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a328: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a341: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a347: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a3ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_515f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_50683: Unknown result type (might be due to invalid IL or missing references)
		//IL_506f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_506fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_5073d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5074d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5075d: Unknown result type (might be due to invalid IL or missing references)
		//IL_50768: Unknown result type (might be due to invalid IL or missing references)
		//IL_507a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_507b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ea68: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ea6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ea3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ea53: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ea58: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ea5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e129: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e12e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c856: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c879: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c87f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c8af: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c8b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c8be: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b8f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b915: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b91b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b935: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b93a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b948: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b95f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b964: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b97f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b984: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b989: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ab90: Unknown result type (might be due to invalid IL or missing references)
		//IL_4abb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4abbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4abf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4abf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_51405: Unknown result type (might be due to invalid IL or missing references)
		//IL_50fe6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fefe: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ff0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ff12: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ff17: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ff1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ff22: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ff2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fe86: Unknown result type (might be due to invalid IL or missing references)
		//IL_4eba1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4eba6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ebb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ebbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ebc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ebc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ebcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ebd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ebde: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ebe8: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ebed: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ebf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ebfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ec01: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ec06: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d3ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d3b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d3b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d3be: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ce91: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ce97: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ce9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cea1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aeb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aed8: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aedd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4af12: Unknown result type (might be due to invalid IL or missing references)
		//IL_4af18: Unknown result type (might be due to invalid IL or missing references)
		//IL_4afad: Unknown result type (might be due to invalid IL or missing references)
		//IL_4afb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_509b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_508b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_508bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_508c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_508cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_508d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e687: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e69c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e6a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e6a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e6a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e6b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e6c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e6cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e6d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d3e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d3ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d3f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d3f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d3fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d404: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d409: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d420: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d532: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d548: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d701: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d719: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cec4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cecf: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ced4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cedc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cee1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cee7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ceec: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b122: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b148: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b14d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b182: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b188: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b21d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b222: Unknown result type (might be due to invalid IL or missing references)
		//IL_5106c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5109d: Unknown result type (might be due to invalid IL or missing references)
		//IL_510a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_510a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_50f4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_50f50: Unknown result type (might be due to invalid IL or missing references)
		//IL_50f5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_50f5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_50f64: Unknown result type (might be due to invalid IL or missing references)
		//IL_509f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_50a02: Unknown result type (might be due to invalid IL or missing references)
		//IL_50a07: Unknown result type (might be due to invalid IL or missing references)
		//IL_50a0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fedd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ec40: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ec66: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ec6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ec70: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ec77: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d576: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d58c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d1d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d1dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d1e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d1e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b9f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ba16: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ba1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ba4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ba52: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ec8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ec92: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ec97: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d20a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d215: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d21a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d222: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d227: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d22d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d232: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ad4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_514a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b2f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ecc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ecd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bbb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b511: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b30c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b31f: Unknown result type (might be due to invalid IL or missing references)
		//IL_500bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_500c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_500c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_500cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_500d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_500d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_500df: Unknown result type (might be due to invalid IL or missing references)
		//IL_500e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_500ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_500f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_500f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_500fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_50104: Unknown result type (might be due to invalid IL or missing references)
		//IL_5010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_50115: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ef30: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b354: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b359: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b35e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ee13: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ee18: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ee24: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ee33: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bbf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bc0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bc0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bc26: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bc3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bc3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bc44: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bc49: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bc4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bc5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bc62: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bc7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bc82: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bc8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bc9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bce1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bce7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ed08: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ed0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ed13: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b599: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b59e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b5a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b5b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b5ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b5bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b5d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b5d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b5dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b5e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b397: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b3a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_50ae6: Unknown result type (might be due to invalid IL or missing references)
		//IL_50af2: Unknown result type (might be due to invalid IL or missing references)
		//IL_50b09: Unknown result type (might be due to invalid IL or missing references)
		//IL_50b0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_50b13: Unknown result type (might be due to invalid IL or missing references)
		//IL_50b25: Unknown result type (might be due to invalid IL or missing references)
		//IL_50b4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_50b52: Unknown result type (might be due to invalid IL or missing references)
		//IL_50b58: Unknown result type (might be due to invalid IL or missing references)
		//IL_50b63: Unknown result type (might be due to invalid IL or missing references)
		//IL_50b71: Unknown result type (might be due to invalid IL or missing references)
		//IL_50b77: Unknown result type (might be due to invalid IL or missing references)
		//IL_50bd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_50be2: Unknown result type (might be due to invalid IL or missing references)
		//IL_50be7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4efc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4efc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4efcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4efd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4efd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4efde: Unknown result type (might be due to invalid IL or missing references)
		//IL_4efe4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4efea: Unknown result type (might be due to invalid IL or missing references)
		//IL_4eff0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4eff6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f001: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f006: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f00c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f012: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f018: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f01d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f023: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f029: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f02f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f035: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f046: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f04b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b3b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b469: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b47a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b40f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b420: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f087: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f08d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ed60: Unknown result type (might be due to invalid IL or missing references)
		//IL_4eda1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4edab: Unknown result type (might be due to invalid IL or missing references)
		//IL_50d39: Unknown result type (might be due to invalid IL or missing references)
		//IL_50d48: Unknown result type (might be due to invalid IL or missing references)
		//IL_50d4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_50d58: Unknown result type (might be due to invalid IL or missing references)
		//IL_50d6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_50d70: Unknown result type (might be due to invalid IL or missing references)
		//IL_50d75: Unknown result type (might be due to invalid IL or missing references)
		//IL_50d87: Unknown result type (might be due to invalid IL or missing references)
		//IL_50db3: Unknown result type (might be due to invalid IL or missing references)
		//IL_50db8: Unknown result type (might be due to invalid IL or missing references)
		//IL_50dbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_50dc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_50dd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_50ddd: Unknown result type (might be due to invalid IL or missing references)
		//IL_50e36: Unknown result type (might be due to invalid IL or missing references)
		//IL_50e3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f0aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f0b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4edd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b648: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b65a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b67e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b690: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b6b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_511cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_511db: Unknown result type (might be due to invalid IL or missing references)
		//IL_511f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_511f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_511fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_51214: Unknown result type (might be due to invalid IL or missing references)
		//IL_5123c: Unknown result type (might be due to invalid IL or missing references)
		//IL_51241: Unknown result type (might be due to invalid IL or missing references)
		//IL_51247: Unknown result type (might be due to invalid IL or missing references)
		//IL_51252: Unknown result type (might be due to invalid IL or missing references)
		//IL_51260: Unknown result type (might be due to invalid IL or missing references)
		//IL_51266: Unknown result type (might be due to invalid IL or missing references)
		//IL_501e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b720: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b6cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b73a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b6e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f0e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f0fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f102: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f11b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f121: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f134: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f148: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f14d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f152: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b754: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b703: Unknown result type (might be due to invalid IL or missing references)
		//IL_50256: Unknown result type (might be due to invalid IL or missing references)
		//IL_50266: Unknown result type (might be due to invalid IL or missing references)
		//IL_5026b: Unknown result type (might be due to invalid IL or missing references)
		//IL_50270: Unknown result type (might be due to invalid IL or missing references)
		//IL_50275: Unknown result type (might be due to invalid IL or missing references)
		//IL_5027c: Unknown result type (might be due to invalid IL or missing references)
		//IL_50287: Unknown result type (might be due to invalid IL or missing references)
		//IL_5028c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5022c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b76e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b831: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b844: Unknown result type (might be due to invalid IL or missing references)
		if (aiStyle == 0)
		{
			if (Main.netMode != 1)
			{
				for (int i = 0; i < 255; i++)
				{
					if (Main.player[i].active && Main.player[i].talkNPC == whoAmI)
					{
						if (type == 589)
						{
							AI_000_TransformBoundNPC(i, 588);
						}
						if (type == 105)
						{
							AI_000_TransformBoundNPC(i, 107);
						}
						if (type == 106)
						{
							AI_000_TransformBoundNPC(i, 108);
						}
						if (type == 123)
						{
							AI_000_TransformBoundNPC(i, 124);
						}
						if (type == 354)
						{
							AI_000_TransformBoundNPC(i, 353);
						}
						if (type == 376)
						{
							AI_000_TransformBoundNPC(i, 369);
						}
						if (type == 579)
						{
							AI_000_TransformBoundNPC(i, 550);
						}
					}
				}
			}
			if (type != 376 && type != 579)
			{
				TargetClosest();
				spriteDirection = direction;
			}
			if (type == 376 || type == 579)
			{
				if (wet || Main.tile[(int)(base.Center.X / 16f), (int)(position.Y - 4f) / 16].liquid > 0)
				{
					velocity.Y = -0.4f;
					int num = 1;
					if (base.Center.X / 16f > (float)(Main.maxTilesX / 2))
					{
						num = -1;
					}
					int num718 = 12;
					int num829 = (int)base.Center.X / 16;
					int j = (int)base.Center.Y / 16;
					bool flag = false;
					if (num > 0)
					{
						for (int k = num829; k < num829 + num718; k++)
						{
							if (WorldGen.SolidTile(k, j))
							{
								flag = true;
							}
						}
					}
					else
					{
						for (int l = num829; l > num829 - num718; l--)
						{
							if (WorldGen.SolidTile(l, j))
							{
								flag = true;
							}
						}
					}
					if (type == 579)
					{
						flag = true;
					}
					if (flag)
					{
						velocity.X *= 0.99f;
						if ((double)velocity.X > -0.01 && (double)velocity.X < 0.01)
						{
							velocity.X = 0f;
						}
						return;
					}
					velocity.X += (float)num * 0.01f;
					if (velocity.X > 0.2f)
					{
						velocity.X *= 0.95f;
					}
					if (velocity.X < -0.2f)
					{
						velocity.X *= 0.95f;
					}
				}
				else
				{
					velocity.X *= 0.93f;
					if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
					{
						velocity.X = 0f;
					}
				}
			}
			else
			{
				velocity.X *= 0.93f;
				if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
				{
					velocity.X = 0f;
				}
			}
			return;
		}
		if (aiStyle == 1)
		{
			AI_001_Slimes();
			return;
		}
		if (aiStyle == 2)
		{
			AI_002_FloatingEye();
			return;
		}
		if (aiStyle == 3)
		{
			AI_003_Fighters();
			return;
		}
		Color newColor;
		if (aiStyle == 4)
		{
			bool flag24 = false;
			if (Main.expertMode && (double)life < (double)lifeMax * 0.12)
			{
				flag24 = true;
			}
			bool flag35 = false;
			if (Main.expertMode && (double)life < (double)lifeMax * 0.04)
			{
				flag35 = true;
			}
			float num940 = 20f;
			if (flag35)
			{
				num940 = 10f;
			}
			if (target < 0 || target == 255 || Main.player[target].dead || !Main.player[target].active)
			{
				TargetClosest();
			}
			bool dead = Main.player[target].dead;
			float num1051 = position.X + (float)(width / 2) - Main.player[target].position.X - (float)(Main.player[target].width / 2);
			float num1162 = position.Y + (float)height - 59f - Main.player[target].position.Y - (float)(Main.player[target].height / 2);
			float num1273 = (float)Math.Atan2(num1162, num1051) + 1.57f;
			if (num1273 < 0f)
			{
				num1273 += 6.283f;
			}
			else if ((double)num1273 > 6.283)
			{
				num1273 -= 6.283f;
			}
			float num1384 = 0f;
			if (this.ai[0] == 0f && this.ai[1] == 0f)
			{
				num1384 = 0.02f;
			}
			if (this.ai[0] == 0f && this.ai[1] == 2f && this.ai[2] > 40f)
			{
				num1384 = 0.05f;
			}
			if (this.ai[0] == 3f && this.ai[1] == 0f)
			{
				num1384 = 0.05f;
			}
			if (this.ai[0] == 3f && this.ai[1] == 2f && this.ai[2] > 40f)
			{
				num1384 = 0.08f;
			}
			if (this.ai[0] == 3f && this.ai[1] == 4f && this.ai[2] > num940)
			{
				num1384 = 0.15f;
			}
			if (this.ai[0] == 3f && this.ai[1] == 5f)
			{
				num1384 = 0.05f;
			}
			if (Main.expertMode)
			{
				num1384 *= 1.5f;
			}
			if (flag35 && Main.expertMode)
			{
				num1384 = 0f;
			}
			if (rotation < num1273)
			{
				if ((double)(num1273 - rotation) > 3.1415)
				{
					rotation -= num1384;
				}
				else
				{
					rotation += num1384;
				}
			}
			else if (rotation > num1273)
			{
				if ((double)(rotation - num1273) > 3.1415)
				{
					rotation += num1384;
				}
				else
				{
					rotation -= num1384;
				}
			}
			if (rotation > num1273 - num1384 && rotation < num1273 + num1384)
			{
				rotation = num1273;
			}
			if (rotation < 0f)
			{
				rotation += 6.283f;
			}
			else if ((double)rotation > 6.283)
			{
				rotation -= 6.283f;
			}
			if (rotation > num1273 - num1384 && rotation < num1273 + num1384)
			{
				rotation = num1273;
			}
			if (Main.rand.Next(5) == 0)
			{
				Vector2 val = new Vector2(position.X, position.Y + (float)height * 0.25f);
				int num1606 = width;
				int num1607 = (int)((float)height * 0.5f);
				float x5 = velocity.X;
				newColor = default(Color);
				int num1495 = Dust.NewDust(val, num1606, num1607, 5, x5, 2f, 0, newColor);
				Main.dust[num1495].velocity.X *= 0.5f;
				Main.dust[num1495].velocity.Y *= 0.1f;
			}
			reflectsProjectiles = false;
			if (Main.IsItDay() || dead)
			{
				velocity.Y -= 0.04f;
				EncourageDespawn(10);
				return;
			}
			if (this.ai[0] == 0f)
			{
				if (this.ai[1] == 0f)
				{
					float num2 = 5f;
					float num113 = 0.04f;
					if (Main.expertMode)
					{
						num113 = 0.15f;
						num2 = 7f;
					}
					if (Main.getGoodWorld)
					{
						num113 += 0.05f;
						num2 += 1f;
					}
					Vector2 vector = default(Vector2);
					((Vector2)(ref vector))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num224 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector.X;
					float num335 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 200f - vector.Y;
					float num446 = (float)Math.Sqrt(num224 * num224 + num335 * num335);
					float num557 = num446;
					num446 = num2 / num446;
					num224 *= num446;
					num335 *= num446;
					if (velocity.X < num224)
					{
						velocity.X += num113;
						if (velocity.X < 0f && num224 > 0f)
						{
							velocity.X += num113;
						}
					}
					else if (velocity.X > num224)
					{
						velocity.X -= num113;
						if (velocity.X > 0f && num224 < 0f)
						{
							velocity.X -= num113;
						}
					}
					if (velocity.Y < num335)
					{
						velocity.Y += num113;
						if (velocity.Y < 0f && num335 > 0f)
						{
							velocity.Y += num113;
						}
					}
					else if (velocity.Y > num335)
					{
						velocity.Y -= num113;
						if (velocity.Y > 0f && num335 < 0f)
						{
							velocity.Y -= num113;
						}
					}
					this.ai[2] += 1f;
					float num668 = 600f;
					if (Main.expertMode)
					{
						num668 *= 0.35f;
					}
					if (this.ai[2] >= num668)
					{
						this.ai[1] = 1f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						target = 255;
						netUpdate = true;
					}
					else if ((position.Y + (float)height < Main.player[target].position.Y && num557 < 500f) || (Main.expertMode && num557 < 500f))
					{
						if (!Main.player[target].dead)
						{
							this.ai[3] += 1f;
						}
						float num685 = 110f;
						if (Main.expertMode)
						{
							num685 *= 0.4f;
						}
						if (Main.getGoodWorld)
						{
							num685 *= 0.8f;
						}
						if (this.ai[3] >= num685)
						{
							this.ai[3] = 0f;
							rotation = num1273;
							float num696 = 5f;
							if (Main.expertMode)
							{
								num696 = 6f;
							}
							float num707 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector.X;
							float num719 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector.Y;
							float num730 = (float)Math.Sqrt(num707 * num707 + num719 * num719);
							num730 = num696 / num730;
							Vector2 vector112 = vector;
							Vector2 vector223 = default(Vector2);
							vector223.X = num707 * num730;
							vector223.Y = num719 * num730;
							vector112.X += vector223.X * 10f;
							vector112.Y += vector223.Y * 10f;
							if (Main.netMode != 1)
							{
								int num741 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)vector112.X, (int)vector112.Y, 5);
								Main.npc[num741].velocity.X = vector223.X;
								Main.npc[num741].velocity.Y = vector223.Y;
								if (Main.netMode == 2 && num741 < 200)
								{
									NetMessage.SendData(23, -1, -1, null, num741);
								}
							}
							SoundEngine.PlaySound(3, (int)vector112.X, (int)vector112.Y);
							for (int m = 0; m < 10; m++)
							{
								Vector2 val2 = vector112;
								float speedX3 = vector223.X * 0.4f;
								float speedY2 = vector223.Y * 0.4f;
								newColor = default(Color);
								Dust.NewDust(val2, 20, 20, 5, speedX3, speedY2, 0, newColor);
							}
						}
					}
				}
				else if (this.ai[1] == 1f)
				{
					rotation = num1273;
					float num752 = 6f;
					if (Main.expertMode)
					{
						num752 = 7f;
					}
					if (Main.getGoodWorld)
					{
						num752 += 1f;
					}
					Vector2 vector252 = default(Vector2);
					((Vector2)(ref vector252))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num763 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector252.X;
					float num774 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector252.Y;
					float num785 = (float)Math.Sqrt(num763 * num763 + num774 * num774);
					num785 = num752 / num785;
					velocity.X = num763 * num785;
					velocity.Y = num774 * num785;
					this.ai[1] = 2f;
					netUpdate = true;
					if (netSpam > 10)
					{
						netSpam = 10;
					}
				}
				else if (this.ai[1] == 2f)
				{
					this.ai[2] += 1f;
					if (this.ai[2] >= 40f)
					{
						velocity *= 0.98f;
						if (Main.expertMode)
						{
							velocity *= 0.985f;
						}
						if (Main.getGoodWorld)
						{
							velocity *= 0.99f;
						}
						if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
						{
							velocity.X = 0f;
						}
						if ((double)velocity.Y > -0.1 && (double)velocity.Y < 0.1)
						{
							velocity.Y = 0f;
						}
					}
					else
					{
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
					}
					int num796 = 150;
					if (Main.expertMode)
					{
						num796 = 100;
					}
					if (Main.getGoodWorld)
					{
						num796 -= 15;
					}
					if (this.ai[2] >= (float)num796)
					{
						this.ai[3] += 1f;
						this.ai[2] = 0f;
						target = 255;
						rotation = num1273;
						if (this.ai[3] >= 3f)
						{
							this.ai[1] = 0f;
							this.ai[3] = 0f;
						}
						else
						{
							this.ai[1] = 1f;
						}
					}
				}
				float num807 = 0.5f;
				if (Main.expertMode)
				{
					num807 = 0.65f;
				}
				if ((float)life < (float)lifeMax * num807)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
					if (netSpam > 10)
					{
						netSpam = 10;
					}
				}
				return;
			}
			if (this.ai[0] == 1f || this.ai[0] == 2f)
			{
				if (this.ai[0] == 1f || this.ai[3] == 1f)
				{
					this.ai[2] += 0.005f;
					if ((double)this.ai[2] > 0.5)
					{
						this.ai[2] = 0.5f;
					}
				}
				else
				{
					this.ai[2] -= 0.005f;
					if (this.ai[2] < 0f)
					{
						this.ai[2] = 0f;
					}
				}
				rotation += this.ai[2];
				this.ai[1] += 1f;
				if (Main.getGoodWorld)
				{
					reflectsProjectiles = true;
				}
				int num818 = 20;
				if (Main.getGoodWorld && life < lifeMax / 3)
				{
					num818 = 10;
				}
				if (Main.expertMode && this.ai[1] % (float)num818 == 0f)
				{
					float num830 = 5f;
					Vector2 vector263 = default(Vector2);
					((Vector2)(ref vector263))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num841 = Main.rand.Next(-200, 200);
					float num852 = Main.rand.Next(-200, 200);
					if (Main.getGoodWorld)
					{
						num841 *= 3f;
						num852 *= 3f;
					}
					float num863 = (float)Math.Sqrt(num841 * num841 + num852 * num852);
					num863 = num830 / num863;
					Vector2 vector274 = vector263;
					Vector2 vector285 = default(Vector2);
					vector285.X = num841 * num863;
					vector285.Y = num852 * num863;
					vector274.X += vector285.X * 10f;
					vector274.Y += vector285.Y * 10f;
					if (Main.netMode != 1)
					{
						int num874 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)vector274.X, (int)vector274.Y, 5);
						Main.npc[num874].velocity.X = vector285.X;
						Main.npc[num874].velocity.Y = vector285.Y;
						if (Main.netMode == 2 && num874 < 200)
						{
							NetMessage.SendData(23, -1, -1, null, num874);
						}
					}
					for (int n = 0; n < 10; n++)
					{
						Vector2 val3 = vector274;
						float speedX4 = vector285.X * 0.4f;
						float speedY3 = vector285.Y * 0.4f;
						newColor = default(Color);
						Dust.NewDust(val3, 20, 20, 5, speedX4, speedY3, 0, newColor);
					}
				}
				if (this.ai[1] >= 100f)
				{
					if (this.ai[3] == 1f)
					{
						this.ai[3] = 0f;
						this.ai[1] = 0f;
					}
					else
					{
						this.ai[0] += 1f;
						this.ai[1] = 0f;
						if (this.ai[0] == 3f)
						{
							this.ai[2] = 0f;
						}
						else
						{
							SoundEngine.PlaySound(3, (int)position.X, (int)position.Y);
							for (int num885 = 0; num885 < 2; num885++)
							{
								Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 8);
								Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 7);
								Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 6);
							}
							for (int num896 = 0; num896 < 20; num896++)
							{
								Vector2 val4 = position;
								int num1608 = width;
								int num1609 = height;
								float speedX5 = (float)Main.rand.Next(-30, 31) * 0.2f;
								float speedY4 = (float)Main.rand.Next(-30, 31) * 0.2f;
								newColor = default(Color);
								Dust.NewDust(val4, num1608, num1609, 5, speedX5, speedY4, 0, newColor);
							}
							SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
						}
					}
				}
				Vector2 val5 = position;
				int num1610 = width;
				int num1611 = height;
				float speedX6 = (float)Main.rand.Next(-30, 31) * 0.2f;
				float speedY5 = (float)Main.rand.Next(-30, 31) * 0.2f;
				newColor = default(Color);
				Dust.NewDust(val5, num1610, num1611, 5, speedX6, speedY5, 0, newColor);
				velocity.X *= 0.98f;
				velocity.Y *= 0.98f;
				if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
				{
					velocity.X = 0f;
				}
				if ((double)velocity.Y > -0.1 && (double)velocity.Y < 0.1)
				{
					velocity.Y = 0f;
				}
				return;
			}
			defense = 0;
			int num907 = 23;
			int num918 = 18;
			if (Main.expertMode)
			{
				if (flag24)
				{
					defense = -15;
				}
				if (flag35)
				{
					num918 = 20;
					defense = -30;
				}
			}
			damage = GetAttackDamage_LerpBetweenFinalValues(num907, num918);
			damage = GetAttackDamage_ScaledByStrength(damage);
			if (this.ai[1] == 0f && flag24)
			{
				this.ai[1] = 5f;
			}
			if (this.ai[1] == 0f)
			{
				float num929 = 6f;
				float num941 = 0.07f;
				Vector2 vector296 = default(Vector2);
				((Vector2)(ref vector296))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num952 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector296.X;
				float num963 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 120f - vector296.Y;
				float num974 = (float)Math.Sqrt(num952 * num952 + num963 * num963);
				if (num974 > 400f && Main.expertMode)
				{
					num929 += 1f;
					num941 += 0.05f;
					if (num974 > 600f)
					{
						num929 += 1f;
						num941 += 0.05f;
						if (num974 > 800f)
						{
							num929 += 1f;
							num941 += 0.05f;
						}
					}
				}
				if (Main.getGoodWorld)
				{
					num929 += 1f;
					num941 += 0.1f;
				}
				num974 = num929 / num974;
				num952 *= num974;
				num963 *= num974;
				if (velocity.X < num952)
				{
					velocity.X += num941;
					if (velocity.X < 0f && num952 > 0f)
					{
						velocity.X += num941;
					}
				}
				else if (velocity.X > num952)
				{
					velocity.X -= num941;
					if (velocity.X > 0f && num952 < 0f)
					{
						velocity.X -= num941;
					}
				}
				if (velocity.Y < num963)
				{
					velocity.Y += num941;
					if (velocity.Y < 0f && num963 > 0f)
					{
						velocity.Y += num941;
					}
				}
				else if (velocity.Y > num963)
				{
					velocity.Y -= num941;
					if (velocity.Y > 0f && num963 < 0f)
					{
						velocity.Y -= num941;
					}
				}
				this.ai[2] += 1f;
				if (this.ai[2] >= 200f)
				{
					this.ai[1] = 1f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					if (Main.expertMode && (double)life < (double)lifeMax * 0.35)
					{
						this.ai[1] = 3f;
					}
					target = 255;
					netUpdate = true;
				}
				if (Main.expertMode && flag35)
				{
					TargetClosest();
					netUpdate = true;
					this.ai[1] = 3f;
					this.ai[2] = 0f;
					this.ai[3] -= 1000f;
				}
			}
			else if (this.ai[1] == 1f)
			{
				SoundEngine.PlaySound(36, (int)position.X, (int)position.Y, 0);
				rotation = num1273;
				float num985 = 6.8f;
				if (Main.expertMode && this.ai[3] == 1f)
				{
					num985 *= 1.15f;
				}
				if (Main.expertMode && this.ai[3] == 2f)
				{
					num985 *= 1.3f;
				}
				if (Main.getGoodWorld)
				{
					num985 *= 1.2f;
				}
				Vector2 vector307 = default(Vector2);
				((Vector2)(ref vector307))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num996 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector307.X;
				float num1007 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector307.Y;
				float num1018 = (float)Math.Sqrt(num996 * num996 + num1007 * num1007);
				num1018 = num985 / num1018;
				velocity.X = num996 * num1018;
				velocity.Y = num1007 * num1018;
				this.ai[1] = 2f;
				netUpdate = true;
				if (netSpam > 10)
				{
					netSpam = 10;
				}
			}
			else if (this.ai[1] == 2f)
			{
				float num1029 = 40f;
				this.ai[2] += 1f;
				if (Main.expertMode)
				{
					num1029 = 50f;
				}
				if (this.ai[2] >= num1029)
				{
					velocity *= 0.97f;
					if (Main.expertMode)
					{
						velocity *= 0.98f;
					}
					if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
					{
						velocity.X = 0f;
					}
					if ((double)velocity.Y > -0.1 && (double)velocity.Y < 0.1)
					{
						velocity.Y = 0f;
					}
				}
				else
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
				}
				int num1040 = 130;
				if (Main.expertMode)
				{
					num1040 = 90;
				}
				if (this.ai[2] >= (float)num1040)
				{
					this.ai[3] += 1f;
					this.ai[2] = 0f;
					target = 255;
					rotation = num1273;
					if (this.ai[3] >= 3f)
					{
						this.ai[1] = 0f;
						this.ai[3] = 0f;
						if (Main.expertMode && Main.netMode != 1 && (double)life < (double)lifeMax * 0.5)
						{
							this.ai[1] = 3f;
							this.ai[3] += Main.rand.Next(1, 4);
						}
						netUpdate = true;
						if (netSpam > 10)
						{
							netSpam = 10;
						}
					}
					else
					{
						this.ai[1] = 1f;
					}
				}
			}
			else if (this.ai[1] == 3f)
			{
				if (this.ai[3] == 4f && flag24 && base.Center.Y > Main.player[target].Center.Y)
				{
					TargetClosest();
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
					if (netSpam > 10)
					{
						netSpam = 10;
					}
				}
				else if (Main.netMode != 1)
				{
					TargetClosest();
					float num1052 = 20f;
					Vector2 vector2 = default(Vector2);
					((Vector2)(ref vector2))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num1063 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector2.X;
					float num1074 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector2.Y;
					float num1085 = Math.Abs(Main.player[target].velocity.X) + Math.Abs(Main.player[target].velocity.Y) / 4f;
					num1085 += 10f - num1085;
					if (num1085 < 5f)
					{
						num1085 = 5f;
					}
					if (num1085 > 15f)
					{
						num1085 = 15f;
					}
					if (this.ai[2] == -1f && !flag35)
					{
						num1085 *= 4f;
						num1052 *= 1.3f;
					}
					if (flag35)
					{
						num1085 *= 2f;
					}
					num1063 -= Main.player[target].velocity.X * num1085;
					num1074 -= Main.player[target].velocity.Y * num1085 / 4f;
					num1063 *= 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
					num1074 *= 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
					if (flag35)
					{
						num1063 *= 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
						num1074 *= 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					float num1096 = (float)Math.Sqrt(num1063 * num1063 + num1074 * num1074);
					float num1107 = num1096;
					num1096 = num1052 / num1096;
					velocity.X = num1063 * num1096;
					velocity.Y = num1074 * num1096;
					velocity.X += (float)Main.rand.Next(-20, 21) * 0.1f;
					velocity.Y += (float)Main.rand.Next(-20, 21) * 0.1f;
					if (flag35)
					{
						velocity.X += (float)Main.rand.Next(-50, 51) * 0.1f;
						velocity.Y += (float)Main.rand.Next(-50, 51) * 0.1f;
						float num1118 = Math.Abs(velocity.X);
						float num1129 = Math.Abs(velocity.Y);
						if (base.Center.X > Main.player[target].Center.X)
						{
							num1129 *= -1f;
						}
						if (base.Center.Y > Main.player[target].Center.Y)
						{
							num1118 *= -1f;
						}
						velocity.X = num1129 + velocity.X;
						velocity.Y = num1118 + velocity.Y;
						((Vector2)(ref velocity)).Normalize();
						velocity *= num1052;
						velocity.X += (float)Main.rand.Next(-20, 21) * 0.1f;
						velocity.Y += (float)Main.rand.Next(-20, 21) * 0.1f;
					}
					else if (num1107 < 100f)
					{
						if (Math.Abs(velocity.X) > Math.Abs(velocity.Y))
						{
							float num1140 = Math.Abs(velocity.X);
							float num1151 = Math.Abs(velocity.Y);
							if (base.Center.X > Main.player[target].Center.X)
							{
								num1151 *= -1f;
							}
							if (base.Center.Y > Main.player[target].Center.Y)
							{
								num1140 *= -1f;
							}
							velocity.X = num1151;
							velocity.Y = num1140;
						}
					}
					else if (Math.Abs(velocity.X) > Math.Abs(velocity.Y))
					{
						float num1163 = (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) / 2f;
						float num1174 = num1163;
						if (base.Center.X > Main.player[target].Center.X)
						{
							num1174 *= -1f;
						}
						if (base.Center.Y > Main.player[target].Center.Y)
						{
							num1163 *= -1f;
						}
						velocity.X = num1174;
						velocity.Y = num1163;
					}
					this.ai[1] = 4f;
					netUpdate = true;
					if (netSpam > 10)
					{
						netSpam = 10;
					}
				}
			}
			else if (this.ai[1] == 4f)
			{
				if (this.ai[2] == 0f)
				{
					SoundEngine.PlaySound(36, (int)position.X, (int)position.Y, -1);
				}
				float num1185 = num940;
				this.ai[2] += 1f;
				if (this.ai[2] == num1185 && Vector2.Distance(position, Main.player[target].position) < 200f)
				{
					this.ai[2] -= 1f;
				}
				if (this.ai[2] >= num1185)
				{
					velocity *= 0.95f;
					if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
					{
						velocity.X = 0f;
					}
					if ((double)velocity.Y > -0.1 && (double)velocity.Y < 0.1)
					{
						velocity.Y = 0f;
					}
				}
				else
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
				}
				float num1196 = num1185 + 13f;
				if (this.ai[2] >= num1196)
				{
					netUpdate = true;
					if (netSpam > 10)
					{
						netSpam = 10;
					}
					this.ai[3] += 1f;
					this.ai[2] = 0f;
					if (this.ai[3] >= 5f)
					{
						this.ai[1] = 0f;
						this.ai[3] = 0f;
						if (target >= 0 && Main.getGoodWorld && Collision.CanHit(position, width, height, Main.player[target].position, width, height))
						{
							SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
							this.ai[0] = 2f;
							this.ai[1] = 0f;
							this.ai[2] = 0f;
							this.ai[3] = 1f;
							netUpdate = true;
						}
					}
					else
					{
						this.ai[1] = 3f;
					}
				}
			}
			else if (this.ai[1] == 5f)
			{
				float num1207 = 600f;
				float num1218 = 9f;
				float num1229 = 0.3f;
				Vector2 vector13 = default(Vector2);
				((Vector2)(ref vector13))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1240 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector13.X;
				float num1251 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) + num1207 - vector13.Y;
				float num1262 = (float)Math.Sqrt(num1240 * num1240 + num1251 * num1251);
				num1262 = num1218 / num1262;
				num1240 *= num1262;
				num1251 *= num1262;
				if (velocity.X < num1240)
				{
					velocity.X += num1229;
					if (velocity.X < 0f && num1240 > 0f)
					{
						velocity.X += num1229;
					}
				}
				else if (velocity.X > num1240)
				{
					velocity.X -= num1229;
					if (velocity.X > 0f && num1240 < 0f)
					{
						velocity.X -= num1229;
					}
				}
				if (velocity.Y < num1251)
				{
					velocity.Y += num1229;
					if (velocity.Y < 0f && num1251 > 0f)
					{
						velocity.Y += num1229;
					}
				}
				else if (velocity.Y > num1251)
				{
					velocity.Y -= num1229;
					if (velocity.Y > 0f && num1251 < 0f)
					{
						velocity.Y -= num1229;
					}
				}
				this.ai[2] += 1f;
				if (this.ai[2] >= 70f)
				{
					TargetClosest();
					this.ai[1] = 3f;
					this.ai[2] = -1f;
					this.ai[3] = Main.rand.Next(-3, 1);
					netUpdate = true;
				}
			}
			if (flag35 && this.ai[1] == 5f)
			{
				this.ai[1] = 3f;
			}
			return;
		}
		if (aiStyle == 5)
		{
			AI_005_EaterOfSouls();
			return;
		}
		if (aiStyle == 6)
		{
			AI_006_Worms();
			return;
		}
		if (aiStyle == 7)
		{
			AI_007_TownEntities();
			return;
		}
		if (aiStyle == 8)
		{
			TargetClosest();
			velocity.X *= 0.93f;
			if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
			{
				velocity.X = 0f;
			}
			if (this.ai[0] == 0f)
			{
				this.ai[0] = 500f;
			}
			if (type == 172)
			{
				if (alpha < 255)
				{
					alpha++;
				}
				if (justHit)
				{
					alpha = 0;
				}
			}
			if (this.ai[2] != 0f && this.ai[3] != 0f)
			{
				position += netOffset;
				if (type == 172)
				{
					alpha = 255;
				}
				SoundEngine.PlaySound(in SoundID.Item8, position);
				for (int num1274 = 0; num1274 < 50; num1274++)
				{
					if (type == 29 || type == 45)
					{
						Vector2 val6 = new Vector2(position.X, position.Y);
						int num1612 = width;
						int num1613 = height;
						newColor = default(Color);
						int num1285 = Dust.NewDust(val6, num1612, num1613, 27, 0f, 0f, 100, newColor, Main.rand.Next(1, 3));
						Dust dust12 = Main.dust[num1285];
						Dust dust87 = dust12;
						dust87.velocity *= 3f;
						if (Main.dust[num1285].scale > 1f)
						{
							Main.dust[num1285].noGravity = true;
						}
					}
					else if (type == 32)
					{
						Vector2 val7 = new Vector2(position.X, position.Y);
						int num1614 = width;
						int num1615 = height;
						newColor = default(Color);
						int num1296 = Dust.NewDust(val7, num1614, num1615, 172, 0f, 0f, 100, newColor, 1.5f);
						Dust dust13 = Main.dust[num1296];
						Dust dust87 = dust13;
						dust87.velocity *= 3f;
						Main.dust[num1296].noGravity = true;
					}
					else if (type == 283 || type == 284)
					{
						Vector2 val8 = new Vector2(position.X, position.Y);
						int num1616 = width;
						int num1617 = height;
						newColor = default(Color);
						int num1307 = Dust.NewDust(val8, num1616, num1617, 173, 0f, 0f, 0, newColor);
						Dust dust14 = Main.dust[num1307];
						Dust dust87 = dust14;
						dust87.velocity *= 2f;
						Main.dust[num1307].scale = 1.4f;
					}
					else if (type == 285 || type == 286)
					{
						Vector2 val9 = new Vector2(position.X, position.Y);
						int num1618 = width;
						int num1619 = height;
						newColor = default(Color);
						int num1318 = Dust.NewDust(val9, num1618, num1619, 174, 0f, 0f, 100, newColor, 1.5f);
						Dust dust15 = Main.dust[num1318];
						Dust dust87 = dust15;
						dust87.velocity *= 3f;
						Main.dust[num1318].noGravity = true;
					}
					else if (type == 281 || type == 282)
					{
						Vector2 val10 = new Vector2(position.X, position.Y);
						int num1620 = width;
						int num1621 = height;
						newColor = default(Color);
						int num1329 = Dust.NewDust(val10, num1620, num1621, 175, 0f, 0f, 100, newColor, 1.5f);
						Dust dust16 = Main.dust[num1329];
						Dust dust87 = dust16;
						dust87.velocity *= 3f;
						Main.dust[num1329].noGravity = true;
					}
					else if (type == 172)
					{
						Vector2 val11 = new Vector2(position.X, position.Y);
						int num1622 = width;
						int num1623 = height;
						newColor = default(Color);
						int num1340 = Dust.NewDust(val11, num1622, num1623, 106, 0f, 0f, 100, newColor, 2.5f);
						Dust dust17 = Main.dust[num1340];
						Dust dust87 = dust17;
						dust87.velocity *= 3f;
						Main.dust[num1340].noGravity = true;
					}
					else if (type == 533)
					{
						Vector2 val12 = position;
						int num1624 = width;
						int num1625 = height;
						newColor = default(Color);
						int num1351 = Dust.NewDust(val12, num1624, num1625, 27, 0f, 0f, 100, newColor, 2.5f);
						Dust dust18 = Main.dust[num1351];
						Dust dust87 = dust18;
						dust87.velocity *= 3f;
						Main.dust[num1351].noGravity = true;
					}
					else
					{
						Vector2 val13 = new Vector2(position.X, position.Y);
						int num1626 = width;
						int num1627 = height;
						newColor = default(Color);
						int num1362 = Dust.NewDust(val13, num1626, num1627, 6, 0f, 0f, 100, newColor, 2.5f);
						Dust dust19 = Main.dust[num1362];
						Dust dust87 = dust19;
						dust87.velocity *= 3f;
						Main.dust[num1362].noGravity = true;
					}
				}
				position -= netOffset;
				position.X = this.ai[2] * 16f - (float)(width / 2) + 8f;
				position.Y = this.ai[3] * 16f - (float)height;
				netOffset *= 0f;
				velocity.X = 0f;
				velocity.Y = 0f;
				this.ai[2] = 0f;
				this.ai[3] = 0f;
				SoundEngine.PlaySound(in SoundID.Item8, position);
				for (int num1373 = 0; num1373 < 50; num1373++)
				{
					if (type == 29 || type == 45)
					{
						Vector2 val14 = new Vector2(position.X, position.Y);
						int num1628 = width;
						int num1629 = height;
						newColor = default(Color);
						int num1385 = Dust.NewDust(val14, num1628, num1629, 27, 0f, 0f, 100, newColor, Main.rand.Next(1, 3));
						Dust dust4 = Main.dust[num1385];
						Dust dust87 = dust4;
						dust87.velocity *= 3f;
						if (Main.dust[num1385].scale > 1f)
						{
							Main.dust[num1385].noGravity = true;
						}
					}
					else if (type == 32)
					{
						Vector2 val15 = new Vector2(position.X, position.Y);
						int num1630 = width;
						int num1631 = height;
						newColor = default(Color);
						int num1396 = Dust.NewDust(val15, num1630, num1631, 172, 0f, 0f, 100, newColor, 1.5f);
						Dust dust5 = Main.dust[num1396];
						Dust dust87 = dust5;
						dust87.velocity *= 3f;
						Main.dust[num1396].noGravity = true;
					}
					else if (type == 172)
					{
						Vector2 val16 = new Vector2(position.X, position.Y);
						int num1632 = width;
						int num1633 = height;
						newColor = default(Color);
						int num1407 = Dust.NewDust(val16, num1632, num1633, 106, 0f, 0f, 100, newColor, 2.5f);
						Dust dust6 = Main.dust[num1407];
						Dust dust87 = dust6;
						dust87.velocity *= 3f;
						Main.dust[num1407].noGravity = true;
					}
					else if (type == 283 || type == 284)
					{
						Vector2 val17 = new Vector2(position.X, position.Y);
						int num1634 = width;
						int num1635 = height;
						newColor = default(Color);
						int num1418 = Dust.NewDust(val17, num1634, num1635, 173, 0f, 0f, 0, newColor);
						Dust dust7 = Main.dust[num1418];
						Dust dust87 = dust7;
						dust87.velocity *= 2f;
						Main.dust[num1418].scale = 1.4f;
					}
					else if (type == 285 || type == 286)
					{
						Vector2 val18 = new Vector2(position.X, position.Y);
						int num1636 = width;
						int num1637 = height;
						newColor = default(Color);
						int num1429 = Dust.NewDust(val18, num1636, num1637, 174, 0f, 0f, 100, newColor, 1.5f);
						Dust dust8 = Main.dust[num1429];
						Dust dust87 = dust8;
						dust87.velocity *= 3f;
						Main.dust[num1429].noGravity = true;
					}
					else if (type == 281 || type == 282)
					{
						Vector2 val19 = new Vector2(position.X, position.Y);
						int num1638 = width;
						int num1639 = height;
						newColor = default(Color);
						int num1440 = Dust.NewDust(val19, num1638, num1639, 175, 0f, 0f, 100, newColor, 1.5f);
						Dust dust9 = Main.dust[num1440];
						Dust dust87 = dust9;
						dust87.velocity *= 3f;
						Main.dust[num1440].noGravity = true;
					}
					else if (type == 533)
					{
						Vector2 val20 = position;
						int num1640 = width;
						int num1641 = height;
						newColor = default(Color);
						int num1451 = Dust.NewDust(val20, num1640, num1641, 27, 0f, 0f, 100, newColor, 2.5f);
						Dust dust10 = Main.dust[num1451];
						Dust dust87 = dust10;
						dust87.velocity *= 3f;
						Main.dust[num1451].noGravity = true;
					}
					else
					{
						Vector2 val21 = new Vector2(position.X, position.Y);
						int num1642 = width;
						int num1643 = height;
						newColor = default(Color);
						int num1462 = Dust.NewDust(val21, num1642, num1643, 6, 0f, 0f, 100, newColor, 2.5f);
						Dust dust11 = Main.dust[num1462];
						Dust dust87 = dust11;
						dust87.velocity *= 3f;
						Main.dust[num1462].noGravity = true;
					}
				}
			}
			this.ai[0] += 1f;
			if (type == 283 || type == 284)
			{
				if (this.ai[0] == 100f || this.ai[0] == 150f || this.ai[0] == 200f || this.ai[0] == 250f || this.ai[0] == 300f)
				{
					this.ai[1] = 30f;
					netUpdate = true;
				}
				if (this.ai[0] >= 450f)
				{
					this.ai[0] = 700f;
				}
			}
			else if (type == 172)
			{
				if (this.ai[0] == 75f || this.ai[0] == 150f || this.ai[0] == 225f || this.ai[0] == 300f || this.ai[0] == 375f || this.ai[0] == 450f)
				{
					this.ai[1] = 30f;
					netUpdate = true;
				}
			}
			else if (type == 533)
			{
				if (this.ai[0] == 180f)
				{
					this.ai[1] = 181f;
					netUpdate = true;
				}
			}
			else if (type == 281 || type == 282)
			{
				if (this.ai[0] == 100f || this.ai[0] == 120f || this.ai[0] == 140f || this.ai[0] == 200f || this.ai[0] == 220f || this.ai[0] == 240f || this.ai[0] == 300f || this.ai[0] == 320f || this.ai[0] == 340f)
				{
					this.ai[1] = 30f;
					netUpdate = true;
				}
				if (this.ai[0] >= 540f)
				{
					this.ai[0] = 700f;
				}
			}
			else
			{
				if (Main.getGoodWorld && type == 24 && AnyNPCs(113))
				{
					this.ai[0] += 1f;
					if (this.ai[0] % 2f == 1f)
					{
						this.ai[0] -= 1f;
					}
				}
				if (this.ai[0] == 100f || this.ai[0] == 200f || this.ai[0] == 300f)
				{
					this.ai[1] = 30f;
					netUpdate = true;
				}
			}
			if ((type == 285 || type == 286) && this.ai[0] > 400f)
			{
				this.ai[0] = 650f;
			}
			if (type == 533 && this.ai[0] >= 360f)
			{
				this.ai[0] = 650f;
			}
			if (this.ai[0] >= 650f && Main.netMode != 1)
			{
				this.ai[0] = 1f;
				int targetTileX = (int)Main.player[target].Center.X / 16;
				int targetTileY = (int)Main.player[target].Center.Y / 16;
				Vector2 chosenTile = Vector2.Zero;
				if (AI_AttemptToFindTeleportSpot(ref chosenTile, targetTileX, targetTileY))
				{
					this.ai[1] = 20f;
					this.ai[2] = chosenTile.X;
					this.ai[3] = chosenTile.Y;
				}
				netUpdate = true;
			}
			if (this.ai[1] > 0f)
			{
				this.ai[1] -= 1f;
				if (type == 533)
				{
					if (this.ai[1] % 30f == 0f && this.ai[1] / 30f < 5f)
					{
						SoundEngine.PlaySound(in SoundID.Item8, position);
						if (Main.netMode != 1)
						{
							Point point = base.Center.ToTileCoordinates();
							Point point9 = Main.player[target].Center.ToTileCoordinates();
							Vector2 vector24 = Main.player[target].Center - base.Center;
							int num1473 = 6;
							int num1484 = 6;
							int num1496 = 0;
							int num1507 = 2;
							int num1518 = 0;
							bool flag46 = false;
							if (((Vector2)(ref vector24)).Length() > 2000f)
							{
								flag46 = true;
							}
							while (!flag46 && num1518 < 50)
							{
								num1518++;
								int num1529 = Main.rand.Next(point9.X - num1473, point9.X + num1473 + 1);
								int num1540 = Main.rand.Next(point9.Y - num1473, point9.Y + num1473 + 1);
								if ((num1540 < point9.Y - num1496 || num1540 > point9.Y + num1496 || num1529 < point9.X - num1496 || num1529 > point9.X + num1496) && (num1540 < point.Y - num1484 || num1540 > point.Y + num1484 || num1529 < point.X - num1484 || num1529 > point.X + num1484) && !Main.tile[num1529, num1540].nactive())
								{
									bool flag57 = true;
									if (flag57 && Main.tile[num1529, num1540].lava())
									{
										flag57 = false;
									}
									if (flag57 && Collision.SolidTiles(num1529 - num1507, num1529 + num1507, num1540 - num1507, num1540 + num1507))
									{
										flag57 = false;
									}
									if (flag57)
									{
										Projectile.NewProjectile(GetSpawnSource_ForProjectile(), num1529 * 16 + 8, num1540 * 16 + 8, 0f, 0f, 596, 0, 1f, Main.myPlayer, target);
										flag46 = true;
										break;
									}
								}
							}
						}
					}
				}
				else if (this.ai[1] == 25f)
				{
					if (type >= 281 && type <= 286)
					{
						if (Main.netMode != 1)
						{
							float num1551 = 6f;
							if (type == 285 || type == 286)
							{
								num1551 = 8f;
							}
							if (type == 281 || type == 282)
							{
								num1551 = 4f;
							}
							Vector2 vector35 = default(Vector2);
							((Vector2)(ref vector35))._002Ector(position.X + (float)width * 0.5f, position.Y);
							float num1562 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector35.X;
							float num1573 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector35.Y;
							if (type == 283 || type == 284)
							{
								num1562 += (float)Main.rand.Next(-30, 31);
								num1573 += (float)Main.rand.Next(-30, 31);
								num1562 -= Main.player[target].velocity.X * 10f;
								num1573 -= Main.player[target].velocity.Y * 10f;
							}
							float num1584 = (float)Math.Sqrt(num1562 * num1562 + num1573 * num1573);
							num1584 = num1551 / num1584;
							num1562 *= num1584;
							num1573 *= num1584;
							int num1595 = 30;
							int num3 = 290;
							if (type == 285 || type == 286)
							{
								num3 = 291;
								num1595 = 40;
							}
							if (type == 281 || type == 282)
							{
								num3 = 293;
								num1595 = 40;
							}
							num1595 = GetAttackDamage_ForProjectiles(num1595, (float)num1595 * 0.8f);
							int num14 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector35.X, vector35.Y, num1562, num1573, num3, num1595, 0f, Main.myPlayer);
							Main.projectile[num14].timeLeft = 300;
							if (num3 == 291)
							{
								Main.projectile[num14].ai[0] = Main.player[target].Center.X;
								Main.projectile[num14].ai[1] = Main.player[target].Center.Y;
								Main.projectile[num14].netUpdate = true;
							}
							localAI[0] = 0f;
						}
					}
					else
					{
						if (type != 172)
						{
							SoundEngine.PlaySound(in SoundID.Item8, position);
						}
						if (Main.netMode != 1)
						{
							if (type == 29)
							{
								NewNPC(GetSpawnSourceForProjectileNPC(), (int)position.X + width / 2, (int)position.Y - 8, 30);
							}
							else if (type == 45)
							{
								NewNPC(GetSpawnSourceForProjectileNPC(), (int)position.X + width / 2, (int)position.Y - 8, 665);
							}
							else if (type == 32)
							{
								NewNPC(GetSpawnSourceForProjectileNPC(), (int)position.X + width / 2, (int)position.Y - 8, 33);
							}
							else if (type == 172)
							{
								float num25 = 10f;
								Vector2 vector46 = default(Vector2);
								((Vector2)(ref vector46))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
								float num36 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector46.X + (float)Main.rand.Next(-10, 11);
								float num47 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector46.Y + (float)Main.rand.Next(-10, 11);
								float num58 = (float)Math.Sqrt(num36 * num36 + num47 * num47);
								num58 = num25 / num58;
								num36 *= num58;
								num47 *= num58;
								int num69 = 40;
								int num80 = 129;
								int num91 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector46.X, vector46.Y, num36, num47, num80, num69, 0f, Main.myPlayer);
								Main.projectile[num91].timeLeft = 300;
								localAI[0] = 0f;
							}
							else
							{
								NewNPC(GetSpawnSourceForProjectileNPC(), (int)position.X + width / 2 + direction * 8, (int)position.Y + 20, 25);
							}
						}
					}
				}
			}
			position += netOffset;
			if (type == 29 || type == 45)
			{
				if (Main.rand.Next(5) == 0)
				{
					Vector2 val22 = new Vector2(position.X, position.Y + 2f);
					int num1644 = width;
					int num1645 = height;
					float speedX7 = velocity.X * 0.2f;
					float speedY6 = velocity.Y * 0.2f;
					newColor = default(Color);
					int num102 = Dust.NewDust(val22, num1644, num1645, 27, speedX7, speedY6, 100, newColor, 1.5f);
					Main.dust[num102].noGravity = true;
					Main.dust[num102].velocity.X *= 0.5f;
					Main.dust[num102].velocity.Y = -2f;
				}
			}
			else if (type == 32)
			{
				if (Main.rand.Next(3) != 0)
				{
					Vector2 val23 = new Vector2(position.X, position.Y + 2f);
					int num1646 = width;
					int num1647 = height;
					float speedX8 = velocity.X * 0.2f;
					float speedY7 = velocity.Y * 0.2f;
					newColor = default(Color);
					int num114 = Dust.NewDust(val23, num1646, num1647, 172, speedX8, speedY7, 100, newColor, 0.9f);
					Main.dust[num114].noGravity = true;
					Main.dust[num114].velocity.X *= 0.3f;
					Main.dust[num114].velocity.Y *= 0.2f;
					Main.dust[num114].velocity.Y -= 1f;
				}
			}
			else if (type == 172)
			{
				int num125 = 1;
				if (alpha == 255)
				{
					num125 = 2;
				}
				for (int num136 = 0; num136 < num125; num136++)
				{
					if (Main.rand.Next(255) > 255 - alpha)
					{
						Vector2 val24 = new Vector2(position.X, position.Y + 2f);
						int num1648 = width;
						int num1649 = height;
						float speedX9 = velocity.X * 0.2f;
						float speedY8 = velocity.Y * 0.2f;
						newColor = default(Color);
						int num147 = Dust.NewDust(val24, num1648, num1649, 106, speedX9, speedY8, 100, newColor, 1.2f);
						Main.dust[num147].noGravity = true;
						Main.dust[num147].velocity.X *= 0.1f + (float)Main.rand.Next(30) * 0.01f;
						Main.dust[num147].velocity.Y *= 0.1f + (float)Main.rand.Next(30) * 0.01f;
						Dust dust = Main.dust[num147];
						Dust dust87 = dust;
						dust87.scale *= 1f + (float)Main.rand.Next(6) * 0.1f;
					}
				}
			}
			else if (type == 283 || type == 284)
			{
				if (Main.rand.Next(2) == 0)
				{
					Vector2 val25 = new Vector2(position.X, position.Y + 2f);
					int num1650 = width;
					int num1651 = height;
					newColor = default(Color);
					int num158 = Dust.NewDust(val25, num1650, num1651, 173, 0f, 0f, 0, newColor);
					Main.dust[num158].velocity.X *= 0.5f;
					Main.dust[num158].velocity.Y *= 0.5f;
				}
			}
			else if (type == 285 || type == 286)
			{
				if (Main.rand.Next(2) == 0)
				{
					Vector2 val26 = new Vector2(position.X, position.Y + 2f);
					int num1652 = width;
					int num1653 = height;
					float speedX10 = velocity.X * 0.2f;
					float speedY9 = velocity.Y * 0.2f;
					newColor = default(Color);
					int num169 = Dust.NewDust(val26, num1652, num1653, 174, speedX10, speedY9, 100, newColor);
					Main.dust[num169].noGravity = true;
					Dust dust2 = Main.dust[num169];
					Dust dust87 = dust2;
					dust87.velocity *= 0.4f;
					Main.dust[num169].velocity.Y -= 0.7f;
				}
			}
			else if (type == 281 || type == 282)
			{
				if (Main.rand.Next(2) == 0)
				{
					Vector2 val27 = new Vector2(position.X, position.Y + 2f);
					int num1654 = width;
					int num1655 = height;
					float speedX11 = velocity.X * 0.2f;
					float speedY10 = velocity.Y * 0.2f;
					newColor = default(Color);
					int num180 = Dust.NewDust(val27, num1654, num1655, 175, speedX11, speedY10, 100, newColor, 0.1f);
					Main.dust[num180].noGravity = true;
					Dust dust3 = Main.dust[num180];
					Dust dust87 = dust3;
					dust87.velocity *= 0.5f;
					Main.dust[num180].fadeIn = 1.2f;
				}
			}
			else if (type == 533)
			{
				Lighting.AddLight(base.Top, 0.6f, 0.6f, 0.3f);
			}
			else if (Main.rand.Next(2) == 0)
			{
				Vector2 val28 = new Vector2(position.X, position.Y + 2f);
				int num1656 = width;
				int num1657 = height;
				float speedX12 = velocity.X * 0.2f;
				float speedY11 = velocity.Y * 0.2f;
				newColor = default(Color);
				int num191 = Dust.NewDust(val28, num1656, num1657, 6, speedX12, speedY11, 100, newColor, 2f);
				Main.dust[num191].noGravity = true;
				Main.dust[num191].velocity.X *= 1f;
				Main.dust[num191].velocity.Y *= 1f;
			}
			position -= netOffset;
			return;
		}
		Vector2 val29 = default(Vector2);
		if (aiStyle == 9)
		{
			if (type == 516)
			{
				if (alpha < 220)
				{
					alpha += 40;
				}
				if (this.ai[0] == 0f)
				{
					this.ai[0] = 1f;
					Vector2 vector57 = Main.player[target].Center - base.Center;
					((Vector2)(ref vector57)).Normalize();
					if (vector57.HasNaNs())
					{
						vector57 = -Vector2.UnitY;
					}
					Vector2 spinningpoint13 = vector57.RotatedByRandom(1.5707963705062866);
					val29 = default(Vector2);
					vector57 = spinningpoint13.RotatedBy(-0.7853981852531433, val29);
					if (vector57.Y > 0.2f)
					{
						vector57.Y = 0.2f;
					}
					velocity = vector57 * (6f + Main.rand.NextFloat() * 4f);
				}
				if (collideX || collideY || Distance(Main.player[target].Center) < 20f)
				{
					StrikeNPCNoInteraction(9999, 0f, direction);
				}
			}
			if (target == 255)
			{
				TargetClosest();
				float num202 = 6f;
				if (type == 25)
				{
					num202 = 5f;
				}
				if (type == 112 || type == 666)
				{
					num202 = 7f;
				}
				if (Main.getGoodWorld)
				{
					if (type == 33 && AnyNPCs(35))
					{
						num202 = 10f;
					}
					if (type == 25 && AnyNPCs(113))
					{
						num202 = 14f;
					}
					if (type == 666)
					{
						num202 = 10f;
					}
				}
				Vector2 vector68 = default(Vector2);
				((Vector2)(ref vector68))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num213 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector68.X;
				float num225 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector68.Y;
				float num236 = (float)Math.Sqrt(num213 * num213 + num225 * num225);
				num236 = num202 / num236;
				velocity.X = num213 * num236;
				velocity.Y = num225 * num236;
			}
			if (Main.getGoodWorld && !dontTakeDamage)
			{
				if (type == 33 && AnyNPCs(35))
				{
					dontTakeDamage = true;
				}
				else if (type == 25 && AnyNPCs(113))
				{
					dontTakeDamage = true;
				}
				else if (type == 666 && (double)(base.Center.Y / 16f) < Main.worldSurface)
				{
					dontTakeDamage = true;
				}
			}
			if (type == 112 || type == 666)
			{
				damage = defDamage;
				if (type == 666)
				{
					damage = GetAttackDamage_ScaledByStrength(32f);
				}
				this.ai[0] += 1f;
				if (this.ai[0] > 3f)
				{
					this.ai[0] = 3f;
				}
				if (this.ai[0] == 2f)
				{
					position += velocity;
					SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 9);
					for (int num247 = 0; num247 < 20; num247++)
					{
						Vector2 val30 = new Vector2(position.X, position.Y + 2f) + netOffset;
						int num1658 = width;
						int num1659 = height;
						newColor = default(Color);
						int num258 = Dust.NewDust(val30, num1658, num1659, 18, 0f, 0f, 100, newColor, 1.8f);
						Dust dust24 = Main.dust[num258];
						Dust dust87 = dust24;
						dust87.velocity *= 1.3f;
						dust24 = Main.dust[num258];
						dust87 = dust24;
						dust87.velocity += velocity;
						Main.dust[num258].noGravity = true;
					}
				}
			}
			if ((type == 112 || type == 666) && Collision.SolidCollision(position, width, height))
			{
				_ = Main.netMode;
				StrikeNPCNoInteraction(9999, 0f, 0);
			}
			EncourageDespawn(100);
			if (type == 516)
			{
				rotation += 0.1f * (float)direction;
				float num269 = 15f;
				float num280 = 1f / 12f;
				Vector2 center = base.Center;
				Vector2 center12 = Main.player[target].Center;
				Vector2 vector79 = center12 - center;
				((Vector2)(ref vector79)).Normalize();
				if (vector79.HasNaNs())
				{
					((Vector2)(ref vector79))._002Ector((float)direction, 0f);
				}
				velocity = (velocity * (num269 - 1f) + vector79 * (((Vector2)(ref velocity)).Length() + num280)) / num269;
				if (((Vector2)(ref velocity)).Length() < 6f)
				{
					velocity *= 1.05f;
				}
				return;
			}
			position += netOffset;
			for (int num291 = 0; num291 < 2; num291++)
			{
				if (type == 30 || type == 665)
				{
					alpha = 255;
					for (int num302 = 0; num302 < 2; num302++)
					{
						Vector2 val31 = new Vector2(position.X, position.Y + 2f);
						int num1660 = width;
						int num1661 = height;
						float speedX13 = velocity.X * 0.2f;
						float speedY12 = velocity.Y * 0.2f;
						newColor = default(Color);
						int num313 = Dust.NewDust(val31, num1660, num1661, 27, speedX13, speedY12, 100, newColor, 1.3f);
						Main.dust[num313].noGravity = true;
						Dust dust20 = Main.dust[num313];
						Dust dust87 = dust20;
						dust87.velocity *= 0.3f;
						Main.dust[num313].velocity.X -= velocity.X * 0.2f;
						Main.dust[num313].velocity.Y -= velocity.Y * 0.2f;
					}
				}
				else if (type == 33)
				{
					for (int num324 = 0; num324 < 3; num324++)
					{
						float num336 = velocity.X / 3f * (float)num291;
						float num347 = velocity.Y / 3f * (float)num291;
						int num358 = 2;
						Vector2 val32 = new Vector2(position.X + (float)num358, position.Y + (float)num358);
						int num1662 = width - num358 * 2;
						int num1663 = height - num358 * 2;
						newColor = default(Color);
						int num369 = Dust.NewDust(val32, num1662, num1663, 172, 0f, 0f, 100, newColor, 1.2f);
						Main.dust[num369].noGravity = true;
						Dust dust22 = Main.dust[num369];
						Dust dust87 = dust22;
						dust87.velocity *= 0.1f;
						dust22 = Main.dust[num369];
						dust87 = dust22;
						dust87.velocity += velocity * 0.5f;
						Main.dust[num369].position.X -= num336;
						Main.dust[num369].position.Y -= num347;
					}
					if (Main.rand.Next(5) == 0)
					{
						int num380 = 2;
						Vector2 val33 = new Vector2(position.X + (float)num380, position.Y + (float)num380);
						int num1664 = width - num380 * 2;
						int num1665 = height - num380 * 2;
						newColor = default(Color);
						int num391 = Dust.NewDust(val33, num1664, num1665, 172, 0f, 0f, 100, newColor, 0.6f);
						Dust dust21 = Main.dust[num391];
						Dust dust87 = dust21;
						dust87.velocity *= 0.25f;
						dust21 = Main.dust[num391];
						dust87 = dust21;
						dust87.velocity += velocity * 0.5f;
					}
				}
				else if (type == 112 || type == 666)
				{
					Vector2 val34 = new Vector2(position.X, position.Y + 2f);
					int num1666 = width;
					int num1667 = height;
					float speedX14 = velocity.X * 0.1f;
					float speedY13 = velocity.Y * 0.1f;
					newColor = default(Color);
					int num402 = Dust.NewDust(val34, num1666, num1667, 18, speedX14, speedY13, 80, newColor, 1.3f);
					Dust dust23 = Main.dust[num402];
					Dust dust87 = dust23;
					dust87.velocity *= 0.3f;
					Main.dust[num402].noGravity = true;
				}
				else
				{
					Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), 1f, 0.3f, 0.1f);
					Vector2 val35 = new Vector2(position.X, position.Y + 2f);
					int num1668 = width;
					int num1669 = height;
					float speedX15 = velocity.X * 0.2f;
					float speedY14 = velocity.Y * 0.2f;
					newColor = default(Color);
					int num413 = Dust.NewDust(val35, num1668, num1669, 6, speedX15, speedY14, 100, newColor, 2f);
					Main.dust[num413].noGravity = true;
					Main.dust[num413].velocity.X *= 0.3f;
					Main.dust[num413].velocity.Y *= 0.3f;
				}
			}
			rotation += 0.4f * (float)direction;
			position -= netOffset;
			return;
		}
		if (aiStyle == 10)
		{
			float num424 = 1f;
			float num435 = 0.011f;
			TargetClosest();
			Vector2 vector90 = default(Vector2);
			((Vector2)(ref vector90))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num447 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector90.X;
			float num458 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector90.Y;
			float num469 = (float)Math.Sqrt(num447 * num447 + num458 * num458);
			float num480 = num469;
			this.ai[1] += 1f;
			if (this.ai[1] > 600f)
			{
				num435 *= 8f;
				num424 = 4f;
				if (this.ai[1] > 650f)
				{
					this.ai[1] = 0f;
				}
			}
			else if (num480 < 250f)
			{
				this.ai[0] += 0.9f;
				if (this.ai[0] > 0f)
				{
					velocity.Y += 0.019f;
				}
				else
				{
					velocity.Y -= 0.019f;
				}
				if (this.ai[0] < -100f || this.ai[0] > 100f)
				{
					velocity.X += 0.019f;
				}
				else
				{
					velocity.X -= 0.019f;
				}
				if (this.ai[0] > 200f)
				{
					this.ai[0] = -200f;
				}
			}
			if (num480 > 350f)
			{
				num424 = 5f;
				num435 = 0.3f;
			}
			else if (num480 > 300f)
			{
				num424 = 3f;
				num435 = 0.2f;
			}
			else if (num480 > 250f)
			{
				num424 = 1.5f;
				num435 = 0.1f;
			}
			num469 = num424 / num469;
			num447 *= num469;
			num458 *= num469;
			if (Main.player[target].dead)
			{
				num447 = (float)direction * num424 / 2f;
				num458 = (0f - num424) / 2f;
			}
			if (velocity.X < num447)
			{
				velocity.X += num435;
			}
			else if (velocity.X > num447)
			{
				velocity.X -= num435;
			}
			if (velocity.Y < num458)
			{
				velocity.Y += num435;
			}
			else if (velocity.Y > num458)
			{
				velocity.Y -= num435;
			}
			if (num447 > 0f)
			{
				spriteDirection = -1;
				rotation = (float)Math.Atan2(num458, num447);
			}
			if (num447 < 0f)
			{
				spriteDirection = 1;
				rotation = (float)Math.Atan2(num458, num447) + 3.14f;
			}
			if (type != 289)
			{
				return;
			}
			if (justHit)
			{
				this.ai[2] = 0f;
				this.ai[3] = 0f;
			}
			((Vector2)(ref vector90))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			num447 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector90.X;
			num458 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector90.Y;
			num469 = (float)Math.Sqrt(num447 * num447 + num458 * num458);
			if (num469 <= 500f)
			{
				this.ai[2] += 1f;
				if (this.ai[3] == 0f)
				{
					if (this.ai[2] > 120f)
					{
						this.ai[2] = 0f;
						this.ai[3] = 1f;
						netUpdate = true;
					}
					return;
				}
				if (this.ai[2] > 40f)
				{
					this.ai[3] = 0f;
				}
				if (Main.netMode != 1 && this.ai[2] == 20f)
				{
					float num491 = 6f;
					int num502 = 25;
					int num513 = 299;
					num469 = num491 / num469;
					num447 *= num469;
					num458 *= num469;
					int num524 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector90.X, vector90.Y, num447, num458, num513, num502, 0f, Main.myPlayer);
				}
			}
			else
			{
				this.ai[2] = 0f;
				this.ai[3] = 0f;
			}
			return;
		}
		if (aiStyle == 11)
		{
			reflectsProjectiles = false;
			defense = defDefense;
			if (this.ai[0] == 0f && Main.netMode != 1)
			{
				TargetClosest();
				this.ai[0] = 1f;
				if (type != 68)
				{
					int num535 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)position.Y + height / 2, 36, whoAmI);
					Main.npc[num535].ai[0] = -1f;
					Main.npc[num535].ai[1] = whoAmI;
					Main.npc[num535].target = target;
					Main.npc[num535].netUpdate = true;
					num535 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)position.Y + height / 2, 36, whoAmI);
					Main.npc[num535].ai[0] = 1f;
					Main.npc[num535].ai[1] = whoAmI;
					Main.npc[num535].ai[3] = 150f;
					Main.npc[num535].target = target;
					Main.npc[num535].netUpdate = true;
				}
			}
			if ((type == 68 || Main.netMode == 1) && localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
			}
			if (Main.player[target].dead || Math.Abs(position.X - Main.player[target].position.X) > 2000f || Math.Abs(position.Y - Main.player[target].position.Y) > 2000f)
			{
				TargetClosest();
				if (Main.player[target].dead || Math.Abs(position.X - Main.player[target].position.X) > 2000f || Math.Abs(position.Y - Main.player[target].position.Y) > 2000f)
				{
					this.ai[1] = 3f;
				}
			}
			if ((type == 68 || Main.IsItDay()) && this.ai[1] != 3f && this.ai[1] != 2f)
			{
				this.ai[1] = 2f;
				SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
			}
			int num546 = 0;
			if (Main.expertMode)
			{
				for (int num558 = 0; num558 < 200; num558++)
				{
					if (Main.npc[num558].active && Main.npc[num558].type == type + 1)
					{
						num546++;
					}
				}
				defense += num546 * 25;
				if ((num546 < 2 || (double)life < (double)lifeMax * 0.75) && this.ai[1] == 0f)
				{
					float num569 = 80f;
					if (num546 == 0)
					{
						num569 /= 2f;
					}
					if (Main.getGoodWorld)
					{
						num569 *= 0.8f;
					}
					if (Main.netMode != 1 && this.ai[2] % num569 == 0f)
					{
						Vector2 center23 = base.Center;
						float num580 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - center23.X;
						float num591 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - center23.Y;
						float num602 = (float)Math.Sqrt(num580 * num580 + num591 * num591);
						if (Collision.CanHit(center23, 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							float num613 = 3f;
							if (num546 == 0)
							{
								num613 += 2f;
							}
							float num624 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - center23.X + (float)Main.rand.Next(-20, 21);
							float num635 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - center23.Y + (float)Main.rand.Next(-20, 21);
							float num646 = (float)Math.Sqrt(num624 * num624 + num635 * num635);
							num646 = num613 / num646;
							num624 *= num646;
							num635 *= num646;
							Vector2 vector101 = default(Vector2);
							((Vector2)(ref vector101))._002Ector(num624 * 1f + (float)Main.rand.Next(-50, 51) * 0.01f, num635 * 1f + (float)Main.rand.Next(-50, 51) * 0.01f);
							((Vector2)(ref vector101)).Normalize();
							vector101 *= num613;
							vector101 += velocity;
							num624 = vector101.X;
							num635 = vector101.Y;
							int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(17f, 17f);
							int num657 = 270;
							center23 += vector101 * 5f;
							int num669 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), center23.X, center23.Y, num624, num635, num657, attackDamage_ForProjectiles, 0f, Main.myPlayer, -1f);
							Main.projectile[num669].timeLeft = 300;
						}
					}
				}
			}
			if (this.ai[1] == 0f)
			{
				damage = defDamage;
				this.ai[2] += 1f;
				if (this.ai[2] >= 800f)
				{
					this.ai[2] = 0f;
					this.ai[1] = 1f;
					TargetClosest();
					netUpdate = true;
				}
				rotation = velocity.X / 15f;
				float num676 = 0.02f;
				float num677 = 2f;
				float num678 = 0.05f;
				float num679 = 8f;
				if (Main.expertMode)
				{
					num676 = 0.03f;
					num677 = 4f;
					num678 = 0.07f;
					num679 = 9.5f;
				}
				if (Main.getGoodWorld)
				{
					num676 += 0.01f;
					num677 += 1f;
					num678 += 0.05f;
					num679 += 2f;
				}
				if (position.Y > Main.player[target].position.Y - 250f)
				{
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.98f;
					}
					velocity.Y -= num676;
					if (velocity.Y > num677)
					{
						velocity.Y = num677;
					}
				}
				else if (position.Y < Main.player[target].position.Y - 250f)
				{
					if (velocity.Y < 0f)
					{
						velocity.Y *= 0.98f;
					}
					velocity.Y += num676;
					if (velocity.Y < 0f - num677)
					{
						velocity.Y = 0f - num677;
					}
				}
				if (position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2))
				{
					if (velocity.X > 0f)
					{
						velocity.X *= 0.98f;
					}
					velocity.X -= num678;
					if (velocity.X > num679)
					{
						velocity.X = num679;
					}
				}
				if (position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2))
				{
					if (velocity.X < 0f)
					{
						velocity.X *= 0.98f;
					}
					velocity.X += num678;
					if (velocity.X < 0f - num679)
					{
						velocity.X = 0f - num679;
					}
				}
			}
			else if (this.ai[1] == 1f)
			{
				if (Main.getGoodWorld)
				{
					if (num546 > 0)
					{
						reflectsProjectiles = true;
					}
					else if (Main.netMode != 1 && this.ai[2] % 200f == 0f && CountNPCS(32) < 6)
					{
						int num680 = 1;
						for (int num681 = 0; num681 < num680; num681++)
						{
							int num682 = 1000;
							for (int num683 = 0; num683 < num682; num683++)
							{
								int num684 = (int)(base.Center.X / 16f) + Main.rand.Next(-50, 51);
								int num686;
								for (num686 = (int)(base.Center.Y / 16f) + Main.rand.Next(-50, 51); num686 < Main.maxTilesY - 10 && !WorldGen.SolidTile(num684, num686); num686++)
								{
								}
								num686--;
								if (!WorldGen.SolidTile(num684, num686))
								{
									int num687 = NewNPC(GetSpawnSourceForNaturalSpawn(), num684 * 16 + 8, num686 * 16, 32);
									if (Main.netMode == 2 && num687 < 200)
									{
										NetMessage.SendData(23, -1, -1, null, num687);
									}
									break;
								}
							}
						}
					}
				}
				defense -= 10;
				this.ai[2] += 1f;
				if (this.ai[2] == 2f)
				{
					SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
				}
				if (this.ai[2] >= 400f)
				{
					this.ai[2] = 0f;
					this.ai[1] = 0f;
				}
				rotation += (float)direction * 0.3f;
				Vector2 vector113 = default(Vector2);
				((Vector2)(ref vector113))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num688 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector113.X;
				float num689 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector113.Y;
				float num690 = (float)Math.Sqrt(num688 * num688 + num689 * num689);
				float num691 = 1.5f;
				damage = GetAttackDamage_LerpBetweenFinalValues(defDamage, (float)defDamage * 1.3f);
				if (Main.expertMode)
				{
					num691 = 3.5f;
					if (num690 > 150f)
					{
						num691 *= 1.05f;
					}
					if (num690 > 200f)
					{
						num691 *= 1.1f;
					}
					if (num690 > 250f)
					{
						num691 *= 1.1f;
					}
					if (num690 > 300f)
					{
						num691 *= 1.1f;
					}
					if (num690 > 350f)
					{
						num691 *= 1.1f;
					}
					if (num690 > 400f)
					{
						num691 *= 1.1f;
					}
					if (num690 > 450f)
					{
						num691 *= 1.1f;
					}
					if (num690 > 500f)
					{
						num691 *= 1.1f;
					}
					if (num690 > 550f)
					{
						num691 *= 1.1f;
					}
					if (num690 > 600f)
					{
						num691 *= 1.1f;
					}
					switch (num546)
					{
					case 0:
						num691 *= 1.1f;
						break;
					case 1:
						num691 *= 1.05f;
						break;
					}
				}
				if (Main.getGoodWorld)
				{
					num691 *= 1.3f;
				}
				num690 = num691 / num690;
				velocity.X = num688 * num690;
				velocity.Y = num689 * num690;
			}
			else if (this.ai[1] == 2f)
			{
				damage = 1000;
				defense = 9999;
				rotation += (float)direction * 0.3f;
				Vector2 vector124 = default(Vector2);
				((Vector2)(ref vector124))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num692 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector124.X;
				float num693 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector124.Y;
				float num694 = (float)Math.Sqrt(num692 * num692 + num693 * num693);
				num694 = 8f / num694;
				velocity.X = num692 * num694;
				velocity.Y = num693 * num694;
			}
			else if (this.ai[1] == 3f)
			{
				velocity.Y += 0.1f;
				if (velocity.Y < 0f)
				{
					velocity.Y *= 0.95f;
				}
				velocity.X *= 0.95f;
				EncourageDespawn(50);
			}
			if (this.ai[1] != 2f && this.ai[1] != 3f && type != 68 && (num546 != 0 || !Main.expertMode))
			{
				Vector2 val36 = new Vector2(position.X + (float)(width / 2) - 15f - velocity.X * 5f, position.Y + (float)height - 2f);
				float speedX16 = (0f - velocity.X) * 0.2f;
				newColor = default(Color);
				int num695 = Dust.NewDust(val36, 30, 10, 5, speedX16, 3f, 0, newColor, 2f);
				Main.dust[num695].noGravity = true;
				Main.dust[num695].velocity.X *= 1.3f;
				Main.dust[num695].velocity.X += velocity.X * 0.4f;
				Main.dust[num695].velocity.Y += 2f + velocity.Y;
				for (int num697 = 0; num697 < 2; num697++)
				{
					Vector2 val37 = new Vector2(position.X, position.Y + 120f);
					int num1670 = width;
					float x6 = velocity.X;
					float y7 = velocity.Y;
					newColor = default(Color);
					num695 = Dust.NewDust(val37, num1670, 60, 5, x6, y7, 0, newColor, 2f);
					Main.dust[num695].noGravity = true;
					Dust dust25 = Main.dust[num695];
					Dust dust87 = dust25;
					dust87.velocity -= velocity;
					Main.dust[num695].velocity.Y += 5f;
				}
			}
			return;
		}
		if (aiStyle == 12)
		{
			spriteDirection = -(int)this.ai[0];
			if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 11)
			{
				this.ai[2] += 10f;
				if (this.ai[2] > 50f || Main.netMode != 2)
				{
					life = -1;
					HitEffect();
					active = false;
				}
			}
			if (this.ai[2] == 0f || this.ai[2] == 3f)
			{
				if (Main.npc[(int)this.ai[1]].ai[1] == 3f)
				{
					EncourageDespawn(10);
				}
				if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
				{
					if (position.Y > Main.npc[(int)this.ai[1]].position.Y - 100f)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.96f;
						}
						velocity.Y -= 0.07f;
						if (velocity.Y > 6f)
						{
							velocity.Y = 6f;
						}
					}
					else if (position.Y < Main.npc[(int)this.ai[1]].position.Y - 100f)
					{
						if (velocity.Y < 0f)
						{
							velocity.Y *= 0.96f;
						}
						velocity.Y += 0.07f;
						if (velocity.Y < -6f)
						{
							velocity.Y = -6f;
						}
					}
					if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
					{
						if (velocity.X > 0f)
						{
							velocity.X *= 0.96f;
						}
						velocity.X -= 0.1f;
						if (velocity.X > 8f)
						{
							velocity.X = 8f;
						}
					}
					if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
					{
						if (velocity.X < 0f)
						{
							velocity.X *= 0.96f;
						}
						velocity.X += 0.1f;
						if (velocity.X < -8f)
						{
							velocity.X = -8f;
						}
					}
				}
				else
				{
					this.ai[3] += 1f;
					if (Main.expertMode)
					{
						this.ai[3] += 0.5f;
					}
					if (this.ai[3] >= 300f)
					{
						this.ai[2] += 1f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					if (Main.expertMode)
					{
						if (position.Y > Main.npc[(int)this.ai[1]].position.Y + 230f)
						{
							if (velocity.Y > 0f)
							{
								velocity.Y *= 0.96f;
							}
							velocity.Y -= 0.04f;
							if (velocity.Y > 3f)
							{
								velocity.Y = 3f;
							}
						}
						else if (position.Y < Main.npc[(int)this.ai[1]].position.Y + 230f)
						{
							if (velocity.Y < 0f)
							{
								velocity.Y *= 0.96f;
							}
							velocity.Y += 0.04f;
							if (velocity.Y < -3f)
							{
								velocity.Y = -3f;
							}
						}
						if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0])
						{
							if (velocity.X > 0f)
							{
								velocity.X *= 0.96f;
							}
							velocity.X -= 0.07f;
							if (velocity.X > 8f)
							{
								velocity.X = 8f;
							}
						}
						if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0])
						{
							if (velocity.X < 0f)
							{
								velocity.X *= 0.96f;
							}
							velocity.X += 0.07f;
							if (velocity.X < -8f)
							{
								velocity.X = -8f;
							}
						}
					}
					if (position.Y > Main.npc[(int)this.ai[1]].position.Y + 230f)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.96f;
						}
						velocity.Y -= 0.04f;
						if (velocity.Y > 3f)
						{
							velocity.Y = 3f;
						}
					}
					else if (position.Y < Main.npc[(int)this.ai[1]].position.Y + 230f)
					{
						if (velocity.Y < 0f)
						{
							velocity.Y *= 0.96f;
						}
						velocity.Y += 0.04f;
						if (velocity.Y < -3f)
						{
							velocity.Y = -3f;
						}
					}
					if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0])
					{
						if (velocity.X > 0f)
						{
							velocity.X *= 0.96f;
						}
						velocity.X -= 0.07f;
						if (velocity.X > 8f)
						{
							velocity.X = 8f;
						}
					}
					if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0])
					{
						if (velocity.X < 0f)
						{
							velocity.X *= 0.96f;
						}
						velocity.X += 0.07f;
						if (velocity.X < -8f)
						{
							velocity.X = -8f;
						}
					}
				}
				Vector2 vector135 = default(Vector2);
				((Vector2)(ref vector135))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num698 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector135.X;
				float num699 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector135.Y;
				float num700 = (float)Math.Sqrt(num698 * num698 + num699 * num699);
				rotation = (float)Math.Atan2(num699, num698) + 1.57f;
			}
			else if (this.ai[2] == 1f)
			{
				Vector2 vector146 = default(Vector2);
				((Vector2)(ref vector146))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num701 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector146.X;
				float num702 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector146.Y;
				float num703 = (float)Math.Sqrt(num701 * num701 + num702 * num702);
				rotation = (float)Math.Atan2(num702, num701) + 1.57f;
				velocity.X *= 0.95f;
				velocity.Y -= 0.1f;
				if (Main.expertMode)
				{
					velocity.Y -= 0.06f;
					if (velocity.Y < -13f)
					{
						velocity.Y = -13f;
					}
				}
				else if (velocity.Y < -8f)
				{
					velocity.Y = -8f;
				}
				if (position.Y < Main.npc[(int)this.ai[1]].position.Y - 200f)
				{
					TargetClosest();
					this.ai[2] = 2f;
					((Vector2)(ref vector146))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					num701 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector146.X;
					num702 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector146.Y;
					num703 = (float)Math.Sqrt(num701 * num701 + num702 * num702);
					num703 = ((!Main.expertMode) ? (18f / num703) : (21f / num703));
					velocity.X = num701 * num703;
					velocity.Y = num702 * num703;
					netUpdate = true;
				}
			}
			else if (this.ai[2] == 2f)
			{
				if (position.Y > Main.player[target].position.Y || velocity.Y < 0f)
				{
					this.ai[2] = 3f;
				}
			}
			else if (this.ai[2] == 4f)
			{
				Vector2 vector157 = default(Vector2);
				((Vector2)(ref vector157))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num704 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector157.X;
				float num705 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector157.Y;
				float num706 = (float)Math.Sqrt(num704 * num704 + num705 * num705);
				rotation = (float)Math.Atan2(num705, num704) + 1.57f;
				velocity.Y *= 0.95f;
				velocity.X += 0.1f * (0f - this.ai[0]);
				if (Main.expertMode)
				{
					velocity.X += 0.07f * (0f - this.ai[0]);
					if (velocity.X < -12f)
					{
						velocity.X = -12f;
					}
					else if (velocity.X > 12f)
					{
						velocity.X = 12f;
					}
				}
				else if (velocity.X < -8f)
				{
					velocity.X = -8f;
				}
				else if (velocity.X > 8f)
				{
					velocity.X = 8f;
				}
				if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 500f || position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 500f)
				{
					TargetClosest();
					this.ai[2] = 5f;
					((Vector2)(ref vector157))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					num704 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector157.X;
					num705 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector157.Y;
					num706 = (float)Math.Sqrt(num704 * num704 + num705 * num705);
					num706 = ((!Main.expertMode) ? (17f / num706) : (22f / num706));
					velocity.X = num704 * num706;
					velocity.Y = num705 * num706;
					netUpdate = true;
				}
			}
			else if (this.ai[2] == 5f && ((velocity.X > 0f && position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2)) || (velocity.X < 0f && position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2))))
			{
				this.ai[2] = 0f;
			}
			return;
		}
		if (aiStyle == 13)
		{
			if (this.ai[0] < 0f || this.ai[0] >= (float)Main.maxTilesX || this.ai[1] < 0f || this.ai[1] >= (float)Main.maxTilesX)
			{
				return;
			}
			if (Main.tile[(int)this.ai[0], (int)this.ai[1]] == null)
			{
				Main.tile[(int)this.ai[0], (int)this.ai[1]] = default(Tile);
			}
			if (!Main.tile[(int)this.ai[0], (int)this.ai[1]].active())
			{
				life = -1;
				HitEffect();
				active = false;
				return;
			}
			FixExploitManEaters.ProtectSpot((int)this.ai[0], (int)this.ai[1]);
			TargetClosest();
			float num708 = 0.035f;
			float num709 = 150f;
			if (type == 43)
			{
				num709 = ((!Main.getGoodWorld) ? 250f : 350f);
			}
			if (type == 101)
			{
				num709 = 175f;
			}
			if (type == 259)
			{
				num709 = 100f;
			}
			if (type == 175)
			{
				num709 = 500f;
				num708 = 0.05f;
			}
			if (type == 260)
			{
				num709 = 350f;
				num708 = 0.15f;
			}
			this.ai[2] += 1f;
			if (this.ai[2] > 300f)
			{
				num709 = (int)((double)num709 * 1.3);
				if (this.ai[2] > 450f)
				{
					this.ai[2] = 0f;
				}
			}
			Vector2 vector168 = default(Vector2);
			((Vector2)(ref vector168))._002Ector(this.ai[0] * 16f + 8f, this.ai[1] * 16f + 8f);
			float num710 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - (float)(width / 2) - vector168.X;
			float num711 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - (float)(height / 2) - vector168.Y;
			float num712 = (float)Math.Sqrt(num710 * num710 + num711 * num711);
			if (num712 > num709)
			{
				num712 = num709 / num712;
				num710 *= num712;
				num711 *= num712;
			}
			if (position.X < this.ai[0] * 16f + 8f + num710)
			{
				velocity.X += num708;
				if (velocity.X < 0f && num710 > 0f)
				{
					velocity.X += num708 * 1.5f;
				}
			}
			else if (position.X > this.ai[0] * 16f + 8f + num710)
			{
				velocity.X -= num708;
				if (velocity.X > 0f && num710 < 0f)
				{
					velocity.X -= num708 * 1.5f;
				}
			}
			if (position.Y < this.ai[1] * 16f + 8f + num711)
			{
				velocity.Y += num708;
				if (velocity.Y < 0f && num711 > 0f)
				{
					velocity.Y += num708 * 1.5f;
				}
			}
			else if (position.Y > this.ai[1] * 16f + 8f + num711)
			{
				velocity.Y -= num708;
				if (velocity.Y > 0f && num711 < 0f)
				{
					velocity.Y -= num708 * 1.5f;
				}
			}
			if (type == 43)
			{
				if (Main.getGoodWorld)
				{
					if ((double)velocity.X > 3.5)
					{
						velocity.X = 3.5f;
					}
					if ((double)velocity.X < -3.5)
					{
						velocity.X = -3.5f;
					}
					if ((double)velocity.Y > 3.5)
					{
						velocity.Y = 3.5f;
					}
					if ((double)velocity.Y < -3.5)
					{
						velocity.Y = -3.5f;
					}
				}
				else
				{
					if (velocity.X > 3f)
					{
						velocity.X = 3f;
					}
					if (velocity.X < -3f)
					{
						velocity.X = -3f;
					}
					if (velocity.Y > 3f)
					{
						velocity.Y = 3f;
					}
					if (velocity.Y < -3f)
					{
						velocity.Y = -3f;
					}
				}
			}
			else if (type == 175)
			{
				if (velocity.X > 4f)
				{
					velocity.X = 4f;
				}
				if (velocity.X < -4f)
				{
					velocity.X = -4f;
				}
				if (velocity.Y > 4f)
				{
					velocity.Y = 4f;
				}
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
			}
			else
			{
				if (velocity.X > 2f)
				{
					velocity.X = 2f;
				}
				if (velocity.X < -2f)
				{
					velocity.X = -2f;
				}
				if (velocity.Y > 2f)
				{
					velocity.Y = 2f;
				}
				if (velocity.Y < -2f)
				{
					velocity.Y = -2f;
				}
			}
			if (type == 259 || type == 260)
			{
				rotation = (float)Math.Atan2(num711, num710) + 1.57f;
			}
			else
			{
				if (num710 > 0f)
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(num711, num710);
				}
				if (num710 < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(num711, num710) + 3.14f;
				}
			}
			if (collideX)
			{
				netUpdate = true;
				velocity.X = oldVelocity.X * -0.7f;
				if (velocity.X > 0f && velocity.X < 2f)
				{
					velocity.X = 2f;
				}
				if (velocity.X < 0f && velocity.X > -2f)
				{
					velocity.X = -2f;
				}
			}
			if (collideY)
			{
				netUpdate = true;
				velocity.Y = oldVelocity.Y * -0.7f;
				if (velocity.Y > 0f && velocity.Y < 2f)
				{
					velocity.Y = 2f;
				}
				if (velocity.Y < 0f && velocity.Y > -2f)
				{
					velocity.Y = -2f;
				}
			}
			if (Main.netMode == 1)
			{
				return;
			}
			if (type == 101 && !Main.player[target].DeadOrGhost)
			{
				if (justHit)
				{
					localAI[0] = 0f;
				}
				localAI[0] += 1f;
				if (localAI[0] >= 120f)
				{
					if (!Collision.SolidCollision(position, width, height) && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						float num713 = 10f;
						((Vector2)(ref vector168))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						num710 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector168.X + (float)Main.rand.Next(-10, 11);
						num711 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector168.Y + (float)Main.rand.Next(-10, 11);
						num712 = (float)Math.Sqrt(num710 * num710 + num711 * num711);
						num712 = num713 / num712;
						num710 *= num712;
						num711 *= num712;
						int attackDamage_ForProjectiles5 = GetAttackDamage_ForProjectiles(22f, 17.6f);
						int num714 = 96;
						int num715 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector168.X, vector168.Y, num710, num711, num714, attackDamage_ForProjectiles5, 0f, Main.myPlayer);
						Main.projectile[num715].timeLeft = 300;
						localAI[0] = 0f;
					}
					else
					{
						localAI[0] = 100f;
					}
				}
			}
			if (type != 260 || Main.player[target].DeadOrGhost)
			{
				return;
			}
			if (justHit)
			{
				localAI[0] = 0f;
			}
			localAI[0] += 1f;
			if (!(localAI[0] >= 150f))
			{
				return;
			}
			if (!Collision.SolidCollision(position, width, height) && Collision.CanHit(this, Main.player[target]))
			{
				float num716 = 14f;
				((Vector2)(ref vector168))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				num710 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector168.X + (float)Main.rand.Next(-10, 11);
				float num717 = Math.Abs(num710 * 0.1f);
				if (num711 > 0f)
				{
					num717 = 0f;
				}
				num711 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector168.Y + (float)Main.rand.Next(-10, 11) - num717;
				num712 = (float)Math.Sqrt(num710 * num710 + num711 * num711);
				num712 = num716 / num712;
				num710 *= num712;
				num711 *= num712;
				int num720 = NewNPC(GetSpawnSourceForProjectileNPC(), (int)base.Center.X, (int)base.Center.Y, 261);
				Main.npc[num720].velocity.X = num710;
				Main.npc[num720].velocity.Y = num711;
				Main.npc[num720].netUpdate = true;
				localAI[0] = 0f;
			}
			else
			{
				localAI[0] = 250f;
			}
			return;
		}
		if (aiStyle == 14)
		{
			noGravity = true;
			if (collideX)
			{
				velocity.X = oldVelocity.X * -0.5f;
				if (direction == -1 && velocity.X > 0f && velocity.X < 2f)
				{
					velocity.X = 2f;
				}
				if (direction == 1 && velocity.X < 0f && velocity.X > -2f)
				{
					velocity.X = -2f;
				}
			}
			if (collideY)
			{
				velocity.Y = oldVelocity.Y * -0.5f;
				if (velocity.Y > 0f && velocity.Y < 1f)
				{
					velocity.Y = 1f;
				}
				if (velocity.Y < 0f && velocity.Y > -1f)
				{
					velocity.Y = -1f;
				}
			}
			if (type == 226)
			{
				int num721 = 1;
				int num722 = 1;
				if (velocity.X < 0f)
				{
					num721 = -1;
				}
				if (velocity.Y < 0f)
				{
					num722 = -1;
				}
				TargetClosest();
				if (!Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					direction = num721;
					directionY = num722;
				}
			}
			else
			{
				TargetClosest();
			}
			if (type == 158)
			{
				if ((double)position.Y < Main.worldSurface * 16.0 && Main.IsItDay() && !Main.eclipse)
				{
					directionY = -1;
					direction *= -1;
				}
				if (direction == -1 && velocity.X > -7f)
				{
					velocity.X -= 0.2f;
					if (velocity.X > 4f)
					{
						velocity.X -= 0.1f;
					}
					else if (velocity.X > 0f)
					{
						velocity.X += 0.05f;
					}
					if (velocity.X < -7f)
					{
						velocity.X = -7f;
					}
				}
				else if (direction == 1 && velocity.X < 7f)
				{
					velocity.X += 0.2f;
					if (velocity.X < -4f)
					{
						velocity.X += 0.1f;
					}
					else if (velocity.X < 0f)
					{
						velocity.X -= 0.05f;
					}
					if (velocity.X > 7f)
					{
						velocity.X = 7f;
					}
				}
				if (directionY == -1 && velocity.Y > -7f)
				{
					velocity.Y -= 0.2f;
					if (velocity.Y > 4f)
					{
						velocity.Y -= 0.1f;
					}
					else if (velocity.Y > 0f)
					{
						velocity.Y += 0.05f;
					}
					if (velocity.Y < -7f)
					{
						velocity.Y = -7f;
					}
				}
				else if (directionY == 1 && velocity.Y < 7f)
				{
					velocity.Y += 0.2f;
					if (velocity.Y < -4f)
					{
						velocity.Y += 0.1f;
					}
					else if (velocity.Y < 0f)
					{
						velocity.Y -= 0.05f;
					}
					if (velocity.Y > 7f)
					{
						velocity.Y = 7f;
					}
				}
			}
			else if (type == 226)
			{
				if (direction == -1 && velocity.X > -4f)
				{
					velocity.X -= 0.2f;
					if (velocity.X > 4f)
					{
						velocity.X -= 0.1f;
					}
					else if (velocity.X > 0f)
					{
						velocity.X += 0.05f;
					}
					if (velocity.X < -4f)
					{
						velocity.X = -4f;
					}
				}
				else if (direction == 1 && velocity.X < 4f)
				{
					velocity.X += 0.2f;
					if (velocity.X < -4f)
					{
						velocity.X += 0.1f;
					}
					else if (velocity.X < 0f)
					{
						velocity.X -= 0.05f;
					}
					if (velocity.X > 4f)
					{
						velocity.X = 4f;
					}
				}
				if (directionY == -1 && (double)velocity.Y > -2.5)
				{
					velocity.Y -= 0.1f;
					if ((double)velocity.Y > 2.5)
					{
						velocity.Y -= 0.05f;
					}
					else if (velocity.Y > 0f)
					{
						velocity.Y += 0.03f;
					}
					if ((double)velocity.Y < -2.5)
					{
						velocity.Y = -2.5f;
					}
				}
				else if (directionY == 1 && (double)velocity.Y < 2.5)
				{
					velocity.Y += 0.1f;
					if ((double)velocity.Y < -2.5)
					{
						velocity.Y += 0.05f;
					}
					else if (velocity.Y < 0f)
					{
						velocity.Y -= 0.03f;
					}
					if ((double)velocity.Y > 2.5)
					{
						velocity.Y = 2.5f;
					}
				}
			}
			else if (type == 660)
			{
				float num723 = 0.1f;
				float num724 = 0.04f;
				float num725 = 4f;
				float num726 = 1.5f;
				int num727 = type;
				if (num727 == 660)
				{
					num723 = 0.35f;
					num724 = 0.3f;
					num725 = 6f;
					num726 = 5f;
				}
				if (direction == -1 && velocity.X > 0f - num725)
				{
					velocity.X -= num723;
					if (velocity.X > num725)
					{
						velocity.X -= num723;
					}
					else if (velocity.X > 0f)
					{
						velocity.X += num723 * 0.5f;
					}
					if (velocity.X < 0f - num725)
					{
						velocity.X = 0f - num725;
					}
				}
				else if (direction == 1 && velocity.X < num725)
				{
					velocity.X += num723;
					if (velocity.X < 0f - num725)
					{
						velocity.X += num723;
					}
					else if (velocity.X < 0f)
					{
						velocity.X -= num723 * 0.5f;
					}
					if (velocity.X > num725)
					{
						velocity.X = num725;
					}
				}
				if (directionY == -1 && velocity.Y > 0f - num726)
				{
					velocity.Y -= num724;
					if (velocity.Y > num726)
					{
						velocity.Y -= num724;
					}
					else if (velocity.Y > 0f)
					{
						velocity.Y += num724 * 0.75f;
					}
					if (velocity.Y < 0f - num726)
					{
						velocity.Y = 0f - num726;
					}
				}
				else if (directionY == 1 && velocity.Y < num726)
				{
					velocity.Y += num724;
					if (velocity.Y < 0f - num726)
					{
						velocity.Y += num724;
					}
					else if (velocity.Y < 0f)
					{
						velocity.Y -= num724 * 0.75f;
					}
					if (velocity.Y > num726)
					{
						velocity.Y = num726;
					}
				}
			}
			else
			{
				if (direction == -1 && velocity.X > -4f)
				{
					velocity.X -= 0.1f;
					if (velocity.X > 4f)
					{
						velocity.X -= 0.1f;
					}
					else if (velocity.X > 0f)
					{
						velocity.X += 0.05f;
					}
					if (velocity.X < -4f)
					{
						velocity.X = -4f;
					}
				}
				else if (direction == 1 && velocity.X < 4f)
				{
					velocity.X += 0.1f;
					if (velocity.X < -4f)
					{
						velocity.X += 0.1f;
					}
					else if (velocity.X < 0f)
					{
						velocity.X -= 0.05f;
					}
					if (velocity.X > 4f)
					{
						velocity.X = 4f;
					}
				}
				if (directionY == -1 && (double)velocity.Y > -1.5)
				{
					velocity.Y -= 0.04f;
					if ((double)velocity.Y > 1.5)
					{
						velocity.Y -= 0.05f;
					}
					else if (velocity.Y > 0f)
					{
						velocity.Y += 0.03f;
					}
					if ((double)velocity.Y < -1.5)
					{
						velocity.Y = -1.5f;
					}
				}
				else if (directionY == 1 && (double)velocity.Y < 1.5)
				{
					velocity.Y += 0.04f;
					if ((double)velocity.Y < -1.5)
					{
						velocity.Y += 0.05f;
					}
					else if (velocity.Y < 0f)
					{
						velocity.Y -= 0.03f;
					}
					if ((double)velocity.Y > 1.5)
					{
						velocity.Y = 1.5f;
					}
				}
			}
			if (type == 49 || type == 51 || type == 60 || type == 62 || type == 66 || type == 93 || type == 137 || type == 150 || type == 151 || type == 152 || type == 634)
			{
				if (wet)
				{
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.95f;
					}
					velocity.Y -= 0.5f;
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
					TargetClosest();
				}
				if (type == 60)
				{
					if (direction == -1 && velocity.X > -4f)
					{
						velocity.X -= 0.1f;
						if (velocity.X > 4f)
						{
							velocity.X -= 0.07f;
						}
						else if (velocity.X > 0f)
						{
							velocity.X += 0.03f;
						}
						if (velocity.X < -4f)
						{
							velocity.X = -4f;
						}
					}
					else if (direction == 1 && velocity.X < 4f)
					{
						velocity.X += 0.1f;
						if (velocity.X < -4f)
						{
							velocity.X += 0.07f;
						}
						else if (velocity.X < 0f)
						{
							velocity.X -= 0.03f;
						}
						if (velocity.X > 4f)
						{
							velocity.X = 4f;
						}
					}
					if (directionY == -1 && (double)velocity.Y > -1.5)
					{
						velocity.Y -= 0.04f;
						if ((double)velocity.Y > 1.5)
						{
							velocity.Y -= 0.03f;
						}
						else if (velocity.Y > 0f)
						{
							velocity.Y += 0.02f;
						}
						if ((double)velocity.Y < -1.5)
						{
							velocity.Y = -1.5f;
						}
					}
					else if (directionY == 1 && (double)velocity.Y < 1.5)
					{
						velocity.Y += 0.04f;
						if ((double)velocity.Y < -1.5)
						{
							velocity.Y += 0.03f;
						}
						else if (velocity.Y < 0f)
						{
							velocity.Y -= 0.02f;
						}
						if ((double)velocity.Y > 1.5)
						{
							velocity.Y = 1.5f;
						}
					}
				}
				else
				{
					if (direction == -1 && velocity.X > -4f)
					{
						velocity.X -= 0.1f;
						if (velocity.X > 4f)
						{
							velocity.X -= 0.1f;
						}
						else if (velocity.X > 0f)
						{
							velocity.X += 0.05f;
						}
						if (velocity.X < -4f)
						{
							velocity.X = -4f;
						}
					}
					else if (direction == 1 && velocity.X < 4f)
					{
						velocity.X += 0.1f;
						if (velocity.X < -4f)
						{
							velocity.X += 0.1f;
						}
						else if (velocity.X < 0f)
						{
							velocity.X -= 0.05f;
						}
						if (velocity.X > 4f)
						{
							velocity.X = 4f;
						}
					}
					if (directionY == -1 && (double)velocity.Y > -1.5)
					{
						velocity.Y -= 0.04f;
						if ((double)velocity.Y > 1.5)
						{
							velocity.Y -= 0.05f;
						}
						else if (velocity.Y > 0f)
						{
							velocity.Y += 0.03f;
						}
						if ((double)velocity.Y < -1.5)
						{
							velocity.Y = -1.5f;
						}
					}
					else if (directionY == 1 && (double)velocity.Y < 1.5)
					{
						velocity.Y += 0.04f;
						if ((double)velocity.Y < -1.5)
						{
							velocity.Y += 0.05f;
						}
						else if (velocity.Y < 0f)
						{
							velocity.Y -= 0.03f;
						}
						if ((double)velocity.Y > 1.5)
						{
							velocity.Y = 1.5f;
						}
					}
				}
			}
			if (type == 48 && wet)
			{
				if (velocity.Y > 0f)
				{
					velocity.Y *= 0.95f;
				}
				velocity.Y -= 0.5f;
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
				TargetClosest();
			}
			if (type == 158 && Main.netMode != 1)
			{
				Vector2 vector179 = default(Vector2);
				((Vector2)(ref vector179))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num728 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector179.X;
				float num729 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector179.Y;
				float num731 = (float)Math.Sqrt(num728 * num728 + num729 * num729);
				if (num731 < 200f && position.Y + (float)height < Main.player[target].position.Y + (float)Main.player[target].height && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					Transform(159);
				}
			}
			this.ai[1] += 1f;
			if (type == 158)
			{
				this.ai[1] += 1f;
			}
			if (this.ai[1] > 200f)
			{
				if (!Main.player[target].wet && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					this.ai[1] = 0f;
				}
				float num732 = 0.2f;
				float num733 = 0.1f;
				float num734 = 4f;
				float num735 = 1.5f;
				if (type == 48 || type == 62 || type == 66)
				{
					num732 = 0.12f;
					num733 = 0.07f;
					num734 = 3f;
					num735 = 1.25f;
				}
				if (this.ai[1] > 1000f)
				{
					this.ai[1] = 0f;
				}
				this.ai[2] += 1f;
				if (this.ai[2] > 0f)
				{
					if (velocity.Y < num735)
					{
						velocity.Y += num733;
					}
				}
				else if (velocity.Y > 0f - num735)
				{
					velocity.Y -= num733;
				}
				if (this.ai[2] < -150f || this.ai[2] > 150f)
				{
					if (velocity.X < num734)
					{
						velocity.X += num732;
					}
				}
				else if (velocity.X > 0f - num734)
				{
					velocity.X -= num732;
				}
				if (this.ai[2] > 300f)
				{
					this.ai[2] = -300f;
				}
			}
			if (Main.netMode == 1)
			{
				return;
			}
			if (type == 48)
			{
				this.ai[0] += 1f;
				if (this.ai[0] == 30f || this.ai[0] == 60f || this.ai[0] == 90f)
				{
					if (Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						float num736 = 6f;
						Vector2 vector190 = default(Vector2);
						((Vector2)(ref vector190))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num737 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector190.X + (float)Main.rand.Next(-100, 101);
						float num738 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector190.Y + (float)Main.rand.Next(-100, 101);
						float num739 = (float)Math.Sqrt(num737 * num737 + num738 * num738);
						num739 = num736 / num739;
						num737 *= num739;
						num738 *= num739;
						int num740 = 15;
						int num742 = 38;
						int num743 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector190.X, vector190.Y, num737, num738, num742, num740, 0f, Main.myPlayer);
						Main.projectile[num743].timeLeft = 300;
					}
				}
				else if (this.ai[0] >= (float)(400 + Main.rand.Next(400)))
				{
					this.ai[0] = 0f;
				}
			}
			if (type == 62 || type == 66)
			{
				this.ai[0] += 1f;
				if (this.ai[0] == 20f || this.ai[0] == 40f || this.ai[0] == 60f || this.ai[0] == 80f)
				{
					if (Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						float num744 = 0.2f;
						Vector2 vector201 = default(Vector2);
						((Vector2)(ref vector201))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num745 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector201.X + (float)Main.rand.Next(-100, 101);
						float num746 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector201.Y + (float)Main.rand.Next(-100, 101);
						float num747 = (float)Math.Sqrt(num745 * num745 + num746 * num746);
						num747 = num744 / num747;
						num745 *= num747;
						num746 *= num747;
						int num748 = 21;
						int num749 = 44;
						int num750 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector201.X, vector201.Y, num745, num746, num749, num748, 0f, Main.myPlayer);
						Main.projectile[num750].timeLeft = 300;
					}
				}
				else if (this.ai[0] >= (float)(300 + Main.rand.Next(300)))
				{
					this.ai[0] = 0f;
				}
			}
			if (type != 156)
			{
				return;
			}
			this.ai[0] += 1f;
			if (this.ai[0] == 20f || this.ai[0] == 40f || this.ai[0] == 60f || this.ai[0] == 80f || this.ai[0] == 100f)
			{
				if (Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					float num751 = 0.2f;
					Vector2 vector212 = default(Vector2);
					((Vector2)(ref vector212))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num753 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector212.X + (float)Main.rand.Next(-50, 51);
					float num754 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector212.Y + (float)Main.rand.Next(-50, 51);
					float num755 = (float)Math.Sqrt(num753 * num753 + num754 * num754);
					num755 = num751 / num755;
					num753 *= num755;
					num754 *= num755;
					int num756 = 80;
					int num757 = 115;
					vector212 += velocity * 5f;
					int num758 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector212.X + num753 * 100f, vector212.Y + num754 * 100f, num753, num754, num757, num756, 0f, Main.myPlayer);
					Main.projectile[num758].timeLeft = 300;
				}
			}
			else if (this.ai[0] >= (float)(250 + Main.rand.Next(250)))
			{
				this.ai[0] = 0f;
			}
			return;
		}
		if (aiStyle == 15)
		{
			float num759 = 1f;
			float num760 = 1f;
			bool flag68 = false;
			bool flag79 = false;
			bool flag90 = false;
			float num761 = 2f;
			if (Main.getGoodWorld)
			{
				num761 -= 1f - (float)life / (float)lifeMax;
				num760 *= num761;
			}
			aiAction = 0;
			if (this.ai[3] == 0f && life > 0)
			{
				this.ai[3] = lifeMax;
			}
			if (localAI[3] == 0f)
			{
				localAI[3] = 1f;
				flag68 = true;
				if (Main.netMode != 1)
				{
					this.ai[0] = -100f;
					TargetClosest();
					netUpdate = true;
				}
			}
			int num762 = 3000;
			if (Main.player[target].dead || Vector2.Distance(base.Center, Main.player[target].Center) > (float)num762)
			{
				TargetClosest();
				if (Main.player[target].dead || Vector2.Distance(base.Center, Main.player[target].Center) > (float)num762)
				{
					EncourageDespawn(10);
					if (Main.player[target].Center.X < base.Center.X)
					{
						direction = 1;
					}
					else
					{
						direction = -1;
					}
					if (Main.netMode != 1 && this.ai[1] != 5f)
					{
						netUpdate = true;
						this.ai[2] = 0f;
						this.ai[0] = 0f;
						this.ai[1] = 5f;
						localAI[1] = Main.maxTilesX * 16;
						localAI[2] = Main.maxTilesY * 16;
					}
				}
			}
			if (!Main.player[target].dead && timeLeft > 10 && this.ai[2] >= 300f && this.ai[1] < 5f && velocity.Y == 0f)
			{
				this.ai[2] = 0f;
				this.ai[0] = 0f;
				this.ai[1] = 5f;
				if (Main.netMode != 1)
				{
					TargetClosest(faceTarget: false);
					Point point10 = base.Center.ToTileCoordinates();
					Point point11 = Main.player[target].Center.ToTileCoordinates();
					Vector2 vector224 = Main.player[target].Center - base.Center;
					int num764 = 10;
					int num765 = 0;
					int num766 = 7;
					int num767 = 0;
					bool flag101 = false;
					if (localAI[0] >= 360f || ((Vector2)(ref vector224)).Length() > 2000f)
					{
						if (localAI[0] >= 360f)
						{
							localAI[0] = 360f;
						}
						flag101 = true;
						num767 = 100;
					}
					while (!flag101 && num767 < 100)
					{
						num767++;
						int num768 = Main.rand.Next(point11.X - num764, point11.X + num764 + 1);
						int num769 = Main.rand.Next(point11.Y - num764, point11.Y + 1);
						if ((num769 >= point11.Y - num766 && num769 <= point11.Y + num766 && num768 >= point11.X - num766 && num768 <= point11.X + num766) || (num769 >= point10.Y - num765 && num769 <= point10.Y + num765 && num768 >= point10.X - num765 && num768 <= point10.X + num765) || Main.tile[num768, num769].nactive())
						{
							continue;
						}
						int num770 = num769;
						int num771 = 0;
						if (Main.tile[num768, num770].nactive() && Main.tileSolid[Main.tile[num768, num770].type] && !Main.tileSolidTop[Main.tile[num768, num770].type])
						{
							num771 = 1;
						}
						else
						{
							for (; num771 < 150 && num770 + num771 < Main.maxTilesY; num771++)
							{
								int num772 = num770 + num771;
								if (Main.tile[num768, num772].nactive() && Main.tileSolid[Main.tile[num768, num772].type] && !Main.tileSolidTop[Main.tile[num768, num772].type])
								{
									num771--;
									break;
								}
							}
						}
						num769 += num771;
						bool flag2 = true;
						if (flag2 && Main.tile[num768, num769].lava())
						{
							flag2 = false;
						}
						if (flag2 && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
						{
							flag2 = false;
						}
						if (flag2)
						{
							localAI[1] = num768 * 16 + 8;
							localAI[2] = num769 * 16 + 16;
							flag101 = true;
							break;
						}
					}
					if (num767 >= 100)
					{
						Vector2 bottom = Main.player[Player.FindClosest(position, width, height)].Bottom;
						localAI[1] = bottom.X;
						localAI[2] = bottom.Y;
					}
				}
			}
			if (!Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0) || Math.Abs(base.Top.Y - Main.player[target].Bottom.Y) > 160f)
			{
				this.ai[2]++;
				if (Main.netMode != 1)
				{
					localAI[0]++;
				}
			}
			else if (Main.netMode != 1)
			{
				localAI[0]--;
				if (localAI[0] < 0f)
				{
					localAI[0] = 0f;
				}
			}
			if (timeLeft < 10 && (this.ai[0] != 0f || this.ai[1] != 0f))
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				netUpdate = true;
				flag79 = false;
			}
			Dust dust26;
			Dust dust87;
			if (this.ai[1] == 5f)
			{
				flag79 = true;
				aiAction = 1;
				this.ai[0]++;
				num759 = MathHelper.Clamp((60f - this.ai[0]) / 60f, 0f, 1f);
				num759 = 0.5f + num759 * 0.5f;
				if (this.ai[0] >= 60f)
				{
					flag90 = true;
				}
				if (this.ai[0] == 60f)
				{
					Gore.NewGore(base.Center + new Vector2(-40f, (float)(-height / 2)), velocity, 734);
				}
				if (this.ai[0] >= 60f && Main.netMode != 1)
				{
					base.Bottom = new Vector2(localAI[1], localAI[2]);
					this.ai[1] = 6f;
					this.ai[0] = 0f;
					netUpdate = true;
				}
				if (Main.netMode == 1 && this.ai[0] >= 120f)
				{
					this.ai[1] = 6f;
					this.ai[0] = 0f;
				}
				if (!flag90)
				{
					for (int num773 = 0; num773 < 10; num773++)
					{
						int num775 = Dust.NewDust(position + Vector2.UnitX * -20f, width + 40, height, 4, velocity.X, velocity.Y, 150, new Color(78, 136, 255, 80), 2f);
						Main.dust[num775].noGravity = true;
						dust26 = Main.dust[num775];
						dust87 = dust26;
						dust87.velocity *= 0.5f;
					}
				}
			}
			else if (this.ai[1] == 6f)
			{
				flag79 = true;
				aiAction = 0;
				this.ai[0]++;
				num759 = MathHelper.Clamp(this.ai[0] / 30f, 0f, 1f);
				num759 = 0.5f + num759 * 0.5f;
				if (this.ai[0] >= 30f && Main.netMode != 1)
				{
					this.ai[1] = 0f;
					this.ai[0] = 0f;
					netUpdate = true;
					TargetClosest();
				}
				if (Main.netMode == 1 && this.ai[0] >= 60f)
				{
					this.ai[1] = 0f;
					this.ai[0] = 0f;
					TargetClosest();
				}
				for (int num776 = 0; num776 < 10; num776++)
				{
					int num777 = Dust.NewDust(position + Vector2.UnitX * -20f, width + 40, height, 4, velocity.X, velocity.Y, 150, new Color(78, 136, 255, 80), 2f);
					Main.dust[num777].noGravity = true;
					dust26 = Main.dust[num777];
					dust87 = dust26;
					dust87.velocity *= 2f;
				}
			}
			dontTakeDamage = (hide = flag90);
			if (velocity.Y == 0f)
			{
				velocity.X *= 0.8f;
				if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
				{
					velocity.X = 0f;
				}
				if (!flag79)
				{
					this.ai[0] += 2f;
					if ((double)life < (double)lifeMax * 0.8)
					{
						this.ai[0] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.6)
					{
						this.ai[0] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.4)
					{
						this.ai[0] += 2f;
					}
					if ((double)life < (double)lifeMax * 0.2)
					{
						this.ai[0] += 3f;
					}
					if ((double)life < (double)lifeMax * 0.1)
					{
						this.ai[0] += 4f;
					}
					if (this.ai[0] >= 0f)
					{
						netUpdate = true;
						TargetClosest();
						if (this.ai[1] == 3f)
						{
							velocity.Y = -13f;
							velocity.X += 3.5f * (float)direction;
							this.ai[0] = -200f;
							this.ai[1] = 0f;
						}
						else if (this.ai[1] == 2f)
						{
							velocity.Y = -6f;
							velocity.X += 4.5f * (float)direction;
							this.ai[0] = -120f;
							this.ai[1] += 1f;
						}
						else
						{
							velocity.Y = -8f;
							velocity.X += 4f * (float)direction;
							this.ai[0] = -120f;
							this.ai[1] += 1f;
						}
					}
					else if (this.ai[0] >= -30f)
					{
						aiAction = 1;
					}
				}
			}
			else if (target < 255)
			{
				float num778 = 3f;
				if (Main.getGoodWorld)
				{
					num778 = 6f;
				}
				if ((direction == 1 && velocity.X < num778) || (direction == -1 && velocity.X > 0f - num778))
				{
					if ((direction == -1 && (double)velocity.X < 0.1) || (direction == 1 && (double)velocity.X > -0.1))
					{
						velocity.X += 0.2f * (float)direction;
					}
					else
					{
						velocity.X *= 0.93f;
					}
				}
			}
			int num779 = Dust.NewDust(position, width, height, 4, velocity.X, velocity.Y, 255, new Color(0, 80, 255, 80), scale * 1.2f);
			Main.dust[num779].noGravity = true;
			dust26 = Main.dust[num779];
			dust87 = dust26;
			dust87.velocity *= 0.5f;
			if (life <= 0)
			{
				return;
			}
			float num780 = (float)life / (float)lifeMax;
			num780 = num780 * 0.5f + 0.75f;
			num780 *= num759;
			num780 *= num760;
			if (num780 != scale || flag68)
			{
				position.X += width / 2;
				position.Y += height;
				scale = num780;
				width = (int)(98f * scale);
				height = (int)(92f * scale);
				position.X -= width / 2;
				position.Y -= height;
			}
			if (Main.netMode == 1)
			{
				return;
			}
			int num781 = (int)((double)lifeMax * 0.05);
			if (!((float)(life + num781) < this.ai[3]))
			{
				return;
			}
			this.ai[3] = life;
			int num782 = Main.rand.Next(1, 4);
			for (int num783 = 0; num783 < num782; num783++)
			{
				int x = (int)(position.X + (float)Main.rand.Next(width - 32));
				int y = (int)(position.Y + (float)Main.rand.Next(height - 32));
				int num784 = 1;
				if (Main.expertMode && Main.rand.Next(4) == 0)
				{
					num784 = 535;
				}
				int num786 = NewNPC(GetSpawnSourceForProjectileNPC(), x, y, num784);
				Main.npc[num786].SetDefaults(num784);
				Main.npc[num786].velocity.X = (float)Main.rand.Next(-15, 16) * 0.1f;
				Main.npc[num786].velocity.Y = (float)Main.rand.Next(-30, 1) * 0.1f;
				Main.npc[num786].ai[0] = -1000 * Main.rand.Next(3);
				Main.npc[num786].ai[1] = 0f;
				if (Main.netMode == 2 && num786 < 200)
				{
					NetMessage.SendData(23, -1, -1, null, num786);
				}
			}
			return;
		}
		if (aiStyle == 16)
		{
			if (direction == 0)
			{
				TargetClosest();
			}
			if (type == 615)
			{
				if (this.ai[2] == 0f)
				{
					int num787 = Main.rand.Next(300, 1200);
					if ((this.ai[3] += 1f) >= (float)num787)
					{
						this.ai[2] = Main.rand.Next(1, 3);
						if (this.ai[2] == 1f && !Collision.CanHitLine(position, width, height, new Vector2(position.X, position.Y - 128f), width, height))
						{
							this.ai[2] = 2f;
						}
						if (this.ai[2] == 2f)
						{
							TargetClosest();
						}
						this.ai[3] = 0f;
						netUpdate = true;
					}
				}
				if (this.ai[2] == 1f)
				{
					if (collideY || collideX)
					{
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					else if (wet)
					{
						velocity.Y -= 0.4f;
						if (velocity.Y < -6f)
						{
							velocity.Y = -6f;
						}
						rotation = velocity.Y * (float)direction * 0.3f;
						if (rotation < (float)Math.PI * -2f / 5f)
						{
							rotation = (float)Math.PI * -2f / 5f;
						}
						if (rotation > (float)Math.PI * 2f / 5f)
						{
							rotation = (float)Math.PI * 2f / 5f;
						}
						if (this.ai[3] == 1f)
						{
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
					}
					else
					{
						rotation += (float)direction * 0.2f;
						this.ai[3] = 1f;
						velocity.Y += 0.3f;
						if (velocity.Y > 10f)
						{
							velocity.Y = 10f;
						}
					}
					return;
				}
				if (this.ai[2] == 2f)
				{
					if (collideY || collideX)
					{
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					else if (wet)
					{
						velocity.Y -= 0.4f;
						if (velocity.Y < -6f)
						{
							velocity.Y = -6f;
						}
						rotation = velocity.Y * (float)direction * 0.3f;
						if (rotation < (float)Math.PI * -2f / 5f)
						{
							rotation = (float)Math.PI * -2f / 5f;
						}
						if (rotation > (float)Math.PI * 2f / 5f)
						{
							rotation = (float)Math.PI * 2f / 5f;
						}
						if (Collision.GetWaterLine(base.Top.ToTileCoordinates(), out var waterLineHeight))
						{
							float y2 = waterLineHeight + 0f - position.Y;
							velocity.Y = y2;
							velocity.Y = MathHelper.Clamp(velocity.Y, -2f, 0.5f);
							rotation = -(float)Math.PI / 5f * (float)direction;
							velocity.X *= 0.95f;
							if (this.ai[3] == 0f)
							{
								netUpdate = true;
							}
							this.ai[3]++;
							if (this.ai[3] >= 300f)
							{
								this.ai[2] = 0f;
								this.ai[3] = 0f;
								netUpdate = true;
								velocity.Y = 4f;
							}
							if (this.ai[3] == 60f && Main.rand.Next(2) == 0)
							{
								SoundEngine.PlaySound(45, (int)position.X, (int)position.Y);
							}
						}
					}
					else
					{
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
						velocity.Y += 0.3f;
						if (velocity.Y > 10f)
						{
							velocity.Y = 10f;
						}
					}
					return;
				}
			}
			if (wet)
			{
				bool flag13 = false;
				if (type != 55 && type != 592 && type != 607 && type != 615)
				{
					TargetClosest(faceTarget: false);
					if (Main.player[target].wet && !Main.player[target].dead && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						flag13 = true;
					}
				}
				int num788 = (int)base.Center.X / 16;
				int num789 = (int)(position.Y + (float)height) / 16;
				if (Main.tile[num788, num789].topSlope())
				{
					if (Main.tile[num788, num789].leftSlope())
					{
						direction = -1;
						velocity.X = Math.Abs(velocity.X) * -1f;
					}
					else
					{
						direction = 1;
						velocity.X = Math.Abs(velocity.X);
					}
				}
				else if (Main.tile[num788, num789 + 1].topSlope())
				{
					if (Main.tile[num788, num789 + 1].leftSlope())
					{
						direction = -1;
						velocity.X = Math.Abs(velocity.X) * -1f;
					}
					else
					{
						direction = 1;
						velocity.X = Math.Abs(velocity.X);
					}
				}
				if (!flag13)
				{
					if (collideX)
					{
						velocity.X *= -1f;
						direction *= -1;
						netUpdate = true;
					}
					if (collideY)
					{
						netUpdate = true;
						if (velocity.Y > 0f)
						{
							velocity.Y = Math.Abs(velocity.Y) * -1f;
							directionY = -1;
							this.ai[0] = -1f;
						}
						else if (velocity.Y < 0f)
						{
							velocity.Y = Math.Abs(velocity.Y);
							directionY = 1;
							this.ai[0] = 1f;
						}
					}
				}
				if (type == 102)
				{
					Lighting.AddLight((int)(position.X + (float)(width / 2) + (float)(direction * (width + 8))) / 16, (int)(position.Y + 2f) / 16, 0.07f, 0.04f, 0.025f);
				}
				if (flag13)
				{
					TargetClosest();
					if (type == 157)
					{
						if (velocity.X > 0f && direction < 0)
						{
							velocity.X *= 0.95f;
						}
						if (velocity.X < 0f && direction > 0)
						{
							velocity.X *= 0.95f;
						}
						velocity.X += (float)direction * 0.25f;
						velocity.Y += (float)directionY * 0.2f;
						if (velocity.X > 8f)
						{
							velocity.X = 7f;
						}
						if (velocity.X < -8f)
						{
							velocity.X = -7f;
						}
						if (velocity.Y > 5f)
						{
							velocity.Y = 4f;
						}
						if (velocity.Y < -5f)
						{
							velocity.Y = -4f;
						}
					}
					else if (type == 65 || type == 102)
					{
						velocity.X += (float)direction * 0.15f;
						velocity.Y += (float)directionY * 0.15f;
						if (velocity.X > 5f)
						{
							velocity.X = 5f;
						}
						if (velocity.X < -5f)
						{
							velocity.X = -5f;
						}
						if (velocity.Y > 3f)
						{
							velocity.Y = 3f;
						}
						if (velocity.Y < -3f)
						{
							velocity.Y = -3f;
						}
					}
					else
					{
						velocity.X += (float)direction * 0.1f;
						velocity.Y += (float)directionY * 0.1f;
						if (velocity.X > 3f)
						{
							velocity.X = 3f;
						}
						if (velocity.X < -3f)
						{
							velocity.X = -3f;
						}
						if (velocity.Y > 2f)
						{
							velocity.Y = 2f;
						}
						if (velocity.Y < -2f)
						{
							velocity.Y = -2f;
						}
					}
				}
				else
				{
					if (type == 157)
					{
						if (Main.player[target].position.Y > position.Y)
						{
							directionY = 1;
						}
						else
						{
							directionY = -1;
						}
						velocity.X += (float)direction * 0.2f;
						if (velocity.X < -2f || velocity.X > 2f)
						{
							velocity.X *= 0.95f;
						}
						if (this.ai[0] == -1f)
						{
							float num790 = -0.6f;
							if (directionY < 0)
							{
								num790 = -1f;
							}
							if (directionY > 0)
							{
								num790 = -0.2f;
							}
							velocity.Y -= 0.02f;
							if (velocity.Y < num790)
							{
								this.ai[0] = 1f;
							}
						}
						else
						{
							float num791 = 0.6f;
							if (directionY < 0)
							{
								num791 = 0.2f;
							}
							if (directionY > 0)
							{
								num791 = 1f;
							}
							velocity.Y += 0.02f;
							if (velocity.Y > num791)
							{
								this.ai[0] = -1f;
							}
						}
					}
					else
					{
						velocity.X += (float)direction * 0.1f;
						float num792 = 1f;
						if (type == 615)
						{
							num792 = 3f;
						}
						if (velocity.X < 0f - num792 || velocity.X > num792)
						{
							velocity.X *= 0.95f;
						}
						if (this.ai[0] == -1f)
						{
							velocity.Y -= 0.01f;
							if ((double)velocity.Y < -0.3)
							{
								this.ai[0] = 1f;
							}
						}
						else
						{
							velocity.Y += 0.01f;
							if ((double)velocity.Y > 0.3)
							{
								this.ai[0] = -1f;
							}
						}
					}
					int num793 = (int)(position.X + (float)(width / 2)) / 16;
					int num794 = (int)(position.Y + (float)(height / 2)) / 16;
					if (Main.tile[num793, num794 - 1] == null)
					{
						Main.tile[num793, num794 - 1] = default(Tile);
					}
					if (Main.tile[num793, num794 + 1] == null)
					{
						Main.tile[num793, num794 + 1] = default(Tile);
					}
					if (Main.tile[num793, num794 + 2] == null)
					{
						Main.tile[num793, num794 + 2] = default(Tile);
					}
					if (Main.tile[num793, num794 - 1].liquid > 128)
					{
						if (Main.tile[num793, num794 + 1].active())
						{
							this.ai[0] = -1f;
						}
						else if (Main.tile[num793, num794 + 2].active())
						{
							this.ai[0] = -1f;
						}
					}
					if (type != 157 && ((double)velocity.Y > 0.4 || (double)velocity.Y < -0.4))
					{
						velocity.Y *= 0.95f;
					}
				}
			}
			else
			{
				if (velocity.Y == 0f)
				{
					if (type == 65)
					{
						velocity.X *= 0.94f;
						if ((double)velocity.X > -0.2 && (double)velocity.X < 0.2)
						{
							velocity.X = 0f;
						}
					}
					else if (Main.netMode != 1)
					{
						velocity.Y = (float)Main.rand.Next(-50, -20) * 0.1f;
						velocity.X = (float)Main.rand.Next(-20, 20) * 0.1f;
						netUpdate = true;
					}
				}
				velocity.Y += 0.3f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
				this.ai[0] = 1f;
			}
			rotation = velocity.Y * (float)direction * 0.1f;
			if ((double)rotation < -0.2)
			{
				rotation = -0.2f;
			}
			if ((double)rotation > 0.2)
			{
				rotation = 0.2f;
			}
			return;
		}
		Rectangle val38;
		if (aiStyle == 17)
		{
			noGravity = true;
			if (this.ai[0] == 0f)
			{
				noGravity = false;
				TargetClosest();
				if (Main.netMode != 1)
				{
					if (velocity.X != 0f || velocity.Y < 0f || (double)velocity.Y > 0.3)
					{
						this.ai[0] = 1f;
						netUpdate = true;
					}
					else
					{
						Rectangle rectangle = default(Rectangle);
						((Rectangle)(ref rectangle))._002Ector((int)Main.player[target].position.X, (int)Main.player[target].position.Y, Main.player[target].width, Main.player[target].height);
						val38 = new Rectangle((int)position.X - 100, (int)position.Y - 100, width + 200, height + 200);
						if (((Rectangle)(ref val38)).Intersects(rectangle) || life < lifeMax)
						{
							this.ai[0] = 1f;
							velocity.Y -= 6f;
							netUpdate = true;
						}
					}
				}
			}
			else if (!Main.player[target].dead)
			{
				if (collideX)
				{
					velocity.X = oldVelocity.X * -0.5f;
					if (direction == -1 && velocity.X > 0f && velocity.X < 2f)
					{
						velocity.X = 2f;
					}
					if (direction == 1 && velocity.X < 0f && velocity.X > -2f)
					{
						velocity.X = -2f;
					}
				}
				if (collideY)
				{
					velocity.Y = oldVelocity.Y * -0.5f;
					if (velocity.Y > 0f && velocity.Y < 1f)
					{
						velocity.Y = 1f;
					}
					if (velocity.Y < 0f && velocity.Y > -1f)
					{
						velocity.Y = -1f;
					}
				}
				TargetClosest();
				if (direction == -1 && velocity.X > -3f)
				{
					velocity.X -= 0.1f;
					if (velocity.X > 3f)
					{
						velocity.X -= 0.1f;
					}
					else if (velocity.X > 0f)
					{
						velocity.X -= 0.05f;
					}
					if (velocity.X < -3f)
					{
						velocity.X = -3f;
					}
				}
				else if (direction == 1 && velocity.X < 3f)
				{
					velocity.X += 0.1f;
					if (velocity.X < -3f)
					{
						velocity.X += 0.1f;
					}
					else if (velocity.X < 0f)
					{
						velocity.X += 0.05f;
					}
					if (velocity.X > 3f)
					{
						velocity.X = 3f;
					}
				}
				float num795 = Math.Abs(position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2)));
				float num797 = Main.player[target].position.Y - (float)(height / 2);
				if (num795 > 50f)
				{
					num797 -= 100f;
				}
				if (position.Y < num797)
				{
					velocity.Y += 0.05f;
					if (velocity.Y < 0f)
					{
						velocity.Y += 0.01f;
					}
				}
				else
				{
					velocity.Y -= 0.05f;
					if (velocity.Y > 0f)
					{
						velocity.Y -= 0.01f;
					}
				}
				if (velocity.Y < -3f)
				{
					velocity.Y = -3f;
				}
				if (velocity.Y > 3f)
				{
					velocity.Y = 3f;
				}
			}
			if (wet)
			{
				if (velocity.Y > 0f)
				{
					velocity.Y *= 0.95f;
				}
				velocity.Y -= 0.5f;
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
				TargetClosest();
			}
			return;
		}
		if (aiStyle == 18)
		{
			bool flag16 = false;
			if (wet && this.ai[1] == 1f)
			{
				flag16 = true;
			}
			else
			{
				dontTakeDamage = false;
			}
			if (Main.expertMode && (type == 63 || type == 64 || type == 103 || type == 242))
			{
				if (wet)
				{
					if (target >= 0 && Main.player[target].wet && !Main.player[target].dead && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						val29 = Main.player[target].Center - base.Center;
						if (((Vector2)(ref val29)).Length() < 150f)
						{
							if (this.ai[1] == 0f)
							{
								this.ai[2] += 2f;
							}
							else
							{
								this.ai[2] -= 0.25f;
							}
						}
					}
					if (flag16)
					{
						dontTakeDamage = true;
						this.ai[2] += 1f;
						if (this.ai[2] >= 120f)
						{
							this.ai[1] = 0f;
						}
					}
					else
					{
						this.ai[2] += 1f;
						if (this.ai[2] >= 420f)
						{
							this.ai[1] = 1f;
							this.ai[2] = 0f;
						}
					}
				}
				else
				{
					this.ai[1] = 0f;
					this.ai[2] = 0f;
				}
			}
			float num798 = 1f;
			if (flag16)
			{
				num798 += 0.5f;
			}
			if (type == 63)
			{
				Lighting.AddLight((int)(position.X + (float)(height / 2)) / 16, (int)(position.Y + (float)(height / 2)) / 16, 0.05f * num798, 0.15f * num798, 0.4f * num798);
			}
			else if (type == 103)
			{
				Lighting.AddLight((int)(position.X + (float)(height / 2)) / 16, (int)(position.Y + (float)(height / 2)) / 16, 0.05f * num798, 0.45f * num798, 0.1f * num798);
			}
			else if (type != 221 && type != 242)
			{
				Lighting.AddLight((int)(position.X + (float)(height / 2)) / 16, (int)(position.Y + (float)(height / 2)) / 16, 0.35f * num798, 0.05f * num798, 0.2f * num798);
			}
			if (direction == 0)
			{
				TargetClosest();
			}
			if (flag16)
			{
				return;
			}
			if (wet)
			{
				int num799 = (int)base.Center.X / 16;
				int num800 = (int)(position.Y + (float)height) / 16;
				if (Main.tile[num799, num800].topSlope())
				{
					if (Main.tile[num799, num800].leftSlope())
					{
						direction = -1;
						velocity.X = Math.Abs(velocity.X) * -1f;
					}
					else
					{
						direction = 1;
						velocity.X = Math.Abs(velocity.X);
					}
				}
				else if (Main.tile[num799, num800 + 1].topSlope())
				{
					if (Main.tile[num799, num800 + 1].leftSlope())
					{
						direction = -1;
						velocity.X = Math.Abs(velocity.X) * -1f;
					}
					else
					{
						direction = 1;
						velocity.X = Math.Abs(velocity.X);
					}
				}
				if (collideX)
				{
					velocity.X *= -1f;
					direction *= -1;
				}
				if (collideY)
				{
					if (velocity.Y > 0f)
					{
						velocity.Y = Math.Abs(velocity.Y) * -1f;
						directionY = -1;
						this.ai[0] = -1f;
					}
					else if (velocity.Y < 0f)
					{
						velocity.Y = Math.Abs(velocity.Y);
						directionY = 1;
						this.ai[0] = 1f;
					}
				}
				bool flag17 = false;
				if (!friendly)
				{
					TargetClosest(faceTarget: false);
					if (Main.player[target].wet && !Main.player[target].dead && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						flag17 = true;
					}
				}
				if (flag17)
				{
					localAI[2] = 1f;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
					velocity *= 0.98f;
					float num801 = 0.2f;
					if (type == 103)
					{
						velocity *= 0.98f;
						num801 = 0.6f;
					}
					if (type == 221)
					{
						velocity *= 0.99f;
						num801 = 1f;
					}
					if (type == 242)
					{
						velocity *= 0.995f;
						num801 = 3f;
					}
					if (velocity.X > 0f - num801 && velocity.X < num801 && velocity.Y > 0f - num801 && velocity.Y < num801)
					{
						if (type == 221)
						{
							localAI[0] = 1f;
						}
						TargetClosest();
						float num802 = 7f;
						if (type == 103)
						{
							num802 = 9f;
						}
						Vector2 vector235 = default(Vector2);
						((Vector2)(ref vector235))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num803 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector235.X;
						float num804 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector235.Y;
						float num805 = (float)Math.Sqrt(num803 * num803 + num804 * num804);
						num805 = num802 / num805;
						num803 *= num805;
						num804 *= num805;
						velocity.X = num803;
						velocity.Y = num804;
					}
					return;
				}
				localAI[2] = 0f;
				velocity.X += (float)direction * 0.02f;
				rotation = velocity.X * 0.4f;
				if (velocity.X < -1f || velocity.X > 1f)
				{
					velocity.X *= 0.95f;
				}
				if (this.ai[0] == -1f)
				{
					velocity.Y -= 0.01f;
					if (velocity.Y < -1f)
					{
						this.ai[0] = 1f;
					}
				}
				else
				{
					velocity.Y += 0.01f;
					if (velocity.Y > 1f)
					{
						this.ai[0] = -1f;
					}
				}
				int num806 = (int)(position.X + (float)(width / 2)) / 16;
				int num808 = (int)(position.Y + (float)(height / 2)) / 16;
				if (Main.tile[num806, num808 - 1] == null)
				{
					Main.tile[num806, num808 - 1] = default(Tile);
				}
				if (Main.tile[num806, num808 + 1] == null)
				{
					Main.tile[num806, num808 + 1] = default(Tile);
				}
				if (Main.tile[num806, num808 + 2] == null)
				{
					Main.tile[num806, num808 + 2] = default(Tile);
				}
				if (Main.tile[num806, num808 - 1].liquid > 128)
				{
					if (Main.tile[num806, num808 + 1].active())
					{
						this.ai[0] = -1f;
					}
					else if (Main.tile[num806, num808 + 2].active())
					{
						this.ai[0] = -1f;
					}
				}
				else
				{
					this.ai[0] = 1f;
				}
				if ((double)velocity.Y > 1.2 || (double)velocity.Y < -1.2)
				{
					velocity.Y *= 0.99f;
				}
				return;
			}
			rotation += velocity.X * 0.1f;
			if (velocity.Y == 0f)
			{
				velocity.X *= 0.98f;
				if ((double)velocity.X > -0.01 && (double)velocity.X < 0.01)
				{
					velocity.X = 0f;
				}
			}
			velocity.Y += 0.2f;
			if (velocity.Y > 10f)
			{
				velocity.Y = 10f;
			}
			this.ai[0] = 1f;
			return;
		}
		if (aiStyle == 19)
		{
			TargetClosest();
			float num809 = 12f;
			Vector2 vector244 = default(Vector2);
			((Vector2)(ref vector244))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num810 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector244.X;
			float num811 = Main.player[target].position.Y - vector244.Y;
			float num812 = (float)Math.Sqrt(num810 * num810 + num811 * num811);
			num812 = num809 / num812;
			num810 *= num812;
			num811 *= num812;
			bool flag18 = false;
			if (directionY < 0)
			{
				rotation = (float)(Math.Atan2(num811, num810) + 1.57);
				flag18 = ((!((double)rotation < -1.2) && !((double)rotation > 1.2)) ? true : false);
				if ((double)rotation < -0.8)
				{
					rotation = -0.8f;
				}
				else if ((double)rotation > 0.8)
				{
					rotation = 0.8f;
				}
				if (velocity.X != 0f)
				{
					velocity.X *= 0.9f;
					if ((double)velocity.X > -0.1 || (double)velocity.X < 0.1)
					{
						netUpdate = true;
						velocity.X = 0f;
					}
				}
			}
			if (this.ai[0] > 0f)
			{
				if (this.ai[0] == 200f)
				{
					SoundEngine.PlaySound(in SoundID.Item5, position);
				}
				this.ai[0] -= 1f;
			}
			if (Main.netMode != 1 && flag18 && this.ai[0] == 0f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
			{
				this.ai[0] = 200f;
				int num813 = 10;
				int num814 = 31;
				int num815 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector244.X, vector244.Y, num810, num811, num814, num813, 0f, Main.myPlayer);
				Main.projectile[num815].ai[0] = 2f;
				Main.projectile[num815].timeLeft = 300;
				Main.projectile[num815].friendly = false;
				NetMessage.SendData(27, -1, -1, null, num815);
				netUpdate = true;
			}
			try
			{
				int num816 = (int)position.X / 16;
				int num817 = (int)(position.X + (float)(width / 2)) / 16;
				int num819 = (int)(position.X + (float)width) / 16;
				int num820 = (int)(position.Y + (float)height) / 16;
				bool flag19 = false;
				if (Main.tile[num816, num820] == null)
				{
					Main.tile[num816, num820] = default(Tile);
				}
				if (Main.tile[num817, num820] == null)
				{
					Main.tile[num816, num820] = default(Tile);
				}
				if (Main.tile[num819, num820] == null)
				{
					Main.tile[num816, num820] = default(Tile);
				}
				if ((Main.tile[num816, num820].nactive() && Main.tileSolid[Main.tile[num816, num820].type]) || (Main.tile[num817, num820].nactive() && Main.tileSolid[Main.tile[num817, num820].type]) || (Main.tile[num819, num820].nactive() && Main.tileSolid[Main.tile[num819, num820].type]))
				{
					flag19 = true;
				}
				if (flag19)
				{
					noGravity = true;
					noTileCollide = true;
					velocity.Y = -0.2f;
					return;
				}
				noGravity = false;
				noTileCollide = false;
				if (Main.rand.Next(2) == 0)
				{
					position += netOffset;
					Vector2 val39 = new Vector2(position.X - 4f, position.Y + (float)height - 8f);
					int num1671 = width + 8;
					float speedY15 = velocity.Y / 2f;
					newColor = default(Color);
					int num821 = Dust.NewDust(val39, num1671, 24, 32, 0f, speedY15, 0, newColor);
					Main.dust[num821].velocity.X *= 0.4f;
					Main.dust[num821].velocity.Y *= -1f;
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num821].noGravity = true;
						Dust dust27 = Main.dust[num821];
						Dust dust87 = dust27;
						dust87.scale += 0.2f;
					}
					position -= netOffset;
				}
				return;
			}
			catch
			{
				return;
			}
		}
		if (aiStyle == 20)
		{
			if (this.ai[0] == 0f)
			{
				if (Main.netMode != 1)
				{
					TargetClosest();
					direction *= -1;
					directionY *= -1;
					position.Y += height / 2 + 8;
					this.ai[1] = position.X + (float)(width / 2);
					this.ai[2] = position.Y + (float)(height / 2);
					if (direction == 0)
					{
						direction = 1;
					}
					if (directionY == 0)
					{
						directionY = 1;
					}
					this.ai[3] = 1f + (float)Main.rand.Next(15) * 0.1f;
					velocity.Y = (float)(directionY * 6) * this.ai[3];
					this.ai[0] += 1f;
					netUpdate = true;
				}
				else
				{
					this.ai[1] = position.X + (float)(width / 2);
					this.ai[2] = position.Y + (float)(height / 2);
				}
				return;
			}
			float num822 = 6f * this.ai[3];
			float num823 = 0.2f * this.ai[3];
			float num824 = num822 / num823 / 2f;
			if (this.ai[0] >= 1f && this.ai[0] < (float)(int)num824)
			{
				velocity.Y = (float)directionY * num822;
				this.ai[0] += 1f;
				return;
			}
			if (this.ai[0] >= (float)(int)num824)
			{
				velocity.Y = 0f;
				directionY *= -1;
				velocity.X = num822 * (float)direction;
				this.ai[0] = -1f;
				return;
			}
			if (directionY > 0)
			{
				if (velocity.Y >= num822)
				{
					directionY *= -1;
					velocity.Y = num822;
				}
			}
			else if (directionY < 0 && velocity.Y <= 0f - num822)
			{
				directionY *= -1;
				velocity.Y = 0f - num822;
			}
			if (direction > 0)
			{
				if (velocity.X >= num822)
				{
					direction *= -1;
					velocity.X = num822;
				}
			}
			else if (direction < 0 && velocity.X <= 0f - num822)
			{
				direction *= -1;
				velocity.X = 0f - num822;
			}
			velocity.X += num823 * (float)direction;
			velocity.Y += num823 * (float)directionY;
		}
		else if (aiStyle == 21)
		{
			if (this.ai[0] == 0f)
			{
				TargetClosest();
				directionY = 1;
				this.ai[0] = 1f;
			}
			int num825 = 6;
			if (this.ai[1] == 0f)
			{
				rotation += (float)(direction * directionY) * 0.13f;
				if (collideY)
				{
					this.ai[0] = 2f;
				}
				if (!collideY && this.ai[0] == 2f)
				{
					direction = -direction;
					this.ai[1] = 1f;
					this.ai[0] = 1f;
				}
				if (collideX)
				{
					directionY = -directionY;
					this.ai[1] = 1f;
				}
			}
			else
			{
				rotation -= (float)(direction * directionY) * 0.13f;
				if (collideX)
				{
					this.ai[0] = 2f;
				}
				if (!collideX && this.ai[0] == 2f)
				{
					directionY = -directionY;
					this.ai[1] = 0f;
					this.ai[0] = 1f;
				}
				if (collideY)
				{
					direction = -direction;
					this.ai[1] = 0f;
				}
			}
			velocity.X = num825 * direction;
			velocity.Y = num825 * directionY;
			float num826 = (float)(270 - Main.mouseTextColor) / 400f;
			Lighting.AddLight((int)(position.X + (float)(width / 2)) / 16, (int)(position.Y + (float)(height / 2)) / 16, 0.9f, 0.3f + num826, 0.2f);
		}
		else if (aiStyle == 22)
		{
			bool flag20 = false;
			bool flag21 = type == 330 && !Main.pumpkinMoon;
			if (type == 253 && !Main.eclipse)
			{
				flag21 = true;
			}
			if (type == 490 && Main.dayTime)
			{
				flag21 = true;
			}
			if (justHit)
			{
				this.ai[2] = 0f;
			}
			if (type == 316 && (Main.player[target].dead || Vector2.Distance(base.Center, Main.player[target].Center) > 3000f))
			{
				TargetClosest();
				if (Main.player[target].dead || Vector2.Distance(base.Center, Main.player[target].Center) > 3000f)
				{
					EncourageDespawn(10);
					flag20 = true;
					flag21 = true;
				}
			}
			if (flag21)
			{
				if (velocity.X == 0f)
				{
					velocity.X = (float)Main.rand.Next(-1, 2) * 1.5f;
					netUpdate = true;
				}
			}
			else if (this.ai[2] >= 0f)
			{
				int num827 = 16;
				bool flag22 = false;
				bool flag23 = false;
				if (position.X > this.ai[0] - (float)num827 && position.X < this.ai[0] + (float)num827)
				{
					flag22 = true;
				}
				else if ((velocity.X < 0f && direction > 0) || (velocity.X > 0f && direction < 0))
				{
					flag22 = true;
				}
				num827 += 24;
				if (position.Y > this.ai[1] - (float)num827 && position.Y < this.ai[1] + (float)num827)
				{
					flag23 = true;
				}
				if (flag22 && flag23)
				{
					this.ai[2] += 1f;
					if (this.ai[2] >= 30f && num827 == 16)
					{
						flag20 = true;
					}
					if (this.ai[2] >= 60f)
					{
						this.ai[2] = -200f;
						direction *= -1;
						velocity.X *= -1f;
						collideX = false;
					}
				}
				else
				{
					this.ai[0] = position.X;
					this.ai[1] = position.Y;
					this.ai[2] = 0f;
				}
				TargetClosest();
			}
			else if (type == 253)
			{
				TargetClosest();
				this.ai[2] += 2f;
			}
			else
			{
				if (type == 330)
				{
					this.ai[2] += 0.1f;
				}
				else
				{
					this.ai[2] += 1f;
				}
				if (Main.player[target].position.X + (float)(Main.player[target].width / 2) > position.X + (float)(width / 2))
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
			}
			int num828 = (int)((position.X + (float)(width / 2)) / 16f) + direction * 2;
			int num831 = (int)((position.Y + (float)height) / 16f);
			bool flag25 = true;
			bool flag26 = false;
			int num832 = 3;
			if (type == 122)
			{
				if (justHit)
				{
					this.ai[3] = 0f;
					localAI[1] = 0f;
				}
				if (Main.netMode != 1 && this.ai[3] == 32f && !Main.player[target].npcTypeNoAggro[type])
				{
					float num833 = 7f;
					Vector2 vector245 = default(Vector2);
					((Vector2)(ref vector245))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num834 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector245.X;
					float num835 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector245.Y;
					float num836 = (float)Math.Sqrt(num834 * num834 + num835 * num835);
					float num837 = num836;
					num836 = num833 / num836;
					num834 *= num836;
					num835 *= num836;
					float num838 = 0.0125f;
					Vector2 vector246 = Utils.RotatedByRandom(new Vector2(num834, num835), num838 * ((float)Math.PI * 2f));
					num834 = vector246.X;
					num835 = vector246.Y;
					int num839 = 25;
					int num840 = 84;
					int num842 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector245.X, vector245.Y, num834, num835, num840, num839, 0f, Main.myPlayer);
				}
				num832 = 8;
				if (this.ai[3] > 0f)
				{
					this.ai[3] += 1f;
					if (this.ai[3] >= 64f)
					{
						this.ai[3] = 0f;
					}
				}
				if (Main.netMode != 1 && this.ai[3] == 0f)
				{
					localAI[1] += 1f;
					if (localAI[1] > 120f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && !Main.player[target].npcTypeNoAggro[type])
					{
						localAI[1] = 0f;
						this.ai[3] = 1f;
						netUpdate = true;
					}
				}
			}
			else if (type == 75)
			{
				num832 = 4;
				position += netOffset;
				if (Main.rand.Next(6) == 0)
				{
					int num843 = Dust.NewDust(position, width, height, 55, 0f, 0f, 200, this.color);
					Dust dust31 = Main.dust[num843];
					Dust dust87 = dust31;
					dust87.velocity *= 0.3f;
				}
				if (Main.rand.Next(40) == 0)
				{
					SoundEngine.PlaySound(27, (int)position.X, (int)position.Y);
				}
				position -= netOffset;
			}
			else if (type == 169)
			{
				position += netOffset;
				Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), 0f, 0.6f, 0.75f);
				alpha = 30;
				if (Main.rand.Next(3) == 0)
				{
					Vector2 val40 = position;
					int num1672 = width;
					int num1673 = height;
					newColor = default(Color);
					int num844 = Dust.NewDust(val40, num1672, num1673, 92, 0f, 0f, 200, newColor);
					Dust dust33 = Main.dust[num844];
					Dust dust87 = dust33;
					dust87.velocity *= 0.3f;
					Main.dust[num844].noGravity = true;
				}
				position -= netOffset;
				if (justHit)
				{
					this.ai[3] = 0f;
					localAI[1] = 0f;
				}
				float num845 = 5f;
				Vector2 vector247 = default(Vector2);
				((Vector2)(ref vector247))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num846 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector247.X;
				float num847 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector247.Y;
				float num848 = (float)Math.Sqrt(num846 * num846 + num847 * num847);
				float num849 = num848;
				num848 = num845 / num848;
				num846 *= num848;
				num847 *= num848;
				if (num846 > 0f)
				{
					direction = 1;
				}
				else
				{
					direction = -1;
				}
				spriteDirection = direction;
				if (direction < 0)
				{
					rotation = (float)Math.Atan2(0f - num847, 0f - num846);
				}
				else
				{
					rotation = (float)Math.Atan2(num847, num846);
				}
				if (Main.netMode != 1 && this.ai[3] == 16f)
				{
					int num850 = 45;
					int num851 = 128;
					int num853 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector247.X, vector247.Y, num846, num847, num851, num850, 0f, Main.myPlayer);
				}
				num832 = 10;
				if (this.ai[3] > 0f)
				{
					this.ai[3] += 1f;
					if (this.ai[3] >= 64f)
					{
						this.ai[3] = 0f;
					}
				}
				if (Main.netMode != 1 && this.ai[3] == 0f)
				{
					localAI[1] += 1f;
					if (localAI[1] > 120f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						localAI[1] = 0f;
						this.ai[3] = 1f;
						netUpdate = true;
					}
				}
			}
			else if (type == 268)
			{
				rotation = velocity.X * 0.1f;
				num832 = ((!(Main.player[target].Center.Y < base.Center.Y)) ? 6 : 12);
				if (Main.netMode != 1 && !confused)
				{
					this.ai[3] += 1f;
					if (justHit)
					{
						this.ai[3] = -45f;
						localAI[1] = 0f;
					}
					if (Main.netMode != 1 && this.ai[3] >= (float)(60 + Main.rand.Next(60)))
					{
						this.ai[3] = 0f;
						if (Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							float num854 = 10f;
							Vector2 vector248 = default(Vector2);
							((Vector2)(ref vector248))._002Ector(position.X + (float)width * 0.5f - 4f, position.Y + (float)height * 0.7f);
							float num855 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector248.X;
							float num856 = Math.Abs(num855) * 0.1f;
							float num857 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector248.Y - num856;
							num855 += (float)Main.rand.Next(-10, 11);
							num857 += (float)Main.rand.Next(-30, 21);
							float num858 = (float)Math.Sqrt(num855 * num855 + num857 * num857);
							float num859 = num858;
							num858 = num854 / num858;
							num855 *= num858;
							num857 *= num858;
							int num860 = 40;
							int num861 = 288;
							int num862 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector248.X, vector248.Y, num855, num857, num861, num860, 0f, Main.myPlayer);
						}
					}
				}
			}
			if (type == 490)
			{
				num832 = 4;
				if (target >= 0)
				{
					val29 = Main.player[target].Center - base.Center;
					float num864 = ((Vector2)(ref val29)).Length();
					num864 /= 70f;
					if (num864 > 8f)
					{
						num864 = 8f;
					}
					num832 += (int)num864;
				}
			}
			if (position.Y + (float)height > Main.player[target].position.Y)
			{
				if (type == 330)
				{
					flag25 = false;
				}
				else
				{
					for (int num865 = num831; num865 < num831 + num832; num865++)
					{
						if (Main.tile[num828, num865] == null)
						{
							Main.tile[num828, num865] = default(Tile);
						}
						if ((Main.tile[num828, num865].nactive() && Main.tileSolid[Main.tile[num828, num865].type]) || Main.tile[num828, num865].liquid > 0)
						{
							if (num865 <= num831 + 1)
							{
								flag26 = true;
							}
							flag25 = false;
							break;
						}
					}
				}
			}
			if (Main.player[target].npcTypeNoAggro[type])
			{
				bool flag27 = false;
				for (int num866 = num831; num866 < num831 + num832 - 2; num866++)
				{
					if (Main.tile[num828, num866] == null)
					{
						Main.tile[num828, num866] = default(Tile);
					}
					if ((Main.tile[num828, num866].nactive() && Main.tileSolid[Main.tile[num828, num866].type]) || Main.tile[num828, num866].liquid > 0)
					{
						flag27 = true;
						break;
					}
				}
				directionY = (!flag27).ToDirectionInt();
			}
			if (type == 169 || type == 268)
			{
				for (int num867 = num831 - 3; num867 < num831; num867++)
				{
					if (Main.tile[num828, num867] == null)
					{
						Main.tile[num828, num867] = default(Tile);
					}
					if ((Main.tile[num828, num867].nactive() && Main.tileSolid[Main.tile[num828, num867].type] && !TileID.Sets.Platforms[Main.tile[num828, num867].type]) || Main.tile[num828, num867].liquid > 0)
					{
						flag26 = false;
						flag20 = true;
						break;
					}
				}
			}
			if (flag20)
			{
				flag26 = false;
				flag25 = true;
				if (type == 268)
				{
					velocity.Y += 2f;
				}
			}
			if (flag25)
			{
				if (type == 75 || type == 169)
				{
					velocity.Y += 0.2f;
					if (velocity.Y > 2f)
					{
						velocity.Y = 2f;
					}
				}
				else if (type == 490)
				{
					velocity.Y += 0.03f;
					if ((double)velocity.Y > 0.75)
					{
						velocity.Y = 0.75f;
					}
				}
				else
				{
					velocity.Y += 0.1f;
					if (type == 316 && flag21)
					{
						velocity.Y -= 0.05f;
						if (velocity.Y > 6f)
						{
							velocity.Y = 6f;
						}
					}
					else if (velocity.Y > 3f)
					{
						velocity.Y = 3f;
					}
				}
			}
			else
			{
				if (type == 75 || type == 169)
				{
					if ((directionY < 0 && velocity.Y > 0f) || flag26)
					{
						velocity.Y -= 0.2f;
					}
				}
				else if (type == 490)
				{
					if ((directionY < 0 && velocity.Y > 0f) || flag26)
					{
						velocity.Y -= 0.075f;
					}
					if (velocity.Y < -0.75f)
					{
						velocity.Y = -0.75f;
					}
				}
				else if (directionY < 0 && velocity.Y > 0f)
				{
					velocity.Y -= 0.1f;
				}
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
			}
			if (type == 75 && wet)
			{
				velocity.Y -= 0.2f;
				if (velocity.Y < -2f)
				{
					velocity.Y = -2f;
				}
			}
			if (collideX)
			{
				velocity.X = oldVelocity.X * -0.4f;
				if (direction == -1 && velocity.X > 0f && velocity.X < 1f)
				{
					velocity.X = 1f;
				}
				if (direction == 1 && velocity.X < 0f && velocity.X > -1f)
				{
					velocity.X = -1f;
				}
			}
			if (collideY)
			{
				velocity.Y = oldVelocity.Y * -0.25f;
				if (velocity.Y > 0f && velocity.Y < 1f)
				{
					velocity.Y = 1f;
				}
				if (velocity.Y < 0f && velocity.Y > -1f)
				{
					velocity.Y = -1f;
				}
			}
			float num868 = 2f;
			if (type == 75)
			{
				num868 = 3f;
			}
			if (type == 253)
			{
				num868 = 4f;
			}
			if (type == 490)
			{
				num868 = 1.5f;
			}
			if (type == 330)
			{
				alpha = 0;
				num868 = 4f;
				if (!flag21)
				{
					TargetClosest();
				}
				else
				{
					EncourageDespawn(10);
				}
				if (direction < 0 && velocity.X > 0f)
				{
					velocity.X *= 0.9f;
				}
				if (direction > 0 && velocity.X < 0f)
				{
					velocity.X *= 0.9f;
				}
			}
			if (direction == -1 && velocity.X > 0f - num868)
			{
				velocity.X -= 0.1f;
				if (velocity.X > num868)
				{
					velocity.X -= 0.1f;
				}
				else if (velocity.X > 0f)
				{
					velocity.X += 0.05f;
				}
				if (velocity.X < 0f - num868)
				{
					velocity.X = 0f - num868;
				}
			}
			else if (direction == 1 && velocity.X < num868)
			{
				velocity.X += 0.1f;
				if (velocity.X < 0f - num868)
				{
					velocity.X += 0.1f;
				}
				else if (velocity.X < 0f)
				{
					velocity.X -= 0.05f;
				}
				if (velocity.X > num868)
				{
					velocity.X = num868;
				}
			}
			num868 = ((type != 490) ? 1.5f : 1f);
			if (directionY == -1 && velocity.Y > 0f - num868)
			{
				velocity.Y -= 0.04f;
				if (velocity.Y > num868)
				{
					velocity.Y -= 0.05f;
				}
				else if (velocity.Y > 0f)
				{
					velocity.Y += 0.03f;
				}
				if (velocity.Y < 0f - num868)
				{
					velocity.Y = 0f - num868;
				}
			}
			else if (directionY == 1 && velocity.Y < num868)
			{
				velocity.Y += 0.04f;
				if (velocity.Y < 0f - num868)
				{
					velocity.Y += 0.05f;
				}
				else if (velocity.Y < 0f)
				{
					velocity.Y -= 0.03f;
				}
				if (velocity.Y > num868)
				{
					velocity.Y = num868;
				}
			}
			if (type == 122)
			{
				Lighting.AddLight((int)position.X / 16, (int)position.Y / 16, 0.4f, 0f, 0.25f);
			}
		}
		else if (aiStyle == 23)
		{
			noGravity = true;
			noTileCollide = true;
			if (type == 83)
			{
				Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), 0.2f, 0.05f, 0.3f);
			}
			else if (type == 179)
			{
				Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), 0.3f, 0.15f, 0.05f);
			}
			else
			{
				Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), 0.05f, 0.2f, 0.3f);
			}
			if (target < 0 || target == 255 || Main.player[target].dead)
			{
				TargetClosest();
			}
			if (this.ai[0] == 0f)
			{
				float num869 = 9f;
				Vector2 vector249 = default(Vector2);
				((Vector2)(ref vector249))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num870 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector249.X;
				float num871 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector249.Y;
				float num872 = (float)Math.Sqrt(num870 * num870 + num871 * num871);
				float num873 = num872;
				num872 = num869 / num872;
				num870 *= num872;
				num871 *= num872;
				velocity.X = num870;
				velocity.Y = num871;
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 0.785f;
				this.ai[0] = 1f;
				this.ai[1] = 0f;
				netUpdate = true;
			}
			else if (this.ai[0] == 1f)
			{
				if (justHit)
				{
					this.ai[0] = 2f;
					this.ai[1] = 0f;
				}
				velocity *= 0.99f;
				this.ai[1] += 1f;
				if (this.ai[1] >= 100f)
				{
					netUpdate = true;
					this.ai[0] = 2f;
					this.ai[1] = 0f;
					velocity.X = 0f;
					velocity.Y = 0f;
				}
				else
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 0.785f;
				}
			}
			else
			{
				if (justHit)
				{
					this.ai[0] = 2f;
					this.ai[1] = 0f;
				}
				velocity *= 0.96f;
				this.ai[1] += 1f;
				float num875 = this.ai[1] / 120f;
				num875 = 0.1f + num875 * 0.4f;
				rotation += num875 * (float)direction;
				if (this.ai[1] >= 120f)
				{
					netUpdate = true;
					this.ai[0] = 0f;
					this.ai[1] = 0f;
				}
			}
		}
		else if (aiStyle == 24)
		{
			noGravity = true;
			if (type == 611)
			{
				if (localAI[0] == 0f)
				{
					TargetClosest();
					this.ai[0] = 1f;
					localAI[0] = 1f;
					netUpdate = true;
				}
				else if (this.ai[0] == 1f && Main.cloudAlpha == 0f && !Main.dayTime)
				{
					for (int num876 = 0; num876 < 200; num876++)
					{
						if (num876 == whoAmI || !Main.npc[num876].active)
						{
							continue;
						}
						if (Main.npc[num876].townNPC)
						{
							if (Math.Abs(base.Center.X - Main.npc[num876].Center.X) < 96f)
							{
								float num877 = Main.npc[num876].Center.Y - base.Center.Y;
								if (num877 > 32f && num877 < 320f && !Collision.CanHit(this, Main.npc[num876]))
								{
									this.ai[0] = 2f;
								}
							}
						}
						else if (Main.npc[num876].type == type && Main.npc[num876].ai[0] != 1f && Math.Abs(base.Center.X - Main.npc[num876].Center.X) < 320f)
						{
							this.ai[0] = 1f;
							break;
						}
					}
				}
			}
			if (this.ai[0] == 0f)
			{
				noGravity = false;
				if (type == 611 && (Main.cloudAlpha > 0f || Main.dayTime))
				{
					this.ai[0] = 1f;
				}
				TargetClosest();
				if (Main.netMode != 1)
				{
					if (releaseOwner != 255 || velocity.X != 0f || velocity.Y < 0f || (double)velocity.Y > 0.3)
					{
						this.ai[0] = 1f;
						netUpdate = true;
						direction = -direction;
					}
					else if (type != 611)
					{
						Rectangle rectangle2 = default(Rectangle);
						((Rectangle)(ref rectangle2))._002Ector((int)Main.player[target].position.X, (int)Main.player[target].position.Y, Main.player[target].width, Main.player[target].height);
						val38 = new Rectangle((int)position.X - 100, (int)position.Y - 100, width + 200, height + 200);
						if (((Rectangle)(ref val38)).Intersects(rectangle2) || life < lifeMax)
						{
							this.ai[0] = 1f;
							velocity.Y -= 6f;
							netUpdate = true;
							direction = -direction;
						}
					}
				}
			}
			else if (this.ai[0] == 2f)
			{
				velocity.X *= 0.98f;
				if (velocity.Y == 0f)
				{
					this.ai[0] = 0f;
					velocity.X = 0f;
				}
				velocity.Y += 0.05f;
				if (velocity.Y > 2f)
				{
					velocity.Y = 2f;
				}
			}
			else if (!Main.player[target].dead)
			{
				float num878 = 3f;
				if (type == 671 || type == 672 || type == 673 || type == 674 || type == 675)
				{
					num878 = 4f;
				}
				if (collideX)
				{
					direction *= -1;
					velocity.X = oldVelocity.X * -0.5f;
					if (direction == -1 && velocity.X > 0f && velocity.X < num878 - 1f)
					{
						velocity.X = num878 - 1f;
					}
					if (direction == 1 && velocity.X < 0f && velocity.X > 0f - num878 + 1f)
					{
						velocity.X = 0f - num878 + 1f;
					}
				}
				if (collideY)
				{
					velocity.Y = oldVelocity.Y * -0.5f;
					if (velocity.Y > 0f && velocity.Y < 1f)
					{
						velocity.Y = 1f;
					}
					if (velocity.Y < 0f && velocity.Y > -1f)
					{
						velocity.Y = -1f;
					}
				}
				if (direction == -1 && velocity.X > 0f - num878)
				{
					velocity.X -= 0.1f;
					if (velocity.X > num878)
					{
						velocity.X -= 0.1f;
					}
					else if (velocity.X > 0f)
					{
						velocity.X -= 0.05f;
					}
					if (velocity.X < 0f - num878)
					{
						velocity.X = 0f - num878;
					}
				}
				else if (direction == 1 && velocity.X < num878)
				{
					velocity.X += 0.1f;
					if (velocity.X < 0f - num878)
					{
						velocity.X += 0.1f;
					}
					else if (velocity.X < 0f)
					{
						velocity.X += 0.05f;
					}
					if (velocity.X > num878)
					{
						velocity.X = num878;
					}
				}
				int num879 = (int)((position.X + (float)(width / 2)) / 16f) + direction;
				int num880 = (int)((position.Y + (float)height) / 16f);
				bool flag28 = true;
				int num881 = 15;
				bool flag29 = false;
				for (int num882 = num880; num882 < num880 + num881; num882++)
				{
					if (!WorldGen.InWorld(num879, num882))
					{
						continue;
					}
					if (Main.tile[num879, num882] == null)
					{
						Main.tile[num879, num882] = default(Tile);
					}
					if ((Main.tile[num879, num882].nactive() && Main.tileSolid[Main.tile[num879, num882].type]) || Main.tile[num879, num882].liquid > 0)
					{
						if (num882 < num880 + 5)
						{
							flag29 = true;
						}
						flag28 = false;
						break;
					}
				}
				if (flag28)
				{
					velocity.Y += 0.05f;
				}
				else
				{
					velocity.Y -= 0.1f;
				}
				if (flag29)
				{
					velocity.Y -= 0.2f;
				}
				if (velocity.Y > 2f)
				{
					velocity.Y = 2f;
				}
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
			}
			if (wet)
			{
				this.ai[1] = 0f;
				if (velocity.Y > 0f)
				{
					velocity.Y *= 0.95f;
				}
				velocity.Y -= 0.5f;
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
				TargetClosest();
			}
		}
		else if (aiStyle == 25)
		{
			bool flag30 = type == 341 && !Main.snowMoon;
			if (this.ai[3] == 0f)
			{
				position.X += 8f;
				if (position.Y / 16f > (float)Main.UnderworldLayer)
				{
					this.ai[3] = 3f;
				}
				else if ((double)(position.Y / 16f) > Main.worldSurface)
				{
					TargetClosest();
					this.ai[3] = 2f;
				}
				else
				{
					this.ai[3] = 1f;
				}
			}
			if (type == 341 || type == 629)
			{
				this.ai[3] = 1f;
			}
			if (this.ai[0] == 0f)
			{
				if (!flag30)
				{
					TargetClosest();
				}
				if (Main.netMode == 1)
				{
					return;
				}
				if (velocity.X != 0f || velocity.Y < 0f || (double)velocity.Y > 0.3)
				{
					this.ai[0] = 1f;
					netUpdate = true;
					return;
				}
				Rectangle rectangle3 = default(Rectangle);
				((Rectangle)(ref rectangle3))._002Ector((int)Main.player[target].position.X, (int)Main.player[target].position.Y, Main.player[target].width, Main.player[target].height);
				val38 = new Rectangle((int)position.X - 100, (int)position.Y - 100, width + 200, height + 200);
				if (((Rectangle)(ref val38)).Intersects(rectangle3) || life < lifeMax)
				{
					this.ai[0] = 1f;
					netUpdate = true;
				}
			}
			else if (velocity.Y == 0f)
			{
				this.ai[2] += 1f;
				int num883 = 20;
				if (this.ai[1] == 0f)
				{
					num883 = 12;
				}
				if (this.ai[2] < (float)num883)
				{
					velocity.X *= 0.9f;
					return;
				}
				this.ai[2] = 0f;
				if (!flag30)
				{
					TargetClosest();
				}
				if (direction == 0)
				{
					direction = -1;
				}
				spriteDirection = direction;
				this.ai[1] += 1f;
				if (this.ai[1] == 2f)
				{
					velocity.X = (float)direction * 2.5f;
					velocity.Y = -8f;
					this.ai[1] = 0f;
				}
				else
				{
					velocity.X = (float)direction * 3.5f;
					velocity.Y = -4f;
				}
				netUpdate = true;
			}
			else if (direction == 1 && velocity.X < 1f)
			{
				velocity.X += 0.1f;
			}
			else if (direction == -1 && velocity.X > -1f)
			{
				velocity.X -= 0.1f;
			}
		}
		else if (aiStyle == 26)
		{
			AI_026_Unicorns();
		}
		else if (aiStyle == 27)
		{
			if (position.X < 160f || position.X > (float)((Main.maxTilesX - 10) * 16))
			{
				active = false;
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				Main.wofDrawAreaBottom = -1;
				Main.wofDrawAreaTop = -1;
			}
			if (Main.getGoodWorld && Main.netMode != 1 && Main.rand.Next(180) == 0 && CountNPCS(24) < 4)
			{
				int num884 = 1;
				for (int num886 = 0; num886 < num884; num886++)
				{
					int num887 = 1000;
					for (int num888 = 0; num888 < num887; num888++)
					{
						int num889 = (int)(base.Center.X / 16f);
						int num890 = (int)(base.Center.Y / 16f);
						if (target >= 0)
						{
							num889 = (int)(Main.player[target].Center.X / 16f);
							num890 = (int)(Main.player[target].Center.Y / 16f);
						}
						num889 += Main.rand.Next(-50, 51);
						for (num890 += Main.rand.Next(-50, 51); num890 < Main.maxTilesY - 10 && !WorldGen.SolidTile(num889, num890); num890++)
						{
						}
						num890--;
						if (!WorldGen.SolidTile(num889, num890))
						{
							int num891 = NewNPC(GetSpawnSourceForNaturalSpawn(), num889 * 16 + 8, num890 * 16, 24);
							if (Main.netMode == 2 && num891 < 200)
							{
								NetMessage.SendData(23, -1, -1, null, num891);
							}
							break;
						}
					}
				}
			}
			this.ai[1] += 1f;
			if (this.ai[2] == 0f)
			{
				if ((double)life < (double)lifeMax * 0.5)
				{
					this.ai[1] += 1f;
				}
				if ((double)life < (double)lifeMax * 0.2)
				{
					this.ai[1] += 1f;
				}
				if (this.ai[1] > 2700f)
				{
					this.ai[2] = 1f;
				}
			}
			int num892 = 60;
			if (this.ai[2] > 0f && this.ai[1] > (float)num892)
			{
				int num893 = 3;
				if ((double)life < (double)lifeMax * 0.3)
				{
					num893++;
				}
				this.ai[2] += 1f;
				this.ai[1] = 0f;
				if (this.ai[2] > (float)num893)
				{
					this.ai[2] = 0f;
				}
				if (Main.netMode != 1 && CountNPCS(117) < 10)
				{
					int num894 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)(height / 2) + 20f), 117, 1);
					Main.npc[num894].velocity.X = direction * 8;
				}
			}
			localAI[3] += 1f;
			if (localAI[3] >= (float)(600 + Main.rand.Next(1000)))
			{
				localAI[3] = -Main.rand.Next(200);
				SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 10);
			}
			int num895 = Main.UnderworldLayer + 10;
			int num897 = num895 + 70;
			Main.wofNPCIndex = whoAmI;
			int num898 = (int)(position.X / 16f);
			int num899 = (int)((position.X + (float)width) / 16f);
			int num900 = (int)((position.Y + (float)(height / 2)) / 16f);
			int num901 = 0;
			int num902 = num900 + 7;
			while (num901 < 15 && num902 > Main.UnderworldLayer)
			{
				num902++;
				if (num902 > Main.maxTilesY - 10)
				{
					num902 = Main.maxTilesY - 10;
					break;
				}
				if (num902 < num895)
				{
					continue;
				}
				for (int num903 = num898; num903 <= num899; num903++)
				{
					try
					{
						if (WorldGen.InWorld(num903, num902, 2) && (WorldGen.SolidTile(num903, num902) || Main.tile[num903, num902].liquid > 0))
						{
							num901++;
						}
					}
					catch
					{
						num901 += 15;
					}
				}
			}
			num902 += 4;
			if (Main.wofDrawAreaBottom == -1)
			{
				Main.wofDrawAreaBottom = num902 * 16;
			}
			else if (Main.wofDrawAreaBottom > num902 * 16)
			{
				Main.wofDrawAreaBottom--;
				if (Main.wofDrawAreaBottom < num902 * 16)
				{
					Main.wofDrawAreaBottom = num902 * 16;
				}
			}
			else if (Main.wofDrawAreaBottom < num902 * 16)
			{
				Main.wofDrawAreaBottom++;
				if (Main.wofDrawAreaBottom > num902 * 16)
				{
					Main.wofDrawAreaBottom = num902 * 16;
				}
			}
			num901 = 0;
			num902 = num900 - 7;
			while (num901 < 15 && num902 < Main.maxTilesY - 10)
			{
				num902--;
				if (num902 <= 10)
				{
					num902 = 10;
					break;
				}
				if (num902 > num897)
				{
					continue;
				}
				if (num902 < num895)
				{
					num902 = num895;
					break;
				}
				for (int num904 = num898; num904 <= num899; num904++)
				{
					try
					{
						if (WorldGen.InWorld(num904, num902, 2) && (WorldGen.SolidTile(num904, num902) || Main.tile[num904, num902].liquid > 0))
						{
							num901++;
						}
					}
					catch
					{
						num901 += 15;
					}
				}
			}
			num902 -= 4;
			if (Main.wofDrawAreaTop == -1)
			{
				Main.wofDrawAreaTop = num902 * 16;
			}
			else if (Main.wofDrawAreaTop > num902 * 16)
			{
				Main.wofDrawAreaTop--;
				if (Main.wofDrawAreaTop < num902 * 16)
				{
					Main.wofDrawAreaTop = num902 * 16;
				}
			}
			else if (Main.wofDrawAreaTop < num902 * 16)
			{
				Main.wofDrawAreaTop++;
				if (Main.wofDrawAreaTop > num902 * 16)
				{
					Main.wofDrawAreaTop = num902 * 16;
				}
			}
			Main.wofDrawAreaTop = (int)MathHelper.Clamp((float)Main.wofDrawAreaTop, (float)num895 * 16f, (float)num897 * 16f);
			Main.wofDrawAreaBottom = (int)MathHelper.Clamp((float)Main.wofDrawAreaBottom, (float)num895 * 16f, (float)num897 * 16f);
			if (Main.wofDrawAreaTop > Main.wofDrawAreaBottom - 160)
			{
				Main.wofDrawAreaTop = Main.wofDrawAreaBottom - 160;
			}
			else if (Main.wofDrawAreaBottom < Main.wofDrawAreaTop + 160)
			{
				Main.wofDrawAreaBottom = Main.wofDrawAreaTop + 160;
			}
			float num905 = (Main.wofDrawAreaBottom + Main.wofDrawAreaTop) / 2 - height / 2;
			if (position.Y > num905 + 1f)
			{
				velocity.Y = -1f;
			}
			else if (position.Y < num905 - 1f)
			{
				velocity.Y = 1f;
			}
			velocity.Y = 0f;
			position.Y = num905;
			float num906 = 1.5f;
			if ((double)life < (double)lifeMax * 0.75)
			{
				num906 += 0.25f;
			}
			if ((double)life < (double)lifeMax * 0.5)
			{
				num906 += 0.4f;
			}
			if ((double)life < (double)lifeMax * 0.25)
			{
				num906 += 0.5f;
			}
			if ((double)life < (double)lifeMax * 0.1)
			{
				num906 += 0.6f;
			}
			if ((double)life < (double)lifeMax * 0.66 && Main.expertMode)
			{
				num906 += 0.3f;
			}
			if ((double)life < (double)lifeMax * 0.33 && Main.expertMode)
			{
				num906 += 0.3f;
			}
			if ((double)life < (double)lifeMax * 0.05 && Main.expertMode)
			{
				num906 += 0.6f;
			}
			if ((double)life < (double)lifeMax * 0.035 && Main.expertMode)
			{
				num906 += 0.6f;
			}
			if ((double)life < (double)lifeMax * 0.025 && Main.expertMode)
			{
				num906 += 0.6f;
			}
			if (Main.expertMode)
			{
				num906 *= 1.35f;
				num906 += 0.35f;
			}
			if (Main.getGoodWorld)
			{
				num906 *= 1.1f;
				num906 += 0.2f;
			}
			if (velocity.X == 0f)
			{
				TargetClosest();
				if (Main.player[target].dead)
				{
					float num908 = float.PositiveInfinity;
					int num909 = 0;
					for (int num910 = 0; num910 < 255; num910++)
					{
						Player player = Main.player[target];
						if (player.active)
						{
							float num911 = Distance(player.Center);
							if (num908 > num911)
							{
								num908 = num911;
								num909 = ((base.Center.X < player.Center.X) ? 1 : (-1));
							}
						}
					}
					direction = num909;
				}
				velocity.X = direction;
			}
			if (velocity.X < 0f)
			{
				velocity.X = 0f - num906;
				direction = -1;
			}
			else
			{
				velocity.X = num906;
				direction = 1;
			}
			if (Main.player[target].dead || !Main.player[target].gross)
			{
				TargetClosest_WOF();
			}
			if (Main.player[target].dead)
			{
				localAI[1] += 1f / 180f;
				if (localAI[1] >= 1f)
				{
					SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 10);
					life = 0;
					active = false;
					if (Main.netMode != 1)
					{
						NetMessage.SendData(28, -1, -1, null, whoAmI, -1f);
					}
					return;
				}
			}
			else
			{
				localAI[1] = MathHelper.Clamp(localAI[1] - 1f / 30f, 0f, 1f);
			}
			spriteDirection = direction;
			Vector2 vector250 = default(Vector2);
			((Vector2)(ref vector250))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num912 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector250.X;
			float num913 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector250.Y;
			float num914 = (float)Math.Sqrt(num912 * num912 + num913 * num913);
			float num915 = num914;
			num912 *= num914;
			num913 *= num914;
			if (direction > 0)
			{
				if (Main.player[target].position.X + (float)(Main.player[target].width / 2) > position.X + (float)(width / 2))
				{
					rotation = (float)Math.Atan2(0f - num913, 0f - num912) + 3.14f;
				}
				else
				{
					rotation = 0f;
				}
			}
			else if (Main.player[target].position.X + (float)(Main.player[target].width / 2) < position.X + (float)(width / 2))
			{
				rotation = (float)Math.Atan2(num913, num912) + 3.14f;
			}
			else
			{
				rotation = 0f;
			}
			if (Main.expertMode && Main.netMode != 1)
			{
				int num916 = (int)(1f + (float)life / (float)lifeMax * 10f);
				num916 *= num916;
				if (num916 < 400)
				{
					num916 = (num916 * 19 + 400) / 20;
				}
				if (num916 < 60)
				{
					num916 = (num916 * 3 + 60) / 4;
				}
				if (num916 < 20)
				{
					num916 = (num916 + 20) / 2;
				}
				num916 = (int)((double)num916 * 0.7);
				if (Main.rand.Next(num916) == 0)
				{
					int num917 = 0;
					float[] array = new float[10];
					for (int num919 = 0; num919 < 200; num919++)
					{
						if (num917 < 10 && Main.npc[num919].active && Main.npc[num919].type == 115)
						{
							array[num917] = Main.npc[num919].ai[0];
							num917++;
						}
					}
					int maxValue = 1 + num917 * 2;
					if (num917 < 10 && Main.rand.Next(maxValue) <= 1)
					{
						int num920 = -1;
						for (int num921 = 0; num921 < 1000; num921++)
						{
							int num922 = Main.rand.Next(10);
							float num923 = (float)num922 * 0.1f - 0.05f;
							bool flag31 = true;
							for (int num924 = 0; num924 < num917; num924++)
							{
								if (num923 == array[num924])
								{
									flag31 = false;
									break;
								}
							}
							if (flag31)
							{
								num920 = num922;
								break;
							}
						}
						if (num920 >= 0)
						{
							NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)position.X, (int)num905, 115, whoAmI, (float)num920 * 0.1f - 0.05f);
						}
					}
				}
			}
			if (Main.netMode != 1 && localAI[0] == 1f)
			{
				localAI[0] = 2f;
				float num925 = (base.Center.Y + (float)Main.wofDrawAreaTop) / 2f;
				int num926 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)position.X, (int)num925, 114, whoAmI, 1f);
				float num927 = (base.Center.Y + (float)Main.wofDrawAreaBottom) / 2f;
				num926 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)position.X, (int)num927, 114, whoAmI, -1f);
				float num928 = (base.Center.Y + (float)Main.wofDrawAreaBottom) / 2f;
				for (int num930 = 0; num930 < 11; num930++)
				{
					num926 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)position.X, (int)num928, 115, whoAmI, (float)num930 * 0.1f - 0.05f);
				}
			}
		}
		else if (aiStyle == 28)
		{
			if (Main.wofNPCIndex < 0)
			{
				active = false;
				return;
			}
			realLife = Main.wofNPCIndex;
			if (Main.npc[Main.wofNPCIndex].life > 0)
			{
				life = Main.npc[Main.wofNPCIndex].life;
			}
			TargetClosest();
			position.X = Main.npc[Main.wofNPCIndex].position.X;
			direction = Main.npc[Main.wofNPCIndex].direction;
			spriteDirection = direction;
			float num931 = (Main.wofDrawAreaBottom + Main.wofDrawAreaTop) / 2;
			num931 = ((!(this.ai[0] > 0f)) ? ((num931 + (float)Main.wofDrawAreaBottom) / 2f) : ((num931 + (float)Main.wofDrawAreaTop) / 2f));
			num931 -= (float)(height / 2);
			if (position.Y > num931 + 1f)
			{
				velocity.Y = -1f;
			}
			else if (position.Y < num931 - 1f)
			{
				velocity.Y = 1f;
			}
			else
			{
				velocity.Y = 0f;
				position.Y = num931;
			}
			if (velocity.Y > 5f)
			{
				velocity.Y = 5f;
			}
			if (velocity.Y < -5f)
			{
				velocity.Y = -5f;
			}
			Vector2 vector251 = default(Vector2);
			((Vector2)(ref vector251))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num932 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector251.X;
			float num933 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector251.Y;
			float num934 = (float)Math.Sqrt(num932 * num932 + num933 * num933);
			float num935 = num934;
			num932 *= num934;
			num933 *= num934;
			bool flag32 = true;
			if (direction > 0)
			{
				if (Main.player[target].position.X + (float)(Main.player[target].width / 2) > position.X + (float)(width / 2))
				{
					rotation = (float)Math.Atan2(0f - num933, 0f - num932) + 3.14f;
				}
				else
				{
					rotation = 0f;
					flag32 = false;
				}
			}
			else if (Main.player[target].position.X + (float)(Main.player[target].width / 2) < position.X + (float)(width / 2))
			{
				rotation = (float)Math.Atan2(num933, num932) + 3.14f;
			}
			else
			{
				rotation = 0f;
				flag32 = false;
			}
			if (Main.netMode == 1)
			{
				return;
			}
			int num936 = 4;
			localAI[1] += 1f;
			if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.75)
			{
				localAI[1] += 1f;
				num936++;
			}
			if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.5)
			{
				localAI[1] += 1f;
				num936++;
			}
			if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.25)
			{
				localAI[1] += 1f;
				num936 += 2;
			}
			if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.1)
			{
				localAI[1] += 2f;
				num936 += 3;
			}
			if (Main.expertMode)
			{
				localAI[1] += 0.5f;
				num936++;
				if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.1)
				{
					localAI[1] += 2f;
					num936 += 3;
				}
			}
			if (localAI[2] == 0f)
			{
				if (localAI[1] > 600f)
				{
					localAI[2] = 1f;
					localAI[1] = 0f;
				}
			}
			else
			{
				if (!(localAI[1] > 45f) || !Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					return;
				}
				localAI[1] = 0f;
				localAI[2] += 1f;
				if (localAI[2] >= (float)num936)
				{
					localAI[2] = 0f;
				}
				if (flag32)
				{
					float num937 = 9f;
					int num938 = 11;
					int num939 = 83;
					if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.5)
					{
						num938++;
						num937 += 1f;
					}
					if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.25)
					{
						num938++;
						num937 += 1f;
					}
					if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.1)
					{
						num938 += 2;
						num937 += 2f;
					}
					((Vector2)(ref vector251))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					num932 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector251.X;
					num933 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector251.Y;
					num934 = (float)Math.Sqrt(num932 * num932 + num933 * num933);
					num934 = num937 / num934;
					num932 *= num934;
					num933 *= num934;
					vector251.X += num932;
					vector251.Y += num933;
					int num942 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector251.X, vector251.Y, num932, num933, num939, num938, 0f, Main.myPlayer);
				}
			}
		}
		else if (aiStyle == 29)
		{
			if (justHit)
			{
				this.ai[1] = 10f;
			}
			if (Main.wofNPCIndex < 0)
			{
				active = false;
				return;
			}
			TargetClosest();
			float num943 = 0.1f;
			float num944 = 300f;
			damage = defDamage;
			int num945 = 0;
			if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.5)
			{
				num945 = 60;
				defense = 30;
				if (!Main.expertMode)
				{
					num944 = 700f;
				}
				else
				{
					num943 += 0.066f;
				}
			}
			else if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.75)
			{
				num945 = 45;
				defense = 20;
				if (!Main.expertMode)
				{
					num944 = 500f;
				}
				else
				{
					num943 += 0.033f;
				}
			}
			if (num945 > 0)
			{
				damage = GetAttackDamage_ScaledByStrength(num945);
			}
			if (Main.expertMode)
			{
				defense = defDefense;
				if (whoAmI % 4 == 0)
				{
					num944 *= 1.75f;
				}
				if (whoAmI % 4 == 1)
				{
					num944 *= 1.5f;
				}
				if (whoAmI % 4 == 2)
				{
					num944 *= 1.25f;
				}
				if (whoAmI % 3 == 0)
				{
					num944 *= 1.5f;
				}
				if (whoAmI % 3 == 1)
				{
					num944 *= 1.25f;
				}
				num944 *= 0.75f;
			}
			float num946 = Main.npc[Main.wofNPCIndex].position.X + (float)(Main.npc[Main.wofNPCIndex].width / 2);
			float y3 = Main.npc[Main.wofNPCIndex].position.Y;
			float num947 = Main.wofDrawAreaBottom - Main.wofDrawAreaTop;
			y3 = (float)Main.wofDrawAreaTop + num947 * this.ai[0];
			this.ai[2] += 1f;
			if (this.ai[2] > 100f)
			{
				num944 = (int)(num944 * 1.3f);
				if (this.ai[2] > 200f)
				{
					this.ai[2] = 0f;
				}
			}
			Vector2 vector253 = default(Vector2);
			((Vector2)(ref vector253))._002Ector(num946, y3);
			float num948 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - (float)(width / 2) - vector253.X;
			float num949 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - (float)(height / 2) - vector253.Y;
			float num950 = (float)Math.Sqrt(num948 * num948 + num949 * num949);
			if (this.ai[1] == 0f)
			{
				if (num950 > num944)
				{
					num950 = num944 / num950;
					num948 *= num950;
					num949 *= num950;
				}
				if (position.X < num946 + num948)
				{
					velocity.X += num943;
					if (velocity.X < 0f && num948 > 0f)
					{
						velocity.X += num943 * 2.5f;
					}
				}
				else if (position.X > num946 + num948)
				{
					velocity.X -= num943;
					if (velocity.X > 0f && num948 < 0f)
					{
						velocity.X -= num943 * 2.5f;
					}
				}
				if (position.Y < y3 + num949)
				{
					velocity.Y += num943;
					if (velocity.Y < 0f && num949 > 0f)
					{
						velocity.Y += num943 * 2.5f;
					}
				}
				else if (position.Y > y3 + num949)
				{
					velocity.Y -= num943;
					if (velocity.Y > 0f && num949 < 0f)
					{
						velocity.Y -= num943 * 2.5f;
					}
				}
				float num951 = 4f;
				if (Main.expertMode && Main.wofNPCIndex >= 0)
				{
					float num953 = 1.5f;
					float num954 = Main.npc[Main.wofNPCIndex].life / Main.npc[Main.wofNPCIndex].lifeMax;
					if ((double)num954 < 0.75)
					{
						num953 += 0.7f;
					}
					if ((double)num954 < 0.5)
					{
						num953 += 0.7f;
					}
					if ((double)num954 < 0.25)
					{
						num953 += 0.9f;
					}
					if ((double)num954 < 0.1)
					{
						num953 += 0.9f;
					}
					num953 *= 1.25f;
					num953 += 0.3f;
					num951 += num953 * 0.35f;
					if (base.Center.X < Main.npc[Main.wofNPCIndex].Center.X && Main.npc[Main.wofNPCIndex].velocity.X > 0f)
					{
						num951 += 6f;
					}
					if (base.Center.X > Main.npc[Main.wofNPCIndex].Center.X && Main.npc[Main.wofNPCIndex].velocity.X < 0f)
					{
						num951 += 6f;
					}
				}
				if (velocity.X > num951)
				{
					velocity.X = num951;
				}
				if (velocity.X < 0f - num951)
				{
					velocity.X = 0f - num951;
				}
				if (velocity.Y > num951)
				{
					velocity.Y = num951;
				}
				if (velocity.Y < 0f - num951)
				{
					velocity.Y = 0f - num951;
				}
			}
			else if (this.ai[1] > 0f)
			{
				this.ai[1] -= 1f;
			}
			else
			{
				this.ai[1] = 0f;
			}
			if (num948 > 0f)
			{
				spriteDirection = 1;
				rotation = (float)Math.Atan2(num949, num948);
			}
			if (num948 < 0f)
			{
				spriteDirection = -1;
				rotation = (float)Math.Atan2(num949, num948) + 3.14f;
			}
			Lighting.AddLight((int)(position.X + (float)(width / 2)) / 16, (int)(position.Y + (float)(height / 2)) / 16, 0.3f, 0.2f, 0.1f);
		}
		else if (aiStyle == 30)
		{
			if (target < 0 || target == 255 || Main.player[target].dead || !Main.player[target].active)
			{
				TargetClosest();
			}
			bool dead2 = Main.player[target].dead;
			float num955 = position.X + (float)(width / 2) - Main.player[target].position.X - (float)(Main.player[target].width / 2);
			float num956 = position.Y + (float)height - 59f - Main.player[target].position.Y - (float)(Main.player[target].height / 2);
			float num957 = (float)Math.Atan2(num956, num955) + 1.57f;
			if (num957 < 0f)
			{
				num957 += 6.283f;
			}
			else if ((double)num957 > 6.283)
			{
				num957 -= 6.283f;
			}
			float num958 = 0.1f;
			if (rotation < num957)
			{
				if ((double)(num957 - rotation) > 3.1415)
				{
					rotation -= num958;
				}
				else
				{
					rotation += num958;
				}
			}
			else if (rotation > num957)
			{
				if ((double)(rotation - num957) > 3.1415)
				{
					rotation += num958;
				}
				else
				{
					rotation -= num958;
				}
			}
			if (rotation > num957 - num958 && rotation < num957 + num958)
			{
				rotation = num957;
			}
			if (rotation < 0f)
			{
				rotation += 6.283f;
			}
			else if ((double)rotation > 6.283)
			{
				rotation -= 6.283f;
			}
			if (rotation > num957 - num958 && rotation < num957 + num958)
			{
				rotation = num957;
			}
			if (Main.rand.Next(5) == 0)
			{
				Vector2 val41 = new Vector2(position.X, position.Y + (float)height * 0.25f);
				int num1674 = width;
				int num1675 = (int)((float)height * 0.5f);
				float x7 = velocity.X;
				newColor = default(Color);
				int num959 = Dust.NewDust(val41, num1674, num1675, 5, x7, 2f, 0, newColor);
				Main.dust[num959].velocity.X *= 0.5f;
				Main.dust[num959].velocity.Y *= 0.1f;
			}
			if (Main.netMode != 1 && !Main.IsItDay() && !dead2 && timeLeft < 10)
			{
				for (int num960 = 0; num960 < 200; num960++)
				{
					if (num960 != whoAmI && Main.npc[num960].active && (Main.npc[num960].type == 125 || Main.npc[num960].type == 126))
					{
						DiscourageDespawn(Main.npc[num960].timeLeft - 1);
					}
				}
			}
			Vector2 vector254 = Vector2.Zero;
			if (IsMechQueenUp)
			{
				NPC nPC = Main.npc[mechQueen];
				Vector2 mechQueenCenter = nPC.GetMechQueenCenter();
				Vector2 vector255 = default(Vector2);
				((Vector2)(ref vector255))._002Ector(-150f, -250f);
				vector255 *= 0.75f;
				float num961 = nPC.velocity.X * 0.025f;
				vector254 = mechQueenCenter + vector255;
				vector254 = vector254.RotatedBy(num961, mechQueenCenter);
			}
			reflectsProjectiles = false;
			if (Main.IsItDay() || dead2)
			{
				velocity.Y -= 0.04f;
				EncourageDespawn(10);
				return;
			}
			if (this.ai[0] == 0f)
			{
				if (this.ai[1] == 0f)
				{
					float num962 = 7f;
					float num964 = 0.1f;
					if (Main.expertMode)
					{
						num962 = 8.25f;
						num964 = 0.115f;
					}
					if (Main.getGoodWorld)
					{
						num962 *= 1.15f;
						num964 *= 1.15f;
					}
					int num965 = 1;
					if (position.X + (float)(width / 2) < Main.player[target].position.X + (float)Main.player[target].width)
					{
						num965 = -1;
					}
					Vector2 vector256 = default(Vector2);
					((Vector2)(ref vector256))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num966 = Main.player[target].position.X + (float)(Main.player[target].width / 2) + (float)(num965 * 300) - vector256.X;
					float num967 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 300f - vector256.Y;
					if (IsMechQueenUp)
					{
						num962 = 14f;
						num966 = vector254.X;
						num967 = vector254.Y;
						num966 -= vector256.X;
						num967 -= vector256.Y;
					}
					float num968 = (float)Math.Sqrt(num966 * num966 + num967 * num967);
					float num969 = num968;
					if (IsMechQueenUp)
					{
						if (num968 > num962)
						{
							num968 = num962 / num968;
							num966 *= num968;
							num967 *= num968;
						}
						float num970 = 60f;
						velocity.X = (velocity.X * (num970 - 1f) + num966) / num970;
						velocity.Y = (velocity.Y * (num970 - 1f) + num967) / num970;
					}
					else
					{
						num968 = num962 / num968;
						num966 *= num968;
						num967 *= num968;
						if (velocity.X < num966)
						{
							velocity.X += num964;
							if (velocity.X < 0f && num966 > 0f)
							{
								velocity.X += num964;
							}
						}
						else if (velocity.X > num966)
						{
							velocity.X -= num964;
							if (velocity.X > 0f && num966 < 0f)
							{
								velocity.X -= num964;
							}
						}
						if (velocity.Y < num967)
						{
							velocity.Y += num964;
							if (velocity.Y < 0f && num967 > 0f)
							{
								velocity.Y += num964;
							}
						}
						else if (velocity.Y > num967)
						{
							velocity.Y -= num964;
							if (velocity.Y > 0f && num967 < 0f)
							{
								velocity.Y -= num964;
							}
						}
					}
					int num971 = 600;
					int num972 = 60;
					if (IsMechQueenUp)
					{
						num971 = 1200;
						num972 = ((!npcsFoundForCheckActive[135]) ? 90 : 120);
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= (float)num971)
					{
						this.ai[1] = 1f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						target = 255;
						netUpdate = true;
					}
					else if (position.Y + (float)height < Main.player[target].position.Y && num969 < 400f)
					{
						if (!Main.player[target].dead)
						{
							this.ai[3] += 1f;
							if (Main.expertMode && (double)life < (double)lifeMax * 0.9)
							{
								this.ai[3] += 0.3f;
							}
							if (Main.expertMode && (double)life < (double)lifeMax * 0.8)
							{
								this.ai[3] += 0.3f;
							}
							if (Main.expertMode && (double)life < (double)lifeMax * 0.7)
							{
								this.ai[3] += 0.3f;
							}
							if (Main.expertMode && (double)life < (double)lifeMax * 0.6)
							{
								this.ai[3] += 0.3f;
							}
							if (Main.getGoodWorld)
							{
								this.ai[3] += 0.5f;
							}
						}
						if (this.ai[3] >= (float)num972)
						{
							this.ai[3] = 0f;
							((Vector2)(ref vector256))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
							num966 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector256.X;
							num967 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector256.Y;
							if (Main.netMode != 1)
							{
								float num973 = 9f;
								int attackDamage_ForProjectiles6 = GetAttackDamage_ForProjectiles(20f, 19f);
								int num975 = 83;
								if (Main.expertMode)
								{
									num973 = 10.5f;
								}
								num968 = (float)Math.Sqrt(num966 * num966 + num967 * num967);
								num968 = num973 / num968;
								num966 *= num968;
								num967 *= num968;
								num966 += (float)Main.rand.Next(-40, 41) * 0.08f;
								num967 += (float)Main.rand.Next(-40, 41) * 0.08f;
								vector256.X += num966 * 15f;
								vector256.Y += num967 * 15f;
								int num976 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector256.X, vector256.Y, num966, num967, num975, attackDamage_ForProjectiles6, 0f, Main.myPlayer);
							}
						}
					}
				}
				else if (this.ai[1] == 1f)
				{
					rotation = num957;
					float num977 = 12f;
					if (Main.expertMode)
					{
						num977 = 15f;
					}
					if (Main.getGoodWorld)
					{
						num977 += 2f;
					}
					Vector2 vector257 = default(Vector2);
					((Vector2)(ref vector257))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num978 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector257.X;
					float num979 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector257.Y;
					float num980 = (float)Math.Sqrt(num978 * num978 + num979 * num979);
					num980 = num977 / num980;
					velocity.X = num978 * num980;
					velocity.Y = num979 * num980;
					this.ai[1] = 2f;
				}
				else if (this.ai[1] == 2f)
				{
					this.ai[2] += 1f;
					if (this.ai[2] >= 25f)
					{
						velocity.X *= 0.96f;
						velocity.Y *= 0.96f;
						if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
						{
							velocity.X = 0f;
						}
						if ((double)velocity.Y > -0.1 && (double)velocity.Y < 0.1)
						{
							velocity.Y = 0f;
						}
					}
					else
					{
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
					}
					if (this.ai[2] >= 70f)
					{
						this.ai[3] += 1f;
						this.ai[2] = 0f;
						target = 255;
						rotation = num957;
						if (this.ai[3] >= 4f)
						{
							this.ai[1] = 0f;
							this.ai[3] = 0f;
						}
						else
						{
							this.ai[1] = 1f;
						}
					}
				}
				if ((double)life < (double)lifeMax * 0.4)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
				}
				return;
			}
			if (this.ai[0] == 1f || this.ai[0] == 2f)
			{
				if (IsMechQueenUp)
				{
					reflectsProjectiles = true;
				}
				if (this.ai[0] == 1f)
				{
					this.ai[2] += 0.005f;
					if ((double)this.ai[2] > 0.5)
					{
						this.ai[2] = 0.5f;
					}
				}
				else
				{
					this.ai[2] -= 0.005f;
					if (this.ai[2] < 0f)
					{
						this.ai[2] = 0f;
					}
				}
				rotation += this.ai[2];
				this.ai[1] += 1f;
				if (this.ai[1] >= 100f)
				{
					this.ai[0] += 1f;
					this.ai[1] = 0f;
					if (this.ai[0] == 3f)
					{
						this.ai[2] = 0f;
					}
					else
					{
						SoundEngine.PlaySound(3, (int)position.X, (int)position.Y);
						for (int num981 = 0; num981 < 2; num981++)
						{
							Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 143);
							Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 7);
							Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 6);
						}
						for (int num982 = 0; num982 < 20; num982++)
						{
							Vector2 val42 = position;
							int num1676 = width;
							int num1677 = height;
							float speedX17 = (float)Main.rand.Next(-30, 31) * 0.2f;
							float speedY16 = (float)Main.rand.Next(-30, 31) * 0.2f;
							newColor = default(Color);
							Dust.NewDust(val42, num1676, num1677, 5, speedX17, speedY16, 0, newColor);
						}
						SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
					}
				}
				Vector2 val43 = position;
				int num1678 = width;
				int num1679 = height;
				float speedX18 = (float)Main.rand.Next(-30, 31) * 0.2f;
				float speedY17 = (float)Main.rand.Next(-30, 31) * 0.2f;
				newColor = default(Color);
				Dust.NewDust(val43, num1678, num1679, 5, speedX18, speedY17, 0, newColor);
				velocity.X *= 0.98f;
				velocity.Y *= 0.98f;
				if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
				{
					velocity.X = 0f;
				}
				if ((double)velocity.Y > -0.1 && (double)velocity.Y < 0.1)
				{
					velocity.Y = 0f;
				}
				return;
			}
			damage = (int)((double)defDamage * 1.5);
			defense = defDefense + 10;
			HitSound = SoundID.NPCHit4;
			if (this.ai[1] == 0f)
			{
				float num983 = 8f;
				float num984 = 0.15f;
				if (Main.expertMode)
				{
					num983 = 9.5f;
					num984 = 0.175f;
				}
				if (Main.getGoodWorld)
				{
					num983 *= 1.15f;
					num984 *= 1.15f;
				}
				Vector2 vector258 = default(Vector2);
				((Vector2)(ref vector258))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num986 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector258.X;
				float num987 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 300f - vector258.Y;
				if (IsMechQueenUp)
				{
					num983 = 14f;
					num986 = vector254.X;
					num987 = vector254.Y;
					num986 -= vector258.X;
					num987 -= vector258.Y;
				}
				float num988 = (float)Math.Sqrt(num986 * num986 + num987 * num987);
				if (IsMechQueenUp)
				{
					if (num988 > num983)
					{
						num988 = num983 / num988;
						num986 *= num988;
						num987 *= num988;
					}
					velocity.X = (velocity.X * 4f + num986) / 5f;
					velocity.Y = (velocity.Y * 4f + num987) / 5f;
				}
				else
				{
					num988 = num983 / num988;
					num986 *= num988;
					num987 *= num988;
					if (velocity.X < num986)
					{
						velocity.X += num984;
						if (velocity.X < 0f && num986 > 0f)
						{
							velocity.X += num984;
						}
					}
					else if (velocity.X > num986)
					{
						velocity.X -= num984;
						if (velocity.X > 0f && num986 < 0f)
						{
							velocity.X -= num984;
						}
					}
					if (velocity.Y < num987)
					{
						velocity.Y += num984;
						if (velocity.Y < 0f && num987 > 0f)
						{
							velocity.Y += num984;
						}
					}
					else if (velocity.Y > num987)
					{
						velocity.Y -= num984;
						if (velocity.Y > 0f && num987 < 0f)
						{
							velocity.Y -= num984;
						}
					}
				}
				int num989 = 300;
				if (IsMechQueenUp)
				{
					num989 = 1200;
				}
				this.ai[2] += 1f;
				if (this.ai[2] >= (float)num989)
				{
					this.ai[1] = 1f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					TargetClosest();
					netUpdate = true;
				}
				((Vector2)(ref vector258))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				num986 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector258.X;
				num987 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector258.Y;
				rotation = (float)Math.Atan2(num987, num986) - 1.57f;
				if (Main.netMode == 1)
				{
					return;
				}
				localAI[1] += 1f;
				if ((double)life < (double)lifeMax * 0.75)
				{
					localAI[1] += 1f;
				}
				if ((double)life < (double)lifeMax * 0.5)
				{
					localAI[1] += 1f;
				}
				if ((double)life < (double)lifeMax * 0.25)
				{
					localAI[1] += 1f;
				}
				if ((double)life < (double)lifeMax * 0.1)
				{
					localAI[1] += 2f;
				}
				if (localAI[1] > 180f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					localAI[1] = 0f;
					float num990 = 8.5f;
					int attackDamage_ForProjectiles7 = GetAttackDamage_ForProjectiles(25f, 23f);
					int num991 = 100;
					if (Main.expertMode)
					{
						num990 = 10f;
					}
					num988 = (float)Math.Sqrt(num986 * num986 + num987 * num987);
					num988 = num990 / num988;
					num986 *= num988;
					num987 *= num988;
					vector258.X += num986 * 15f;
					vector258.Y += num987 * 15f;
					int num992 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector258.X, vector258.Y, num986, num987, num991, attackDamage_ForProjectiles7, 0f, Main.myPlayer);
				}
				return;
			}
			int num993 = 1;
			if (position.X + (float)(width / 2) < Main.player[target].position.X + (float)Main.player[target].width)
			{
				num993 = -1;
			}
			float num994 = 8f;
			float num995 = 0.2f;
			if (Main.expertMode)
			{
				num994 = 9.5f;
				num995 = 0.25f;
			}
			if (Main.getGoodWorld)
			{
				num994 *= 1.15f;
				num995 *= 1.15f;
			}
			Vector2 vector259 = default(Vector2);
			((Vector2)(ref vector259))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num997 = Main.player[target].position.X + (float)(Main.player[target].width / 2) + (float)(num993 * 340) - vector259.X;
			float num998 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector259.Y;
			float num999 = (float)Math.Sqrt(num997 * num997 + num998 * num998);
			num999 = num994 / num999;
			num997 *= num999;
			num998 *= num999;
			if (velocity.X < num997)
			{
				velocity.X += num995;
				if (velocity.X < 0f && num997 > 0f)
				{
					velocity.X += num995;
				}
			}
			else if (velocity.X > num997)
			{
				velocity.X -= num995;
				if (velocity.X > 0f && num997 < 0f)
				{
					velocity.X -= num995;
				}
			}
			if (velocity.Y < num998)
			{
				velocity.Y += num995;
				if (velocity.Y < 0f && num998 > 0f)
				{
					velocity.Y += num995;
				}
			}
			else if (velocity.Y > num998)
			{
				velocity.Y -= num995;
				if (velocity.Y > 0f && num998 < 0f)
				{
					velocity.Y -= num995;
				}
			}
			((Vector2)(ref vector259))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			num997 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector259.X;
			num998 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector259.Y;
			rotation = (float)Math.Atan2(num998, num997) - 1.57f;
			if (Main.netMode != 1)
			{
				localAI[1] += 1f;
				if ((double)life < (double)lifeMax * 0.75)
				{
					localAI[1] += 0.5f;
				}
				if ((double)life < (double)lifeMax * 0.5)
				{
					localAI[1] += 0.75f;
				}
				if ((double)life < (double)lifeMax * 0.25)
				{
					localAI[1] += 1f;
				}
				if ((double)life < (double)lifeMax * 0.1)
				{
					localAI[1] += 1.5f;
				}
				if (Main.expertMode)
				{
					localAI[1] += 1.5f;
				}
				if (localAI[1] > 60f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					localAI[1] = 0f;
					float num1000 = 9f;
					int attackDamage_ForProjectiles8 = GetAttackDamage_ForProjectiles(18f, 17f);
					int num1001 = 100;
					num999 = (float)Math.Sqrt(num997 * num997 + num998 * num998);
					num999 = num1000 / num999;
					num997 *= num999;
					num998 *= num999;
					vector259.X += num997 * 15f;
					vector259.Y += num998 * 15f;
					int num1002 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector259.X, vector259.Y, num997, num998, num1001, attackDamage_ForProjectiles8, 0f, Main.myPlayer);
				}
			}
			this.ai[2] += 1f;
			if (this.ai[2] >= 180f)
			{
				this.ai[1] = 0f;
				this.ai[2] = 0f;
				this.ai[3] = 0f;
				TargetClosest();
				netUpdate = true;
			}
		}
		else if (aiStyle == 31)
		{
			if (target < 0 || target == 255 || Main.player[target].dead || !Main.player[target].active)
			{
				TargetClosest();
			}
			bool dead3 = Main.player[target].dead;
			float num1003 = position.X + (float)(width / 2) - Main.player[target].position.X - (float)(Main.player[target].width / 2);
			float num1004 = position.Y + (float)height - 59f - Main.player[target].position.Y - (float)(Main.player[target].height / 2);
			float num1005 = (float)Math.Atan2(num1004, num1003) + 1.57f;
			if (num1005 < 0f)
			{
				num1005 += 6.283f;
			}
			else if ((double)num1005 > 6.283)
			{
				num1005 -= 6.283f;
			}
			float num1006 = 0.15f;
			if (IsMechQueenUp && this.ai[0] == 3f && this.ai[1] == 0f)
			{
				num1006 *= 0.25f;
			}
			if (rotation < num1005)
			{
				if ((double)(num1005 - rotation) > 3.1415)
				{
					rotation -= num1006;
				}
				else
				{
					rotation += num1006;
				}
			}
			else if (rotation > num1005)
			{
				if ((double)(rotation - num1005) > 3.1415)
				{
					rotation += num1006;
				}
				else
				{
					rotation -= num1006;
				}
			}
			if (rotation > num1005 - num1006 && rotation < num1005 + num1006)
			{
				rotation = num1005;
			}
			if (rotation < 0f)
			{
				rotation += 6.283f;
			}
			else if ((double)rotation > 6.283)
			{
				rotation -= 6.283f;
			}
			if (rotation > num1005 - num1006 && rotation < num1005 + num1006)
			{
				rotation = num1005;
			}
			if (Main.rand.Next(5) == 0)
			{
				Vector2 val44 = new Vector2(position.X, position.Y + (float)height * 0.25f);
				int num1680 = width;
				int num1681 = (int)((float)height * 0.5f);
				float x8 = velocity.X;
				newColor = default(Color);
				int num1008 = Dust.NewDust(val44, num1680, num1681, 5, x8, 2f, 0, newColor);
				Main.dust[num1008].velocity.X *= 0.5f;
				Main.dust[num1008].velocity.Y *= 0.1f;
			}
			if (Main.netMode != 1 && !Main.IsItDay() && !dead3 && timeLeft < 10)
			{
				for (int num1009 = 0; num1009 < 200; num1009++)
				{
					if (num1009 != whoAmI && Main.npc[num1009].active && (Main.npc[num1009].type == 125 || Main.npc[num1009].type == 126))
					{
						DiscourageDespawn(Main.npc[num1009].timeLeft - 1);
					}
				}
			}
			Vector2 vector260 = Vector2.Zero;
			if (IsMechQueenUp)
			{
				NPC nPC5 = Main.npc[mechQueen];
				Vector2 mechQueenCenter2 = nPC5.GetMechQueenCenter();
				Vector2 vector261 = default(Vector2);
				((Vector2)(ref vector261))._002Ector(150f, -250f);
				vector261 *= 0.75f;
				float num1010 = nPC5.velocity.X * 0.025f;
				vector260 = mechQueenCenter2 + vector261;
				vector260 = vector260.RotatedBy(num1010, mechQueenCenter2);
			}
			reflectsProjectiles = false;
			if (Main.IsItDay() || dead3)
			{
				velocity.Y -= 0.04f;
				EncourageDespawn(10);
				return;
			}
			if (this.ai[0] == 0f)
			{
				if (this.ai[1] == 0f)
				{
					TargetClosest();
					float num1011 = 12f;
					float num1012 = 0.4f;
					if (Main.getGoodWorld)
					{
						num1011 *= 1.15f;
						num1012 *= 1.15f;
					}
					int num1013 = 1;
					if (position.X + (float)(width / 2) < Main.player[target].position.X + (float)Main.player[target].width)
					{
						num1013 = -1;
					}
					Vector2 vector262 = default(Vector2);
					((Vector2)(ref vector262))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num1014 = Main.player[target].position.X + (float)(Main.player[target].width / 2) + (float)(num1013 * 400) - vector262.X;
					float num1015 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector262.Y;
					if (IsMechQueenUp)
					{
						num1011 = 14f;
						num1014 = vector260.X;
						num1015 = vector260.Y;
						num1014 -= vector262.X;
						num1015 -= vector262.Y;
					}
					float num1016 = (float)Math.Sqrt(num1014 * num1014 + num1015 * num1015);
					float num1017 = num1016;
					if (IsMechQueenUp)
					{
						if (num1016 > num1011)
						{
							num1016 = num1011 / num1016;
							num1014 *= num1016;
							num1015 *= num1016;
						}
						velocity.X = (velocity.X * 4f + num1014) / 5f;
						velocity.Y = (velocity.Y * 4f + num1015) / 5f;
					}
					else
					{
						num1016 = num1011 / num1016;
						num1014 *= num1016;
						num1015 *= num1016;
						if (velocity.X < num1014)
						{
							velocity.X += num1012;
							if (velocity.X < 0f && num1014 > 0f)
							{
								velocity.X += num1012;
							}
						}
						else if (velocity.X > num1014)
						{
							velocity.X -= num1012;
							if (velocity.X > 0f && num1014 < 0f)
							{
								velocity.X -= num1012;
							}
						}
						if (velocity.Y < num1015)
						{
							velocity.Y += num1012;
							if (velocity.Y < 0f && num1015 > 0f)
							{
								velocity.Y += num1012;
							}
						}
						else if (velocity.Y > num1015)
						{
							velocity.Y -= num1012;
							if (velocity.Y > 0f && num1015 < 0f)
							{
								velocity.Y -= num1012;
							}
						}
					}
					int num1019 = 600;
					if (IsMechQueenUp)
					{
						num1019 = 1200;
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= (float)num1019)
					{
						this.ai[1] = 1f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						target = 255;
						netUpdate = true;
					}
					else
					{
						if (!Main.player[target].dead)
						{
							this.ai[3] += 1f;
							if (Main.expertMode && (double)life < (double)lifeMax * 0.8)
							{
								this.ai[3] += 0.6f;
							}
							if (Main.getGoodWorld)
							{
								this.ai[3] += 0.4f;
							}
						}
						if (this.ai[3] >= 60f)
						{
							this.ai[3] = 0f;
							((Vector2)(ref vector262))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
							num1014 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector262.X;
							num1015 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector262.Y;
							if (Main.netMode != 1)
							{
								float num1020 = 12f;
								int attackDamage_ForProjectiles9 = GetAttackDamage_ForProjectiles(25f, 22f);
								int num1021 = 96;
								if (Main.expertMode)
								{
									num1020 = 14f;
								}
								num1016 = (float)Math.Sqrt(num1014 * num1014 + num1015 * num1015);
								num1016 = num1020 / num1016;
								num1014 *= num1016;
								num1015 *= num1016;
								num1014 += (float)Main.rand.Next(-40, 41) * 0.05f;
								num1015 += (float)Main.rand.Next(-40, 41) * 0.05f;
								vector262.X += num1014 * 4f;
								vector262.Y += num1015 * 4f;
								int num1022 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector262.X, vector262.Y, num1014, num1015, num1021, attackDamage_ForProjectiles9, 0f, Main.myPlayer);
							}
						}
					}
				}
				else if (this.ai[1] == 1f)
				{
					rotation = num1005;
					float num1023 = 13f;
					if (Main.expertMode)
					{
						if ((double)life < (double)lifeMax * 0.9)
						{
							num1023 += 0.5f;
						}
						if ((double)life < (double)lifeMax * 0.8)
						{
							num1023 += 0.5f;
						}
						if ((double)life < (double)lifeMax * 0.7)
						{
							num1023 += 0.55f;
						}
						if ((double)life < (double)lifeMax * 0.6)
						{
							num1023 += 0.6f;
						}
						if ((double)life < (double)lifeMax * 0.5)
						{
							num1023 += 0.65f;
						}
					}
					if (Main.getGoodWorld)
					{
						num1023 *= 1.2f;
					}
					Vector2 vector264 = default(Vector2);
					((Vector2)(ref vector264))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num1024 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector264.X;
					float num1025 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector264.Y;
					float num1026 = (float)Math.Sqrt(num1024 * num1024 + num1025 * num1025);
					num1026 = num1023 / num1026;
					velocity.X = num1024 * num1026;
					velocity.Y = num1025 * num1026;
					this.ai[1] = 2f;
				}
				else if (this.ai[1] == 2f)
				{
					this.ai[2] += 1f;
					if (this.ai[2] >= 8f)
					{
						velocity.X *= 0.9f;
						velocity.Y *= 0.9f;
						if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
						{
							velocity.X = 0f;
						}
						if ((double)velocity.Y > -0.1 && (double)velocity.Y < 0.1)
						{
							velocity.Y = 0f;
						}
					}
					else
					{
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
					}
					if (this.ai[2] >= 42f)
					{
						this.ai[3] += 1f;
						this.ai[2] = 0f;
						target = 255;
						rotation = num1005;
						if (this.ai[3] >= 10f)
						{
							this.ai[1] = 0f;
							this.ai[3] = 0f;
						}
						else
						{
							this.ai[1] = 1f;
						}
					}
				}
				if ((double)life < (double)lifeMax * 0.4)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
				}
				return;
			}
			if (this.ai[0] == 1f || this.ai[0] == 2f)
			{
				if (IsMechQueenUp)
				{
					reflectsProjectiles = true;
				}
				if (this.ai[0] == 1f)
				{
					this.ai[2] += 0.005f;
					if ((double)this.ai[2] > 0.5)
					{
						this.ai[2] = 0.5f;
					}
				}
				else
				{
					this.ai[2] -= 0.005f;
					if (this.ai[2] < 0f)
					{
						this.ai[2] = 0f;
					}
				}
				rotation += this.ai[2];
				this.ai[1] += 1f;
				if (this.ai[1] >= 100f)
				{
					this.ai[0] += 1f;
					this.ai[1] = 0f;
					if (this.ai[0] == 3f)
					{
						this.ai[2] = 0f;
					}
					else
					{
						SoundEngine.PlaySound(3, (int)position.X, (int)position.Y);
						for (int num1027 = 0; num1027 < 2; num1027++)
						{
							Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 144);
							Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 7);
							Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 6);
						}
						for (int num1028 = 0; num1028 < 20; num1028++)
						{
							Vector2 val45 = position;
							int num1682 = width;
							int num1683 = height;
							float speedX19 = (float)Main.rand.Next(-30, 31) * 0.2f;
							float speedY18 = (float)Main.rand.Next(-30, 31) * 0.2f;
							newColor = default(Color);
							Dust.NewDust(val45, num1682, num1683, 5, speedX19, speedY18, 0, newColor);
						}
						SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
					}
				}
				Vector2 val46 = position;
				int num1684 = width;
				int num1685 = height;
				float speedX20 = (float)Main.rand.Next(-30, 31) * 0.2f;
				float speedY19 = (float)Main.rand.Next(-30, 31) * 0.2f;
				newColor = default(Color);
				Dust.NewDust(val46, num1684, num1685, 5, speedX20, speedY19, 0, newColor);
				velocity.X *= 0.98f;
				velocity.Y *= 0.98f;
				if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
				{
					velocity.X = 0f;
				}
				if ((double)velocity.Y > -0.1 && (double)velocity.Y < 0.1)
				{
					velocity.Y = 0f;
				}
				return;
			}
			HitSound = SoundID.NPCHit4;
			damage = (int)((double)defDamage * 1.5);
			defense = defDefense + 18;
			if (this.ai[1] == 0f)
			{
				float num1030 = 4f;
				float num1031 = 0.1f;
				int num1032 = 1;
				if (position.X + (float)(width / 2) < Main.player[target].position.X + (float)Main.player[target].width)
				{
					num1032 = -1;
				}
				Vector2 vector265 = default(Vector2);
				((Vector2)(ref vector265))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1033 = Main.player[target].position.X + (float)(Main.player[target].width / 2) + (float)(num1032 * 180) - vector265.X;
				float num1034 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector265.Y;
				float num1035 = (float)Math.Sqrt(num1033 * num1033 + num1034 * num1034);
				if (!IsMechQueenUp)
				{
					if (Main.expertMode)
					{
						if (num1035 > 300f)
						{
							num1030 += 0.5f;
						}
						if (num1035 > 400f)
						{
							num1030 += 0.5f;
						}
						if (num1035 > 500f)
						{
							num1030 += 0.55f;
						}
						if (num1035 > 600f)
						{
							num1030 += 0.55f;
						}
						if (num1035 > 700f)
						{
							num1030 += 0.6f;
						}
						if (num1035 > 800f)
						{
							num1030 += 0.6f;
						}
					}
					if (Main.getGoodWorld)
					{
						num1030 *= 1.15f;
						num1031 *= 1.15f;
					}
					num1035 = num1030 / num1035;
					num1033 *= num1035;
					num1034 *= num1035;
					if (velocity.X < num1033)
					{
						velocity.X += num1031;
						if (velocity.X < 0f && num1033 > 0f)
						{
							velocity.X += num1031;
						}
					}
					else if (velocity.X > num1033)
					{
						velocity.X -= num1031;
						if (velocity.X > 0f && num1033 < 0f)
						{
							velocity.X -= num1031;
						}
					}
					if (velocity.Y < num1034)
					{
						velocity.Y += num1031;
						if (velocity.Y < 0f && num1034 > 0f)
						{
							velocity.Y += num1031;
						}
					}
					else if (velocity.Y > num1034)
					{
						velocity.Y -= num1031;
						if (velocity.Y > 0f && num1034 < 0f)
						{
							velocity.Y -= num1031;
						}
					}
				}
				int num1036 = 400;
				if (IsMechQueenUp)
				{
					num1036 = 1200;
				}
				this.ai[2] += 1f;
				if (this.ai[2] >= (float)num1036)
				{
					this.ai[1] = 1f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					target = 255;
					netUpdate = true;
				}
				if (Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					localAI[2] += 1f;
					if (localAI[2] > 22f)
					{
						localAI[2] = 0f;
						SoundEngine.PlaySound(in SoundID.Item34, position);
					}
					if (Main.netMode != 1)
					{
						localAI[1] += 1f;
						if ((double)life < (double)lifeMax * 0.75)
						{
							localAI[1] += 1f;
						}
						if ((double)life < (double)lifeMax * 0.5)
						{
							localAI[1] += 1f;
						}
						if ((double)life < (double)lifeMax * 0.25)
						{
							localAI[1] += 1f;
						}
						if ((double)life < (double)lifeMax * 0.1)
						{
							localAI[1] += 2f;
						}
						if (localAI[1] > 8f)
						{
							localAI[1] = 0f;
							float num1037 = 6f;
							int attackDamage_ForProjectiles10 = GetAttackDamage_ForProjectiles(30f, 27f);
							int num1038 = 101;
							((Vector2)(ref vector265))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
							num1033 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector265.X;
							num1034 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector265.Y;
							num1035 = (float)Math.Sqrt(num1033 * num1033 + num1034 * num1034);
							num1035 = num1037 / num1035;
							num1033 *= num1035;
							num1034 *= num1035;
							num1034 += (float)Main.rand.Next(-40, 41) * 0.01f;
							num1033 += (float)Main.rand.Next(-40, 41) * 0.01f;
							num1034 += velocity.Y * 0.5f;
							num1033 += velocity.X * 0.5f;
							vector265.X -= num1033 * 1f;
							vector265.Y -= num1034 * 1f;
							if (IsMechQueenUp)
							{
								Vector2 vector266 = (rotation + (float)Math.PI / 2f).ToRotationVector2() * num1037 + velocity * 0.5f;
								num1033 = vector266.X;
								num1034 = vector266.Y;
								vector265 = base.Center - vector266 * 3f;
							}
							int num1039 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector265.X, vector265.Y, num1033, num1034, num1038, attackDamage_ForProjectiles10, 0f, Main.myPlayer);
						}
					}
				}
				if (IsMechQueenUp)
				{
					num1030 = 14f;
					num1033 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector265.X;
					num1034 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 300f - vector265.Y;
					num1033 = vector260.X;
					num1034 = vector260.Y;
					num1033 -= vector265.X;
					num1034 -= vector265.Y;
					num1035 = (float)Math.Sqrt(num1033 * num1033 + num1034 * num1034);
					if (num1035 > num1030)
					{
						num1035 = num1030 / num1035;
						num1033 *= num1035;
						num1034 *= num1035;
					}
					int num1041 = 60;
					velocity.X = (velocity.X * (float)(num1041 - 1) + num1033) / (float)num1041;
					velocity.Y = (velocity.Y * (float)(num1041 - 1) + num1034) / (float)num1041;
				}
			}
			else if (this.ai[1] == 1f)
			{
				SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
				rotation = num1005;
				float num1042 = 14f;
				if (Main.expertMode)
				{
					num1042 += 2.5f;
				}
				Vector2 vector267 = default(Vector2);
				((Vector2)(ref vector267))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1043 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector267.X;
				float num1044 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector267.Y;
				float num1045 = (float)Math.Sqrt(num1043 * num1043 + num1044 * num1044);
				num1045 = num1042 / num1045;
				velocity.X = num1043 * num1045;
				velocity.Y = num1044 * num1045;
				this.ai[1] = 2f;
			}
			else
			{
				if (this.ai[1] != 2f)
				{
					return;
				}
				this.ai[2] += 1f;
				if (Main.expertMode)
				{
					this.ai[2] += 0.5f;
				}
				if (this.ai[2] >= 50f)
				{
					velocity.X *= 0.93f;
					velocity.Y *= 0.93f;
					if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
					{
						velocity.X = 0f;
					}
					if ((double)velocity.Y > -0.1 && (double)velocity.Y < 0.1)
					{
						velocity.Y = 0f;
					}
				}
				else
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
				}
				if (this.ai[2] >= 80f)
				{
					this.ai[3] += 1f;
					this.ai[2] = 0f;
					target = 255;
					rotation = num1005;
					if (this.ai[3] >= 6f)
					{
						this.ai[1] = 0f;
						this.ai[3] = 0f;
					}
					else
					{
						this.ai[1] = 1f;
					}
				}
			}
		}
		else if (aiStyle == 32)
		{
			damage = defDamage;
			defense = defDefense;
			if (this.ai[3] != 0f)
			{
				mechQueen = whoAmI;
			}
			reflectsProjectiles = false;
			if (this.ai[0] == 0f && Main.netMode != 1)
			{
				TargetClosest();
				this.ai[0] = 1f;
				int num1046 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)position.Y + height / 2, 128, whoAmI);
				Main.npc[num1046].ai[0] = -1f;
				Main.npc[num1046].ai[1] = whoAmI;
				Main.npc[num1046].target = target;
				Main.npc[num1046].netUpdate = true;
				num1046 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)position.Y + height / 2, 129, whoAmI);
				Main.npc[num1046].ai[0] = 1f;
				Main.npc[num1046].ai[1] = whoAmI;
				Main.npc[num1046].target = target;
				Main.npc[num1046].netUpdate = true;
				num1046 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)position.Y + height / 2, 130, whoAmI);
				Main.npc[num1046].ai[0] = -1f;
				Main.npc[num1046].ai[1] = whoAmI;
				Main.npc[num1046].target = target;
				Main.npc[num1046].ai[3] = 150f;
				Main.npc[num1046].netUpdate = true;
				num1046 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)position.Y + height / 2, 131, whoAmI);
				Main.npc[num1046].ai[0] = 1f;
				Main.npc[num1046].ai[1] = whoAmI;
				Main.npc[num1046].target = target;
				Main.npc[num1046].netUpdate = true;
				Main.npc[num1046].ai[3] = 150f;
			}
			if (Main.player[target].dead || Math.Abs(position.X - Main.player[target].position.X) > 6000f || Math.Abs(position.Y - Main.player[target].position.Y) > 6000f)
			{
				TargetClosest();
				if (Main.player[target].dead || Math.Abs(position.X - Main.player[target].position.X) > 6000f || Math.Abs(position.Y - Main.player[target].position.Y) > 6000f)
				{
					this.ai[1] = 3f;
				}
			}
			if (Main.IsItDay() && this.ai[1] != 3f && this.ai[1] != 2f)
			{
				this.ai[1] = 2f;
				SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
			}
			if (this.ai[1] == 0f)
			{
				this.ai[2] += 1f;
				if (this.ai[2] >= 600f)
				{
					this.ai[2] = 0f;
					this.ai[1] = 1f;
					TargetClosest();
					netUpdate = true;
				}
				if (IsMechQueenUp)
				{
					rotation = rotation.AngleLerp(velocity.X / 15f * 0.5f, 0.75f);
				}
				else
				{
					rotation = velocity.X / 15f;
				}
				float num1047 = 0.1f;
				float num1048 = 2f;
				float num1049 = 0.1f;
				float num1050 = 8f;
				int num1053 = 200;
				int num1054 = 500;
				float num1055 = 0f;
				int num1056 = ((!(Main.player[target].Center.X < base.Center.X)) ? 1 : (-1));
				if (IsMechQueenUp)
				{
					num1055 = -450f * (float)num1056;
					num1053 = 300;
					num1054 = 350;
				}
				if (Main.expertMode)
				{
					num1047 = 0.03f;
					num1048 = 4f;
					num1049 = 0.07f;
					num1050 = 9.5f;
				}
				if (position.Y > Main.player[target].position.Y - (float)num1053)
				{
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.98f;
					}
					velocity.Y -= num1047;
					if (velocity.Y > num1048)
					{
						velocity.Y = num1048;
					}
				}
				else if (position.Y < Main.player[target].position.Y - (float)num1054)
				{
					if (velocity.Y < 0f)
					{
						velocity.Y *= 0.98f;
					}
					velocity.Y += num1047;
					if (velocity.Y < 0f - num1048)
					{
						velocity.Y = 0f - num1048;
					}
				}
				if (position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2) + 100f + num1055)
				{
					if (velocity.X > 0f)
					{
						velocity.X *= 0.98f;
					}
					velocity.X -= num1049;
					if (velocity.X > num1050)
					{
						velocity.X = num1050;
					}
				}
				if (position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2) - 100f + num1055)
				{
					if (velocity.X < 0f)
					{
						velocity.X *= 0.98f;
					}
					velocity.X += num1049;
					if (velocity.X < 0f - num1050)
					{
						velocity.X = 0f - num1050;
					}
				}
			}
			else if (this.ai[1] == 1f)
			{
				defense *= 2;
				damage *= 2;
				this.ai[2] += 1f;
				if (this.ai[2] == 2f)
				{
					SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
				}
				if (this.ai[2] >= 400f)
				{
					this.ai[2] = 0f;
					this.ai[1] = 0f;
				}
				if (IsMechQueenUp)
				{
					rotation = rotation.AngleLerp(velocity.X / 15f * 0.5f, 0.75f);
				}
				else
				{
					rotation += (float)direction * 0.3f;
				}
				Vector2 vector268 = default(Vector2);
				((Vector2)(ref vector268))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1057 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector268.X;
				float num1058 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector268.Y;
				float num1059 = (float)Math.Sqrt(num1057 * num1057 + num1058 * num1058);
				float num1060 = 2f;
				if (Main.expertMode)
				{
					num1060 = 6f;
					if (num1059 > 150f)
					{
						num1060 *= 1.05f;
					}
					if (num1059 > 200f)
					{
						num1060 *= 1.1f;
					}
					if (num1059 > 250f)
					{
						num1060 *= 1.1f;
					}
					if (num1059 > 300f)
					{
						num1060 *= 1.1f;
					}
					if (num1059 > 350f)
					{
						num1060 *= 1.1f;
					}
					if (num1059 > 400f)
					{
						num1060 *= 1.1f;
					}
					if (num1059 > 450f)
					{
						num1060 *= 1.1f;
					}
					if (num1059 > 500f)
					{
						num1060 *= 1.1f;
					}
					if (num1059 > 550f)
					{
						num1060 *= 1.1f;
					}
					if (num1059 > 600f)
					{
						num1060 *= 1.1f;
					}
				}
				if (IsMechQueenUp)
				{
					float num1061 = (npcsFoundForCheckActive[135] ? 0.6f : 0.75f);
					num1060 *= num1061;
				}
				num1059 = num1060 / num1059;
				velocity.X = num1057 * num1059;
				velocity.Y = num1058 * num1059;
				if (IsMechQueenUp)
				{
					float num1062 = Vector2.Distance(base.Center, Main.player[target].Center);
					if (num1062 < 0.1f)
					{
						num1062 = 0f;
					}
					if (num1062 < num1060)
					{
						velocity = velocity.SafeNormalize(Vector2.Zero) * num1062;
					}
				}
			}
			else if (this.ai[1] == 2f)
			{
				damage = 1000;
				defense = 9999;
				if (IsMechQueenUp)
				{
					rotation = rotation.AngleLerp(velocity.X / 15f * 0.5f, 0.75f);
				}
				else
				{
					rotation += (float)direction * 0.3f;
				}
				Vector2 vector269 = default(Vector2);
				((Vector2)(ref vector269))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1064 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector269.X;
				float num1065 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector269.Y;
				float num1066 = (float)Math.Sqrt(num1064 * num1064 + num1065 * num1065);
				float num1067 = 10f;
				num1067 += num1066 / 100f;
				if (num1067 < 8f)
				{
					num1067 = 8f;
				}
				if (num1067 > 32f)
				{
					num1067 = 32f;
				}
				num1066 = num1067 / num1066;
				velocity.X = num1064 * num1066;
				velocity.Y = num1065 * num1066;
			}
			else
			{
				if (this.ai[1] != 3f)
				{
					return;
				}
				if (IsMechQueenUp)
				{
					int num1068 = FindFirstNPC(125);
					if (num1068 >= 0)
					{
						Main.npc[num1068].EncourageDespawn(5);
					}
					num1068 = FindFirstNPC(126);
					if (num1068 >= 0)
					{
						Main.npc[num1068].EncourageDespawn(5);
					}
					if (!AnyNPCs(125) && !AnyNPCs(126))
					{
						num1068 = FindFirstNPC(134);
						if (num1068 >= 0)
						{
							Main.npc[num1068].Transform(136);
						}
						EncourageDespawn(5);
					}
					velocity.Y += 0.1f;
					if (velocity.Y < 0f)
					{
						velocity.Y *= 0.95f;
					}
					velocity.X *= 0.95f;
					if (velocity.Y > 13f)
					{
						velocity.Y = 13f;
					}
				}
				else
				{
					EncourageDespawn(500);
					velocity.Y += 0.1f;
					if (velocity.Y < 0f)
					{
						velocity.Y *= 0.95f;
					}
					velocity.X *= 0.95f;
				}
			}
		}
		else if (aiStyle == 33)
		{
			Vector2 vector270 = default(Vector2);
			((Vector2)(ref vector270))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num1069 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector270.X;
			float num1070 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector270.Y;
			float num1071 = (float)Math.Sqrt(num1069 * num1069 + num1070 * num1070);
			if (this.ai[2] != 99f)
			{
				if (num1071 > 800f)
				{
					this.ai[2] = 99f;
				}
			}
			else if (num1071 < 400f)
			{
				this.ai[2] = 0f;
			}
			spriteDirection = -(int)this.ai[0];
			if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 32)
			{
				this.ai[2] += 10f;
				if (this.ai[2] > 50f || Main.netMode != 2)
				{
					life = -1;
					HitEffect();
					active = false;
				}
			}
			if (this.ai[2] == 99f)
			{
				if (position.Y > Main.npc[(int)this.ai[1]].position.Y)
				{
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.96f;
					}
					velocity.Y -= 0.1f;
					if (velocity.Y > 8f)
					{
						velocity.Y = 8f;
					}
				}
				else if (position.Y < Main.npc[(int)this.ai[1]].position.Y)
				{
					if (velocity.Y < 0f)
					{
						velocity.Y *= 0.96f;
					}
					velocity.Y += 0.1f;
					if (velocity.Y < -8f)
					{
						velocity.Y = -8f;
					}
				}
				if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
				{
					if (velocity.X > 0f)
					{
						velocity.X *= 0.96f;
					}
					velocity.X -= 0.5f;
					if (velocity.X > 12f)
					{
						velocity.X = 12f;
					}
				}
				if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
				{
					if (velocity.X < 0f)
					{
						velocity.X *= 0.96f;
					}
					velocity.X += 0.5f;
					if (velocity.X < -12f)
					{
						velocity.X = -12f;
					}
				}
			}
			else if (this.ai[2] == 0f || this.ai[2] == 3f)
			{
				if (Main.npc[(int)this.ai[1]].ai[1] == 3f)
				{
					EncourageDespawn(10);
				}
				if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
				{
					TargetClosest();
					if (Main.player[target].dead)
					{
						velocity.Y += 0.1f;
						if (velocity.Y > 16f)
						{
							velocity.Y = 16f;
						}
					}
					else
					{
						Vector2 vector271 = default(Vector2);
						((Vector2)(ref vector271))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num1072 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector271.X;
						float num1073 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector271.Y;
						float num1075 = (float)Math.Sqrt(num1072 * num1072 + num1073 * num1073);
						num1075 = 7f / num1075;
						num1072 *= num1075;
						num1073 *= num1075;
						rotation = (float)Math.Atan2(num1073, num1072) - 1.57f;
						if (velocity.X > num1072)
						{
							if (velocity.X > 0f)
							{
								velocity.X *= 0.97f;
							}
							velocity.X -= 0.05f;
						}
						if (velocity.X < num1072)
						{
							if (velocity.X < 0f)
							{
								velocity.X *= 0.97f;
							}
							velocity.X += 0.05f;
						}
						if (velocity.Y > num1073)
						{
							if (velocity.Y > 0f)
							{
								velocity.Y *= 0.97f;
							}
							velocity.Y -= 0.05f;
						}
						if (velocity.Y < num1073)
						{
							if (velocity.Y < 0f)
							{
								velocity.Y *= 0.97f;
							}
							velocity.Y += 0.05f;
						}
					}
					this.ai[3] += 1f;
					if (this.ai[3] >= 600f)
					{
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
				}
				else
				{
					this.ai[3] += 1f;
					if (this.ai[3] >= 300f)
					{
						this.ai[2] += 1f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					if (position.Y > Main.npc[(int)this.ai[1]].position.Y + 320f)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.96f;
						}
						velocity.Y -= 0.04f;
						if (velocity.Y > 3f)
						{
							velocity.Y = 3f;
						}
					}
					else if (position.Y < Main.npc[(int)this.ai[1]].position.Y + 260f)
					{
						if (velocity.Y < 0f)
						{
							velocity.Y *= 0.96f;
						}
						velocity.Y += 0.04f;
						if (velocity.Y < -3f)
						{
							velocity.Y = -3f;
						}
					}
					if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
					{
						if (velocity.X > 0f)
						{
							velocity.X *= 0.96f;
						}
						velocity.X -= 0.3f;
						if (velocity.X > 12f)
						{
							velocity.X = 12f;
						}
					}
					if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 250f)
					{
						if (velocity.X < 0f)
						{
							velocity.X *= 0.96f;
						}
						velocity.X += 0.3f;
						if (velocity.X < -12f)
						{
							velocity.X = -12f;
						}
					}
				}
				Vector2 vector272 = default(Vector2);
				((Vector2)(ref vector272))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1076 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector272.X;
				float num1077 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector272.Y;
				float num1078 = (float)Math.Sqrt(num1076 * num1076 + num1077 * num1077);
				rotation = (float)Math.Atan2(num1077, num1076) + 1.57f;
			}
			else if (this.ai[2] == 1f)
			{
				Vector2 vector273 = default(Vector2);
				((Vector2)(ref vector273))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1079 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector273.X;
				float num1080 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector273.Y;
				float num1081 = (float)Math.Sqrt(num1079 * num1079 + num1080 * num1080);
				rotation = (float)Math.Atan2(num1080, num1079) + 1.57f;
				velocity.X *= 0.95f;
				velocity.Y -= 0.1f;
				if (velocity.Y < -8f)
				{
					velocity.Y = -8f;
				}
				if (position.Y < Main.npc[(int)this.ai[1]].position.Y - 200f)
				{
					TargetClosest();
					this.ai[2] = 2f;
					((Vector2)(ref vector273))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					num1079 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector273.X;
					num1080 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector273.Y;
					num1081 = (float)Math.Sqrt(num1079 * num1079 + num1080 * num1080);
					num1081 = 22f / num1081;
					velocity.X = num1079 * num1081;
					velocity.Y = num1080 * num1081;
					netUpdate = true;
				}
			}
			else if (this.ai[2] == 2f)
			{
				if (position.Y > Main.player[target].position.Y || velocity.Y < 0f)
				{
					this.ai[2] = 3f;
				}
			}
			else if (this.ai[2] == 4f)
			{
				TargetClosest();
				Vector2 vector275 = default(Vector2);
				((Vector2)(ref vector275))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1082 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector275.X;
				float num1083 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector275.Y;
				float num1084 = (float)Math.Sqrt(num1082 * num1082 + num1083 * num1083);
				num1084 = 7f / num1084;
				num1082 *= num1084;
				num1083 *= num1084;
				if (velocity.X > num1082)
				{
					if (velocity.X > 0f)
					{
						velocity.X *= 0.97f;
					}
					velocity.X -= 0.05f;
				}
				if (velocity.X < num1082)
				{
					if (velocity.X < 0f)
					{
						velocity.X *= 0.97f;
					}
					velocity.X += 0.05f;
				}
				if (velocity.Y > num1083)
				{
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.97f;
					}
					velocity.Y -= 0.05f;
				}
				if (velocity.Y < num1083)
				{
					if (velocity.Y < 0f)
					{
						velocity.Y *= 0.97f;
					}
					velocity.Y += 0.05f;
				}
				this.ai[3] += 1f;
				if (this.ai[3] >= 600f)
				{
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
				}
				((Vector2)(ref vector275))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				num1082 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector275.X;
				num1083 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector275.Y;
				num1084 = (float)Math.Sqrt(num1082 * num1082 + num1083 * num1083);
				rotation = (float)Math.Atan2(num1083, num1082) + 1.57f;
			}
			else if (this.ai[2] == 5f && ((velocity.X > 0f && position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2)) || (velocity.X < 0f && position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2))))
			{
				this.ai[2] = 0f;
			}
		}
		else if (aiStyle == 34)
		{
			spriteDirection = -(int)this.ai[0];
			Vector2 vector276 = default(Vector2);
			((Vector2)(ref vector276))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num1086 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector276.X;
			float num1087 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector276.Y;
			float num1088 = (float)Math.Sqrt(num1086 * num1086 + num1087 * num1087);
			if (this.ai[2] != 99f)
			{
				if (num1088 > 800f)
				{
					this.ai[2] = 99f;
				}
			}
			else if (num1088 < 400f)
			{
				this.ai[2] = 0f;
			}
			if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 32)
			{
				this.ai[2] += 10f;
				if (this.ai[2] > 50f || Main.netMode != 2)
				{
					life = -1;
					HitEffect();
					active = false;
				}
			}
			if (this.ai[2] == 99f)
			{
				if (position.Y > Main.npc[(int)this.ai[1]].position.Y)
				{
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.96f;
					}
					velocity.Y -= 0.1f;
					if (velocity.Y > 8f)
					{
						velocity.Y = 8f;
					}
				}
				else if (position.Y < Main.npc[(int)this.ai[1]].position.Y)
				{
					if (velocity.Y < 0f)
					{
						velocity.Y *= 0.96f;
					}
					velocity.Y += 0.1f;
					if (velocity.Y < -8f)
					{
						velocity.Y = -8f;
					}
				}
				if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
				{
					if (velocity.X > 0f)
					{
						velocity.X *= 0.96f;
					}
					velocity.X -= 0.5f;
					if (velocity.X > 12f)
					{
						velocity.X = 12f;
					}
				}
				if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
				{
					if (velocity.X < 0f)
					{
						velocity.X *= 0.96f;
					}
					velocity.X += 0.5f;
					if (velocity.X < -12f)
					{
						velocity.X = -12f;
					}
				}
			}
			else if (this.ai[2] == 0f || this.ai[2] == 3f)
			{
				if (Main.npc[(int)this.ai[1]].ai[1] == 3f)
				{
					EncourageDespawn(10);
				}
				if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
				{
					TargetClosest();
					TargetClosest();
					if (Main.player[target].dead)
					{
						velocity.Y += 0.1f;
						if (velocity.Y > 16f)
						{
							velocity.Y = 16f;
						}
					}
					else
					{
						Vector2 vector277 = default(Vector2);
						((Vector2)(ref vector277))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num1089 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector277.X;
						float num1090 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector277.Y;
						float num1091 = (float)Math.Sqrt(num1089 * num1089 + num1090 * num1090);
						num1091 = 12f / num1091;
						num1089 *= num1091;
						num1090 *= num1091;
						rotation = (float)Math.Atan2(num1090, num1089) - 1.57f;
						if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < 2f)
						{
							rotation = (float)Math.Atan2(num1090, num1089) - 1.57f;
							velocity.X = num1089;
							velocity.Y = num1090;
							netUpdate = true;
						}
						else
						{
							velocity *= 0.97f;
						}
						this.ai[3] += 1f;
						if (this.ai[3] >= 600f)
						{
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
					}
				}
				else
				{
					this.ai[3] += 1f;
					if (this.ai[3] >= 600f)
					{
						this.ai[2] += 1f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					if (position.Y > Main.npc[(int)this.ai[1]].position.Y + 300f)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.96f;
						}
						velocity.Y -= 0.1f;
						if (velocity.Y > 3f)
						{
							velocity.Y = 3f;
						}
					}
					else if (position.Y < Main.npc[(int)this.ai[1]].position.Y + 230f)
					{
						if (velocity.Y < 0f)
						{
							velocity.Y *= 0.96f;
						}
						velocity.Y += 0.1f;
						if (velocity.Y < -3f)
						{
							velocity.Y = -3f;
						}
					}
					if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 250f)
					{
						if (velocity.X > 0f)
						{
							velocity.X *= 0.94f;
						}
						velocity.X -= 0.3f;
						if (velocity.X > 9f)
						{
							velocity.X = 9f;
						}
					}
					if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
					{
						if (velocity.X < 0f)
						{
							velocity.X *= 0.94f;
						}
						velocity.X += 0.2f;
						if (velocity.X < -8f)
						{
							velocity.X = -8f;
						}
					}
				}
				Vector2 vector278 = default(Vector2);
				((Vector2)(ref vector278))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1092 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector278.X;
				float num1093 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector278.Y;
				float num1094 = (float)Math.Sqrt(num1092 * num1092 + num1093 * num1093);
				rotation = (float)Math.Atan2(num1093, num1092) + 1.57f;
			}
			else if (this.ai[2] == 1f)
			{
				if (velocity.Y > 0f)
				{
					velocity.Y *= 0.9f;
				}
				Vector2 vector279 = default(Vector2);
				((Vector2)(ref vector279))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1095 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 280f * this.ai[0] - vector279.X;
				float num1097 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector279.Y;
				float num1098 = (float)Math.Sqrt(num1095 * num1095 + num1097 * num1097);
				rotation = (float)Math.Atan2(num1097, num1095) + 1.57f;
				velocity.X = (velocity.X * 5f + Main.npc[(int)this.ai[1]].velocity.X) / 6f;
				velocity.X += 0.5f;
				velocity.Y -= 0.5f;
				if (velocity.Y < -9f)
				{
					velocity.Y = -9f;
				}
				if (position.Y < Main.npc[(int)this.ai[1]].position.Y - 280f)
				{
					TargetClosest();
					this.ai[2] = 2f;
					((Vector2)(ref vector279))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					num1095 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector279.X;
					num1097 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector279.Y;
					num1098 = (float)Math.Sqrt(num1095 * num1095 + num1097 * num1097);
					num1098 = 20f / num1098;
					velocity.X = num1095 * num1098;
					velocity.Y = num1097 * num1098;
					netUpdate = true;
				}
			}
			else if (this.ai[2] == 2f)
			{
				if (position.Y > Main.player[target].position.Y || velocity.Y < 0f)
				{
					if (this.ai[3] >= 4f)
					{
						this.ai[2] = 3f;
						this.ai[3] = 0f;
					}
					else
					{
						this.ai[2] = 1f;
						this.ai[3] += 1f;
					}
				}
			}
			else if (this.ai[2] == 4f)
			{
				Vector2 vector280 = default(Vector2);
				((Vector2)(ref vector280))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1099 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector280.X;
				float num1100 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector280.Y;
				float num1101 = (float)Math.Sqrt(num1099 * num1099 + num1100 * num1100);
				rotation = (float)Math.Atan2(num1100, num1099) + 1.57f;
				velocity.Y = (velocity.Y * 5f + Main.npc[(int)this.ai[1]].velocity.Y) / 6f;
				velocity.X += 0.5f;
				if (velocity.X > 12f)
				{
					velocity.X = 12f;
				}
				if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 500f || position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 500f)
				{
					TargetClosest();
					this.ai[2] = 5f;
					((Vector2)(ref vector280))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					num1099 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector280.X;
					num1100 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector280.Y;
					num1101 = (float)Math.Sqrt(num1099 * num1099 + num1100 * num1100);
					num1101 = 17f / num1101;
					velocity.X = num1099 * num1101;
					velocity.Y = num1100 * num1101;
					netUpdate = true;
				}
			}
			else if (this.ai[2] == 5f && position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2) - 100f)
			{
				if (this.ai[3] >= 4f)
				{
					this.ai[2] = 0f;
					this.ai[3] = 0f;
				}
				else
				{
					this.ai[2] = 4f;
					this.ai[3] += 1f;
				}
			}
		}
		else if (aiStyle == 35)
		{
			spriteDirection = -(int)this.ai[0];
			if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 32)
			{
				this.ai[2] += 10f;
				if (this.ai[2] > 50f || Main.netMode != 2)
				{
					life = -1;
					HitEffect();
					active = false;
				}
			}
			if (this.ai[2] == 0f)
			{
				if (Main.npc[(int)this.ai[1]].ai[1] == 3f)
				{
					EncourageDespawn(10);
				}
				if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
				{
					localAI[0] += 2f;
					if (position.Y > Main.npc[(int)this.ai[1]].position.Y - 100f)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.96f;
						}
						velocity.Y -= 0.07f;
						if (velocity.Y > 6f)
						{
							velocity.Y = 6f;
						}
					}
					else if (position.Y < Main.npc[(int)this.ai[1]].position.Y - 100f)
					{
						if (velocity.Y < 0f)
						{
							velocity.Y *= 0.96f;
						}
						velocity.Y += 0.07f;
						if (velocity.Y < -6f)
						{
							velocity.Y = -6f;
						}
					}
					if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
					{
						if (velocity.X > 0f)
						{
							velocity.X *= 0.96f;
						}
						velocity.X -= 0.1f;
						if (velocity.X > 8f)
						{
							velocity.X = 8f;
						}
					}
					if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
					{
						if (velocity.X < 0f)
						{
							velocity.X *= 0.96f;
						}
						velocity.X += 0.1f;
						if (velocity.X < -8f)
						{
							velocity.X = -8f;
						}
					}
				}
				else
				{
					this.ai[3] += 1f;
					if (this.ai[3] >= 1100f)
					{
						localAI[0] = 0f;
						this.ai[2] = 1f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					if (position.Y > Main.npc[(int)this.ai[1]].position.Y - 150f)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.96f;
						}
						velocity.Y -= 0.04f;
						if (velocity.Y > 3f)
						{
							velocity.Y = 3f;
						}
					}
					else if (position.Y < Main.npc[(int)this.ai[1]].position.Y - 150f)
					{
						if (velocity.Y < 0f)
						{
							velocity.Y *= 0.96f;
						}
						velocity.Y += 0.04f;
						if (velocity.Y < -3f)
						{
							velocity.Y = -3f;
						}
					}
					if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 200f)
					{
						if (velocity.X > 0f)
						{
							velocity.X *= 0.96f;
						}
						velocity.X -= 0.2f;
						if (velocity.X > 8f)
						{
							velocity.X = 8f;
						}
					}
					if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 160f)
					{
						if (velocity.X < 0f)
						{
							velocity.X *= 0.96f;
						}
						velocity.X += 0.2f;
						if (velocity.X < -8f)
						{
							velocity.X = -8f;
						}
					}
				}
				Vector2 vector281 = default(Vector2);
				((Vector2)(ref vector281))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1102 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector281.X;
				float num1103 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector281.Y;
				float num1104 = (float)Math.Sqrt(num1102 * num1102 + num1103 * num1103);
				rotation = (float)Math.Atan2(num1103, num1102) + 1.57f;
				if (Main.netMode != 1)
				{
					localAI[0] += 1f;
					if (localAI[0] > 140f)
					{
						localAI[0] = 0f;
						float num1105 = 12f;
						int num1106 = 0;
						int num1108 = 102;
						num1104 = num1105 / num1104;
						num1102 = (0f - num1102) * num1104;
						num1103 = (0f - num1103) * num1104;
						num1102 += (float)Main.rand.Next(-40, 41) * 0.01f;
						num1103 += (float)Main.rand.Next(-40, 41) * 0.01f;
						vector281.X += num1102 * 4f;
						vector281.Y += num1103 * 4f;
						int num1109 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector281.X, vector281.Y, num1102, num1103, num1108, num1106, 0f, Main.myPlayer);
					}
				}
			}
			else
			{
				if (this.ai[2] != 1f)
				{
					return;
				}
				this.ai[3] += 1f;
				if (this.ai[3] >= 300f)
				{
					localAI[0] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
				}
				Vector2 vector282 = default(Vector2);
				((Vector2)(ref vector282))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1110 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - vector282.X;
				float num1111 = Main.npc[(int)this.ai[1]].position.Y - vector282.Y;
				num1111 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 80f - vector282.Y;
				float num1112 = (float)Math.Sqrt(num1110 * num1110 + num1111 * num1111);
				num1112 = 6f / num1112;
				num1110 *= num1112;
				num1111 *= num1112;
				if (velocity.X > num1110)
				{
					if (velocity.X > 0f)
					{
						velocity.X *= 0.9f;
					}
					velocity.X -= 0.04f;
				}
				if (velocity.X < num1110)
				{
					if (velocity.X < 0f)
					{
						velocity.X *= 0.9f;
					}
					velocity.X += 0.04f;
				}
				if (velocity.Y > num1111)
				{
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.9f;
					}
					velocity.Y -= 0.08f;
				}
				if (velocity.Y < num1111)
				{
					if (velocity.Y < 0f)
					{
						velocity.Y *= 0.9f;
					}
					velocity.Y += 0.08f;
				}
				TargetClosest();
				((Vector2)(ref vector282))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				num1110 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector282.X;
				num1111 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector282.Y;
				num1112 = (float)Math.Sqrt(num1110 * num1110 + num1111 * num1111);
				rotation = (float)Math.Atan2(num1111, num1110) - 1.57f;
				if (Main.netMode != 1)
				{
					localAI[0] += 1f;
					if (localAI[0] > 40f)
					{
						localAI[0] = 0f;
						float num1113 = 10f;
						int num1114 = 0;
						int num1115 = 102;
						num1112 = num1113 / num1112;
						num1110 *= num1112;
						num1111 *= num1112;
						num1110 += (float)Main.rand.Next(-40, 41) * 0.01f;
						num1111 += (float)Main.rand.Next(-40, 41) * 0.01f;
						vector282.X += num1110 * 4f;
						vector282.Y += num1111 * 4f;
						int num1116 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector282.X, vector282.Y, num1110, num1111, num1115, num1114, 0f, Main.myPlayer);
					}
				}
			}
		}
		else if (aiStyle == 36)
		{
			spriteDirection = -(int)this.ai[0];
			if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 32)
			{
				this.ai[2] += 10f;
				if (this.ai[2] > 50f || Main.netMode != 2)
				{
					life = -1;
					HitEffect();
					active = false;
				}
			}
			if (this.ai[2] == 0f || this.ai[2] == 3f)
			{
				if (Main.npc[(int)this.ai[1]].ai[1] == 3f)
				{
					EncourageDespawn(10);
				}
				if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
				{
					localAI[0] += 3f;
					if (position.Y > Main.npc[(int)this.ai[1]].position.Y - 100f)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.96f;
						}
						velocity.Y -= 0.07f;
						if (velocity.Y > 6f)
						{
							velocity.Y = 6f;
						}
					}
					else if (position.Y < Main.npc[(int)this.ai[1]].position.Y - 100f)
					{
						if (velocity.Y < 0f)
						{
							velocity.Y *= 0.96f;
						}
						velocity.Y += 0.07f;
						if (velocity.Y < -6f)
						{
							velocity.Y = -6f;
						}
					}
					if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
					{
						if (velocity.X > 0f)
						{
							velocity.X *= 0.96f;
						}
						velocity.X -= 0.1f;
						if (velocity.X > 8f)
						{
							velocity.X = 8f;
						}
					}
					if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
					{
						if (velocity.X < 0f)
						{
							velocity.X *= 0.96f;
						}
						velocity.X += 0.1f;
						if (velocity.X < -8f)
						{
							velocity.X = -8f;
						}
					}
				}
				else
				{
					this.ai[3] += 1f;
					if (this.ai[3] >= 800f)
					{
						this.ai[2] += 1f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					if (position.Y > Main.npc[(int)this.ai[1]].position.Y - 100f)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.96f;
						}
						velocity.Y -= 0.1f;
						if (velocity.Y > 3f)
						{
							velocity.Y = 3f;
						}
					}
					else if (position.Y < Main.npc[(int)this.ai[1]].position.Y - 100f)
					{
						if (velocity.Y < 0f)
						{
							velocity.Y *= 0.96f;
						}
						velocity.Y += 0.1f;
						if (velocity.Y < -3f)
						{
							velocity.Y = -3f;
						}
					}
					if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 180f * this.ai[0])
					{
						if (velocity.X > 0f)
						{
							velocity.X *= 0.96f;
						}
						velocity.X -= 0.14f;
						if (velocity.X > 8f)
						{
							velocity.X = 8f;
						}
					}
					if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 180f * this.ai[0])
					{
						if (velocity.X < 0f)
						{
							velocity.X *= 0.96f;
						}
						velocity.X += 0.14f;
						if (velocity.X < -8f)
						{
							velocity.X = -8f;
						}
					}
				}
				TargetClosest();
				Vector2 vector283 = default(Vector2);
				((Vector2)(ref vector283))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1117 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector283.X;
				float num1119 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector283.Y;
				float num1120 = (float)Math.Sqrt(num1117 * num1117 + num1119 * num1119);
				rotation = (float)Math.Atan2(num1119, num1117) - 1.57f;
				if (Main.netMode != 1)
				{
					localAI[0] += 1f;
					if (localAI[0] > 200f)
					{
						localAI[0] = 0f;
						float num1121 = 8f;
						int num1122 = 25;
						int num1123 = 100;
						num1120 = num1121 / num1120;
						num1117 *= num1120;
						num1119 *= num1120;
						num1117 += (float)Main.rand.Next(-40, 41) * 0.05f;
						num1119 += (float)Main.rand.Next(-40, 41) * 0.05f;
						vector283.X += num1117 * 8f;
						vector283.Y += num1119 * 8f;
						int num1124 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector283.X, vector283.Y, num1117, num1119, num1123, num1122, 0f, Main.myPlayer);
					}
				}
			}
			else
			{
				if (this.ai[2] != 1f)
				{
					return;
				}
				this.ai[3] += 1f;
				if (this.ai[3] >= 200f)
				{
					localAI[0] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
				}
				Vector2 vector284 = default(Vector2);
				((Vector2)(ref vector284))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1125 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - 350f - vector284.X;
				float num1126 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 20f - vector284.Y;
				float num1127 = (float)Math.Sqrt(num1125 * num1125 + num1126 * num1126);
				num1127 = 7f / num1127;
				num1125 *= num1127;
				num1126 *= num1127;
				if (velocity.X > num1125)
				{
					if (velocity.X > 0f)
					{
						velocity.X *= 0.9f;
					}
					velocity.X -= 0.1f;
				}
				if (velocity.X < num1125)
				{
					if (velocity.X < 0f)
					{
						velocity.X *= 0.9f;
					}
					velocity.X += 0.1f;
				}
				if (velocity.Y > num1126)
				{
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.9f;
					}
					velocity.Y -= 0.03f;
				}
				if (velocity.Y < num1126)
				{
					if (velocity.Y < 0f)
					{
						velocity.Y *= 0.9f;
					}
					velocity.Y += 0.03f;
				}
				TargetClosest();
				((Vector2)(ref vector284))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				num1125 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector284.X;
				num1126 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector284.Y;
				num1127 = (float)Math.Sqrt(num1125 * num1125 + num1126 * num1126);
				rotation = (float)Math.Atan2(num1126, num1125) - 1.57f;
				if (Main.netMode == 1)
				{
					localAI[0] += 1f;
					if (localAI[0] > 80f)
					{
						localAI[0] = 0f;
						float num1128 = 10f;
						int num1130 = 25;
						int num1131 = 100;
						num1127 = num1128 / num1127;
						num1125 *= num1127;
						num1126 *= num1127;
						num1125 += (float)Main.rand.Next(-40, 41) * 0.05f;
						num1126 += (float)Main.rand.Next(-40, 41) * 0.05f;
						vector284.X += num1125 * 8f;
						vector284.Y += num1126 * 8f;
						int num1132 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector284.X, vector284.Y, num1125, num1126, num1131, num1130, 0f, Main.myPlayer);
					}
				}
			}
		}
		else if (aiStyle == 37)
		{
			AI_037_Destroyer();
		}
		else if (aiStyle == 38)
		{
			float num1133 = 4f;
			float num1134 = 1f;
			if (type == 143)
			{
				num1133 = 3f;
				num1134 = 0.7f;
			}
			if (type == 145)
			{
				num1133 = 3.5f;
				num1134 = 0.8f;
			}
			if (type == 143)
			{
				this.ai[2] += 1f;
				if (this.ai[2] >= 120f)
				{
					this.ai[2] = 0f;
					if (Main.netMode != 1)
					{
						Vector2 vector286 = default(Vector2);
						((Vector2)(ref vector286))._002Ector(position.X + (float)width * 0.5f - (float)(direction * 12), position.Y + (float)height * 0.5f);
						float speedX = 12 * spriteDirection;
						float speedY = 0f;
						if (Main.netMode != 1)
						{
							int num1135 = 25;
							int num1136 = 110;
							int num1137 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector286.X, vector286.Y, speedX, speedY, num1136, num1135, 0f, Main.myPlayer);
							Main.projectile[num1137].ai[0] = 2f;
							Main.projectile[num1137].timeLeft = 300;
							Main.projectile[num1137].friendly = false;
							NetMessage.SendData(27, -1, -1, null, num1137);
							netUpdate = true;
						}
					}
				}
			}
			if (type == 144 && this.ai[1] >= 3f)
			{
				TargetClosest();
				spriteDirection = direction;
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.9f;
					this.ai[2] += 1f;
					if ((double)velocity.X > -0.3 && (double)velocity.X < 0.3)
					{
						velocity.X = 0f;
					}
					if (this.ai[2] >= 200f)
					{
						this.ai[2] = 0f;
						this.ai[1] = 0f;
					}
				}
			}
			else if (type == 145 && this.ai[1] >= 3f)
			{
				TargetClosest();
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.9f;
					this.ai[2] += 1f;
					if ((double)velocity.X > -0.3 && (double)velocity.X < 0.3)
					{
						velocity.X = 0f;
					}
					if (this.ai[2] >= 16f)
					{
						this.ai[2] = 0f;
						this.ai[1] = 0f;
					}
				}
				if (velocity.X == 0f && velocity.Y == 0f && this.ai[2] == 8f)
				{
					float num1138 = 10f;
					Vector2 vector287 = default(Vector2);
					((Vector2)(ref vector287))._002Ector(position.X + (float)width * 0.5f - (float)(direction * 12), position.Y + (float)height * 0.25f);
					float num1139 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector287.X;
					float num1141 = Main.player[target].position.Y - vector287.Y;
					float num1142 = (float)Math.Sqrt(num1139 * num1139 + num1141 * num1141);
					num1142 = num1138 / num1142;
					num1139 *= num1142;
					num1141 *= num1142;
					if (Main.netMode != 1)
					{
						int num1143 = 35;
						int num1144 = 109;
						int num1145 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector287.X, vector287.Y, num1139, num1141, num1144, num1143, 0f, Main.myPlayer);
						Main.projectile[num1145].ai[0] = 2f;
						Main.projectile[num1145].timeLeft = 300;
						Main.projectile[num1145].friendly = false;
						NetMessage.SendData(27, -1, -1, null, num1145);
						netUpdate = true;
					}
				}
			}
			else
			{
				if (velocity.Y == 0f)
				{
					if (localAI[2] == position.X)
					{
						direction *= -1;
						this.ai[3] = 60f;
					}
					localAI[2] = position.X;
					if (this.ai[3] == 0f)
					{
						TargetClosest();
					}
					this.ai[0] += 1f;
					if (this.ai[0] > 2f)
					{
						this.ai[0] = 0f;
						this.ai[1] += 1f;
						velocity.Y = -8.2f;
						velocity.X += (float)direction * num1134 * 1.1f;
					}
					else
					{
						velocity.Y = -6f;
						velocity.X += (float)direction * num1134 * 0.9f;
					}
					spriteDirection = direction;
				}
				velocity.X += (float)direction * num1134 * 0.01f;
			}
			if (this.ai[3] > 0f)
			{
				this.ai[3] -= 1f;
			}
			if (velocity.X > num1133 && direction > 0)
			{
				velocity.X = num1133;
			}
			if (velocity.X < 0f - num1133 && direction < 0)
			{
				velocity.X = 0f - num1133;
			}
		}
		else if (aiStyle == 39)
		{
			if (target < 0 || Main.player[target].dead || direction == 0)
			{
				TargetClosest();
			}
			bool flag33 = true;
			int num1146 = 0;
			if (velocity.X < 0f)
			{
				num1146 = -1;
			}
			if (velocity.X > 0f)
			{
				num1146 = 1;
			}
			Vector2 vector288 = position;
			vector288.X += velocity.X;
			int num1147 = (int)((vector288.X + (float)(width / 2) + (float)((width / 2 + 1) * num1146)) / 16f);
			int num1148 = (int)((vector288.Y + (float)height - 1f) / 16f);
			if ((float)(num1147 * 16) < vector288.X + (float)width && (float)(num1147 * 16 + 16) > vector288.X)
			{
				Tile tileSafely = Framing.GetTileSafely(num1147, num1148 - 4);
				Tile tileSafely2 = Framing.GetTileSafely(num1147 - num1146, num1148 - 3);
				Tile tileSafely3 = Framing.GetTileSafely(num1147, num1148 - 3);
				Tile tileSafely4 = Framing.GetTileSafely(num1147, num1148 - 2);
				Tile tileSafely5 = Framing.GetTileSafely(num1147, num1148 - 1);
				Tile tileSafely6 = Framing.GetTileSafely(num1147, num1148);
				if (((tileSafely6.nactive() && !tileSafely6.topSlope() && !tileSafely5.topSlope() && ((Main.tileSolid[tileSafely6.type] && !Main.tileSolidTop[tileSafely6.type]) || (flag33 && Main.tileSolidTop[tileSafely6.type] && (!Main.tileSolid[tileSafely5.type] || !tileSafely5.nactive()) && tileSafely6.type != 16 && tileSafely6.type != 18 && tileSafely6.type != 134))) || (tileSafely5.halfBrick() && tileSafely5.nactive())) && (!tileSafely5.nactive() || !Main.tileSolid[tileSafely5.type] || Main.tileSolidTop[tileSafely5.type] || (tileSafely5.halfBrick() && (!tileSafely.nactive() || !Main.tileSolid[tileSafely.type] || Main.tileSolidTop[tileSafely.type]))) && (!tileSafely4.nactive() || !Main.tileSolid[tileSafely4.type] || Main.tileSolidTop[tileSafely4.type]) && (!tileSafely3.nactive() || !Main.tileSolid[tileSafely3.type] || Main.tileSolidTop[tileSafely3.type]) && (!tileSafely2.nactive() || !Main.tileSolid[tileSafely2.type] || Main.tileSolidTop[tileSafely2.type]))
				{
					float num1149 = num1148 * 16;
					if (tileSafely6.halfBrick())
					{
						num1149 += 8f;
					}
					if (tileSafely5.halfBrick())
					{
						num1149 -= 8f;
					}
					if (num1149 < vector288.Y + (float)height)
					{
						float num1150 = vector288.Y + (float)height - num1149;
						if ((double)num1150 <= 16.1)
						{
							gfxOffY += position.Y + (float)height - num1149;
							position.Y = num1149 - (float)height;
							if (num1150 < 9f)
							{
								stepSpeed = 0.75f;
							}
							else
							{
								stepSpeed = 1.5f;
							}
						}
					}
				}
			}
			if (justHit && type != 417)
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				TargetClosest();
			}
			if (type == 154)
			{
				position += netOffset;
				if (Main.rand.Next(10) == 0)
				{
					Vector2 val47 = new Vector2(position.X, position.Y);
					int num1686 = width;
					int num1687 = height;
					float speedX21 = velocity.X * 0.5f;
					float speedY20 = velocity.Y * 0.5f;
					newColor = default(Color);
					int num1152 = Dust.NewDust(val47, num1686, num1687, 67, speedX21, speedY20, 90, newColor, 1.5f);
					Main.dust[num1152].noGravity = true;
					Dust dust44 = Main.dust[num1152];
					Dust dust87 = dust44;
					dust87.velocity *= 0.2f;
				}
				position -= netOffset;
			}
			if (this.ai[0] == 0f)
			{
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else if (velocity.X > 0f)
				{
					direction = 1;
				}
				spriteDirection = direction;
				Vector2 vector289 = default(Vector2);
				((Vector2)(ref vector289))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1153 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector289.X;
				float num1154 = Main.player[target].position.Y - vector289.Y;
				float num1155 = (float)Math.Sqrt(num1153 * num1153 + num1154 * num1154);
				bool flag34 = Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height);
				if (type >= 496 && type <= 497)
				{
					if (num1155 > 200f && flag34)
					{
						this.ai[1] += 2f;
					}
					if (num1155 > 600f && (flag34 || position.Y + (float)height > Main.player[target].position.Y - 200f))
					{
						this.ai[1] += 4f;
					}
				}
				else
				{
					if (num1155 > 200f && flag34)
					{
						this.ai[1] += 4f;
					}
					if (num1155 > 600f && (flag34 || position.Y + (float)height > Main.player[target].position.Y - 200f))
					{
						this.ai[1] += 10f;
					}
					if (wet)
					{
						this.ai[1] = 1000f;
					}
				}
				defense = defDefense;
				damage = defDamage;
				if (type >= 496 && type <= 497)
				{
					knockBackResist = 0.75f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
				}
				else
				{
					knockBackResist = 0.3f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 400f)
				{
					this.ai[1] = 0f;
					this.ai[0] = 1f;
				}
				if (!justHit && velocity.X != oldVelocity.X)
				{
					direction *= -1;
				}
				if (velocity.Y == 0f && Main.player[target].position.Y < position.Y + (float)height)
				{
					int num1156;
					int num1157;
					if (direction > 0)
					{
						num1156 = (int)(((double)position.X + (double)width * 0.5) / 16.0);
						num1157 = num1156 + 3;
					}
					else
					{
						num1157 = (int)(((double)position.X + (double)width * 0.5) / 16.0);
						num1156 = num1157 - 3;
					}
					int num1158 = (int)((position.Y + (float)height + 2f) / 16f) - 1;
					int num1159 = num1158 + 4;
					bool flag36 = false;
					for (int num1160 = num1156; num1160 <= num1157; num1160++)
					{
						for (int num1161 = num1158; num1161 <= num1159; num1161++)
						{
							if (Main.tile[num1160, num1161] != null && Main.tile[num1160, num1161].nactive() && Main.tileSolid[Main.tile[num1160, num1161].type])
							{
								flag36 = true;
							}
						}
					}
					if (!flag36)
					{
						direction *= -1;
						velocity.X = 0.1f * (float)direction;
					}
				}
				if (type >= 496 && type <= 497)
				{
					float num1164 = 0.5f;
					if (velocity.X < 0f - num1164 || velocity.X > num1164)
					{
						if (velocity.Y == 0f)
						{
							velocity *= 0.8f;
						}
					}
					else if (velocity.X < num1164 && direction == 1)
					{
						velocity.X += 0.07f;
						if (velocity.X > num1164)
						{
							velocity.X = num1164;
						}
					}
					else if (velocity.X > 0f - num1164 && direction == -1)
					{
						velocity.X -= 0.07f;
						if (velocity.X < 0f - num1164)
						{
							velocity.X = 0f - num1164;
						}
					}
					return;
				}
				float num1165 = 1f;
				if (num1155 < 400f)
				{
					if (velocity.X < 0f - num1165 || velocity.X > num1165)
					{
						if (velocity.Y == 0f)
						{
							velocity *= 0.8f;
						}
					}
					else if (velocity.X < num1165 && direction == 1)
					{
						velocity.X += 0.07f;
						if (velocity.X > num1165)
						{
							velocity.X = num1165;
						}
					}
					else if (velocity.X > 0f - num1165 && direction == -1)
					{
						velocity.X -= 0.07f;
						if (velocity.X < 0f - num1165)
						{
							velocity.X = 0f - num1165;
						}
					}
				}
				else if (velocity.X < -1.5f || velocity.X > 1.5f)
				{
					if (velocity.Y == 0f)
					{
						velocity *= 0.8f;
					}
				}
				else if (velocity.X < 1.5f && direction == 1)
				{
					velocity.X += 0.07f;
					if (velocity.X > 1.5f)
					{
						velocity.X = 1.5f;
					}
				}
				else if (velocity.X > -1.5f && direction == -1)
				{
					velocity.X -= 0.07f;
					if (velocity.X < -1.5f)
					{
						velocity.X = -1.5f;
					}
				}
			}
			else if (this.ai[0] == 1f)
			{
				velocity.X *= 0.5f;
				if (type >= 496 && type <= 497)
				{
					this.ai[1] += 0.5f;
				}
				else
				{
					this.ai[1] += 1f;
				}
				if (this.ai[1] >= 30f)
				{
					netUpdate = true;
					TargetClosest();
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[0] = 3f;
					if (type == 417)
					{
						position.Y += height;
						height = 32;
						position.Y -= height;
						this.ai[0] = 6f;
						this.ai[2] = Main.rand.Next(2, 5);
					}
				}
			}
			else if (this.ai[0] == 3f)
			{
				if (type == 154 && Main.rand.Next(3) < 2)
				{
					position += netOffset;
					Vector2 val48 = new Vector2(position.X, position.Y);
					int num1688 = width;
					int num1689 = height;
					float speedX22 = velocity.X * 0.5f;
					float speedY21 = velocity.Y * 0.5f;
					newColor = default(Color);
					int num1166 = Dust.NewDust(val48, num1688, num1689, 67, speedX22, speedY21, 90, newColor, 1.5f);
					Main.dust[num1166].noGravity = true;
					Dust dust40 = Main.dust[num1166];
					Dust dust87 = dust40;
					dust87.velocity *= 0.2f;
					position -= netOffset;
				}
				float num1167 = 2f;
				if (type >= 496 && type <= 497)
				{
					num1167 = 1.5f;
				}
				damage = GetAttackDamage_LerpBetweenFinalValues((float)defDamage * num1167, (float)defDamage * num1167 * 0.9f);
				defense = defDefense * 2;
				this.ai[1] += 1f;
				if (this.ai[1] == 1f)
				{
					netUpdate = true;
					TargetClosest();
					this.ai[2] += 0.3f;
					rotation += this.ai[2] * (float)direction;
					this.ai[1] += 1f;
					bool flag37 = Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height);
					float num1168 = 10f;
					if (!flag37)
					{
						num1168 = 6f;
					}
					if (type >= 496 && type <= 497)
					{
						num1168 *= 0.75f;
					}
					Vector2 vector290 = default(Vector2);
					((Vector2)(ref vector290))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num1169 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector290.X;
					float num1170 = Math.Abs(num1169) * 0.2f;
					if (directionY > 0)
					{
						num1170 = 0f;
					}
					float num1171 = Main.player[target].position.Y - vector290.Y - num1170;
					float num1172 = (float)Math.Sqrt(num1169 * num1169 + num1171 * num1171);
					netUpdate = true;
					num1172 = num1168 / num1172;
					num1169 *= num1172;
					num1171 *= num1172;
					if (!flag37)
					{
						num1171 = -10f;
					}
					velocity.X = num1169;
					velocity.Y = num1171;
					this.ai[3] = velocity.X;
				}
				else
				{
					if (position.X + (float)width > Main.player[target].position.X && position.X < Main.player[target].position.X + (float)Main.player[target].width && position.Y < Main.player[target].position.Y + (float)Main.player[target].height)
					{
						velocity.X *= 0.8f;
						this.ai[3] = 0f;
						if (velocity.Y < 0f)
						{
							velocity.Y += 0.2f;
						}
					}
					if (this.ai[3] != 0f)
					{
						velocity.X = this.ai[3];
						velocity.Y -= 0.22f;
					}
					if (this.ai[1] >= 90f)
					{
						noGravity = false;
						this.ai[1] = 0f;
						this.ai[0] = 4f;
					}
				}
				if (wet && directionY < 0)
				{
					velocity.Y -= 0.3f;
				}
				rotation += this.ai[2] * (float)direction;
			}
			else if (this.ai[0] == 4f)
			{
				if (wet && directionY < 0)
				{
					velocity.Y -= 0.3f;
				}
				velocity.X *= 0.96f;
				if (this.ai[2] > 0f)
				{
					this.ai[2] -= 0.01f;
					rotation += this.ai[2] * (float)direction;
				}
				else if (velocity.Y >= 0f)
				{
					rotation = 0f;
				}
				if (this.ai[2] <= 0f && (velocity.Y == 0f || wet))
				{
					netUpdate = true;
					rotation = 0f;
					this.ai[2] = 0f;
					this.ai[1] = 0f;
					this.ai[0] = 5f;
				}
			}
			else if (this.ai[0] == 6f)
			{
				damage = GetAttackDamage_LerpBetweenFinalValues((float)defDamage * 1.8f, (float)defDamage * 1.4f);
				defense = defDefense * 2;
				knockBackResist = 0f;
				if (Main.rand.Next(3) < 2)
				{
					position += netOffset;
					Vector2 val49 = base.Center - new Vector2(30f);
					float speedX23 = velocity.X * 0.5f;
					float speedY22 = velocity.Y * 0.5f;
					newColor = default(Color);
					int num1173 = Dust.NewDust(val49, 60, 60, 6, speedX23, speedY22, 90, newColor, 1.5f);
					Main.dust[num1173].noGravity = true;
					Dust dust43 = Main.dust[num1173];
					Dust dust87 = dust43;
					dust87.velocity *= 0.2f;
					Main.dust[num1173].fadeIn = 1f;
					position -= netOffset;
				}
				this.ai[1] += 1f;
				if (this.ai[3] > 0f)
				{
					position += netOffset;
					if (this.ai[3] == 1f)
					{
						Vector2 vector291 = base.Center - new Vector2(50f);
						for (int num1175 = 0; num1175 < 32; num1175++)
						{
							newColor = default(Color);
							int num1176 = Dust.NewDust(vector291, 100, 100, 6, 0f, 0f, 100, newColor, 2.5f);
							Main.dust[num1176].noGravity = true;
							Dust dust42 = Main.dust[num1176];
							Dust dust87 = dust42;
							dust87.velocity *= 3f;
							newColor = default(Color);
							num1176 = Dust.NewDust(vector291, 100, 100, 6, 0f, 0f, 100, newColor, 1.5f);
							dust42 = Main.dust[num1176];
							dust87 = dust42;
							dust87.velocity *= 2f;
							Main.dust[num1176].noGravity = true;
						}
						for (int num1177 = 0; num1177 < 4; num1177++)
						{
							Vector2 val50 = vector291 + new Vector2((float)(50 * Main.rand.Next(100)) / 100f, (float)(50 * Main.rand.Next(100)) / 100f) - Vector2.One * 10f;
							val29 = default(Vector2);
							int num1178 = Gore.NewGore(val50, val29, Main.rand.Next(61, 64));
							Gore gore = Main.gore[num1178];
							Gore gore4 = gore;
							gore4.velocity *= 0.3f;
							Main.gore[num1178].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
							Main.gore[num1178].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
						}
					}
					for (int num1179 = 0; num1179 < 5; num1179++)
					{
						Vector2 val51 = position;
						int num1690 = width;
						int num1691 = height;
						newColor = default(Color);
						int num1180 = Dust.NewDust(val51, num1690, num1691, 31, 0f, 0f, 100, newColor, 1.5f);
						Main.dust[num1180].velocity = Main.dust[num1180].velocity * Main.rand.NextFloat();
					}
					this.ai[3]++;
					if (this.ai[3] >= 10f)
					{
						this.ai[3] = 0f;
					}
					position -= netOffset;
				}
				if (this.ai[1] == 1f)
				{
					netUpdate = true;
					TargetClosest();
					bool flag38 = Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height);
					float num1181 = 16f;
					if (!flag38)
					{
						num1181 = 10f;
					}
					Vector2 vector292 = default(Vector2);
					((Vector2)(ref vector292))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num1182 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector292.X;
					float num1183 = Math.Abs(num1182) * 0.2f;
					if (directionY > 0)
					{
						num1183 = 0f;
					}
					float num1184 = Main.player[target].position.Y - vector292.Y - num1183;
					float num1186 = (float)Math.Sqrt(num1182 * num1182 + num1184 * num1184);
					netUpdate = true;
					num1186 = num1181 / num1186;
					num1182 *= num1186;
					num1184 *= num1186;
					if (!flag38)
					{
						num1184 = -12f;
					}
					velocity.X = num1182;
					velocity.Y = num1184;
				}
				else
				{
					if (position.X + (float)width > Main.player[target].position.X && position.X < Main.player[target].position.X + (float)Main.player[target].width && position.Y < Main.player[target].position.Y + (float)Main.player[target].height)
					{
						velocity.X *= 0.9f;
						if (velocity.Y < 0f)
						{
							velocity.Y += 0.2f;
						}
					}
					if (this.ai[2] == 0f || this.ai[1] >= 1200f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 5f;
					}
				}
				if (wet && directionY < 0)
				{
					velocity.Y -= 0.3f;
				}
				rotation += MathHelper.Clamp(velocity.X / 10f * (float)direction, -(float)Math.PI / 10f, (float)Math.PI / 10f);
			}
			else if (this.ai[0] == 5f)
			{
				if (type == 417)
				{
					position.Y += height;
					height = 52;
					position.Y -= height;
				}
				rotation = 0f;
				velocity.X = 0f;
				if (type >= 496 && type <= 497)
				{
					this.ai[1] += 0.5f;
				}
				else
				{
					this.ai[1] += 1f;
				}
				if (this.ai[1] >= 30f)
				{
					TargetClosest();
					netUpdate = true;
					this.ai[1] = 0f;
					this.ai[0] = 0f;
				}
				if (wet)
				{
					this.ai[0] = 3f;
					this.ai[1] = 0f;
				}
			}
		}
		else if (aiStyle == 40)
		{
			if (target < 0 || target == 255 || Main.player[target].dead)
			{
				TargetClosest();
			}
			float num1187 = 2f;
			float num1188 = 0.08f;
			if (type == 237)
			{
				num1187 = 3f;
				num1188 = 0.12f;
			}
			if (type == 531)
			{
				num1187 = 4f;
				num1188 = 0.16f;
			}
			Vector2 vector293 = default(Vector2);
			((Vector2)(ref vector293))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num1189 = Main.player[target].position.X + (float)(Main.player[target].width / 2);
			float num1190 = Main.player[target].position.Y + (float)(Main.player[target].height / 2);
			num1189 = (int)(num1189 / 8f) * 8;
			num1190 = (int)(num1190 / 8f) * 8;
			vector293.X = (int)(vector293.X / 8f) * 8;
			vector293.Y = (int)(vector293.Y / 8f) * 8;
			num1189 -= vector293.X;
			num1190 -= vector293.Y;
			if (confused)
			{
				num1189 *= -2f;
				num1190 *= -2f;
			}
			float num1191 = (float)Math.Sqrt(num1189 * num1189 + num1190 * num1190);
			float num1192 = num1191;
			if (num1191 == 0f)
			{
				num1189 = velocity.X;
				num1190 = velocity.Y;
			}
			else
			{
				num1191 = num1187 / num1191;
				num1189 *= num1191;
				num1190 *= num1191;
			}
			if (Main.player[target].dead)
			{
				num1189 = (float)direction * num1187 / 2f;
				num1190 = (0f - num1187) / 2f;
			}
			spriteDirection = -1;
			if (!Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
			{
				this.ai[0] += 1f;
				if (this.ai[0] > 0f)
				{
					velocity.Y += 0.023f;
				}
				else
				{
					velocity.Y -= 0.023f;
				}
				if (this.ai[0] < -100f || this.ai[0] > 100f)
				{
					velocity.X += 0.023f;
				}
				else
				{
					velocity.X -= 0.023f;
				}
				if (this.ai[0] > 200f)
				{
					this.ai[0] = -200f;
				}
				velocity.X += num1189 * 0.007f;
				velocity.Y += num1190 * 0.007f;
				rotation = (float)Math.Atan2(velocity.Y, velocity.X);
				if ((double)velocity.X > 1.5)
				{
					velocity.X *= 0.9f;
				}
				if ((double)velocity.X < -1.5)
				{
					velocity.X *= 0.9f;
				}
				if ((double)velocity.Y > 1.5)
				{
					velocity.Y *= 0.9f;
				}
				if ((double)velocity.Y < -1.5)
				{
					velocity.Y *= 0.9f;
				}
				if (velocity.X > 3f)
				{
					velocity.X = 3f;
				}
				if (velocity.X < -3f)
				{
					velocity.X = -3f;
				}
				if (velocity.Y > 3f)
				{
					velocity.Y = 3f;
				}
				if (velocity.Y < -3f)
				{
					velocity.Y = -3f;
				}
			}
			else
			{
				if (velocity.X < num1189)
				{
					velocity.X += num1188;
					if (velocity.X < 0f && num1189 > 0f)
					{
						velocity.X += num1188;
					}
				}
				else if (velocity.X > num1189)
				{
					velocity.X -= num1188;
					if (velocity.X > 0f && num1189 < 0f)
					{
						velocity.X -= num1188;
					}
				}
				if (velocity.Y < num1190)
				{
					velocity.Y += num1188;
					if (velocity.Y < 0f && num1190 > 0f)
					{
						velocity.Y += num1188;
					}
				}
				else if (velocity.Y > num1190)
				{
					velocity.Y -= num1188;
					if (velocity.Y > 0f && num1190 < 0f)
					{
						velocity.Y -= num1188;
					}
				}
				rotation = (float)Math.Atan2(num1190, num1189);
			}
			if (type == 531)
			{
				rotation += (float)Math.PI / 2f;
			}
			float num1193 = 0.5f;
			if (collideX)
			{
				netUpdate = true;
				velocity.X = oldVelocity.X * (0f - num1193);
				if (direction == -1 && velocity.X > 0f && velocity.X < 2f)
				{
					velocity.X = 2f;
				}
				if (direction == 1 && velocity.X < 0f && velocity.X > -2f)
				{
					velocity.X = -2f;
				}
			}
			if (collideY)
			{
				netUpdate = true;
				velocity.Y = oldVelocity.Y * (0f - num1193);
				if (velocity.Y > 0f && (double)velocity.Y < 1.5)
				{
					velocity.Y = 2f;
				}
				if (velocity.Y < 0f && (double)velocity.Y > -1.5)
				{
					velocity.Y = -2f;
				}
			}
			if (((velocity.X > 0f && oldVelocity.X < 0f) || (velocity.X < 0f && oldVelocity.X > 0f) || (velocity.Y > 0f && oldVelocity.Y < 0f) || (velocity.Y < 0f && oldVelocity.Y > 0f)) && !justHit)
			{
				netUpdate = true;
			}
			if (Main.netMode == 1)
			{
				return;
			}
			if (Main.netMode != 1 && Main.expertMode && target >= 0 && (type == 163 || type == 238 || type == 236 || type == 237) && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
			{
				localAI[0] += 1f;
				if (justHit)
				{
					localAI[0] -= Main.rand.Next(20, 60);
					if (localAI[0] < 0f)
					{
						localAI[0] = 0f;
					}
				}
				if (localAI[0] > (float)Main.rand.Next(180, 900))
				{
					localAI[0] = 0f;
					Vector2 vector294 = Main.player[target].Center - base.Center;
					((Vector2)(ref vector294)).Normalize();
					vector294 *= 8f;
					int attackDamage_ForProjectiles11 = GetAttackDamage_ForProjectiles(18f, 18f);
					int num1194 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, vector294.X, vector294.Y, 472, attackDamage_ForProjectiles11, 0f, Main.myPlayer);
				}
			}
			if (!NPCCanStickToWalls())
			{
				int newType = type;
				switch (type)
				{
				case 165:
					newType = 164;
					break;
				case 237:
					newType = 236;
					break;
				case 238:
					newType = 163;
					break;
				case 240:
					newType = 239;
					break;
				case 531:
					newType = 530;
					break;
				}
				Transform(newType);
			}
		}
		else if (aiStyle == 41)
		{
			if (this.ai[2] > 1f)
			{
				this.ai[2] -= 1f;
			}
			if (this.ai[2] == 0f)
			{
				this.ai[0] = -100f;
				this.ai[2] = 1f;
				TargetClosest();
				spriteDirection = direction;
			}
			if (type == 378)
			{
				Vector2 vector295 = default(Vector2);
				((Vector2)(ref vector295))._002Ector(-6f, -10f);
				vector295.X *= spriteDirection;
				if (this.ai[1] != 5f && Main.rand.Next(3) == 0)
				{
					position += netOffset;
					Vector2 val52 = base.Center + vector295 - Vector2.One * 5f;
					newColor = default(Color);
					int num1195 = Dust.NewDust(val52, 4, 4, 6, 0f, 0f, 0, newColor);
					Main.dust[num1195].scale = 1.5f;
					Main.dust[num1195].noGravity = true;
					Main.dust[num1195].velocity = Main.dust[num1195].velocity * 0.25f + Vector2.Normalize(vector295) * 1f;
					Dust obj4 = Main.dust[num1195];
					Vector2 spinningpoint14 = Main.dust[num1195].velocity;
					double radians = -(float)Math.PI / 2f * (float)direction;
					val29 = default(Vector2);
					obj4.velocity = spinningpoint14.RotatedBy(radians, val29);
					position -= netOffset;
				}
				if (this.ai[1] == 5f)
				{
					velocity = Vector2.Zero;
					position.X += width / 2;
					position.Y += height / 2;
					width = 160;
					height = 160;
					position.X -= width / 2;
					position.Y -= height / 2;
					dontTakeDamage = true;
					position += netOffset;
					if (this.ai[2] > 7f)
					{
						for (int num1197 = 0; num1197 < 8; num1197++)
						{
							Vector2 val53 = new Vector2(position.X, position.Y);
							int num1692 = width;
							int num1693 = height;
							newColor = default(Color);
							int num1198 = Dust.NewDust(val53, num1692, num1693, 31, 0f, 0f, 100, newColor, 1.5f);
						}
						for (int num1199 = 0; num1199 < 32; num1199++)
						{
							Vector2 val54 = new Vector2(position.X, position.Y);
							int num1694 = width;
							int num1695 = height;
							newColor = default(Color);
							int num1200 = Dust.NewDust(val54, num1694, num1695, 6, 0f, 0f, 100, newColor, 2.5f);
							Main.dust[num1200].noGravity = true;
							Dust dust45 = Main.dust[num1200];
							Dust dust87 = dust45;
							dust87.velocity *= 3f;
							Vector2 val55 = new Vector2(position.X, position.Y);
							int num1696 = width;
							int num1697 = height;
							newColor = default(Color);
							num1200 = Dust.NewDust(val55, num1696, num1697, 6, 0f, 0f, 100, newColor, 1.5f);
							dust45 = Main.dust[num1200];
							dust87 = dust45;
							dust87.velocity *= 2f;
							Main.dust[num1200].noGravity = true;
						}
						for (int num1201 = 0; num1201 < 2; num1201++)
						{
							Vector2 val56 = position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f;
							val29 = default(Vector2);
							int num1202 = Gore.NewGore(val56, val29, Main.rand.Next(61, 64));
							Gore gore2 = Main.gore[num1202];
							Gore gore4 = gore2;
							gore4.velocity *= 0.3f;
							Main.gore[num1202].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
							Main.gore[num1202].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
						}
						if (this.ai[2] == 9f)
						{
							SoundEngine.PlaySound(in SoundID.Item14, position);
						}
					}
					if (this.ai[2] == 1f)
					{
						life = -1;
						HitEffect();
						active = false;
					}
					position -= netOffset;
					return;
				}
			}
			if (type == 378 && this.ai[1] != 5f)
			{
				if (wet || Vector2.Distance(base.Center, Main.player[target].Center) < 64f)
				{
					this.ai[1] = 5f;
					this.ai[2] = 10f;
					netUpdate = true;
					return;
				}
			}
			else if (wet && type != 177)
			{
				if (collideX)
				{
					direction *= -direction;
					spriteDirection = direction;
				}
				if (collideY)
				{
					TargetClosest();
					if (oldVelocity.Y < 0f)
					{
						velocity.Y = 5f;
					}
					else
					{
						velocity.Y -= 2f;
					}
					spriteDirection = direction;
				}
				if (velocity.Y > 4f)
				{
					velocity.Y *= 0.95f;
				}
				velocity.Y -= 0.3f;
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
			}
			if (velocity.Y == 0f)
			{
				if (this.ai[3] == position.X)
				{
					direction *= -1;
					this.ai[2] = 300f;
				}
				this.ai[3] = 0f;
				velocity.X *= 0.8f;
				if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
				{
					velocity.X = 0f;
				}
				if (type == 177)
				{
					this.ai[0] += 2f;
				}
				else
				{
					this.ai[0] += 5f;
				}
				Vector2 vector297 = default(Vector2);
				((Vector2)(ref vector297))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1203 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector297.X;
				float num1204 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector297.Y;
				float num1205 = (float)Math.Sqrt(num1203 * num1203 + num1204 * num1204);
				float num1206 = 400f / num1205;
				num1206 = ((type != 177) ? (num1206 * 10f) : (num1206 * 5f));
				if (num1206 > 30f)
				{
					num1206 = 30f;
				}
				this.ai[0] += (int)num1206;
				if (this.ai[0] >= 0f)
				{
					netUpdate = true;
					if (this.ai[2] == 1f)
					{
						TargetClosest();
					}
					if (type == 177)
					{
						if (this.ai[1] == 2f)
						{
							velocity.Y = -11.5f;
							velocity.X += 2f * (float)direction;
							if (num1205 < 350f && num1205 > 200f)
							{
								velocity.X += direction;
							}
							this.ai[0] = -200f;
							this.ai[1] = 0f;
							this.ai[3] = position.X;
						}
						else
						{
							velocity.Y = -7.5f;
							velocity.X += 4 * direction;
							if (num1205 < 350f && num1205 > 200f)
							{
								velocity.X += direction;
							}
							this.ai[0] = -120f;
							this.ai[1] += 1f;
						}
					}
					else
					{
						if (type == 378)
						{
							SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 124);
						}
						if (this.ai[1] == 3f)
						{
							velocity.Y = -9f;
							velocity.X += 3 * direction;
							if (num1205 < 350f && num1205 > 200f)
							{
								velocity.X += direction;
							}
							this.ai[0] = -200f;
							this.ai[1] = 0f;
							this.ai[3] = position.X;
						}
						else
						{
							velocity.Y = -5f;
							velocity.X += 5 * direction;
							if (num1205 < 350f && num1205 > 200f)
							{
								velocity.X += direction;
							}
							this.ai[0] = -120f;
							this.ai[1] += 1f;
						}
					}
				}
				else if (this.ai[0] >= -30f)
				{
					aiAction = 1;
				}
				spriteDirection = direction;
			}
			else
			{
				if (target >= 255)
				{
					return;
				}
				if (type == 177)
				{
					bool flag39 = false;
					if (position.Y + (float)height < Main.player[target].position.Y && position.X + (float)width > Main.player[target].position.X && position.X < Main.player[target].position.X + (float)Main.player[target].width)
					{
						flag39 = true;
						velocity.X *= 0.92f;
						if (velocity.Y < 0f)
						{
							velocity.Y *= 0.9f;
							velocity.Y += 0.1f;
						}
					}
					if (!flag39 && ((direction == 1 && velocity.X < 4f) || (direction == -1 && velocity.X > -4f)))
					{
						if ((direction == -1 && (double)velocity.X < 0.1) || (direction == 1 && (double)velocity.X > -0.1))
						{
							velocity.X += 0.2f * (float)direction;
						}
						else
						{
							velocity.X *= 0.93f;
						}
					}
				}
				else if ((direction == 1 && velocity.X < 3f) || (direction == -1 && velocity.X > -3f))
				{
					if ((direction == -1 && (double)velocity.X < 0.1) || (direction == 1 && (double)velocity.X > -0.1))
					{
						velocity.X += 0.2f * (float)direction;
					}
					else
					{
						velocity.X *= 0.93f;
					}
				}
			}
		}
		else if (aiStyle == 42)
		{
			TargetClosest();
			if (this.ai[0] == 0f)
			{
				if (target >= 0)
				{
					Vector2 vector298 = default(Vector2);
					((Vector2)(ref vector298))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num1208 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector298.X;
					float num1209 = Main.player[target].position.Y - vector298.Y;
					float num1210 = (float)Math.Sqrt(num1208 * num1208 + num1209 * num1209);
					if (num1210 < 200f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						this.ai[0] = 1f;
					}
				}
				if (velocity.X != 0f || velocity.Y < 0f || velocity.Y > 2f || life != lifeMax)
				{
					this.ai[0] = 1f;
				}
			}
			else
			{
				this.ai[0] += 1f;
				if (this.ai[0] >= 21f)
				{
					this.ai[0] = 21f;
					Transform(196);
				}
			}
		}
		else if (aiStyle == 43)
		{
			if (Main.expertMode)
			{
				int num1211 = (int)(20f * (1f - (float)life / (float)lifeMax));
				defense = defDefense + num1211;
			}
			if (target < 0 || target == 255 || Main.player[target].dead || !Main.player[target].active)
			{
				TargetClosest();
			}
			bool dead4 = Main.player[target].dead;
			float num1212 = 0f;
			if ((double)(position.Y / 16f) < Main.worldSurface)
			{
				num1212 += 1f;
			}
			if (!Main.player[target].ZoneJungle)
			{
				num1212 += 1f;
			}
			if (Main.getGoodWorld)
			{
				num1212 += 0.5f;
			}
			float num1213 = Vector2.Distance(base.Center, Main.player[target].Center);
			if (this.ai[0] != 5f)
			{
				if (timeLeft < 60)
				{
					timeLeft = 60;
				}
				if (num1213 > 3000f)
				{
					this.ai[0] = 4f;
					netUpdate = true;
				}
			}
			if (dead4)
			{
				this.ai[0] = 5f;
				netUpdate = true;
			}
			if (this.ai[0] == 5f)
			{
				velocity.Y *= 0.98f;
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				spriteDirection = direction;
				if (position.X < (float)(Main.maxTilesX * 8))
				{
					if (velocity.X > 0f)
					{
						velocity.X *= 0.98f;
					}
					else
					{
						localAI[0] = 1f;
					}
					velocity.X -= 0.08f;
				}
				else
				{
					if (velocity.X < 0f)
					{
						velocity.X *= 0.98f;
					}
					else
					{
						localAI[0] = 1f;
					}
					velocity.X += 0.08f;
				}
				EncourageDespawn(10);
			}
			else if (this.ai[0] == -1f)
			{
				if (Main.netMode == 1)
				{
					return;
				}
				float num1214 = this.ai[1];
				int num1215;
				do
				{
					num1215 = Main.rand.Next(3);
					switch (num1215)
					{
					case 1:
						num1215 = 2;
						break;
					case 2:
						num1215 = 3;
						break;
					}
				}
				while ((float)num1215 == num1214);
				this.ai[0] = num1215;
				this.ai[1] = 0f;
				this.ai[2] = 0f;
				netUpdate = true;
			}
			else if (this.ai[0] == 0f)
			{
				int num1216 = 2;
				if (Main.expertMode)
				{
					if (life < lifeMax / 2)
					{
						num1216++;
					}
					if (life < lifeMax / 3)
					{
						num1216++;
					}
					if (life < lifeMax / 5)
					{
						num1216++;
					}
				}
				num1216 += (int)(1f * num1212);
				if (this.ai[1] > (float)(2 * num1216) && this.ai[1] % 2f == 0f)
				{
					this.ai[0] = -1f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					netUpdate = true;
					return;
				}
				if (this.ai[1] % 2f == 0f)
				{
					TargetClosest();
					float num1217 = 20f;
					num1217 += 20f * num1212;
					if (Math.Abs(base.Center.Y - Main.player[target].Center.Y) < num1217)
					{
						localAI[0] = 1f;
						this.ai[1] += 1f;
						this.ai[2] = 0f;
						netUpdate = true;
						float num1219 = 12f;
						if (Main.expertMode)
						{
							num1219 = 16f;
							if ((double)life < (double)lifeMax * 0.75)
							{
								num1219 += 2f;
							}
							if ((double)life < (double)lifeMax * 0.5)
							{
								num1219 += 2f;
							}
							if ((double)life < (double)lifeMax * 0.25)
							{
								num1219 += 2f;
							}
							if ((double)life < (double)lifeMax * 0.1)
							{
								num1219 += 2f;
							}
						}
						num1219 += 7f * num1212;
						Vector2 vector299 = default(Vector2);
						((Vector2)(ref vector299))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num1220 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector299.X;
						float num1221 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector299.Y;
						float num1222 = (float)Math.Sqrt(num1220 * num1220 + num1221 * num1221);
						num1222 = num1219 / num1222;
						velocity.X = num1220 * num1222;
						velocity.Y = num1221 * num1222;
						spriteDirection = direction;
						SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 125);
						return;
					}
					localAI[0] = 0f;
					float num1223 = 12f;
					float num1224 = 0.15f;
					if (Main.expertMode)
					{
						if ((double)life < (double)lifeMax * 0.75)
						{
							num1223 += 1f;
							num1224 += 0.05f;
						}
						if ((double)life < (double)lifeMax * 0.5)
						{
							num1223 += 1f;
							num1224 += 0.05f;
						}
						if ((double)life < (double)lifeMax * 0.25)
						{
							num1223 += 2f;
							num1224 += 0.05f;
						}
						if ((double)life < (double)lifeMax * 0.1)
						{
							num1223 += 2f;
							num1224 += 0.1f;
						}
					}
					num1223 += 3f * num1212;
					num1224 += 0.5f * num1212;
					if (position.Y + (float)(height / 2) < Main.player[target].position.Y + (float)(Main.player[target].height / 2))
					{
						velocity.Y += num1224;
					}
					else
					{
						velocity.Y -= num1224;
					}
					if (velocity.Y < 0f - num1223)
					{
						velocity.Y = 0f - num1223;
					}
					if (velocity.Y > num1223)
					{
						velocity.Y = num1223;
					}
					if (Math.Abs(position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2))) > 600f)
					{
						velocity.X += 0.15f * (float)direction;
					}
					else if (Math.Abs(position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2))) < 300f)
					{
						velocity.X -= 0.15f * (float)direction;
					}
					else
					{
						velocity.X *= 0.8f;
					}
					if (velocity.X < -16f)
					{
						velocity.X = -16f;
					}
					if (velocity.X > 16f)
					{
						velocity.X = 16f;
					}
					spriteDirection = direction;
					return;
				}
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				spriteDirection = direction;
				int num1225 = 600;
				if (Main.expertMode)
				{
					if ((double)life < (double)lifeMax * 0.1)
					{
						num1225 = 300;
					}
					else if ((double)life < (double)lifeMax * 0.25)
					{
						num1225 = 450;
					}
					else if ((double)life < (double)lifeMax * 0.5)
					{
						num1225 = 500;
					}
					else if ((double)life < (double)lifeMax * 0.75)
					{
						num1225 = 550;
					}
				}
				int num1226 = 1;
				if (position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2))
				{
					num1226 = -1;
				}
				num1225 -= (int)(100f * num1212);
				bool flag40 = false;
				if (direction == num1226 && Math.Abs(base.Center.X - Main.player[target].Center.X) > (float)num1225)
				{
					this.ai[2] = 1f;
					flag40 = true;
				}
				if (Math.Abs(base.Center.Y - Main.player[target].Center.Y) > (float)num1225 * 1.5f)
				{
					this.ai[2] = 1f;
					flag40 = true;
				}
				if (num1212 > 0f && flag40)
				{
					velocity *= 0.5f;
				}
				if (this.ai[2] == 1f)
				{
					TargetClosest();
					spriteDirection = direction;
					localAI[0] = 0f;
					velocity *= 0.9f;
					float num1227 = 0.1f;
					if (Main.expertMode)
					{
						if (life < lifeMax / 2)
						{
							velocity *= 0.9f;
							num1227 += 0.05f;
						}
						if (life < lifeMax / 3)
						{
							velocity *= 0.9f;
							num1227 += 0.05f;
						}
						if (life < lifeMax / 5)
						{
							velocity *= 0.9f;
							num1227 += 0.05f;
						}
					}
					if (num1212 > 0f)
					{
						velocity *= 0.7f;
					}
					if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < num1227)
					{
						this.ai[2] = 0f;
						this.ai[1] += 1f;
						netUpdate = true;
					}
				}
				else
				{
					localAI[0] = 1f;
				}
			}
			else if (this.ai[0] == 2f)
			{
				TargetClosest();
				spriteDirection = direction;
				float num1228 = 12f;
				float num1230 = 0.07f;
				if (Main.expertMode)
				{
					num1230 = 0.1f;
				}
				Vector2 vector300 = default(Vector2);
				((Vector2)(ref vector300))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1231 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector300.X;
				float num1232 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 200f - vector300.Y;
				float num1233 = (float)Math.Sqrt(num1231 * num1231 + num1232 * num1232);
				if (num1233 < 200f)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
					return;
				}
				num1233 = num1228 / num1233;
				if (velocity.X < num1231)
				{
					velocity.X += num1230;
					if (velocity.X < 0f && num1231 > 0f)
					{
						velocity.X += num1230;
					}
				}
				else if (velocity.X > num1231)
				{
					velocity.X -= num1230;
					if (velocity.X > 0f && num1231 < 0f)
					{
						velocity.X -= num1230;
					}
				}
				if (velocity.Y < num1232)
				{
					velocity.Y += num1230;
					if (velocity.Y < 0f && num1232 > 0f)
					{
						velocity.Y += num1230;
					}
				}
				else if (velocity.Y > num1232)
				{
					velocity.Y -= num1230;
					if (velocity.Y > 0f && num1232 < 0f)
					{
						velocity.Y -= num1230;
					}
				}
			}
			else if (this.ai[0] == 1f)
			{
				localAI[0] = 0f;
				TargetClosest();
				Vector2 vector301 = default(Vector2);
				((Vector2)(ref vector301))._002Ector(position.X + (float)(width / 2) + (float)(Main.rand.Next(20) * direction), position.Y + (float)height * 0.8f);
				Vector2 vector302 = default(Vector2);
				((Vector2)(ref vector302))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1234 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector302.X;
				float num1235 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector302.Y;
				float num1236 = (float)Math.Sqrt(num1234 * num1234 + num1235 * num1235);
				this.ai[1] += 1f;
				if (Main.expertMode)
				{
					int num1237 = 0;
					for (int num1238 = 0; num1238 < 255; num1238++)
					{
						if (Main.player[num1238].active && !Main.player[num1238].dead)
						{
							val29 = base.Center - Main.player[num1238].Center;
							if (((Vector2)(ref val29)).Length() < 1000f)
							{
								num1237++;
							}
						}
					}
					this.ai[1] += num1237 / 2;
					if ((double)life < (double)lifeMax * 0.75)
					{
						this.ai[1] += 0.25f;
					}
					if ((double)life < (double)lifeMax * 0.5)
					{
						this.ai[1] += 0.25f;
					}
					if ((double)life < (double)lifeMax * 0.25)
					{
						this.ai[1] += 0.25f;
					}
					if ((double)life < (double)lifeMax * 0.1)
					{
						this.ai[1] += 0.25f;
					}
				}
				bool flag41 = false;
				int num1239 = (int)(40f - 18f * num1212);
				if (this.ai[1] > (float)num1239)
				{
					this.ai[1] = 0f;
					this.ai[2]++;
					flag41 = true;
				}
				if (Collision.CanHit(vector301, 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height) && flag41)
				{
					SoundEngine.PlaySound(3, (int)position.X, (int)position.Y);
					if (Main.netMode != 1)
					{
						int num1241 = Main.rand.Next(210, 212);
						int num1242 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)vector301.X, (int)vector301.Y, num1241);
						Main.npc[num1242].velocity = Main.player[target].Center - base.Center;
						((Vector2)(ref Main.npc[num1242].velocity)).Normalize();
						NPC nPC12 = Main.npc[num1242];
						NPC nPC23 = nPC12;
						nPC23.velocity *= 5f;
						Main.npc[num1242].CanBeReplacedByOtherNPCs = true;
						Main.npc[num1242].localAI[0] = 60f;
						Main.npc[num1242].netUpdate = true;
					}
				}
				if (num1236 > 400f || !Collision.CanHit(new Vector2(vector301.X, vector301.Y - 30f), 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					float num1243 = 14f;
					float num1244 = 0.1f;
					vector302 = vector301;
					num1234 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector302.X;
					num1235 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector302.Y;
					num1236 = (float)Math.Sqrt(num1234 * num1234 + num1235 * num1235);
					num1236 = num1243 / num1236;
					if (velocity.X < num1234)
					{
						velocity.X += num1244;
						if (velocity.X < 0f && num1234 > 0f)
						{
							velocity.X += num1244;
						}
					}
					else if (velocity.X > num1234)
					{
						velocity.X -= num1244;
						if (velocity.X > 0f && num1234 < 0f)
						{
							velocity.X -= num1244;
						}
					}
					if (velocity.Y < num1235)
					{
						velocity.Y += num1244;
						if (velocity.Y < 0f && num1235 > 0f)
						{
							velocity.Y += num1244;
						}
					}
					else if (velocity.Y > num1235)
					{
						velocity.Y -= num1244;
						if (velocity.Y > 0f && num1235 < 0f)
						{
							velocity.Y -= num1244;
						}
					}
				}
				else
				{
					velocity *= 0.9f;
				}
				spriteDirection = direction;
				if (this.ai[2] > 5f)
				{
					this.ai[0] = -1f;
					this.ai[1] = 1f;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 3f)
			{
				float num1245 = 4f;
				float num1246 = 0.05f;
				if (Main.expertMode)
				{
					num1246 = 0.075f;
					num1245 = 6f;
				}
				num1246 += 0.2f * num1212;
				num1245 += 6f * num1212;
				Vector2 vector303 = default(Vector2);
				((Vector2)(ref vector303))._002Ector(position.X + (float)(width / 2) + (float)(Main.rand.Next(20) * direction), position.Y + (float)height * 0.8f);
				Vector2 vector304 = default(Vector2);
				((Vector2)(ref vector304))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1247 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector304.X;
				float num1248 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 300f - vector304.Y;
				float num1249 = (float)Math.Sqrt(num1247 * num1247 + num1248 * num1248);
				this.ai[1] += 1f;
				bool flag42 = false;
				int num1250 = 40;
				if (Main.expertMode)
				{
					num1250 = (((double)life < (double)lifeMax * 0.1) ? 15 : ((life < lifeMax / 3) ? 25 : ((life >= lifeMax / 2) ? 35 : 30)));
				}
				num1250 -= (int)(5f * num1212);
				if (this.ai[1] % (float)num1250 == (float)(num1250 - 1) && position.Y + (float)height < Main.player[target].position.Y && Collision.CanHit(vector303, 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					SoundEngine.PlaySound(in SoundID.Item17, position);
					if (Main.netMode != 1)
					{
						float num1252 = 8f;
						if (Main.expertMode)
						{
							num1252 += 2f;
						}
						if (Main.expertMode && (double)life < (double)lifeMax * 0.1)
						{
							num1252 += 3f;
						}
						num1252 += 7f * num1212;
						int num1253 = (int)(80f - 39f * num1212);
						int num1254 = (int)(40f - 19f * num1212);
						if (num1253 < 1)
						{
							num1253 = 1;
						}
						if (num1254 < 1)
						{
							num1254 = 1;
						}
						float num1255 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector303.X + (float)Main.rand.Next(-num1253, num1253 + 1);
						float num1256 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector303.Y + (float)Main.rand.Next(-num1254, num1254 + 1);
						float num1257 = (float)Math.Sqrt(num1255 * num1255 + num1256 * num1256);
						num1257 = num1252 / num1257;
						num1255 *= num1257;
						num1256 *= num1257;
						int num1258 = 11;
						int num1259 = 719;
						int num1260 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector303.X, vector303.Y, num1255, num1256, num1259, num1258, 0f, Main.myPlayer);
						Main.projectile[num1260].timeLeft = 300;
					}
				}
				if (!Collision.CanHit(new Vector2(vector303.X, vector303.Y - 30f), 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					num1245 = 14f;
					num1246 = 0.1f;
					if (num1212 > 0f)
					{
						num1246 = 0.5f;
					}
					vector304 = vector303;
					num1247 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector304.X;
					num1248 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector304.Y;
					num1249 = (float)Math.Sqrt(num1247 * num1247 + num1248 * num1248);
					num1249 = num1245 / num1249;
					if (velocity.X < num1247)
					{
						velocity.X += num1246;
						if (velocity.X < 0f && num1247 > 0f)
						{
							velocity.X += num1246;
						}
					}
					else if (velocity.X > num1247)
					{
						velocity.X -= num1246;
						if (velocity.X > 0f && num1247 < 0f)
						{
							velocity.X -= num1246;
						}
					}
					if (velocity.Y < num1248)
					{
						velocity.Y += num1246;
						if (velocity.Y < 0f && num1248 > 0f)
						{
							velocity.Y += num1246;
						}
					}
					else if (velocity.Y > num1248)
					{
						velocity.Y -= num1246;
						if (velocity.Y > 0f && num1248 < 0f)
						{
							velocity.Y -= num1246;
						}
					}
				}
				else if (num1249 > 100f)
				{
					TargetClosest();
					spriteDirection = direction;
					num1249 = num1245 / num1249;
					if (velocity.X < num1247)
					{
						velocity.X += num1246;
						if (velocity.X < 0f && num1247 > 0f)
						{
							velocity.X += num1246 * 2f;
						}
					}
					else if (velocity.X > num1247)
					{
						velocity.X -= num1246;
						if (velocity.X > 0f && num1247 < 0f)
						{
							velocity.X -= num1246 * 2f;
						}
					}
					if (velocity.Y < num1248)
					{
						velocity.Y += num1246;
						if (velocity.Y < 0f && num1248 > 0f)
						{
							velocity.Y += num1246 * 2f;
						}
					}
					else if (velocity.Y > num1248)
					{
						velocity.Y -= num1246;
						if (velocity.Y > 0f && num1248 < 0f)
						{
							velocity.Y -= num1246 * 2f;
						}
					}
				}
				float num1261 = 20f;
				num1261 -= 5f * num1212;
				if (this.ai[1] > (float)num1250 * num1261)
				{
					this.ai[0] = -1f;
					this.ai[1] = 3f;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 4f)
			{
				localAI[0] = 1f;
				float num1263 = 14f;
				float num1264 = 14f;
				Vector2 vector305 = Main.player[target].Center - base.Center;
				((Vector2)(ref vector305)).Normalize();
				vector305 *= num1263;
				velocity = (velocity * num1264 + vector305) / (num1264 + 1f);
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				spriteDirection = direction;
				if (num1213 < 2000f)
				{
					this.ai[0] = -1f;
					localAI[0] = 0f;
				}
			}
		}
		else if (aiStyle == 44)
		{
			noGravity = true;
			if (collideX)
			{
				if (oldVelocity.X > 0f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				velocity.X = direction;
			}
			if (collideY)
			{
				if (oldVelocity.Y > 0f)
				{
					directionY = -1;
				}
				else
				{
					directionY = 1;
				}
				velocity.Y = directionY;
			}
			if (type == 587)
			{
				position += netOffset;
				if (alpha == 255)
				{
					velocity.Y = -6f;
					netUpdate = true;
					for (int num1265 = 0; num1265 < 15; num1265++)
					{
						Vector2 val57 = position;
						int num1698 = width;
						int num1699 = height;
						newColor = default(Color);
						Dust dust70 = Dust.NewDustDirect(val57, num1698, num1699, 5, 0f, 0f, 0, newColor);
						Dust dust48 = dust70;
						Dust dust87 = dust48;
						dust87.velocity *= 0.5f;
						dust70.scale = 1f + Main.rand.NextFloat() * 0.5f;
						dust70.fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
						dust48 = dust70;
						dust87 = dust48;
						dust87.velocity += velocity * 0.5f;
					}
				}
				alpha -= 15;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha != 0)
				{
					for (int num1266 = 0; num1266 < 2; num1266++)
					{
						Vector2 val58 = position;
						int num1700 = width;
						int num1701 = height;
						newColor = default(Color);
						Dust dust80 = Dust.NewDustDirect(val58, num1700, num1701, 5, 0f, 0f, 0, newColor);
						Dust dust47 = dust80;
						Dust dust87 = dust47;
						dust87.velocity *= 1f;
						dust80.scale = 1f + Main.rand.NextFloat() * 0.5f;
						dust80.fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
						dust47 = dust80;
						dust87 = dust47;
						dust87.velocity += velocity * 0.3f;
					}
				}
				if (Main.rand.Next(3) == 0)
				{
					Vector2 val59 = position;
					int num1702 = width;
					int num1703 = height;
					newColor = default(Color);
					Dust dust81 = Dust.NewDustDirect(val59, num1702, num1703, 5, 0f, 0f, 0, newColor);
					Dust dust46 = dust81;
					Dust dust87 = dust46;
					dust87.velocity *= 0f;
					dust81.alpha = 120;
					dust81.scale = 0.7f + Main.rand.NextFloat() * 0.5f;
					dust46 = dust81;
					dust87 = dust46;
					dust87.velocity += velocity * 0.3f;
				}
				position -= netOffset;
			}
			int num1267 = target;
			int num1268 = direction;
			if (target == 255 || (type != 587 && Main.player[target].wet) || Main.player[target].dead || Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
			{
				this.ai[0] = 90f;
				TargetClosest();
			}
			else if (this.ai[0] > 0f)
			{
				this.ai[0] -= 1f;
				TargetClosest();
			}
			if (netUpdate && num1267 == target && num1268 == direction)
			{
				netUpdate = false;
			}
			float num1269 = 0.05f;
			float num1270 = 0.01f;
			float num1271 = 3f;
			float num1272 = 1f;
			float num1275 = 30f;
			float num1276 = 100f;
			float num1277 = Math.Abs(position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2)));
			float num1278 = Main.player[target].position.Y - (float)(height / 2);
			if (type == 509)
			{
				num1269 = 0.08f;
				num1270 = 0.03f;
				num1271 = 4.5f;
				num1272 = 2f;
				num1275 = 40f;
				num1276 = 150f;
				num1278 = Main.player[target].Center.Y - (float)(height / 2);
				rotation = velocity.X * 0.1f;
				for (int num1279 = 0; num1279 < 200; num1279++)
				{
					if (num1279 != whoAmI && Main.npc[num1279].active && Main.npc[num1279].type == type && Math.Abs(position.X - Main.npc[num1279].position.X) + Math.Abs(position.Y - Main.npc[num1279].position.Y) < (float)width)
					{
						if (position.X < Main.npc[num1279].position.X)
						{
							velocity.X -= 0.05f;
						}
						else
						{
							velocity.X += 0.05f;
						}
						if (position.Y < Main.npc[num1279].position.Y)
						{
							velocity.Y -= 0.05f;
						}
						else
						{
							velocity.Y += 0.05f;
						}
					}
				}
			}
			else if (type == 581)
			{
				num1269 = 0.06f;
				num1270 = 0.02f;
				num1271 = 4f;
				num1272 = 2f;
				num1275 = 40f;
				num1276 = 150f;
				num1278 = Main.player[target].Center.Y - (float)(height / 2);
				rotation = velocity.X * 0.1f;
				for (int num1280 = 0; num1280 < 200; num1280++)
				{
					if (num1280 != whoAmI && Main.npc[num1280].active && Main.npc[num1280].type == type && Math.Abs(position.X - Main.npc[num1280].position.X) + Math.Abs(position.Y - Main.npc[num1280].position.Y) < (float)width)
					{
						if (position.X < Main.npc[num1280].position.X)
						{
							velocity.X -= 0.05f;
						}
						else
						{
							velocity.X += 0.05f;
						}
						if (position.Y < Main.npc[num1280].position.Y)
						{
							velocity.Y -= 0.05f;
						}
						else
						{
							velocity.Y += 0.05f;
						}
					}
				}
			}
			else if (type == 587)
			{
				num1269 = 0.13f;
				num1270 = 0.09f;
				num1271 = 6.5f;
				num1272 = 3.5f;
				num1275 = 0f;
				num1276 = 250f;
				num1278 = Main.player[target].position.Y;
				if (Main.dayTime)
				{
					num1278 = 0f;
					direction *= -1;
				}
			}
			if (this.ai[0] <= 0f)
			{
				num1271 *= 0.8f;
				num1269 *= 0.7f;
				num1278 = base.Center.Y + (float)(directionY * 1000);
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else if (velocity.X > 0f || direction == 0)
				{
					direction = 1;
				}
			}
			if (num1277 > num1275)
			{
				if (direction == -1 && velocity.X > 0f - num1271)
				{
					velocity.X -= num1269;
					if (velocity.X > num1271)
					{
						velocity.X -= num1269;
					}
					else if (velocity.X > 0f)
					{
						velocity.X -= num1269 / 2f;
					}
					if (velocity.X < 0f - num1271)
					{
						velocity.X = 0f - num1271;
					}
				}
				else if (direction == 1 && velocity.X < num1271)
				{
					velocity.X += num1269;
					if (velocity.X < 0f - num1271)
					{
						velocity.X += num1269;
					}
					else if (velocity.X < 0f)
					{
						velocity.X += num1269 / 2f;
					}
					if (velocity.X > num1271)
					{
						velocity.X = num1271;
					}
				}
			}
			if (num1277 > num1276)
			{
				num1278 -= num1276 / 2f;
			}
			if (position.Y < num1278)
			{
				velocity.Y += num1270;
				if (velocity.Y < 0f)
				{
					velocity.Y += num1270;
				}
			}
			else
			{
				velocity.Y -= num1270;
				if (velocity.Y > 0f)
				{
					velocity.Y -= num1270;
				}
			}
			if (velocity.Y < 0f - num1272)
			{
				velocity.Y = 0f - num1272;
			}
			if (velocity.Y > num1272)
			{
				velocity.Y = num1272;
			}
			if (type != 587 && wet)
			{
				if (velocity.Y > 0f)
				{
					velocity.Y *= 0.95f;
				}
				velocity.Y -= 0.5f;
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
			}
		}
		else if (aiStyle == 45)
		{
			AI_045_Golem();
		}
		else if (aiStyle == 46)
		{
			float num1281 = GetMyBalance();
			if (Main.getGoodWorld)
			{
				num1281 += 3f;
			}
			if ((!Main.player[target].ZoneLihzhardTemple && !Main.player[target].ZoneJungle) || (double)Main.player[target].Center.Y < Main.worldSurface * 16.0)
			{
				num1281 *= 2f;
			}
			noTileCollide = true;
			if (golemBoss < 0)
			{
				StrikeNPCNoInteraction(9999, 0f, 0);
				return;
			}
			float num1282 = 100f;
			Vector2 vector306 = default(Vector2);
			((Vector2)(ref vector306))._002Ector(base.Center.X, base.Center.Y);
			float num1283 = Main.npc[golemBoss].Center.X - vector306.X;
			float num1284 = Main.npc[golemBoss].Center.Y - vector306.Y;
			num1284 -= 57f * scale;
			num1283 -= 3f * scale;
			float num1286 = (float)Math.Sqrt(num1283 * num1283 + num1284 * num1284);
			if (num1286 < num1282)
			{
				rotation = 0f;
				velocity.X = num1283;
				velocity.Y = num1284;
			}
			else
			{
				num1286 = num1282 / num1286;
				velocity.X = num1283 * num1286;
				velocity.Y = num1284 * num1286;
				rotation = velocity.X * 0.1f;
			}
			if (alpha > 0)
			{
				alpha -= 10;
				if (alpha < 0)
				{
					alpha = 0;
				}
				this.ai[1] = 30f;
			}
			if (this.ai[0] == 0f)
			{
				this.ai[1] += 1f;
				int num1287 = 300;
				if (this.ai[1] < 20f || this.ai[1] > (float)(num1287 - 20))
				{
					this.ai[1] += 2f * (num1281 - 1f) / 3f;
					localAI[0] = 1f;
				}
				else
				{
					this.ai[1] += 1f * (num1281 - 1f) / 2f;
					localAI[0] = 0f;
				}
				if (this.ai[1] >= (float)num1287)
				{
					TargetClosest();
					this.ai[1] = 0f;
					Vector2 vector308 = default(Vector2);
					((Vector2)(ref vector308))._002Ector(base.Center.X, base.Center.Y + 10f * scale);
					float num1288 = 8f;
					float num1289 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector308.X;
					float num1290 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector308.Y;
					float num1291 = (float)Math.Sqrt(num1289 * num1289 + num1290 * num1290);
					num1291 = num1288 / num1291;
					num1289 *= num1291;
					num1290 *= num1291;
					int num1292 = 18;
					int num1293 = 258;
					if (Main.netMode != 1)
					{
						int num1294 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector308.X, vector308.Y, num1289, num1290, num1293, num1292, 0f, Main.myPlayer);
					}
				}
			}
			else if (this.ai[0] == 1f)
			{
				TargetClosest();
				Vector2 vector309 = default(Vector2);
				((Vector2)(ref vector309))._002Ector(base.Center.X, base.Center.Y + 10f * scale);
				if (Main.player[target].Center.X < base.Center.X - (float)width)
				{
					localAI[1] = -1f;
					vector309.X -= 40f * scale;
				}
				else if (Main.player[target].Center.X > base.Center.X + (float)width)
				{
					localAI[1] = 1f;
					vector309.X += 40f * scale;
				}
				else
				{
					localAI[1] = 0f;
				}
				float num1295 = (num1281 + 3f) / 4f;
				this.ai[1] += num1295;
				if ((double)life < (double)lifeMax * 0.4)
				{
					this.ai[1] += num1295;
				}
				if ((double)life < (double)lifeMax * 0.2)
				{
					this.ai[1] += num1295;
				}
				int num1297 = 300;
				if (this.ai[1] < 20f || this.ai[1] > (float)(num1297 - 20))
				{
					localAI[0] = 1f;
				}
				else
				{
					localAI[0] = 0f;
				}
				if (this.ai[1] >= (float)num1297)
				{
					TargetClosest();
					this.ai[1] = 0f;
					float num1298 = 8f;
					float num1299 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector309.X;
					float num1300 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector309.Y;
					float num1301 = (float)Math.Sqrt(num1299 * num1299 + num1300 * num1300);
					num1301 = num1298 / num1301;
					num1299 *= num1301;
					num1300 *= num1301;
					int num1302 = 24;
					int num1303 = 258;
					if (Main.netMode != 1)
					{
						int num1304 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector309.X, vector309.Y, num1299, num1300, num1303, num1302, 0f, Main.myPlayer);
					}
				}
				this.ai[2] += num1295;
				if (life < lifeMax / 3)
				{
					this.ai[2] += num1295;
				}
				if (life < lifeMax / 4)
				{
					this.ai[2] += num1295;
				}
				if (life < lifeMax / 5)
				{
					this.ai[2] += num1295;
				}
				if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					this.ai[2] += 4f;
				}
				if (this.ai[2] > (float)(60 + Main.rand.Next(600)))
				{
					this.ai[2] = 0f;
					int num1305 = 28;
					int num1306 = 259;
					if (localAI[1] == 0f)
					{
						for (int num1308 = 0; num1308 < 2; num1308++)
						{
							((Vector2)(ref vector309))._002Ector(base.Center.X, base.Center.Y - 22f * scale);
							if (num1308 == 0)
							{
								vector309.X -= 18f * scale;
							}
							else
							{
								vector309.X += 18f * scale;
							}
							float num1309 = 11f;
							float num1310 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector309.X;
							float num1311 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector309.Y;
							float num1312 = (float)Math.Sqrt(num1310 * num1310 + num1311 * num1311);
							num1312 = num1309 / num1312;
							num1310 *= num1312;
							num1311 *= num1312;
							vector309.X += num1310 * 3f;
							vector309.Y += num1311 * 3f;
							if (Main.netMode != 1)
							{
								int num1313 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector309.X, vector309.Y, num1310, num1311, num1306, num1305, 0f, Main.myPlayer);
								Main.projectile[num1313].timeLeft = 300;
							}
						}
					}
					else if (localAI[1] != 0f)
					{
						((Vector2)(ref vector309))._002Ector(base.Center.X, base.Center.Y - 22f * scale);
						if (localAI[1] == -1f)
						{
							vector309.X -= 30f * scale;
						}
						else if (localAI[1] == 1f)
						{
							vector309.X += 30f * scale;
						}
						float num1314 = 12f;
						float num1315 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector309.X;
						float num1316 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector309.Y;
						float num1317 = (float)Math.Sqrt(num1315 * num1315 + num1316 * num1316);
						num1317 = num1314 / num1317;
						num1315 *= num1317;
						num1316 *= num1317;
						vector309.X += num1315 * 3f;
						vector309.Y += num1316 * 3f;
						if (Main.netMode != 1)
						{
							int num1319 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector309.X, vector309.Y, num1315, num1316, num1306, num1305, 0f, Main.myPlayer);
							Main.projectile[num1319].timeLeft = 300;
						}
					}
				}
			}
			if (life < lifeMax / 2)
			{
				this.ai[0] = 1f;
			}
			else
			{
				this.ai[0] = 0f;
			}
		}
		else if (aiStyle == 47)
		{
			AI_047_GolemFist();
		}
		else if (aiStyle == 48)
		{
			bool flag43 = false;
			float num1320 = GetMyBalance();
			if (Main.getGoodWorld)
			{
				num1320 += 3f;
			}
			if ((!Main.player[target].ZoneLihzhardTemple && !Main.player[target].ZoneJungle) || (double)Main.player[target].Center.Y < Main.worldSurface * 16.0)
			{
				num1320 *= 2f;
			}
			if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
			{
				noTileCollide = true;
				flag43 = true;
			}
			else if (noTileCollide && Collision.SolidTiles(position, width, height))
			{
				noTileCollide = false;
			}
			if (golemBoss < 0)
			{
				StrikeNPCNoInteraction(9999, 0f, 0);
				return;
			}
			TargetClosest();
			float num1321 = 7f;
			float num1322 = 0.05f;
			Vector2 vector310 = default(Vector2);
			((Vector2)(ref vector310))._002Ector(base.Center.X, base.Center.Y);
			float num1323 = Main.player[target].Center.X - vector310.X;
			float num1324 = Main.player[target].Center.Y - vector310.Y - 300f;
			float num1325 = (float)Math.Sqrt(num1323 * num1323 + num1324 * num1324);
			num1325 = num1321 / num1325;
			num1323 *= num1325;
			num1324 *= num1325;
			if (velocity.X < num1323)
			{
				velocity.X += num1322;
				if (velocity.X < 0f && num1323 > 0f)
				{
					velocity.X += num1322;
				}
			}
			else if (velocity.X > num1323)
			{
				velocity.X -= num1322;
				if (velocity.X > 0f && num1323 < 0f)
				{
					velocity.X -= num1322;
				}
			}
			if (velocity.Y < num1324)
			{
				velocity.Y += num1322;
				if (velocity.Y < 0f && num1324 > 0f)
				{
					velocity.Y += num1322;
				}
			}
			else if (velocity.Y > num1324)
			{
				velocity.Y -= num1322;
				if (velocity.Y > 0f && num1324 < 0f)
				{
					velocity.Y -= num1322;
				}
			}
			float num1326 = (num1320 + 4f) / 5f;
			this.ai[1] += num1326;
			if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.8)
			{
				this.ai[1] += num1326;
			}
			if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.6)
			{
				this.ai[1] += num1326;
			}
			if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.2)
			{
				this.ai[1] += num1326;
			}
			if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.1)
			{
				this.ai[1] += num1326;
			}
			int num1327 = 300;
			if (this.ai[1] < 20f || this.ai[1] > (float)(num1327 - 20))
			{
				localAI[0] = 1f;
			}
			else
			{
				localAI[0] = 0f;
			}
			if (flag43)
			{
				this.ai[1] = 20f;
			}
			if (this.ai[1] >= (float)num1327)
			{
				TargetClosest();
				this.ai[1] = 0f;
				Vector2 vector311 = default(Vector2);
				((Vector2)(ref vector311))._002Ector(base.Center.X, base.Center.Y - 10f * scale);
				float num1328 = 8f;
				int num1330 = 20;
				int num1331 = 258;
				float num1332 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector311.X;
				float num1333 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector311.Y;
				float num1334 = (float)Math.Sqrt(num1332 * num1332 + num1333 * num1333);
				num1334 = num1328 / num1334;
				num1332 *= num1334;
				num1333 *= num1334;
				if (Main.netMode != 1)
				{
					int num1335 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector311.X, vector311.Y, num1332, num1333, num1331, num1330, 0f, Main.myPlayer);
				}
			}
			float num1336 = num1320;
			this.ai[2] += num1336;
			if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax / 1.25)
			{
				this.ai[2] += num1336;
			}
			if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax / 1.5)
			{
				this.ai[2] += num1336;
			}
			if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 2)
			{
				this.ai[2] += num1336;
			}
			if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 3)
			{
				this.ai[2] += num1336;
			}
			if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 4)
			{
				this.ai[2] += num1336;
			}
			if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 5)
			{
				this.ai[2] += num1336;
			}
			if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 6)
			{
				this.ai[2] += num1336;
			}
			bool flag44 = false;
			if (!Collision.CanHit(Main.npc[golemBoss].Center, 1, 1, Main.player[target].Center, 1, 1))
			{
				flag44 = true;
			}
			if (flag44)
			{
				this.ai[2] += num1336 * 10f;
			}
			if (this.ai[2] > (float)(100 + Main.rand.Next(4800)))
			{
				this.ai[2] = 0f;
				Vector2 vector312 = default(Vector2);
				for (int num1337 = 0; num1337 < 2; num1337++)
				{
					((Vector2)(ref vector312))._002Ector(base.Center.X, base.Center.Y - 50f * scale);
					switch (num1337)
					{
					case 0:
						vector312.X -= 14f * scale;
						break;
					case 1:
						vector312.X += 14f * scale;
						break;
					}
					float num1338 = 11f;
					int num1339 = 24;
					int num1341 = 259;
					if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.5)
					{
						num1339++;
						num1338 += 0.25f;
					}
					if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.4)
					{
						num1339++;
						num1338 += 0.25f;
					}
					if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.3)
					{
						num1339++;
						num1338 += 0.25f;
					}
					if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.2)
					{
						num1339++;
						num1338 += 0.25f;
					}
					if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.1)
					{
						num1339++;
						num1338 += 0.25f;
					}
					float num1342 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f;
					float num1343 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f;
					if (flag44)
					{
						num1339 = (int)((double)num1339 * 1.5);
						num1338 *= 2.5f;
						num1342 += Main.player[target].velocity.X * Main.rand.NextFloat() * 50f;
						num1343 += Main.player[target].velocity.Y * Main.rand.NextFloat() * 50f;
					}
					num1342 -= vector312.X;
					num1343 -= vector312.Y;
					float num1344 = (float)Math.Sqrt(num1342 * num1342 + num1343 * num1343);
					num1344 = num1338 / num1344;
					num1342 *= num1344;
					num1343 *= num1344;
					vector312.X += num1342 * 3f;
					vector312.Y += num1343 * 3f;
					if (Main.netMode != 1)
					{
						int num1345 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector312.X, vector312.Y, num1342, num1343, num1341, num1339, 0f, Main.myPlayer);
						Main.projectile[num1345].timeLeft = 300;
					}
				}
			}
			if (!Main.getGoodWorld)
			{
				position += netOffset;
				int num1346 = Main.rand.Next(2) * 2 - 1;
				Vector2 vector313 = base.Bottom + new Vector2((float)(num1346 * 22) * scale, -22f * scale);
				Vector2? val60 = ((float)Math.PI / 2f + -(float)Math.PI / 2f * (float)num1346 + Main.rand.NextFloatDirection() * ((float)Math.PI / 4f)).ToRotationVector2() * (2f + Main.rand.NextFloat());
				newColor = default(Color);
				Dust dust82 = Dust.NewDustPerfect(vector313, 228, val60, 0, newColor);
				Dust dust49 = dust82;
				Dust dust87 = dust49;
				dust87.velocity += velocity;
				dust82.noGravity = true;
				Vector2 val61 = base.Bottom + new Vector2(Main.rand.NextFloatDirection() * 6f * scale, (Main.rand.NextFloat() * -4f - 8f) * scale);
				Vector2? val62 = Vector2.UnitY * (2f + Main.rand.NextFloat());
				newColor = default(Color);
				dust82 = Dust.NewDustPerfect(val61, 228, val62, 0, newColor);
				dust82.fadeIn = 0f;
				dust82.scale = 0.7f + Main.rand.NextFloat() * 0.5f;
				dust82.noGravity = true;
				dust49 = dust82;
				dust87 = dust49;
				dust87.velocity += velocity;
				position -= netOffset;
			}
		}
		else if (aiStyle == 49)
		{
			noGravity = true;
			TargetClosest();
			float num1347 = 4f;
			float num1348 = 0.25f;
			Vector2 vector314 = default(Vector2);
			((Vector2)(ref vector314))._002Ector(base.Center.X, base.Center.Y);
			float num1349 = Main.player[target].Center.X - vector314.X;
			float num1350 = Main.player[target].Center.Y - vector314.Y - 200f;
			float num1352 = (float)Math.Sqrt(num1349 * num1349 + num1350 * num1350);
			if (num1352 < 20f)
			{
				num1349 = velocity.X;
				num1350 = velocity.Y;
			}
			else
			{
				num1352 = num1347 / num1352;
				num1349 *= num1352;
				num1350 *= num1352;
			}
			if (velocity.X < num1349)
			{
				velocity.X += num1348;
				if (velocity.X < 0f && num1349 > 0f)
				{
					velocity.X += num1348 * 2f;
				}
			}
			else if (velocity.X > num1349)
			{
				velocity.X -= num1348;
				if (velocity.X > 0f && num1349 < 0f)
				{
					velocity.X -= num1348 * 2f;
				}
			}
			if (velocity.Y < num1350)
			{
				velocity.Y += num1348;
				if (velocity.Y < 0f && num1350 > 0f)
				{
					velocity.Y += num1348 * 2f;
				}
			}
			else if (velocity.Y > num1350)
			{
				velocity.Y -= num1348;
				if (velocity.Y > 0f && num1350 < 0f)
				{
					velocity.Y -= num1348 * 2f;
				}
			}
			if (position.X + (float)width > Main.player[target].position.X && position.X < Main.player[target].position.X + (float)Main.player[target].width && position.Y + (float)height < Main.player[target].position.Y && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && Main.netMode != 1)
			{
				this.ai[0] += 1f;
				if (this.ai[0] > 8f)
				{
					this.ai[0] = 0f;
					int num1353 = (int)(position.X + 10f + (float)Main.rand.Next(width - 20));
					int num1354 = (int)(position.Y + (float)height + 4f);
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), num1353, num1354, 0f, 5f, 264, 20, 0f, Main.myPlayer);
				}
			}
		}
		else if (aiStyle == 50)
		{
			EncourageDespawn(5);
			if (type == 261)
			{
				noTileCollide = false;
				if (collideX || collideY)
				{
					life = 0;
					HitEffect(0, 100.0);
					checkDead();
					return;
				}
			}
			else
			{
				noTileCollide = true;
			}
			velocity.Y += 0.02f;
			TargetClosest();
			if (velocity.Y < 0f && Main.player[target].position.Y > position.Y + 100f)
			{
				velocity.Y *= 0.95f;
			}
			if (velocity.Y > 1f)
			{
				velocity.Y = 1f;
			}
			if (position.X + (float)width < Main.player[target].position.X)
			{
				if (velocity.X < 0f)
				{
					velocity.X *= 0.98f;
				}
				if (Main.expertMode && velocity.X < 0f)
				{
					velocity.X *= 0.98f;
				}
				velocity.X += 0.1f;
				if (Main.expertMode)
				{
					velocity.X += 0.1f;
				}
			}
			else if (position.X > Main.player[target].position.X + (float)Main.player[target].width)
			{
				if (velocity.X > 0f)
				{
					velocity.X *= 0.98f;
				}
				if (Main.expertMode && velocity.X > 0f)
				{
					velocity.X *= 0.98f;
				}
				velocity.X -= 0.1f;
				if (Main.expertMode)
				{
					velocity.X -= 0.1f;
				}
			}
			if (velocity.X > 5f || velocity.X < -5f)
			{
				velocity.X *= 0.97f;
			}
			rotation = velocity.X * 0.2f;
		}
		else if (aiStyle == 51)
		{
			bool flag45 = false;
			bool flag47 = false;
			TargetClosest();
			if (Main.player[target].dead)
			{
				flag47 = true;
				flag45 = true;
			}
			else if (Main.netMode != 1 && target >= 0 && target < 255)
			{
				int num1355 = 4800;
				if (timeLeft < activeTime && Vector2.Distance(base.Center, Main.player[target].Center) < (float)num1355)
				{
					timeLeft = activeTime;
				}
			}
			plantBoss = whoAmI;
			if (localAI[0] == 0f && Main.netMode != 1)
			{
				localAI[0] = 1f;
				int num1356 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 263, whoAmI);
				num1356 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 263, whoAmI);
				num1356 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 263, whoAmI);
			}
			int[] array2 = new int[3];
			float num1357 = 0f;
			float num1358 = 0f;
			int num1359 = 0;
			for (int num1360 = 0; num1360 < 200; num1360++)
			{
				if (Main.npc[num1360].active && Main.npc[num1360].aiStyle == 52)
				{
					num1357 += Main.npc[num1360].Center.X;
					num1358 += Main.npc[num1360].Center.Y;
					array2[num1359] = num1360;
					num1359++;
					if (num1359 > 2)
					{
						break;
					}
				}
			}
			num1357 /= (float)num1359;
			num1358 /= (float)num1359;
			float num1361 = 2.5f;
			float num1363 = 0.025f;
			if (life < lifeMax / 2)
			{
				num1361 = 5f;
				num1363 = 0.05f;
			}
			if (life < lifeMax / 4)
			{
				num1361 = 7f;
			}
			if (!Main.player[target].ZoneJungle || (double)Main.player[target].position.Y < Main.worldSurface * 16.0 || Main.player[target].position.Y > (float)(Main.UnderworldLayer * 16))
			{
				flag45 = true;
				num1361 += 8f;
				num1363 = 0.15f;
			}
			if (Main.expertMode)
			{
				num1361 += 1f;
				num1361 *= 1.1f;
				num1363 += 0.01f;
				num1363 *= 1.1f;
			}
			if (Main.getGoodWorld)
			{
				num1361 *= 1.15f;
				num1363 *= 1.15f;
			}
			Vector2 vector315 = default(Vector2);
			((Vector2)(ref vector315))._002Ector(num1357, num1358);
			float num1364 = Main.player[target].Center.X - vector315.X;
			float num1365 = Main.player[target].Center.Y - vector315.Y;
			if (flag47)
			{
				num1365 *= -1f;
				num1364 *= -1f;
				num1361 += 8f;
			}
			float num1366 = (float)Math.Sqrt(num1364 * num1364 + num1365 * num1365);
			int num1367 = 500;
			if (flag45)
			{
				num1367 += 350;
			}
			if (Main.expertMode)
			{
				num1367 += 150;
			}
			if (num1366 >= (float)num1367)
			{
				num1366 = (float)num1367 / num1366;
				num1364 *= num1366;
				num1365 *= num1366;
			}
			num1357 += num1364;
			num1358 += num1365;
			((Vector2)(ref vector315))._002Ector(base.Center.X, base.Center.Y);
			num1364 = num1357 - vector315.X;
			num1365 = num1358 - vector315.Y;
			num1366 = (float)Math.Sqrt(num1364 * num1364 + num1365 * num1365);
			if (num1366 < num1361)
			{
				num1364 = velocity.X;
				num1365 = velocity.Y;
			}
			else
			{
				num1366 = num1361 / num1366;
				num1364 *= num1366;
				num1365 *= num1366;
			}
			if (velocity.X < num1364)
			{
				velocity.X += num1363;
				if (velocity.X < 0f && num1364 > 0f)
				{
					velocity.X += num1363 * 2f;
				}
			}
			else if (velocity.X > num1364)
			{
				velocity.X -= num1363;
				if (velocity.X > 0f && num1364 < 0f)
				{
					velocity.X -= num1363 * 2f;
				}
			}
			if (velocity.Y < num1365)
			{
				velocity.Y += num1363;
				if (velocity.Y < 0f && num1365 > 0f)
				{
					velocity.Y += num1363 * 2f;
				}
			}
			else if (velocity.Y > num1365)
			{
				velocity.Y -= num1363;
				if (velocity.Y > 0f && num1365 < 0f)
				{
					velocity.Y -= num1363 * 2f;
				}
			}
			Vector2 vector316 = default(Vector2);
			((Vector2)(ref vector316))._002Ector(base.Center.X, base.Center.Y);
			float num1368 = Main.player[target].Center.X - vector316.X;
			float num1369 = Main.player[target].Center.Y - vector316.Y;
			rotation = (float)Math.Atan2(num1369, num1368) + 1.57f;
			if (life > lifeMax / 2)
			{
				defense = 36;
				int num1370 = 50;
				if (flag45)
				{
					defense *= 2;
					num1370 *= 2;
				}
				damage = GetAttackDamage_ScaledByStrength(num1370);
				if (Main.netMode == 1)
				{
					return;
				}
				localAI[1] += 1f;
				if ((double)life < (double)lifeMax * 0.9)
				{
					localAI[1] += 1f;
				}
				if ((double)life < (double)lifeMax * 0.8)
				{
					localAI[1] += 1f;
				}
				if ((double)life < (double)lifeMax * 0.7)
				{
					localAI[1] += 1f;
				}
				if ((double)life < (double)lifeMax * 0.6)
				{
					localAI[1] += 1f;
				}
				if (flag45)
				{
					localAI[1] += 3f;
				}
				if (Main.expertMode)
				{
					localAI[1] += 1f;
				}
				if (Main.expertMode && justHit && Main.rand.Next(2) == 0)
				{
					localAI[3] = 1f;
				}
				if (Main.getGoodWorld)
				{
					localAI[1] += 1f;
				}
				if (!(localAI[1] > 80f))
				{
					return;
				}
				localAI[1] = 0f;
				bool flag48 = Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height);
				if (localAI[3] > 0f)
				{
					flag48 = true;
					localAI[3] = 0f;
				}
				if (flag48)
				{
					Vector2 vector317 = default(Vector2);
					((Vector2)(ref vector317))._002Ector(base.Center.X, base.Center.Y);
					float num1371 = 15f;
					if (Main.expertMode)
					{
						num1371 = 17f;
					}
					float num1372 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector317.X;
					float num1374 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector317.Y;
					float num1375 = (float)Math.Sqrt(num1372 * num1372 + num1374 * num1374);
					num1375 = num1371 / num1375;
					num1372 *= num1375;
					num1374 *= num1375;
					int num1376 = 22;
					int num1377 = 275;
					int maxValue2 = 4;
					int maxValue3 = 8;
					if (Main.expertMode)
					{
						maxValue2 = 2;
						maxValue3 = 6;
					}
					if ((double)life < (double)lifeMax * 0.8 && Main.rand.Next(maxValue2) == 0)
					{
						num1376 = 27;
						localAI[1] = -30f;
						num1377 = 276;
					}
					else if ((double)life < (double)lifeMax * 0.8 && Main.rand.Next(maxValue3) == 0)
					{
						num1376 = 31;
						localAI[1] = -120f;
						num1377 = 277;
					}
					if (flag45)
					{
						num1376 *= 2;
					}
					num1376 = GetAttackDamage_ForProjectiles(num1376, (float)num1376 * 0.9f);
					vector317.X += num1372 * 3f;
					vector317.Y += num1374 * 3f;
					int num1378 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector317.X, vector317.Y, num1372, num1374, num1377, num1376, 0f, Main.myPlayer);
					if (num1377 != 277)
					{
						Main.projectile[num1378].timeLeft = 300;
					}
				}
				return;
			}
			defense = 10;
			int num1379 = 70;
			if (flag45)
			{
				defense *= 4;
				num1379 *= 2;
			}
			damage = GetAttackDamage_ScaledByStrength(num1379);
			if (Main.netMode != 1)
			{
				if (localAI[0] == 1f)
				{
					localAI[0] = 2f;
					int num1380 = 8;
					if (Main.getGoodWorld)
					{
						num1380 += 6;
					}
					for (int num1381 = 0; num1381 < num1380; num1381++)
					{
						int num1382 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 264, whoAmI);
					}
					if (Main.expertMode)
					{
						for (int num1383 = 0; num1383 < 200; num1383++)
						{
							if (Main.npc[num1383].active && Main.npc[num1383].aiStyle == 52)
							{
								for (int num1386 = 0; num1386 < num1380 / 2 - 1; num1386++)
								{
									int num1387 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 264, whoAmI);
									Main.npc[num1387].ai[3] = num1383 + 1;
								}
							}
						}
					}
				}
				else if (Main.expertMode && Main.rand.Next(60) == 0)
				{
					int num1388 = 0;
					for (int num1389 = 0; num1389 < 200; num1389++)
					{
						if (Main.npc[num1389].active && Main.npc[num1389].type == 264 && Main.npc[num1389].ai[3] == 0f)
						{
							num1388++;
						}
					}
					if (num1388 < 8 && Main.rand.Next((num1388 + 1) * 10) <= 1)
					{
						int num1390 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 264, whoAmI);
					}
				}
			}
			if (localAI[2] == 0f)
			{
				Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 378, scale);
				Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 379, scale);
				Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 380, scale);
				localAI[2] = 1f;
			}
			if (Main.netMode == 1)
			{
				return;
			}
			localAI[1] += 1f;
			if ((double)life < (double)lifeMax * 0.4)
			{
				localAI[1] += 1f;
			}
			if ((double)life < (double)lifeMax * 0.3)
			{
				localAI[1] += 1f;
			}
			if ((double)life < (double)lifeMax * 0.2)
			{
				localAI[1] += 1f;
			}
			if ((double)life < (double)lifeMax * 0.1)
			{
				localAI[1] += 1f;
			}
			if (localAI[1] >= 350f)
			{
				float num1391 = 8f;
				Vector2 vector3 = default(Vector2);
				((Vector2)(ref vector3))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1392 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector3.X + (float)Main.rand.Next(-10, 11);
				float num1393 = Math.Abs(num1392 * 0.2f);
				float num1394 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector3.Y + (float)Main.rand.Next(-10, 11);
				if (num1394 > 0f)
				{
					num1393 = 0f;
				}
				num1394 -= num1393;
				float num1395 = (float)Math.Sqrt(num1392 * num1392 + num1394 * num1394);
				num1395 = num1391 / num1395;
				num1392 *= num1395;
				num1394 *= num1395;
				int num1397 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 265);
				Main.npc[num1397].velocity.X = num1392;
				Main.npc[num1397].velocity.Y = num1394;
				Main.npc[num1397].netUpdate = true;
				localAI[1] = 0f;
			}
		}
		else if (aiStyle == 52)
		{
			bool flag49 = false;
			bool flag50 = false;
			if (plantBoss < 0)
			{
				StrikeNPCNoInteraction(9999, 0f, 0);
				netUpdate = true;
				return;
			}
			if (Main.player[Main.npc[plantBoss].target].dead)
			{
				flag50 = true;
			}
			if ((plantBoss != -1 && !Main.player[Main.npc[plantBoss].target].ZoneJungle) || (double)Main.player[Main.npc[plantBoss].target].position.Y < Main.worldSurface * 16.0 || Main.player[Main.npc[plantBoss].target].position.Y > (float)(Main.UnderworldLayer * 16) || flag50)
			{
				localAI[0] -= 4f;
				flag49 = true;
			}
			if (Main.netMode == 1)
			{
				if (this.ai[0] == 0f)
				{
					this.ai[0] = (int)(base.Center.X / 16f);
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = (int)(base.Center.X / 16f);
				}
			}
			if (Main.netMode != 1)
			{
				if (this.ai[0] == 0f || this.ai[1] == 0f)
				{
					localAI[0] = 0f;
				}
				localAI[0] -= 1f;
				if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2)
				{
					localAI[0] -= 2f;
				}
				if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 4)
				{
					localAI[0] -= 2f;
				}
				if (flag49)
				{
					localAI[0] -= 6f;
				}
				if (!flag50 && localAI[0] <= 0f && this.ai[0] != 0f)
				{
					for (int num1398 = 0; num1398 < 200; num1398++)
					{
						if (num1398 != whoAmI && Main.npc[num1398].active && Main.npc[num1398].type == type && (Main.npc[num1398].velocity.X != 0f || Main.npc[num1398].velocity.Y != 0f))
						{
							localAI[0] = Main.rand.Next(60, 300);
						}
					}
				}
				if (localAI[0] <= 0f)
				{
					localAI[0] = Main.rand.Next(300, 600);
					bool flag51 = false;
					int num1399 = 0;
					while (!flag51 && num1399 <= 1000)
					{
						num1399++;
						int num1400 = (int)(Main.player[Main.npc[plantBoss].target].Center.X / 16f);
						int num1401 = (int)(Main.player[Main.npc[plantBoss].target].Center.Y / 16f);
						if (this.ai[0] == 0f)
						{
							num1400 = (int)((Main.player[Main.npc[plantBoss].target].Center.X + Main.npc[plantBoss].Center.X) / 32f);
							num1401 = (int)((Main.player[Main.npc[plantBoss].target].Center.Y + Main.npc[plantBoss].Center.Y) / 32f);
						}
						if (flag50)
						{
							num1400 = (int)Main.npc[plantBoss].position.X / 16;
							num1401 = (int)(Main.npc[plantBoss].position.Y + 400f) / 16;
						}
						int num1402 = 20;
						num1402 += (int)(100f * ((float)num1399 / 1000f));
						int num1403 = num1400 + Main.rand.Next(-num1402, num1402 + 1);
						int num1404 = num1401 + Main.rand.Next(-num1402, num1402 + 1);
						if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2 && Main.rand.Next(6) == 0)
						{
							TargetClosest();
							int num1405 = (int)(Main.player[target].Center.X / 16f);
							int num1406 = (int)(Main.player[target].Center.Y / 16f);
							if (Main.tile[num1405, num1406].wall > 0)
							{
								num1403 = num1405;
								num1404 = num1406;
							}
						}
						try
						{
							if (WorldGen.InWorld(num1403, num1404) && (WorldGen.SolidTile(num1403, num1404) || (Main.tile[num1403, num1404].wall > 0 && (num1399 > 500 || Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2))))
							{
								flag51 = true;
								this.ai[0] = num1403;
								this.ai[1] = num1404;
								netUpdate = true;
							}
						}
						catch
						{
						}
					}
				}
			}
			if (!(this.ai[0] > 0f) || !(this.ai[1] > 0f))
			{
				return;
			}
			float num1408 = 6f;
			if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2)
			{
				num1408 = 8f;
			}
			if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 4)
			{
				num1408 = 10f;
			}
			if (Main.expertMode)
			{
				num1408 += 1f;
			}
			if (Main.expertMode && Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2)
			{
				num1408 += 1f;
			}
			if (flag49)
			{
				num1408 *= 2f;
			}
			if (flag50)
			{
				num1408 *= 2f;
			}
			Vector2 vector4 = default(Vector2);
			((Vector2)(ref vector4))._002Ector(base.Center.X, base.Center.Y);
			float num1409 = this.ai[0] * 16f - 8f - vector4.X;
			float num1410 = this.ai[1] * 16f - 8f - vector4.Y;
			float num1411 = (float)Math.Sqrt(num1409 * num1409 + num1410 * num1410);
			if (num1411 < 12f + num1408)
			{
				if (Main.netMode != 1 && Main.getGoodWorld && localAI[3] == 1f)
				{
					localAI[3] = 0f;
					WorldGen.SpawnPlanteraThorns(base.Center);
				}
				velocity.X = num1409;
				velocity.Y = num1410;
			}
			else
			{
				if (Main.netMode != 1 && Main.getGoodWorld)
				{
					localAI[3] = 1f;
				}
				num1411 = num1408 / num1411;
				velocity.X = num1409 * num1411;
				velocity.Y = num1410 * num1411;
			}
			Vector2 vector5 = default(Vector2);
			((Vector2)(ref vector5))._002Ector(base.Center.X, base.Center.Y);
			float num1412 = Main.npc[plantBoss].Center.X - vector5.X;
			float num1413 = Main.npc[plantBoss].Center.Y - vector5.Y;
			rotation = (float)Math.Atan2(num1413, num1412) - 1.57f;
		}
		else if (aiStyle == 53)
		{
			if (Main.getGoodWorld)
			{
				if (Main.rand.Next(10) == 0)
				{
					reflectsProjectiles = true;
				}
				else
				{
					reflectsProjectiles = false;
				}
			}
			if (plantBoss < 0)
			{
				StrikeNPCNoInteraction(9999, 0f, 0);
				netUpdate = true;
				return;
			}
			int num1414 = plantBoss;
			if (this.ai[3] > 0f)
			{
				num1414 = (int)this.ai[3] - 1;
			}
			if (Main.netMode != 1)
			{
				localAI[0] -= 1f;
				if (localAI[0] <= 0f)
				{
					localAI[0] = Main.rand.Next(120, 480);
					this.ai[0] = Main.rand.Next(-100, 101);
					this.ai[1] = Main.rand.Next(-100, 101);
					netUpdate = true;
				}
			}
			TargetClosest();
			float num1415 = 0.2f;
			float num1416 = 200f;
			if ((double)Main.npc[plantBoss].life < (double)Main.npc[plantBoss].lifeMax * 0.25)
			{
				num1416 += 100f;
			}
			if ((double)Main.npc[plantBoss].life < (double)Main.npc[plantBoss].lifeMax * 0.1)
			{
				num1416 += 100f;
			}
			if (Main.expertMode)
			{
				float num1417 = 1f - (float)life / (float)lifeMax;
				num1416 += num1417 * 300f;
				num1415 += 0.3f;
			}
			if (Main.getGoodWorld)
			{
				num1415 += 4f;
			}
			if (!Main.npc[num1414].active || plantBoss < 0)
			{
				active = false;
				return;
			}
			float num1419 = Main.npc[num1414].position.X + (float)(Main.npc[num1414].width / 2);
			float num1420 = Main.npc[num1414].position.Y + (float)(Main.npc[num1414].height / 2);
			Vector2 vector6 = default(Vector2);
			((Vector2)(ref vector6))._002Ector(num1419, num1420);
			float num1421 = num1419 + this.ai[0];
			float num1422 = num1420 + this.ai[1];
			float num1423 = num1421 - vector6.X;
			float num1424 = num1422 - vector6.Y;
			float num1425 = (float)Math.Sqrt(num1423 * num1423 + num1424 * num1424);
			num1425 = num1416 / num1425;
			num1423 *= num1425;
			num1424 *= num1425;
			if (position.X < num1419 + num1423)
			{
				velocity.X += num1415;
				if (velocity.X < 0f && num1423 > 0f)
				{
					velocity.X *= 0.9f;
				}
			}
			else if (position.X > num1419 + num1423)
			{
				velocity.X -= num1415;
				if (velocity.X > 0f && num1423 < 0f)
				{
					velocity.X *= 0.9f;
				}
			}
			if (position.Y < num1420 + num1424)
			{
				velocity.Y += num1415;
				if (velocity.Y < 0f && num1424 > 0f)
				{
					velocity.Y *= 0.9f;
				}
			}
			else if (position.Y > num1420 + num1424)
			{
				velocity.Y -= num1415;
				if (velocity.Y > 0f && num1424 < 0f)
				{
					velocity.Y *= 0.9f;
				}
			}
			if (velocity.X > 8f)
			{
				velocity.X = 8f;
			}
			if (velocity.X < -8f)
			{
				velocity.X = -8f;
			}
			if (velocity.Y > 8f)
			{
				velocity.Y = 8f;
			}
			if (velocity.Y < -8f)
			{
				velocity.Y = -8f;
			}
			if (num1423 > 0f)
			{
				spriteDirection = 1;
				rotation = (float)Math.Atan2(num1424, num1423);
			}
			if (num1423 < 0f)
			{
				spriteDirection = -1;
				rotation = (float)Math.Atan2(num1424, num1423) + 3.14f;
			}
		}
		else if (aiStyle == 54)
		{
			crimsonBoss = whoAmI;
			if (Main.netMode != 1 && localAI[0] == 0f)
			{
				localAI[0] = 1f;
				int brainOfCthuluCreepersCount = GetBrainOfCthuluCreepersCount();
				for (int num1426 = 0; num1426 < brainOfCthuluCreepersCount; num1426++)
				{
					float x2 = base.Center.X;
					float y4 = base.Center.Y;
					x2 += (float)Main.rand.Next(-width, width);
					y4 += (float)Main.rand.Next(-height, height);
					int num1427 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)x2, (int)y4, 267);
					Main.npc[num1427].velocity = new Vector2((float)Main.rand.Next(-30, 31) * 0.1f, (float)Main.rand.Next(-30, 31) * 0.1f);
					Main.npc[num1427].netUpdate = true;
				}
			}
			if (Main.netMode != 1)
			{
				TargetClosest();
				int num1428 = 6000;
				if (Math.Abs(base.Center.X - Main.player[target].Center.X) + Math.Abs(base.Center.Y - Main.player[target].Center.Y) > (float)num1428)
				{
					active = false;
					life = 0;
					if (Main.netMode == 2)
					{
						NetMessage.SendData(23, -1, -1, null, whoAmI);
					}
				}
			}
			if (this.ai[0] < 0f)
			{
				if (Main.getGoodWorld)
				{
					brainOfGravity = whoAmI;
				}
				if (localAI[2] == 0f)
				{
					SoundEngine.PlaySound(3, (int)position.X, (int)position.Y);
					localAI[2] = 1f;
					Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 392);
					Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 393);
					Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 394);
					Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 395);
					for (int num1430 = 0; num1430 < 20; num1430++)
					{
						Vector2 val63 = position;
						int num1704 = width;
						int num1705 = height;
						float speedX24 = (float)Main.rand.Next(-30, 31) * 0.2f;
						float speedY23 = (float)Main.rand.Next(-30, 31) * 0.2f;
						newColor = default(Color);
						Dust.NewDust(val63, num1704, num1705, 5, speedX24, speedY23, 0, newColor);
					}
					SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
				}
				dontTakeDamage = false;
				TargetClosest();
				Vector2 vector7 = default(Vector2);
				((Vector2)(ref vector7))._002Ector(base.Center.X, base.Center.Y);
				float num1431 = Main.player[target].Center.X - vector7.X;
				float num1432 = Main.player[target].Center.Y - vector7.Y;
				float num1433 = (float)Math.Sqrt(num1431 * num1431 + num1432 * num1432);
				float num1434 = 8f;
				num1433 = num1434 / num1433;
				num1431 *= num1433;
				num1432 *= num1433;
				velocity.X = (velocity.X * 50f + num1431) / 51f;
				velocity.Y = (velocity.Y * 50f + num1432) / 51f;
				if (this.ai[0] == -1f)
				{
					if (Main.netMode != 1)
					{
						localAI[1] += 1f;
						if (justHit)
						{
							localAI[1] -= Main.rand.Next(5);
						}
						int num1435 = 60 + Main.rand.Next(120);
						if (Main.netMode != 0)
						{
							num1435 += Main.rand.Next(30, 90);
						}
						if (localAI[1] >= (float)num1435)
						{
							localAI[1] = 0f;
							TargetClosest();
							int num1436 = 0;
							Player player4 = Main.player[target];
							Vector2 v = default(Vector2);
							do
							{
								num1436++;
								int num1437 = (int)player4.Center.X / 16;
								int num1438 = (int)player4.Center.Y / 16;
								int minValue = 10;
								int num1439 = 12;
								float num1441 = 16f;
								int num1442 = Main.rand.Next(minValue, num1439 + 1);
								int num1443 = Main.rand.Next(minValue, num1439 + 1);
								if (Main.rand.Next(2) == 0)
								{
									num1442 *= -1;
								}
								if (Main.rand.Next(2) == 0)
								{
									num1443 *= -1;
								}
								((Vector2)(ref v))._002Ector((float)(num1442 * 16), (float)(num1443 * 16));
								if (Vector2.Dot(player4.velocity.SafeNormalize(Vector2.UnitY), v.SafeNormalize(Vector2.UnitY)) > 0f)
								{
									v += v.SafeNormalize(Vector2.Zero) * num1441 * ((Vector2)(ref player4.velocity)).Length();
								}
								num1437 += (int)(v.X / 16f);
								num1438 += (int)(v.Y / 16f);
								if (num1436 > 100 || !WorldGen.SolidTile(num1437, num1438))
								{
									this.ai[3] = 0f;
									this.ai[0] = -2f;
									this.ai[1] = num1437;
									this.ai[2] = num1438;
									netUpdate = true;
									netSpam = 0;
									break;
								}
							}
							while (num1436 <= 100);
						}
					}
				}
				else if (this.ai[0] == -2f)
				{
					velocity *= 0.9f;
					if (Main.netMode != 0)
					{
						this.ai[3] += 15f;
					}
					else
					{
						this.ai[3] += 25f;
					}
					if (this.ai[3] >= 255f)
					{
						this.ai[3] = 255f;
						position.X = this.ai[1] * 16f - (float)(width / 2);
						position.Y = this.ai[2] * 16f - (float)(height / 2);
						SoundEngine.PlaySound(in SoundID.Item8, base.Center);
						this.ai[0] = -3f;
						netUpdate = true;
						netSpam = 0;
					}
					alpha = (int)this.ai[3];
				}
				else if (this.ai[0] == -3f)
				{
					if (Main.netMode != 0)
					{
						this.ai[3] -= 15f;
					}
					else
					{
						this.ai[3] -= 25f;
					}
					if (this.ai[3] <= 0f)
					{
						this.ai[3] = 0f;
						this.ai[0] = -1f;
						netUpdate = true;
						netSpam = 0;
					}
					alpha = (int)this.ai[3];
				}
			}
			else
			{
				TargetClosest();
				Vector2 vector8 = default(Vector2);
				((Vector2)(ref vector8))._002Ector(base.Center.X, base.Center.Y);
				float num1444 = Main.player[target].Center.X - vector8.X;
				float num1445 = Main.player[target].Center.Y - vector8.Y;
				float num1446 = (float)Math.Sqrt(num1444 * num1444 + num1445 * num1445);
				float num1447 = 1f;
				if (Main.getGoodWorld)
				{
					num1447 *= 3f;
				}
				if (num1446 < num1447)
				{
					velocity.X = num1444;
					velocity.Y = num1445;
				}
				else
				{
					num1446 = num1447 / num1446;
					velocity.X = num1444 * num1446;
					velocity.Y = num1445 * num1446;
				}
				if (this.ai[0] == 0f)
				{
					if (Main.netMode != 1)
					{
						int num1448 = 0;
						for (int num1449 = 0; num1449 < 200; num1449++)
						{
							if (Main.npc[num1449].active && Main.npc[num1449].type == 267)
							{
								num1448++;
							}
						}
						if (num1448 == 0)
						{
							this.ai[0] = -1f;
							localAI[1] = 0f;
							alpha = 0;
							netUpdate = true;
						}
						localAI[1] += 1f;
						if (localAI[1] >= (float)(120 + Main.rand.Next(300)))
						{
							localAI[1] = 0f;
							TargetClosest();
							int num1450 = 0;
							Player player5 = Main.player[target];
							Vector2 v5 = default(Vector2);
							do
							{
								num1450++;
								int num1452 = (int)player5.Center.X / 16;
								int num1453 = (int)player5.Center.Y / 16;
								int minValue2 = 12;
								int num1454 = 40;
								float num1455 = 16f;
								int num1456 = Main.rand.Next(minValue2, num1454 + 1);
								int num1457 = Main.rand.Next(minValue2, num1454 + 1);
								if (Main.rand.Next(2) == 0)
								{
									num1456 *= -1;
								}
								if (Main.rand.Next(2) == 0)
								{
									num1457 *= -1;
								}
								((Vector2)(ref v5))._002Ector((float)(num1456 * 16), (float)(num1457 * 16));
								if (Vector2.Dot(player5.velocity.SafeNormalize(Vector2.UnitY), v5.SafeNormalize(Vector2.UnitY)) > 0f)
								{
									v5 += v5.SafeNormalize(Vector2.Zero) * num1455 * ((Vector2)(ref player5.velocity)).Length();
								}
								num1452 += (int)(v5.X / 16f);
								num1453 += (int)(v5.Y / 16f);
								if (num1450 > 100 || (!WorldGen.SolidTile(num1452, num1453) && (num1450 > 75 || Collision.CanHit(new Vector2((float)(num1452 * 16), (float)(num1453 * 16)), 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height))))
								{
									this.ai[0] = 1f;
									this.ai[1] = num1452;
									this.ai[2] = num1453;
									netUpdate = true;
									break;
								}
							}
							while (num1450 <= 100);
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					alpha += 5;
					if (alpha >= 255)
					{
						SoundEngine.PlaySound(in SoundID.Item8, base.Center);
						alpha = 255;
						position.X = this.ai[1] * 16f - (float)(width / 2);
						position.Y = this.ai[2] * 16f - (float)(height / 2);
						this.ai[0] = 2f;
					}
				}
				else if (this.ai[0] == 2f)
				{
					alpha -= 5;
					if (alpha <= 0)
					{
						alpha = 0;
						this.ai[0] = 0f;
					}
				}
			}
			if (Main.player[target].dead || !Main.player[target].ZoneCrimson)
			{
				if (localAI[3] < 120f)
				{
					localAI[3]++;
				}
				if (localAI[3] > 60f)
				{
					velocity.Y += (localAI[3] - 60f) * 0.25f;
				}
				this.ai[0] = 2f;
				alpha = 10;
			}
			else if (localAI[3] > 0f)
			{
				localAI[3]--;
			}
		}
		else if (aiStyle == 55)
		{
			if (crimsonBoss < 0)
			{
				active = false;
				netUpdate = true;
				return;
			}
			if (this.ai[0] == 0f)
			{
				this.ai[1] = 0f;
				Vector2 vector9 = default(Vector2);
				((Vector2)(ref vector9))._002Ector(base.Center.X, base.Center.Y);
				float num1458 = Main.npc[crimsonBoss].Center.X - vector9.X;
				float num1459 = Main.npc[crimsonBoss].Center.Y - vector9.Y;
				float num1460 = (float)Math.Sqrt(num1458 * num1458 + num1459 * num1459);
				if (num1460 > 90f)
				{
					num1460 = 8f / num1460;
					num1458 *= num1460;
					num1459 *= num1460;
					velocity.X = (velocity.X * 15f + num1458) / 16f;
					velocity.Y = (velocity.Y * 15f + num1459) / 16f;
					return;
				}
				if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < 8f)
				{
					velocity.Y *= 1.05f;
					velocity.X *= 1.05f;
				}
				if (Main.netMode != 1 && ((Main.expertMode && Main.rand.Next(100) == 0) || Main.rand.Next(200) == 0))
				{
					TargetClosest();
					((Vector2)(ref vector9))._002Ector(base.Center.X, base.Center.Y);
					num1458 = Main.player[target].Center.X - vector9.X;
					num1459 = Main.player[target].Center.Y - vector9.Y;
					num1460 = (float)Math.Sqrt(num1458 * num1458 + num1459 * num1459);
					num1460 = 8f / num1460;
					velocity.X = num1458 * num1460;
					velocity.Y = num1459 * num1460;
					this.ai[0] = 1f;
					netUpdate = true;
				}
				return;
			}
			if (Main.expertMode)
			{
				Vector2 vector10 = Main.player[target].Center - base.Center;
				((Vector2)(ref vector10)).Normalize();
				if (Main.getGoodWorld)
				{
					vector10 *= 12f;
					velocity = (velocity * 49f + vector10) / 50f;
				}
				else
				{
					vector10 *= 9f;
					velocity = (velocity * 99f + vector10) / 100f;
				}
			}
			Vector2 vector11 = default(Vector2);
			((Vector2)(ref vector11))._002Ector(base.Center.X, base.Center.Y);
			float num1461 = Main.npc[crimsonBoss].Center.X - vector11.X;
			float num1463 = Main.npc[crimsonBoss].Center.Y - vector11.Y;
			float num1464 = (float)Math.Sqrt(num1461 * num1461 + num1463 * num1463);
			if (num1464 > 700f)
			{
				this.ai[0] = 0f;
			}
			else
			{
				if (!justHit)
				{
					return;
				}
				if (knockBackResist == 0f)
				{
					this.ai[1] += 1f;
					if (this.ai[1] > 5f)
					{
						this.ai[0] = 0f;
					}
				}
				else
				{
					this.ai[0] = 0f;
				}
			}
		}
		else if (aiStyle == 56)
		{
			TargetClosest();
			Vector2 vector12 = default(Vector2);
			((Vector2)(ref vector12))._002Ector(base.Center.X, base.Center.Y);
			float num1465 = Main.player[target].Center.X - vector12.X;
			float num1466 = Main.player[target].Center.Y - vector12.Y;
			float num1467 = (float)Math.Sqrt(num1465 * num1465 + num1466 * num1466);
			float num1468 = 12f;
			num1467 = num1468 / num1467;
			num1465 *= num1467;
			num1466 *= num1467;
			velocity.X = (velocity.X * 100f + num1465) / 101f;
			velocity.Y = (velocity.Y * 100f + num1466) / 101f;
			rotation = (float)Math.Atan2(num1466, num1465) - 1.57f;
			position += netOffset;
			Vector2 val64 = position;
			int num1706 = width;
			int num1707 = height;
			newColor = default(Color);
			int num1469 = Dust.NewDust(val64, num1706, num1707, 180, 0f, 0f, 0, newColor);
			Dust dust56 = Main.dust[num1469];
			Dust dust87 = dust56;
			dust87.velocity *= 0.1f;
			Main.dust[num1469].scale = 1.3f;
			Main.dust[num1469].noGravity = true;
			position -= netOffset;
		}
		else if (aiStyle == 57)
		{
			float num1470 = 2f;
			noGravity = true;
			noTileCollide = true;
			if (!Main.dayTime)
			{
				TargetClosest();
			}
			bool flag52 = false;
			if ((double)life < (double)lifeMax * 0.75)
			{
				num1470 = 3f;
			}
			if ((double)life < (double)lifeMax * 0.5)
			{
				num1470 = 4f;
			}
			if (type == 344)
			{
				Lighting.AddLight(base.Bottom + new Vector2(0f, -30f), 0.3f, 0.16f, 0.125f);
			}
			if (type == 325)
			{
				Lighting.AddLight(base.Bottom + new Vector2(0f, -30f), 0.3f, 0.125f, 0.06f);
			}
			if (Main.dayTime)
			{
				EncourageDespawn(10);
				num1470 = 8f;
			}
			else if (this.ai[0] == 0f)
			{
				this.ai[1] += 1f;
				if ((double)life < (double)lifeMax * 0.5)
				{
					this.ai[1] += 1f;
				}
				if ((double)life < (double)lifeMax * 0.25)
				{
					this.ai[1] += 1f;
				}
				if (this.ai[1] >= 300f && Main.netMode != 1)
				{
					this.ai[1] = 0f;
					if ((double)life < (double)lifeMax * 0.25 && type != 344)
					{
						this.ai[0] = Main.rand.Next(3, 5);
					}
					else
					{
						this.ai[0] = Main.rand.Next(1, 3);
					}
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 1f)
			{
				if (type == 344)
				{
					if (Main.rand.Next(5) == 0)
					{
						int num1471 = Dust.NewDust(position + Main.rand.NextVector2Square(0f, 1f) * base.Size - new Vector2(1f, 2f), 10, 14, 245, 0f, 0f, 254, Color.Transparent, 0.25f);
						Dust dust57 = Main.dust[num1471];
						Dust dust87 = dust57;
						dust87.velocity *= 0.2f;
					}
					flag52 = true;
					this.ai[1] += 1f;
					if (this.ai[1] % 5f == 0f)
					{
						Vector2 vector14 = default(Vector2);
						((Vector2)(ref vector14))._002Ector(position.X + 20f + (float)Main.rand.Next(width - 40), position.Y + 20f + (float)Main.rand.Next(height - 40));
						float num1472 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector14.X;
						float num1474 = Main.player[target].position.Y - vector14.Y;
						num1472 += (float)Main.rand.Next(-50, 51);
						num1474 += (float)Main.rand.Next(-50, 51);
						num1474 -= Math.Abs(num1472) * ((float)Main.rand.Next(0, 21) * 0.01f);
						float num1475 = (float)Math.Sqrt(num1472 * num1472 + num1474 * num1474);
						float num1476 = 12.5f;
						num1475 = num1476 / num1475;
						num1472 *= num1475;
						num1474 *= num1475;
						num1472 *= 1f + (float)Main.rand.Next(-20, 21) * 0.02f;
						num1474 *= 1f + (float)Main.rand.Next(-20, 21) * 0.02f;
						int num1477 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector14.X, vector14.Y, num1472, num1474, 345, 43, 0f, Main.myPlayer, Main.rand.Next(0, 31));
					}
					if (this.ai[1] >= 180f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
					}
				}
				else
				{
					flag52 = true;
					this.ai[1] += 1f;
					if (this.ai[1] % 15f == 0f)
					{
						Vector2 vector15 = default(Vector2);
						((Vector2)(ref vector15))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f + 30f);
						float num1478 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector15.X;
						float num1479 = Main.player[target].position.Y - vector15.Y;
						float num1480 = (float)Math.Sqrt(num1478 * num1478 + num1479 * num1479);
						float num1481 = 10f;
						num1480 = num1481 / num1480;
						num1478 *= num1480;
						num1479 *= num1480;
						num1478 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
						num1479 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
						int num1482 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector15.X, vector15.Y, num1478, num1479, 325, 50, 0f, Main.myPlayer);
					}
					if (this.ai[1] >= 120f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
					}
				}
			}
			else if (this.ai[0] == 2f)
			{
				if (type == 344)
				{
					flag52 = true;
					this.ai[1] += 1f;
					if (this.ai[1] > 60f && this.ai[1] < 240f && this.ai[1] % 15f == 0f)
					{
						float num1483 = 4.5f;
						Vector2 vector16 = default(Vector2);
						((Vector2)(ref vector16))._002Ector(position.X + 20f + (float)Main.rand.Next(width - 40), position.Y + 60f + (float)Main.rand.Next(height - 80));
						float num1485 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector16.X;
						float num1486 = Main.player[target].position.Y - vector16.Y;
						num1486 -= Math.Abs(num1485) * 0.3f;
						num1483 += Math.Abs(num1485) * 0.004f;
						num1485 += (float)Main.rand.Next(-50, 51);
						num1486 -= (float)Main.rand.Next(50, 201);
						float num1487 = (float)Math.Sqrt(num1485 * num1485 + num1486 * num1486);
						num1487 = num1483 / num1487;
						num1485 *= num1487;
						num1486 *= num1487;
						num1485 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
						num1486 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
						int num1488 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector16.X, vector16.Y, num1485, num1486, 346, 57, 0f, Main.myPlayer, 0f, Main.rand.Next(2));
					}
					if (this.ai[1] >= 300f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
					}
				}
				else
				{
					flag52 = true;
					this.ai[1] += 1f;
					if (this.ai[1] > 60f && this.ai[1] < 240f && this.ai[1] % 8f == 0f)
					{
						float num1489 = 10f;
						Vector2 vector17 = default(Vector2);
						((Vector2)(ref vector17))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f + 30f);
						float num1490 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector17.X;
						float num1491 = Main.player[target].position.Y - vector17.Y;
						num1491 -= Math.Abs(num1490) * 0.3f;
						num1489 += Math.Abs(num1490) * 0.004f;
						if (num1489 > 14f)
						{
							num1489 = 14f;
						}
						num1490 += (float)Main.rand.Next(-50, 51);
						num1491 -= (float)Main.rand.Next(50, 201);
						float num1492 = (float)Math.Sqrt(num1490 * num1490 + num1491 * num1491);
						num1492 = num1489 / num1492;
						num1490 *= num1492;
						num1491 *= num1492;
						num1490 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
						num1491 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
						int num1493 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector17.X, vector17.Y, num1490, num1491, Main.rand.Next(326, 329), 40, 0f, Main.myPlayer);
					}
					if (this.ai[1] >= 300f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
					}
				}
			}
			else if (this.ai[0] == 3f)
			{
				num1470 = 4f;
				this.ai[1] += 1f;
				if (this.ai[1] % 30f == 0f)
				{
					Vector2 vector18 = default(Vector2);
					((Vector2)(ref vector18))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f + 30f);
					float num1494 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector18.X;
					float num1497 = Main.player[target].position.Y - vector18.Y;
					float num1498 = (float)Math.Sqrt(num1494 * num1494 + num1497 * num1497);
					float num1499 = 16f;
					num1498 = num1499 / num1498;
					num1494 *= num1498;
					num1497 *= num1498;
					num1494 *= 1f + (float)Main.rand.Next(-20, 21) * 0.001f;
					num1497 *= 1f + (float)Main.rand.Next(-20, 21) * 0.001f;
					int num1500 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector18.X, vector18.Y, num1494, num1497, 325, 75, 0f, Main.myPlayer);
				}
				if (this.ai[1] >= 120f)
				{
					this.ai[1] = 0f;
					this.ai[0] = 0f;
				}
			}
			else if (this.ai[0] == 4f)
			{
				num1470 = 4f;
				this.ai[1] += 1f;
				if (this.ai[1] % 10f == 0f)
				{
					float num1501 = 12f;
					Vector2 vector19 = default(Vector2);
					((Vector2)(ref vector19))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f + 30f);
					float num1502 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector19.X;
					float num1503 = Main.player[target].position.Y - vector19.Y;
					num1503 -= Math.Abs(num1502) * 0.2f;
					num1501 += Math.Abs(num1502) * 0.002f;
					if (num1501 > 16f)
					{
						num1501 = 16f;
					}
					num1502 += (float)Main.rand.Next(-50, 51);
					num1503 -= (float)Main.rand.Next(50, 201);
					float num1504 = (float)Math.Sqrt(num1502 * num1502 + num1503 * num1503);
					num1504 = num1501 / num1504;
					num1502 *= num1504;
					num1503 *= num1504;
					num1502 *= 1f + (float)Main.rand.Next(-30, 31) * 0.005f;
					num1503 *= 1f + (float)Main.rand.Next(-30, 31) * 0.005f;
					int num1505 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector19.X, vector19.Y, num1502, num1503, Main.rand.Next(326, 329), 50, 0f, Main.myPlayer);
				}
				if (this.ai[1] >= 240f)
				{
					this.ai[1] = 0f;
					this.ai[0] = 0f;
				}
			}
			if (Math.Abs(base.Center.X - Main.player[target].Center.X) < 50f)
			{
				flag52 = true;
			}
			if (flag52)
			{
				velocity.X *= 0.9f;
				if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
				{
					velocity.X = 0f;
				}
			}
			else
			{
				if (direction > 0)
				{
					velocity.X = (velocity.X * 20f + num1470) / 21f;
				}
				if (direction < 0)
				{
					velocity.X = (velocity.X * 20f - num1470) / 21f;
				}
			}
			int num1506 = 80;
			int num1508 = 20;
			Vector2 vector20 = default(Vector2);
			((Vector2)(ref vector20))._002Ector(base.Center.X - (float)(num1506 / 2), position.Y + (float)height - (float)num1508);
			bool flag53 = false;
			if (position.X < Main.player[target].position.X && position.X + (float)width > Main.player[target].position.X + (float)Main.player[target].width && position.Y + (float)height < Main.player[target].position.Y + (float)Main.player[target].height - 16f)
			{
				flag53 = true;
			}
			if (flag53)
			{
				velocity.Y += 0.5f;
			}
			else if (Collision.SolidCollision(vector20, num1506, num1508))
			{
				if (velocity.Y > 0f)
				{
					velocity.Y = 0f;
				}
				if ((double)velocity.Y > -0.2)
				{
					velocity.Y -= 0.025f;
				}
				else
				{
					velocity.Y -= 0.2f;
				}
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
			}
			else
			{
				if (velocity.Y < 0f)
				{
					velocity.Y = 0f;
				}
				if ((double)velocity.Y < 0.1)
				{
					velocity.Y += 0.025f;
				}
				else
				{
					velocity.Y += 0.5f;
				}
			}
			if (velocity.Y > 10f)
			{
				velocity.Y = 10f;
			}
		}
		else if (aiStyle == 58)
		{
			localAI[0] += 1f;
			if (localAI[0] > 6f)
			{
				localAI[0] = 0f;
				localAI[1] += 1f;
				if (localAI[1] > 4f)
				{
					localAI[1] = 0f;
				}
			}
			if (type == 327)
			{
				Lighting.AddLight(base.Center, 0.4f, 0.4f, 0.2f);
			}
			if (Main.netMode != 1)
			{
				localAI[2] += 1f;
				if (localAI[2] > 300f)
				{
					this.ai[3] = Main.rand.Next(3);
					localAI[2] = 0f;
				}
				else if (this.ai[3] == 0f && localAI[2] % 30f == 0f && localAI[2] > 30f)
				{
					float num1509 = 5f;
					Vector2 vector21 = default(Vector2);
					((Vector2)(ref vector21))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f + 30f);
					if (!WorldGen.SolidTile((int)vector21.X / 16, (int)vector21.Y / 16))
					{
						float num1510 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector21.X;
						float num1511 = Main.player[target].position.Y - vector21.Y;
						num1510 += (float)Main.rand.Next(-50, 51);
						num1511 += (float)Main.rand.Next(50, 201);
						num1511 *= 0.2f;
						float num1512 = (float)Math.Sqrt(num1510 * num1510 + num1511 * num1511);
						num1512 = num1509 / num1512;
						num1510 *= num1512;
						num1511 *= num1512;
						num1510 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
						num1511 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
						int num1513 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector21.X, vector21.Y, num1510, num1511, Main.rand.Next(326, 329), 40, 0f, Main.myPlayer);
					}
				}
			}
			if (this.ai[0] == 0f && Main.netMode != 1)
			{
				TargetClosest();
				this.ai[0] = 1f;
				int num1514 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)position.Y + height / 2, 328, whoAmI);
				Main.npc[num1514].ai[0] = -1f;
				Main.npc[num1514].ai[1] = whoAmI;
				Main.npc[num1514].target = target;
				Main.npc[num1514].netUpdate = true;
				num1514 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)position.Y + height / 2, 328, whoAmI);
				Main.npc[num1514].ai[0] = 1f;
				Main.npc[num1514].ai[1] = whoAmI;
				Main.npc[num1514].ai[3] = 150f;
				Main.npc[num1514].target = target;
				Main.npc[num1514].netUpdate = true;
			}
			if (Main.player[target].dead || Math.Abs(position.X - Main.player[target].position.X) > 2000f || Math.Abs(position.Y - Main.player[target].position.Y) > 2000f)
			{
				TargetClosest();
				if (Main.player[target].dead || Math.Abs(position.X - Main.player[target].position.X) > 2000f || Math.Abs(position.Y - Main.player[target].position.Y) > 2000f)
				{
					this.ai[1] = 2f;
				}
			}
			if (Main.dayTime)
			{
				velocity.Y += 0.3f;
				velocity.X *= 0.9f;
			}
			else if (this.ai[1] == 0f)
			{
				this.ai[2] += 1f;
				if (this.ai[2] >= 300f)
				{
					if (this.ai[3] != 1f)
					{
						this.ai[1] = 0f;
						this.ai[2] = 0f;
					}
					else
					{
						this.ai[2] = 0f;
						this.ai[1] = 1f;
						TargetClosest();
						netUpdate = true;
					}
				}
				Vector2 vector22 = default(Vector2);
				((Vector2)(ref vector22))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1515 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector22.X;
				float num1516 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 200f - vector22.Y;
				float num1517 = (float)Math.Sqrt(num1515 * num1515 + num1516 * num1516);
				float num1519 = 6f;
				if (this.ai[3] == 1f)
				{
					if (num1517 > 900f)
					{
						num1519 = 12f;
					}
					else if (num1517 > 600f)
					{
						num1519 = 10f;
					}
					else if (num1517 > 300f)
					{
						num1519 = 8f;
					}
				}
				if (num1517 > 50f)
				{
					num1517 = num1519 / num1517;
					velocity.X = (velocity.X * 14f + num1515 * num1517) / 15f;
					velocity.Y = (velocity.Y * 14f + num1516 * num1517) / 15f;
				}
			}
			else if (this.ai[1] == 1f)
			{
				this.ai[2] += 1f;
				if (this.ai[2] >= 600f || this.ai[3] != 1f)
				{
					this.ai[2] = 0f;
					this.ai[1] = 0f;
				}
				Vector2 vector23 = default(Vector2);
				((Vector2)(ref vector23))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1520 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector23.X;
				float num1521 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector23.Y;
				float num1522 = (float)Math.Sqrt(num1520 * num1520 + num1521 * num1521);
				num1522 = 16f / num1522;
				velocity.X = (velocity.X * 49f + num1520 * num1522) / 50f;
				velocity.Y = (velocity.Y * 49f + num1521 * num1522) / 50f;
			}
			else if (this.ai[1] == 2f)
			{
				this.ai[1] = 3f;
				velocity.Y += 0.1f;
				if (velocity.Y < 0f)
				{
					velocity.Y *= 0.95f;
				}
				velocity.X *= 0.95f;
				EncourageDespawn(500);
			}
			rotation = velocity.X * -0.02f;
		}
		else if (aiStyle == 59)
		{
			spriteDirection = -(int)this.ai[0];
			if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 58)
			{
				this.ai[2] += 10f;
				if (this.ai[2] > 50f || Main.netMode != 2)
				{
					life = -1;
					HitEffect();
					active = false;
				}
			}
			if (Main.netMode != 1 && Main.npc[(int)this.ai[1]].ai[3] == 2f)
			{
				localAI[1] += 1f;
				if (localAI[1] > 90f)
				{
					localAI[1] = 0f;
					float num1523 = 0.01f;
					Vector2 vector25 = default(Vector2);
					((Vector2)(ref vector25))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f + 30f);
					float num1524 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector25.X;
					float num1525 = Main.player[target].position.Y - vector25.Y;
					float num1526 = (float)Math.Sqrt(num1524 * num1524 + num1525 * num1525);
					num1526 = num1523 / num1526;
					num1524 *= num1526;
					num1525 *= num1526;
					int num1527 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, num1524, num1525, 329, 60, 0f, Main.myPlayer, rotation, spriteDirection);
				}
			}
			if (Main.dayTime)
			{
				velocity.Y += 0.3f;
				velocity.X *= 0.9f;
			}
			else if (this.ai[2] == 0f || this.ai[2] == 3f)
			{
				if (Main.npc[(int)this.ai[1]].ai[1] == 3f)
				{
					EncourageDespawn(10);
				}
				this.ai[3] += 1f;
				if (this.ai[3] >= 180f)
				{
					this.ai[2] += 1f;
					this.ai[3] = 0f;
					netUpdate = true;
				}
				Vector2 vector26 = default(Vector2);
				((Vector2)(ref vector26))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1528 = (Main.player[target].Center.X + Main.npc[(int)this.ai[1]].Center.X) / 2f;
				float num1530 = (Main.player[target].Center.Y + Main.npc[(int)this.ai[1]].Center.Y) / 2f;
				num1528 += -170f * this.ai[0] - vector26.X;
				num1530 += 90f - vector26.Y;
				float num1531 = Math.Abs(Main.player[target].Center.X - Main.npc[(int)this.ai[1]].Center.X) + Math.Abs(Main.player[target].Center.Y - Main.npc[(int)this.ai[1]].Center.Y);
				if (num1531 > 700f)
				{
					num1528 = Main.npc[(int)this.ai[1]].Center.X - 170f * this.ai[0] - vector26.X;
					num1530 = Main.npc[(int)this.ai[1]].Center.Y + 90f - vector26.Y;
				}
				float num1532 = (float)Math.Sqrt(num1528 * num1528 + num1530 * num1530);
				float num1533 = 6f;
				if (num1532 > 1000f)
				{
					num1533 = 21f;
				}
				else if (num1532 > 800f)
				{
					num1533 = 18f;
				}
				else if (num1532 > 600f)
				{
					num1533 = 15f;
				}
				else if (num1532 > 400f)
				{
					num1533 = 12f;
				}
				else if (num1532 > 200f)
				{
					num1533 = 9f;
				}
				if (this.ai[0] < 0f && base.Center.X > Main.npc[(int)this.ai[1]].Center.X)
				{
					num1528 -= 4f;
				}
				if (this.ai[0] > 0f && base.Center.X < Main.npc[(int)this.ai[1]].Center.X)
				{
					num1528 += 4f;
				}
				num1532 = num1533 / num1532;
				velocity.X = (velocity.X * 14f + num1528 * num1532) / 15f;
				velocity.Y = (velocity.Y * 14f + num1530 * num1532) / 15f;
				num1532 = (float)Math.Sqrt(num1528 * num1528 + num1530 * num1530);
				if (num1532 > 20f)
				{
					rotation = (float)Math.Atan2(num1530, num1528) + 1.57f;
				}
			}
			else if (this.ai[2] == 1f)
			{
				Vector2 vector27 = default(Vector2);
				((Vector2)(ref vector27))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1534 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector27.X;
				float num1535 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector27.Y;
				float num1536 = (float)Math.Sqrt(num1534 * num1534 + num1535 * num1535);
				rotation = (float)Math.Atan2(num1535, num1534) + 1.57f;
				velocity.X *= 0.95f;
				velocity.Y -= 0.3f;
				if (velocity.Y < -14f)
				{
					velocity.Y = -14f;
				}
				if (position.Y < Main.npc[(int)this.ai[1]].position.Y - 200f)
				{
					TargetClosest();
					this.ai[2] = 2f;
					((Vector2)(ref vector27))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					num1534 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector27.X;
					num1535 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector27.Y;
					num1536 = (float)Math.Sqrt(num1534 * num1534 + num1535 * num1535);
					num1536 = 18f / num1536;
					velocity.X = num1534 * num1536;
					velocity.Y = num1535 * num1536;
					netUpdate = true;
				}
			}
			else if (this.ai[2] == 2f)
			{
				float num1537 = Math.Abs(base.Center.X - Main.npc[(int)this.ai[1]].Center.X) + Math.Abs(base.Center.Y - Main.npc[(int)this.ai[1]].Center.Y);
				if (position.Y > Main.player[target].position.Y || velocity.Y < 0f || num1537 > 800f)
				{
					this.ai[2] = 3f;
				}
			}
			else if (this.ai[2] == 4f)
			{
				Vector2 vector28 = default(Vector2);
				((Vector2)(ref vector28))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num1538 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector28.X;
				float num1539 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector28.Y;
				float num1541 = (float)Math.Sqrt(num1538 * num1538 + num1539 * num1539);
				rotation = (float)Math.Atan2(num1539, num1538) + 1.57f;
				velocity.Y *= 0.95f;
				velocity.X += 0.3f * (0f - this.ai[0]);
				if (velocity.X < -14f)
				{
					velocity.X = -14f;
				}
				if (velocity.X > 14f)
				{
					velocity.X = 14f;
				}
				if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 500f || position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 500f)
				{
					TargetClosest();
					this.ai[2] = 5f;
					((Vector2)(ref vector28))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					num1538 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector28.X;
					num1539 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector28.Y;
					num1541 = (float)Math.Sqrt(num1538 * num1538 + num1539 * num1539);
					num1541 = 17f / num1541;
					velocity.X = num1538 * num1541;
					velocity.Y = num1539 * num1541;
					netUpdate = true;
				}
			}
			else if (this.ai[2] == 5f)
			{
				float num1542 = Math.Abs(base.Center.X - Main.npc[(int)this.ai[1]].Center.X) + Math.Abs(base.Center.Y - Main.npc[(int)this.ai[1]].Center.Y);
				if ((velocity.X > 0f && position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2)) || (velocity.X < 0f && position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2)) || num1542 > 800f)
				{
					this.ai[2] = 0f;
				}
			}
		}
		else if (aiStyle == 60)
		{
			if (Main.dayTime)
			{
				if (velocity.X > 0f)
				{
					velocity.X += 0.25f;
				}
				else
				{
					velocity.X -= 0.25f;
				}
				velocity.Y -= 0.1f;
				rotation = velocity.X * 0.05f;
			}
			else if (this.ai[0] == 0f)
			{
				if (this.ai[2] == 0f)
				{
					TargetClosest();
					if (base.Center.X < Main.player[target].Center.X)
					{
						this.ai[2] = 1f;
					}
					else
					{
						this.ai[2] = -1f;
					}
				}
				TargetClosest();
				int num1543 = 800;
				float num1544 = Math.Abs(base.Center.X - Main.player[target].Center.X);
				if (base.Center.X < Main.player[target].Center.X && this.ai[2] < 0f && num1544 > (float)num1543)
				{
					this.ai[2] = 0f;
				}
				if (base.Center.X > Main.player[target].Center.X && this.ai[2] > 0f && num1544 > (float)num1543)
				{
					this.ai[2] = 0f;
				}
				float num1545 = 0.45f;
				float num1546 = 7f;
				if ((double)life < (double)lifeMax * 0.75)
				{
					num1545 = 0.55f;
					num1546 = 8f;
				}
				if ((double)life < (double)lifeMax * 0.5)
				{
					num1545 = 0.7f;
					num1546 = 10f;
				}
				if ((double)life < (double)lifeMax * 0.25)
				{
					num1545 = 0.8f;
					num1546 = 11f;
				}
				velocity.X += this.ai[2] * num1545;
				if (velocity.X > num1546)
				{
					velocity.X = num1546;
				}
				if (velocity.X < 0f - num1546)
				{
					velocity.X = 0f - num1546;
				}
				float num1547 = Main.player[target].position.Y - (position.Y + (float)height);
				if (num1547 < 150f)
				{
					velocity.Y -= 0.2f;
				}
				if (num1547 > 200f)
				{
					velocity.Y += 0.2f;
				}
				if (velocity.Y > 8f)
				{
					velocity.Y = 8f;
				}
				if (velocity.Y < -8f)
				{
					velocity.Y = -8f;
				}
				rotation = velocity.X * 0.05f;
				if ((num1544 < 500f || this.ai[3] < 0f) && position.Y < Main.player[target].position.Y)
				{
					this.ai[3] += 1f;
					int num1548 = 13;
					if ((double)life < (double)lifeMax * 0.75)
					{
						num1548 = 12;
					}
					if ((double)life < (double)lifeMax * 0.5)
					{
						num1548 = 11;
					}
					if ((double)life < (double)lifeMax * 0.25)
					{
						num1548 = 10;
					}
					num1548++;
					if (this.ai[3] > (float)num1548)
					{
						this.ai[3] = -num1548;
					}
					if (this.ai[3] == 0f && Main.netMode != 1)
					{
						Vector2 vector29 = default(Vector2);
						((Vector2)(ref vector29))._002Ector(base.Center.X, base.Center.Y);
						vector29.X += velocity.X * 7f;
						float num1549 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector29.X;
						float num1550 = Main.player[target].Center.Y - vector29.Y;
						float num1552 = (float)Math.Sqrt(num1549 * num1549 + num1550 * num1550);
						float num1553 = 6f;
						if ((double)life < (double)lifeMax * 0.75)
						{
							num1553 = 7f;
						}
						if ((double)life < (double)lifeMax * 0.5)
						{
							num1553 = 8f;
						}
						if ((double)life < (double)lifeMax * 0.25)
						{
							num1553 = 9f;
						}
						num1552 = num1553 / num1552;
						num1549 *= num1552;
						num1550 *= num1552;
						int num1554 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector29.X, vector29.Y, num1549, num1550, 348, 42, 0f, Main.myPlayer);
					}
				}
				else if (this.ai[3] < 0f)
				{
					this.ai[3] += 1f;
				}
				if (Main.netMode != 1)
				{
					this.ai[1] += Main.rand.Next(1, 4);
					if (this.ai[1] > 800f && num1544 < 600f)
					{
						this.ai[0] = -1f;
					}
				}
			}
			else if (this.ai[0] == 1f)
			{
				TargetClosest();
				float num1555 = 0.15f;
				float num1556 = 7f;
				if ((double)life < (double)lifeMax * 0.75)
				{
					num1555 = 0.17f;
					num1556 = 8f;
				}
				if ((double)life < (double)lifeMax * 0.5)
				{
					num1555 = 0.2f;
					num1556 = 9f;
				}
				if ((double)life < (double)lifeMax * 0.25)
				{
					num1555 = 0.25f;
					num1556 = 10f;
				}
				num1555 -= 0.05f;
				num1556 -= 1f;
				if (base.Center.X < Main.player[target].Center.X)
				{
					velocity.X += num1555;
					if (velocity.X < 0f)
					{
						velocity.X *= 0.98f;
					}
				}
				if (base.Center.X > Main.player[target].Center.X)
				{
					velocity.X -= num1555;
					if (velocity.X > 0f)
					{
						velocity.X *= 0.98f;
					}
				}
				if (velocity.X > num1556 || velocity.X < 0f - num1556)
				{
					velocity.X *= 0.95f;
				}
				float num1557 = Main.player[target].position.Y - (position.Y + (float)height);
				if (num1557 < 180f)
				{
					velocity.Y -= 0.1f;
				}
				if (num1557 > 200f)
				{
					velocity.Y += 0.1f;
				}
				if (velocity.Y > 6f)
				{
					velocity.Y = 6f;
				}
				if (velocity.Y < -6f)
				{
					velocity.Y = -6f;
				}
				rotation = velocity.X * 0.01f;
				if (Main.netMode != 1)
				{
					this.ai[3] += 1f;
					int num1558 = 15;
					if ((double)life < (double)lifeMax * 0.75)
					{
						num1558 = 14;
					}
					if ((double)life < (double)lifeMax * 0.5)
					{
						num1558 = 12;
					}
					if ((double)life < (double)lifeMax * 0.25)
					{
						num1558 = 10;
					}
					if ((double)life < (double)lifeMax * 0.1)
					{
						num1558 = 8;
					}
					num1558 += 3;
					if (this.ai[3] >= (float)num1558)
					{
						this.ai[3] = 0f;
						Vector2 vector30 = default(Vector2);
						((Vector2)(ref vector30))._002Ector(base.Center.X, position.Y + (float)height - 14f);
						int i2 = (int)(vector30.X / 16f);
						int j2 = (int)(vector30.Y / 16f);
						if (!WorldGen.SolidTile(i2, j2))
						{
							float num1559 = velocity.Y;
							if (num1559 < 0f)
							{
								num1559 = 0f;
							}
							num1559 += 3f;
							float speedX2 = velocity.X * 0.25f;
							int num1560 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector30.X, vector30.Y, speedX2, num1559, 349, 37, 0f, Main.myPlayer, Main.rand.Next(5));
						}
					}
				}
				if (Main.netMode != 1)
				{
					this.ai[1] += Main.rand.Next(1, 4);
					if (this.ai[1] > 600f)
					{
						this.ai[0] = -1f;
					}
				}
			}
			else if (this.ai[0] == 2f)
			{
				TargetClosest();
				Vector2 vector31 = default(Vector2);
				((Vector2)(ref vector31))._002Ector(base.Center.X, base.Center.Y - 20f);
				float num1561 = Main.rand.Next(-1000, 1001);
				float num1563 = Main.rand.Next(-1000, 1001);
				float num1564 = (float)Math.Sqrt(num1561 * num1561 + num1563 * num1563);
				float num1565 = 15f;
				velocity *= 0.95f;
				num1564 = num1565 / num1564;
				num1561 *= num1564;
				num1563 *= num1564;
				rotation += 0.2f;
				vector31.X += num1561 * 4f;
				vector31.Y += num1563 * 4f;
				this.ai[3] += 1f;
				int num1566 = 7;
				if ((double)life < (double)lifeMax * 0.75)
				{
					num1566--;
				}
				if ((double)life < (double)lifeMax * 0.5)
				{
					num1566 -= 2;
				}
				if ((double)life < (double)lifeMax * 0.25)
				{
					num1566 -= 3;
				}
				if ((double)life < (double)lifeMax * 0.1)
				{
					num1566 -= 4;
				}
				if (this.ai[3] > (float)num1566)
				{
					this.ai[3] = 0f;
					int num1567 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector31.X, vector31.Y, num1561, num1563, 349, 35, 0f, Main.myPlayer);
				}
				if (Main.netMode != 1)
				{
					this.ai[1] += Main.rand.Next(1, 4);
					if (this.ai[1] > 500f)
					{
						this.ai[0] = -1f;
					}
				}
			}
			if (this.ai[0] == -1f)
			{
				int num1568 = Main.rand.Next(3);
				TargetClosest();
				if (Math.Abs(base.Center.X - Main.player[target].Center.X) > 1000f)
				{
					num1568 = 0;
				}
				this.ai[0] = num1568;
				this.ai[1] = 0f;
				this.ai[2] = 0f;
				this.ai[3] = 0f;
			}
		}
		else if (aiStyle == 61)
		{
			float num1569 = 2f;
			noGravity = true;
			noTileCollide = true;
			if (!Main.dayTime)
			{
				TargetClosest();
			}
			bool flag54 = false;
			if ((double)life < (double)lifeMax * 0.75)
			{
				num1569 = 3f;
			}
			if ((double)life < (double)lifeMax * 0.5)
			{
				num1569 = 4f;
			}
			if ((double)life < (double)lifeMax * 0.25)
			{
				num1569 = 5f;
			}
			Vector2 center34 = base.Center;
			Point point12 = center34.ToTileCoordinates();
			if (WorldGen.InWorld(point12.X, point12.Y) && !WorldGen.SolidTile(point12.X, point12.Y))
			{
				Lighting.AddLight(center34, 0.3f, 0.26f, 0.05f);
			}
			if (Main.dayTime)
			{
				EncourageDespawn(10);
				num1569 = 8f;
				if (velocity.X == 0f)
				{
					velocity.X = 0.1f;
				}
			}
			else if (this.ai[0] == 0f)
			{
				this.ai[1] += 1f;
				if (this.ai[1] >= 300f && Main.netMode != 1)
				{
					TargetClosest();
					this.ai[1] = 0f;
					this.ai[0] = 1f;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 1f)
			{
				this.ai[1] += 1f;
				flag54 = true;
				int num1570 = 16;
				if ((double)life < (double)lifeMax * 0.25)
				{
					num1570 = 8;
				}
				else if ((double)life < (double)lifeMax * 0.5)
				{
					num1570 = 11;
				}
				else if ((double)life < (double)lifeMax * 0.75)
				{
					num1570 = 14;
				}
				if (this.ai[1] % (float)num1570 == 0f)
				{
					Vector2 vector32 = default(Vector2);
					((Vector2)(ref vector32))._002Ector(base.Center.X + (float)(direction * 50), base.Center.Y + (float)Main.rand.Next(15, 36));
					float num1571 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector32.X;
					float num1572 = Main.player[target].Center.Y - vector32.Y;
					num1571 += (float)Main.rand.Next(-40, 41);
					num1572 += (float)Main.rand.Next(-40, 41);
					float num1574 = (float)Math.Sqrt(num1571 * num1571 + num1572 * num1572);
					float num1575 = 15f;
					num1574 = num1575 / num1574;
					num1571 *= num1574;
					num1572 *= num1574;
					num1571 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
					num1572 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
					int num1576 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector32.X, vector32.Y, num1571, num1572, 180, 36, 0f, Main.myPlayer);
				}
				if (this.ai[1] > 240f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
				}
			}
			if (Main.netMode != 1)
			{
				int num1577 = 600;
				int num1578 = 1200;
				int num1579 = 2700;
				if ((double)life < (double)lifeMax * 0.25)
				{
					num1577 = (int)((double)num1577 * 0.5);
					num1578 = (int)((double)num1578 * 0.5);
					num1579 = (int)((double)num1579 * 0.5);
				}
				else if ((double)life < (double)lifeMax * 0.5)
				{
					num1577 = (int)((double)num1577 * 0.75);
					num1578 = (int)((double)num1578 * 0.75);
					num1579 = (int)((double)num1579 * 0.75);
				}
				else if ((double)life < (double)lifeMax * 0.75)
				{
					num1577 = (int)((double)num1577 * 0.9);
					num1578 = (int)((double)num1578 * 0.9);
					num1579 = (int)((double)num1579 * 0.9);
				}
				if (Main.rand.Next(num1577) == 0)
				{
					Vector2 vector33 = default(Vector2);
					((Vector2)(ref vector33))._002Ector(base.Center.X - (float)(direction * 24), base.Center.Y - 64f);
					float num1580 = Main.rand.Next(1, 100) * direction;
					float num1581 = 1f;
					float num1582 = (float)Math.Sqrt(num1580 * num1580 + num1581 * num1581);
					float num1583 = 1f;
					num1582 = num1583 / num1582;
					num1580 *= num1582;
					num1581 *= num1582;
					int num1585 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector33.X, vector33.Y, num1580, num1581, 352, 80, 0f, Main.myPlayer);
				}
				if (Main.rand.Next(num1578) == 0)
				{
					localAI[1] = 1f;
				}
				if (localAI[1] >= 1f)
				{
					localAI[1] += 1f;
					int num1586 = 12;
					if (localAI[1] % (float)num1586 == 0f)
					{
						Vector2 vector34 = default(Vector2);
						((Vector2)(ref vector34))._002Ector(base.Center.X - (float)(direction * 24), base.Center.Y - 64f);
						float num1587 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector34.X;
						float num1588 = Main.player[target].Center.Y - vector34.Y;
						num1587 += (float)Main.rand.Next(-50, 51);
						num1588 += (float)Main.rand.Next(-50, 51);
						float num1589 = (float)Math.Sqrt(num1587 * num1587 + num1588 * num1588);
						float num1590 = 12.5f;
						num1589 = num1590 / num1589;
						num1587 *= num1589;
						num1588 *= num1589;
						num1587 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
						num1588 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
						int num1591 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector34.X, vector34.Y, num1587, num1588, 350, 42, 0f, Main.myPlayer);
					}
					if (localAI[1] >= 100f)
					{
						localAI[1] = 0f;
					}
				}
				if (Main.rand.Next(num1579) == 0)
				{
					localAI[2] = 2f;
				}
				if (localAI[2] > 0f)
				{
					localAI[2] += 1f;
					int num1592 = 9;
					if (localAI[2] % (float)num1592 == 0f)
					{
						Vector2 vector36 = default(Vector2);
						((Vector2)(ref vector36))._002Ector(base.Center.X - (float)(direction * 24), base.Center.Y - 64f);
						float num1593 = Main.rand.Next(-100, 101);
						float num1594 = -300f;
						float num1596 = (float)Math.Sqrt(num1593 * num1593 + num1594 * num1594);
						float num1597 = 11f;
						num1596 = num1597 / num1596;
						num1593 *= num1596;
						num1594 *= num1596;
						num1593 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
						num1594 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
						int num1598 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector36.X, vector36.Y, num1593, num1594, 351, 50, 0f, Main.myPlayer);
					}
					if (localAI[2] >= 100f)
					{
						localAI[2] = 0f;
					}
				}
			}
			if (Math.Abs(base.Center.X - Main.player[target].Center.X) < 50f)
			{
				flag54 = true;
			}
			if (flag54)
			{
				velocity.X *= 0.9f;
				if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
				{
					velocity.X = 0f;
				}
			}
			else
			{
				if (direction > 0)
				{
					velocity.X = (velocity.X * 20f + num1569) / 21f;
				}
				if (direction < 0)
				{
					velocity.X = (velocity.X * 20f - num1569) / 21f;
				}
			}
			int num1599 = 80;
			int num1600 = 20;
			Vector2 vector37 = default(Vector2);
			((Vector2)(ref vector37))._002Ector(base.Center.X - (float)(num1599 / 2), position.Y + (float)height - (float)num1600);
			bool flag55 = false;
			if (position.X < Main.player[target].position.X && position.X + (float)width > Main.player[target].position.X + (float)Main.player[target].width && position.Y + (float)height < Main.player[target].position.Y + (float)Main.player[target].height - 16f)
			{
				flag55 = true;
			}
			if (flag55)
			{
				velocity.Y += 0.5f;
			}
			else if (Collision.SolidCollision(vector37, num1599, num1600))
			{
				if (velocity.Y > 0f)
				{
					velocity.Y = 0f;
				}
				if ((double)velocity.Y > -0.2)
				{
					velocity.Y -= 0.025f;
				}
				else
				{
					velocity.Y -= 0.2f;
				}
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
			}
			else
			{
				if (velocity.Y < 0f)
				{
					velocity.Y = 0f;
				}
				if ((double)velocity.Y < 0.1)
				{
					velocity.Y += 0.025f;
				}
				else
				{
					velocity.Y += 0.5f;
				}
			}
			if (velocity.Y > 10f)
			{
				velocity.Y = 10f;
			}
		}
		else if (aiStyle == 62)
		{
			TargetClosest();
			rotation = Math.Abs(velocity.X) * (float)direction * 0.1f;
			spriteDirection = direction;
			float num1601 = 7f;
			Vector2 vector38 = default(Vector2);
			((Vector2)(ref vector38))._002Ector(base.Center.X + (float)(direction * 20), base.Center.Y + 6f);
			float num1602 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector38.X;
			float num1603 = Main.player[target].position.Y - vector38.Y;
			float num1604 = (float)Math.Sqrt(num1602 * num1602 + num1603 * num1603);
			float num1605 = num1601 / num1604;
			num1602 *= num1605;
			num1603 *= num1605;
			bool flag56 = Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1);
			if (Main.dayTime)
			{
				int num4 = 60;
				velocity.X = (velocity.X * (float)(num4 - 1) - num1602) / (float)num4;
				velocity.Y = (velocity.Y * (float)(num4 - 1) - num1603) / (float)num4;
				EncourageDespawn(10);
				return;
			}
			if (num1604 > 600f || !flag56)
			{
				int num5 = 60;
				velocity.X = (velocity.X * (float)(num5 - 1) + num1602) / (float)num5;
				velocity.Y = (velocity.Y * (float)(num5 - 1) + num1603) / (float)num5;
				return;
			}
			velocity *= 0.98f;
			if (Math.Abs(velocity.X) < 1f && Math.Abs(velocity.Y) < 1f && Main.netMode != 1)
			{
				localAI[0] += 1f;
				if (localAI[0] >= 15f)
				{
					localAI[0] = 0f;
					num1602 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector38.X;
					num1603 = Main.player[target].Center.Y - vector38.Y;
					num1602 += (float)Main.rand.Next(-35, 36);
					num1603 += (float)Main.rand.Next(-35, 36);
					num1602 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
					num1603 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
					num1604 = (float)Math.Sqrt(num1602 * num1602 + num1603 * num1603);
					num1601 = 10f;
					num1605 = num1601 / num1604;
					num1602 *= num1605;
					num1603 *= num1605;
					num1602 *= 1f + (float)Main.rand.Next(-20, 21) * 0.0125f;
					num1603 *= 1f + (float)Main.rand.Next(-20, 21) * 0.0125f;
					int num6 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector38.X, vector38.Y, num1602, num1603, 180, 32, 0f, Main.myPlayer);
				}
			}
		}
		else if (aiStyle == 63)
		{
			TargetClosest();
			float num7 = 11f;
			Vector2 vector39 = default(Vector2);
			((Vector2)(ref vector39))._002Ector(base.Center.X + (float)(direction * 20), base.Center.Y + 6f);
			float num8 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector39.X;
			float num9 = Main.player[target].Center.Y - vector39.Y;
			float num10 = (float)Math.Sqrt(num8 * num8 + num9 * num9);
			float num11 = num7 / num10;
			num8 *= num11;
			num9 *= num11;
			if (Main.dayTime)
			{
				num8 = 0f - num8;
				num9 = 0f - num9;
			}
			this.ai[0] -= 1f;
			if (num10 < 200f || this.ai[0] > 0f)
			{
				if (num10 < 200f)
				{
					this.ai[0] = 20f;
				}
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				rotation += (float)direction * 0.3f;
				return;
			}
			velocity.X = (velocity.X * 50f + num8) / 51f;
			velocity.Y = (velocity.Y * 50f + num9) / 51f;
			if (num10 < 350f)
			{
				velocity.X = (velocity.X * 10f + num8) / 11f;
				velocity.Y = (velocity.Y * 10f + num9) / 11f;
			}
			if (num10 < 300f)
			{
				velocity.X = (velocity.X * 7f + num8) / 8f;
				velocity.Y = (velocity.Y * 7f + num9) / 8f;
			}
			rotation = velocity.X * 0.15f;
		}
		else if (aiStyle == 64)
		{
			float num12 = this.ai[0];
			float num13 = this.ai[1];
			if (Main.netMode != 1)
			{
				localAI[0] -= 1f;
				if (this.ai[3] == 0f)
				{
					this.ai[3] = (float)Main.rand.Next(75, 111) * 0.01f;
				}
				if (localAI[0] <= 0f)
				{
					TargetClosest();
					localAI[0] = Main.rand.Next(60, 180);
					float num15 = Math.Abs(base.Center.X - Main.player[target].Center.X);
					if (num15 > 700f && localAI[3] == 0f)
					{
						float num16 = (float)Main.rand.Next(50, 151) * 0.01f;
						if (num15 > 1000f)
						{
							num16 = (float)Main.rand.Next(150, 201) * 0.01f;
						}
						else if (num15 > 850f)
						{
							num16 = (float)Main.rand.Next(100, 151) * 0.01f;
						}
						int num17 = direction * Main.rand.Next(100, 251);
						int num18 = Main.rand.Next(-50, 51);
						if (position.Y > Main.player[target].position.Y - 100f)
						{
							num18 -= Main.rand.Next(100, 251);
						}
						float num19 = num16 / (float)Math.Sqrt(num17 * num17 + num18 * num18);
						num12 = (float)num17 * num19;
						num13 = (float)num18 * num19;
					}
					else
					{
						localAI[3] = 1f;
						float num20 = (float)Main.rand.Next(5, 151) * 0.01f;
						int num21 = Main.rand.Next(-100, 101);
						int num22 = Main.rand.Next(-100, 101);
						float num23 = num20 / (float)Math.Sqrt(num21 * num21 + num22 * num22);
						num12 = (float)num21 * num23;
						num13 = (float)num22 * num23;
					}
					netUpdate = true;
				}
			}
			scale = this.ai[3];
			if (type == 677)
			{
				bool flag58 = true;
				Point point13 = base.Center.ToTileCoordinates();
				int num24 = 40;
				if (point13.X < num24)
				{
					num12 += 0.5f;
					if (num12 > 3f)
					{
						num12 = 3f;
					}
					flag58 = false;
				}
				else if (point13.X > Main.maxTilesX - num24)
				{
					num12 -= 0.5f;
					if (num12 < -3f)
					{
						num12 = -3f;
					}
					flag58 = false;
				}
				if (point13.Y < num24)
				{
					num13 += 0.5f;
					if (num13 > 3f)
					{
						velocity.Y = 3f;
					}
					flag58 = false;
				}
				else if (point13.Y > Main.maxTilesY - num24)
				{
					num13 -= 0.5f;
					if (num13 < -3f)
					{
						num13 = -3f;
					}
					flag58 = false;
				}
				if (localAI[1] > 0f)
				{
					localAI[1]--;
				}
				else if (flag58)
				{
					localAI[1] = 15f;
					float num26 = 0f;
					Vector2 zero = Vector2.Zero;
					for (int num27 = 0; num27 < 200; num27++)
					{
						NPC nPC17 = Main.npc[num27];
						if (nPC17.active && nPC17.damage > 0 && !nPC17.friendly && nPC17.Hitbox.Distance(base.Center) <= 100f)
						{
							num26++;
							zero += DirectionFrom(nPC17.Center);
						}
					}
					for (int num28 = 0; num28 < 255; num28++)
					{
						Player player6 = Main.player[num28];
						if (player6.active && player6.Hitbox.Distance(base.Center) <= 150f)
						{
							num26++;
							zero += DirectionFrom(player6.Center);
						}
					}
					if (num26 > 0f)
					{
						float num29 = 2f;
						zero /= num26;
						zero *= num29;
						velocity += zero;
						if (((Vector2)(ref velocity)).Length() > 8f)
						{
							velocity = velocity.SafeNormalize(Vector2.Zero) * 8f;
						}
						Vector2 vector40 = base.Center + zero * 10f;
						localAI[0] = 10f;
						netUpdate = true;
					}
				}
			}
			else if (localAI[2] > 0f)
			{
				int i3 = (int)base.Center.X / 16;
				int j3 = (int)base.Center.Y / 16;
				if (localAI[2] > 3f)
				{
					if (type == 358)
					{
						Lighting.AddLight(i3, j3, 0.10124999f * scale, 0.21374999f * scale, 0.225f * scale);
					}
					else if (type == 654)
					{
						Lighting.AddLight(i3, j3, 0.225f * scale, 0.105000004f * scale, 0.060000002f * scale);
					}
					else
					{
						Lighting.AddLight(i3, j3, 0.109500006f * scale, 0.15f * scale, 0.0615f * scale);
					}
				}
				localAI[2] -= 1f;
			}
			else if (localAI[1] > 0f)
			{
				localAI[1] -= 1f;
			}
			else
			{
				localAI[1] = Main.rand.Next(30, 180);
				if (!Main.dayTime || (double)(position.Y / 16f) > Main.worldSurface + 10.0)
				{
					localAI[2] = Main.rand.Next(10, 30);
				}
			}
			int num30 = 80;
			velocity.X = (velocity.X * (float)(num30 - 1) + num12) / (float)num30;
			velocity.Y = (velocity.Y * (float)(num30 - 1) + num13) / (float)num30;
			if (velocity.Y > 0f)
			{
				int num31 = 4;
				int num32 = (int)base.Center.X / 16;
				int num33 = (int)base.Center.Y / 16;
				for (int num34 = num33; num34 < num33 + num31; num34++)
				{
					if (WorldGen.InWorld(num32, num34, 2) && Main.tile[num32, num34] != null && ((Main.tile[num32, num34].nactive() && Main.tileSolid[Main.tile[num32, num34].type]) || Main.tile[num32, num34].liquid > 0))
					{
						num13 *= -1f;
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.9f;
						}
					}
				}
			}
			if (velocity.Y < 0f)
			{
				int num35 = 30;
				bool flag59 = false;
				int num37 = (int)base.Center.X / 16;
				int num38 = (int)base.Center.Y / 16;
				for (int num39 = num38; num39 < num38 + num35; num39++)
				{
					if (WorldGen.InWorld(num37, num39, 2) && Main.tile[num37, num39] != null && Main.tile[num37, num39].nactive() && Main.tileSolid[Main.tile[num37, num39].type])
					{
						flag59 = true;
					}
				}
				if (!flag59)
				{
					num13 *= -1f;
					if (velocity.Y < 0f)
					{
						velocity.Y *= 0.9f;
					}
				}
			}
			if (collideX)
			{
				num12 = ((!(velocity.X < 0f)) ? (0f - Math.Abs(num12)) : Math.Abs(num12));
				velocity.X *= -0.2f;
			}
			if (type == 677)
			{
				rotation = velocity.X * 0.3f;
			}
			if (velocity.X < 0f)
			{
				direction = -1;
			}
			if (velocity.X > 0f)
			{
				direction = 1;
			}
			this.ai[0] = num12;
			this.ai[1] = num13;
		}
		else if (aiStyle == 65)
		{
			AI_065_Butterflies();
		}
		else if (aiStyle == 66)
		{
			if (type == 484)
			{
				float num40 = (float)Main.rand.Next(90, 111) * 0.01f;
				num40 *= (Main.essScale + 0.5f) / 2f;
				Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), 0.3f * num40, 0.1f * num40, 0.25f * num40);
			}
			if (velocity.Y == 0f)
			{
				if (this.ai[0] == 1f)
				{
					if (direction == 0)
					{
						TargetClosest();
					}
					if (collideX)
					{
						direction *= -1;
					}
					float num41 = 0.2f;
					if (type == 485)
					{
						num41 = 0.25f;
					}
					if (type == 486)
					{
						num41 = 0.325f;
					}
					if (type == 487)
					{
						num41 = 0.4f;
					}
					velocity.X = num41 * (float)direction;
					if (type == 374)
					{
						velocity.X *= 3f;
					}
				}
				else
				{
					velocity.X = 0f;
				}
				if (Main.netMode != 1)
				{
					localAI[1] -= 1f;
					if (localAI[1] <= 0f)
					{
						if (this.ai[0] == 1f)
						{
							this.ai[0] = 0f;
							localAI[1] = Main.rand.Next(300, 900);
						}
						else
						{
							this.ai[0] = 1f;
							localAI[1] = Main.rand.Next(600, 1800);
						}
						netUpdate = true;
					}
				}
			}
			else if (direction == 0)
			{
				direction = 1;
				if (velocity.X < 0f)
				{
					direction = -1;
				}
			}
			if (type != 374)
			{
				return;
			}
			spriteDirection = direction;
			bool flag60 = false;
			for (int num42 = 0; num42 < 255; num42++)
			{
				Player player7 = Main.player[num42];
				if (player7.active && !player7.dead && !(Vector2.Distance(player7.Center, base.Center) > 160f))
				{
					flag60 = true;
					break;
				}
			}
			int num43 = 90;
			if (flag60 && this.ai[1] < (float)num43)
			{
				this.ai[1]++;
			}
			if (this.ai[1] == (float)num43 && Main.netMode != 1)
			{
				position.Y += 16f;
				Transform(375);
				netUpdate = true;
			}
		}
		else if (aiStyle == 67)
		{
			if (Main.netMode != 1)
			{
				int num44 = (int)MathHelper.Clamp((float)(int)(base.Center.X / 16f), 0f, (float)Main.maxTilesX);
				int num45 = (int)MathHelper.Clamp((float)(int)(base.Center.Y / 16f), 0f, (float)Main.maxTilesY);
				Tile tile = Main.tile[num44, num45];
				if (tile.shimmer() && tile.liquid > 30)
				{
					GetShimmered();
					return;
				}
			}
			if (type == 359)
			{
				if (this.ai[3] != 0f)
				{
					scale = this.ai[3];
					int num46 = (int)(12f * scale);
					int num48 = (int)(12f * scale);
					if (num46 != width)
					{
						position.X = position.X + (float)(width / 2) - (float)num46 - 2f;
						width = num46;
					}
					if (num48 != height)
					{
						position.Y = position.Y + (float)height - (float)num48;
						height = num48;
					}
				}
				if (this.ai[3] == 0f && Main.netMode != 1)
				{
					this.ai[3] = (float)Main.rand.Next(80, 111) * 0.01f;
					netUpdate = true;
				}
			}
			if (type == 360)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.1f, 0.2f, 0.7f);
			}
			if (type == 655)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.6f, 0.3f, 0.1f);
			}
			float num49 = 0.3f;
			if (type == 360 || type == 655)
			{
				num49 = 0.6f;
			}
			if (this.ai[0] == 0f)
			{
				TargetClosest();
				directionY = 1;
				this.ai[0] = 1f;
				if (direction > 0)
				{
					spriteDirection = 1;
				}
			}
			bool flag61 = false;
			if (Main.netMode != 1)
			{
				if (this.ai[2] == 0f && Main.rand.Next(7200) == 0)
				{
					this.ai[2] = 2f;
					netUpdate = true;
				}
				if (!collideX && !collideY)
				{
					localAI[3] += 1f;
					if (localAI[3] > 5f)
					{
						this.ai[2] = 2f;
						netUpdate = true;
					}
				}
				else
				{
					localAI[3] = 0f;
				}
			}
			if (this.ai[2] > 0f)
			{
				this.ai[1] = 0f;
				this.ai[0] = 1f;
				directionY = 1;
				if (velocity.Y > num49)
				{
					rotation += (float)direction * 0.1f;
				}
				else
				{
					rotation = 0f;
				}
				spriteDirection = direction;
				velocity.X = num49 * (float)direction;
				noGravity = false;
				int num50 = (int)(base.Center.X + (float)(width / 2 * -direction)) / 16;
				int num51 = (int)(position.Y + (float)height + 8f) / 16;
				if (Main.tile[num50, num51] != null && !Main.tile[num50, num51].topSlope() && collideY)
				{
					this.ai[2] -= 1f;
				}
				num51 = (int)(position.Y + (float)height - 4f) / 16;
				num50 = (int)(base.Center.X + (float)(width / 2 * direction)) / 16;
				if (Main.tile[num50, num51] != null && Main.tile[num50, num51].bottomSlope())
				{
					direction *= -1;
				}
				if (collideX && velocity.Y == 0f)
				{
					flag61 = true;
					this.ai[2] = 0f;
					directionY = -1;
					this.ai[1] = 1f;
				}
				if (velocity.Y == 0f)
				{
					if (localAI[1] == position.X)
					{
						localAI[2] += 1f;
						if (localAI[2] > 10f)
						{
							direction = 1;
							velocity.X = (float)direction * num49;
							localAI[2] = 0f;
						}
					}
					else
					{
						localAI[2] = 0f;
						localAI[1] = position.X;
					}
				}
			}
			if (this.ai[2] != 0f)
			{
				return;
			}
			noGravity = true;
			if (this.ai[1] == 0f)
			{
				if (collideY)
				{
					this.ai[0] = 2f;
				}
				if (!collideY && this.ai[0] == 2f)
				{
					direction = -direction;
					this.ai[1] = 1f;
					this.ai[0] = 1f;
				}
				if (collideX)
				{
					directionY = -directionY;
					this.ai[1] = 1f;
				}
			}
			else
			{
				if (collideX)
				{
					this.ai[0] = 2f;
				}
				if (!collideX && this.ai[0] == 2f)
				{
					directionY = -directionY;
					this.ai[1] = 0f;
					this.ai[0] = 1f;
				}
				if (collideY)
				{
					direction = -direction;
					this.ai[1] = 0f;
				}
			}
			if (!flag61)
			{
				float num52 = rotation;
				if (directionY < 0)
				{
					if (direction < 0)
					{
						if (collideX)
						{
							rotation = 1.57f;
							spriteDirection = -1;
						}
						else if (collideY)
						{
							rotation = 3.14f;
							spriteDirection = 1;
						}
					}
					else if (collideY)
					{
						rotation = 3.14f;
						spriteDirection = -1;
					}
					else if (collideX)
					{
						rotation = 4.71f;
						spriteDirection = 1;
					}
				}
				else if (direction < 0)
				{
					if (collideY)
					{
						rotation = 0f;
						spriteDirection = -1;
					}
					else if (collideX)
					{
						rotation = 1.57f;
						spriteDirection = 1;
					}
				}
				else if (collideX)
				{
					rotation = 4.71f;
					spriteDirection = -1;
				}
				else if (collideY)
				{
					rotation = 0f;
					spriteDirection = 1;
				}
				float num53 = rotation;
				rotation = num52;
				if ((double)rotation > 6.28)
				{
					rotation -= 6.28f;
				}
				if (rotation < 0f)
				{
					rotation += 6.28f;
				}
				float num54 = Math.Abs(rotation - num53);
				float num55 = 0.1f;
				if (rotation > num53)
				{
					if ((double)num54 > 3.14)
					{
						rotation += num55;
					}
					else
					{
						rotation -= num55;
						if (rotation < num53)
						{
							rotation = num53;
						}
					}
				}
				if (rotation < num53)
				{
					if ((double)num54 > 3.14)
					{
						rotation -= num55;
					}
					else
					{
						rotation += num55;
						if (rotation > num53)
						{
							rotation = num53;
						}
					}
				}
			}
			velocity.X = num49 * (float)direction;
			velocity.Y = num49 * (float)directionY;
		}
		else if (aiStyle == 68)
		{
			noGravity = true;
			if (this.ai[0] == 0f)
			{
				noGravity = false;
				int num56 = direction;
				int num57 = target;
				TargetClosest();
				if (num57 >= 0 && num56 != 0)
				{
					direction = num56;
				}
				if (wet && WorldGen.InWorld((int)(base.Center.X + (float)((width / 2 + 8) * direction)) / 16, (int)(base.Center.Y / 16f), 5))
				{
					float num59 = 2f;
					velocity.X = (velocity.X * 19f + num59 * (float)direction) / 20f;
					int num60 = (int)(base.Center.X + (float)((width / 2 + 8) * direction)) / 16;
					int num61 = (int)(base.Center.Y / 16f);
					int j4 = (int)(position.Y / 16f);
					int num62 = (int)((position.Y + (float)height) / 16f);
					if (Main.tile[num60, num61] == null)
					{
						Main.tile[num60, num61] = default(Tile);
					}
					if (Main.tile[num60, num62] == null)
					{
						Main.tile[num60, num62] = default(Tile);
					}
					if (num60 < 5 || num60 > Main.maxTilesX - 5 || WorldGen.SolidTile(num60, num61) || WorldGen.SolidTile(num60, j4) || WorldGen.SolidTile(num60, num62) || Main.tile[num60, num62].liquid == 0)
					{
						direction *= -1;
					}
					spriteDirection = direction;
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.5f;
					}
					noGravity = true;
					num60 = (int)(base.Center.X / 16f);
					num61 = (int)(base.Center.Y / 16f);
					float num63 = position.Y + (float)height;
					if (Main.tile[num60, num61 - 1] == null)
					{
						Main.tile[num60, num61 - 1] = default(Tile);
					}
					if (Main.tile[num60, num61] == null)
					{
						Main.tile[num60, num61] = default(Tile);
					}
					if (Main.tile[num60, num61 + 1] == null)
					{
						Main.tile[num60, num61 + 1] = default(Tile);
					}
					if (Main.tile[num60, num61 - 1].liquid > 0)
					{
						num63 = num61 * 16;
						num63 -= (float)(Main.tile[num60, num61 - 1].liquid / 16);
					}
					else if (Main.tile[num60, num61].liquid > 0)
					{
						num63 = (num61 + 1) * 16;
						num63 -= (float)(Main.tile[num60, num61].liquid / 16);
					}
					else if (Main.tile[num60, num61 + 1].liquid > 0)
					{
						num63 = (num61 + 2) * 16;
						num63 -= (float)(Main.tile[num60, num61 + 1].liquid / 16);
					}
					num63 -= 6f;
					if (base.Center.Y > num63)
					{
						velocity.Y -= 0.1f;
						if (velocity.Y < -8f)
						{
							velocity.Y = -8f;
						}
						if (base.Center.Y + velocity.Y < num63)
						{
							velocity.Y = num63 - base.Center.Y;
						}
					}
					else
					{
						velocity.Y = num63 - base.Center.Y;
					}
				}
				if (Main.netMode == 1)
				{
					return;
				}
				if (!wet)
				{
					this.ai[0] = 1f;
					netUpdate = true;
					direction = -direction;
					return;
				}
				Rectangle rectangle4 = default(Rectangle);
				((Rectangle)(ref rectangle4))._002Ector((int)Main.player[target].position.X, (int)Main.player[target].position.Y, Main.player[target].width, Main.player[target].height);
				val38 = new Rectangle((int)position.X - 100, (int)position.Y - 100, width + 200, height + 200);
				if (((Rectangle)(ref val38)).Intersects(rectangle4) || life < lifeMax)
				{
					this.ai[0] = 1f;
					velocity.Y -= 6f;
					netUpdate = true;
					direction = -direction;
				}
			}
			else
			{
				if (Main.player[target].dead)
				{
					return;
				}
				bool flag62 = false;
				this.ai[1] += 1f;
				if (this.ai[1] >= 300f)
				{
					flag62 = true;
				}
				if (flag62)
				{
					if (velocity.Y == 0f || collideY || wet)
					{
						velocity.X = 0f;
						velocity.Y = 0f;
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						if (Main.netMode != 1)
						{
							if ((type == 363 || type == 365 || type == 603 || type == 609) && !wet)
							{
								int num64 = direction;
								Transform(type - 1);
								TargetClosest();
								direction = num64;
								this.ai[0] = 0f;
								this.ai[1] = 200 + Main.rand.Next(200);
							}
							netUpdate = true;
						}
					}
					else
					{
						velocity.X *= 0.98f;
						velocity.Y += 0.1f;
						if (velocity.Y > 2f)
						{
							velocity.Y = 2f;
						}
					}
					return;
				}
				if (collideX)
				{
					direction *= -1;
					velocity.X = oldVelocity.X * -0.5f;
					if (direction == -1 && velocity.X > 0f && velocity.X < 2f)
					{
						velocity.X = 2f;
					}
					if (direction == 1 && velocity.X < 0f && velocity.X > -2f)
					{
						velocity.X = -2f;
					}
				}
				if (collideY)
				{
					velocity.Y = oldVelocity.Y * -0.5f;
					if (velocity.Y > 0f && velocity.Y < 1f)
					{
						velocity.Y = 1f;
					}
					if (velocity.Y < 0f && velocity.Y > -1f)
					{
						velocity.Y = -1f;
					}
				}
				if (direction == -1 && velocity.X > -3f)
				{
					velocity.X -= 0.1f;
					if (velocity.X > 3f)
					{
						velocity.X -= 0.1f;
					}
					else if (velocity.X > 0f)
					{
						velocity.X -= 0.05f;
					}
					if (velocity.X < -3f)
					{
						velocity.X = -3f;
					}
				}
				else if (direction == 1 && velocity.X < 3f)
				{
					velocity.X += 0.1f;
					if (velocity.X < -3f)
					{
						velocity.X += 0.1f;
					}
					else if (velocity.X < 0f)
					{
						velocity.X += 0.05f;
					}
					if (velocity.X > 3f)
					{
						velocity.X = 3f;
					}
				}
				int num65 = (int)((position.X + (float)(width / 2)) / 16f) + direction;
				int num66 = (int)((position.Y + (float)height) / 16f);
				bool flag63 = true;
				int num67 = 15;
				bool flag64 = false;
				for (int num68 = num66; num68 < num66 + num67; num68++)
				{
					if (Main.tile[num65, num68] == null)
					{
						Main.tile[num65, num68] = default(Tile);
					}
					if ((Main.tile[num65, num68].nactive() && Main.tileSolid[Main.tile[num65, num68].type]) || Main.tile[num65, num68].liquid > 0)
					{
						if (num68 < num66 + 5)
						{
							flag64 = true;
						}
						flag63 = false;
						break;
					}
				}
				if (flag63)
				{
					velocity.Y += 0.1f;
				}
				else
				{
					velocity.Y -= 0.1f;
				}
				if (flag64)
				{
					velocity.Y -= 0.2f;
				}
				if (velocity.Y > 3f)
				{
					velocity.Y = 3f;
				}
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
			}
		}
		else if (aiStyle == 69)
		{
			AI_069_DukeFishron();
		}
		else if (aiStyle == 70)
		{
			if (target == 255)
			{
				TargetClosest();
				this.ai[3] = (float)Main.rand.Next(80, 121) / 100f;
				float num70 = (float)Main.rand.Next(165, 265) / 15f;
				velocity = Vector2.Normalize(Main.player[target].Center - base.Center + new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101))) * num70;
				netUpdate = true;
			}
			Vector2 vector41 = Vector2.Normalize(Main.player[target].Center - base.Center);
			velocity = (velocity * 40f + vector41 * 20f) / 41f;
			scale = this.ai[3];
			alpha -= 30;
			if (alpha < 50)
			{
				alpha = 50;
			}
			alpha = 50;
			velocity.X = (velocity.X * 50f + Main.windSpeedCurrent * 2f + (float)Main.rand.Next(-10, 11) * 0.1f) / 51f;
			velocity.Y = (velocity.Y * 50f + -0.25f + (float)Main.rand.Next(-10, 11) * 0.2f) / 51f;
			if (velocity.Y > 0f)
			{
				velocity.Y -= 0.04f;
			}
			if (this.ai[0] == 0f)
			{
				int num71 = 40;
				Rectangle rect = getRect();
				rect.X -= num71 + width / 2;
				rect.Y -= num71 + height / 2;
				rect.Width += num71 * 2;
				rect.Height += num71 * 2;
				for (int num72 = 0; num72 < 255; num72++)
				{
					Player player8 = Main.player[num72];
					if (player8.active && !player8.dead && ((Rectangle)(ref rect)).Intersects(player8.getRect()))
					{
						this.ai[0] = 1f;
						this.ai[1] = 4f;
						netUpdate = true;
						break;
					}
				}
			}
			if (this.ai[0] == 0f)
			{
				this.ai[1]++;
				if (this.ai[1] >= 150f)
				{
					this.ai[0] = 1f;
					this.ai[1] = 4f;
				}
			}
			if (this.ai[0] == 1f)
			{
				this.ai[1]--;
				if (this.ai[1] <= 0f)
				{
					life = 0;
					HitEffect();
					active = false;
					return;
				}
			}
			if (justHit || this.ai[0] == 1f)
			{
				dontTakeDamage = true;
				position = base.Center;
				width = (height = 100);
				position = new Vector2(position.X - (float)(width / 2), position.Y - (float)(height / 2));
				EncourageDespawn(3);
			}
		}
		else if (aiStyle == 71)
		{
			noTileCollide = true;
			int num73 = 90;
			if (target < 0 || target == 255 || Main.player[target].dead)
			{
				TargetClosest(faceTarget: false);
				direction = 1;
				netUpdate = true;
			}
			if (this.ai[0] == 0f)
			{
				this.ai[1]++;
				_ = type;
				noGravity = true;
				dontTakeDamage = true;
				velocity.Y = this.ai[3];
				if (type == 373)
				{
					float num74 = (float)Math.PI / 30f;
					float num75 = this.ai[2];
					float num76 = (float)(Math.Cos(num74 * localAI[1]) - 0.5) * num75;
					position.X -= num76 * (float)(-direction);
					localAI[1]++;
					num76 = (float)(Math.Cos(num74 * localAI[1]) - 0.5) * num75;
					position.X += num76 * (float)(-direction);
					if (Math.Abs(Math.Cos(num74 * localAI[1]) - 0.5) > 0.25)
					{
						spriteDirection = ((!(Math.Cos(num74 * localAI[1]) - 0.5 >= 0.0)) ? 1 : (-1));
					}
					rotation = velocity.Y * (float)spriteDirection * 0.1f;
					if ((double)rotation < -0.2)
					{
						rotation = -0.2f;
					}
					if ((double)rotation > 0.2)
					{
						rotation = 0.2f;
					}
					alpha -= 6;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				if (this.ai[1] >= (float)num73)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					if (!Collision.SolidCollision(position, width, height))
					{
						this.ai[1] = 1f;
					}
					SoundEngine.PlaySound(4, (int)base.Center.X, (int)base.Center.Y, 19);
					TargetClosest();
					spriteDirection = direction;
					Vector2 vector42 = Main.player[target].Center - base.Center;
					((Vector2)(ref vector42)).Normalize();
					velocity = vector42 * 16f;
					rotation = velocity.ToRotation();
					if (direction == -1)
					{
						rotation += (float)Math.PI;
					}
					netUpdate = true;
				}
			}
			else
			{
				if (this.ai[0] != 1f)
				{
					return;
				}
				noGravity = true;
				if (!Collision.SolidCollision(position, width, height))
				{
					if (this.ai[1] < 1f)
					{
						this.ai[1] = 1f;
					}
				}
				else
				{
					alpha -= 15;
					if (alpha < 150)
					{
						alpha = 150;
					}
				}
				if (this.ai[1] >= 1f)
				{
					alpha -= 60;
					if (alpha < 0)
					{
						alpha = 0;
					}
					dontTakeDamage = false;
					this.ai[1]++;
					if (Collision.SolidCollision(position, width, height))
					{
						if (DeathSound.HasValue)
						{
							SoundEngine.PlaySound(DeathSound, position);
						}
						life = 0;
						HitEffect();
						active = false;
						return;
					}
				}
				if (this.ai[1] >= 60f)
				{
					noGravity = false;
				}
				rotation = velocity.ToRotation();
				if (direction == -1)
				{
					rotation += (float)Math.PI;
				}
			}
		}
		else if (aiStyle == 72)
		{
			if (type == 384)
			{
				int num77 = (int)this.ai[0];
				if (Main.npc[num77].active && Main.npc[num77].type == 383)
				{
					velocity = Vector2.Zero;
					position = Main.npc[num77].Center;
					position.X -= width / 2;
					position.Y -= height / 2;
					gfxOffY = Main.npc[num77].gfxOffY;
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.1f, 0.5f, 0.7f);
				}
				else
				{
					life = 0;
					HitEffect();
					active = false;
				}
			}
		}
		else if (aiStyle == 73)
		{
			TargetClosest(faceTarget: false);
			spriteDirection = direction;
			velocity.X *= 0.93f;
			if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
			{
				velocity.X = 0f;
			}
			if (type == 387)
			{
				float num78 = 120f;
				float num79 = 60f;
				if (this.ai[1] < num78)
				{
					this.ai[1]++;
					if (this.ai[1] > 60f)
					{
						float num81 = (this.ai[1] - num79) / (num78 - num79);
						alpha = (int)((1f - num81) * 255f);
					}
					else
					{
						alpha = 255;
					}
					dontTakeDamage = true;
					frameCounter = 0.0;
					frame.Y = 0;
					float num82 = this.ai[1] / num79;
					Vector2 spinningpoint = default(Vector2);
					((Vector2)(ref spinningpoint))._002Ector(0f, -30f);
					Vector2 spinningpoint15 = spinningpoint;
					double radians2 = num82 * 1.5f * ((float)Math.PI * 2f);
					val29 = default(Vector2);
					spinningpoint = spinningpoint15.RotatedBy(radians2, val29) * new Vector2(1f, 0.4f);
					for (int num83 = 0; num83 < 4; num83++)
					{
						Vector2 vector43 = Vector2.Zero;
						float num84 = 1f;
						if (num83 == 0)
						{
							vector43 = Vector2.UnitY * -15f;
							num84 = 0.15f;
						}
						if (num83 == 1)
						{
							vector43 = Vector2.UnitY * -5f;
							num84 = 0.3f;
						}
						if (num83 == 2)
						{
							vector43 = Vector2.UnitY * 5f;
							num84 = 0.6f;
						}
						if (num83 == 3)
						{
							vector43 = Vector2.UnitY * 20f;
							num84 = 0.45f;
						}
						Vector2 center40 = base.Center;
						newColor = default(Color);
						int num85 = Dust.NewDust(center40, 0, 0, 226, 0f, 0f, 100, newColor, 0.5f);
						Main.dust[num85].noGravity = true;
						Main.dust[num85].position = base.Center + spinningpoint * num84 + vector43;
						Main.dust[num85].velocity = Vector2.Zero;
						spinningpoint *= -1f;
						Vector2 center41 = base.Center;
						newColor = default(Color);
						num85 = Dust.NewDust(center41, 0, 0, 226, 0f, 0f, 100, newColor, 0.5f);
						Main.dust[num85].noGravity = true;
						Main.dust[num85].position = base.Center + spinningpoint * num84 + vector43;
						Main.dust[num85].velocity = Vector2.Zero;
					}
					Lighting.AddLight((int)base.Center.X / 16, (int)(base.Center.Y - 10f) / 16, 0.1f * num82, 0.5f * num82, 0.7f * num82);
					return;
				}
				if (this.ai[1] == num78)
				{
					this.ai[1]++;
					netUpdate = true;
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)(base.Center.Y - 10f) / 16, 0.1f, 0.5f, 0.7f);
				dontTakeDamage = false;
			}
			if (this.ai[0] < 60f)
			{
				this.ai[0]++;
			}
			if (justHit)
			{
				this.ai[0] = -30f;
				netUpdate = true;
			}
			if (this.ai[0] == 60f && Main.netMode != 1)
			{
				this.ai[0] = -120f;
				netUpdate = true;
				Vector2 center35 = Main.player[target].Center;
				Vector2 vector44 = base.Center - Vector2.UnitY * 10f;
				Vector2 vector45 = center35 - vector44;
				vector45.X += Main.rand.Next(-100, 101);
				vector45.Y += Main.rand.Next(-100, 101);
				vector45.X *= (float)Main.rand.Next(70, 131) * 0.01f;
				vector45.Y *= (float)Main.rand.Next(70, 131) * 0.01f;
				((Vector2)(ref vector45)).Normalize();
				if (float.IsNaN(vector45.X) || float.IsNaN(vector45.Y))
				{
					vector45 = -Vector2.UnitY;
				}
				vector45 *= 14f;
				int num86 = 35;
				float num87 = 1f;
				if (type >= 381 && type <= 392)
				{
					num87 = 0.8f;
				}
				num86 = GetAttackDamage_ForProjectiles(num86, (float)num86 * num87);
				Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector44.X, vector44.Y, vector45.X, vector45.Y, 435, num86, 0f, Main.myPlayer);
			}
		}
		else if (aiStyle == 74)
		{
			TargetClosest(faceTarget: false);
			rotation = velocity.ToRotation();
			if (rotation < -(float)Math.PI / 2f)
			{
				rotation += (float)Math.PI;
			}
			if (rotation > (float)Math.PI / 2f)
			{
				rotation -= (float)Math.PI;
			}
			if (Math.Sign(velocity.X) != 0)
			{
				spriteDirection = -Math.Sign(velocity.X);
			}
			if (type == 418)
			{
				spriteDirection = Math.Sign(velocity.X);
			}
			float num88 = 0.4f;
			float num89 = 10f;
			float num90 = 200f;
			float num92 = 0f;
			float num93 = 750f;
			float num94 = 0f;
			float num95 = 30f;
			float num96 = 30f;
			float num97 = 0.95f;
			int num98 = 50;
			float num99 = 14f;
			float num100 = 30f;
			float num101 = 100f;
			float num103 = 20f;
			float num104 = 0f;
			float num105 = 7f;
			bool flag65 = true;
			if (type == 418)
			{
				num88 = 0.3f;
				num89 = 8f;
				num90 = 175f;
				num92 = 175f;
				num93 = 600f;
				num94 = 80f;
				num95 = 60f;
				num96 = 20f;
				num97 = 0.75f;
				num98 = 0;
				num99 = 9f;
				num100 = 30f;
				num101 = 150f;
				num103 = 60f;
				num104 = 4f / 15f;
				num105 = 7f;
				flag65 = false;
			}
			num104 *= num103;
			if (Main.expertMode)
			{
				num88 *= Main.GameModeInfo.KnockbackToEnemiesMultiplier;
			}
			if (type == 388 && this.ai[0] != 3f)
			{
				position += netOffset;
				Vector2 val65 = position;
				int num1708 = width;
				int num1709 = height;
				newColor = default(Color);
				int num106 = Dust.NewDust(val65, num1708, num1709, 226, 0f, 0f, 100, newColor, 0.5f);
				Main.dust[num106].noGravity = true;
				Main.dust[num106].velocity = velocity / 5f;
				Vector2 spinningpoint5 = default(Vector2);
				((Vector2)(ref spinningpoint5))._002Ector(-10f, 10f);
				if (spriteDirection == 1)
				{
					spinningpoint5.X *= -1f;
				}
				Vector2 spinningpoint16 = spinningpoint5;
				double radians3 = rotation;
				val29 = default(Vector2);
				spinningpoint5 = spinningpoint16.RotatedBy(radians3, val29);
				Main.dust[num106].position = base.Center + spinningpoint5;
				position -= netOffset;
			}
			if (type == 418)
			{
				int num107 = ((this.ai[0] != 2f) ? 1 : 2);
				int num108 = ((this.ai[0] == 2f) ? 30 : 20);
				for (int num109 = 0; num109 < 2; num109++)
				{
					if (Main.rand.Next(3) < num107)
					{
						position += netOffset;
						Vector2 val66 = base.Center - new Vector2((float)num108);
						int num1710 = num108 * 2;
						int num1711 = num108 * 2;
						float speedX25 = velocity.X * 0.5f;
						float speedY24 = velocity.Y * 0.5f;
						newColor = default(Color);
						int num110 = Dust.NewDust(val66, num1710, num1711, 6, speedX25, speedY24, 90, newColor, 1.5f);
						Main.dust[num110].noGravity = true;
						Dust dust54 = Main.dust[num110];
						Dust dust87 = dust54;
						dust87.velocity *= 0.2f;
						Main.dust[num110].fadeIn = 1f;
						position -= netOffset;
					}
				}
			}
			if (this.ai[0] == 0f)
			{
				knockBackResist = num88;
				float num111 = num89;
				Vector2 center36 = base.Center;
				Vector2 center37 = Main.player[target].Center;
				Vector2 vector47 = center37 - center36;
				Vector2 vector48 = vector47 - Vector2.UnitY * num90;
				vector48 += Vector2.UnitX * ((vector47.X < 0f) ? num92 : (0f - num92));
				float num112 = ((Vector2)(ref vector47)).Length();
				vector47 = Vector2.Normalize(vector47) * num111;
				vector48 = Vector2.Normalize(vector48) * num111;
				bool flag66 = Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1);
				if (this.ai[3] >= 120f)
				{
					flag66 = true;
				}
				float num115 = 8f;
				flag66 = flag66 && vector47.ToRotation() > (float)Math.PI / num115 && vector47.ToRotation() < (float)Math.PI - (float)Math.PI / num115;
				bool flag67 = num112 < num94;
				bool flag69 = num112 > num93;
				if (flag67 || flag69 || !flag66)
				{
					velocity.X = (velocity.X * (num95 - 1f) + vector48.X) / num95;
					velocity.Y = (velocity.Y * (num95 - 1f) + vector48.Y) / num95;
					if (!flag66)
					{
						if (!flag67 && !flag69)
						{
							this.ai[3]++;
						}
						if (this.ai[3] == 120f)
						{
							netUpdate = true;
						}
					}
					else
					{
						this.ai[3] = 0f;
					}
				}
				else
				{
					this.ai[0] = 1f;
					this.ai[2] = vector47.X;
					this.ai[3] = vector47.Y;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 1f)
			{
				knockBackResist = 0f;
				bool flag70 = true;
				if (type == 418)
				{
					flag70 = ((Vector2)(ref velocity)).Length() > 2f;
					if (!flag70 && target >= 0 && !Main.player[target].DeadOrGhost)
					{
						Vector2 value = (Main.player[target].Center - base.Center).SafeNormalize(Vector2.Zero) * 0.1f;
						velocity = Vector2.Lerp(velocity, value, 0.25f);
					}
				}
				if (flag70)
				{
					velocity *= num97;
				}
				this.ai[1]++;
				if (this.ai[1] >= num96)
				{
					this.ai[0] = 2f;
					this.ai[1] = 0f;
					netUpdate = true;
					Vector2 vector49 = new Vector2(this.ai[2], this.ai[3]) + new Vector2((float)Main.rand.Next(-num98, num98 + 1), (float)Main.rand.Next(-num98, num98 + 1)) * 0.04f;
					((Vector2)(ref vector49)).Normalize();
					vector49 = (velocity = vector49 * num99);
				}
				if (type == 388 && Main.rand.Next(4) == 0)
				{
					position += netOffset;
					Vector2 val67 = position;
					int num1712 = width;
					int num1713 = height;
					newColor = default(Color);
					int num116 = Dust.NewDust(val67, num1712, num1713, 226, 0f, 0f, 100, newColor, 0.5f);
					Main.dust[num116].noGravity = true;
					Dust dust55 = Main.dust[num116];
					Dust dust87 = dust55;
					dust87.velocity *= 2f;
					Main.dust[num116].velocity = Main.dust[num116].velocity / 2f + Vector2.Normalize(Main.dust[num116].position - base.Center);
					position -= netOffset;
				}
			}
			else if (this.ai[0] == 2f)
			{
				knockBackResist = 0f;
				float num117 = num100;
				this.ai[1]++;
				bool flag71 = Vector2.Distance(base.Center, Main.player[target].Center) > num101 && base.Center.Y > Main.player[target].Center.Y;
				if ((this.ai[1] >= num117 && flag71) || ((Vector2)(ref velocity)).Length() < num105)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					velocity /= 2f;
					netUpdate = true;
					if (type == 418)
					{
						this.ai[1] = 45f;
						this.ai[0] = 4f;
					}
				}
				else
				{
					Vector2 center38 = base.Center;
					Vector2 center39 = Main.player[target].Center;
					Vector2 vector50 = center39 - center38;
					((Vector2)(ref vector50)).Normalize();
					if (vector50.HasNaNs())
					{
						((Vector2)(ref vector50))._002Ector((float)direction, 0f);
					}
					velocity = (velocity * (num103 - 1f) + vector50 * (((Vector2)(ref velocity)).Length() + num104)) / num103;
				}
				if (flag65 && Collision.SolidCollision(position, width, height))
				{
					this.ai[0] = 3f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 4f)
			{
				this.ai[1] -= 3f;
				if (this.ai[1] <= 0f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				velocity *= 0.95f;
			}
			if (flag65 && this.ai[0] != 3f && Vector2.Distance(base.Center, Main.player[target].Center) < 64f)
			{
				this.ai[0] = 3f;
				this.ai[1] = 0f;
				this.ai[2] = 0f;
				this.ai[3] = 0f;
				netUpdate = true;
			}
			if (this.ai[0] != 3f)
			{
				return;
			}
			position = base.Center;
			width = (height = 192);
			position.X -= width / 2;
			position.Y -= height / 2;
			velocity = Vector2.Zero;
			damage = GetAttackDamage_ScaledByStrength(80f);
			alpha = 255;
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.2f, 0.7f, 1.1f);
			for (int num118 = 0; num118 < 10; num118++)
			{
				Vector2 val68 = position;
				int num1714 = width;
				int num1715 = height;
				newColor = default(Color);
				int num119 = Dust.NewDust(val68, num1714, num1715, 31, 0f, 0f, 100, newColor, 1.5f);
				Dust dust58 = Main.dust[num119];
				Dust dust87 = dust58;
				dust87.velocity *= 1.4f;
				Main.dust[num119].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * ((float)Main.rand.NextDouble() * 96f) + base.Center;
			}
			for (int num120 = 0; num120 < 40; num120++)
			{
				Vector2 val69 = position;
				int num1716 = width;
				int num1717 = height;
				newColor = default(Color);
				int num121 = Dust.NewDust(val69, num1716, num1717, 226, 0f, 0f, 100, newColor, 0.5f);
				Main.dust[num121].noGravity = true;
				Dust dust59 = Main.dust[num121];
				Dust dust87 = dust59;
				dust87.velocity *= 2f;
				Main.dust[num121].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * ((float)Main.rand.NextDouble() * 96f) + base.Center;
				Main.dust[num121].velocity = Main.dust[num121].velocity / 2f + Vector2.Normalize(Main.dust[num121].position - base.Center);
				if (Main.rand.Next(2) == 0)
				{
					Vector2 val70 = position;
					int num1718 = width;
					int num1719 = height;
					newColor = default(Color);
					num121 = Dust.NewDust(val70, num1718, num1719, 226, 0f, 0f, 100, newColor, 0.9f);
					Main.dust[num121].noGravity = true;
					dust59 = Main.dust[num121];
					dust87 = dust59;
					dust87.velocity *= 1.2f;
					Main.dust[num121].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * ((float)Main.rand.NextDouble() * 96f) + base.Center;
					Main.dust[num121].velocity = Main.dust[num121].velocity / 2f + Vector2.Normalize(Main.dust[num121].position - base.Center);
				}
				if (Main.rand.Next(4) == 0)
				{
					Vector2 val71 = position;
					int num1720 = width;
					int num1721 = height;
					newColor = default(Color);
					num121 = Dust.NewDust(val71, num1720, num1721, 226, 0f, 0f, 100, newColor, 0.7f);
					dust59 = Main.dust[num121];
					dust87 = dust59;
					dust87.velocity *= 1.2f;
					Main.dust[num121].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * ((float)Main.rand.NextDouble() * 96f) + base.Center;
					Main.dust[num121].velocity = Main.dust[num121].velocity / 2f + Vector2.Normalize(Main.dust[num121].position - base.Center);
				}
			}
			this.ai[1]++;
			if (this.ai[1] >= 3f)
			{
				SoundEngine.PlaySound(in SoundID.Item14, position);
				life = 0;
				HitEffect();
				active = false;
			}
		}
		else if (aiStyle == 75)
		{
			int num122 = -1;
			Vector2 vector51 = Vector2.Zero;
			int num123 = 0;
			if (type == 390)
			{
				if (localAI[0] == 0f && Main.netMode != 1)
				{
					localAI[0] = 1f;
					int num124 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 391, whoAmI);
					this.ai[0] = num124;
					netUpdate = true;
				}
				int num126 = (int)this.ai[0];
				if (Main.npc[num126].active && Main.npc[num126].type == 391)
				{
					DiscourageDespawn(60);
					num122 = num126;
					vector51 = Vector2.UnitY * -14f;
				}
			}
			if (type == 416)
			{
				if (localAI[0] == 0f && Main.netMode != 1)
				{
					localAI[0] = 1f;
					int num127 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 415, whoAmI);
					this.ai[0] = num127;
					netUpdate = true;
				}
				int num128 = (int)this.ai[0];
				if (Main.npc[num128].active && Main.npc[num128].type == 415)
				{
					DiscourageDespawn(60);
					num122 = num128;
					((Vector2)(ref vector51))._002Ector((float)(-Main.npc[num128].spriteDirection * 10), -30f);
				}
			}
			else if (type == 392)
			{
				int num129 = (int)this.ai[0];
				if (Main.npc[num129].active && Main.npc[num129].type == 395)
				{
					DiscourageDespawn(60);
					num122 = num129;
					vector51 = Vector2.UnitY * 2f;
					vector51 *= Main.npc[num129].scale;
					float num130 = Main.npc[num129].rotation;
					Vector2 spinningpoint17 = vector51;
					double radians4 = num130;
					val29 = default(Vector2);
					vector51 = spinningpoint17.RotatedBy(radians4, val29);
					rotation = num130;
					if (Main.netMode != 1)
					{
						bool flag72 = true;
						if (Main.npc[num129].ai[0] >= 1f || Main.npc[num129].ai[0] < 0f)
						{
							flag72 = false;
						}
						if (flag72)
						{
							for (int num131 = 0; num131 < 2; num131++)
							{
								if (Main.npc[(int)localAI[num131]].active && Main.npc[(int)localAI[num131]].type == 393)
								{
									flag72 = false;
								}
							}
							for (int num132 = 2; num132 < 4; num132++)
							{
								if (Main.npc[(int)localAI[num132]].active && Main.npc[(int)localAI[num132]].type == 394)
								{
									flag72 = false;
								}
							}
						}
						if (Main.npc[num129].ai[3] % 200f == 0f && Main.npc[num129].ai[0] != 1f)
						{
							for (int num133 = 0; num133 < 2; num133++)
							{
								if (Main.npc[(int)localAI[num133]].active && Main.npc[(int)localAI[num133]].type == 393)
								{
									Main.npc[(int)localAI[num133]].netUpdate = true;
								}
							}
							for (int num134 = 2; num134 < 4; num134++)
							{
								if (Main.npc[(int)localAI[num134]].active && Main.npc[(int)localAI[num134]].type == 394)
								{
									Main.npc[(int)localAI[num134]].netUpdate = true;
								}
							}
							netUpdate = true;
						}
						if (flag72)
						{
							if (!Main.expertMode)
							{
								Main.npc[num129].ai[0] = 3f;
								Main.npc[num129].ai[1] = 0f;
								Main.npc[num129].ai[2] = 0f;
								Main.npc[num129].ai[3] = 0f;
								Main.npc[num129].netUpdate = true;
							}
							else
							{
								Main.npc[num129].ai[0] = 1f;
								Main.npc[num129].ai[1] = 0f;
								Main.npc[num129].ai[2] = 0f;
								Main.npc[num129].ai[3] = 0f;
								Main.npc[num129].netUpdate = true;
							}
						}
					}
				}
			}
			else if (type == 393)
			{
				int num135 = (int)this.ai[0];
				if (Main.npc[num135].active && Main.npc[num135].type == 395)
				{
					DiscourageDespawn(60);
					num122 = num135;
					vector51 = Vector2.UnitY * 29f + ((this.ai[1] == 1f) ? Vector2.UnitX : (-Vector2.UnitX)) * 60f;
					vector51 *= Main.npc[num135].scale;
					float num137 = Main.npc[num135].rotation;
					Vector2 spinningpoint18 = vector51;
					double radians5 = num137;
					val29 = default(Vector2);
					vector51 = spinningpoint18.RotatedBy(radians5, val29);
					rotation = num137;
				}
			}
			else if (type == 394)
			{
				int num138 = (int)this.ai[0];
				if (Main.npc[num138].active && Main.npc[num138].type == 395)
				{
					DiscourageDespawn(60);
					num122 = num138;
					vector51 = Vector2.UnitY * -13f + ((this.ai[1] == 1f) ? Vector2.UnitX : (-Vector2.UnitX)) * 49f;
					vector51 *= Main.npc[num138].scale;
					float num139 = Main.npc[num138].rotation;
					Vector2 spinningpoint19 = vector51;
					double radians6 = num139;
					val29 = default(Vector2);
					vector51 = spinningpoint19.RotatedBy(radians6, val29);
					rotation = num139;
					num123 = ((this.ai[1] == 1f) ? 1 : (-1));
				}
			}
			else if (type == 492)
			{
				int num140 = (int)this.ai[0];
				if (Main.npc[num140].active && Main.npc[num140].type == 491)
				{
					DiscourageDespawn(60);
					num122 = num140;
					((Vector2)(ref vector51))._002Ector((-122f + 68f * this.ai[1]) * (float)((Main.npc[num140].spriteDirection != 1) ? 1 : (-1)), -6f);
					vector51 *= Main.npc[num140].scale;
					float num141 = Main.npc[num140].rotation;
					Vector2 spinningpoint20 = vector51;
					double radians7 = num141;
					val29 = default(Vector2);
					vector51 = spinningpoint20.RotatedBy(radians7, val29);
					rotation = num141;
				}
			}
			if (num122 != -1)
			{
				NPC nPC18 = Main.npc[num122];
				velocity = Vector2.Zero;
				position = nPC18.Center;
				position.X -= width / 2;
				position.Y -= height / 2;
				position += vector51;
				gfxOffY = nPC18.gfxOffY;
				direction = nPC18.direction;
				if (num123 == 0)
				{
					spriteDirection = nPC18.spriteDirection;
				}
				else
				{
					spriteDirection = num123;
				}
				if (type == 390)
				{
					timeLeft = nPC18.timeLeft;
					velocity = nPC18.velocity;
					target = nPC18.target;
					if (this.ai[1] < 60f)
					{
						this.ai[1]++;
					}
					if (justHit)
					{
						this.ai[1] = -30f;
					}
					int num142 = 438;
					int num143 = 30;
					float num144 = 7f;
					if (Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						Vector2 vector52 = Main.player[target].Center - base.Center;
						Vector2 vector53 = Vector2.Normalize(vector52);
						float num145 = ((Vector2)(ref vector52)).Length();
						float num146 = 700f;
						if (type == 214)
						{
							num146 = 550f;
						}
						if (type == 215)
						{
							num146 = 800f;
						}
						if (num145 < num146)
						{
							if (this.ai[1] == 60f && Math.Sign(vector52.X) == direction)
							{
								this.ai[1] = -60f;
								Vector2 center2 = Main.player[target].Center;
								Vector2 vector54 = base.Center - Vector2.UnitY * 4f;
								Vector2 vector55 = center2 - vector54;
								vector55.X += Main.rand.Next(-50, 51);
								vector55.Y += Main.rand.Next(-50, 51);
								vector55.X *= (float)Main.rand.Next(80, 121) * 0.01f;
								vector55.Y *= (float)Main.rand.Next(80, 121) * 0.01f;
								((Vector2)(ref vector55)).Normalize();
								if (float.IsNaN(vector55.X) || float.IsNaN(vector55.Y))
								{
									vector55 = -Vector2.UnitY;
								}
								vector55 *= num144;
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector54.X, vector54.Y, vector55.X, vector55.Y, num142, num143, 0f, Main.myPlayer);
								netUpdate = true;
							}
							else
							{
								float num148 = this.ai[2];
								velocity.X *= 0.5f;
								this.ai[2] = 3f;
								if (Math.Abs(vector53.Y) > Math.Abs(vector53.X) * 2f)
								{
									if (vector53.Y > 0f)
									{
										this.ai[2] = 1f;
									}
									else
									{
										this.ai[2] = 5f;
									}
								}
								else if (Math.Abs(vector53.X) > Math.Abs(vector53.Y) * 2f)
								{
									this.ai[2] = 3f;
								}
								else if (vector53.Y > 0f)
								{
									this.ai[2] = 2f;
								}
								else
								{
									this.ai[2] = 4f;
								}
								if (this.ai[2] != num148)
								{
									netUpdate = true;
								}
							}
						}
					}
				}
				if (type == 492)
				{
					timeLeft = nPC18.timeLeft;
					velocity = nPC18.velocity;
					if (this.ai[3] < 240f)
					{
						this.ai[3]++;
					}
					if (this.ai[3] == 2f)
					{
						TargetClosest(faceTarget: false);
					}
					if (Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						Vector2 vector56 = Main.player[target].Center - base.Center;
						Vector2 vector58 = Vector2.Normalize(vector56);
						if (this.ai[3] >= 240f)
						{
							this.ai[3] = 0f;
							Vector2 center3 = Main.player[target].Center;
							Vector2 center4 = base.Center;
							Vector2 vector59 = Vector2.Normalize(center3 - center4);
							if (float.IsNaN(vector59.X) || float.IsNaN(vector59.Y))
							{
								vector59 = Vector2.UnitY;
							}
							vector59 *= 14f;
							vector59 += Vector2.UnitY * -5f;
							if (Main.netMode != 1)
							{
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), center4.X, center4.Y, vector59.X, vector59.Y, 240, 30, 0f, Main.myPlayer);
							}
							netUpdate = true;
						}
						else
						{
							float num149 = this.ai[2];
							float[] array3 = new float[8];
							for (int num150 = 0; num150 < array3.Length; num150++)
							{
								int num1722 = num150;
								Vector2 center42 = base.Center;
								Vector2 unitY = Vector2.UnitY;
								double radians8 = (float)num150 * (-(float)Math.PI / 4f);
								val29 = default(Vector2);
								array3[num1722] = Vector2.Distance(center42 + unitY.RotatedBy(radians8, val29) * 50f, Main.player[target].Center);
							}
							int num151 = 0;
							for (int num152 = 1; num152 < array3.Length; num152++)
							{
								if (array3[num151] > array3[num152])
								{
									num151 = num152;
								}
							}
							this.ai[2] = num151 + 1;
							if (spriteDirection == 1)
							{
								this.ai[2] = 9f - this.ai[2];
							}
							if (this.ai[2] != num149)
							{
								netUpdate = true;
							}
						}
					}
					else
					{
						if (this.ai[2] != 0f)
						{
							netUpdate = true;
						}
						this.ai[2] = 0f;
					}
				}
				if (type == 394)
				{
					timeLeft = nPC18.timeLeft;
					int attackDamage_ForProjectiles12 = GetAttackDamage_ForProjectiles(50f, 37f);
					this.ai[3] = nPC18.ai[3];
					float num153 = 440f;
					float num154 = 140f;
					if (this.ai[3] >= num153 && this.ai[3] < num153 + num154)
					{
						float num155 = this.ai[3] - num153;
						if (num155 % 20f == 0f)
						{
							if (Main.netMode != 1)
							{
								Vector2 spinningpoint6 = (float)num123 * Vector2.UnitX;
								Vector2 spinningpoint21 = spinningpoint6;
								double radians9 = (Main.rand.NextDouble() - 0.5) * 0.7853981852531433;
								val29 = default(Vector2);
								spinningpoint6 = spinningpoint21.RotatedBy(radians9, val29);
								spinningpoint6 *= 8f;
								Vector2 vector60 = (float)num123 * Vector2.UnitX * 36f + base.Center + Vector2.UnitY * 8f;
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector60.X, vector60.Y, spinningpoint6.X, spinningpoint6.Y, 448, attackDamage_ForProjectiles12, 0f, Main.myPlayer, 0f, 20f);
							}
							SoundEngine.PlaySound(in SoundID.Item39, base.Center);
						}
					}
				}
				if (type == 393)
				{
					timeLeft = nPC18.timeLeft;
					int attackDamage_ForProjectiles2 = GetAttackDamage_ForProjectiles(35f, 30f);
					this.ai[3] = nPC18.ai[3];
					float num156 = 280f;
					float num157 = 140f;
					bool flag73 = this.ai[3] >= num156 && this.ai[3] < num156 + num157;
					if (!flag73)
					{
						TargetClosest(faceTarget: false);
						Player player9 = Main.player[target];
						Vector2 v6 = player9.Center - base.Center;
						if (v6.Y < 0f)
						{
							v6.Y = 0f;
						}
						((Vector2)(ref v6)).Normalize();
						if (float.IsNaN(v6.X) || float.IsNaN(v6.Y))
						{
							v6 = Vector2.UnitY;
						}
						this.ai[2] = v6.ToRotation();
					}
					if (flag73)
					{
						float num159 = this.ai[3] - num156;
						if (num159 % 6f == 0f)
						{
							if (Main.netMode != 1)
							{
								Vector2 spinningpoint7 = this.ai[2].ToRotationVector2();
								Vector2 spinningpoint22 = spinningpoint7;
								double radians10 = (Main.rand.NextDouble() - 0.5) * 0.7853981852531433 / 3.0;
								val29 = default(Vector2);
								spinningpoint7 = spinningpoint22.RotatedBy(radians10, val29);
								spinningpoint7 *= 16f;
								Vector2 vector61 = base.Center + spinningpoint7 * 1f;
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector61.X, vector61.Y, spinningpoint7.X, spinningpoint7.Y, 449, attackDamage_ForProjectiles2, 0f, Main.myPlayer);
							}
							SoundEngine.PlaySound(in SoundID.Item12, base.Center);
						}
					}
				}
				if (type != 392)
				{
					return;
				}
				timeLeft = nPC18.timeLeft;
				int attackDamage_ForProjectiles3 = GetAttackDamage_ForProjectiles(50f, 50f);
				this.ai[3] = nPC18.ai[3];
				float num160 = 20f;
				float num161 = 240f;
				if (this.ai[3] >= num160 && this.ai[3] < num160 + num161 && nPC18.ai[0] == 0f)
				{
					float num162 = this.ai[3] - num160;
					if (num162 == 0f)
					{
						if (Main.netMode != 1)
						{
							Vector2 center5 = base.Center;
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), center5.X, center5.Y, 0f, 0f, 447, attackDamage_ForProjectiles3, 0f, Main.myPlayer, whoAmI + 1);
						}
						SoundEngine.PlaySound(in SoundID.Item12, base.Center);
					}
				}
				bool flag74 = false;
				int maxValue4 = 1000;
				int maxValue5 = 1000;
				int num163 = 450;
				int attackDamage_ForProjectiles4 = GetAttackDamage_ForProjectiles(30f, 25f);
				if (nPC18.ai[0] == 2f)
				{
					flag74 = true;
					maxValue5 = 120;
					maxValue4 = 120;
				}
				if (!flag74)
				{
					num160 = 280f;
					num161 = 120f;
					flag74 = flag74 || (this.ai[3] >= num160 && this.ai[3] < num160 + num161);
					if (flag74)
					{
						maxValue5 = 90;
						maxValue4 = 60;
					}
				}
				if (!flag74)
				{
					num160 = 440f;
					num161 = 140f;
					flag74 = flag74 || (this.ai[3] >= num160 && this.ai[3] < num160 + num161);
					if (flag74)
					{
						maxValue5 = 60;
						maxValue4 = 90;
					}
				}
				bool flag75 = true;
				bool flag76 = true;
				bool flag77 = true;
				bool flag78 = true;
				if (Main.npc[(int)localAI[0]].active && Main.npc[(int)localAI[0]].type == 393)
				{
					flag75 = false;
				}
				if (Main.npc[(int)localAI[1]].active && Main.npc[(int)localAI[1]].type == 393)
				{
					flag76 = false;
				}
				if (Main.npc[(int)localAI[2]].active && Main.npc[(int)localAI[2]].type == 394)
				{
					flag77 = false;
				}
				if (Main.npc[(int)localAI[3]].active && Main.npc[(int)localAI[3]].type == 394)
				{
					flag78 = false;
				}
				if (flag74)
				{
					bool flag80 = true;
					if (flag75 && Main.rand.Next(maxValue4) == 0)
					{
						if (Main.netMode != 1)
						{
							Vector2 spinningpoint8 = default(Vector2);
							((Vector2)(ref spinningpoint8))._002Ector(-1f * (float)Main.rand.NextDouble() * 3f, 1f);
							Vector2 spinningpoint23 = spinningpoint8;
							double radians11 = (Main.rand.NextDouble() - 0.5) * 0.7853981852531433;
							val29 = default(Vector2);
							spinningpoint8 = spinningpoint23.RotatedBy(radians11, val29);
							spinningpoint8 *= 3f;
							Vector2 vector62 = -1f * Vector2.UnitX * (float)Main.rand.Next(50, 70) + base.Center + Vector2.UnitY * (float)Main.rand.Next(30, 45);
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector62.X, vector62.Y, spinningpoint8.X, spinningpoint8.Y, num163, attackDamage_ForProjectiles4, 0f, Main.myPlayer);
						}
						SoundEngine.PlaySound(in SoundID.Item39, base.Center);
					}
					if (flag76 && Main.rand.Next(maxValue4) == 0)
					{
						if (Main.netMode != 1)
						{
							Vector2 spinningpoint9 = default(Vector2);
							((Vector2)(ref spinningpoint9))._002Ector(1f * (float)Main.rand.NextDouble() * 3f, 1f);
							Vector2 spinningpoint24 = spinningpoint9;
							double radians12 = (Main.rand.NextDouble() - 0.5) * 0.7853981852531433;
							val29 = default(Vector2);
							spinningpoint9 = spinningpoint24.RotatedBy(radians12, val29);
							spinningpoint9 *= 3f;
							Vector2 vector63 = 1f * Vector2.UnitX * (float)Main.rand.Next(50, 70) + base.Center + Vector2.UnitY * (float)Main.rand.Next(30, 45);
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector63.X, vector63.Y, spinningpoint9.X, spinningpoint9.Y, num163, attackDamage_ForProjectiles4, 0f, Main.myPlayer);
						}
						SoundEngine.PlaySound(in SoundID.Item39, base.Center);
					}
				}
				if (flag74)
				{
					bool flag81 = true;
					if (flag77 && Main.rand.Next(maxValue5) == 0)
					{
						if (Main.netMode != 1)
						{
							Vector2 spinningpoint10 = default(Vector2);
							((Vector2)(ref spinningpoint10))._002Ector(-1f * (float)Main.rand.NextDouble() * 2f, -1f);
							Vector2 spinningpoint25 = spinningpoint10;
							double radians13 = (Main.rand.NextDouble() - 0.5) * 0.7853981852531433;
							val29 = default(Vector2);
							spinningpoint10 = spinningpoint25.RotatedBy(radians13, val29);
							spinningpoint10 *= 3f;
							Vector2 vector64 = -1f * Vector2.UnitX * (float)Main.rand.Next(30, 60) + base.Center + Vector2.UnitY * (float)Main.rand.Next(-30, -10);
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector64.X, vector64.Y, spinningpoint10.X, spinningpoint10.Y, num163, attackDamage_ForProjectiles4, 0f, Main.myPlayer);
						}
						SoundEngine.PlaySound(in SoundID.Item39, base.Center);
					}
					if (flag78 && Main.rand.Next(maxValue5) == 0)
					{
						if (Main.netMode != 1)
						{
							Vector2 spinningpoint11 = default(Vector2);
							((Vector2)(ref spinningpoint11))._002Ector(1f * (float)Main.rand.NextDouble() * 2f, -1f);
							Vector2 spinningpoint26 = spinningpoint11;
							double radians14 = (Main.rand.NextDouble() - 0.5) * 0.7853981852531433;
							val29 = default(Vector2);
							spinningpoint11 = spinningpoint26.RotatedBy(radians14, val29);
							spinningpoint11 *= 3f;
							Vector2 vector65 = 1f * Vector2.UnitX * (float)Main.rand.Next(30, 60) + base.Center + Vector2.UnitY * (float)Main.rand.Next(-30, -10);
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector65.X, vector65.Y, spinningpoint11.X, spinningpoint11.Y, num163, attackDamage_ForProjectiles4, 0f, Main.myPlayer);
						}
						SoundEngine.PlaySound(in SoundID.Item39, base.Center);
					}
				}
				if (flag75 && Main.rand.Next(8) == 0)
				{
					Vector2 val72 = -1f * Vector2.UnitX * (float)Main.rand.Next(50, 70) + base.Center + Vector2.UnitY * (float)Main.rand.Next(15, 30);
					int num1723 = ((Main.rand.Next(4) != 0) ? 31 : 228);
					newColor = default(Color);
					int num164 = Dust.NewDust(val72, 4, 16, num1723, 0f, 0f, 100, newColor, 1.2f);
					Dust obj6 = Main.dust[num164];
					Vector2 spinningpoint27 = new Vector2(-1f * (float)Main.rand.NextDouble() * 3f, 1f);
					double radians15 = (Main.rand.NextDouble() - 0.5) * 0.7853981852531433;
					val29 = default(Vector2);
					obj6.velocity = Utils.RotatedBy(spinningpoint27, radians15, val29);
					Dust dust50 = Main.dust[num164];
					Dust dust87 = dust50;
					dust87.velocity *= 0.5f;
					Main.dust[num164].velocity.Y = 0f - Math.Abs(Main.dust[num164].velocity.Y);
				}
				if (flag76 && Main.rand.Next(8) == 0)
				{
					Vector2 val73 = Vector2.UnitX * (float)Main.rand.Next(50, 70) + base.Center + Vector2.UnitY * (float)Main.rand.Next(15, 30);
					int num1724 = ((Main.rand.Next(4) != 0) ? 31 : 228);
					newColor = default(Color);
					int num165 = Dust.NewDust(val73, 4, 16, num1724, 0f, 0f, 100, newColor, 1.2f);
					Dust obj7 = Main.dust[num165];
					Vector2 spinningpoint28 = new Vector2((float)Main.rand.NextDouble() * 3f, 1f);
					double radians16 = (Main.rand.NextDouble() - 0.5) * 0.7853981852531433;
					val29 = default(Vector2);
					obj7.velocity = Utils.RotatedBy(spinningpoint28, radians16, val29);
					Dust dust51 = Main.dust[num165];
					Dust dust87 = dust51;
					dust87.velocity *= 0.5f;
					Main.dust[num165].velocity.Y = 0f - Math.Abs(Main.dust[num165].velocity.Y);
				}
				if (flag77 && Main.rand.Next(8) == 0)
				{
					Vector2 val74 = -1f * Vector2.UnitX * (float)Main.rand.Next(30, 60) + base.Center + Vector2.UnitY * (float)Main.rand.Next(-30, -10);
					int num1725 = ((Main.rand.Next(4) != 0) ? 31 : 228);
					newColor = default(Color);
					int num166 = Dust.NewDust(val74, 4, 16, num1725, 0f, 0f, 100, newColor, 1.2f);
					Dust obj8 = Main.dust[num166];
					Vector2 spinningpoint29 = new Vector2(-1f * (float)Main.rand.NextDouble() * 2f, 1f);
					double radians17 = (Main.rand.NextDouble() - 0.5) * 0.7853981852531433;
					val29 = default(Vector2);
					obj8.velocity = Utils.RotatedBy(spinningpoint29, radians17, val29);
					Dust dust52 = Main.dust[num166];
					Dust dust87 = dust52;
					dust87.velocity *= 0.5f;
					Main.dust[num166].velocity.Y = 0f - Math.Abs(Main.dust[num166].velocity.Y);
				}
				if (flag78 && Main.rand.Next(8) == 0)
				{
					Vector2 val75 = Vector2.UnitX * (float)Main.rand.Next(30, 60) + base.Center + Vector2.UnitY * (float)Main.rand.Next(-30, -10);
					int num1726 = ((Main.rand.Next(4) != 0) ? 31 : 228);
					newColor = default(Color);
					int num167 = Dust.NewDust(val75, 4, 16, num1726, 0f, 0f, 100, newColor, 1.2f);
					Dust obj9 = Main.dust[num167];
					Vector2 spinningpoint30 = new Vector2((float)Main.rand.NextDouble() * 2f, 1f);
					double radians18 = (Main.rand.NextDouble() - 0.5) * 0.7853981852531433;
					val29 = default(Vector2);
					obj9.velocity = Utils.RotatedBy(spinningpoint30, radians18, val29);
					Dust dust53 = Main.dust[num167];
					Dust dust87 = dust53;
					dust87.velocity *= 0.5f;
					Main.dust[num167].velocity.Y = 0f - Math.Abs(Main.dust[num167].velocity.Y);
				}
			}
			else if (type == 390)
			{
				Transform(382);
			}
			else if (type == 416)
			{
				Transform(518);
			}
			else
			{
				life = 0;
				HitEffect();
				active = false;
			}
		}
		else if (aiStyle == 76)
		{
			if (localAI[3] == 0f && Main.netMode != 1 && type == 395)
			{
				localAI[3] = 1f;
				int[] array4 = new int[4];
				int num168 = 0;
				for (int num170 = 0; num170 < 2; num170++)
				{
					int num171 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X + num170 * 300 - 150, (int)base.Center.Y, 393, whoAmI);
					Main.npc[num171].ai[1] = num170;
					Main.npc[num171].netUpdate = true;
					array4[num168++] = num171;
				}
				for (int num172 = 0; num172 < 2; num172++)
				{
					int num173 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X + num172 * 300 - 150, (int)base.Center.Y, 394, whoAmI);
					Main.npc[num173].ai[1] = num172;
					Main.npc[num173].netUpdate = true;
					array4[num168++] = num173;
				}
				int num174 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 392, whoAmI);
				Main.npc[num174].ai[0] = whoAmI;
				Main.npc[num174].netUpdate = true;
				for (int num175 = 0; num175 < 4; num175++)
				{
					Main.npc[array4[num175]].ai[0] = whoAmI;
				}
				for (int num176 = 0; num176 < 4; num176++)
				{
					Main.npc[num174].localAI[num176] = array4[num176];
				}
			}
			if (this.ai[0] == 3f)
			{
				StrikeNPCNoInteraction(9999, 0f, 0);
				return;
			}
			Vector2 center6 = base.Center;
			Player player10 = Main.player[target];
			float num177 = 5600f;
			if (target < 0 || target == 255 || player10.dead || !player10.active || Vector2.Distance(player10.Center, center6) > num177)
			{
				TargetClosest();
				player10 = Main.player[target];
				netUpdate = true;
			}
			if ((player10.dead || !player10.active || Vector2.Distance(player10.Center, center6) > num177) && this.ai[0] != 1f)
			{
				if (this.ai[0] == 0f)
				{
					this.ai[0] = -1f;
				}
				if (this.ai[0] == 2f)
				{
					this.ai[0] = -2f;
				}
				netUpdate = true;
			}
			if (this.ai[0] == -1f || this.ai[0] == -2f)
			{
				velocity.Y -= 0.4f;
				EncourageDespawn(10);
				if (!player10.dead)
				{
					timeLeft = 300;
					if (this.ai[0] == -2f)
					{
						this.ai[0] = 2f;
					}
					if (this.ai[0] == 0f)
					{
						this.ai[0] = 0f;
					}
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 0f)
			{
				int num178 = 0;
				int num179 = 0;
				if (this.ai[3] >= 580f)
				{
					num178 = 0;
				}
				else if (this.ai[3] >= 440f)
				{
					num178 = 5;
				}
				else if (this.ai[3] >= 420f)
				{
					num178 = 4;
				}
				else if (this.ai[3] >= 280f)
				{
					num178 = 3;
				}
				else if (this.ai[3] >= 260f)
				{
					num178 = 2;
				}
				else if (this.ai[3] >= 20f)
				{
					num178 = 1;
				}
				this.ai[3]++;
				if (this.ai[3] >= 600f)
				{
					this.ai[3] = 0f;
				}
				num179 = num178;
				if (this.ai[3] >= 580f)
				{
					num178 = 0;
				}
				else if (this.ai[3] >= 440f)
				{
					num178 = 5;
				}
				else if (this.ai[3] >= 420f)
				{
					num178 = 4;
				}
				else if (this.ai[3] >= 280f)
				{
					num178 = 3;
				}
				else if (this.ai[3] >= 260f)
				{
					num178 = 2;
				}
				else if (this.ai[3] >= 20f)
				{
					num178 = 1;
				}
				if (num178 != num179)
				{
					if (num178 == 0)
					{
						this.ai[2] = 0f;
					}
					if (num178 == 1)
					{
						this.ai[2] = ((Math.Sign((player10.Center - center6).X) == 1) ? 1 : (-1));
					}
					if (num178 == 2)
					{
						this.ai[2] = 0f;
					}
					netUpdate = true;
				}
				if (num178 == 0)
				{
					if (this.ai[2] == 0f)
					{
						this.ai[2] = -600 * Math.Sign((center6 - player10.Center).X);
					}
					Vector2 vector66 = player10.Center + new Vector2(this.ai[2], -250f) - center6;
					if (((Vector2)(ref vector66)).Length() < 50f)
					{
						this.ai[3] = 19f;
					}
					else
					{
						((Vector2)(ref vector66)).Normalize();
						velocity = Vector2.Lerp(velocity, vector66 * 16f, 0.1f);
					}
				}
				if (num178 == 1)
				{
					int num181 = (int)base.Center.X / 16;
					int num182 = (int)(position.Y + (float)height) / 16;
					int num183 = 0;
					if (Main.tile[num181, num182].nactive() && Main.tileSolid[Main.tile[num181, num182].type] && !Main.tileSolidTop[Main.tile[num181, num182].type])
					{
						num183 = 1;
					}
					else
					{
						for (; num183 < 150 && num182 + num183 < Main.maxTilesY; num183++)
						{
							int num184 = num182 + num183;
							if (Main.tile[num181, num184].nactive() && Main.tileSolid[Main.tile[num181, num184].type] && !Main.tileSolidTop[Main.tile[num181, num184].type])
							{
								num183--;
								break;
							}
						}
					}
					float num185 = num183 * 16;
					float num186 = 250f;
					if (num185 < num186)
					{
						float num187 = -4f;
						if (0f - num187 > num185)
						{
							num187 = 0f - num185;
						}
						velocity.Y = MathHelper.Lerp(velocity.Y, num187, 0.05f);
					}
					else
					{
						velocity.Y *= 0.95f;
					}
					velocity.X = 3.5f * this.ai[2];
				}
				switch (num178)
				{
				case 2:
				{
					if (this.ai[2] == 0f)
					{
						this.ai[2] = 300 * Math.Sign((center6 - player10.Center).X);
					}
					Vector2 vector67 = player10.Center + new Vector2(this.ai[2], -170f) - center6;
					int num197 = (int)base.Center.X / 16;
					int num198 = (int)(position.Y + (float)height) / 16;
					int num199 = 0;
					if (Main.tile[num197, num198].nactive() && Main.tileSolid[Main.tile[num197, num198].type] && !Main.tileSolidTop[Main.tile[num197, num198].type])
					{
						num199 = 1;
					}
					else
					{
						for (; num199 < 150 && num198 + num199 < Main.maxTilesY; num199++)
						{
							int num200 = num198 + num199;
							if (Main.tile[num197, num200].nactive() && Main.tileSolid[Main.tile[num197, num200].type] && !Main.tileSolidTop[Main.tile[num197, num200].type])
							{
								num199--;
								break;
							}
						}
					}
					float num201 = num199 * 16;
					float num203 = 170f;
					if (num201 < num203)
					{
						vector67.Y -= num203 - num201;
					}
					if (((Vector2)(ref vector67)).Length() < 70f)
					{
						this.ai[3] = 279f;
						break;
					}
					((Vector2)(ref vector67)).Normalize();
					velocity = Vector2.Lerp(velocity, vector67 * 20f, 0.1f);
					break;
				}
				case 3:
				{
					float num188 = 0.85f;
					int num189 = (int)base.Center.X / 16;
					int num190 = (int)(position.Y + (float)height) / 16;
					int num192 = 0;
					if (Main.tile[num189, num190].nactive() && Main.tileSolid[Main.tile[num189, num190].type] && !Main.tileSolidTop[Main.tile[num189, num190].type])
					{
						num192 = 1;
					}
					else
					{
						for (; num192 < 150 && num190 + num192 < Main.maxTilesY; num192++)
						{
							int num193 = num190 + num192;
							if (Main.tile[num189, num193].nactive() && Main.tileSolid[Main.tile[num189, num193].type] && !Main.tileSolidTop[Main.tile[num189, num193].type])
							{
								num192--;
								break;
							}
						}
					}
					float num194 = num192 * 16;
					float num195 = 170f;
					if (num194 < num195)
					{
						float num196 = -4f;
						if (0f - num196 > num194)
						{
							num196 = 0f - num194;
						}
						velocity.Y = MathHelper.Lerp(velocity.Y, num196, 0.05f);
					}
					else
					{
						velocity.Y *= num188;
					}
					velocity.X *= num188;
					break;
				}
				}
				switch (num178)
				{
				case 4:
				{
					Vector2 vector69 = player10.Center + new Vector2(0f, -250f) - center6;
					if (((Vector2)(ref vector69)).Length() < 50f)
					{
						this.ai[3] = 439f;
						break;
					}
					((Vector2)(ref vector69)).Normalize();
					velocity = Vector2.Lerp(velocity, vector69 * 16f, 0.1f);
					break;
				}
				case 5:
					velocity *= 0.85f;
					break;
				}
			}
			else if (this.ai[0] == 1f)
			{
				dontTakeDamage = false;
				velocity *= 0.96f;
				float num204 = 150f;
				this.ai[1]++;
				if (this.ai[1] >= num204)
				{
					this.ai[0] = 2f;
					this.ai[1] = 0f;
					rotation = 0f;
					netUpdate = true;
				}
				else if (this.ai[1] < 40f)
				{
					Vector2 unitY2 = Vector2.UnitY;
					double radians19 = this.ai[1] / 40f * ((float)Math.PI * 2f);
					val29 = default(Vector2);
					rotation = unitY2.RotatedBy(radians19, val29).Y * 0.2f;
				}
				else if (this.ai[1] < 80f)
				{
					Vector2 unitY3 = Vector2.UnitY;
					double radians20 = this.ai[1] / 20f * ((float)Math.PI * 2f);
					val29 = default(Vector2);
					rotation = unitY3.RotatedBy(radians20, val29).Y * 0.3f;
				}
				else if (this.ai[1] < 120f)
				{
					Vector2 unitY4 = Vector2.UnitY;
					double radians21 = this.ai[1] / 10f * ((float)Math.PI * 2f);
					val29 = default(Vector2);
					rotation = unitY4.RotatedBy(radians21, val29).Y * 0.4f;
				}
				else
				{
					rotation = (this.ai[1] - 120f) / 30f * ((float)Math.PI * 2f);
				}
			}
			else if (this.ai[0] == 2f)
			{
				int num205 = 80;
				float num206 = 3600f;
				float num207 = 120f;
				float num208 = 60f;
				int num209 = 0;
				if (this.ai[3] % num207 >= num208)
				{
					num209 = 1;
				}
				int num210 = num209;
				num209 = 0;
				this.ai[3]++;
				if (this.ai[3] % num207 >= num208)
				{
					num209 = 1;
				}
				if (num209 != num210)
				{
					if (num209 == 1)
					{
						this.ai[2] = ((Math.Sign((player10.Center - center6).X) == 1) ? 1 : (-1));
						if (Main.netMode != 1)
						{
							Vector2 center7 = base.Center;
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), center7.X, center7.Y, 0f, 0f, 447, num205, 0f, Main.myPlayer, whoAmI + 1);
						}
						SoundEngine.PlaySound(in SoundID.Item12, base.Center);
					}
					netUpdate = true;
				}
				if (this.ai[3] >= num206)
				{
					this.ai[0] = 2f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
				}
				else if (num209 == 0)
				{
					Vector2 vector70 = player10.Center + new Vector2(this.ai[2] * 350f, -250f) - center6;
					((Vector2)(ref vector70)).Normalize();
					velocity = Vector2.Lerp(velocity, vector70 * 16f, 0.1f);
				}
				else
				{
					int num211 = (int)base.Center.X / 16;
					int num212 = (int)(position.Y + (float)height) / 16;
					int num214 = 0;
					if (Main.tile[num211, num212].nactive() && Main.tileSolid[Main.tile[num211, num212].type] && !Main.tileSolidTop[Main.tile[num211, num212].type])
					{
						num214 = 1;
					}
					else
					{
						for (; num214 < 150 && num212 + num214 < Main.maxTilesY; num214++)
						{
							int num215 = num212 + num214;
							if (Main.tile[num211, num215].nactive() && Main.tileSolid[Main.tile[num211, num215].type] && !Main.tileSolidTop[Main.tile[num211, num215].type])
							{
								num214--;
								break;
							}
						}
					}
					float num216 = num214 * 16;
					float num217 = 250f;
					if (num216 < num217)
					{
						float num218 = -4f;
						if (0f - num218 > num216)
						{
							num218 = 0f - num216;
						}
						velocity.Y = MathHelper.Lerp(velocity.Y, num218, 0.05f);
					}
					else
					{
						velocity.Y *= 0.95f;
					}
					velocity.X = 8f * this.ai[2];
				}
				rotation = 0f;
			}
			bool flag82 = false;
			if (position.Y < -100f)
			{
				flag82 = true;
			}
			if (position.X < -100f)
			{
				flag82 = true;
			}
			if (position.Y > (float)(Main.maxTilesY * 16 + 100))
			{
				flag82 = true;
			}
			if (position.X > (float)(Main.maxTilesX * 16 + 100))
			{
				flag82 = true;
			}
			if (flag82)
			{
				position = Vector2.Clamp(position, new Vector2(-100f), new Vector2(100f) + new Vector2((float)Main.maxTilesX, (float)Main.maxTilesY) * 16f);
				active = false;
				netUpdate = true;
			}
		}
		else if (aiStyle == 77)
		{
			if (this.ai[0] != -1f && this.ai[0] != 2f && Main.rand.Next(200) == 0)
			{
				SoundEngine.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, Main.rand.Next(93, 100));
			}
			if (localAI[3] == 0f)
			{
				netUpdate = true;
				localAI[3] = 1f;
				this.ai[0] = -1f;
			}
			if (this.ai[0] == -2f)
			{
				dontTakeDamage = true;
				this.ai[1]++;
				if (this.ai[1] == 30f)
				{
					SoundEngine.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, 92);
				}
				if (this.ai[1] < 60f)
				{
					MoonlordDeathDrama.RequestLight(this.ai[1] / 30f, base.Center);
				}
				if (this.ai[1] == 60f)
				{
					this.ai[1] = 0f;
					this.ai[0] = 0f;
					if (Main.netMode != 1 && type == 398)
					{
						this.ai[2] = Main.rand.Next(3);
						this.ai[2] = 0f;
						netUpdate = true;
					}
				}
			}
			if (this.ai[0] == -1f)
			{
				dontTakeDamage = true;
				this.ai[1]++;
				if (this.ai[1] == 30f)
				{
					SoundEngine.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, 92);
				}
				if (this.ai[1] < 60f)
				{
					MoonlordDeathDrama.RequestLight(this.ai[1] / 30f, base.Center);
				}
				if (this.ai[1] == 60f)
				{
					this.ai[1] = 0f;
					this.ai[0] = 0f;
					if (Main.netMode != 1 && type == 398)
					{
						this.ai[2] = Main.rand.Next(3);
						this.ai[2] = 0f;
						netUpdate = true;
						int[] array5 = new int[3];
						int num219 = 0;
						for (int num220 = 0; num220 < 2; num220++)
						{
							int num221 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X + num220 * 800 - 400, (int)base.Center.Y - 100, 397, whoAmI);
							Main.npc[num221].ai[2] = num220;
							Main.npc[num221].netUpdate = true;
							array5[num219++] = num221;
						}
						int num222 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y - 400, 396, whoAmI);
						Main.npc[num222].netUpdate = true;
						array5[num219++] = num222;
						for (int num223 = 0; num223 < 3; num223++)
						{
							Main.npc[array5[num223]].ai[3] = whoAmI;
						}
						for (int num226 = 0; num226 < 3; num226++)
						{
							localAI[num226] = array5[num226];
						}
					}
				}
			}
			if (this.ai[0] == 0f)
			{
				dontTakeDamage = true;
				TargetClosest(faceTarget: false);
				Vector2 vector71 = Main.player[target].Center - base.Center + new Vector2(0f, 130f);
				if (((Vector2)(ref vector71)).Length() > 20f)
				{
					Vector2 desiredVelocity = Vector2.Normalize(vector71 - velocity) * 8f;
					Vector2 value7 = velocity;
					SimpleFlyMovement(desiredVelocity, 0.5f);
					velocity = Vector2.Lerp(velocity, value7, 0.5f);
				}
				if (Main.netMode != 1)
				{
					bool flag83 = false;
					if (localAI[0] < 0f || localAI[1] < 0f || localAI[2] < 0f)
					{
						flag83 = true;
					}
					else if (!Main.npc[(int)localAI[0]].active || Main.npc[(int)localAI[0]].type != 397)
					{
						flag83 = true;
					}
					else if (!Main.npc[(int)localAI[1]].active || Main.npc[(int)localAI[1]].type != 397)
					{
						flag83 = true;
					}
					else if (!Main.npc[(int)localAI[2]].active || Main.npc[(int)localAI[2]].type != 396)
					{
						flag83 = true;
					}
					if (flag83)
					{
						life = 0;
						HitEffect();
						active = false;
					}
					bool flag84 = true;
					if (Main.npc[(int)localAI[0]].ai[0] != -2f)
					{
						flag84 = false;
					}
					if (Main.npc[(int)localAI[1]].ai[0] != -2f)
					{
						flag84 = false;
					}
					if (Main.npc[(int)localAI[2]].ai[0] != -2f)
					{
						flag84 = false;
					}
					if (flag84)
					{
						this.ai[0] = 1f;
						dontTakeDamage = false;
						netUpdate = true;
					}
				}
			}
			else if (this.ai[0] == 1f)
			{
				dontTakeDamage = false;
				TargetClosest(faceTarget: false);
				Vector2 vector72 = Main.player[target].Center - base.Center + new Vector2(0f, 130f);
				if (((Vector2)(ref vector72)).Length() > 20f)
				{
					Vector2 desiredVelocity2 = Vector2.Normalize(vector72 - velocity) * 8f;
					Vector2 value8 = velocity;
					SimpleFlyMovement(desiredVelocity2, 0.5f);
					velocity = Vector2.Lerp(velocity, value8, 0.5f);
				}
			}
			else if (this.ai[0] == 2f)
			{
				dontTakeDamage = true;
				((Vector2)(ref val29))._002Ector((float)direction, -0.5f);
				velocity = Vector2.Lerp(velocity, val29, 0.98f);
				this.ai[1]++;
				if (this.ai[1] < 60f)
				{
					MoonlordDeathDrama.RequestLight(this.ai[1] / 60f, base.Center);
				}
				if (this.ai[1] == 60f)
				{
					for (int num227 = 0; num227 < 1000; num227++)
					{
						Projectile projectile = Main.projectile[num227];
						if (projectile.active && (projectile.type == 456 || projectile.type == 462 || projectile.type == 455 || projectile.type == 452 || projectile.type == 454))
						{
							projectile.Kill();
						}
					}
					for (int num228 = 0; num228 < 200; num228++)
					{
						NPC nPC19 = Main.npc[num228];
						if (nPC19.active && nPC19.type == 400)
						{
							nPC19.HitEffect(0, 9999.0);
							nPC19.active = false;
						}
					}
				}
				if (this.ai[1] % 3f == 0f && this.ai[1] < 580f && this.ai[1] > 60f)
				{
					Vector2 vector73 = Utils.RandomVector2(Main.rand, -1f, 1f);
					if (vector73 != Vector2.Zero)
					{
						((Vector2)(ref vector73)).Normalize();
					}
					vector73 *= 20f + Main.rand.NextFloat() * 400f;
					bool flag85 = true;
					Vector2 vector74 = base.Center + vector73;
					Point point14 = vector74.ToTileCoordinates();
					if (!WorldGen.InWorld(point14.X, point14.Y))
					{
						flag85 = false;
					}
					if (flag85 && WorldGen.SolidTile(point14.X, point14.Y))
					{
						flag85 = false;
					}
					float num229 = Main.rand.Next(6, 19);
					float num230 = (float)Math.PI * 2f / num229;
					float num231 = (float)Math.PI * 2f * Main.rand.NextFloat();
					float num232 = 1f + Main.rand.NextFloat() * 2f;
					float num233 = 1f + Main.rand.NextFloat();
					float fadeIn = 0.4f + Main.rand.NextFloat();
					int num234 = Utils.SelectRandom<int>(Main.rand, 31, 229);
					if (flag85 && !Main.dedServ)
					{
						MoonlordDeathDrama.AddExplosion(vector74);
						for (float num235 = 0f; num235 < num229 * 2f; num235++)
						{
							Dust[] dust88 = Main.dust;
							newColor = default(Color);
							Dust dust83 = dust88[Dust.NewDust(vector74, 0, 0, 229, 0f, 0f, 0, newColor)];
							dust83.noGravity = true;
							dust83.position = vector74;
							Vector2 unitY5 = Vector2.UnitY;
							double radians22 = num231 + num230 * num235;
							val29 = default(Vector2);
							dust83.velocity = unitY5.RotatedBy(radians22, val29) * num232 * (Main.rand.NextFloat() * 1.6f + 1.6f);
							dust83.fadeIn = fadeIn;
							dust83.scale = num233;
						}
					}
					for (float num237 = 0f; num237 < this.ai[1] / 60f; num237++)
					{
						Vector2 vector75 = Utils.RandomVector2(Main.rand, -1f, 1f);
						if (vector75 != Vector2.Zero)
						{
							((Vector2)(ref vector75)).Normalize();
						}
						vector75 *= 20f + Main.rand.NextFloat() * 800f;
						Vector2 vec = base.Center + vector75;
						Point point15 = vec.ToTileCoordinates();
						bool flag86 = true;
						if (!WorldGen.InWorld(point15.X, point15.Y))
						{
							flag86 = false;
						}
						if (flag86 && WorldGen.SolidTile(point15.X, point15.Y))
						{
							flag86 = false;
						}
						if (flag86)
						{
							Dust[] dust89 = Main.dust;
							newColor = default(Color);
							Dust dust84 = dust89[Dust.NewDust(vec, 0, 0, num234, 0f, 0f, 0, newColor)];
							dust84.noGravity = true;
							dust84.position = vec;
							dust84.velocity = -Vector2.UnitY * num232 * (Main.rand.NextFloat() * 0.9f + 1.6f);
							dust84.fadeIn = fadeIn;
							dust84.scale = num233;
						}
					}
				}
				if (this.ai[1] % 15f == 0f && this.ai[1] < 480f && this.ai[1] >= 90f && Main.netMode != 1)
				{
					Vector2 vector76 = Utils.RandomVector2(Main.rand, -1f, 1f);
					if (vector76 != Vector2.Zero)
					{
						((Vector2)(ref vector76)).Normalize();
					}
					vector76 *= 20f + Main.rand.NextFloat() * 400f;
					bool flag87 = true;
					Vector2 vec2 = base.Center + vector76;
					Point point16 = vec2.ToTileCoordinates();
					if (!WorldGen.InWorld(point16.X, point16.Y))
					{
						flag87 = false;
					}
					if (flag87 && WorldGen.SolidTile(point16.X, point16.Y))
					{
						flag87 = false;
					}
					if (flag87)
					{
						float num238 = (float)(Main.rand.Next(4) < 2).ToDirectionInt() * ((float)Math.PI / 8f + (float)Math.PI / 4f * Main.rand.NextFloat());
						Vector2 spinningpoint31 = new Vector2(0f, (0f - Main.rand.NextFloat()) * 0.5f - 0.5f);
						double radians23 = num238;
						val29 = default(Vector2);
						Vector2 vector77 = Utils.RotatedBy(spinningpoint31, radians23, val29) * 6f;
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vec2.X, vec2.Y, vector77.X, vector77.Y, 622, 0, 0f, Main.myPlayer);
					}
				}
				if (this.ai[1] == 1f)
				{
					SoundEngine.PlaySound(in SoundID.NPCDeath61, base.Center);
				}
				if (this.ai[1] >= 480f)
				{
					MoonlordDeathDrama.RequestLight((this.ai[1] - 480f) / 120f, base.Center);
				}
				if (this.ai[1] >= 600f)
				{
					life = 0;
					HitEffect(0, 1337.0);
					checkDead();
					return;
				}
			}
			else if (this.ai[0] == 3f)
			{
				dontTakeDamage = true;
				((Vector2)(ref val29))._002Ector((float)direction, -0.5f);
				velocity = Vector2.Lerp(velocity, val29, 0.98f);
				this.ai[1]++;
				if (this.ai[1] < 60f)
				{
					MoonlordDeathDrama.RequestLight(this.ai[1] / 40f, base.Center);
				}
				if (this.ai[1] == 40f)
				{
					for (int num239 = 0; num239 < 1000; num239++)
					{
						Projectile projectile5 = Main.projectile[num239];
						if (projectile5.active && (projectile5.type == 456 || projectile5.type == 462 || projectile5.type == 455 || projectile5.type == 452 || projectile5.type == 454))
						{
							projectile5.active = false;
							if (Main.netMode != 1)
							{
								NetMessage.SendData(27, -1, -1, null, num239);
							}
						}
					}
					for (int num240 = 0; num240 < 200; num240++)
					{
						NPC nPC20 = Main.npc[num240];
						if (nPC20.active && nPC20.type == 400)
						{
							nPC20.active = false;
							if (Main.netMode != 1)
							{
								NetMessage.SendData(23, -1, -1, null, nPC20.whoAmI);
							}
						}
					}
					for (int num241 = 0; num241 < 600; num241++)
					{
						Gore gore3 = Main.gore[num241];
						if (gore3.active && gore3.type >= 619 && gore3.type <= 622)
						{
							gore3.active = false;
						}
					}
				}
				if (this.ai[1] >= 60f)
				{
					for (int num242 = 0; num242 < 200; num242++)
					{
						NPC nPC21 = Main.npc[num242];
						if (nPC21.active && (nPC21.type == 400 || nPC21.type == 397 || nPC21.type == 396))
						{
							nPC21.active = false;
							if (Main.netMode != 1)
							{
								NetMessage.SendData(23, -1, -1, null, nPC21.whoAmI);
							}
						}
					}
					active = false;
					if (Main.netMode != 1)
					{
						NetMessage.SendData(23, -1, -1, null, whoAmI);
					}
					LunarApocalypseIsUp = false;
					if (Main.netMode == 2)
					{
						NetMessage.SendData(7);
					}
					return;
				}
			}
			bool flag88 = false;
			if (this.ai[0] == -2f || this.ai[0] == -1f || this.ai[0] == 2f || this.ai[0] == 3f)
			{
				flag88 = true;
			}
			if (Main.player[target].active && !Main.player[target].dead)
			{
				flag88 = true;
			}
			if (!flag88)
			{
				for (int num243 = 0; num243 < 255; num243++)
				{
					if (Main.player[num243].active && !Main.player[num243].dead)
					{
						flag88 = true;
						break;
					}
				}
			}
			if (!flag88)
			{
				this.ai[0] = 3f;
				this.ai[1] = 0f;
				netUpdate = true;
			}
			if (!(this.ai[0] >= 0f) || !(this.ai[0] < 2f) || Main.netMode == 1 || !(Distance(Main.player[target].Center) > 2400f))
			{
				return;
			}
			this.ai[0] = -2f;
			netUpdate = true;
			Vector2 vector78 = Main.player[target].Center - Vector2.UnitY * 150f - base.Center;
			position += vector78;
			if (Main.npc[(int)localAI[0]].active)
			{
				NPC nPC13 = Main.npc[(int)localAI[0]];
				NPC nPC23 = nPC13;
				nPC23.position += vector78;
				Main.npc[(int)localAI[0]].netUpdate = true;
			}
			if (Main.npc[(int)localAI[1]].active)
			{
				NPC nPC14 = Main.npc[(int)localAI[1]];
				NPC nPC23 = nPC14;
				nPC23.position += vector78;
				Main.npc[(int)localAI[1]].netUpdate = true;
			}
			if (Main.npc[(int)localAI[2]].active)
			{
				NPC nPC15 = Main.npc[(int)localAI[2]];
				NPC nPC23 = nPC15;
				nPC23.position += vector78;
				Main.npc[(int)localAI[2]].netUpdate = true;
			}
			for (int num244 = 0; num244 < 200; num244++)
			{
				NPC nPC22 = Main.npc[num244];
				if (nPC22.active && nPC22.type == 400)
				{
					NPC nPC16 = nPC22;
					NPC nPC23 = nPC16;
					nPC23.position += vector78;
					nPC22.netUpdate = true;
				}
			}
		}
		else if (aiStyle == 78)
		{
			InitializeMoonLordAttacks();
			if (!Main.npc[(int)this.ai[3]].active || Main.npc[(int)this.ai[3]].type != 398)
			{
				life = 0;
				HitEffect();
				active = false;
			}
			bool flag89 = this.ai[2] == 0f;
			float num245 = -flag89.ToDirectionInt();
			spriteDirection = (int)num245;
			if (frameCounter == 19.0 && !dontTakeDamage)
			{
				PopAllAttachedProjectilesAndTakeDamageForThem();
			}
			dontTakeDamage = frameCounter >= 21.0;
			Vector2 vector80 = default(Vector2);
			((Vector2)(ref vector80))._002Ector(30f, 66f);
			float num246 = 0f;
			float num248 = 0f;
			bool flag91 = true;
			int num249 = 0;
			if (this.ai[0] != -2f)
			{
				float num250 = this.ai[0];
				this.ai[1]++;
				int num251 = (int)Main.npc[(int)this.ai[3]].ai[2];
				int num252 = ((!flag89) ? 1 : 0);
				int num253 = 0;
				int num254 = 0;
				for (; num253 < 5; num253++)
				{
					num248 = MoonLordAttacksArray[num251, num252, 1, num253];
					if (!(num248 + (float)num254 <= this.ai[1]))
					{
						break;
					}
					num254 += (int)num248;
				}
				if (num253 == 5)
				{
					num253 = 0;
					this.ai[1] = 0f;
					num248 = MoonLordAttacksArray[num251, num252, 1, num253];
					num254 = 0;
				}
				this.ai[0] = MoonLordAttacksArray[num251, num252, 0, num253];
				num246 = (int)this.ai[1] - num254;
				if (this.ai[0] != num250)
				{
					netUpdate = true;
				}
			}
			if (this.ai[0] == -2f)
			{
				damage = 80;
				num249 = 0;
				dontTakeDamage = true;
				this.ai[1]++;
				if (this.ai[1] >= 32f)
				{
					this.ai[1] = 0f;
				}
				if (this.ai[1] < 0f)
				{
					this.ai[1] = 0f;
				}
				Vector2 center8 = Main.npc[(int)this.ai[3]].Center;
				Vector2 vector81 = center8 + new Vector2(350f * num245, -100f);
				Vector2 vector82 = vector81 - base.Center;
				if (((Vector2)(ref vector82)).Length() > 20f)
				{
					((Vector2)(ref vector82)).Normalize();
					vector82 *= 6f;
					Vector2 value9 = velocity;
					if (vector82 != Vector2.Zero)
					{
						SimpleFlyMovement(vector82, 0.3f);
					}
					velocity = Vector2.Lerp(value9, velocity, 0.5f);
				}
			}
			else if (this.ai[0] == 0f)
			{
				num249 = 3;
				localAI[1] -= 0.05f;
				if (localAI[1] < 0f)
				{
					localAI[1] = 0f;
				}
				Vector2 center9 = Main.npc[(int)this.ai[3]].Center;
				Vector2 vector83 = center9 + new Vector2(350f * num245, -100f);
				Vector2 vector84 = vector83 - base.Center;
				if (((Vector2)(ref vector84)).Length() > 20f)
				{
					((Vector2)(ref vector84)).Normalize();
					vector84 *= 6f;
					Vector2 value10 = velocity;
					if (vector84 != Vector2.Zero)
					{
						SimpleFlyMovement(vector84, 0.3f);
					}
					velocity = Vector2.Lerp(value10, velocity, 0.5f);
				}
			}
			else if (this.ai[0] == 1f)
			{
				num249 = 0;
				int num255 = 7;
				int num256 = 4;
				if (num246 >= (float)(num255 * num256 * 2))
				{
					localAI[1] -= 0.07f;
					if (localAI[1] < 0f)
					{
						localAI[1] = 0f;
					}
				}
				else if (num246 >= (float)(num255 * num256))
				{
					localAI[1] += 0.05f;
					if (localAI[1] > 0.75f)
					{
						localAI[1] = 0.75f;
					}
					float num257 = (float)Math.PI * 2f * (num246 % (float)(num255 * num256)) / (float)(num255 * num256) - (float)Math.PI / 2f;
					localAI[0] = Utils.ToRotation(new Vector2((float)Math.Cos(num257) * vector80.X, (float)Math.Sin(num257) * vector80.Y));
					if (num246 % (float)num256 == 0f)
					{
						Vector2 vector85 = default(Vector2);
						((Vector2)(ref vector85))._002Ector(1f * (0f - num245), 3f);
						Vector2 vector86 = Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), vector80 * localAI[1]);
						Vector2 vector87 = base.Center + Vector2.Normalize(vector86) * ((Vector2)(ref vector80)).Length() * 0.4f + vector85;
						Vector2 vector88 = Vector2.Normalize(vector86) * 8f;
						float ai = ((float)Math.PI * 2f * (float)Main.rand.NextDouble() - (float)Math.PI) / 30f + (float)Math.PI / 180f * num245;
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector87.X, vector87.Y, vector88.X, vector88.Y, 452, 30, 0f, Main.myPlayer, 0f, ai);
					}
				}
				else
				{
					localAI[1] += 0.02f;
					if (localAI[1] > 0.75f)
					{
						localAI[1] = 0.75f;
					}
					float num259 = (float)Math.PI * 2f * (num246 % (float)(num255 * num256)) / (float)(num255 * num256) - (float)Math.PI / 2f;
					localAI[0] = Utils.ToRotation(new Vector2((float)Math.Cos(num259) * vector80.X, (float)Math.Sin(num259) * vector80.Y));
				}
			}
			else if (this.ai[0] == 2f)
			{
				localAI[1] -= 0.05f;
				if (localAI[1] < 0f)
				{
					localAI[1] = 0f;
				}
				Vector2 center10 = Main.npc[(int)this.ai[3]].Center;
				Vector2 vector89 = new Vector2(220f * num245, -60f) + center10;
				vector89 += new Vector2(num245 * 100f, -50f);
				Vector2 vector91 = default(Vector2);
				((Vector2)(ref vector91))._002Ector(400f * num245, -60f);
				if (num246 < 30f)
				{
					Vector2 vector92 = vector89 - base.Center;
					if (vector92 != Vector2.Zero)
					{
						Vector2 vector93 = vector92;
						((Vector2)(ref vector93)).Normalize();
						velocity = Vector2.SmoothStep(velocity, vector93 * Math.Min(8f, ((Vector2)(ref vector92)).Length()), 0.2f);
					}
				}
				else if (num246 < 210f)
				{
					num249 = 1;
					int num260 = (int)num246 - 30;
					if (num260 % 30 == 0 && Main.netMode != 1)
					{
						Vector2 vector94 = default(Vector2);
						((Vector2)(ref vector94))._002Ector(5f * num245, -8f);
						int num261 = num260 / 30;
						vector94.X += ((float)num261 - 3.5f) * num245 * 3f;
						vector94.Y += ((float)num261 - 4.5f) * 1f;
						vector94 *= 1.2f;
						int num262 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, vector94.X, vector94.Y, 454, 40, 1f, Main.myPlayer, 0f, whoAmI);
					}
					Vector2 vector95 = Vector2.SmoothStep(vector89, vector89 + vector91, (num246 - 30f) / 180f) - base.Center;
					if (vector95 != Vector2.Zero)
					{
						Vector2 vector96 = vector95;
						((Vector2)(ref vector96)).Normalize();
						velocity = Vector2.Lerp(velocity, vector96 * Math.Min(20f, ((Vector2)(ref vector95)).Length()), 0.5f);
					}
				}
				else if (num246 < 282f)
				{
					num249 = 0;
					velocity *= 0.9f;
				}
				else if (num246 < 287f)
				{
					num249 = 1;
					velocity *= 0.9f;
				}
				else if (num246 < 292f)
				{
					num249 = 2;
					velocity *= 0.9f;
				}
				else if (num246 < 300f)
				{
					num249 = 3;
					if (num246 == 292f && Main.netMode != 1)
					{
						int num263 = Player.FindClosest(position, width, height);
						Vector2 vector97 = Vector2.Normalize(Main.player[num263].Center - (base.Center + Vector2.UnitY * -350f));
						if (float.IsNaN(vector97.X) || float.IsNaN(vector97.Y))
						{
							vector97 = Vector2.UnitY;
						}
						vector97 *= 12f;
						for (int num264 = 0; num264 < 1000; num264++)
						{
							Projectile projectile6 = Main.projectile[num264];
							if (projectile6.active && projectile6.type == 454 && projectile6.ai[1] == (float)whoAmI && projectile6.ai[0] != -1f)
							{
								projectile6.ai[0] = -1f;
								projectile6.velocity = vector97;
								projectile6.netUpdate = true;
								NetMessage.SendData(27, -1, -1, null, num264);
							}
						}
					}
					Vector2 vector98 = Vector2.SmoothStep(vector89, vector89 + vector91, 1f - (num246 - 270f) / 30f) - base.Center;
					if (vector98 != Vector2.Zero)
					{
						Vector2 vector99 = vector98;
						((Vector2)(ref vector99)).Normalize();
						velocity = Vector2.Lerp(velocity, vector99 * Math.Min(14f, ((Vector2)(ref vector98)).Length()), 0.1f);
					}
				}
				else
				{
					num249 = 3;
					Vector2 vector100 = vector89 - base.Center;
					if (vector100 != Vector2.Zero)
					{
						Vector2 vector102 = vector100;
						((Vector2)(ref vector102)).Normalize();
						velocity = Vector2.SmoothStep(velocity, vector102 * Math.Min(8f, ((Vector2)(ref vector100)).Length()), 0.2f);
					}
				}
			}
			else if (this.ai[0] == 3f)
			{
				if (num246 == 0f)
				{
					TargetClosest(faceTarget: false);
					netUpdate = true;
				}
				Vector2 v7 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
				localAI[0] = localAI[0].AngleLerp(v7.ToRotation(), 0.5f);
				localAI[1] += 0.05f;
				if (localAI[1] > 1f)
				{
					localAI[1] = 1f;
				}
				if (num246 == num248 - 35f)
				{
					SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 6);
				}
				if ((num246 == num248 - 14f || num246 == num248 - 7f || num246 == num248) && Main.netMode != 1)
				{
					Vector2 vector103 = Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), vector80 * localAI[1]);
					Vector2 vector104 = Vector2.Normalize(v7) * 8f;
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + vector103.X, base.Center.Y + vector103.Y, vector104.X, vector104.Y, 462, 30, 0f, Main.myPlayer);
				}
			}
			if (flag91)
			{
				Vector2 center11 = Main.npc[(int)this.ai[3]].Center;
				Vector2 vector105 = new Vector2(220f * num245, -60f) + center11;
				Vector2 vector106 = vector105 + new Vector2(num245 * 110f, -150f);
				Vector2 max = vector106 + new Vector2(num245 * 370f, 150f);
				if (vector106.X > max.X)
				{
					Utils.Swap(ref vector106.X, ref max.X);
				}
				if (vector106.Y > max.Y)
				{
					Utils.Swap(ref vector106.Y, ref max.Y);
				}
				Vector2 vector107 = Vector2.Clamp(base.Center + velocity, vector106, max);
				if (vector107 != base.Center + velocity)
				{
					base.Center = vector107 - velocity;
				}
			}
			int num265 = num249 * 7;
			if ((double)num265 > frameCounter)
			{
				frameCounter++;
			}
			if ((double)num265 < frameCounter)
			{
				frameCounter--;
			}
			if (frameCounter < 0.0)
			{
				frameCounter = 0.0;
			}
			if (frameCounter > 21.0)
			{
				frameCounter = 21.0;
			}
			int num266 = 0;
			if (flag89)
			{
				num266 = 0;
			}
			switch (num266)
			{
			case 1:
				if (this.ai[0] == 0f)
				{
					if ((this.ai[1] += 1f) >= 20f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 1f;
						netUpdate = true;
					}
					velocity = Vector2.UnitX * 4f;
				}
				else if (this.ai[0] == 1f)
				{
					if ((this.ai[1] += 1f) >= 20f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 2f;
						netUpdate = true;
					}
					velocity = Vector2.UnitX * -4f;
				}
				else if (this.ai[0] == 2f || this.ai[0] == 4f)
				{
					if ((this.ai[1] += 1f) >= 20f)
					{
						this.ai[1] = 0f;
						this.ai[0]++;
						netUpdate = true;
					}
					velocity = Vector2.UnitY * -4f * (float)(flag89 ? 1 : (-1));
				}
				else
				{
					if (this.ai[0] != 3f && this.ai[0] != 5f)
					{
						break;
					}
					if ((this.ai[1] += 1f) >= 20f)
					{
						this.ai[1] = 0f;
						this.ai[0]++;
						if (this.ai[0] == 6f)
						{
							this.ai[0] = 0f;
						}
						netUpdate = true;
					}
					velocity = Vector2.UnitY * 4f * (float)(flag89 ? 1 : (-1));
				}
				break;
			case 2:
			{
				Vector2 vector108 = default(Vector2);
				((Vector2)(ref vector108))._002Ector(30f, 66f);
				TargetClosest(faceTarget: false);
				Vector2 v8 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - base.Center;
				float num267 = ((Vector2)(ref v8)).Length() / 200f;
				if (num267 > 1f)
				{
					num267 = 1f;
				}
				num267 = 1f - num267;
				num267 *= 2f;
				if (num267 > 1f)
				{
					num267 = 1f;
				}
				localAI[0] = v8.ToRotation();
				localAI[1] = num267;
				localAI[1] = 1f;
				break;
			}
			case 3:
			{
				int num274 = 7;
				int num275 = 4;
				this.ai[1]++;
				if (this.ai[1] >= (float)(num274 * num275 * 10))
				{
					this.ai[1] = 0f;
					break;
				}
				if (this.ai[1] >= (float)(num274 * num275))
				{
					localAI[1] -= 0.07f;
					if (localAI[1] < 0f)
					{
						localAI[1] = 0f;
					}
					break;
				}
				localAI[1] += 0.05f;
				if (localAI[1] > 0.75f)
				{
					localAI[1] = 0.75f;
				}
				float num276 = (float)Math.PI * 2f * (this.ai[1] % (float)(num274 * num275)) / (float)(num274 * num275) - (float)Math.PI / 2f;
				localAI[0] = Utils.ToRotation(new Vector2((float)Math.Cos(num276) * vector80.X, (float)Math.Sin(num276) * vector80.Y));
				if (this.ai[1] % (float)num275 == 0f)
				{
					Vector2 vector121 = default(Vector2);
					((Vector2)(ref vector121))._002Ector(1f * (0f - num245), 3f);
					Vector2 vector122 = Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), vector80 * localAI[1]);
					Vector2 vector123 = base.Center + Vector2.Normalize(vector122) * ((Vector2)(ref vector80)).Length() * 0.4f + vector121;
					Vector2 vector125 = Vector2.Normalize(vector122) * 8f;
					float ai2 = ((float)Math.PI * 2f * (float)Main.rand.NextDouble() - (float)Math.PI) / 30f + (float)Math.PI / 180f * num245;
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector123.X, vector123.Y, vector125.X, vector125.Y, 452, 5, 0f, Main.myPlayer, 0f, ai2);
				}
				break;
			}
			case 4:
			{
				Vector2 center13 = Main.npc[(int)this.ai[3]].Center;
				Vector2 vector109 = new Vector2(220f * num245, -60f) + center13;
				vector109 += new Vector2(num245 * 100f, -50f);
				Vector2 vector110 = default(Vector2);
				((Vector2)(ref vector110))._002Ector(400f * num245, -60f);
				this.ai[1]++;
				if (this.ai[1] < 30f)
				{
					Vector2 vector111 = vector109 - base.Center;
					if (vector111 != Vector2.Zero)
					{
						Vector2 vector114 = vector111;
						((Vector2)(ref vector114)).Normalize();
						velocity = Vector2.SmoothStep(velocity, vector114 * Math.Min(8f, ((Vector2)(ref vector111)).Length()), 0.2f);
					}
				}
				else if (this.ai[1] < 210f)
				{
					int num268 = (int)this.ai[1] - 30;
					if (num268 % 30 == 0 && Main.netMode != 1)
					{
						Vector2 vector115 = default(Vector2);
						((Vector2)(ref vector115))._002Ector(5f * num245, -8f);
						int num270 = num268 / 30;
						vector115.X += ((float)num270 - 3.5f) * num245 * 3f;
						vector115.Y += ((float)num270 - 4.5f) * 1f;
						vector115 *= 1.2f;
						int num271 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, vector115.X, vector115.Y, 454, 1, 1f, Main.myPlayer, 0f, whoAmI);
					}
					Vector2 vector116 = Vector2.SmoothStep(vector109, vector109 + vector110, (this.ai[1] - 30f) / 180f) - base.Center;
					if (vector116 != Vector2.Zero)
					{
						Vector2 vector117 = vector116;
						((Vector2)(ref vector117)).Normalize();
						velocity = Vector2.Lerp(velocity, vector117 * Math.Min(4f, ((Vector2)(ref vector116)).Length()), 0.1f);
					}
				}
				else if (this.ai[1] < 270f)
				{
					velocity *= 0.9f;
				}
				else if (this.ai[1] < 300f)
				{
					if (this.ai[1] == 270f && Main.netMode != 1)
					{
						int num272 = Player.FindClosest(position, width, height);
						Vector2 vector118 = Vector2.Normalize(Main.player[num272].Center - (base.Center + Vector2.UnitY * -350f));
						if (float.IsNaN(vector118.X) || float.IsNaN(vector118.Y))
						{
							vector118 = Vector2.UnitY;
						}
						vector118 *= 12f;
						for (int num273 = 0; num273 < 1000; num273++)
						{
							Projectile projectile7 = Main.projectile[num273];
							if (projectile7.active && projectile7.type == 454 && projectile7.ai[1] == (float)whoAmI && projectile7.ai[0] != -1f)
							{
								projectile7.ai[0] = -1f;
								projectile7.velocity = vector118;
								projectile7.netUpdate = true;
							}
						}
					}
					Vector2 vector119 = Vector2.SmoothStep(vector109, vector109 + vector110, 1f - (this.ai[1] - 270f) / 30f) - base.Center;
					if (vector119 != Vector2.Zero)
					{
						Vector2 vector120 = vector119;
						((Vector2)(ref vector120)).Normalize();
						velocity = Vector2.Lerp(velocity, vector120 * Math.Min(14f, ((Vector2)(ref vector119)).Length()), 0.1f);
					}
				}
				else
				{
					this.ai[1] = 0f;
				}
				break;
			}
			case 5:
				dontTakeDamage = true;
				this.ai[1]++;
				if (this.ai[1] >= 40f)
				{
					this.ai[1] = 0f;
				}
				break;
			}
		}
		else if (aiStyle == 79)
		{
			if (!Main.npc[(int)this.ai[3]].active || Main.npc[(int)this.ai[3]].type != 398)
			{
				life = 0;
				HitEffect();
				active = false;
			}
			if (localAI[3] == 13f && !dontTakeDamage)
			{
				PopAllAttachedProjectilesAndTakeDamageForThem();
			}
			dontTakeDamage = localAI[3] >= 15f;
			velocity = Vector2.Zero;
			base.Center = Main.npc[(int)this.ai[3]].Center + new Vector2(0f, -400f);
			Vector2 vector126 = default(Vector2);
			((Vector2)(ref vector126))._002Ector(27f, 59f);
			float num277 = 0f;
			float num278 = 0f;
			int num279 = 0;
			int num281 = 0;
			if (this.ai[0] >= 0f)
			{
				float num282 = this.ai[0];
				this.ai[1]++;
				int num283 = (int)Main.npc[(int)this.ai[3]].ai[2];
				int num284 = 2;
				int num285 = 0;
				int num286 = 0;
				for (; num285 < 5; num285++)
				{
					num278 = MoonLordAttacksArray[num283, num284, 1, num285];
					if (!(num278 + (float)num286 <= this.ai[1]))
					{
						break;
					}
					num286 += (int)num278;
				}
				if (num285 == 5)
				{
					num285 = 0;
					this.ai[1] = 0f;
					num278 = MoonLordAttacksArray[num283, num284, 1, num285];
					num286 = 0;
				}
				this.ai[0] = MoonLordAttacksArray[num283, num284, 0, num285];
				num277 = (int)this.ai[1] - num286;
				if (this.ai[0] != num282)
				{
					netUpdate = true;
				}
			}
			if (this.ai[0] == -3f)
			{
				damage = 0;
				dontTakeDamage = true;
				rotation = MathHelper.Lerp(rotation, (float)Math.PI / 12f, 0.07f);
				this.ai[1]++;
				if (this.ai[1] >= 32f)
				{
					this.ai[1] = 0f;
				}
				if (this.ai[1] < 0f)
				{
					this.ai[1] = 0f;
				}
				if (localAI[2] < 14f)
				{
					localAI[2]++;
				}
			}
			else if (this.ai[0] == -2f)
			{
				if (Main.npc[(int)this.ai[3]].ai[0] == 2f)
				{
					this.ai[0] = -3f;
					return;
				}
				damage = 80;
				dontTakeDamage = true;
				this.ai[1]++;
				if (this.ai[1] >= 32f)
				{
					this.ai[1] = 0f;
				}
				if (this.ai[1] < 0f)
				{
					this.ai[1] = 0f;
				}
				this.ai[2]++;
				if (this.ai[2] >= 555f)
				{
					this.ai[2] = 0f;
				}
				if (this.ai[2] >= 120f)
				{
					num277 = this.ai[2] - 120f;
					num278 = 555f;
					num279 = 2;
					Vector2 vector127 = default(Vector2);
					((Vector2)(ref vector127))._002Ector(0f, 216f);
					if (num277 == 0f && Main.netMode != 1)
					{
						Vector2 vector128 = base.Center + vector127;
						for (int num287 = 0; num287 < 255; num287++)
						{
							Player player11 = Main.player[num287];
							if (player11.active && !player11.dead && Vector2.Distance(player11.Center, vector128) <= 3000f)
							{
								Vector2 vector129 = Main.player[target].Center - vector128;
								if (vector129 != Vector2.Zero)
								{
									((Vector2)(ref vector129)).Normalize();
								}
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector128.X, vector128.Y, vector129.X, vector129.Y, 456, 0, 0f, Main.myPlayer, whoAmI + 1, num287);
							}
						}
					}
					if ((num277 == 120f || num277 == 180f || num277 == 240f) && Main.netMode != 1)
					{
						for (int num288 = 0; num288 < 1000; num288++)
						{
							Projectile projectile8 = Main.projectile[num288];
							if (projectile8.active && projectile8.type == 456 && Main.player[(int)projectile8.ai[1]].FindBuffIndex(145) != -1)
							{
								Vector2 center14 = Main.player[target].Center;
								int num289 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)center14.X, (int)center14.Y, 401);
								Main.npc[num289].netUpdate = true;
								Main.npc[num289].ai[0] = whoAmI + 1;
								Main.npc[num289].ai[1] = num288;
							}
						}
					}
				}
			}
			else if (this.ai[0] == 0f)
			{
				num281 = 3;
				TargetClosest(faceTarget: false);
				Vector2 v9 = Main.player[target].Center - base.Center - new Vector2(0f, -22f);
				float num290 = ((Vector2)(ref v9)).Length() / 500f;
				if (num290 > 1f)
				{
					num290 = 1f;
				}
				num290 = 1f - num290;
				num290 *= 2f;
				if (num290 > 1f)
				{
					num290 = 1f;
				}
				localAI[0] = v9.ToRotation();
				localAI[1] = num290;
				localAI[2] = MathHelper.Lerp(localAI[2], 1f, 0.2f);
			}
			if (this.ai[0] == 1f)
			{
				if (num277 < 180f)
				{
					localAI[1] -= 0.05f;
					if (localAI[1] < 0f)
					{
						localAI[1] = 0f;
					}
					if (num277 >= 60f)
					{
						Vector2 center15 = base.Center;
						int num292 = 0;
						if (num277 >= 120f)
						{
							num292 = 1;
						}
						for (int num293 = 0; num293 < 1 + num292; num293++)
						{
							int num294 = 229;
							float num295 = 0.8f;
							if (num293 % 2 == 1)
							{
								num294 = 229;
								num295 = 1.65f;
							}
							Vector2 vector130 = center15 + ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * vector126 / 2f;
							Vector2 val76 = vector130 - Vector2.One * 8f;
							int num1727 = num294;
							float speedX26 = velocity.X / 2f;
							float speedY25 = velocity.Y / 2f;
							newColor = default(Color);
							int num296 = Dust.NewDust(val76, 16, 16, num1727, speedX26, speedY25, 0, newColor);
							Main.dust[num296].velocity = Vector2.Normalize(center15 - vector130) * 3.5f * (10f - (float)num292 * 2f) / 10f;
							Main.dust[num296].noGravity = true;
							Main.dust[num296].scale = num295;
							Main.dust[num296].customData = this;
						}
					}
				}
				else if (num277 < num278 - 15f)
				{
					if (num277 == 180f && Main.netMode != 1)
					{
						TargetClosest(faceTarget: false);
						Vector2 spinningpoint12 = Main.player[target].Center - base.Center;
						((Vector2)(ref spinningpoint12)).Normalize();
						float num297 = -1f;
						if (spinningpoint12.X < 0f)
						{
							num297 = 1f;
						}
						Vector2 spinningpoint32 = spinningpoint12;
						double radians24 = (0f - num297) * ((float)Math.PI * 2f) / 6f;
						val29 = default(Vector2);
						spinningpoint12 = spinningpoint32.RotatedBy(radians24, val29);
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, spinningpoint12.X, spinningpoint12.Y, 455, 75, 0f, Main.myPlayer, num297 * ((float)Math.PI * 2f) / 540f, whoAmI);
						this.ai[2] = (spinningpoint12.ToRotation() + (float)Math.PI * 3f) * num297;
						netUpdate = true;
					}
					localAI[1] += 0.05f;
					if (localAI[1] > 1f)
					{
						localAI[1] = 1f;
					}
					float num298 = (this.ai[2] >= 0f).ToDirectionInt();
					float num299 = this.ai[2];
					if (num299 < 0f)
					{
						num299 *= -1f;
					}
					num299 += (float)Math.PI * -3f;
					num299 += num298 * ((float)Math.PI * 2f) / 540f;
					localAI[0] = num299;
					this.ai[2] = (num299 + (float)Math.PI * 3f) * num298;
				}
				else
				{
					localAI[1] -= 0.07f;
					if (localAI[1] < 0f)
					{
						localAI[1] = 0f;
						if (Main.netMode != 1 && Main.getGoodWorld && Main.remixWorld)
						{
							for (int num300 = 0; num300 < 30; num300++)
							{
								if (!WorldGen.SolidTile((int)(base.Center.X / 16f), (int)(base.Center.Y / 16f)))
								{
									Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, (float)Main.rand.Next(-1599, 1600) * 0.01f, (float)Main.rand.Next(-1599, 1) * 0.01f, 1021, 70, 10f);
								}
							}
						}
					}
					num281 = 3;
				}
			}
			else if (this.ai[0] == 2f)
			{
				num279 = 2;
				num281 = 3;
				Vector2 vector131 = default(Vector2);
				((Vector2)(ref vector131))._002Ector(0f, 216f);
				if (num277 == 0f && Main.netMode != 1)
				{
					Vector2 vector132 = base.Center + vector131;
					for (int num301 = 0; num301 < 255; num301++)
					{
						Player player2 = Main.player[num301];
						if (player2.active && !player2.dead && Vector2.Distance(player2.Center, vector132) <= 3000f)
						{
							Vector2 vector133 = Main.player[target].Center - vector132;
							if (vector133 != Vector2.Zero)
							{
								((Vector2)(ref vector133)).Normalize();
							}
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector132.X, vector132.Y, vector133.X, vector133.Y, 456, 0, 0f, Main.myPlayer, whoAmI + 1, num301);
						}
					}
				}
				if ((num277 == 120f || num277 == 180f || num277 == 240f) && Main.netMode != 1)
				{
					for (int num303 = 0; num303 < 1000; num303++)
					{
						Projectile projectile9 = Main.projectile[num303];
						if (projectile9.active && projectile9.type == 456 && Main.player[(int)projectile9.ai[1]].FindBuffIndex(145) != -1)
						{
							Vector2 center16 = Main.player[target].Center;
							int num304 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)center16.X, (int)center16.Y, 401);
							Main.npc[num304].netUpdate = true;
							Main.npc[num304].ai[0] = whoAmI + 1;
							Main.npc[num304].ai[1] = num303;
						}
					}
				}
			}
			else if (this.ai[0] == 3f)
			{
				if ((double)num277 == 1.0)
				{
					TargetClosest(faceTarget: false);
					netUpdate = true;
				}
				Vector2 v10 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
				localAI[0] = localAI[0].AngleLerp(v10.ToRotation(), 0.5f);
				localAI[1] += 0.05f;
				if (localAI[1] > 1f)
				{
					localAI[1] = 1f;
				}
				if (num277 == num278 - 35f)
				{
					SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 6);
				}
				if ((num277 == num278 - 14f || num277 == num278 - 7f || num277 == num278) && Main.netMode != 1)
				{
					Vector2 vector134 = Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), vector126 * localAI[1]);
					Vector2 vector136 = Vector2.Normalize(v10) * 8f;
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + vector134.X, base.Center.Y + vector134.Y, vector136.X, vector136.Y, 462, 30, 0f, Main.myPlayer);
				}
			}
			int num305 = num279 * 7;
			if ((float)num305 > localAI[2])
			{
				localAI[2]++;
			}
			if ((float)num305 < localAI[2])
			{
				localAI[2]--;
			}
			if (localAI[2] < 0f)
			{
				localAI[2] = 0f;
			}
			if (localAI[2] > 14f)
			{
				localAI[2] = 14f;
			}
			int num306 = num281 * 5;
			if ((float)num306 > localAI[3])
			{
				localAI[3]++;
			}
			if ((float)num306 < localAI[3])
			{
				localAI[3]--;
			}
			if (localAI[3] < 0f)
			{
				localAI[2] = 0f;
			}
			if (localAI[3] > 15f)
			{
				localAI[2] = 15f;
			}
			int num307 = 0;
			if (num307 == 1)
			{
				Vector2 vector137 = default(Vector2);
				((Vector2)(ref vector137))._002Ector(27f, 59f);
				TargetClosest(faceTarget: false);
				Vector2 v11 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - base.Center;
				float num308 = ((Vector2)(ref v11)).Length() / 200f;
				if (num308 > 1f)
				{
					num308 = 1f;
				}
				num308 = 1f - num308;
				num308 *= 2f;
				if (num308 > 1f)
				{
					num308 = 1f;
				}
				localAI[0] = v11.ToRotation();
				localAI[1] = num308;
				localAI[1] = 1f;
			}
			if (num307 == 2)
			{
				Vector2 vector138 = default(Vector2);
				((Vector2)(ref vector138))._002Ector(27f, 59f);
				float num309 = (float)Math.PI * 2f * ((float)Main.timeForVisualEffects % 600f) / 600f;
				localAI[0] = Utils.ToRotation(new Vector2((float)Math.Cos(num309) * vector138.X, (float)Math.Sin(num309) * vector138.Y));
				localAI[1] = 0.75f;
				if (this.ai[1] == 0f)
				{
					Vector2 vector139 = num309.ToRotationVector2();
					vector139 = Vector2.One;
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, vector139.X, vector139.Y, 455, 1, 0f, Main.myPlayer, (float)Math.PI / 300f, whoAmI);
				}
				this.ai[1]++;
				if (this.ai[1] >= 600f)
				{
					this.ai[1] = 0f;
				}
			}
			if (num307 == 3)
			{
				Vector2 vector140 = default(Vector2);
				((Vector2)(ref vector140))._002Ector(0f, 216f);
				if (this.ai[1] == 0f)
				{
					TargetClosest(faceTarget: false);
					Vector2 vector141 = Main.player[target].Center - base.Center;
					((Vector2)(ref vector141)).Normalize();
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + vector140.X, base.Center.Y + vector140.Y, vector141.X, vector141.Y, 456, 0, 0f, Main.myPlayer, whoAmI + 1, target);
				}
				this.ai[1]++;
				if (this.ai[1] >= 600f)
				{
					this.ai[1] = 0f;
				}
			}
			if (num307 == 4)
			{
				Vector2 vector142 = default(Vector2);
				((Vector2)(ref vector142))._002Ector(27f, 59f);
				TargetClosest(faceTarget: false);
				Vector2 v12 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
				localAI[0] = localAI[0].AngleLerp(v12.ToRotation(), 0.5f);
				localAI[1] = 1f;
				this.ai[1]++;
				if (this.ai[1] == 55f)
				{
					SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 6);
				}
				if (this.ai[1] == 76f || this.ai[1] == 83f || this.ai[1] == 90f)
				{
					val29 = new Vector2(27f, 59f) * localAI[1];
					Vector2 vector143 = Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), val29);
					Vector2 vector144 = Vector2.Normalize(v12) * 8f;
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + vector143.X, base.Center.Y + vector143.Y, vector144.X, vector144.Y, 462, 5, 0f, Main.myPlayer);
				}
				if (this.ai[1] >= 90f)
				{
					this.ai[1] = 0f;
				}
			}
		}
		else if (aiStyle == 80)
		{
			if (this.ai[0] == 0f)
			{
				if (direction == 0)
				{
					TargetClosest();
					netUpdate = true;
				}
				if (collideX)
				{
					direction = -direction;
					netUpdate = true;
				}
				velocity.X = 3f * (float)direction;
				Vector2 center17 = base.Center;
				Point point2 = center17.ToTileCoordinates();
				int num310 = 30;
				if (WorldGen.InWorld(point2.X, point2.Y, 30))
				{
					for (int num311 = 0; num311 < 30; num311++)
					{
						if (WorldGen.SolidTile(point2.X, point2.Y + num311))
						{
							num310 = num311;
							break;
						}
					}
				}
				if (num310 < 15)
				{
					velocity.Y = Math.Max(velocity.Y - 0.05f, -3.5f);
				}
				else if (num310 < 20)
				{
					velocity.Y *= 0.95f;
				}
				else
				{
					velocity.Y = Math.Min(velocity.Y + 0.05f, 1.5f);
				}
				float distanceToPlayer;
				int num312 = FindClosestPlayer(out distanceToPlayer);
				if (num312 == -1 || Main.player[num312].dead)
				{
					return;
				}
				if (distanceToPlayer < 352f && Main.player[num312].Center.Y > base.Center.Y)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 1f)
			{
				this.ai[1]++;
				velocity *= 0.95f;
				if (this.ai[1] >= 60f)
				{
					this.ai[1] = 0f;
					this.ai[0] = 2f;
					int num314 = FindClosestPlayer();
					if (num314 != -1)
					{
						this.ai[3] = ((Main.player[num314].Center.X > base.Center.X) ? (-1f) : 1f);
					}
					else
					{
						this.ai[3] = 1f;
					}
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 2f)
			{
				noTileCollide = true;
				this.ai[1]++;
				velocity.Y = Math.Max(velocity.Y - 0.1f, -10f);
				velocity.X = Math.Min(velocity.X + this.ai[3] * 0.05f, 4f);
				if ((position.Y < (float)(-height) || this.ai[1] >= 180f) && Main.netMode != 1)
				{
					Main.StartInvasion(4);
					active = false;
					netUpdate = true;
				}
			}
			newColor = Color.SkyBlue;
			Vector3 rgb = ((Color)(ref newColor)).ToVector3();
			if (this.ai[0] == 2f)
			{
				newColor = Color.Red;
				rgb = ((Color)(ref newColor)).ToVector3();
			}
			rgb *= 0.65f;
			Lighting.AddLight(base.Center, rgb);
		}
		else if (aiStyle == 81)
		{
			if (Main.rand.Next(420) == 0)
			{
				SoundEngine.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, Main.rand.Next(100, 101));
			}
			Vector2 vector145 = default(Vector2);
			((Vector2)(ref vector145))._002Ector(30f);
			if (!Main.npc[(int)this.ai[3]].active || Main.npc[(int)this.ai[3]].type != 398)
			{
				life = 0;
				HitEffect();
				active = false;
			}
			float num315 = 0f;
			float num316 = 0f;
			float num317 = this.ai[0];
			this.ai[1]++;
			int num318 = 0;
			int num319 = 0;
			for (; num318 < 10; num318++)
			{
				num316 = MoonLordAttacksArray2[1, num318];
				if (!(num316 + (float)num319 <= this.ai[1]))
				{
					break;
				}
				num319 += (int)num316;
			}
			if (num318 == 10)
			{
				num318 = 0;
				this.ai[1] = 0f;
				num316 = MoonLordAttacksArray2[1, num318];
				num319 = 0;
			}
			this.ai[0] = MoonLordAttacksArray2[0, num318];
			num315 = (int)this.ai[1] - num319;
			if (this.ai[0] != num317)
			{
				netUpdate = true;
			}
			if (this.ai[0] == -1f)
			{
				this.ai[1]++;
				if (this.ai[1] > 180f)
				{
					this.ai[1] = 0f;
				}
				float num320 = 1f;
				if (this.ai[1] < 60f)
				{
					num320 = 0.75f;
					localAI[0] = 0f;
					localAI[1] = (float)Math.Sin(this.ai[1] * ((float)Math.PI * 2f) / 15f) * 0.35f;
					if (localAI[1] < 0f)
					{
						localAI[0] = (float)Math.PI;
					}
				}
				else if (this.ai[1] < 120f)
				{
					num320 = 1f;
					if (localAI[1] < 0.5f)
					{
						localAI[1] += 0.025f;
					}
					localAI[0] += (float)Math.PI / 15f;
				}
				else
				{
					num320 = 1.15f;
					localAI[1] -= 0.05f;
					if (localAI[1] < 0f)
					{
						localAI[1] = 0f;
					}
				}
				localAI[2] = MathHelper.Lerp(localAI[2], num320, 0.3f);
			}
			if (this.ai[0] == 0f)
			{
				TargetClosest(faceTarget: false);
				Vector2 v2 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
				localAI[0] = localAI[0].AngleLerp(v2.ToRotation(), 0.5f);
				localAI[1] += 0.05f;
				if (localAI[1] > 0.7f)
				{
					localAI[1] = 0.7f;
				}
				localAI[2] = MathHelper.Lerp(localAI[2], 1f, 0.2f);
				float num321 = 24f;
				Vector2 center18 = base.Center;
				Vector2 center19 = Main.player[target].Center;
				Vector2 vector147 = center19 - center18;
				Vector2 vector148 = vector147 - Vector2.UnitY * 200f;
				vector148 = Vector2.Normalize(vector148) * num321;
				int num322 = 30;
				velocity.X = (velocity.X * (float)(num322 - 1) + vector148.X) / (float)num322;
				velocity.Y = (velocity.Y * (float)(num322 - 1) + vector148.Y) / (float)num322;
				float num323 = 0.25f;
				for (int num325 = 0; num325 < 200; num325++)
				{
					if (num325 != whoAmI && Main.npc[num325].active && Main.npc[num325].type == 400 && Vector2.Distance(base.Center, Main.npc[num325].Center) < 150f)
					{
						if (position.X < Main.npc[num325].position.X)
						{
							velocity.X -= num323;
						}
						else
						{
							velocity.X += num323;
						}
						if (position.Y < Main.npc[num325].position.Y)
						{
							velocity.Y -= num323;
						}
						else
						{
							velocity.Y += num323;
						}
					}
				}
			}
			else if (this.ai[0] == 1f)
			{
				if (num315 == 0f)
				{
					TargetClosest(faceTarget: false);
					netUpdate = true;
				}
				velocity *= 0.95f;
				if (((Vector2)(ref velocity)).Length() < 1f)
				{
					velocity = Vector2.Zero;
				}
				Vector2 v3 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
				localAI[0] = localAI[0].AngleLerp(v3.ToRotation(), 0.5f);
				localAI[1] += 0.05f;
				if (localAI[1] > 1f)
				{
					localAI[1] = 1f;
				}
				if (num315 < 20f)
				{
					localAI[2] = MathHelper.Lerp(localAI[2], 1.1f, 0.2f);
				}
				else
				{
					localAI[2] = MathHelper.Lerp(localAI[2], 0.4f, 0.2f);
				}
				if (num315 == num316 - 35f)
				{
					SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 6);
				}
				if ((num315 == num316 - 14f || num315 == num316 - 7f || num315 == num316) && Main.netMode != 1)
				{
					Vector2 vector149 = Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), vector145 * localAI[1]);
					Vector2 vector150 = Vector2.Normalize(v3) * 8f;
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + vector149.X, base.Center.Y + vector149.Y, vector150.X, vector150.Y, 462, 35, 0f, Main.myPlayer);
				}
			}
			else if (this.ai[0] == 2f)
			{
				if (num315 < 15f)
				{
					localAI[1] -= 0.07f;
					if (localAI[1] < 0f)
					{
						localAI[1] = 0f;
					}
					localAI[2] = MathHelper.Lerp(localAI[2], 0.4f, 0.2f);
					velocity *= 0.8f;
					if (((Vector2)(ref velocity)).Length() < 1f)
					{
						velocity = Vector2.Zero;
					}
				}
				else if (num315 < 75f)
				{
					float num326 = (num315 - 15f) / 10f;
					int num327 = 0;
					int num328 = 0;
					switch ((int)num326)
					{
					case 0:
						num327 = 0;
						num328 = 2;
						break;
					case 1:
						num327 = 2;
						num328 = 5;
						break;
					case 2:
						num327 = 5;
						num328 = 3;
						break;
					case 3:
						num327 = 3;
						num328 = 1;
						break;
					case 4:
						num327 = 1;
						num328 = 4;
						break;
					case 5:
						num327 = 4;
						num328 = 0;
						break;
					}
					Vector2 spinningpoint2 = Vector2.UnitY * -30f;
					double radians25 = (float)num327 * ((float)Math.PI * 2f) / 6f;
					val29 = default(Vector2);
					Vector2 value11 = spinningpoint2.RotatedBy(radians25, val29);
					double radians26 = (float)num328 * ((float)Math.PI * 2f) / 6f;
					val29 = default(Vector2);
					Vector2 value12 = spinningpoint2.RotatedBy(radians26, val29);
					Vector2 vector151 = Vector2.Lerp(value11, value12, num326 - (float)(int)num326);
					float value2 = ((Vector2)(ref vector151)).Length() / 30f;
					localAI[0] = vector151.ToRotation();
					localAI[1] = MathHelper.Lerp(localAI[1], value2, 0.5f);
					for (int num329 = 0; num329 < 2; num329++)
					{
						Vector2 val77 = base.Center + vector151 - Vector2.One * 4f;
						newColor = default(Color);
						int num330 = Dust.NewDust(val77, 0, 0, 229, 0f, 0f, 0, newColor);
						Dust dust41 = Main.dust[num330];
						Dust dust87 = dust41;
						dust87.velocity += vector151 / 15f;
						Main.dust[num330].noGravity = true;
					}
					if ((num315 - 15f) % 10f == 0f && Main.netMode != 1)
					{
						Vector2 vec3 = Vector2.Normalize(vector151);
						if (vec3.HasNaNs())
						{
							vec3 = Vector2.UnitY * -1f;
						}
						vec3 *= 4f;
						int num331 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + vector151.X, base.Center.Y + vector151.Y, vec3.X, vec3.Y, 454, 40, 0f, Main.myPlayer, 30f, whoAmI);
					}
				}
				else if (num315 < 105f)
				{
					localAI[0] = localAI[0].AngleLerp(this.ai[2] - (float)Math.PI / 2f, 0.2f);
					localAI[2] = MathHelper.Lerp(localAI[2], 0.75f, 0.2f);
					if (num315 == 75f)
					{
						TargetClosest(faceTarget: false);
						netUpdate = true;
						velocity = Vector2.UnitY * -7f;
						for (int num332 = 0; num332 < 1000; num332++)
						{
							Projectile projectile10 = Main.projectile[num332];
							if (projectile10.active && projectile10.type == 454 && projectile10.ai[1] == (float)whoAmI && projectile10.ai[0] != -1f)
							{
								Projectile projectile11 = projectile10;
								Projectile projectile13 = projectile11;
								projectile13.velocity += velocity;
								projectile10.netUpdate = true;
							}
						}
					}
					velocity.Y *= 0.96f;
					this.ai[2] = (Main.player[target].Center - base.Center).ToRotation() + (float)Math.PI / 2f;
					rotation = rotation.AngleTowards(this.ai[2], (float)Math.PI / 30f);
				}
				else if (num315 < 120f)
				{
					SoundEngine.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, 102);
					if (num315 == 105f)
					{
						netUpdate = true;
					}
					Vector2 vector152 = (this.ai[2] - (float)Math.PI / 2f).ToRotationVector2() * 12f;
					velocity = vector152 * 2f;
					for (int num333 = 0; num333 < 1000; num333++)
					{
						Projectile projectile12 = Main.projectile[num333];
						if (projectile12.active && projectile12.type == 454 && projectile12.ai[1] == (float)whoAmI && projectile12.ai[0] != -1f)
						{
							projectile12.ai[0] = -1f;
							projectile12.velocity = vector152;
							projectile12.netUpdate = true;
						}
					}
				}
				else
				{
					velocity *= 0.92f;
					rotation = rotation.AngleLerp(0f, 0.2f);
				}
			}
			else if (this.ai[0] == 3f)
			{
				if (num315 < 15f)
				{
					localAI[1] -= 0.07f;
					if (localAI[1] < 0f)
					{
						localAI[1] = 0f;
					}
					localAI[2] = MathHelper.Lerp(localAI[2], 0.4f, 0.2f);
					velocity *= 0.9f;
					if (((Vector2)(ref velocity)).Length() < 1f)
					{
						velocity = Vector2.Zero;
					}
				}
				else if (num315 < 45f)
				{
					localAI[0] = 0f;
					localAI[1] = (float)Math.Sin((num315 - 15f) * ((float)Math.PI * 2f) / 15f) * 0.5f;
					if (localAI[1] < 0f)
					{
						localAI[0] = (float)Math.PI;
					}
				}
				else if (num315 < 185f)
				{
					if (num315 == 45f)
					{
						this.ai[2] = (float)(Main.rand.Next(2) == 0).ToDirectionInt() * ((float)Math.PI * 2f) / 40f;
						netUpdate = true;
					}
					if ((num315 - 15f - 30f) % 40f == 0f)
					{
						this.ai[2] *= 0.95f;
					}
					localAI[0] += this.ai[2];
					localAI[1] += 0.05f;
					if (localAI[1] > 1f)
					{
						localAI[1] = 1f;
					}
					Vector2 vector153 = localAI[0].ToRotationVector2() * vector145 * localAI[1];
					float num334 = MathHelper.Lerp(8f, 20f, (num315 - 15f - 30f) / 140f);
					velocity = Vector2.Normalize(vector153) * num334;
					rotation = rotation.AngleLerp(velocity.ToRotation() + (float)Math.PI / 2f, 0.2f);
					if ((num315 - 15f - 30f) % 10f == 0f && Main.netMode != 1)
					{
						Vector2 vector154 = base.Center + Vector2.Normalize(vector153) * ((Vector2)(ref vector145)).Length() * 0.4f;
						Vector2 vector155 = Vector2.Normalize(vector153) * 8f;
						float ai3 = ((float)Math.PI * 2f * (float)Main.rand.NextDouble() - (float)Math.PI) / 30f + (float)Math.PI / 180f * this.ai[2];
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector154.X, vector154.Y, vector155.X, vector155.Y, 452, 35, 0f, Main.myPlayer, 0f, ai3);
					}
				}
				else
				{
					velocity *= 0.88f;
					rotation = rotation.AngleLerp(0f, 0.2f);
					localAI[1] -= 0.07f;
					if (localAI[1] < 0f)
					{
						localAI[1] = 0f;
					}
					localAI[2] = MathHelper.Lerp(localAI[2], 1f, 0.2f);
				}
			}
			else
			{
				if (this.ai[0] != 4f)
				{
					return;
				}
				if (num315 == 0f)
				{
					TargetClosest(faceTarget: false);
					netUpdate = true;
				}
				if (num315 < 180f)
				{
					localAI[2] = MathHelper.Lerp(localAI[2], 1f, 0.2f);
					localAI[1] -= 0.05f;
					if (localAI[1] < 0f)
					{
						localAI[1] = 0f;
					}
					velocity *= 0.95f;
					if (((Vector2)(ref velocity)).Length() < 1f)
					{
						velocity = Vector2.Zero;
					}
					if (!(num315 >= 60f))
					{
						return;
					}
					Vector2 center20 = base.Center;
					int num337 = 0;
					if (num315 >= 120f)
					{
						num337 = 1;
					}
					for (int num338 = 0; num338 < 1 + num337; num338++)
					{
						int num339 = 229;
						float num340 = 0.8f;
						if (num338 % 2 == 1)
						{
							num339 = 229;
							num340 = 1.65f;
						}
						Vector2 vector156 = center20 + ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * vector145 / 2f;
						Vector2 val78 = vector156 - Vector2.One * 8f;
						int num1728 = num339;
						float speedX27 = velocity.X / 2f;
						float speedY26 = velocity.Y / 2f;
						newColor = default(Color);
						int num341 = Dust.NewDust(val78, 16, 16, num1728, speedX27, speedY26, 0, newColor);
						Main.dust[num341].velocity = Vector2.Normalize(center20 - vector156) * 3.5f * (10f - (float)num337 * 2f) / 10f;
						Main.dust[num341].noGravity = true;
						Main.dust[num341].scale = num340;
						Main.dust[num341].customData = this;
					}
				}
				else if (num315 < num316 - 15f)
				{
					if (num315 == 180f && Main.netMode != 1)
					{
						TargetClosest(faceTarget: false);
						Vector2 spinningpoint3 = Main.player[target].Center - base.Center;
						((Vector2)(ref spinningpoint3)).Normalize();
						float num342 = -1f;
						if (spinningpoint3.X < 0f)
						{
							num342 = 1f;
						}
						Vector2 spinningpoint33 = spinningpoint3;
						double radians27 = (0f - num342) * ((float)Math.PI * 2f) / 6f;
						val29 = default(Vector2);
						spinningpoint3 = spinningpoint33.RotatedBy(radians27, val29);
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, spinningpoint3.X, spinningpoint3.Y, 455, 50, 0f, Main.myPlayer, num342 * ((float)Math.PI * 2f) / 540f, whoAmI);
						this.ai[2] = (spinningpoint3.ToRotation() + (float)Math.PI * 3f) * num342;
						netUpdate = true;
					}
					localAI[1] += 0.05f;
					if (localAI[1] > 1f)
					{
						localAI[1] = 1f;
					}
					float num343 = (this.ai[2] >= 0f).ToDirectionInt();
					float num344 = this.ai[2];
					if (num344 < 0f)
					{
						num344 *= -1f;
					}
					num344 += (float)Math.PI * -3f;
					num344 += num343 * ((float)Math.PI * 2f) / 540f;
					localAI[0] = num344;
					this.ai[2] = (num344 + (float)Math.PI * 3f) * num343;
				}
				else
				{
					localAI[1] -= 0.07f;
					if (localAI[1] < 0f)
					{
						localAI[1] = 0f;
					}
				}
			}
		}
		else if (aiStyle == 82)
		{
			float num345 = 90f;
			Vector2 vector158 = default(Vector2);
			((Vector2)(ref vector158))._002Ector(0f, 216f);
			int num346 = (int)Math.Abs(this.ai[0]) - 1;
			int num348 = (int)this.ai[1];
			if (!Main.npc[num346].active || Main.npc[num346].type != 396)
			{
				life = 0;
				HitEffect();
				active = false;
				return;
			}
			this.ai[2]++;
			if (this.ai[2] >= num345)
			{
				if (Main.netMode != 1)
				{
					int num349 = (int)Main.npc[num346].ai[3];
					int num350 = -1;
					int num351 = -1;
					int num352 = num346;
					for (int num353 = 0; num353 < 200; num353++)
					{
						if (Main.npc[num353].active && Main.npc[num353].ai[3] == (float)num349)
						{
							if (num350 == -1 && Main.npc[num353].type == 397 && Main.npc[num353].ai[2] == 0f)
							{
								num350 = num353;
							}
							if (num351 == -1 && Main.npc[num353].type == 397 && Main.npc[num353].ai[2] == 1f)
							{
								num351 = num353;
							}
							if (num350 != -1 && num351 != -1 && num352 != -1)
							{
								break;
							}
						}
					}
					int num354 = 1000;
					int num355 = Main.npc[num349].lifeMax - Main.npc[num349].life;
					int num356 = Main.npc[num350].lifeMax - Main.npc[num350].life;
					int num357 = Main.npc[num351].lifeMax - Main.npc[num351].life;
					int num359 = Main.npc[num352].lifeMax - Main.npc[num352].life;
					if (num359 > 0 && num354 > 0)
					{
						int num360 = num359 - num354;
						if (num360 > 0)
						{
							num360 = 0;
						}
						int num361 = num354 + num360;
						num354 -= num361;
						NPC nPC8 = Main.npc[num352];
						NPC nPC23 = nPC8;
						nPC23.life += num361;
						HealEffect(Utils.CenteredRectangle(Main.npc[num352].Center, new Vector2(50f)), num361);
					}
					if (num355 > 0 && num354 > 0)
					{
						int num362 = num355 - num354;
						if (num362 > 0)
						{
							num362 = 0;
						}
						int num363 = num354 + num362;
						num354 -= num363;
						NPC nPC9 = Main.npc[num349];
						NPC nPC23 = nPC9;
						nPC23.life += num363;
						HealEffect(Utils.CenteredRectangle(Main.npc[num349].Center, new Vector2(50f)), num363);
					}
					if (num356 > 0 && num354 > 0)
					{
						int num364 = num356 - num354;
						if (num364 > 0)
						{
							num364 = 0;
						}
						int num365 = num354 + num364;
						num354 -= num365;
						NPC nPC10 = Main.npc[num350];
						NPC nPC23 = nPC10;
						nPC23.life += num365;
						HealEffect(Utils.CenteredRectangle(Main.npc[num350].Center, new Vector2(50f)), num365);
					}
					if (num357 > 0 && num354 > 0)
					{
						int num366 = num357 - num354;
						if (num366 > 0)
						{
							num366 = 0;
						}
						int num367 = num354 + num366;
						num354 -= num367;
						NPC nPC11 = Main.npc[num351];
						NPC nPC23 = nPC11;
						nPC23.life += num367;
						HealEffect(Utils.CenteredRectangle(Main.npc[num351].Center, new Vector2(50f)), num367);
					}
				}
				life = 0;
				HitEffect();
				active = false;
			}
			else
			{
				velocity = Vector2.Zero;
				base.Center = Vector2.Lerp(Main.projectile[num348].Center, Main.npc[(int)Math.Abs(this.ai[0]) - 1].Center + vector158, this.ai[2] / num345);
				Vector2 spinningpoint4 = Vector2.UnitY * (float)(-height) / 2f;
				for (int num368 = 0; num368 < 6; num368++)
				{
					Vector2 val79 = base.Center - Vector2.One * 4f;
					Vector2 spinningpoint34 = spinningpoint4;
					double radians28 = (float)num368 * ((float)Math.PI * 2f) / 6f;
					val29 = default(Vector2);
					Vector2 val80 = val79 + spinningpoint34.RotatedBy(radians28, val29);
					newColor = default(Color);
					int num370 = Dust.NewDust(val80, 0, 0, 229, 0f, 0f, 0, newColor);
					Main.dust[num370].velocity = -Vector2.UnitY;
					Main.dust[num370].noGravity = true;
					Main.dust[num370].scale = 0.7f;
					Main.dust[num370].customData = this;
				}
				spinningpoint4 = Vector2.UnitY * (float)(-height) / 6f;
				for (int num371 = 0; num371 < 3; num371++)
				{
					Vector2 val81 = base.Center - Vector2.One * 4f;
					Vector2 spinningpoint35 = spinningpoint4;
					double radians29 = (float)num371 * ((float)Math.PI * 2f) / 6f;
					val29 = default(Vector2);
					Vector2 val82 = val81 + spinningpoint35.RotatedBy(radians29, val29);
					newColor = default(Color);
					int num372 = Dust.NewDust(val82, 0, 0, 229, 0f, -2f, 0, newColor);
					Main.dust[num372].noGravity = true;
					Main.dust[num372].scale = 1.5f;
					Main.dust[num372].customData = this;
				}
			}
		}
		else if (aiStyle == 83)
		{
			if (type == 437)
			{
				if (localAI[3] == 0f && Main.netMode != 1)
				{
					localAI[3] = 1f;
					netUpdate = true;
					Point[] spawnPoints = null;
					if (!CultistRitual.CheckFloor(base.Center, out spawnPoints))
					{
						life = 0;
						HitEffect();
						active = false;
						return;
					}
					int num373 = 0;
					int num374 = 1;
					for (int num375 = 0; num375 < 4; num375++)
					{
						int num376 = 0;
						bool flag92 = num375 == 1 || num375 == 2;
						num376 = ((!flag92) ? 379 : 438);
						int num377 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), spawnPoints[num375].X * 16 + 8, spawnPoints[num375].Y * 16 - 48, num376);
						if (flag92)
						{
							localAI[num374++] = num377 + 1;
							Main.npc[num377].ai[3] = -(whoAmI + 1);
						}
						else
						{
							this.ai[num373++] = num377 + 1;
							Main.npc[num377].ai[3] = -(whoAmI + 1);
						}
						Main.npc[num377].netUpdate = true;
					}
				}
				if (localAI[0] == 1f && Main.netMode != 1)
				{
					localAI[0] = 2f;
					for (int num378 = 0; num378 < 2; num378++)
					{
						Main.npc[(int)localAI[num378 + 1] - 1].ai[1] = 1f;
						Main.npc[(int)localAI[num378 + 1] - 1].netUpdate = true;
						Main.npc[(int)this.ai[num378] - 1].ai[3] = 0f;
						Main.npc[(int)this.ai[num378] - 1].TargetClosest();
						Main.npc[(int)this.ai[num378] - 1].netUpdate = true;
					}
				}
				if (this.ai[0] != -1f && Main.netMode != 1)
				{
					bool flag93 = true;
					for (int num379 = 0; num379 < 2; num379++)
					{
						if (Main.npc[(int)localAI[num379 + 1] - 1].active && Main.npc[(int)localAI[num379 + 1] - 1].type == 438)
						{
							flag93 = false;
						}
						if (Main.npc[(int)this.ai[num379] - 1].active && Main.npc[(int)this.ai[num379] - 1].type == 379)
						{
							flag93 = false;
						}
					}
					if (flag93)
					{
						this.ai[0] = -1f;
						this.ai[1] = 0f;
						this.ai[3] = 0f;
						int num381 = (int)base.Center.X / 16 + 11 * (Main.rand.Next(2) == 0).ToDirectionInt();
						int num382 = 0;
						for (int num383 = -5; num383 < 12; num383++)
						{
							int num384 = num381;
							int num385 = (int)base.Center.Y / 16 + num383;
							if (WorldGen.SolidTile(num384, num385) && !Collision.SolidTiles(num384 - 1, num384 + 1, num385 - 3, num385 - 1))
							{
								num382 = num385;
								break;
							}
							if (num383 == 11)
							{
								num382 = num385;
							}
						}
						int num386 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), num381 * 16 + 10, num382 * 16 - 2, 439);
						Main.npc[num386].direction = (Main.npc[num386].spriteDirection = Math.Sign(base.Center.X - (float)(num381 * 16) - 10f));
						this.ai[2] = num386;
						netUpdate = true;
						CultistRitual.TabletDestroyed();
					}
				}
				if (this.ai[0] == -1f)
				{
					this.ai[3]++;
					if (this.ai[3] > 300f)
					{
						life = 0;
						HitEffect(0, 9999.0);
						active = false;
						if (Main.netMode != 1)
						{
							for (int num387 = 0; num387 < 6; num387++)
							{
								float num388 = 3f + Main.rand.NextFloat() * 6f;
								Vector2 vector159 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
								Vector2 center21 = base.Center;
								center21 += vector159 * 30f;
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), center21.X, center21.Y, vector159.X * num388, vector159.Y * num388, 526, 0, 0f, Main.myPlayer, Main.npc[(int)this.ai[2]].Center.X, Main.npc[(int)this.ai[2]].Center.Y);
							}
							for (int num389 = 0; num389 < 20; num389++)
							{
								if (Main.rand.Next(2) != 0)
								{
									float num390 = 3f + Main.rand.NextFloat() * 6f;
									Vector2 vector160 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
									Vector2 center22 = base.Center;
									center22 += vector160 * 30f;
									Vector2 vector161 = base.Center + vector160 * (Main.rand.NextFloat() * 45f + 45f) + Vector2.UnitY * 20f;
									Projectile.NewProjectile(GetSpawnSource_ForProjectile(), center22.X, center22.Y, vector160.X * num390, -20f, 526, 0, 0f, Main.myPlayer, vector161.X, vector161.Y);
								}
							}
						}
					}
					else if (this.ai[3] % 10f == 1f && this.ai[3] > 120f && Main.netMode != 1)
					{
						float num392 = 3f + Main.rand.NextFloat() * 6f;
						Vector2 vector162 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Vector2 center24 = base.Center;
						center24 += vector162 * 25f;
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), center24.X, center24.Y, vector162.X * num392, vector162.Y * num392, 526, 0, 0f, Main.myPlayer, Main.npc[(int)this.ai[2]].Center.X, Main.npc[(int)this.ai[2]].Center.Y);
					}
				}
			}
			if (type == 438)
			{
				velocity.X *= 0.93f;
				if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
				{
					velocity.X = 0f;
				}
				int num393 = (int)(0f - this.ai[3] - 1f);
				if (num393 == -1)
				{
					life = 0;
					HitEffect();
					active = false;
					return;
				}
				int num394 = Math.Sign(Main.npc[num393].Center.X - base.Center.X);
				if (num394 != direction)
				{
					velocity.X = 0f;
					direction = (spriteDirection = num394);
					netUpdate = true;
				}
				if (justHit && Main.netMode != 1 && Main.npc[num393].localAI[0] == 0f)
				{
					Main.npc[num393].localAI[0] = 1f;
				}
				if ((this.ai[0] += 1f) >= 300f)
				{
					this.ai[0] = 0f;
					netUpdate = true;
				}
			}
			if (type == 437)
			{
				Lighting.AddLight(base.Center, 0.8f, 0.75f, 0.55f);
			}
		}
		else if (aiStyle == 84)
		{
			AI_084_LunaticCultist();
		}
		else if (aiStyle == 85)
		{
			noTileCollide = false;
			if (this.ai[0] == 0f)
			{
				TargetClosest();
				if (Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					this.ai[0] = 1f;
				}
				else
				{
					Vector2 vector163 = Main.player[target].Center - base.Center;
					vector163.Y -= Main.player[target].height / 4;
					float num395 = ((Vector2)(ref vector163)).Length();
					if (num395 > 800f)
					{
						this.ai[0] = 2f;
					}
					else
					{
						Vector2 center25 = base.Center;
						center25.X = Main.player[target].Center.X;
						Vector2 vector164 = center25 - base.Center;
						if (((Vector2)(ref vector164)).Length() > 8f && Collision.CanHit(base.Center, 1, 1, center25, 1, 1))
						{
							this.ai[0] = 3f;
							this.ai[1] = center25.X;
							this.ai[2] = center25.Y;
							Vector2 center26 = base.Center;
							center26.Y = Main.player[target].Center.Y;
							if (((Vector2)(ref vector164)).Length() > 8f && Collision.CanHit(base.Center, 1, 1, center26, 1, 1) && Collision.CanHit(center26, 1, 1, Main.player[target].position, 1, 1))
							{
								this.ai[0] = 3f;
								this.ai[1] = center26.X;
								this.ai[2] = center26.Y;
							}
						}
						else
						{
							center25 = base.Center;
							center25.Y = Main.player[target].Center.Y;
							val29 = center25 - base.Center;
							if (((Vector2)(ref val29)).Length() > 8f && Collision.CanHit(base.Center, 1, 1, center25, 1, 1))
							{
								this.ai[0] = 3f;
								this.ai[1] = center25.X;
								this.ai[2] = center25.Y;
							}
						}
						if (this.ai[0] == 0f)
						{
							localAI[0] = 0f;
							((Vector2)(ref vector163)).Normalize();
							vector163 *= 0.5f;
							velocity += vector163;
							this.ai[0] = 4f;
							this.ai[1] = 0f;
						}
					}
				}
			}
			else if (this.ai[0] == 1f)
			{
				rotation += (float)direction * 0.3f;
				Vector2 vector165 = Main.player[target].Center - base.Center;
				if (type == 421)
				{
					vector165 = Main.player[target].Top - base.Center;
				}
				float num396 = ((Vector2)(ref vector165)).Length();
				float num397 = 5.5f;
				if (type == 405)
				{
					num397 = 8f;
				}
				num397 += num396 / 100f;
				int num398 = 50;
				((Vector2)(ref vector165)).Normalize();
				vector165 *= num397;
				velocity = (velocity * (float)(num398 - 1) + vector165) / (float)num398;
				if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
				}
				if (type == 421 && num396 < 40f && Main.player[target].active && !Main.player[target].dead)
				{
					bool flag94 = true;
					for (int num399 = 0; num399 < 200; num399++)
					{
						NPC nPC2 = Main.npc[num399];
						if (nPC2.active && nPC2.type == type && nPC2.ai[0] == 5f && nPC2.target == target)
						{
							flag94 = false;
							break;
						}
					}
					if (flag94)
					{
						base.Center = Main.player[target].Top;
						velocity = Vector2.Zero;
						this.ai[0] = 5f;
						this.ai[1] = 0f;
						netUpdate = true;
					}
				}
			}
			else if (this.ai[0] == 2f)
			{
				rotation = velocity.X * 0.1f;
				noTileCollide = true;
				Vector2 vector166 = Main.player[target].Center - base.Center;
				float num400 = ((Vector2)(ref vector166)).Length();
				float num401 = 3f;
				if (type == 405)
				{
					num401 = 6f;
				}
				int num403 = 3;
				((Vector2)(ref vector166)).Normalize();
				vector166 *= num401;
				velocity = (velocity * (float)(num403 - 1) + vector166) / (float)num403;
				if (num400 < 600f && !Collision.SolidCollision(position, width, height))
				{
					this.ai[0] = 0f;
				}
			}
			else if (this.ai[0] == 3f)
			{
				rotation = velocity.X * 0.1f;
				Vector2 vector167 = default(Vector2);
				((Vector2)(ref vector167))._002Ector(this.ai[1], this.ai[2]);
				Vector2 vector169 = vector167 - base.Center;
				float num404 = ((Vector2)(ref vector169)).Length();
				float num405 = 2f;
				if (type == 405)
				{
					num405 = 3f;
				}
				float num406 = 3f;
				((Vector2)(ref vector169)).Normalize();
				vector169 *= num405;
				velocity = (velocity * (num406 - 1f) + vector169) / num406;
				if (collideX || collideY)
				{
					this.ai[0] = 4f;
					this.ai[1] = 0f;
				}
				if (num404 < num405 || num404 > 800f || Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					this.ai[0] = 0f;
				}
			}
			else if (this.ai[0] == 4f)
			{
				rotation = velocity.X * 0.1f;
				if (collideX)
				{
					velocity.X *= -0.8f;
				}
				if (collideY)
				{
					velocity.Y *= -0.8f;
				}
				Vector2 vector170;
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					vector170 = Main.player[target].Center - base.Center;
					vector170.Y -= Main.player[target].height / 4;
					((Vector2)(ref vector170)).Normalize();
					velocity = vector170 * 0.1f;
				}
				float num407 = 2f;
				if (type == 405)
				{
					num407 = 3f;
				}
				float num408 = 20f;
				vector170 = velocity;
				((Vector2)(ref vector170)).Normalize();
				vector170 *= num407;
				velocity = (velocity * (num408 - 1f) + vector170) / num408;
				this.ai[1] += 1f;
				if (this.ai[1] > 180f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
				}
				if (Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					this.ai[0] = 0f;
				}
				localAI[0] += 1f;
				if (localAI[0] >= 5f && !Collision.SolidCollision(position - new Vector2(10f, 10f), width + 20, height + 20))
				{
					localAI[0] = 0f;
					Vector2 center27 = base.Center;
					center27.X = Main.player[target].Center.X;
					if (Collision.CanHit(base.Center, 1, 1, center27, 1, 1) && Collision.CanHit(base.Center, 1, 1, center27, 1, 1) && Collision.CanHit(Main.player[target].Center, 1, 1, center27, 1, 1))
					{
						this.ai[0] = 3f;
						this.ai[1] = center27.X;
						this.ai[2] = center27.Y;
					}
					else
					{
						center27 = base.Center;
						center27.Y = Main.player[target].Center.Y;
						if (Collision.CanHit(base.Center, 1, 1, center27, 1, 1) && Collision.CanHit(Main.player[target].Center, 1, 1, center27, 1, 1))
						{
							this.ai[0] = 3f;
							this.ai[1] = center27.X;
							this.ai[2] = center27.Y;
						}
					}
				}
			}
			else if (this.ai[0] == 5f)
			{
				Player player3 = Main.player[target];
				if (!player3.active || player3.dead)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				else
				{
					base.Center = ((player3.gravDir == 1f) ? player3.Top : player3.Bottom) + new Vector2((float)(player3.direction * 4), 0f);
					gfxOffY = player3.gfxOffY;
					velocity = Vector2.Zero;
					if (!player3.creativeGodMode)
					{
						player3.AddBuff(163, 59);
					}
				}
			}
			if (type == 405)
			{
				rotation = 0f;
				for (int num409 = 0; num409 < 200; num409++)
				{
					if (num409 != whoAmI && Main.npc[num409].active && Main.npc[num409].type == type && Math.Abs(position.X - Main.npc[num409].position.X) + Math.Abs(position.Y - Main.npc[num409].position.Y) < (float)width)
					{
						if (position.X < Main.npc[num409].position.X)
						{
							velocity.X -= 0.05f;
						}
						else
						{
							velocity.X += 0.05f;
						}
						if (position.Y < Main.npc[num409].position.Y)
						{
							velocity.Y -= 0.05f;
						}
						else
						{
							velocity.Y += 0.05f;
						}
					}
				}
			}
			else
			{
				if (type != 421)
				{
					return;
				}
				hide = this.ai[0] == 5f;
				rotation = velocity.X * 0.1f;
				for (int num410 = 0; num410 < 200; num410++)
				{
					if (num410 != whoAmI && Main.npc[num410].active && Main.npc[num410].type == type && Math.Abs(position.X - Main.npc[num410].position.X) + Math.Abs(position.Y - Main.npc[num410].position.Y) < (float)width)
					{
						if (position.X < Main.npc[num410].position.X)
						{
							velocity.X -= 0.05f;
						}
						else
						{
							velocity.X += 0.05f;
						}
						if (position.Y < Main.npc[num410].position.Y)
						{
							velocity.Y -= 0.05f;
						}
						else
						{
							velocity.Y += 0.05f;
						}
					}
				}
			}
		}
		else if (aiStyle == 86)
		{
			if (alpha > 0)
			{
				alpha -= 30;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			noGravity = true;
			noTileCollide = true;
			knockBackResist = 0f;
			for (int num411 = 0; num411 < 200; num411++)
			{
				if (num411 == whoAmI || !Main.npc[num411].active || Main.npc[num411].type != type)
				{
					continue;
				}
				Vector2 vector171 = Main.npc[num411].Center - base.Center;
				if (!(((Vector2)(ref vector171)).Length() < 50f))
				{
					continue;
				}
				((Vector2)(ref vector171)).Normalize();
				if (vector171.X == 0f && vector171.Y == 0f)
				{
					if (num411 > whoAmI)
					{
						vector171.X = 1f;
					}
					else
					{
						vector171.X = -1f;
					}
				}
				vector171 *= 0.4f;
				velocity -= vector171;
				NPC nPC7 = Main.npc[num411];
				NPC nPC23 = nPC7;
				nPC23.velocity += vector171;
			}
			if (type == 472)
			{
				float num412 = 120f;
				if (localAI[0] < num412)
				{
					if (localAI[0] == 0f)
					{
						SoundEngine.PlaySound(in SoundID.Item8, base.Center);
						TargetClosest();
						if (direction > 0)
						{
							velocity.X += 2f;
						}
						else
						{
							velocity.X -= 2f;
						}
						position += netOffset;
						Vector2 vector172 = default(Vector2);
						for (int num414 = 0; num414 < 20; num414++)
						{
							Vector2 center28 = base.Center;
							center28.Y -= 18f;
							((Vector2)(ref vector172))._002Ector((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
							((Vector2)(ref vector172)).Normalize();
							vector172 *= (float)Main.rand.Next(0, 100) * 0.1f;
							center28 += vector172;
							((Vector2)(ref vector172)).Normalize();
							vector172 *= (float)Main.rand.Next(50, 90) * 0.2f;
							Vector2 val83 = center28;
							newColor = default(Color);
							int num415 = Dust.NewDust(val83, 1, 1, 27, 0f, 0f, 0, newColor);
							Main.dust[num415].velocity = -vector172 * 0.3f;
							Main.dust[num415].alpha = 100;
							if (Main.rand.Next(2) == 0)
							{
								Main.dust[num415].noGravity = true;
								Dust dust38 = Main.dust[num415];
								Dust dust87 = dust38;
								dust87.scale += 0.3f;
							}
						}
						position -= netOffset;
					}
					localAI[0] += 1f;
					float num416 = 1f - localAI[0] / num412;
					float num417 = num416 * 20f;
					for (int num418 = 0; (float)num418 < num417; num418++)
					{
						if (Main.rand.Next(5) == 0)
						{
							position += netOffset;
							Vector2 val84 = position;
							int num1729 = width;
							int num1730 = height;
							newColor = default(Color);
							int num419 = Dust.NewDust(val84, num1729, num1730, 27, 0f, 0f, 0, newColor);
							Main.dust[num419].alpha = 100;
							Dust dust39 = Main.dust[num419];
							Dust dust87 = dust39;
							dust87.velocity *= 0.3f;
							dust39 = Main.dust[num419];
							dust87 = dust39;
							dust87.velocity += velocity * 0.75f;
							Main.dust[num419].noGravity = true;
							position -= netOffset;
						}
					}
				}
			}
			if (type == 521)
			{
				float num420 = 120f;
				if (localAI[0] < num420)
				{
					if (localAI[0] == 0f)
					{
						SoundEngine.PlaySound(in SoundID.Item8, base.Center);
						TargetClosest();
						if (direction > 0)
						{
							velocity.X += 2f;
						}
						else
						{
							velocity.X -= 2f;
						}
					}
					localAI[0] += 1f;
					int num421 = 10;
					for (int num422 = 0; num422 < 2; num422++)
					{
						position += netOffset;
						Vector2 val85 = position - new Vector2((float)num421);
						int num1731 = width + num421 * 2;
						int num1732 = height + num421 * 2;
						newColor = default(Color);
						int num423 = Dust.NewDust(val85, num1731, num1732, 228, 0f, 0f, 100, newColor, 2f);
						Main.dust[num423].noGravity = true;
						Main.dust[num423].noLight = true;
						position -= netOffset;
					}
				}
			}
			if (this.ai[0] == 0f)
			{
				TargetClosest();
				this.ai[0] = 1f;
				this.ai[1] = direction;
			}
			else if (this.ai[0] == 1f)
			{
				TargetClosest();
				float num425 = 0.3f;
				float num426 = 7f;
				float num427 = 4f;
				float num428 = 660f;
				float num429 = 4f;
				if (type == 521)
				{
					num425 = 0.7f;
					num426 = 14f;
					num428 = 500f;
					num427 = 6f;
					num429 = 3f;
				}
				velocity.X += this.ai[1] * num425;
				if (velocity.X > num426)
				{
					velocity.X = num426;
				}
				if (velocity.X < 0f - num426)
				{
					velocity.X = 0f - num426;
				}
				float num430 = Main.player[target].Center.Y - base.Center.Y;
				if (Math.Abs(num430) > num427)
				{
					num429 = 15f;
				}
				if (num430 > num427)
				{
					num430 = num427;
				}
				else if (num430 < 0f - num427)
				{
					num430 = 0f - num427;
				}
				velocity.Y = (velocity.Y * (num429 - 1f) + num430) / num429;
				if ((this.ai[1] > 0f && Main.player[target].Center.X - base.Center.X < 0f - num428) || (this.ai[1] < 0f && Main.player[target].Center.X - base.Center.X > num428))
				{
					this.ai[0] = 2f;
					this.ai[1] = 0f;
					if (base.Center.Y + 20f > Main.player[target].Center.Y)
					{
						this.ai[1] = -1f;
					}
					else
					{
						this.ai[1] = 1f;
					}
				}
			}
			else if (this.ai[0] == 2f)
			{
				float num431 = 0.4f;
				float num432 = 0.95f;
				float num433 = 5f;
				if (type == 521)
				{
					num431 = 0.3f;
					num433 = 7f;
					num432 = 0.9f;
				}
				velocity.Y += this.ai[1] * num431;
				if (((Vector2)(ref velocity)).Length() > num433)
				{
					velocity *= num432;
				}
				if (velocity.X > -1f && velocity.X < 1f)
				{
					TargetClosest();
					this.ai[0] = 3f;
					this.ai[1] = direction;
				}
			}
			else if (this.ai[0] == 3f)
			{
				float num434 = 0.4f;
				float num436 = 0.2f;
				float num437 = 5f;
				float num438 = 0.95f;
				if (type == 521)
				{
					num434 = 0.6f;
					num436 = 0.3f;
					num437 = 7f;
					num438 = 0.9f;
				}
				velocity.X += this.ai[1] * num434;
				if (base.Center.Y > Main.player[target].Center.Y)
				{
					velocity.Y -= num436;
				}
				else
				{
					velocity.Y += num436;
				}
				if (((Vector2)(ref velocity)).Length() > num437)
				{
					velocity *= num438;
				}
				if (velocity.Y > -1f && velocity.Y < 1f)
				{
					TargetClosest();
					this.ai[0] = 0f;
					this.ai[1] = direction;
				}
			}
			if (type == 521)
			{
				int num439 = 10;
				position += netOffset;
				for (int num440 = 0; num440 < 1; num440++)
				{
					Vector2 val86 = position - new Vector2((float)num439);
					int num1733 = width + num439 * 2;
					int num1734 = height + num439 * 2;
					newColor = default(Color);
					int num441 = Dust.NewDust(val86, num1733, num1734, 228, 0f, 0f, 100, newColor, 2f);
					Main.dust[num441].noGravity = true;
					Main.dust[num441].noLight = true;
				}
				position -= netOffset;
			}
		}
		else if (aiStyle == 87)
		{
			knockBackResist = 0.2f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
			dontTakeDamage = false;
			noTileCollide = false;
			noGravity = false;
			reflectsProjectiles = false;
			if (this.ai[0] != 7f && Main.player[target].dead)
			{
				TargetClosest();
				if (Main.player[target].dead)
				{
					this.ai[0] = 7f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
				}
			}
			if (this.ai[0] == 0f)
			{
				TargetClosest();
				Vector2 vector173 = Main.player[target].Center - base.Center;
				if (Main.netMode != 1 && (velocity.X != 0f || velocity.Y > 100f || justHit || ((Vector2)(ref vector173)).Length() < 80f))
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 1f)
			{
				this.ai[1] += 1f;
				if (Main.netMode != 1 && this.ai[1] > 36f)
				{
					this.ai[0] = 2f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 2f)
			{
				Vector2 vector174 = Main.player[target].Center - base.Center;
				if (Main.netMode != 1 && ((Vector2)(ref vector174)).Length() > 600f)
				{
					this.ai[0] = 5f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
				}
				if (velocity.Y == 0f)
				{
					TargetClosest();
					velocity.X *= 0.85f;
					this.ai[1] += 1f;
					float num442 = 15f + 30f * ((float)life / (float)lifeMax);
					float num443 = 3f + 4f * (1f - (float)life / (float)lifeMax);
					float num444 = 4f;
					if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						num444 += 2f;
					}
					if (Main.netMode != 1 && this.ai[1] > num442)
					{
						this.ai[3] += 1f;
						if (this.ai[3] >= 3f)
						{
							this.ai[3] = 0f;
							num444 *= 2f;
							num443 /= 2f;
						}
						this.ai[1] = 0f;
						velocity.Y -= num444;
						velocity.X = num443 * (float)direction;
						netUpdate = true;
					}
				}
				else
				{
					knockBackResist = 0f;
					velocity.X *= 0.99f;
					if (direction < 0 && velocity.X > -1f)
					{
						velocity.X = -1f;
					}
					if (direction > 0 && velocity.X < 1f)
					{
						velocity.X = 1f;
					}
				}
				this.ai[2] += 1f;
				if ((double)this.ai[2] > 210.0 && velocity.Y == 0f && Main.netMode != 1)
				{
					switch (Main.rand.Next(3))
					{
					case 0:
						this.ai[0] = 3f;
						break;
					case 1:
						this.ai[0] = 4f;
						noTileCollide = true;
						velocity.Y = -8f;
						break;
					case 2:
						this.ai[0] = 6f;
						break;
					default:
						this.ai[0] = 2f;
						break;
					}
					if (Main.tenthAnniversaryWorld && type == 476 && this.ai[0] == 3f && Main.rand.Next(2) == 0)
					{
						this.ai[0] = 8f;
					}
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 3f)
			{
				velocity.X *= 0.85f;
				dontTakeDamage = true;
				this.ai[1] += 1f;
				if (Main.netMode != 1 && this.ai[1] >= 180f)
				{
					this.ai[0] = 2f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				if (Main.expertMode)
				{
					ReflectProjectiles(base.Hitbox);
					reflectsProjectiles = true;
				}
			}
			else if (this.ai[0] == 4f)
			{
				noTileCollide = true;
				noGravity = true;
				knockBackResist = 0f;
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				spriteDirection = direction;
				TargetClosest();
				Vector2 center29 = Main.player[target].Center;
				center29.Y -= 350f;
				Vector2 vector175 = center29 - base.Center;
				if (this.ai[2] == 1f)
				{
					this.ai[1] += 1f;
					vector175 = Main.player[target].Center - base.Center;
					((Vector2)(ref vector175)).Normalize();
					vector175 *= 8f;
					velocity = (velocity * 4f + vector175) / 5f;
					if (Main.netMode != 1 && this.ai[1] > 6f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 4.1f;
						this.ai[2] = 0f;
						velocity = vector175;
						netUpdate = true;
					}
				}
				else if (Math.Abs(base.Center.X - Main.player[target].Center.X) < 40f && base.Center.Y < Main.player[target].Center.Y - 300f)
				{
					if (Main.netMode != 1)
					{
						this.ai[1] = 0f;
						this.ai[2] = 1f;
						netUpdate = true;
					}
				}
				else
				{
					((Vector2)(ref vector175)).Normalize();
					vector175 *= 12f;
					velocity = (velocity * 5f + vector175) / 6f;
				}
			}
			else if (this.ai[0] == 4.1f)
			{
				knockBackResist = 0f;
				if (this.ai[2] == 0f && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1) && !Collision.SolidCollision(position, width, height))
				{
					this.ai[2] = 1f;
				}
				if (position.Y + (float)height >= Main.player[target].position.Y || velocity.Y <= 0f)
				{
					this.ai[1] += 1f;
					if (Main.netMode != 1 && this.ai[1] > 10f)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
						if (Collision.SolidCollision(position, width, height))
						{
							this.ai[0] = 5f;
						}
					}
				}
				else if (this.ai[2] == 0f)
				{
					noTileCollide = true;
					noGravity = true;
					knockBackResist = 0f;
				}
				velocity.Y += 0.2f;
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
			}
			else if (this.ai[0] == 5f)
			{
				if (velocity.X > 0f)
				{
					direction = 1;
				}
				else
				{
					direction = -1;
				}
				spriteDirection = direction;
				noTileCollide = true;
				noGravity = true;
				knockBackResist = 0f;
				Vector2 vector176 = Main.player[target].Center - base.Center;
				vector176.Y -= 4f;
				if (Main.netMode != 1 && ((Vector2)(ref vector176)).Length() < 200f && !Collision.SolidCollision(position, width, height))
				{
					this.ai[0] = 2f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
				}
				if (((Vector2)(ref vector176)).Length() > 10f)
				{
					((Vector2)(ref vector176)).Normalize();
					vector176 *= 10f;
				}
				velocity = (velocity * 4f + vector176) / 5f;
			}
			else if (this.ai[0] == 6f)
			{
				knockBackResist = 0f;
				if (velocity.Y == 0f)
				{
					TargetClosest();
					velocity.X *= 0.8f;
					this.ai[1] += 1f;
					if (this.ai[1] > 5f)
					{
						this.ai[1] = 0f;
						velocity.Y -= 4f;
						if (Main.player[target].position.Y + (float)Main.player[target].height < base.Center.Y)
						{
							velocity.Y -= 1.25f;
						}
						if (Main.player[target].position.Y + (float)Main.player[target].height < base.Center.Y - 40f)
						{
							velocity.Y -= 1.5f;
						}
						if (Main.player[target].position.Y + (float)Main.player[target].height < base.Center.Y - 80f)
						{
							velocity.Y -= 1.75f;
						}
						if (Main.player[target].position.Y + (float)Main.player[target].height < base.Center.Y - 120f)
						{
							velocity.Y -= 2f;
						}
						if (Main.player[target].position.Y + (float)Main.player[target].height < base.Center.Y - 160f)
						{
							velocity.Y -= 2.25f;
						}
						if (Main.player[target].position.Y + (float)Main.player[target].height < base.Center.Y - 200f)
						{
							velocity.Y -= 2.5f;
						}
						if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
						{
							velocity.Y -= 2f;
						}
						velocity.X = 12 * direction;
						this.ai[2] += 1f;
						netUpdate = true;
					}
				}
				else
				{
					velocity.X *= 0.98f;
					if (direction < 0 && velocity.X > -8f)
					{
						velocity.X = -8f;
					}
					if (direction > 0 && velocity.X < 8f)
					{
						velocity.X = 8f;
					}
				}
				if (Main.netMode != 1 && this.ai[2] >= 3f && velocity.Y == 0f)
				{
					this.ai[0] = 2f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 7f)
			{
				damage = 0;
				life = lifeMax;
				defense = 9999;
				noTileCollide = true;
				alpha += 7;
				if (alpha > 255)
				{
					alpha = 255;
				}
				velocity.X *= 0.98f;
			}
			else
			{
				if (this.ai[0] != 8f)
				{
					return;
				}
				velocity.X *= 0.85f;
				this.ai[1] += 1f;
				if (Main.netMode != 1)
				{
					if (!Main.tenthAnniversaryWorld || this.ai[1] >= 180f)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						netUpdate = true;
					}
					else if (this.ai[1] % 20f == 0f)
					{
						AI_87_BigMimic_FireStuffCannonBurst();
					}
				}
			}
		}
		else if (aiStyle == 88)
		{
			int num445 = 7;
			noTileCollide = false;
			noGravity = true;
			knockBackResist = 0.2f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
			damage = defDamage;
			if (!Main.eclipse && Main.netMode != 1)
			{
				if (this.ai[0] != -1f)
				{
					netUpdate = true;
				}
				this.ai[0] = -1f;
			}
			else if (target < 0 || Main.player[target].dead || !Main.player[target].active)
			{
				TargetClosest();
				Vector2 vector177 = Main.player[target].Center - base.Center;
				if (Main.netMode != 1 && (Main.player[target].dead || ((Vector2)(ref vector177)).Length() > 3000f))
				{
					if (this.ai[0] != -1f)
					{
						netUpdate = true;
					}
					this.ai[0] = -1f;
				}
			}
			else
			{
				Vector2 vector178 = Main.player[target].Center - base.Center;
				if (Main.netMode != 1 && this.ai[0] > 1f && ((Vector2)(ref vector178)).Length() > 1000f)
				{
					if (this.ai[0] != 1f)
					{
						netUpdate = true;
					}
					this.ai[0] = 1f;
				}
			}
			if (this.ai[0] == -1f)
			{
				Vector2 vector180 = default(Vector2);
				((Vector2)(ref vector180))._002Ector(0f, -8f);
				velocity = (velocity * 9f + vector180) / 10f;
				noTileCollide = true;
				dontTakeDamage = true;
			}
			else if (this.ai[0] == 0f)
			{
				TargetClosest();
				if (base.Center.X < Main.player[target].Center.X - 2f)
				{
					direction = 1;
				}
				if (base.Center.X > Main.player[target].Center.X + 2f)
				{
					direction = -1;
				}
				spriteDirection = direction;
				rotation = (rotation * 9f + velocity.X * 0.1f) / 10f;
				if (collideX)
				{
					velocity.X *= (0f - oldVelocity.X) * 0.5f;
					if (velocity.X > 4f)
					{
						velocity.X = 4f;
					}
					if (velocity.X < -4f)
					{
						velocity.X = -4f;
					}
				}
				if (collideY)
				{
					velocity.Y *= (0f - oldVelocity.Y) * 0.5f;
					if (velocity.Y > 4f)
					{
						velocity.Y = 4f;
					}
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
				}
				Vector2 vector181 = Main.player[target].Center - base.Center;
				vector181.Y -= 200f;
				if (((Vector2)(ref vector181)).Length() > 800f)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
				}
				else if (((Vector2)(ref vector181)).Length() > 80f)
				{
					float num448 = 6f;
					float num449 = 30f;
					((Vector2)(ref vector181)).Normalize();
					vector181 *= num448;
					velocity = (velocity * (num449 - 1f) + vector181) / num449;
				}
				else if (((Vector2)(ref velocity)).Length() > 2f)
				{
					velocity *= 0.95f;
				}
				else if (((Vector2)(ref velocity)).Length() < 1f)
				{
					velocity *= 1.05f;
				}
				if (Main.netMode == 1)
				{
					return;
				}
				this.ai[1] += 1f;
				if (justHit)
				{
					this.ai[1] += Main.rand.Next(10, 30);
				}
				if (!(this.ai[1] >= 180f))
				{
					return;
				}
				this.ai[1] = 0f;
				this.ai[2] = 0f;
				this.ai[3] = 0f;
				netUpdate = true;
				while (this.ai[0] == 0f)
				{
					int num450 = Main.rand.Next(3);
					if (num450 == 0 && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 2f;
						continue;
					}
					switch (num450)
					{
					case 1:
						this.ai[0] = 3f;
						break;
					case 2:
						if (CountNPCS(478) + CountNPCS(479) < num445)
						{
							this.ai[0] = 4f;
						}
						break;
					}
				}
			}
			else if (this.ai[0] == 1f)
			{
				collideX = false;
				collideY = false;
				noTileCollide = true;
				knockBackResist = 0f;
				if (target < 0 || !Main.player[target].active || Main.player[target].dead)
				{
					TargetClosest();
				}
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else if (velocity.X > 0f)
				{
					direction = 1;
				}
				spriteDirection = direction;
				rotation = (rotation * 9f + velocity.X * 0.08f) / 10f;
				Vector2 vector182 = Main.player[target].Center - base.Center;
				if (Main.netMode != 1 && ((Vector2)(ref vector182)).Length() < 300f && !Collision.SolidCollision(position, width, height))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
				}
				float num451 = 7f + ((Vector2)(ref vector182)).Length() / 100f;
				float num452 = 25f;
				((Vector2)(ref vector182)).Normalize();
				vector182 *= num451;
				velocity = (velocity * (num452 - 1f) + vector182) / num452;
			}
			else if (this.ai[0] == 2f)
			{
				damage = (int)((double)defDamage * 0.5);
				knockBackResist = 0f;
				if (target < 0 || !Main.player[target].active || Main.player[target].dead)
				{
					TargetClosest();
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
				}
				if (Main.player[target].Center.X - 10f < base.Center.X)
				{
					direction = -1;
				}
				else if (Main.player[target].Center.X + 10f > base.Center.X)
				{
					direction = 1;
				}
				spriteDirection = direction;
				rotation = (rotation * 4f + velocity.X * 0.1f) / 5f;
				if (collideX)
				{
					velocity.X *= (0f - oldVelocity.X) * 0.5f;
					if (velocity.X > 4f)
					{
						velocity.X = 4f;
					}
					if (velocity.X < -4f)
					{
						velocity.X = -4f;
					}
				}
				if (collideY)
				{
					velocity.Y *= (0f - oldVelocity.Y) * 0.5f;
					if (velocity.Y > 4f)
					{
						velocity.Y = 4f;
					}
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
				}
				Vector2 vector183 = Main.player[target].Center - base.Center;
				vector183.Y -= 20f;
				this.ai[2] += 1f / 45f;
				if (Main.expertMode)
				{
					this.ai[2] += 1f / 60f;
				}
				float num453 = 4f + this.ai[2] + ((Vector2)(ref vector183)).Length() / 120f;
				float num454 = 20f;
				((Vector2)(ref vector183)).Normalize();
				vector183 *= num453;
				velocity = (velocity * (num454 - 1f) + vector183) / num454;
				if (Main.netMode != 1)
				{
					this.ai[1] += 1f;
					if (this.ai[1] > 240f || !Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
				}
			}
			else if (this.ai[0] == 3f)
			{
				knockBackResist = 0f;
				noTileCollide = true;
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				spriteDirection = direction;
				rotation = (rotation * 4f + velocity.X * 0.07f) / 5f;
				Vector2 vector184 = Main.player[target].Center - base.Center;
				vector184.Y -= 12f;
				if (base.Center.X > Main.player[target].Center.X)
				{
					vector184.X += 400f;
				}
				else
				{
					vector184.X -= 400f;
				}
				if (Main.netMode != 1 && Math.Abs(base.Center.X - Main.player[target].Center.X) > 350f && Math.Abs(base.Center.Y - Main.player[target].Center.Y) < 20f)
				{
					this.ai[0] = 3.1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				this.ai[1] += 1f / 30f;
				float num455 = 8f + this.ai[1];
				float num456 = 4f;
				((Vector2)(ref vector184)).Normalize();
				vector184 *= num455;
				velocity = (velocity * (num456 - 1f) + vector184) / num456;
			}
			else if (this.ai[0] == 3.1f)
			{
				knockBackResist = 0f;
				noTileCollide = true;
				rotation = (rotation * 4f + velocity.X * 0.07f) / 5f;
				Vector2 vector185 = Main.player[target].Center - base.Center;
				vector185.Y -= 12f;
				float num457 = 16f;
				float num459 = 8f;
				((Vector2)(ref vector185)).Normalize();
				vector185 *= num457;
				velocity = (velocity * (num459 - 1f) + vector185) / num459;
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				spriteDirection = direction;
				this.ai[1] += 1f;
				if (Main.netMode != 1 && this.ai[1] > 10f)
				{
					velocity = vector185;
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					else
					{
						direction = 1;
					}
					this.ai[0] = 3.2f;
					this.ai[1] = 0f;
					this.ai[1] = direction;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 3.2f)
			{
				damage = (int)((double)defDamage * 1.3);
				collideX = false;
				collideY = false;
				knockBackResist = 0f;
				noTileCollide = true;
				this.ai[2] += 1f / 30f;
				velocity.X = (16f + this.ai[2]) * this.ai[1];
				if ((this.ai[1] > 0f && base.Center.X > Main.player[target].Center.X + 260f) || (this.ai[1] < 0f && base.Center.X < Main.player[target].Center.X - 260f))
				{
					if (Main.netMode != 1 && !Collision.SolidCollision(position, width, height))
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					else if (Main.netMode != 1 && Math.Abs(base.Center.X - Main.player[target].Center.X) > 800f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
				}
				rotation = (rotation * 4f + velocity.X * 0.07f) / 5f;
			}
			else if (this.ai[0] == 4f)
			{
				bool flag95 = (double)(base.Center.Y / 16f) < Main.worldSurface;
				TargetClosest();
				if (Main.netMode != 1)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					for (int num460 = 0; num460 < 1000; num460++)
					{
						int num461 = (int)Main.player[target].Center.X / 16;
						int num462 = (int)Main.player[target].Center.Y / 16;
						int num463 = 30 + num460 / 50;
						int num464 = 20 + num460 / 75;
						num461 += Main.rand.Next(-num463, num463 + 1);
						num462 += Main.rand.Next(-num464, num464 + 1);
						if (WorldGen.SolidTile(num461, num462))
						{
							continue;
						}
						bool flag96 = false;
						int num465 = 50;
						while (num465 > 0)
						{
							num465--;
							if (!WorldGen.InWorld(num461, num462, 5))
							{
								flag96 = true;
								break;
							}
							Tile tile2 = Main.tile[num461, num462];
							if (tile2 == null)
							{
								flag96 = true;
								break;
							}
							if (tile2.liquid > 0 && tile2.lava())
							{
								flag96 = true;
								break;
							}
							Tile tile3 = Main.tile[num461, num462 - 1];
							if (tile3 == null)
							{
								flag96 = true;
								break;
							}
							if (tile3.liquid > 0 && tile3.lava())
							{
								flag96 = true;
								break;
							}
							if (WorldGen.SolidTile(num461, num462) || (flag95 && (double)num462 > Main.worldSurface))
							{
								break;
							}
							num462++;
						}
						if (!(num465 <= 0 || flag96))
						{
							val29 = new Vector2((float)(num461 * 16 + 8), (float)(num462 * 16 + 8)) - Main.player[target].Center;
							if (((Vector2)(ref val29)).Length() < 600f)
							{
								this.ai[0] = 4.1f;
								this.ai[1] = num461;
								this.ai[2] = num462;
								break;
							}
						}
					}
				}
				netUpdate = true;
			}
			else if (this.ai[0] == 4.1f)
			{
				if (velocity.X < -2f)
				{
					direction = -1;
				}
				else if (velocity.X > 2f)
				{
					direction = 1;
				}
				spriteDirection = direction;
				rotation = (rotation * 9f + velocity.X * 0.1f) / 10f;
				noTileCollide = true;
				int num466 = (int)this.ai[1];
				int num467 = (int)this.ai[2];
				float x3 = num466 * 16 + 8;
				float y5 = num467 * 16 - 20;
				Vector2 v4 = default(Vector2);
				((Vector2)(ref v4))._002Ector(x3, y5);
				v4 -= base.Center;
				float num468 = 6f + ((Vector2)(ref v4)).Length() / 150f;
				if (num468 > 10f)
				{
					num468 = 10f;
				}
				float num470 = 10f;
				if (((Vector2)(ref v4)).Length() < 10f)
				{
					this.ai[0] = 4.2f;
					netUpdate = true;
				}
				v4 = v4.SafeNormalize(Vector2.Zero);
				v4 *= num468;
				velocity = (velocity * (num470 - 1f) + v4) / num470;
				if (((Vector2)(ref velocity)).Length() > num468)
				{
					((Vector2)(ref velocity)).Normalize();
					velocity *= num468;
				}
			}
			else
			{
				if (this.ai[0] != 4.2f)
				{
					return;
				}
				rotation = (rotation * 9f + velocity.X * 0.1f) / 10f;
				knockBackResist = 0f;
				noTileCollide = true;
				int num471 = (int)this.ai[1];
				int num472 = (int)this.ai[2];
				float x4 = num471 * 16 + 8;
				float y6 = num472 * 16 - 20;
				Vector2 vector186 = default(Vector2);
				((Vector2)(ref vector186))._002Ector(x4, y6);
				vector186 -= base.Center;
				float num473 = 4f;
				float num474 = 2f;
				if (Main.netMode != 1 && ((Vector2)(ref vector186)).Length() < 4f)
				{
					int num475 = 70;
					if (Main.expertMode)
					{
						num475 = (int)((double)num475 * 0.75);
					}
					this.ai[3] += 1f;
					if (this.ai[3] == (float)num475)
					{
						int num476 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), num471 * 16 + 8, num472 * 16, 478, whoAmI);
						Main.npc[num476].netUpdate = true;
					}
					else if (this.ai[3] == (float)(num475 * 2))
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
						if (CountNPCS(478) + CountNPCS(479) < num445 && Main.rand.Next(3) != 0)
						{
							this.ai[0] = 4f;
						}
						else if (Collision.SolidCollision(position, width, height))
						{
							this.ai[0] = 1f;
						}
					}
				}
				if (((Vector2)(ref vector186)).Length() > num473)
				{
					((Vector2)(ref vector186)).Normalize();
					vector186 *= num473;
				}
				velocity = (velocity * (num474 - 1f) + vector186) / num474;
				if (((Vector2)(ref velocity)).Length() > num473)
				{
					((Vector2)(ref velocity)).Normalize();
					velocity *= num473;
				}
			}
		}
		else if (aiStyle == 89)
		{
			if (velocity.Y == 0f)
			{
				velocity.X *= 0.9f;
				rotation += velocity.X * 0.02f;
			}
			else
			{
				velocity.X *= 0.99f;
				rotation += velocity.X * 0.04f;
			}
			int num477 = 900;
			if (Main.expertMode)
			{
				num477 = 600;
			}
			if (justHit)
			{
				this.ai[0] -= Main.rand.Next(10, 21);
				if (!Main.expertMode)
				{
					this.ai[0] -= Main.rand.Next(10, 21);
				}
			}
			this.ai[0] += 1f;
			if (this.ai[0] >= (float)num477)
			{
				Transform(479);
			}
			if (Main.netMode != 1 && velocity.Y == 0f && (double)Math.Abs(velocity.X) < 0.2 && (double)this.ai[0] >= (double)num477 * 0.75)
			{
				float num478 = this.ai[0] - (float)num477 * 0.75f;
				num478 /= (float)num477 * 0.25f;
				if ((float)Main.rand.Next(-10, 120) < num478 * 100f)
				{
					velocity.Y -= (float)Main.rand.Next(20, 40) * 0.025f;
					velocity.X += (float)Main.rand.Next(-20, 20) * 0.025f;
					velocity *= 1f + num478 * 2f;
					netUpdate = true;
				}
			}
		}
		else if (aiStyle == 90)
		{
			noTileCollide = false;
			knockBackResist = 0.4f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
			noGravity = true;
			rotation = (rotation * 9f + velocity.X * 0.1f) / 10f;
			if (!Main.eclipse)
			{
				EncourageDespawn(5);
				velocity.Y -= 0.2f;
				if (velocity.Y < -8f)
				{
					velocity.Y = -8f;
				}
				noTileCollide = true;
				return;
			}
			if (this.ai[0] == 0f || this.ai[0] == 1f)
			{
				for (int num479 = 0; num479 < 200; num479++)
				{
					if (num479 != whoAmI && Main.npc[num479].active && Main.npc[num479].type == type)
					{
						Vector2 vector187 = Main.npc[num479].Center - base.Center;
						if (((Vector2)(ref vector187)).Length() < (float)(width + height))
						{
							((Vector2)(ref vector187)).Normalize();
							vector187 *= -0.1f;
							velocity += vector187;
							NPC nPC6 = Main.npc[num479];
							NPC nPC23 = nPC6;
							nPC23.velocity -= vector187;
						}
					}
				}
			}
			if (target < 0 || Main.player[target].dead || !Main.player[target].active)
			{
				TargetClosest();
				Vector2 vector188 = Main.player[target].Center - base.Center;
				if (Main.player[target].dead || ((Vector2)(ref vector188)).Length() > 3000f)
				{
					this.ai[0] = -1f;
				}
			}
			else
			{
				Vector2 vector189 = Main.player[target].Center - base.Center;
				if (this.ai[0] > 1f && ((Vector2)(ref vector189)).Length() > 1000f)
				{
					this.ai[0] = 1f;
				}
			}
			if (this.ai[0] == -1f)
			{
				Vector2 vector191 = default(Vector2);
				((Vector2)(ref vector191))._002Ector(0f, -8f);
				velocity = (velocity * 9f + vector191) / 10f;
				noTileCollide = true;
				dontTakeDamage = true;
			}
			else if (this.ai[0] == 0f)
			{
				TargetClosest();
				spriteDirection = direction;
				if (collideX)
				{
					velocity.X *= (0f - oldVelocity.X) * 0.5f;
					if (velocity.X > 4f)
					{
						velocity.X = 4f;
					}
					if (velocity.X < -4f)
					{
						velocity.X = -4f;
					}
				}
				if (collideY)
				{
					velocity.Y *= (0f - oldVelocity.Y) * 0.5f;
					if (velocity.Y > 4f)
					{
						velocity.Y = 4f;
					}
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
				}
				Vector2 vector192 = Main.player[target].Center - base.Center;
				if (((Vector2)(ref vector192)).Length() > 800f)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
				}
				else if (((Vector2)(ref vector192)).Length() > 200f)
				{
					float num481 = 5.5f + ((Vector2)(ref vector192)).Length() / 100f + this.ai[1] / 15f;
					float num482 = 40f;
					((Vector2)(ref vector192)).Normalize();
					vector192 *= num481;
					velocity = (velocity * (num482 - 1f) + vector192) / num482;
				}
				else if (((Vector2)(ref velocity)).Length() > 2f)
				{
					velocity *= 0.95f;
				}
				else if (((Vector2)(ref velocity)).Length() < 1f)
				{
					velocity *= 1.05f;
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 90f)
				{
					this.ai[1] = 0f;
					this.ai[0] = 2f;
				}
			}
			else if (this.ai[0] == 1f)
			{
				collideX = false;
				collideY = false;
				noTileCollide = true;
				knockBackResist = 0f;
				if (target < 0 || !Main.player[target].active || Main.player[target].dead)
				{
					TargetClosest();
				}
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else if (velocity.X > 0f)
				{
					direction = 1;
				}
				spriteDirection = direction;
				rotation = (rotation * 9f + velocity.X * 0.08f) / 10f;
				Vector2 vector193 = Main.player[target].Center - base.Center;
				if (((Vector2)(ref vector193)).Length() < 300f && !Collision.SolidCollision(position, width, height))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
				}
				this.ai[2] += 1f / 60f;
				float num483 = 5.5f + this.ai[2] + ((Vector2)(ref vector193)).Length() / 150f;
				float num484 = 35f;
				((Vector2)(ref vector193)).Normalize();
				vector193 *= num483;
				velocity = (velocity * (num484 - 1f) + vector193) / num484;
			}
			else if (this.ai[0] == 2f)
			{
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else if (velocity.X > 0f)
				{
					direction = 1;
				}
				spriteDirection = direction;
				rotation = (rotation * 7f + velocity.X * 0.1f) / 8f;
				knockBackResist = 0f;
				noTileCollide = true;
				Vector2 vector194 = Main.player[target].Center - base.Center;
				vector194.Y -= 8f;
				float num485 = 9f;
				float num486 = 8f;
				((Vector2)(ref vector194)).Normalize();
				vector194 *= num485;
				velocity = (velocity * (num486 - 1f) + vector194) / num486;
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				spriteDirection = direction;
				this.ai[1] += 1f;
				if (this.ai[1] > 10f)
				{
					velocity = vector194;
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					else
					{
						direction = 1;
					}
					this.ai[0] = 2.1f;
					this.ai[1] = 0f;
				}
			}
			else
			{
				if (this.ai[0] != 2.1f)
				{
					return;
				}
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else if (velocity.X > 0f)
				{
					direction = 1;
				}
				spriteDirection = direction;
				velocity *= 1.01f;
				knockBackResist = 0f;
				noTileCollide = true;
				this.ai[1] += 1f;
				int num487 = 45;
				if (this.ai[1] > (float)num487)
				{
					if (!Collision.SolidCollision(position, width, height))
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
					}
					else if (this.ai[1] > (float)(num487 * 2))
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
					}
				}
			}
		}
		else if (aiStyle == 91)
		{
			noGravity = true;
			noTileCollide = false;
			dontTakeDamage = false;
			if (justHit && Main.netMode != 1 && Main.expertMode && Main.rand.Next(6) == 0)
			{
				netUpdate = true;
				this.ai[0] = -1f;
				this.ai[1] = 0f;
			}
			if (this.ai[0] == -1f)
			{
				dontTakeDamage = true;
				noGravity = false;
				velocity.X *= 0.98f;
				this.ai[1] += 1f;
				if (this.ai[1] >= 120f)
				{
					this.ai[0] = (this.ai[1] = (this.ai[2] = (this.ai[3] = 0f)));
				}
			}
			else if (this.ai[0] == 0f)
			{
				TargetClosest();
				if (Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					this.ai[0] = 1f;
					return;
				}
				Vector2 vector195 = Main.player[target].Center - base.Center;
				vector195.Y -= Main.player[target].height / 4;
				float num488 = ((Vector2)(ref vector195)).Length();
				Vector2 center30 = base.Center;
				center30.X = Main.player[target].Center.X;
				Vector2 vector196 = center30 - base.Center;
				if (((Vector2)(ref vector196)).Length() > 8f && Collision.CanHit(base.Center, 1, 1, center30, 1, 1))
				{
					this.ai[0] = 3f;
					this.ai[1] = center30.X;
					this.ai[2] = center30.Y;
					Vector2 center31 = base.Center;
					center31.Y = Main.player[target].Center.Y;
					if (((Vector2)(ref vector196)).Length() > 8f && Collision.CanHit(base.Center, 1, 1, center31, 1, 1) && Collision.CanHit(center31, 1, 1, Main.player[target].position, 1, 1))
					{
						this.ai[0] = 3f;
						this.ai[1] = center31.X;
						this.ai[2] = center31.Y;
					}
				}
				else
				{
					center30 = base.Center;
					center30.Y = Main.player[target].Center.Y;
					val29 = center30 - base.Center;
					if (((Vector2)(ref val29)).Length() > 8f && Collision.CanHit(base.Center, 1, 1, center30, 1, 1))
					{
						this.ai[0] = 3f;
						this.ai[1] = center30.X;
						this.ai[2] = center30.Y;
					}
				}
				if (this.ai[0] == 0f)
				{
					localAI[0] = 0f;
					((Vector2)(ref vector195)).Normalize();
					vector195 *= 0.5f;
					velocity += vector195;
					this.ai[0] = 4f;
					this.ai[1] = 0f;
				}
			}
			else if (this.ai[0] == 1f)
			{
				Vector2 vector197 = Main.player[target].Center - base.Center;
				float num489 = ((Vector2)(ref vector197)).Length();
				float num490 = 2f;
				num490 += num489 / 200f;
				int num492 = 50;
				((Vector2)(ref vector197)).Normalize();
				vector197 *= num490;
				velocity = (velocity * (float)(num492 - 1) + vector197) / (float)num492;
				if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
				}
			}
			else if (this.ai[0] == 2f)
			{
				noTileCollide = true;
				Vector2 vector198 = Main.player[target].Center - base.Center;
				float num493 = ((Vector2)(ref vector198)).Length();
				float num494 = 2f;
				int num495 = 4;
				((Vector2)(ref vector198)).Normalize();
				vector198 *= num494;
				velocity = (velocity * (float)(num495 - 1) + vector198) / (float)num495;
				if (num493 < 600f && !Collision.SolidCollision(position, width, height))
				{
					this.ai[0] = 0f;
				}
			}
			else if (this.ai[0] == 3f)
			{
				Vector2 vector199 = default(Vector2);
				((Vector2)(ref vector199))._002Ector(this.ai[1], this.ai[2]);
				Vector2 vector200 = vector199 - base.Center;
				float num496 = ((Vector2)(ref vector200)).Length();
				float num497 = 1f;
				float num498 = 3f;
				((Vector2)(ref vector200)).Normalize();
				vector200 *= num497;
				velocity = (velocity * (num498 - 1f) + vector200) / num498;
				if (collideX || collideY)
				{
					this.ai[0] = 4f;
					this.ai[1] = 0f;
				}
				if (num496 < num497 || num496 > 800f || Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					this.ai[0] = 0f;
				}
			}
			else
			{
				if (this.ai[0] != 4f)
				{
					return;
				}
				if (collideX)
				{
					velocity.X *= -0.8f;
				}
				if (collideY)
				{
					velocity.Y *= -0.8f;
				}
				Vector2 vector202;
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					vector202 = Main.player[target].Center - base.Center;
					vector202.Y -= Main.player[target].height / 4;
					((Vector2)(ref vector202)).Normalize();
					velocity = vector202 * 0.1f;
				}
				float num499 = 1.5f;
				float num500 = 20f;
				vector202 = velocity;
				((Vector2)(ref vector202)).Normalize();
				vector202 *= num499;
				velocity = (velocity * (num500 - 1f) + vector202) / num500;
				this.ai[1] += 1f;
				if (this.ai[1] > 180f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
				}
				if (Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					this.ai[0] = 0f;
				}
				localAI[0] += 1f;
				if (!(localAI[0] >= 5f) || Collision.SolidCollision(position - new Vector2(10f, 10f), width + 20, height + 20))
				{
					return;
				}
				localAI[0] = 0f;
				Vector2 center32 = base.Center;
				center32.X = Main.player[target].Center.X;
				if (Collision.CanHit(base.Center, 1, 1, center32, 1, 1) && Collision.CanHit(base.Center, 1, 1, center32, 1, 1) && Collision.CanHit(Main.player[target].Center, 1, 1, center32, 1, 1))
				{
					this.ai[0] = 3f;
					this.ai[1] = center32.X;
					this.ai[2] = center32.Y;
					return;
				}
				center32 = base.Center;
				center32.Y = Main.player[target].Center.Y;
				if (Collision.CanHit(base.Center, 1, 1, center32, 1, 1) && Collision.CanHit(Main.player[target].Center, 1, 1, center32, 1, 1))
				{
					this.ai[0] = 3f;
					this.ai[1] = center32.X;
					this.ai[2] = center32.Y;
				}
			}
		}
		else if (aiStyle == 92)
		{
			if (Main.rand.Next(20) == 0)
			{
				switch (Main.rand.Next(15, 18))
				{
				case 15:
					HitSound = SoundID.NPCHit15;
					break;
				case 16:
					HitSound = SoundID.NPCHit16;
					break;
				case 17:
					HitSound = SoundID.NPCHit17;
					break;
				}
			}
			if (Main.netMode == 1)
			{
				return;
			}
			bool flag97 = false;
			int num501 = (int)this.ai[0];
			int num503 = (int)this.ai[1];
			if (!flag97 && (!Main.tile[num501, num503].active() || Main.tile[num501, num503].type != 378))
			{
				flag97 = true;
			}
			if (!flag97 && (target == 255 || Main.player[target].dead || Vector2.Distance(base.Center, Main.player[target].Center) > 160000f))
			{
				TargetClosest(faceTarget: false);
				if (target == 255 || Main.player[target].dead || Vector2.Distance(base.Center, Main.player[target].Center) > 160000f)
				{
					flag97 = true;
				}
			}
			if (flag97)
			{
				life = 0;
				HitEffect();
				active = false;
				int num504 = TETrainingDummy.Find((int)this.ai[0], (int)this.ai[1]);
				if (num504 != -1)
				{
					((TETrainingDummy)TileEntity.ByID[num504]).Deactivate();
				}
			}
		}
		else if (aiStyle == 93)
		{
			if (Main.netMode != 1 && localAI[0] == 0f)
			{
				localAI[0] = 1f;
				for (int num505 = 0; num505 < 4; num505++)
				{
					int num506 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X + num505 * 40 - 150, (int)base.Center.Y, 492, whoAmI, whoAmI, num505, 0f, 60 * num505);
					Main.npc[num506].TargetClosest(faceTarget: false);
					Main.npc[num506].timeLeft = 600;
					Main.npc[num506].netUpdate = true;
					this.ai[num505] = num506;
				}
				netUpdate = true;
			}
			bool flag98 = true;
			for (int num507 = 0; num507 < 4; num507++)
			{
				if (this.ai[num507] >= 0f && (!Main.npc[(int)this.ai[num507]].active || Main.npc[(int)this.ai[num507]].type != 492))
				{
					this.ai[num507] = -1f;
					netUpdate = true;
				}
				else if (this.ai[num507] >= 0f)
				{
					flag98 = false;
				}
			}
			if (flag98)
			{
				StrikeNPCNoInteraction(9999, 0f, 0);
				return;
			}
			if (Main.netMode != 1 && Main.rand.Next(300) == 0)
			{
				Vector2 spinningpoint36 = new Vector2((Main.rand.NextFloat() - 0.5f) * (float)(width - 70), (Main.rand.NextFloat() - 0.5f) * 20f - (float)(height / 2) - 20f);
				double radians30 = rotation;
				val29 = default(Vector2);
				Vector2 vector203 = Utils.RotatedBy(spinningpoint36, radians30, val29);
				vector203 += base.Center;
				int num508 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)vector203.X, (int)vector203.Y, Utils.SelectRandom<int>(Main.rand, 213, 215, 214, 212));
				Main.npc[num508].velocity = new Vector2((Main.rand.NextFloat() - 0.5f) * 5f, -8.01f) + velocity;
				Main.npc[num508].netUpdate = true;
				Main.npc[num508].timeLeft = 600;
			}
			if ((localAI[3] += 1f) >= 64f)
			{
				localAI[3] = 0f;
			}
			TargetClosest();
			int num509 = (int)base.Center.X / 16 + Math.Sign(velocity.X) * 10;
			int num510 = (int)(position.Y + (float)height) / 16;
			int num511 = 0;
			if (Main.tile[num509, num510].nactive() && Main.tileSolid[Main.tile[num509, num510].type] && !Main.tileSolidTop[Main.tile[num509, num510].type])
			{
				num511 = 1;
			}
			else
			{
				for (; num511 < 150 && num510 + num511 < Main.maxTilesY; num511++)
				{
					int num512 = num510 + num511;
					if (Main.tile[num509, num512].nactive() && Main.tileSolid[Main.tile[num509, num512].type] && !Main.tileSolidTop[Main.tile[num509, num512].type])
					{
						num511--;
						break;
					}
				}
			}
			float num514 = num511 * 16;
			if (num514 < 350f)
			{
				float num515 = num514 - 350f;
				if (num515 < -4f)
				{
					num515 = -4f;
				}
				velocity.Y = MathHelper.Lerp(velocity.Y, num515, 0.05f);
			}
			else if (num514 > 450f)
			{
				float num516 = num514 - 350f;
				if (num516 > 4f)
				{
					num516 = 4f;
				}
				velocity.Y = MathHelper.Lerp(velocity.Y, num516, 0.05f);
			}
			else
			{
				velocity.Y *= 0.95f;
			}
			float num517 = Main.player[target].Center.X - base.Center.X;
			if (Math.Abs(num517) >= 300f && (Math.Abs(velocity.X) < 6f || Math.Sign(velocity.X) != direction))
			{
				velocity.X += (float)direction * 0.06f;
			}
			rotation = velocity.X * 0.025f;
			spriteDirection = -Math.Sign(velocity.X);
			for (int num518 = 0; num518 < 2; num518++)
			{
				if (Main.rand.Next(2) != 0)
				{
					Vector2 spinningpoint37 = new Vector2((Main.rand.NextFloat() - 0.5f) * (float)(width - 70), (Main.rand.NextFloat() - 0.5f) * 20f + (float)(height / 2) + 10f);
					double radians31 = rotation;
					val29 = default(Vector2);
					Vector2 vector204 = Utils.RotatedBy(spinningpoint37, radians31, val29);
					Dust[] dust90 = Main.dust;
					Vector2 center43 = base.Center;
					newColor = default(Color);
					Dust dust85 = dust90[Dust.NewDust(center43, 0, 0, 228, 0f, 0f, 0, newColor)];
					dust85.position = base.Center + vector204;
					dust85.velocity = Vector2.Zero;
					dust85.noGravity = true;
					dust85.noLight = true;
					dust85.fadeIn = 1.5f;
					dust85.scale = 0.5f;
				}
			}
		}
		else if (aiStyle == 94)
		{
			if (this.ai[2] == 1f)
			{
				velocity = Vector2.UnitY * ((Vector2)(ref velocity)).Length();
				if (velocity.Y < 0.25f)
				{
					velocity.Y += 0.02f;
				}
				if (velocity.Y > 0.25f)
				{
					velocity.Y -= 0.02f;
				}
				dontTakeDamage = true;
				this.ai[1]++;
				if (this.ai[1] > 120f)
				{
					Opacity = 1f - (this.ai[1] - 120f) / 60f;
				}
				int num519 = 6;
				switch (type)
				{
				case 517:
					num519 = 127;
					break;
				case 422:
					num519 = 229;
					break;
				case 507:
					num519 = 242;
					break;
				case 493:
					num519 = 135;
					break;
				}
				if (Main.rand.Next(5) == 0 && this.ai[1] < 120f)
				{
					for (int num520 = 0; num520 < 3; num520++)
					{
						Dust[] dust91 = Main.dust;
						Vector2 left = base.Left;
						int num1735 = width;
						int num1736 = height / 2;
						int num1737 = num519;
						newColor = default(Color);
						Dust dust86 = dust91[Dust.NewDust(left, num1735, num1736, num1737, 0f, 0f, 0, newColor)];
						dust86.position = base.Center + Vector2.UnitY.RotatedByRandom(4.188790321350098) * new Vector2((float)width * 1.5f, (float)height * 1.1f) * 0.8f * (0.8f + Main.rand.NextFloat() * 0.2f);
						dust86.velocity.X = 0f;
						dust86.velocity.Y = (0f - Math.Abs(dust86.velocity.Y - (float)num520 + velocity.Y - 4f)) * 3f;
						dust86.noGravity = true;
						dust86.fadeIn = 1f;
						dust86.scale = 1f + Main.rand.NextFloat() + (float)num520 * 0.3f;
					}
				}
				if (this.ai[1] < 150f)
				{
					for (int num521 = 0; num521 < 3; num521++)
					{
						if (Main.rand.Next(4) == 0)
						{
							Dust[] dust92 = Main.dust;
							Vector2 val87 = base.Top + new Vector2((float)(-width) * (0.33f - 0.11f * (float)num521), -20f);
							int num1738 = (int)((float)width * (0.66f - 0.22f * (float)num521));
							int num1739 = num519;
							newColor = default(Color);
							Dust dust60 = dust92[Dust.NewDust(val87, num1738, 20, num1739, 0f, 0f, 0, newColor)];
							dust60.velocity.X = 0f;
							dust60.velocity.Y = (0f - Math.Abs(dust60.velocity.Y - (float)num521 + velocity.Y - 4f)) * (1f + this.ai[1] / 180f * 0.5f);
							dust60.noGravity = true;
							dust60.fadeIn = 1f;
							dust60.scale = 1f + Main.rand.NextFloat() + (float)num521 * 0.3f;
						}
					}
				}
				if (Main.rand.Next(5) == 0 && this.ai[1] < 150f)
				{
					for (int num522 = 0; num522 < 3; num522++)
					{
						Vector2 vector205 = base.Center + Vector2.UnitY.RotatedByRandom(4.188790321350098) * new Vector2((float)width, (float)height) * 0.7f * Main.rand.NextFloat();
						float num523 = 1f + Main.rand.NextFloat() * 2f + this.ai[1] / 180f * 4f;
						for (int num525 = 0; num525 < 6; num525++)
						{
							Dust[] dust93 = Main.dust;
							int num1740 = num519;
							newColor = default(Color);
							Dust dust61 = dust93[Dust.NewDust(vector205, 4, 4, num1740, 0f, 0f, 0, newColor)];
							dust61.position = vector205;
							dust61.velocity.X *= num523;
							dust61.velocity.Y = (0f - Math.Abs(dust61.velocity.Y)) * num523;
							dust61.noGravity = true;
							dust61.fadeIn = 1f;
							dust61.scale = 1.5f + Main.rand.NextFloat() + (float)num525 * 0.13f;
						}
						SoundEngine.PlaySound(3, vector205, Utils.SelectRandom<int>(Main.rand, 1, 18));
					}
				}
				if (Main.rand.Next(3) != 0 && this.ai[1] < 150f)
				{
					Dust[] dust94 = Main.dust;
					Vector2 left2 = base.Left;
					int num1741 = width;
					int num1742 = height / 2;
					newColor = default(Color);
					Dust dust62 = dust94[Dust.NewDust(left2, num1741, num1742, 241, 0f, 0f, 0, newColor)];
					dust62.position = base.Center + Vector2.UnitY.RotatedByRandom(4.188790321350098) * new Vector2((float)(width / 2), (float)(height / 2)) * (0.8f + Main.rand.NextFloat() * 0.2f);
					dust62.velocity.X = 0f;
					dust62.velocity.Y = Math.Abs(dust62.velocity.Y) * 0.25f;
				}
				if (this.ai[1] % 60f == 1f)
				{
					SoundEngine.PlaySound(4, base.Center, 22);
				}
				if (this.ai[1] >= 180f)
				{
					life = 0;
					HitEffect(0, 1337.0);
					checkDead();
				}
				return;
			}
			if (this.ai[3] > 0f)
			{
				bool flag99 = dontTakeDamage;
				switch (type)
				{
				case 517:
					flag99 = ShieldStrengthTowerSolar != 0;
					break;
				case 422:
					flag99 = ShieldStrengthTowerVortex != 0;
					break;
				case 507:
					flag99 = ShieldStrengthTowerNebula != 0;
					break;
				case 493:
					flag99 = ShieldStrengthTowerStardust != 0;
					break;
				}
				if (flag99 != dontTakeDamage)
				{
					SoundEngine.PlaySound(in SoundID.NPCDeath58, position);
				}
				else if (this.ai[3] == 1f)
				{
					SoundEngine.PlaySound(in SoundID.NPCDeath3, position);
				}
				this.ai[3]++;
				if (this.ai[3] > 120f)
				{
					this.ai[3] = 0f;
				}
			}
			switch (type)
			{
			case 517:
				dontTakeDamage = ShieldStrengthTowerSolar != 0;
				break;
			case 422:
				dontTakeDamage = ShieldStrengthTowerVortex != 0;
				break;
			case 507:
				dontTakeDamage = ShieldStrengthTowerNebula != 0;
				break;
			case 493:
				dontTakeDamage = ShieldStrengthTowerStardust != 0;
				break;
			}
			TargetClosest(faceTarget: false);
			if (Main.player[target].Distance(base.Center) > 2000f)
			{
				localAI[0]++;
			}
			if (localAI[0] >= 60f && Main.netMode != 1)
			{
				localAI[0] = 0f;
				netUpdate = true;
				life = (int)MathHelper.Clamp((float)(life + 200), 0f, (float)lifeMax);
			}
			else
			{
				localAI[0] = 0f;
			}
			velocity = new Vector2(0f, (float)Math.Sin((float)Math.PI * 2f * this.ai[0] / 300f) * 0.5f);
			Point origin = base.Bottom.ToTileCoordinates();
			int maxDistance = 10;
			int num526 = 20;
			int num527 = 30;
			if (WorldGen.InWorld(origin.X, origin.Y, 20) && Main.tile[origin.X, origin.Y] != null)
			{
				if (WorldUtils.Find(origin, Searches.Chain(new Searches.Down(maxDistance), new Terraria.WorldBuilding.Conditions.IsSolid()), out var result))
				{
					float num528 = 1f - (float)Math.Abs(origin.Y - result.Y) / 10f;
					position.Y -= 1.5f * num528;
				}
				else if (!WorldUtils.Find(origin, Searches.Chain(new Searches.Down(num526), new Terraria.WorldBuilding.Conditions.IsSolid()), out result))
				{
					float num529 = 1f;
					if (WorldUtils.Find(origin, Searches.Chain(new Searches.Down(num527), new Terraria.WorldBuilding.Conditions.IsSolid()), out result))
					{
						num529 = Utils.GetLerpValue(num526, num527, Math.Abs(origin.Y - result.Y), clamped: true);
					}
					position.Y += 1.5f * num529;
				}
			}
			if (!Main.remixWorld && !Main.getGoodWorld && (double)base.Bottom.Y > Main.worldSurface * 16.0 - 100.0)
			{
				position.Y = (float)Main.worldSurface * 16f - (float)height - 100f;
			}
			this.ai[0]++;
			if (this.ai[0] >= 300f)
			{
				this.ai[0] = 0f;
				netUpdate = true;
			}
			if (type == 493)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust[] dust95 = Main.dust;
					Vector2 left3 = base.Left;
					int num1743 = width;
					int num1744 = height / 2;
					newColor = default(Color);
					Dust dust63 = dust95[Dust.NewDust(left3, num1743, num1744, 241, 0f, 0f, 0, newColor)];
					dust63.position = base.Center + Vector2.UnitY.RotatedByRandom(2.094395160675049) * new Vector2((float)(width / 2), (float)(height / 2)) * (0.8f + Main.rand.NextFloat() * 0.2f);
					dust63.velocity.X = 0f;
					dust63.velocity.Y = Math.Abs(dust63.velocity.Y) * 0.25f;
				}
				for (int num530 = 0; num530 < 3; num530++)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust[] dust96 = Main.dust;
						Vector2 val88 = base.Top + new Vector2((float)(-width) * (0.33f - 0.11f * (float)num530), -20f);
						int num1745 = (int)((float)width * (0.66f - 0.22f * (float)num530));
						newColor = default(Color);
						Dust dust64 = dust96[Dust.NewDust(val88, num1745, 20, 135, 0f, 0f, 0, newColor)];
						dust64.velocity.X = 0f;
						dust64.velocity.Y = (0f - Math.Abs(dust64.velocity.Y - (float)num530 + velocity.Y - 4f)) * 1f;
						dust64.noGravity = true;
						dust64.fadeIn = 1f;
						dust64.scale = 1f + Main.rand.NextFloat() + (float)num530 * 0.3f;
					}
				}
				if (this.ai[1] > 0f)
				{
					this.ai[1]--;
				}
				if (Main.netMode != 1 && this.ai[1] <= 0f && Main.player[target].active && !Main.player[target].dead && Distance(Main.player[target].Center) < 1080f && Main.player[target].position.Y - position.Y < 400f)
				{
					SpawnStardustMark_StardustTower();
				}
			}
			if (type == 507)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust[] dust97 = Main.dust;
					Vector2 left4 = base.Left;
					int num1746 = width;
					int num1747 = height / 2;
					newColor = default(Color);
					Dust dust65 = dust97[Dust.NewDust(left4, num1746, num1747, 241, 0f, 0f, 0, newColor)];
					dust65.position = base.Center + Vector2.UnitY.RotatedByRandom(2.094395160675049) * new Vector2((float)(width / 2), (float)(height / 2)) * (0.8f + Main.rand.NextFloat() * 0.2f);
					dust65.velocity.X = 0f;
					dust65.velocity.Y = Math.Abs(dust65.velocity.Y) * 0.25f;
				}
				for (int num531 = 0; num531 < 3; num531++)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust[] dust98 = Main.dust;
						Vector2 val89 = base.Top + new Vector2((float)(-width) * (0.33f - 0.11f * (float)num531), -20f);
						int num1748 = (int)((float)width * (0.66f - 0.22f * (float)num531));
						newColor = default(Color);
						Dust dust66 = dust98[Dust.NewDust(val89, num1748, 20, 242, 0f, 0f, 0, newColor)];
						dust66.velocity.X = 0f;
						dust66.velocity.Y = (0f - Math.Abs(dust66.velocity.Y - (float)num531 + velocity.Y - 4f)) * 1f;
						dust66.noGravity = true;
						dust66.fadeIn = 1f;
						dust66.color = Color.Black;
						dust66.scale = 1f + Main.rand.NextFloat() + (float)num531 * 0.3f;
					}
				}
			}
			if (type == 422)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust[] dust99 = Main.dust;
					Vector2 left5 = base.Left;
					int num1749 = width;
					int num1750 = height / 2;
					newColor = default(Color);
					Dust dust67 = dust99[Dust.NewDust(left5, num1749, num1750, 241, 0f, 0f, 0, newColor)];
					dust67.position = base.Center + Vector2.UnitY.RotatedByRandom(2.094395160675049) * new Vector2((float)(width / 2), (float)(height / 2)) * (0.8f + Main.rand.NextFloat() * 0.2f);
					dust67.velocity.X = 0f;
					dust67.velocity.Y = Math.Abs(dust67.velocity.Y) * 0.25f;
				}
				for (int num532 = 0; num532 < 3; num532++)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust[] dust100 = Main.dust;
						Vector2 val90 = base.Top + new Vector2((float)(-width) * (0.33f - 0.11f * (float)num532), -20f);
						int num1751 = (int)((float)width * (0.66f - 0.22f * (float)num532));
						newColor = default(Color);
						Dust dust68 = dust100[Dust.NewDust(val90, num1751, 20, 229, 0f, 0f, 0, newColor)];
						dust68.velocity.X = 0f;
						dust68.velocity.Y = (0f - Math.Abs(dust68.velocity.Y - (float)num532 + velocity.Y - 4f)) * 1f;
						dust68.noGravity = true;
						dust68.fadeIn = 1f;
						dust68.color = Color.Black;
						dust68.scale = 1f + Main.rand.NextFloat() + (float)num532 * 0.3f;
					}
				}
				if (this.ai[1] > 0f)
				{
					this.ai[1]--;
				}
				if (Main.netMode != 1 && this.ai[1] <= 0f && Main.player[target].active && !Main.player[target].dead && Distance(Main.player[target].Center) < 3240f && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
				{
					this.ai[1] = 60 + Main.rand.Next(120);
					Point point3 = Main.player[target].Top.ToTileCoordinates();
					bool flag100 = CountNPCS(428) + CountNPCS(427) + CountNPCS(426) < 14;
					for (int num533 = 0; num533 < 10; num533++)
					{
						if (WorldGen.SolidTile(point3.X, point3.Y))
						{
							break;
						}
						if (point3.Y <= 10)
						{
							break;
						}
						point3.Y--;
					}
					if (flag100)
					{
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), point3.X * 16 + 8, point3.Y * 16 + 24, 0f, 0f, 579, 0, 0f, Main.myPlayer);
					}
					else
					{
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), point3.X * 16 + 8, point3.Y * 16 + 17, 0f, 0f, 578, 0, 1f, Main.myPlayer);
					}
				}
				if (Main.netMode != 1 && this.ai[1] <= 0f && Main.player[target].active && !Main.player[target].dead && Distance(Main.player[target].Center) < 1080f && Main.player[target].position.Y - position.Y < 400f && CountNPCS(427) + CountNPCS(426) * 3 + CountNPCS(428) < 20)
				{
					this.ai[1] = 420 + Main.rand.Next(360);
					Point point4 = base.Center.ToTileCoordinates();
					Point point5 = Main.player[target].Center.ToTileCoordinates();
					Vector2 vector206 = Main.player[target].Center - base.Center;
					int num534 = 20;
					int num536 = 3;
					int num537 = 8;
					int num538 = 2;
					int num539 = 0;
					bool flag102 = false;
					if (((Vector2)(ref vector206)).Length() > 2000f)
					{
						flag102 = true;
					}
					while (!flag102 && num539 < 100)
					{
						num539++;
						int num540 = Main.rand.Next(point5.X - num534, point5.X + num534 + 1);
						int num541 = Main.rand.Next(point5.Y - num534, point5.Y + num534 + 1);
						if ((num541 < point5.Y - num537 || num541 > point5.Y + num537 || num540 < point5.X - num537 || num540 > point5.X + num537) && (num541 < point4.Y - num536 || num541 > point4.Y + num536 || num540 < point4.X - num536 || num540 > point4.X + num536) && !Main.tile[num540, num541].nactive())
						{
							bool flag103 = true;
							if (flag103 && Main.tile[num540, num541].lava())
							{
								flag103 = false;
							}
							if (flag103 && Collision.SolidTiles(num540 - num538, num540 + num538, num541 - num538, num541 + num538))
							{
								flag103 = false;
							}
							if (flag103 && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
							{
								flag103 = false;
							}
							if (flag103)
							{
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), num540 * 16 + 8, num541 * 16 + 8, 0f, 0f, 579, 0, 0f, Main.myPlayer);
								flag102 = true;
								break;
							}
						}
					}
				}
			}
			if (type != 517)
			{
				return;
			}
			if (Main.rand.Next(5) == 0)
			{
				Dust[] dust101 = Main.dust;
				Vector2 left6 = base.Left;
				int num1752 = width;
				int num1753 = height / 2;
				newColor = default(Color);
				Dust dust69 = dust101[Dust.NewDust(left6, num1752, num1753, 241, 0f, 0f, 0, newColor)];
				dust69.position = base.Center + Vector2.UnitY.RotatedByRandom(2.094395160675049) * new Vector2((float)(width / 2), (float)(height / 2)) * (0.8f + Main.rand.NextFloat() * 0.2f);
				dust69.velocity.X = 0f;
				dust69.velocity.Y = Math.Abs(dust69.velocity.Y) * 0.25f;
			}
			for (int num542 = 0; num542 < 3; num542++)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust[] dust102 = Main.dust;
					Vector2 val91 = base.Top + new Vector2((float)(-width) * (0.33f - 0.11f * (float)num542), -20f);
					int num1754 = (int)((float)width * (0.66f - 0.22f * (float)num542));
					newColor = default(Color);
					Dust dust71 = dust102[Dust.NewDust(val91, num1754, 20, 6, 0f, 0f, 0, newColor)];
					dust71.velocity.X = 0f;
					dust71.velocity.Y = (0f - Math.Abs(dust71.velocity.Y - (float)num542 + velocity.Y - 4f)) * 1f;
					dust71.noGravity = true;
					dust71.fadeIn = 1f;
					dust71.scale = 1f + Main.rand.NextFloat() + (float)num542 * 0.3f;
				}
			}
			if (this.ai[1] > 0f)
			{
				this.ai[1]--;
			}
			if (Main.netMode != 1 && this.ai[1] <= 0f && Main.player[target].active && !Main.player[target].dead && Distance(Main.player[target].Center) < 1080f && Main.player[target].position.Y - position.Y < 700f)
			{
				Vector2 vector207 = base.Top + new Vector2((float)(-width) * 0.33f, -20f) + new Vector2((float)width * 0.66f, 20f) * Utils.RandomVector2(Main.rand, 0f, 1f);
				Vector2 vector208 = -Vector2.UnitY.RotatedByRandom(0.7853981852531433) * (7f + Main.rand.NextFloat() * 5f);
				int num543 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)vector207.X, (int)vector207.Y, 519, whoAmI);
				Main.npc[num543].velocity = vector208;
				Main.npc[num543].netUpdate = true;
				this.ai[1] = 60f;
			}
		}
		else if (aiStyle == 95)
		{
			float num544 = 300f;
			if (((Vector2)(ref velocity)).Length() > 4f)
			{
				velocity *= 0.95f;
			}
			velocity *= 0.99f;
			this.ai[0]++;
			float num545 = MathHelper.Clamp(this.ai[0] / num544, 0f, 1f);
			scale = 1f + 0.3f * num545;
			if (this.ai[0] >= num544)
			{
				if (Main.netMode != 1)
				{
					Transform(405);
					netUpdate = true;
				}
				return;
			}
			rotation += velocity.X * 0.1f;
			if (!(this.ai[0] > 20f))
			{
				return;
			}
			Vector2 center33 = base.Center;
			int num547 = (int)(this.ai[0] / (num544 / 2f));
			for (int num548 = 0; num548 < num547 + 1; num548++)
			{
				if (Main.rand.Next(2) != 0)
				{
					int num549 = 226;
					float num550 = 0.4f;
					if (num548 % 2 == 1)
					{
						num549 = 226;
						num550 = 0.65f;
					}
					Vector2 vector209 = center33 + ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (12f - (float)(num547 * 2));
					Vector2 val92 = vector209 - Vector2.One * 12f;
					int num1755 = num549;
					float speedX28 = velocity.X / 2f;
					float speedY27 = velocity.Y / 2f;
					newColor = default(Color);
					int num551 = Dust.NewDust(val92, 24, 24, num1755, speedX28, speedY27, 0, newColor);
					Dust dust37 = Main.dust[num551];
					Dust dust87 = dust37;
					dust87.position -= new Vector2(2f);
					Main.dust[num551].velocity = Vector2.Normalize(center33 - vector209) * 1.5f * (10f - (float)num547 * 2f) / 10f;
					Main.dust[num551].noGravity = true;
					Main.dust[num551].scale = num550;
					Main.dust[num551].customData = this;
				}
			}
		}
		else if (aiStyle == 96)
		{
			float num552 = 5f;
			float moveSpeed = 0.15f;
			TargetClosest();
			Vector2 desiredVelocity3 = Main.player[target].Center - base.Center + new Vector2(0f, -250f);
			float num553 = ((Vector2)(ref desiredVelocity3)).Length();
			if (num553 < 20f)
			{
				desiredVelocity3 = velocity;
			}
			else if (num553 < 40f)
			{
				((Vector2)(ref desiredVelocity3)).Normalize();
				desiredVelocity3 *= num552 * 0.35f;
			}
			else if (num553 < 80f)
			{
				((Vector2)(ref desiredVelocity3)).Normalize();
				desiredVelocity3 *= num552 * 0.65f;
			}
			else
			{
				((Vector2)(ref desiredVelocity3)).Normalize();
				desiredVelocity3 *= num552;
			}
			SimpleFlyMovement(desiredVelocity3, moveSpeed);
			rotation = velocity.X * 0.1f;
			if (!((this.ai[0] += 1f) >= 70f))
			{
				return;
			}
			this.ai[0] = 0f;
			if (Main.netMode != 1)
			{
				Vector2 vector210 = Vector2.Zero;
				while (Math.Abs(vector210.X) < 1.5f)
				{
					vector210 = Vector2.UnitY.RotatedByRandom(1.5707963705062866) * new Vector2(5f, 3f);
				}
				Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, vector210.X, vector210.Y, 539, 60, 0f, Main.myPlayer, 0f, whoAmI);
			}
		}
		else if (aiStyle == 97)
		{
			float num554 = 7f;
			int num555 = 480;
			int num556 = 30;
			int maxValue6 = 6;
			if (localAI[2] < 180f)
			{
				localAI[2]++;
				if (Main.netMode != 1 && localAI[2] % 60f == 0f)
				{
					Vector2 vector211 = Vector2.Zero;
					while (Math.Abs(vector211.X) < 1.5f)
					{
						vector211 = Vector2.UnitY.RotatedByRandom(1.5707963705062866) * new Vector2(4f, 2.5f);
					}
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, vector211.X, vector211.Y, 574, 0, 0f, Main.myPlayer, 0f, whoAmI);
				}
			}
			if (localAI[1] == 1f)
			{
				localAI[1] = 0f;
				if (Main.rand.Next(maxValue6) == 0)
				{
					this.ai[0] = num555;
				}
			}
			TargetClosest();
			if (Main.netMode != 1 && (!Main.player[target].active || Main.player[target].dead))
			{
				this.ai[0] = 0f;
				this.ai[1] = 1f;
				this.ai[2] = 0f;
				this.ai[3] = 0f;
				netUpdate = true;
			}
			rotation = Math.Abs(velocity.X) * (float)direction * 0.1f;
			spriteDirection = -direction;
			Vector2 vector213 = base.Center + new Vector2((float)(direction * 20), 6f);
			Vector2 vector214 = Main.player[target].Center - vector213;
			bool flag104 = Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1);
			bool flag105 = false;
			if (this.ai[1] == 1f)
			{
				if (localAI[3] == 0f)
				{
					localAI[3] = 1f;
					this.ai[3] = 3f;
					SoundEngine.PlaySound(in SoundID.Item8, base.Center);
					for (int num559 = 0; num559 < 20; num559++)
					{
						Vector2 val93 = position;
						int num1756 = width;
						int num1757 = height;
						newColor = default(Color);
						int num560 = Dust.NewDust(val93, num1756, num1757, 242, 0f, 0f, 0, newColor);
						Dust dust36 = Main.dust[num560];
						Dust dust87 = dust36;
						dust87.velocity *= 3f;
						Main.dust[num560].noGravity = true;
						Main.dust[num560].scale = 2.5f;
					}
				}
				this.ai[3]--;
				if (this.ai[3] <= 0f)
				{
					active = false;
					netUpdate = true;
				}
				return;
			}
			if (((Vector2)(ref vector214)).Length() > 400f || !flag104)
			{
				Vector2 vector215 = vector214;
				if (((Vector2)(ref vector215)).Length() > num554)
				{
					((Vector2)(ref vector215)).Normalize();
					vector215 *= num554;
				}
				int num561 = 30;
				velocity = (velocity * (float)(num561 - 1) + vector215) / (float)num561;
			}
			else
			{
				velocity *= 0.98f;
				flag105 = true;
			}
			if (this.ai[2] != 0f && this.ai[3] != 0f)
			{
				SoundEngine.PlaySound(in SoundID.Item8, base.Center);
				for (int num562 = 0; num562 < 20; num562++)
				{
					Vector2 val94 = position;
					int num1758 = width;
					int num1759 = height;
					newColor = default(Color);
					int num563 = Dust.NewDust(val94, num1758, num1759, 242, 0f, 0f, 0, newColor);
					Dust dust34 = Main.dust[num563];
					Dust dust87 = dust34;
					dust87.velocity *= 3f;
					Main.dust[num563].noGravity = true;
					Main.dust[num563].scale = 2.5f;
				}
				base.Center = new Vector2(this.ai[2] * 16f, this.ai[3] * 16f);
				velocity = Vector2.Zero;
				this.ai[2] = 0f;
				this.ai[3] = 0f;
				SoundEngine.PlaySound(in SoundID.Item8, base.Center);
				for (int num564 = 0; num564 < 20; num564++)
				{
					Vector2 val95 = position;
					int num1760 = width;
					int num1761 = height;
					newColor = default(Color);
					int num565 = Dust.NewDust(val95, num1760, num1761, 242, 0f, 0f, 0, newColor);
					Dust dust35 = Main.dust[num565];
					Dust dust87 = dust35;
					dust87.velocity *= 3f;
					Main.dust[num565].noGravity = true;
					Main.dust[num565].scale = 2.5f;
				}
			}
			this.ai[0]++;
			if (this.ai[0] >= (float)num555 && Main.netMode != 1)
			{
				this.ai[0] = 0f;
				Point point6 = base.Center.ToTileCoordinates();
				Point point7 = Main.player[target].Center.ToTileCoordinates();
				Vector2 chosenTile2 = Vector2.Zero;
				if (AI_AttemptToFindTeleportSpot(ref chosenTile2, point7.X, point7.Y, 20, 12, 1, solidTileCheckCentered: true, teleportInAir: true))
				{
					this.ai[1] = 20f;
					this.ai[2] = chosenTile2.X;
					this.ai[3] = chosenTile2.Y;
					bool flag106 = true;
					for (int num566 = 0; num566 < 1000; num566++)
					{
						Projectile projectile2 = Main.projectile[num566];
						if (projectile2.active && projectile2.type == 574 && projectile2.ai[1] == (float)whoAmI && !(projectile2.ai[0] >= 0f))
						{
							flag106 = false;
							break;
						}
					}
					if (flag106)
					{
						for (int num567 = 0; num567 < 1000; num567++)
						{
							Projectile projectile3 = Main.projectile[num567];
							if (projectile3.active && projectile3.type == 574 && projectile3.ai[1] == (float)whoAmI)
							{
								projectile3.ai[0] -= num556;
							}
						}
					}
				}
				netUpdate = true;
			}
			if (flag105 && ((Vector2)(ref velocity)).Length() < 2f && Main.netMode != 1)
			{
				localAI[0] += 1f;
				_ = localAI[0];
			}
		}
		else if (aiStyle == 98)
		{
			noTileCollide = false;
			if (this.ai[0] == 0f)
			{
				TargetClosest();
				this.ai[0] = 1f;
				this.ai[1] = 0f;
				this.ai[2] = 0f;
				this.ai[3] = 0f;
			}
			bool flag107 = Collision.CanHit(base.Center, 1, 1, Main.player[target].position, 1, 1);
			bool flag108 = true;
			if (!flag107 || Main.player[target].dead)
			{
				flag108 = false;
			}
			else
			{
				int num568 = (int)(Main.player[target].Center.X / 16f);
				int num570 = (int)(Main.player[target].Center.Y / 16f);
				for (int num571 = num568 - 2; num571 <= num568 + 2; num571++)
				{
					for (int num572 = num570; num572 <= num570 + 25; num572++)
					{
						if (WorldGen.SolidTile2(num571, num572))
						{
							flag108 = false;
						}
					}
				}
			}
			if (this.ai[0] < 0f)
			{
				Vector2 vector216 = Main.player[target].Center - base.Center;
				float num573 = ((Vector2)(ref vector216)).Length();
				if (this.ai[0] == -1f)
				{
					((Vector2)(ref vector216)).Normalize();
					if (vector216.HasNaNs())
					{
						((Vector2)(ref vector216))._002Ector((float)direction, 0f);
					}
					float num574 = 8f + num573 / 100f;
					float num575 = 12f;
					if (((Vector2)(ref Main.player[target].velocity)).Length() > num575)
					{
						num575 = ((Vector2)(ref Main.player[target].velocity)).Length();
					}
					if (num574 > num575)
					{
						num574 = num575;
					}
					vector216 *= num574;
					float num576 = 10f;
					velocity = (velocity * (num576 - 1f) + vector216) / num576;
					for (int num577 = 0; num577 < 200; num577++)
					{
						if (Main.npc[num577].active && Main.npc[num577].type == type && num577 != whoAmI)
						{
							Vector2 vector217 = Main.npc[num577].Center - base.Center;
							if (((Vector2)(ref vector217)).Length() < 40f)
							{
								((Vector2)(ref vector217)).Normalize();
								vector217 *= 1f;
								velocity -= vector217;
							}
						}
					}
					rotation += velocity.X * 0.03f;
					if ((double)rotation < -6.2831)
					{
						rotation += 6.2831f;
					}
					if ((double)rotation > 6.2831)
					{
						rotation -= 6.2831f;
					}
					if (velocity.X > 0f)
					{
						direction = 1;
					}
					else if (velocity.X < 0f)
					{
						direction = -1;
					}
					spriteDirection = direction;
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 60f && !flag108)
				{
					this.ai[0] = 0f;
				}
			}
			else if (this.ai[0] == 2f)
			{
				rotation *= 0.92f;
				if ((double)Math.Abs(rotation) < 0.02)
				{
					rotation = 0f;
				}
				int num578 = 300;
				float num579 = Math.Abs(base.Center.X - Main.player[target].Center.X);
				if (num579 < (float)num578 && Collision.CanHit(base.Center, 1, 1, Main.player[target].position, 1, 1))
				{
					velocity.X *= 0.96f;
					velocity.Y *= 0.96f;
					this.ai[1] += 1f;
					if (this.ai[1] == 20f)
					{
						if (Main.netMode != 1)
						{
							int num581 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y + 26, 516, 0, 0f, 0f, 0f, 0f, target);
						}
					}
					else if (this.ai[1] >= 30f)
					{
						this.ai[1] = 0f;
					}
					for (int num582 = 0; num582 < 200; num582++)
					{
						if (Main.npc[num582].active && Main.npc[num582].type == type && num582 != whoAmI)
						{
							Vector2 vector218 = Main.npc[num582].Center - base.Center;
							if (((Vector2)(ref vector218)).Length() < 100f)
							{
								((Vector2)(ref vector218)).Normalize();
								vector218 *= 0.1f;
								velocity -= vector218;
							}
						}
					}
				}
				else
				{
					this.ai[0] = 0f;
				}
				if (Main.player[target].Center.X < base.Center.X)
				{
					direction = -1;
				}
				else if (Main.player[target].Center.X > base.Center.X)
				{
					direction = 1;
				}
				spriteDirection = direction;
			}
			if (this.ai[0] != 1f)
			{
				return;
			}
			rotation *= 0.92f;
			if ((double)Math.Abs(rotation) < 0.02)
			{
				rotation = 0f;
			}
			if (flag108)
			{
				this.ai[0] = -1f;
				this.ai[1] = 0f;
				this.ai[2] = 0f;
				this.ai[3] = 0f;
			}
			int num583 = 300;
			for (int num584 = 0; num584 < 200; num584++)
			{
				if (Main.npc[num584].active && Main.npc[num584].type == type && num584 != whoAmI)
				{
					Vector2 vector219 = Main.npc[num584].Center - base.Center;
					if (((Vector2)(ref vector219)).Length() < 50f)
					{
						((Vector2)(ref vector219)).Normalize();
						vector219 *= 0.1f;
						velocity -= vector219;
						velocity.X -= vector219.X * 1f;
					}
				}
			}
			int num585 = 800;
			float num586 = Math.Abs(base.Center.X - Main.player[target].Center.X);
			if (num586 < (float)num583 && flag107)
			{
				this.ai[0] = 2f;
				this.ai[1] = 0f;
			}
			else
			{
				if (collideX)
				{
					velocity.X *= -0.5f;
					this.ai[1] = 60f;
					direction *= -1;
				}
				if (this.ai[1] > 0f)
				{
					this.ai[1] -= 1f;
				}
				else if (flag107)
				{
					if (base.Center.X > Main.player[target].Center.X)
					{
						direction = -1;
					}
					else
					{
						direction = 1;
					}
				}
				else if (num586 > (float)num585)
				{
					if (base.Center.X > Main.player[target].Center.X)
					{
						direction = -1;
					}
					else
					{
						direction = 1;
					}
				}
				float num587 = 2f;
				float num588 = 0.1f;
				if (velocity.X > num587 || velocity.X < 0f - num587)
				{
					if (Math.Abs(velocity.X) < num587 + num588 * 2f)
					{
						if (velocity.X < 0f)
						{
							velocity.X = 0f - num587;
						}
						else
						{
							velocity.X = num587;
						}
					}
					else
					{
						velocity.X *= 0.99f;
					}
				}
				else
				{
					velocity.X += (float)direction * num588;
				}
				spriteDirection = direction;
			}
			if (collideY)
			{
				this.ai[2] = 60f;
				directionY *= -1;
				velocity.Y *= -0.5f;
			}
			if (this.ai[2] > 0f)
			{
				this.ai[2] -= 1f;
			}
			else
			{
				int num589 = (int)(base.Center.Y / 16f);
				int num590 = (int)((base.Center.X - 8f) / 16f);
				int num592 = 30;
				int num593 = 15;
				int num594 = 0;
				for (int num595 = num589; num595 < num589 + num592; num595++)
				{
					for (int num596 = num590; num596 <= num590 + 1; num596++)
					{
						if (WorldGen.SolidTile(num596, num595) || Main.tile[num596, num595].liquid > 0)
						{
							num594 = num595 - num589;
							break;
						}
					}
					if (num594 != 0)
					{
						break;
					}
				}
				if (num594 == 0)
				{
					directionY = 1;
				}
				else if (num594 < num593)
				{
					directionY = -1;
				}
			}
			float num597 = 2f;
			float num598 = 0.1f;
			if (velocity.Y > num597 || velocity.Y < 0f - num597)
			{
				if (Math.Abs(velocity.Y) < num597 + num598 * 2f)
				{
					if (velocity.Y < 0f)
					{
						velocity.Y = 0f - num597;
					}
					else
					{
						velocity.Y = num597;
					}
				}
				else
				{
					velocity.Y *= 0.99f;
				}
			}
			else
			{
				velocity.Y += (float)directionY * num598;
			}
		}
		else if (aiStyle == 99)
		{
			if (velocity.Y == 0f && this.ai[0] == 0f)
			{
				this.ai[0] = 1f;
				this.ai[1] = 0f;
				netUpdate = true;
				return;
			}
			if (this.ai[0] == 1f)
			{
				velocity = Vector2.Zero;
				position = oldPosition;
				this.ai[1]++;
				if (this.ai[1] >= 5f)
				{
					HitEffect(0, 9999.0);
					active = false;
				}
				return;
			}
			velocity.Y += 0.2f;
			if (velocity.Y > 12f)
			{
				velocity.Y = 12f;
			}
			rotation = velocity.ToRotation() - (float)Math.PI / 2f;
			if (type != 519)
			{
				return;
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				for (int num599 = 0; num599 < 13; num599++)
				{
					Vector2 val96 = position;
					int num1762 = width;
					int num1763 = height;
					float speedX29 = velocity.X * 0.5f;
					float speedY28 = velocity.Y * 0.5f;
					newColor = default(Color);
					int num600 = Dust.NewDust(val96, num1762, num1763, 6, speedX29, speedY28, 90, newColor, 2.5f);
					Main.dust[num600].noGravity = true;
					Main.dust[num600].fadeIn = 1f;
					Dust dust30 = Main.dust[num600];
					Dust dust87 = dust30;
					dust87.velocity *= 4f;
					Main.dust[num600].noLight = true;
				}
			}
			for (int num601 = 0; num601 < 3; num601++)
			{
				if (Main.rand.Next(3) < 2)
				{
					Vector2 val97 = position;
					int num1764 = width;
					int num1765 = height;
					float speedX30 = velocity.X * 0.5f;
					float speedY29 = velocity.Y * 0.5f;
					newColor = default(Color);
					int num603 = Dust.NewDust(val97, num1764, num1765, 6, speedX30, speedY29, 90, newColor, 2.5f);
					Main.dust[num603].noGravity = true;
					Dust dust32 = Main.dust[num603];
					Dust dust87 = dust32;
					dust87.velocity *= 0.2f;
					Main.dust[num603].fadeIn = 1f;
					if (Main.rand.Next(6) == 0)
					{
						dust32 = Main.dust[num603];
						dust87 = dust32;
						dust87.velocity *= 30f;
						Main.dust[num603].noGravity = false;
						Main.dust[num603].noLight = true;
					}
					else
					{
						Main.dust[num603].velocity = DirectionFrom(Main.dust[num603].position) * ((Vector2)(ref Main.dust[num603].velocity)).Length();
					}
				}
			}
		}
		else if (aiStyle == 100)
		{
			if (velocity.Y == 0f && this.ai[0] >= 0f)
			{
				this.ai[0] = -1f;
				this.ai[1] = 0f;
				netUpdate = true;
				return;
			}
			if (this.ai[0] == -1f)
			{
				velocity = Vector2.Zero;
				position = oldPosition;
				this.ai[1]++;
				if (this.ai[1] >= 5f)
				{
					HitEffect(0, 9999.0);
					active = false;
				}
				return;
			}
			rotation = velocity.ToRotation() - (float)Math.PI / 2f;
			if (type != 522)
			{
				return;
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				velocity.X = this.ai[2];
				velocity.Y = this.ai[3];
				for (int num604 = 0; num604 < 13; num604++)
				{
					Vector2 val98 = position;
					int num1766 = width;
					int num1767 = height;
					float speedX31 = velocity.X * 0.5f;
					float speedY30 = velocity.Y * 0.5f;
					newColor = default(Color);
					int num605 = Dust.NewDust(val98, num1766, num1767, 261, speedX31, speedY30, 90, newColor, 2.5f);
					Main.dust[num605].noGravity = true;
					Main.dust[num605].fadeIn = 1f;
					Dust dust28 = Main.dust[num605];
					Dust dust87 = dust28;
					dust87.velocity *= 4f;
					Main.dust[num605].noLight = true;
				}
			}
			for (int num606 = 0; num606 < 2; num606++)
			{
				if (Main.rand.Next(10 - (int)Math.Min(7f, ((Vector2)(ref velocity)).Length())) < 1)
				{
					Vector2 val99 = position;
					int num1768 = width;
					int num1769 = height;
					float speedX32 = velocity.X * 0.5f;
					float speedY31 = velocity.Y * 0.5f;
					newColor = default(Color);
					int num607 = Dust.NewDust(val99, num1768, num1769, 261, speedX32, speedY31, 90, newColor, 2.5f);
					Main.dust[num607].noGravity = true;
					Dust dust29 = Main.dust[num607];
					Dust dust87 = dust29;
					dust87.velocity *= 0.2f;
					Main.dust[num607].fadeIn = 0.4f;
					if (Main.rand.Next(6) == 0)
					{
						dust29 = Main.dust[num607];
						dust87 = dust29;
						dust87.velocity *= 5f;
						Main.dust[num607].noLight = true;
					}
					else
					{
						Main.dust[num607].velocity = DirectionFrom(Main.dust[num607].position) * ((Vector2)(ref Main.dust[num607].velocity)).Length();
					}
				}
			}
			if (this.ai[0] >= 0f)
			{
				this.ai[0]++;
				if (this.ai[0] > 60f)
				{
					Vector2 spinningpoint38 = velocity;
					double radians32 = this.ai[1];
					val29 = default(Vector2);
					velocity = spinningpoint38.RotatedBy(radians32, val29);
				}
				if (this.ai[0] > 120f)
				{
					velocity *= 0.98f;
				}
				if (((Vector2)(ref velocity)).Length() < 0.2f)
				{
					velocity = Vector2.Zero;
				}
			}
		}
		else if (aiStyle == 101)
		{
			float num608 = 420f;
			float num609 = 120f;
			int num610 = 1;
			float value3 = 0f;
			float value4 = 1f;
			float num611 = 4f;
			bool flag109 = !(this.ai[1] >= 0f) || !Main.npc[(int)this.ai[0]].active;
			if (Main.npc[(int)this.ai[0]].type == 439)
			{
				if (Main.npc[(int)this.ai[0]].life < Main.npc[(int)this.ai[0]].lifeMax / 2)
				{
					num610 = 2;
				}
				if (Main.npc[(int)this.ai[0]].life < Main.npc[(int)this.ai[0]].lifeMax / 4)
				{
					num610 = 3;
				}
			}
			else
			{
				flag109 = true;
			}
			this.ai[1] += num610;
			float num612 = this.ai[1] / num609;
			num612 = MathHelper.Clamp(num612, 0f, 1f);
			position = base.Center;
			scale = MathHelper.Lerp(value3, value4, num612);
			base.Center = position;
			alpha = (int)(255f - num612 * 255f);
			if (Main.rand.Next(6) == 0)
			{
				Vector2 vector220 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
				Dust[] dust103 = Main.dust;
				Vector2 val100 = base.Center - vector220 * 20f;
				newColor = default(Color);
				Dust dust72 = dust103[Dust.NewDust(val100, 0, 0, 27, 0f, 0f, 0, newColor)];
				dust72.noGravity = true;
				dust72.position = base.Center - vector220 * (float)Main.rand.Next(10, 21) * scale;
				val29 = default(Vector2);
				dust72.velocity = vector220.RotatedBy(1.5707963705062866, val29) * 4f;
				dust72.scale = 0.5f + Main.rand.NextFloat();
				dust72.fadeIn = 0.5f;
			}
			if (Main.rand.Next(6) == 0)
			{
				Vector2 vector221 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
				Dust[] dust104 = Main.dust;
				Vector2 val101 = base.Center - vector221 * 30f;
				newColor = default(Color);
				Dust dust73 = dust104[Dust.NewDust(val101, 0, 0, 240, 0f, 0f, 0, newColor)];
				dust73.noGravity = true;
				dust73.position = base.Center - vector221 * 20f * scale;
				val29 = default(Vector2);
				dust73.velocity = vector221.RotatedBy(-1.5707963705062866, val29) * 2f;
				dust73.scale = 0.5f + Main.rand.NextFloat();
				dust73.fadeIn = 0.5f;
			}
			if (Main.rand.Next(6) == 0)
			{
				Vector2 vector222 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
				Dust[] dust105 = Main.dust;
				Vector2 val102 = base.Center - vector222 * 30f;
				newColor = default(Color);
				Dust dust74 = dust105[Dust.NewDust(val102, 0, 0, 240, 0f, 0f, 0, newColor)];
				dust74.position = base.Center - vector222 * 20f * scale;
				dust74.velocity = Vector2.Zero;
				dust74.scale = 0.5f + Main.rand.NextFloat();
				dust74.fadeIn = 0.5f;
				dust74.noLight = true;
			}
			localAI[0] += (float)Math.PI / 60f;
			float[] array6 = localAI;
			Vector2 unitY6 = Vector2.UnitY;
			double radians33 = this.ai[1] * ((float)Math.PI * 2f) / 60f;
			val29 = default(Vector2);
			array6[1] = 0.25f + unitY6.RotatedBy(radians33, val29).Y * 0.25f;
			if (this.ai[1] >= num608)
			{
				flag109 = true;
				if (Main.netMode != 1)
				{
					for (int num614 = 0; num614 < 4; num614++)
					{
						Vector2 spinningpoint39 = new Vector2(0f, 0f - num611);
						double radians34 = (float)Math.PI / 2f * (float)num614;
						val29 = default(Vector2);
						Vector2 vector225 = Utils.RotatedBy(spinningpoint39, radians34, val29);
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, vector225.X, vector225.Y, 593, damage, 0f, Main.myPlayer);
					}
				}
			}
			if (flag109)
			{
				HitEffect(0, 9999.0);
				active = false;
			}
		}
		else if (aiStyle == 102)
		{
			bool flag110 = false;
			bool flag111 = false;
			bool flag3 = true;
			bool flag4 = false;
			int num615 = 4;
			int num616 = 3;
			int num617 = 0;
			float num618 = 0.2f;
			float num619 = 2f;
			float num620 = -0.2f;
			float num621 = -4f;
			bool flag5 = true;
			float num622 = 2f;
			float num623 = 0.1f;
			float num625 = 1f;
			float num626 = 0.04f;
			bool flag6 = false;
			float num627 = 0.96f;
			bool flag7 = true;
			if (type == 541)
			{
				flag5 = false;
				rotation = velocity.X * 0.04f;
				spriteDirection = ((direction > 0) ? 1 : (-1));
				num617 = 3;
				num620 = -0.1f;
				num618 = 0.1f;
				float num628 = (float)life / (float)lifeMax;
				num622 += (1f - num628) * 2f;
				num623 += (1f - num628) * 0.02f;
				if (num628 < 0.5f)
				{
					knockBackResist = 0f;
				}
				position += netOffset;
				Vector2 vector226 = base.BottomLeft + new Vector2(0f, -12f);
				Vector2 bottomRight = base.BottomRight;
				Vector2 vector227 = default(Vector2);
				((Vector2)(ref vector227))._002Ector((float)(-spriteDirection * 10), -4f);
				Color color = new Color(222, 108, 48) * 0.7f;
				float num629 = -0.3f + MathHelper.Max(velocity.Y * 2f, 0f);
				int num630 = 0;
				int topY;
				while (num630 < 2)
				{
					if (Main.rand.Next(2) != 0)
					{
						Dust[] dust106 = Main.dust;
						Vector2 bottom2 = base.Bottom;
						newColor = default(Color);
						Dust dust75 = dust106[Dust.NewDust(bottom2, 0, 0, 268, 0f, 0f, 0, newColor)];
						dust75.position = new Vector2(MathHelper.Lerp(vector226.X, bottomRight.X, Main.rand.NextFloat()), MathHelper.Lerp(vector226.Y, bottomRight.Y, Main.rand.NextFloat())) + vector227;
						if (num630 == 1)
						{
							dust75.position = base.Bottom + Utils.RandomVector2(Main.rand, -6f, 6f);
						}
						dust75.color = color;
						dust75.scale = 0.8f;
						dust75.velocity.Y += num629;
						dust75.velocity.X += (float)spriteDirection * 0.2f;
					}
					topY = num630++;
				}
				position -= netOffset;
				localAI[2] = 0f;
				if (this.ai[0] < 0f)
				{
					this.ai[0] = MathHelper.Min(this.ai[0] + 1f, 0f);
				}
				if (this.ai[0] > 0f)
				{
					flag7 = false;
					flag6 = true;
					this.ai[0]++;
					if (this.ai[0] >= 135f)
					{
						this.ai[0] = -300f;
						netUpdate = true;
					}
					Vector2 vector228 = base.Center + Vector2.UnitX * (float)direction * 200f;
					Vector2 vector229 = base.Center + Vector2.UnitX * (float)direction * 50f - Vector2.UnitY * 6f;
					if (this.ai[0] == 54f && Main.netMode != 1)
					{
						List<Point> list = new List<Point>();
						Vector2 vector230 = Main.player[target].Center + new Vector2(Main.player[target].velocity.X * 30f, 0f);
						if (Distance(vector230) < 2000f)
						{
							Point point8 = vector230.ToTileCoordinates();
							int num631 = 0;
							while (num631 < 1000 && list.Count < 3)
							{
								bool flag8 = false;
								int num632 = Main.rand.Next(point8.X - 30, point8.X + 30 + 1);
								foreach (Point item in list)
								{
									if (Math.Abs(item.X - num632) < 10)
									{
										flag8 = true;
										break;
									}
								}
								if (!flag8)
								{
									int startY = point8.Y - 20;
									Collision.ExpandVertically(num632, startY, out topY, out var bottomY, 1, 51);
									if (StrayMethods.CanSpawnSandstormHostile(new Vector2((float)num632, (float)(bottomY - 15)) * 16f, 15, 15))
									{
										list.Add(new Point(num632, bottomY - 15));
									}
								}
								topY = num631++;
							}
							foreach (Point item2 in list)
							{
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), item2.X * 16, item2.Y * 16, 0f, 0f, 658, 0, 0f, Main.myPlayer);
							}
						}
						else
						{
							this.ai[0] = -200f;
							netUpdate = true;
						}
					}
					Vector2 vector231 = default(Vector2);
					((Vector2)(ref vector231))._002Ector(0.9f, 2f);
					if (this.ai[0] < 114f && this.ai[0] > 0f)
					{
						List<Vector2> list2 = new List<Vector2>();
						for (int num633 = 0; num633 < 1000; num633++)
						{
							Projectile projectile4 = Main.projectile[num633];
							if (projectile4.active && projectile4.type == 658)
							{
								list2.Add(projectile4.Center);
							}
						}
						Vector2 vector232 = default(Vector2);
						((Vector2)(ref vector232))._002Ector(0f, 1500f);
						float num634 = (this.ai[0] - 54f) / 30f;
						if (num634 < 0.95f && num634 >= 0f)
						{
							foreach (Vector2 item3 in list2)
							{
								Vector2 value5 = Vector2.CatmullRom(vector229 + vector232, vector229, item3, item3 + vector232, num634);
								Vector2 value6 = Vector2.CatmullRom(vector229 + vector232, vector229, item3, item3 + vector232, num634 + 0.05f);
								float num636 = num634;
								if (num636 > 0.5f)
								{
									num636 = 1f - num636;
								}
								float num637 = 2f;
								if (Vector2.Distance(value5, value6) > 5f)
								{
									num637 = 3f;
								}
								if (Vector2.Distance(value5, value6) > 10f)
								{
									num637 = 4f;
								}
								for (float num638 = 0f; num638 < num637; num638++)
								{
									Dust[] dust107 = Main.dust;
									newColor = default(Color);
									Dust dust76 = dust107[Dust.NewDust(vector229, 0, 0, 269, 0f, 0f, 0, newColor)];
									dust76.position = Vector2.Lerp(value5, value6, num638 / num637) + Utils.RandomVector2(Main.rand, -2f, 2f);
									dust76.noLight = true;
									dust76.scale = 0.3f + num634;
								}
							}
						}
					}
					_ = this.ai[0];
				}
				if (this.ai[0] == 0f)
				{
					this.ai[0] = 1f;
					netUpdate = true;
					flag6 = true;
				}
			}
			if (justHit)
			{
				localAI[2] = 0f;
			}
			if (!flag111)
			{
				if (localAI[2] >= 0f)
				{
					float num639 = 16f;
					bool flag9 = false;
					bool flag10 = false;
					if (position.X > localAI[0] - num639 && position.X < localAI[0] + num639)
					{
						flag9 = true;
					}
					else if ((velocity.X < 0f && direction > 0) || (velocity.X > 0f && direction < 0))
					{
						flag9 = true;
						num639 += 24f;
					}
					if (position.Y > localAI[1] - num639 && position.Y < localAI[1] + num639)
					{
						flag10 = true;
					}
					if (flag9 && flag10)
					{
						localAI[2] += 1f;
						if (localAI[2] >= 30f && num639 == 16f)
						{
							flag110 = true;
						}
						if (localAI[2] >= 60f)
						{
							localAI[2] = -180f;
							direction *= -1;
							velocity.X *= -1f;
							collideX = false;
						}
					}
					else
					{
						localAI[0] = position.X;
						localAI[1] = position.Y;
						localAI[2] = 0f;
					}
					if (flag7)
					{
						TargetClosest();
					}
				}
				else
				{
					localAI[2] += 1f;
					direction = ((Main.player[target].Center.X > base.Center.X) ? 1 : (-1));
				}
			}
			int num640 = (int)((position.X + (float)(width / 2)) / 16f) + direction * 2;
			int num641 = (int)((position.Y + (float)height) / 16f);
			int num642 = (int)base.Bottom.Y / 16;
			int num643 = (int)base.Bottom.X / 16;
			if (flag6)
			{
				velocity *= num627;
				return;
			}
			for (int num644 = num641; num644 < num641 + num615; num644++)
			{
				if (Main.tile[num640, num644] == null)
				{
					Main.tile[num640, num644] = default(Tile);
				}
				if ((Main.tile[num640, num644].nactive() && Main.tileSolid[Main.tile[num640, num644].type]) || Main.tile[num640, num644].liquid > 0)
				{
					if (num644 <= num641 + 1)
					{
						flag4 = true;
					}
					flag3 = false;
					break;
				}
			}
			for (int num645 = num642; num645 < num642 + num617; num645++)
			{
				if (Main.tile[num643, num645] == null)
				{
					Main.tile[num643, num645] = default(Tile);
				}
				if ((Main.tile[num643, num645].nactive() && Main.tileSolid[Main.tile[num643, num645].type]) || Main.tile[num643, num645].liquid > 0)
				{
					flag4 = true;
					flag3 = false;
					break;
				}
			}
			if (flag5)
			{
				for (int num647 = num641 - num616; num647 < num641; num647++)
				{
					if (Main.tile[num640, num647] == null)
					{
						Main.tile[num640, num647] = default(Tile);
					}
					if ((Main.tile[num640, num647].nactive() && Main.tileSolid[Main.tile[num640, num647].type]) || Main.tile[num640, num647].liquid > 0)
					{
						flag4 = false;
						flag110 = true;
						break;
					}
				}
			}
			if (flag110)
			{
				flag4 = false;
				flag3 = true;
			}
			if (flag3)
			{
				velocity.Y += num618;
				if (velocity.Y > num619)
				{
					velocity.Y = num619;
				}
			}
			else
			{
				if ((directionY < 0 && velocity.Y > 0f) || flag4)
				{
					velocity.Y += num620;
				}
				if (velocity.Y < num621)
				{
					velocity.Y = num621;
				}
			}
			if (collideX)
			{
				velocity.X = oldVelocity.X * -0.4f;
				if (direction == -1 && velocity.X > 0f && velocity.X < 1f)
				{
					velocity.X = 1f;
				}
				if (direction == 1 && velocity.X < 0f && velocity.X > -1f)
				{
					velocity.X = -1f;
				}
			}
			if (collideY)
			{
				velocity.Y = oldVelocity.Y * -0.25f;
				if (velocity.Y > 0f && velocity.Y < 1f)
				{
					velocity.Y = 1f;
				}
				if (velocity.Y < 0f && velocity.Y > -1f)
				{
					velocity.Y = -1f;
				}
			}
			if (direction == -1 && velocity.X > 0f - num622)
			{
				velocity.X -= num623;
				if (velocity.X > num622)
				{
					velocity.X -= num623;
				}
				else if (velocity.X > 0f)
				{
					velocity.X += num623 / 2f;
				}
				if (velocity.X < 0f - num622)
				{
					velocity.X = 0f - num622;
				}
			}
			else if (direction == 1 && velocity.X < num622)
			{
				velocity.X += num623;
				if (velocity.X < 0f - num622)
				{
					velocity.X += num623;
				}
				else if (velocity.X < 0f)
				{
					velocity.X -= num623 / 2f;
				}
				if (velocity.X > num622)
				{
					velocity.X = num622;
				}
			}
			if (directionY == -1 && velocity.Y > 0f - num625)
			{
				velocity.Y -= num626;
				if (velocity.Y > num625)
				{
					velocity.Y -= num626 * 1.25f;
				}
				else if (velocity.Y > 0f)
				{
					velocity.Y += num626 * 0.75f;
				}
				if (velocity.Y < 0f - num625)
				{
					velocity.Y = 0f - num622;
				}
			}
			else if (directionY == 1 && velocity.Y < num625)
			{
				velocity.Y += num626;
				if (velocity.Y < 0f - num625)
				{
					velocity.Y += num626 * 1.25f;
				}
				else if (velocity.Y < 0f)
				{
					velocity.Y -= num626 * 0.75f;
				}
				if (velocity.Y > num625)
				{
					velocity.Y = num625;
				}
			}
		}
		else if (aiStyle == 103)
		{
			if (direction == 0)
			{
				TargetClosest();
			}
			bool flag11 = true;
			Point pt = base.Center.ToTileCoordinates();
			Tile tileSafely7 = Framing.GetTileSafely(pt);
			flag11 = tileSafely7.nactive() && (TileID.Sets.Conversion.Sand[tileSafely7.type] || TileID.Sets.Conversion.Sandstone[tileSafely7.type] || TileID.Sets.Conversion.HardenedSand[tileSafely7.type]);
			flag11 |= wet;
			bool flag12 = false;
			TargetClosest(faceTarget: false);
			Vector2 vector233 = ((Rectangle)(ref targetRect)).Center.ToVector2();
			if (Main.player[target].velocity.Y > -0.1f && !Main.player[target].dead && Distance(vector233) > 150f)
			{
				flag12 = true;
			}
			if (localAI[0] == -1f && !flag11)
			{
				localAI[0] = 20f;
			}
			if (localAI[0] > 0f)
			{
				localAI[0]--;
			}
			if (flag11)
			{
				if (soundDelay == 0)
				{
					float num648 = Distance(vector233) / 40f;
					if (num648 < 10f)
					{
						num648 = 10f;
					}
					if (num648 > 20f)
					{
						num648 = 20f;
					}
					soundDelay = (int)num648;
					SoundEngine.PlaySound(15, base.Center, 4);
				}
				float num649 = this.ai[1];
				bool flag14 = false;
				pt = (base.Center + new Vector2(0f, 24f)).ToTileCoordinates();
				tileSafely7 = Framing.GetTileSafely(pt.X, pt.Y - 2);
				if (tileSafely7.nactive() && (TileID.Sets.Conversion.Sand[tileSafely7.type] || TileID.Sets.Conversion.Sandstone[tileSafely7.type] || TileID.Sets.Conversion.HardenedSand[tileSafely7.type]))
				{
					flag14 = true;
				}
				this.ai[1] = flag14.ToInt();
				if (this.ai[2] < 30f)
				{
					this.ai[2]++;
				}
				if (flag12)
				{
					TargetClosest();
					velocity.X += (float)direction * 0.15f;
					velocity.Y += (float)directionY * 0.15f;
					if (velocity.X > 5f)
					{
						velocity.X = 5f;
					}
					if (velocity.X < -5f)
					{
						velocity.X = -5f;
					}
					if (velocity.Y > 3f)
					{
						velocity.Y = 3f;
					}
					if (velocity.Y < -3f)
					{
						velocity.Y = -3f;
					}
					Vector2 center44 = base.Center;
					Vector2 val103 = velocity.SafeNormalize(Vector2.Zero);
					val29 = base.Size;
					Vector2 vec4 = center44 + val103 * ((Vector2)(ref val29)).Length() / 2f + velocity;
					pt = vec4.ToTileCoordinates();
					tileSafely7 = Framing.GetTileSafely(pt);
					bool flag15 = tileSafely7.nactive() && (TileID.Sets.Conversion.Sand[tileSafely7.type] || TileID.Sets.Conversion.Sandstone[tileSafely7.type] || TileID.Sets.Conversion.HardenedSand[tileSafely7.type]);
					if (!flag15 && wet)
					{
						flag15 = tileSafely7.liquid > 0;
					}
					int num650 = 400;
					if (Main.remixWorld)
					{
						num650 = 700;
					}
					if (!flag15 && Math.Sign(velocity.X) == direction && Distance(vector233) < (float)num650 && (this.ai[2] >= 30f || this.ai[2] < 0f))
					{
						if (localAI[0] == 0f)
						{
							SoundEngine.PlaySound(14, base.Center, 542);
							localAI[0] = -1f;
						}
						this.ai[2] = -30f;
						Vector2 vector234 = DirectionTo(vector233 + new Vector2(0f, -80f));
						velocity = vector234 * 12f;
					}
				}
				else
				{
					if (collideX)
					{
						velocity.X *= -1f;
						direction *= -1;
						netUpdate = true;
					}
					if (collideY)
					{
						netUpdate = true;
						velocity.Y *= -1f;
						directionY = Math.Sign(velocity.Y);
						this.ai[0] = directionY;
					}
					float num651 = 6f;
					velocity.X += (float)direction * 0.1f;
					if (velocity.X < 0f - num651 || velocity.X > num651)
					{
						velocity.X *= 0.95f;
					}
					if (flag14)
					{
						this.ai[0] = -1f;
					}
					else
					{
						this.ai[0] = 1f;
					}
					float num652 = 0.06f;
					float num653 = 0.01f;
					if (this.ai[0] == -1f)
					{
						velocity.Y -= num653;
						if (velocity.Y < 0f - num652)
						{
							this.ai[0] = 1f;
						}
					}
					else
					{
						velocity.Y += num653;
						if (velocity.Y > num652)
						{
							this.ai[0] = -1f;
						}
					}
					if (velocity.Y > 0.4f || velocity.Y < -0.4f)
					{
						velocity.Y *= 0.95f;
					}
				}
			}
			else
			{
				if (velocity.Y == 0f)
				{
					if (flag12)
					{
						TargetClosest();
					}
					float num654 = 1f;
					velocity.X += (float)direction * 0.1f;
					if (velocity.X < 0f - num654 || velocity.X > num654)
					{
						velocity.X *= 0.95f;
					}
				}
				velocity.Y += 0.3f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
				this.ai[0] = 1f;
			}
			rotation = velocity.Y * (float)direction * 0.1f;
			if (rotation < -0.2f)
			{
				rotation = -0.2f;
			}
			if (rotation > 0.2f)
			{
				rotation = 0.2f;
			}
		}
		else if (aiStyle == 104)
		{
			active = false;
		}
		else if (aiStyle == 105)
		{
			if (alpha == 0)
			{
				Lighting.AddLight(base.Center, 1.3f, 0.5f, 1.5f);
			}
			if (this.ai[1] == 0f)
			{
				if (this.ai[0] > 0f)
				{
					this.ai[0]--;
				}
				if (this.ai[0] != 0f)
				{
					return;
				}
				this.ai[0] = 180f;
				netUpdate = true;
				if (localAI[0] == 0f)
				{
					StrayMethods.CheckArenaScore(base.Bottom, out var xLeftEnd, out var xRightEnd);
					localAI[0] = 1f;
					xLeftEnd.X += 2;
					xRightEnd.X -= 2;
					int num655 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), xLeftEnd.X, xLeftEnd.Y, 549);
					Main.npc[num655].Bottom = xLeftEnd.ToWorldCoordinates(8f, 16f);
					num655 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), xRightEnd.X, xRightEnd.Y, 549);
					Main.npc[num655].Bottom = xRightEnd.ToWorldCoordinates(8f, 16f);
					if (Main.netMode != 1)
					{
						DD2Event.FindArenaHitbox();
					}
				}
			}
			else if (this.ai[1] == 2f)
			{
				dontTakeDamageFromHostiles = true;
				life = lifeMax;
				if (this.ai[0] == 3f)
				{
					SoundEngine.PlayTrackedSound(in SoundID.DD2_WinScene, base.Center);
					for (int num656 = 0; num656 < 200; num656++)
					{
						NPC nPC3 = Main.npc[num656];
						if (nPC3.active && nPC3.type == 549)
						{
							nPC3.ai[1] = 1f;
							nPC3.ai[0] = 0f;
							nPC3.netUpdate = true;
						}
					}
					if (Main.netMode != 1)
					{
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center - Vector2.UnitY * 40f, Vector2.Zero, 713, 0, 0f, Main.myPlayer);
					}
				}
				this.ai[0]++;
				noGravity = true;
				if (this.ai[0] <= 120f)
				{
					float num658 = this.ai[0] / 120f;
					velocity.Y = (float)Math.Cos(num658 * ((float)Math.PI * 2f)) * 0.25f - 0.25f;
				}
				else
				{
					velocity.Y = 0f;
				}
				float lerpValue = Utils.GetLerpValue(480f, 570f, this.ai[0], clamped: true);
				if (lerpValue != 0f)
				{
					MoonlordDeathDrama.RequestLight(lerpValue, base.Center);
				}
				if (this.ai[0] >= 600f)
				{
					DD2Event.StopInvasion(win: true);
					dontTakeDamage = false;
					life = 0;
					checkDead();
					netUpdate = true;
				}
				Vector2 vector236 = base.Center + new Vector2(0f, -20f);
				float num659 = 0.99f;
				if (this.ai[0] >= 60f)
				{
					num659 = 0.79f;
				}
				if (this.ai[0] >= 120f)
				{
					num659 = 0.58f;
				}
				if (this.ai[0] >= 180f)
				{
					num659 = 0.43f;
				}
				if (this.ai[0] >= 240f)
				{
					num659 = 0.33f;
				}
				if (this.ai[0] >= 540f)
				{
					num659 = 1f;
				}
				for (int num660 = 0; num660 < 9; num660++)
				{
					if (!(Main.rand.NextFloat() < num659))
					{
						float num661 = Main.rand.NextFloat() * ((float)Math.PI * 2f);
						float num662 = Main.rand.NextFloat();
						Vector2 vector237 = vector236 + num661.ToRotationVector2() * (110f + 600f * num662);
						Vector2 vector238 = (num661 - (float)Math.PI).ToRotationVector2() * (14f + 0f * Main.rand.NextFloat() + 8f * num662);
						Vector2? val104 = vector238;
						newColor = default(Color);
						Dust dust77 = Dust.NewDustPerfect(vector237, 264, val104, 0, newColor);
						dust77.scale = 0.9f;
						dust77.fadeIn = 1.15f + num662 * 0.3f;
						dust77.color = new Color(1f, 1f, 1f, num659) * (1f - num659);
						dust77.noGravity = true;
						dust77.noLight = true;
					}
				}
				if (this.ai[0] == 100f || this.ai[0] == 160f || this.ai[0] == 220f || this.ai[0] == 280f || this.ai[0] == 340f || this.ai[0] == 370f || this.ai[0] == 400f || this.ai[0] == 430f || this.ai[0] == 460f || this.ai[0] == 500f || this.ai[0] == 520f || this.ai[0] == 540f)
				{
					float num663 = Main.rand.NextFloat() * ((float)Math.PI * 2f);
					float num664 = 120f;
					for (int num665 = 0; (float)num665 < num664; num665++)
					{
						float num666 = (float)num665 / num664 * ((float)Math.PI * 2f);
						float num667 = Main.rand.NextFloat();
						Vector2 vector239 = base.Center + new Vector2(0f, -20f) + num666.ToRotationVector2() * (810f - this.ai[0]);
						Vector2 vector240 = (num666 - (float)Math.PI).ToRotationVector2() * (14f + 5f * (this.ai[0] / 600f) + 8f * num667);
						Vector2? val105 = vector240;
						newColor = default(Color);
						Dust dust78 = Dust.NewDustPerfect(vector239, 264, val105, 0, newColor);
						dust78.scale = 0.9f;
						dust78.fadeIn = 1.15f + num667 * 0.3f;
						dust78.color = new Color(1f, 1f, 1f, 0f);
						dust78.noGravity = true;
						dust78.noLight = true;
					}
				}
			}
			else
			{
				if (this.ai[1] != 1f)
				{
					return;
				}
				dontTakeDamageFromHostiles = true;
				life = lifeMax;
				if (this.ai[0] == 0f)
				{
					for (int num670 = 0; num670 < 200; num670++)
					{
						NPC nPC4 = Main.npc[num670];
						if (nPC4.active && nPC4.type == 549)
						{
							nPC4.ai[1] = 1f;
							nPC4.ai[0] = 0f;
							nPC4.netUpdate = true;
						}
					}
					if (Main.netMode != 1)
					{
						DD2Event.ReportLoss();
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center - Vector2.UnitY * 40f, Vector2.Zero, 672, 0, 0f, Main.myPlayer);
					}
				}
				this.ai[0]++;
				float lerpValue2 = Utils.GetLerpValue(480f, 600f, this.ai[0], clamped: true);
				if (lerpValue2 != 0f)
				{
					MoonlordDeathDrama.RequestLight(lerpValue2, base.Center);
				}
				float num671 = 96f;
				if (this.ai[0] < num671)
				{
					velocity.Y = MathHelper.Lerp(0f, -1f, this.ai[0] / num671);
				}
				if (this.ai[0] >= num671)
				{
					alpha += 50;
					if (alpha > 255)
					{
						alpha = 255;
					}
				}
				Vector2 vector241 = base.Center + new Vector2(0f, MathHelper.Lerp(0f, -70f, Utils.GetLerpValue(0f, 300f, this.ai[0], clamped: true)));
				float num672 = 0.99f;
				if (this.ai[0] >= 60f)
				{
					num672 = 0.79f;
				}
				if (this.ai[0] >= 120f)
				{
					num672 = 0.58f;
				}
				if (this.ai[0] >= 180f)
				{
					num672 = 0.23f;
				}
				if (this.ai[0] >= 240f)
				{
					num672 = 0.35f;
				}
				if (this.ai[0] >= 300f)
				{
					num672 = 0.6f;
				}
				if (this.ai[0] >= 360f)
				{
					num672 = 0.98f;
				}
				if (this.ai[0] >= 420f)
				{
					num672 = 0.995f;
				}
				if (this.ai[0] >= 450f)
				{
					num672 = 1f;
				}
				for (int num673 = 0; num673 < 12; num673++)
				{
					if (!(Main.rand.NextFloat() < num672))
					{
						float num674 = Main.rand.NextFloat() * ((float)Math.PI * 2f);
						float num675 = Main.rand.NextFloat();
						Vector2 vector242 = vector241 + num674.ToRotationVector2() * (70f + 600f * num675);
						Vector2 vector243 = (num674 - (float)Math.PI / 2f - (float)Math.PI / 8f).ToRotationVector2() * (12f + 9f * Main.rand.NextFloat() + 4f * num675);
						Vector2? val106 = vector243;
						newColor = default(Color);
						Dust dust79 = Dust.NewDustPerfect(vector242, 240, val106, 0, newColor);
						dust79.scale = 0.8f;
						dust79.fadeIn = 0.95f + num675 * 0.3f;
						dust79.noGravity = true;
					}
				}
				if (this.ai[0] >= 600f)
				{
					DD2Event.StopInvasion();
					if (!Main.dedServ)
					{
						Filters.Scene.Deactivate("CrystalDestructionVortex");
						Filters.Scene.Deactivate("CrystalDestructionColor");
						Filters.Scene.Deactivate("CrystalWin");
					}
					dontTakeDamage = false;
					life = 0;
					checkDead();
					netUpdate = true;
				}
			}
		}
		else if (aiStyle == 106)
		{
			if (alpha == 0)
			{
				Lighting.AddLight(base.Center, 0.5f, 0.1f, 0.3f);
			}
			if (this.ai[1] == 0f)
			{
				if (localAI[0] == 0f)
				{
					SoundEngine.PlayTrackedSound(in SoundID.DD2_EtherianPortalOpen, base.Center);
					localAI[3] = SlotId.Invalid.ToFloat();
				}
				if (localAI[0] > 150f)
				{
					ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[3]));
					if (activeSound == null)
					{
						localAI[3] = SoundEngine.PlayTrackedSound(in SoundID.DD2_EtherianPortalIdleLoop, base.Center).ToFloat();
					}
				}
				if (!DD2Event.EnemySpawningIsOnHold)
				{
					this.ai[0]++;
				}
				if (this.ai[0] >= (float)DD2Event.LaneSpawnRate)
				{
					if (this.ai[0] >= (float)(DD2Event.LaneSpawnRate * 3))
					{
						this.ai[0] = 0f;
					}
					netUpdate = true;
					if (Main.netMode != 1 && (int)this.ai[0] % DD2Event.LaneSpawnRate == 0)
					{
						DD2Event.SpawnMonsterFromGate(base.Bottom);
						if (DD2Event.EnemySpawningIsOnHold)
						{
							this.ai[0] += 1f;
						}
					}
				}
				localAI[0]++;
				if (localAI[0] > 180f)
				{
					localAI[0] = 180f;
				}
				if (Main.netMode != 1 && localAI[0] >= 180f)
				{
					if (AnyNPCs(548))
					{
						dontTakeDamage = true;
						return;
					}
					this.ai[1] = 1f;
					this.ai[0] = 0f;
					dontTakeDamage = true;
				}
			}
			else if (this.ai[1] == 1f)
			{
				this.ai[0]++;
				scale = MathHelper.Lerp(1f, 0.05f, Utils.GetLerpValue(500f, 600f, this.ai[0], clamped: true));
				ActiveSound activeSound2 = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[3]));
				if (activeSound2 == null)
				{
					localAI[3] = SoundEngine.PlayTrackedSound(in SoundID.DD2_EtherianPortalIdleLoop, base.Center).ToFloat();
				}
				activeSound2 = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[3]));
				if (activeSound2 != null)
				{
					activeSound2.Volume = scale;
				}
				if (this.ai[0] >= 550f)
				{
					dontTakeDamage = false;
					life = 0;
					checkDead();
					netUpdate = true;
					activeSound2?.Stop();
				}
			}
		}
		else if (aiStyle == 107)
		{
			AI_107_ImprovedWalkers();
		}
		else if (aiStyle == 108)
		{
			AI_108_DivingFlyer();
		}
		else if (aiStyle == 109)
		{
			AI_109_DarkMage();
		}
		else if (aiStyle == 110)
		{
			AI_110_Betsy();
		}
		else if (aiStyle == 111)
		{
			AI_111_DD2LightningBug();
		}
		else if (aiStyle == 112)
		{
			AI_112_FairyCritter();
		}
		else if (aiStyle == 113)
		{
			AI_113_WindyBalloon();
		}
		else if (aiStyle == 114)
		{
			AI_114_Dragonflies();
		}
		else if (aiStyle == 115)
		{
			AI_115_LadyBugs();
		}
		else if (aiStyle == 116)
		{
			AI_116_WaterStriders();
		}
		else if (aiStyle == 117)
		{
			AI_117_BloodNautilus();
		}
		else if (aiStyle == 118)
		{
			AI_118_Seahorses();
		}
		else if (aiStyle == 119)
		{
			AI_119_Dandelion();
		}
		else if (aiStyle == 120)
		{
			AI_120_HallowBoss();
		}
		else if (aiStyle == 121)
		{
			AI_121_QueenSlime();
		}
		else if (aiStyle == 122)
		{
			AI_122_PirateGhost();
		}
		else if (aiStyle == 123)
		{
			AI_123_Deerclops();
		}
		else if (aiStyle == 124)
		{
			AI_124_ElderSlimeChest();
		}
		else if (aiStyle == 125)
		{
			AI_125_ClumsySlimeBalloon();
		}
	}

	private void AI_124_ElderSlimeChest()
	{
		velocity.Y += 0.2f;
	}

	private void AI_125_ClumsySlimeBalloon()
	{
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_0173: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_040f: Unknown result type (might be due to invalid IL or missing references)
		//IL_049e: Unknown result type (might be due to invalid IL or missing references)
		if (localAI[0] == 0f && Main.netMode != 1)
		{
			TargetClosest();
			localAI[0] = 1f;
			netUpdate = true;
		}
		spriteDirection = direction;
		rotation = velocity.X * 0.05f;
		NPCAimedTarget targetData = GetTargetData();
		float num = float.PositiveInfinity;
		int num2 = 0;
		Vector2 zero = Vector2.Zero;
		if (!targetData.Invalid)
		{
			zero = targetData.Center - base.Bottom;
			if (zero.Y < 0f)
			{
				num2 = (int)zero.Y / -16;
			}
			num = ((Vector2)(ref zero)).Length();
			if (direction != Math.Sign(zero.X))
			{
				num2 = 0;
			}
		}
		if (wet || collideX || (collideY && oldVelocity.Y < 0f))
		{
			float num3 = oldVelocity.X + (float)(direction * 8);
			position.X -= num3;
			TargetClosest(faceTarget: false);
			direction *= -1;
			velocity.X = direction * 2;
			life = -1;
			HitEffect();
			active = false;
			netUpdate = true;
			SoundEngine.PlaySound(DeathSound, position);
			return;
		}
		if (collideY)
		{
			velocity.Y = ((oldVelocity.Y > 0f) ? 1 : (-1));
			TargetClosest(faceTarget: false);
		}
		float num4 = 3f + Math.Abs(Main.windSpeedTarget) * 2f;
		if (Math.Sign(velocity.X) != direction || Math.Abs(velocity.X) < num4)
		{
			velocity.X += (float)direction * 0.04f;
			if (velocity.X * (float)direction < 0f)
			{
				if (Math.Abs(velocity.X) > num4)
				{
					velocity.X += (float)direction * 0.15f;
				}
				else
				{
					velocity.X += (float)direction * 0.1f;
				}
			}
			else if (Math.Abs(velocity.X) > num4)
			{
				velocity.X = (float)direction * num4;
			}
		}
		int num5 = (int)((position.X + (float)(width / 2)) / 16f) + direction;
		int num6 = (int)((position.Y + (float)height) / 16f);
		bool flag = true;
		int num7 = 8 + num2;
		bool flag2 = false;
		for (int i = num6; i < num6 + num7; i++)
		{
			if (Main.tile[num5, i] == null)
			{
				Main.tile[num5, i] = default(Tile);
			}
			if ((Main.tile[num5, i].nactive() && Main.tileSolid[Main.tile[num5, i].type]) || Main.tile[num5, i].liquid > 0)
			{
				if (i < num6 + 5 + num2)
				{
					flag2 = true;
				}
				flag = false;
				break;
			}
		}
		if (num < 400f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
		{
			float num8 = 2f;
			float num9 = 0.035f;
			if (base.Center.Y + (float)(height / 4) > Main.player[target].position.Y + (float)(Main.player[target].height / 4) && velocity.Y > 0f - num8)
			{
				velocity.Y -= num9;
				if (velocity.Y > 0f)
				{
					velocity.Y -= num9;
				}
			}
			else if (base.Center.Y + (float)(height / 4) < Main.player[target].position.Y + (float)(Main.player[target].height / 4) && velocity.Y < num8)
			{
				velocity.Y += num9;
				if (velocity.Y < 0f)
				{
					velocity.Y += num9;
				}
			}
		}
		else
		{
			if (flag)
			{
				velocity.Y += 0.05f;
			}
			else
			{
				velocity.Y -= 0.1f;
			}
			if (flag2)
			{
				velocity.Y -= 0.2f;
			}
			if (velocity.Y > 2f)
			{
				velocity.Y = 2f;
			}
			if (velocity.Y < -4f)
			{
				velocity.Y = -4f;
			}
		}
	}

	private void SpawnStardustMark_StardustTower()
	{
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_0234: Unknown result type (might be due to invalid IL or missing references)
		//IL_0239: Unknown result type (might be due to invalid IL or missing references)
		//IL_0243: Unknown result type (might be due to invalid IL or missing references)
		//IL_0249: Unknown result type (might be due to invalid IL or missing references)
		//IL_024b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0252: Unknown result type (might be due to invalid IL or missing references)
		//IL_0257: Unknown result type (might be due to invalid IL or missing references)
		//IL_026d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0274: Unknown result type (might be due to invalid IL or missing references)
		//IL_027b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0282: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0260: Unknown result type (might be due to invalid IL or missing references)
		//IL_0265: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f0: Unknown result type (might be due to invalid IL or missing references)
		List<int> list = new List<int>();
		if (CountNPCS(405) + CountNPCS(406) < 2)
		{
			list.Add(405);
		}
		if (CountNPCS(402) < 2)
		{
			list.Add(402);
		}
		if (CountNPCS(407) < 1)
		{
			list.Add(407);
		}
		if (list.Count > 0)
		{
			int num = Utils.SelectRandom(Main.rand, list.ToArray());
			ai[1] = 30 * Main.rand.Next(5, 16);
			int num5 = Main.rand.Next(3, 6);
			int num6 = Main.rand.Next(0, 4);
			int num7 = 0;
			List<Tuple<Vector2, int, int>> list2 = new List<Tuple<Vector2, int, int>>();
			List<Vector2> list3 = new List<Vector2>();
			list2.Add(Tuple.Create<Vector2, int, int>(base.Top - Vector2.UnitY * 120f, num5, 0));
			int num8 = 0;
			int num9 = list2.Count;
			while (list2.Count > 0)
			{
				Vector2 item = list2[0].Item1;
				int num10 = 1;
				int num11 = 1;
				if (num8 > 0 && num6 > 0 && (Main.rand.Next(3) != 0 || num8 == 1))
				{
					num11 = Main.rand.Next(Math.Max(1, list2[0].Item2));
					num10++;
					num6--;
				}
				for (int i = 0; i < num10; i++)
				{
					int num12 = list2[0].Item3;
					if (num8 == 0)
					{
						num12 = Utils.SelectRandom<int>(Main.rand, -1, 1);
					}
					else if (i == 1)
					{
						num12 *= -1;
					}
					float num2 = ((num8 % 2 == 0) ? 0f : ((float)Math.PI)) + (0.5f - Main.rand.NextFloat()) * ((float)Math.PI / 4f) + (float)num12 * ((float)Math.PI / 4f) * (float)(num8 % 2 == 0).ToDirectionInt();
					float num3 = 100f + 50f * Main.rand.NextFloat();
					int num4 = list2[0].Item2;
					if (i != 0)
					{
						num4 = num11;
					}
					if (num8 == 0)
					{
						num2 = (0.5f - Main.rand.NextFloat()) * ((float)Math.PI / 4f);
						num3 = 100f + 100f * Main.rand.NextFloat();
					}
					Vector2 vector = (-Vector2.UnitY).RotatedBy(num2) * num3;
					if (num4 - 1 < 0)
					{
						vector = Vector2.Zero;
					}
					num7 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), item.X, item.Y, vector.X, vector.Y, 540, 0, 0f, Main.myPlayer, (float)(-num8) * 10f, 0.5f + Main.rand.NextFloat() * 0.5f);
					list3.Add(item + vector);
					if (num8 < num5 && list2[0].Item2 > 0)
					{
						list2.Add(Tuple.Create<Vector2, int, int>(item + vector, num4 - 1, num12));
					}
				}
				list2.Remove(list2[0]);
				if (--num9 == 0)
				{
					num9 = list2.Count;
					num8++;
				}
			}
			Main.projectile[num7].localAI[0] = num;
		}
		else
		{
			ai[1] = 30f;
		}
	}

	private void SpawnStardustMark_StardustWorm()
	{
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0205: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0214: Unknown result type (might be due to invalid IL or missing references)
		//IL_021a: Unknown result type (might be due to invalid IL or missing references)
		//IL_021c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0223: Unknown result type (might be due to invalid IL or missing references)
		//IL_0228: Unknown result type (might be due to invalid IL or missing references)
		//IL_023e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0245: Unknown result type (might be due to invalid IL or missing references)
		//IL_024c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0253: Unknown result type (might be due to invalid IL or missing references)
		//IL_0298: Unknown result type (might be due to invalid IL or missing references)
		//IL_029a: Unknown result type (might be due to invalid IL or missing references)
		//IL_029c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0231: Unknown result type (might be due to invalid IL or missing references)
		//IL_0236: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c1: Unknown result type (might be due to invalid IL or missing references)
		List<int> list = new List<int>();
		if (CountNPCS(405) + CountNPCS(406) < 2)
		{
			list.Add(405);
		}
		if (CountNPCS(402) < 3)
		{
			list.Add(402);
		}
		if (CountNPCS(407) < 1)
		{
			list.Add(407);
		}
		if (list.Count <= 0)
		{
			return;
		}
		int num = Utils.SelectRandom(Main.rand, list.ToArray());
		int num5 = Main.rand.Next(3, 6);
		int num6 = Main.rand.Next(0, 4);
		int num7 = 0;
		List<Tuple<Vector2, int, int>> list2 = new List<Tuple<Vector2, int, int>>();
		List<Vector2> list3 = new List<Vector2>();
		list2.Add(Tuple.Create<Vector2, int, int>(base.Center, num5, 0));
		int num8 = 0;
		int num9 = list2.Count;
		while (list2.Count > 0)
		{
			Vector2 item = list2[0].Item1;
			int num10 = 1;
			int num11 = 1;
			if (num8 > 0 && num6 > 0 && (Main.rand.Next(3) != 0 || num8 == 1))
			{
				num11 = Main.rand.Next(Math.Max(1, list2[0].Item2));
				num10++;
				num6--;
			}
			for (int i = 0; i < num10; i++)
			{
				int num12 = list2[0].Item3;
				if (num8 == 0)
				{
					num12 = Utils.SelectRandom<int>(Main.rand, -1, 1);
				}
				else if (i == 1)
				{
					num12 *= -1;
				}
				float num2 = ((num8 % 2 == 0) ? 0f : ((float)Math.PI)) + (0.5f - Main.rand.NextFloat()) * ((float)Math.PI / 4f) + (float)num12 * ((float)Math.PI / 4f) * (float)(num8 % 2 == 0).ToDirectionInt();
				float num3 = 100f + 50f * Main.rand.NextFloat();
				int num4 = list2[0].Item2;
				if (i != 0)
				{
					num4 = num11;
				}
				if (num8 == 0)
				{
					num2 = (0.5f - Main.rand.NextFloat()) * ((float)Math.PI / 4f);
					num3 = 100f + 100f * Main.rand.NextFloat();
				}
				Vector2 vector = (-Vector2.UnitY).RotatedBy(num2) * num3;
				if (num4 - 1 < 0)
				{
					vector = Vector2.Zero;
				}
				num7 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), item.X, item.Y, vector.X, vector.Y, 540, 0, 0f, Main.myPlayer, (float)(-num8) * 10f, 0.5f + Main.rand.NextFloat() * 0.5f);
				list3.Add(item + vector);
				if (num8 < num5 && list2[0].Item2 > 0)
				{
					list2.Add(Tuple.Create<Vector2, int, int>(item + vector, num4 - 1, num12));
				}
			}
			list2.Remove(list2[0]);
			if (--num9 == 0)
			{
				num9 = list2.Count;
				num8++;
			}
		}
		Main.projectile[num7].localAI[0] = num;
	}

	public static bool IsDeerclopsHostile()
	{
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		if (deerclopsBoss == -1)
		{
			return false;
		}
		NPC nPC = Main.npc[deerclopsBoss];
		if (!nPC.active || nPC.type != 668)
		{
			return false;
		}
		int num = (int)nPC.ai[0];
		if (num == 6 || num == 7 || num == 8)
		{
			Rectangle rectangle = default(Rectangle);
			((Rectangle)(ref rectangle))._002Ector((int)Main.screenPosition.X, (int)Main.screenPosition.Y, Main.screenWidth, Main.screenHeight);
			((Rectangle)(ref rectangle)).Inflate(960, 960);
			Rectangle hitbox = nPC.Hitbox;
			if (!((Rectangle)(ref hitbox)).Intersects(rectangle))
			{
				return false;
			}
		}
		return true;
	}

	private void AI_123_Deerclops()
	{
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_013c: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		//IL_014c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_0445: Unknown result type (might be due to invalid IL or missing references)
		//IL_0454: Unknown result type (might be due to invalid IL or missing references)
		//IL_0459: Unknown result type (might be due to invalid IL or missing references)
		//IL_045e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0461: Unknown result type (might be due to invalid IL or missing references)
		//IL_0466: Unknown result type (might be due to invalid IL or missing references)
		//IL_0468: Unknown result type (might be due to invalid IL or missing references)
		//IL_046d: Unknown result type (might be due to invalid IL or missing references)
		//IL_046e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0470: Unknown result type (might be due to invalid IL or missing references)
		//IL_0475: Unknown result type (might be due to invalid IL or missing references)
		//IL_0478: Unknown result type (might be due to invalid IL or missing references)
		//IL_047d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0482: Unknown result type (might be due to invalid IL or missing references)
		//IL_0493: Unknown result type (might be due to invalid IL or missing references)
		//IL_049f: Unknown result type (might be due to invalid IL or missing references)
		//IL_089f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a11: Unknown result type (might be due to invalid IL or missing references)
		//IL_0da8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b83: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ca1: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_031b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0325: Unknown result type (might be due to invalid IL or missing references)
		//IL_0337: Unknown result type (might be due to invalid IL or missing references)
		//IL_0348: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a71: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ded: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e02: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_08fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_093c: Unknown result type (might be due to invalid IL or missing references)
		//IL_094b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0568: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e78: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aea: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0afa: Unknown result type (might be due to invalid IL or missing references)
		//IL_075d: Unknown result type (might be due to invalid IL or missing references)
		deerclopsBoss = whoAmI;
		int num = 15;
		NPCAimedTarget targetData = GetTargetData();
		bool haltMovement = false;
		bool goHome = false;
		bool flag = Distance(targetData.Center) >= 450f;
		localAI[3] = MathHelper.Clamp(localAI[3] + (float)flag.ToDirectionInt(), 0f, 30f);
		dontTakeDamage = localAI[3] >= 30f;
		float lifePercent = (float)life / (float)lifeMax;
		bool expertMode = Main.expertMode;
		int shadowHandDamage = 10;
		float num9 = Utils.Remap(localAI[3], 0f, 30f, 0f, 1f);
		if (num9 > 0f)
		{
			float num10 = Main.rand.NextFloat() * num9 * 3f;
			while (num10 > 0f)
			{
				num10 -= 1f;
				Dust.NewDustDirect(position, width, height, 109, 0f, -3f, 0, default(Color), 1.4f).noGravity = true;
			}
		}
		if (homeTileX == -1 && homeTileY == -1)
		{
			Point point = base.Bottom.ToTileCoordinates();
			homeTileX = point.X;
			homeTileY = point.Y;
			this.ai[2] = homeTileX;
			this.ai[3] = homeTileY;
			netUpdate = true;
			timeLeft = 86400;
		}
		timeLeft -= Main.worldEventUpdates;
		if (timeLeft < 0)
		{
			timeLeft = 0;
		}
		homeTileX = (int)this.ai[2];
		homeTileY = (int)this.ai[3];
		if (!expertMode)
		{
			localAI[2] = 0f;
		}
		if (expertMode && Main.netMode != 1)
		{
			SpawnPassiveShadowHands(lifePercent, shadowHandDamage);
		}
		Vector2 val2;
		switch ((int)this.ai[0])
		{
		case -1:
			localAI[3] = -10f;
			break;
		case 6:
		{
			TargetClosest(faceTarget: false);
			targetData = GetTargetData();
			if (Main.netMode != 1)
			{
				if (!ShouldRunAway(ref targetData, isChasing: false))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					localAI[1] = 0f;
					netUpdate = true;
					break;
				}
				if (timeLeft <= 0)
				{
					this.ai[0] = 8f;
					this.ai[1] = 0f;
					localAI[1] = 0f;
					netUpdate = true;
					break;
				}
			}
			if (direction != oldDirection)
			{
				netUpdate = true;
			}
			goHome = true;
			this.ai[1] += 1f;
			Vector2 other = default(Vector2);
			((Vector2)(ref other))._002Ector((float)(homeTileX * 16), (float)(homeTileY * 16));
			bool flag2 = base.Top.Y > other.Y + 1600f;
			bool num16 = Distance(other) < 1020f;
			Distance(targetData.Center);
			float num11 = this.ai[1] % 600f;
			if (num16 && num11 < 420f)
			{
				haltMovement = true;
			}
			bool flag3 = false;
			int num12 = 300;
			if (flag2 && this.ai[1] >= (float)num12)
			{
				flag3 = true;
			}
			int num13 = 1500;
			if (!num16 && this.ai[1] >= (float)num13)
			{
				flag3 = true;
			}
			if (flag3)
			{
				this.ai[0] = 7f;
				this.ai[1] = 0f;
				localAI[1] = 0f;
				netUpdate = true;
			}
			break;
		}
		case 0:
		{
			TargetClosest();
			targetData = GetTargetData();
			if (ShouldRunAway(ref targetData, isChasing: true))
			{
				this.ai[0] = 6f;
				this.ai[1] = 0f;
				localAI[1] = 0f;
				netUpdate = true;
				break;
			}
			this.ai[1] += 1f;
			Vector2 vector = base.Bottom + new Vector2(0f, -32f);
			Vector2 val = targetData.Hitbox.ClosestPointInRect(vector);
			Vector2 vector2 = val - vector;
			val2 = val - base.Center;
			((Vector2)(ref val2)).Length();
			float num6 = 0.6f;
			bool flag4 = Math.Abs(vector2.X) >= Math.Abs(vector2.Y) * num6 || ((Vector2)(ref vector2)).Length() < 48f;
			bool flag5 = vector2.Y <= (float)(100 + targetData.Height) && vector2.Y >= -200f;
			if (Math.Abs(vector2.X) < 120f && flag5 && velocity.Y == 0f && localAI[1] >= 2f)
			{
				velocity.X = 0f;
				this.ai[0] = 4f;
				this.ai[1] = 0f;
				localAI[1] = 0f;
				netUpdate = true;
				break;
			}
			if (Math.Abs(vector2.X) < 120f && flag5 && velocity.Y == 0f && flag4)
			{
				velocity.X = 0f;
				this.ai[0] = 1f;
				this.ai[1] = 0f;
				localAI[1] += 1f;
				netUpdate = true;
				break;
			}
			bool flag6 = this.ai[1] >= 240f;
			if (velocity.Y == 0f && velocity.X != 0f && flag6)
			{
				velocity.X = 0f;
				this.ai[0] = 2f;
				this.ai[1] = 0f;
				localAI[1] = 0f;
				netUpdate = true;
				break;
			}
			bool flag7 = this.ai[1] >= 90f;
			if (velocity.Y == 0f && velocity.X == 0f && flag7)
			{
				velocity.X = 0f;
				this.ai[0] = 5f;
				this.ai[1] = 0f;
				localAI[1] = 0f;
				netUpdate = true;
				break;
			}
			bool flag8 = this.ai[1] >= 120f;
			int num7 = 32;
			bool flag9 = targetData.Type == NPCTargetType.Player && !Main.player[target].buffImmune[num7] && Main.player[target].FindBuffIndex(num7) == -1;
			if (velocity.Y == 0f && flag8 && flag9 && Math.Abs(vector2.X) > 100f)
			{
				velocity.X = 0f;
				this.ai[0] = 3f;
				this.ai[1] = 0f;
				localAI[1] = 0f;
				netUpdate = true;
			}
			break;
		}
		case 1:
			this.ai[1] += 1f;
			haltMovement = true;
			AI_123_Deerclops_MakeSpikesForward(1, targetData);
			if (this.ai[1] >= 80f)
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				netUpdate = true;
			}
			break;
		case 4:
			this.ai[1] += 1f;
			haltMovement = true;
			TargetClosest();
			AI_123_Deerclops_MakeSpikesBothSides(1, targetData);
			if (this.ai[1] >= 90f)
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				netUpdate = true;
			}
			break;
		case 2:
		{
			int num14 = 4;
			int num15 = 8 * num14;
			this.ai[1] += 1f;
			if (this.ai[1] == (float)(num15 - 20))
			{
				SoundEngine.PlaySound(in SoundID.DeerclopsScream, base.Center);
			}
			if (this.ai[1] == (float)num15)
			{
				SoundEngine.PlaySound(in SoundID.DeerclopsRubbleAttack, base.Center);
			}
			haltMovement = true;
			if (Main.netMode != 1 && this.ai[1] >= (float)num15)
			{
				Point sourceTileCoords = base.Top.ToTileCoordinates();
				int num2 = 20;
				int distancedByThisManyTiles = 1;
				float upBiasPerSpike = 200f;
				sourceTileCoords.X += direction * 3;
				sourceTileCoords.Y -= 10;
				int num17 = (int)this.ai[1] - num15;
				if (num17 == 0)
				{
					PunchCameraModifier modifier4 = new PunchCameraModifier(base.Center, new Vector2(0f, -1f), 20f, 6f, 30, 1000f, "Deerclops");
					Main.instance.CameraModifiers.Add(modifier4);
				}
				int num3 = 1;
				int num4 = num17 / num3 * num3;
				int num5 = num4 + num3;
				if (num17 % num3 != 0)
				{
					num5 = num4;
				}
				for (int j = num4; j < num5 && j < num2; j++)
				{
					AI_123_Deerclops_ShootRubbleUp(ref targetData, ref sourceTileCoords, num2, distancedByThisManyTiles, upBiasPerSpike, j);
				}
			}
			if (this.ai[1] >= 60f)
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				netUpdate = true;
			}
			break;
		}
		case 3:
			if (this.ai[1] == 30f)
			{
				SoundEngine.PlaySound(in SoundID.DeerclopsScream, base.Center);
			}
			this.ai[1] += 1f;
			haltMovement = true;
			if ((int)this.ai[1] % 4 == 0 && this.ai[1] >= 28f)
			{
				PunchCameraModifier modifier5 = new PunchCameraModifier(base.Center, (Main.rand.NextFloat() * ((float)Math.PI * 2f)).ToRotationVector2(), 20f, 6f, 20, 1000f, "Deerclops");
				Main.instance.CameraModifiers.Add(modifier5);
				if (Main.netMode != 2)
				{
					Player player = Main.player[Main.myPlayer];
					_ = Main.myPlayer;
					int num8 = 32;
					int timeToAdd = 720;
					if (!player.dead && player.active && player.FindBuffIndex(num8) == -1)
					{
						val2 = player.Center - base.Center;
						if (((Vector2)(ref val2)).Length() < 800f && !player.creativeGodMode)
						{
							player.AddBuff(num8, timeToAdd);
						}
					}
				}
			}
			if (this.ai[1] == 30f)
			{
				TargetClosest();
			}
			if (this.ai[1] >= 60f)
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				netUpdate = true;
			}
			break;
		case 7:
			if (this.ai[1] == 30f)
			{
				SoundEngine.PlaySound(in SoundID.DeerclopsScream, base.Center);
			}
			this.ai[1] += 1f;
			haltMovement = true;
			if ((int)this.ai[1] % 4 == 0 && this.ai[1] >= 28f)
			{
				PunchCameraModifier modifier3 = new PunchCameraModifier(base.Center, (Main.rand.NextFloat() * ((float)Math.PI * 2f)).ToRotationVector2(), 20f, 6f, 20, 1000f, "Deerclops");
				Main.instance.CameraModifiers.Add(modifier3);
			}
			if (this.ai[1] == 40f)
			{
				TargetClosest();
				if (Main.netMode != 1)
				{
					netUpdate = true;
					base.Bottom = new Vector2((float)(homeTileX * 16), (float)(homeTileY * 16));
				}
			}
			if (this.ai[1] >= 60f)
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				netUpdate = true;
			}
			break;
		case 8:
			if (this.ai[1] == 30f)
			{
				SoundEngine.PlaySound(in SoundID.DeerclopsScream, base.Center);
			}
			this.ai[1] += 1f;
			haltMovement = true;
			if ((int)this.ai[1] % 4 == 0 && this.ai[1] >= 28f)
			{
				PunchCameraModifier modifier2 = new PunchCameraModifier(base.Center, (Main.rand.NextFloat() * ((float)Math.PI * 2f)).ToRotationVector2(), 20f, 6f, 20, 1000f, "Deerclops");
				Main.instance.CameraModifiers.Add(modifier2);
			}
			if (this.ai[1] >= 40f)
			{
				life = -1;
				HitEffect();
				active = false;
				if (Main.netMode != 1)
				{
					NetMessage.SendData(28, -1, -1, null, whoAmI, -1f);
				}
				return;
			}
			break;
		case 5:
			if (this.ai[1] == 30f)
			{
				SoundEngine.PlaySound(in SoundID.DeerclopsScream, base.Center);
			}
			this.ai[1] += 1f;
			haltMovement = true;
			if ((int)this.ai[1] % 4 == 0 && this.ai[1] >= 28f)
			{
				PunchCameraModifier modifier = new PunchCameraModifier(base.Center, (Main.rand.NextFloat() * ((float)Math.PI * 2f)).ToRotationVector2(), 20f, 6f, 20, 1000f, "Deerclops");
				Main.instance.CameraModifiers.Add(modifier);
			}
			if (this.ai[1] == 30f)
			{
				TargetClosest();
				if (Main.netMode != 1)
				{
					for (int i = 0; i < 6; i++)
					{
						Projectile.RandomizeInsanityShadowFor(Main.player[target], isHostile: true, out var spawnposition, out var spawnvelocity, out var ai, out var ai2);
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), spawnposition, spawnvelocity, 965, num, 0f, Main.myPlayer, ai, ai2);
					}
				}
			}
			if (this.ai[1] >= 60f)
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				netUpdate = true;
			}
			break;
		}
		AI_123_Deerclops_Movement(haltMovement, goHome);
	}

	private bool ShouldRunAway(ref NPCAimedTarget targetData, bool isChasing)
	{
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		if (targetData.Type == NPCTargetType.Player)
		{
			Player player = Main.player[target];
			bool zoneSnow = player.ZoneSnow;
			Vector2 other = default(Vector2);
			((Vector2)(ref other))._002Ector((float)(homeTileX * 16), (float)(homeTileY * 16));
			int num = 480;
			zoneSnow |= player.Distance(other) <= (float)num;
			return (player.dead || (!isChasing && !zoneSnow)) | (Distance(player.Center) >= 2400f);
		}
		if (targetData.Type == NPCTargetType.None)
		{
			return true;
		}
		return false;
	}

	private void SpawnPassiveShadowHands(float lifePercent, int shadowHandDamage)
	{
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		int num = (int)Utils.Remap(lifePercent, 1f, 0f, 80f, 40f);
		localAI[2] += 1f;
		int num2 = (int)localAI[2];
		if (num2 % num != 0)
		{
			return;
		}
		int num3 = num2 / num;
		if (num2 / num >= 3)
		{
			localAI[2] = 0f;
		}
		for (int i = 0; i < 255; i++)
		{
			if (Boss_CanShootExtraAt(i, num3 % 3, 3, 1200f, alwaysSkipMainTarget: false))
			{
				Projectile.RandomizeInsanityShadowFor(Main.player[i], isHostile: true, out var spawnposition, out var spawnvelocity, out var ai, out var ai2);
				Projectile.NewProjectile(GetSpawnSource_ForProjectile(), spawnposition, spawnvelocity, 965, shadowHandDamage, 0f, Main.myPlayer, ai, ai2);
			}
		}
	}

	private void AI_123_Deerclops_ShootRubbleUp(ref NPCAimedTarget targetData, ref Point sourceTileCoords, int howMany, int distancedByThisManyTiles, float upBiasPerSpike, int whichOne)
	{
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_010e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0113: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		int num = 18;
		int num2 = whichOne * distancedByThisManyTiles;
		Vector2 vector2 = default(Vector2);
		for (int i = 0; i < 35; i++)
		{
			int num3 = sourceTileCoords.X + num2 * direction;
			int num4 = sourceTileCoords.Y + i;
			if (WorldGen.SolidTile(num3, num4))
			{
				Vector2 val = targetData.Center + new Vector2((float)(num2 * direction * 20), (0f - upBiasPerSpike) * (float)howMany + (float)num2 * upBiasPerSpike / (float)distancedByThisManyTiles);
				((Vector2)(ref vector2))._002Ector((float)(num3 * 16 + 8), (float)(num4 * 16 + 8));
				Vector2 vector3 = (val - vector2).SafeNormalize(-Vector2.UnitY);
				vector3 = Utils.RotatedBy(new Vector2(0f, -1f), (float)(whichOne * direction) * 0.7f * ((float)Math.PI / 4f / (float)howMany));
				int num5 = Main.rand.Next(Main.projFrames[962] * 4);
				num5 = 6 + Main.rand.Next(6);
				Projectile.NewProjectile(GetSpawnSource_ForProjectile(), new Vector2((float)(num3 * 16 + 8), (float)(num4 * 16 - 8)), vector3 * (8f + Main.rand.NextFloat() * 8f), 962, num, 0f, Main.myPlayer, 0f, num5);
				break;
			}
		}
	}

	private void AI_123_Deerclops_MakeSpikesForward(int AISLOT_PhaseCounter, NPCAimedTarget targetData)
	{
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		int num = 9;
		int num2 = 4;
		if (Main.netMode == 1)
		{
			return;
		}
		int num3 = num * num2;
		if (!(ai[AISLOT_PhaseCounter] < (float)num3))
		{
			Point sourceTileCoords = base.Bottom.ToTileCoordinates();
			int num4 = 20;
			int num5 = 1;
			sourceTileCoords.X += direction * 3;
			int num9 = (int)ai[AISLOT_PhaseCounter] - num3;
			if (num9 == 0)
			{
				PunchCameraModifier modifier = new PunchCameraModifier(base.Center, new Vector2(0f, 1f), 20f, 6f, 30, 1000f, "Deerclops");
				Main.instance.CameraModifiers.Add(modifier);
			}
			int num6 = 4;
			int num7 = num9 / num6 * num6;
			int num8 = num7 + num6;
			if (num9 % num6 != 0)
			{
				num8 = num7;
			}
			for (int i = num7; i < num8 && i < num4; i++)
			{
				int xOffset = i * num5;
				AI_123_Deerclops_TryMakingSpike(ref sourceTileCoords, direction, num4, i, xOffset);
			}
		}
	}

	private void AI_123_Deerclops_MakeSpikesBothSides(int AISLOT_PhaseCounter, NPCAimedTarget targetData)
	{
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		if (Main.netMode == 1)
		{
			return;
		}
		int num = 56;
		if (!(ai[AISLOT_PhaseCounter] < (float)num))
		{
			Point sourceTileCoords = base.Bottom.ToTileCoordinates();
			int num2 = 15;
			int num3 = 1;
			int num7 = (int)ai[AISLOT_PhaseCounter] - num;
			if (num7 == 0)
			{
				PunchCameraModifier modifier = new PunchCameraModifier(base.Center, new Vector2(0f, 1f), 20f, 6f, 30, 1000f, "Deerclops");
				Main.instance.CameraModifiers.Add(modifier);
			}
			int num4 = 2;
			int num5 = num7 / num4 * num4;
			int num6 = num5 + num4;
			if (num7 % num4 != 0)
			{
				num6 = num5;
			}
			for (int i = num5; i >= 0 && i < num6 && i < num2; i++)
			{
				int xOffset = i * num3;
				AI_123_Deerclops_TryMakingSpike(ref sourceTileCoords, direction, num2, -i, xOffset);
				AI_123_Deerclops_TryMakingSpike(ref sourceTileCoords, -direction, num2, -i, xOffset);
			}
		}
	}

	public static bool IsADeerclopsNearScreen()
	{
		return npcsFoundForCheckActive[668];
	}

	private void AI_123_Deerclops_FindSpotToSpawnSpike(int howMany, int whichOne, ref int x, ref int y)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		if (WorldGen.ActiveAndWalkableTile(x, y))
		{
			return;
		}
		Rectangle rectangle = targetRect;
		int num = ((Rectangle)(ref rectangle)).Center.X / 16;
		int num2 = (((Rectangle)(ref rectangle)).Bottom - 16) / 16;
		int num3 = ((num2 - y > 0) ? 1 : (-1));
		int num4 = y;
		for (int i = 1; i <= 10; i++)
		{
			int num5 = y + num3 * i;
			if (num5 >= 20 && num5 <= Main.maxTilesY - 20 && WorldGen.ActiveAndWalkableTile(x, num5))
			{
				num4 = num5;
			}
		}
		if (num4 != y)
		{
			y = num4;
			return;
		}
		y = (int)MathHelper.Lerp((float)num2, (float)y, (float)Math.Abs(num - x) * 0.1f);
		for (int j = 0; j < 4; j++)
		{
			int num6 = y + j;
			if (num6 >= 20 && num6 <= Main.maxTilesY - 20 && WorldGen.ActiveAndWalkableTile(x, num6))
			{
				y = num6;
				break;
			}
		}
	}

	private void AI_123_Deerclops_TryMakingSpike(ref Point sourceTileCoords, int dir, int howMany, int whichOne, int xOffset)
	{
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		int num = 13;
		int num2 = sourceTileCoords.X + xOffset * dir;
		int num3 = AI_123_Deerclops_TryMakingSpike_FindBestY(ref sourceTileCoords, num2);
		if (WorldGen.ActiveAndWalkableTile(num2, num3))
		{
			Vector2 vector = default(Vector2);
			((Vector2)(ref vector))._002Ector((float)(num2 * 16 + 8), (float)(num3 * 16 - 8));
			Vector2 vector2 = Utils.RotatedBy(new Vector2(0f, -1f), (float)(whichOne * dir) * 0.7f * ((float)Math.PI / 4f / (float)howMany));
			Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector, vector2, 961, num, 0f, Main.myPlayer, 0f, 0.1f + Main.rand.NextFloat() * 0.1f + (float)xOffset * 1.1f / (float)howMany);
		}
	}

	private int AI_123_Deerclops_TryMakingSpike_FindBestY(ref Point sourceTileCoords, int x)
	{
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		int num = sourceTileCoords.Y;
		NPCAimedTarget targetData = GetTargetData();
		if (!targetData.Invalid)
		{
			Rectangle hitbox = targetData.Hitbox;
			Vector2 vector = default(Vector2);
			((Vector2)(ref vector))._002Ector((float)((Rectangle)(ref hitbox)).Center.X, (float)((Rectangle)(ref hitbox)).Bottom);
			int num7 = (int)(vector.Y / 16f);
			int num2 = Math.Sign(num7 - num);
			int num3 = num7 + num2 * 15;
			int? num4 = null;
			float num5 = float.PositiveInfinity;
			for (int i = num; i != num3; i += num2)
			{
				if (WorldGen.ActiveAndWalkableTile(x, i))
				{
					float num6 = Utils.ToWorldCoordinates(new Point(x, i), 8f, 8f).Distance(vector);
					if (!num4.HasValue || !(num6 >= num5))
					{
						num4 = i;
						num5 = num6;
					}
				}
			}
			if (num4.HasValue)
			{
				num = num4.Value;
			}
		}
		for (int j = 0; j < 20; j++)
		{
			if (num < 10)
			{
				break;
			}
			if (!WorldGen.SolidTile(x, num))
			{
				break;
			}
			num--;
		}
		for (int k = 0; k < 20; k++)
		{
			if (num > Main.maxTilesY - 10)
			{
				break;
			}
			if (WorldGen.ActiveAndWalkableTile(x, num))
			{
				break;
			}
			num++;
		}
		return num;
	}

	private void AI_123_Deerclops_Movement(bool haltMovement, bool goHome)
	{
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0203: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0218: Unknown result type (might be due to invalid IL or missing references)
		//IL_0223: Unknown result type (might be due to invalid IL or missing references)
		//IL_022a: Unknown result type (might be due to invalid IL or missing references)
		//IL_023b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0254: Unknown result type (might be due to invalid IL or missing references)
		//IL_0263: Unknown result type (might be due to invalid IL or missing references)
		//IL_0274: Unknown result type (might be due to invalid IL or missing references)
		//IL_0285: Unknown result type (might be due to invalid IL or missing references)
		//IL_028a: Unknown result type (might be due to invalid IL or missing references)
		float num = (float)life / (float)lifeMax;
		float num6 = 1f - num;
		float num7 = 3.5f + 1f * num6;
		float num8 = 4f;
		float num9 = -0.4f;
		float min = -8f;
		float num10 = 0.4f;
		Rectangle rectangle = GetTargetData().Hitbox;
		if (goHome)
		{
			((Rectangle)(ref rectangle))._002Ector(homeTileX * 16, homeTileY * 16, 16, 16);
			if (Distance(((Rectangle)(ref rectangle)).Center.ToVector2()) < 240f)
			{
				rectangle.X = (int)(base.Center.X + (float)(160 * direction));
			}
		}
		float num11 = (float)((Rectangle)(ref rectangle)).Center.X - base.Center.X;
		float num13 = Math.Abs(num11);
		if (goHome && num11 != 0f)
		{
			direction = (spriteDirection = Math.Sign(num11));
		}
		bool flag = num13 < 80f;
		bool flag2 = flag || haltMovement;
		if (ai[0] == -1f)
		{
			num11 = 5f;
			num7 = 5.35f;
			flag2 = false;
		}
		if (flag2)
		{
			velocity.X *= 0.9f;
			if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
			{
				velocity.X = 0f;
			}
		}
		else
		{
			int num12 = Math.Sign(num11);
			velocity.X = MathHelper.Lerp(velocity.X, (float)num12 * num7, 1f / num8);
		}
		int num2 = 40;
		int num3 = 20;
		int num4 = 0;
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector(base.Center.X - (float)(num2 / 2), position.Y + (float)height - (float)num3 + (float)num4);
		bool num14 = vector.X < (float)rectangle.X && vector.X + (float)width > (float)(rectangle.X + rectangle.Width);
		bool flag3 = vector.Y + (float)num3 < (float)(rectangle.Y + rectangle.Height - 16);
		bool acceptTopSurfaces = base.Bottom.Y >= (float)((Rectangle)(ref rectangle)).Top;
		bool flag4 = Collision.SolidCollision(vector, num2, num3, acceptTopSurfaces);
		bool flag5 = Collision.SolidCollision(vector, num2, num3 - 4, acceptTopSurfaces);
		bool flag6 = !Collision.SolidCollision(vector + new Vector2((float)(num2 * direction), 0f), 16, 80, acceptTopSurfaces);
		float num5 = 8f;
		if (flag4 || flag5)
		{
			localAI[0] = 0f;
		}
		if ((num14 || flag) && flag3)
		{
			velocity.Y = MathHelper.Clamp(velocity.Y + num10 * 2f, 0.001f, 16f);
		}
		else if (flag4 && !flag5)
		{
			velocity.Y = 0f;
		}
		else if (flag4)
		{
			velocity.Y = MathHelper.Clamp(velocity.Y + num9, min, 0f);
		}
		else if (velocity.Y == 0f && flag6)
		{
			velocity.Y = 0f - num5;
			localAI[0] = 1f;
		}
		else
		{
			velocity.Y = MathHelper.Clamp(velocity.Y + num10, 0f - num5, 16f);
		}
	}

	private void AI_124_DeerclopsLeg()
	{
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_0113: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0208: Unknown result type (might be due to invalid IL or missing references)
		//IL_020d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0212: Unknown result type (might be due to invalid IL or missing references)
		//IL_021b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0231: Unknown result type (might be due to invalid IL or missing references)
		//IL_0238: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0265: Unknown result type (might be due to invalid IL or missing references)
		//IL_0279: Unknown result type (might be due to invalid IL or missing references)
		//IL_0281: Unknown result type (might be due to invalid IL or missing references)
		int num = (int)ai[0];
		if (num < 0 || num > 200)
		{
			active = false;
			if (Main.netMode != 1)
			{
				NetMessage.SendData(23, -1, -1, null, whoAmI);
			}
			return;
		}
		NPC nPC = Main.npc[num];
		if (!nPC.active || nPC.type != 668)
		{
			active = false;
			if (Main.netMode != 1)
			{
				NetMessage.SendData(23, -1, -1, null, whoAmI);
			}
			return;
		}
		NPCAimedTarget targetData = nPC.GetTargetData();
		Vector2 vector = targetData.Center - base.Center;
		float num10 = targetData.Center.X - (float)(width / 2);
		int num4 = Math.Sign(num10 - position.X);
		float val = Math.Abs(num10 - position.X);
		float num5 = Math.Min(50f, val);
		float num11 = num10 + (float)(-num4) * num5;
		Math.Abs(vector.X);
		if (Math.Abs(num11 - base.Center.X) >= 30f && localAI[0] == 0f)
		{
			localAI[0] = 1f;
		}
		float num6 = 4f;
		float num7 = 30f;
		if (localAI[0] < 0f)
		{
			localAI[0] += 1f;
		}
		if (localAI[0] > 0f)
		{
			localAI[0] += 1f;
			if (localAI[0] >= num7)
			{
				localAI[0] = 0f - num6;
			}
		}
		int num8 = ((ai[1] != 0f) ? 1 : (-1));
		if (localAI[0] > 0f)
		{
			Vector2 vector2 = default(Vector2);
			((Vector2)(ref vector2))._002Ector((float)(num8 * 14), -20f);
			Vector2 searchStartPositionInWorld = nPC.Bottom + vector2 + new Vector2(0f, 30f);
			int searchRange = 16;
			int tilesTraveled = 0;
			float? num9 = TryFindingFloor(searchStartPositionInWorld, searchRange, out tilesTraveled);
			float amount = 1f / 3f;
			Vector2 value = default(Vector2);
			((Vector2)(ref value))._002Ector(searchStartPositionInWorld.X, searchStartPositionInWorld.Y + 100f);
			float num2 = localAI[0] / num7;
			if (num9.HasValue && tilesTraveled > 2)
			{
				new Vector2(searchStartPositionInWorld.X, num9.Value * 16f);
				((Vector2)(ref value))._002Ector(searchStartPositionInWorld.X, num9.Value * 16f);
				amount = num2;
			}
			value.Y -= (1f - num2) * 30f;
			Vector2 bottom = Vector2.Lerp(base.Bottom, value, amount);
			base.Bottom = bottom;
		}
		int num3 = num8;
		if (Math.Abs(vector.X) > 30f)
		{
			num3 = Math.Sign(vector.X);
		}
		spriteDirection = -num3;
	}

	private static float? TryFindingFloor(Vector2 searchStartPositionInWorld, int searchRange, out int tilesTraveled)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		Point point = searchStartPositionInWorld.ToTileCoordinates();
		int x = point.X;
		for (int i = point.Y; i < point.Y + searchRange; i++)
		{
			if (Main.tile[x, i] == null)
			{
				Main.tile[x, i] = default(Tile);
			}
			if (Main.tile[x, i].nactive() && Main.tileSolid[Main.tile[x, i].type])
			{
				tilesTraveled = i - point.Y;
				return i;
			}
		}
		tilesTraveled = 0;
		return null;
	}

	private void AI_87_BigMimic_FireStuffCannonBurst()
	{
		int num = 10;
		for (int i = 0; i < num; i++)
		{
			int itemID = ItemID.Sets.ItemsForStuffCannon[Main.rand.Next(ItemID.Sets.ItemsForStuffCannon.Length)];
			AI_87_BigMimic_ShootItem(itemID);
		}
	}

	private void AI_87_BigMimic_ShootItem(int itemID)
	{
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		int num = Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, itemID, 1, noBroadcast: false, -1, noGrabDelay: true);
		float num5 = Main.rand.Next(10, 26);
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
		Vector2 val = Main.player[target].Center - new Vector2(0f, 120f);
		float num2 = val.X - vector.X;
		float num3 = val.Y - vector.Y;
		num2 += (float)Main.rand.Next(-50, 51) * 0.1f;
		num3 += (float)Main.rand.Next(-50, 51) * 0.1f;
		float num4 = (float)Math.Sqrt(num2 * num2 + num3 * num3);
		num4 = num5 / num4;
		num2 *= num4;
		num3 *= num4;
		num2 += (float)Main.rand.Next(-50, 51) * 0.1f;
		num3 += (float)Main.rand.Next(-50, 51) * 0.1f;
		Main.item[num].velocity.X = num2;
		Main.item[num].velocity.Y = num3;
		Main.item[num].noGrabDelay = 100;
		if (Main.netMode != 0)
		{
			NetMessage.SendData(21, -1, -1, null, num);
		}
	}

	public void AI_122_PirateGhost()
	{
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0144: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0165: Unknown result type (might be due to invalid IL or missing references)
		//IL_016a: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0172: Unknown result type (might be due to invalid IL or missing references)
		//IL_0173: Unknown result type (might be due to invalid IL or missing references)
		//IL_0178: Unknown result type (might be due to invalid IL or missing references)
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		if (localAI[0] == 0f)
		{
			localAI[0] = 1f;
			SoundEngine.PlaySound(in SoundID.NPCHit6, position);
		}
		NPCAimedTarget targetData = GetTargetData();
		if (targetData.Invalid)
		{
			TargetClosest();
			targetData = GetTargetData();
		}
		if (targetData.Invalid)
		{
			velocity *= 0.9f;
			alpha = Utils.Clamp(alpha + 5, 0, 255);
			if (alpha >= 255)
			{
				StrikeNPCNoInteraction(9999, 0f, 0);
			}
			return;
		}
		alpha = Utils.Clamp(alpha - 5, 0, 255);
		Vector2 targetPosition = Vector2.Zero.MoveTowards(targetData.Center - base.Center, 4f);
		velocity = velocity.MoveTowards(targetPosition, 2f / 15f);
		for (int i = 0; i < 200; i++)
		{
			if (Main.npc[i].active && Main.npc[i].type == type && i != whoAmI)
			{
				Vector2 vector = Main.npc[i].Center - base.Center;
				if (((Vector2)(ref vector)).Length() < 50f)
				{
					((Vector2)(ref vector)).Normalize();
					vector *= 0.1f;
					velocity -= vector;
					velocity.X -= vector.X * 1f;
				}
			}
		}
	}

	public void AI_000_TransformBoundNPC(int playerID, int npcType)
	{
		Transform(npcType);
		Main.BestiaryTracker.Chats.RegisterChatStartWith(this);
		Main.player[playerID].SetTalkNPC(whoAmI);
		if (Main.netMode == 2)
		{
			NetMessage.SendData(40, -1, -1, null, playerID);
		}
	}

	private void AI_065_Butterflies()
	{
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_068a: Unknown result type (might be due to invalid IL or missing references)
		//IL_069b: Unknown result type (might be due to invalid IL or missing references)
		//IL_077e: Unknown result type (might be due to invalid IL or missing references)
		//IL_078f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0476: Unknown result type (might be due to invalid IL or missing references)
		//IL_048c: Unknown result type (might be due to invalid IL or missing references)
		//IL_088f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0894: Unknown result type (might be due to invalid IL or missing references)
		//IL_0912: Unknown result type (might be due to invalid IL or missing references)
		//IL_0916: Unknown result type (might be due to invalid IL or missing references)
		//IL_091b: Unknown result type (might be due to invalid IL or missing references)
		//IL_091d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0924: Unknown result type (might be due to invalid IL or missing references)
		//IL_0929: Unknown result type (might be due to invalid IL or missing references)
		//IL_092d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0932: Unknown result type (might be due to invalid IL or missing references)
		//IL_0934: Unknown result type (might be due to invalid IL or missing references)
		//IL_0939: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0206: Unknown result type (might be due to invalid IL or missing references)
		//IL_021d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0235: Unknown result type (might be due to invalid IL or missing references)
		//IL_023a: Unknown result type (might be due to invalid IL or missing references)
		//IL_023f: Unknown result type (might be due to invalid IL or missing references)
		//IL_024d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0262: Unknown result type (might be due to invalid IL or missing references)
		//IL_0267: Unknown result type (might be due to invalid IL or missing references)
		//IL_0275: Unknown result type (might be due to invalid IL or missing references)
		//IL_027b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0285: Unknown result type (might be due to invalid IL or missing references)
		//IL_028a: Unknown result type (might be due to invalid IL or missing references)
		//IL_028f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0952: Unknown result type (might be due to invalid IL or missing references)
		//IL_0957: Unknown result type (might be due to invalid IL or missing references)
		//IL_095c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0966: Unknown result type (might be due to invalid IL or missing references)
		//IL_096b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0322: Unknown result type (might be due to invalid IL or missing references)
		//IL_032c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0331: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a31: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a37: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a41: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a47: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a56: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0add: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aed: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a87: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad6: Unknown result type (might be due to invalid IL or missing references)
		float num = ai[0];
		float num12 = ai[1];
		Color newColor2;
		if (type == 661)
		{
			newColor2 = Main.hslToRgb(Main.GlobalTimeWrappedHourly * 0.33f % 1f, 1f, 0.5f);
			Vector3 rgb = ((Color)(ref newColor2)).ToVector3() * 0.3f;
			rgb += Vector3.One * 0.1f;
			Lighting.AddLight(base.Center, rgb);
			int num22 = 60;
			bool flag = false;
			int num28 = 50;
			NPCAimedTarget targetData = GetTargetData();
			if (targetData.Invalid || targetData.Center.Distance(base.Center) >= 300f)
			{
				flag = true;
			}
			if (!Main.remixWorld && !targetData.Invalid && targetData.Type == NPCTargetType.Player && !Main.player[target].ZoneHallow)
			{
				num28 = num22;
				flag = true;
			}
			ai[2] = MathHelper.Clamp(ai[2] + (float)flag.ToDirectionInt(), 0f, (float)num28);
			if (ai[2] >= (float)num22)
			{
				active = false;
				if (Main.netMode != 1)
				{
					NetMessage.SendData(23, -1, -1, null, whoAmI);
				}
				return;
			}
			Opacity = Utils.GetLerpValue(num22, (float)num28 / 2f, ai[2], clamped: true);
			if (ai[2] > 0f)
			{
				int num29 = 1;
				for (int i = 0; i < num29; i++)
				{
					if (Main.rand.Next(5) == 0)
					{
						float num30 = MathHelper.Lerp(0.9f, 0.6f, Opacity);
						Color newColor = Main.hslToRgb(Main.GlobalTimeWrappedHourly * 0.3f % 1f, 1f, 0.5f) * 0.5f;
						int num31 = Dust.NewDust(position, width, height, 267, 0f, 0f, 0, newColor);
						Main.dust[num31].position = base.Center + Main.rand.NextVector2Circular(width, height);
						Dust obj = Main.dust[num31];
						obj.velocity *= Main.rand.NextFloat() * 0.8f;
						Dust obj2 = Main.dust[num31];
						obj2.velocity += velocity * 0.6f;
						Main.dust[num31].noGravity = true;
						Main.dust[num31].fadeIn = 0.6f + Main.rand.NextFloat() * 0.7f * num30;
						Main.dust[num31].scale = 0.35f;
						if (num31 != 6000)
						{
							Dust dust = Dust.CloneDust(num31);
							dust.scale /= 2f;
							dust.fadeIn *= 0.85f;
							dust.color = new Color(255, 255, 255, 255) * 0.5f;
						}
					}
				}
			}
			dontTakeDamage = ai[2] >= (float)(num28 / 2);
		}
		if (Main.netMode != 1)
		{
			if (ai[2] == 0f && type != 661)
			{
				int num32 = 0;
				int num33 = 4;
				int num2 = 6;
				int num3 = 3;
				int num4 = 7;
				int num5 = 2;
				int num6 = 1;
				int num7 = 5;
				int num8 = Main.rand.Next(100);
				num8 = ((num8 == 0) ? num7 : ((num8 < 3) ? num6 : ((num8 < 9) ? num5 : ((num8 < 19) ? num4 : ((num8 < 34) ? num3 : ((num8 < 53) ? num2 : ((num8 >= 75) ? num32 : num33)))))));
				ai[2] = 1 + num8;
			}
			if (ai[3] == 0f)
			{
				ai[3] = (float)Main.rand.Next(75, 111) * 0.01f;
			}
			localAI[0] -= 1f;
			if (localAI[0] <= 0f)
			{
				localAI[0] = Main.rand.Next(90, 240);
				TargetClosest();
				float num9 = Math.Abs(base.Center.X - Main.player[target].Center.X);
				if (num9 > 700f && localAI[3] == 0f)
				{
					float num10 = (float)Main.rand.Next(50, 151) * 0.01f;
					if (num9 > 1000f)
					{
						num10 = (float)Main.rand.Next(150, 201) * 0.01f;
					}
					else if (num9 > 850f)
					{
						num10 = (float)Main.rand.Next(100, 151) * 0.01f;
					}
					int num11 = direction * Main.rand.Next(100, 251);
					int num13 = Main.rand.Next(-50, 51);
					if (position.Y > Main.player[target].position.Y - 100f)
					{
						num13 -= Main.rand.Next(100, 251);
					}
					float num14 = num10 / (float)Math.Sqrt(num11 * num11 + num13 * num13);
					num = (float)num11 * num14;
					num12 = (float)num13 * num14;
				}
				else
				{
					localAI[3] = 1f;
					float num34 = (float)Main.rand.Next(26, 301) * 0.01f;
					int num15 = Main.rand.Next(-100, 101);
					int num16 = Main.rand.Next(-100, 101);
					float num17 = num34 / (float)Math.Sqrt(num15 * num15 + num16 * num16);
					num = (float)num15 * num17;
					num12 = (float)num16 * num17;
				}
				netUpdate = true;
			}
		}
		scale = ai[3];
		int num18 = 60;
		velocity.X = (velocity.X * (float)(num18 - 1) + num) / (float)num18;
		velocity.Y = (velocity.Y * (float)(num18 - 1) + num12) / (float)num18;
		if (velocity.Y > 0f)
		{
			int num19 = 3;
			int num20 = (int)base.Center.X / 16;
			int num21 = (int)base.Center.Y / 16;
			for (int j = num21; j < num21 + num19; j++)
			{
				if (Main.tile[num20, j] != null && ((Main.tile[num20, j].nactive() && Main.tileSolid[Main.tile[num20, j].type]) || Main.tile[num20, j].liquid > 0))
				{
					num12 *= -1f;
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.9f;
					}
				}
			}
		}
		if (velocity.Y < 0f)
		{
			int num23 = 30;
			bool flag2 = false;
			int num24 = (int)base.Center.X / 16;
			int num25 = (int)base.Center.Y / 16;
			for (int k = num25; k < num25 + num23; k++)
			{
				if (Main.tile[num24, k] != null && Main.tile[num24, k].nactive() && Main.tileSolid[Main.tile[num24, k].type])
				{
					flag2 = true;
				}
			}
			if (!flag2)
			{
				num12 *= -1f;
				if (velocity.Y < 0f)
				{
					velocity.Y *= 0.9f;
				}
			}
		}
		if (localAI[1] > 0f)
		{
			localAI[1] -= 1f;
		}
		else
		{
			localAI[1] = 15f;
			if (type == 661)
			{
				localAI[1] = 10f;
			}
			float num26 = 0f;
			Vector2 zero = Vector2.Zero;
			for (int l = 0; l < 200; l++)
			{
				NPC nPC = Main.npc[l];
				if (nPC.active && nPC.damage > 0 && !nPC.friendly && nPC.Hitbox.Distance(base.Center) <= 100f)
				{
					num26 += 1f;
					zero += DirectionFrom(nPC.Center);
				}
			}
			if (num26 > 0f)
			{
				zero /= num26;
				zero *= 2f;
				velocity += zero;
				if (((Vector2)(ref velocity)).Length() > 16f)
				{
					velocity = velocity.SafeNormalize(Vector2.Zero) * 16f;
				}
			}
		}
		if (collideX)
		{
			num = ((!(velocity.X < 0f)) ? (0f - Math.Abs(num)) : Math.Abs(num));
			velocity.X *= -0.2f;
		}
		if (velocity.X < 0f)
		{
			direction = -1;
		}
		if (velocity.X > 0f)
		{
			direction = 1;
		}
		ai[0] = num;
		ai[1] = num12;
		if (type == 356)
		{
			catchItem = (short)(1994f + ai[2] - 1f);
		}
		if (type == 653)
		{
			position += netOffset;
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.6f, 0.3f, 0.1f);
			if (Main.rand.Next(60) == 0)
			{
				Vector2 val = position;
				int num35 = width;
				int num36 = height;
				newColor2 = default(Color);
				int num27 = Dust.NewDust(val, num35, num36, 6, 0f, 0f, 254, newColor2);
				Dust obj3 = Main.dust[num27];
				obj3.velocity *= 0f;
			}
			position -= netOffset;
		}
	}

	public static Color AI_121_QueenSlime_GetDustColor()
	{
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		Color val = new Color(0, 160, 255);
		Color val2 = default(Color);
		((Color)(ref val2))._002Ector(255, 80, 255);
		Color value3 = Color.Lerp(new Color(200, 200, 200), val2, Main.rand.NextFloat());
		return Color.Lerp(val, value3, Main.rand.NextFloat());
	}

	private void AI_121_QueenSlime_FlyMovement()
	{
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		//IL_014e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0154: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_021d: Unknown result type (might be due to invalid IL or missing references)
		//IL_021f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0224: Unknown result type (might be due to invalid IL or missing references)
		//IL_0206: Unknown result type (might be due to invalid IL or missing references)
		//IL_020e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0213: Unknown result type (might be due to invalid IL or missing references)
		//IL_0226: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cf: Unknown result type (might be due to invalid IL or missing references)
		noTileCollide = true;
		noGravity = true;
		float num = 12f;
		float num2 = 0.085f;
		float num3 = 250f;
		TargetClosest();
		Vector2 desiredVelocity = base.Center;
		if (timeLeft > 10)
		{
			if (!Collision.CanHit(this, Main.player[target]))
			{
				bool flag = false;
				Vector2 center = Main.player[target].Center;
				for (int i = 0; i < 16; i++)
				{
					float num4 = 16 * i;
					Point point = (center + new Vector2(0f, 0f - num4)).ToTileCoordinates();
					if (WorldGen.SolidOrSlopedTile(point.X, point.Y))
					{
						desiredVelocity = center + new Vector2(0f, 0f - num4 + 16f) - base.Center;
						flag = true;
						break;
					}
				}
				if (!flag)
				{
					desiredVelocity = center - base.Center;
				}
			}
			else
			{
				desiredVelocity = Main.player[target].Center + new Vector2(0f, 0f - num3) - base.Center;
			}
		}
		else
		{
			desiredVelocity = base.Center + new Vector2(500f * (float)direction, 0f - num3) - base.Center;
		}
		float num5 = ((Vector2)(ref desiredVelocity)).Length();
		if (Math.Abs(desiredVelocity.X) < 40f)
		{
			desiredVelocity.X = velocity.X;
		}
		float num6 = num - 2f;
		if (num5 > 100f && ((velocity.X < 0f - num6 && desiredVelocity.X > 0f) || (velocity.X > num6 && desiredVelocity.X < 0f)))
		{
			num2 *= 2f;
		}
		if (num5 < 40f)
		{
			desiredVelocity = velocity;
		}
		else if (num5 < 80f)
		{
			((Vector2)(ref desiredVelocity)).Normalize();
			desiredVelocity *= num * 0.65f;
		}
		else
		{
			((Vector2)(ref desiredVelocity)).Normalize();
			desiredVelocity *= num;
		}
		SimpleFlyMovement(desiredVelocity, num2);
		rotation = velocity.X * 0.1f;
		if (rotation > 0.5f)
		{
			rotation = 0.5f;
		}
		if (rotation < -0.5f)
		{
			rotation = -0.5f;
		}
	}

	private void AI_121_QueenSlime()
	{
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0136: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0534: Unknown result type (might be due to invalid IL or missing references)
		//IL_0547: Unknown result type (might be due to invalid IL or missing references)
		//IL_0556: Unknown result type (might be due to invalid IL or missing references)
		//IL_056c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0201: Unknown result type (might be due to invalid IL or missing references)
		//IL_0206: Unknown result type (might be due to invalid IL or missing references)
		//IL_020b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0219: Unknown result type (might be due to invalid IL or missing references)
		//IL_021f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0224: Unknown result type (might be due to invalid IL or missing references)
		//IL_0229: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a04: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b30: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b35: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a20: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a81: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a90: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b78: Unknown result type (might be due to invalid IL or missing references)
		//IL_1496: Unknown result type (might be due to invalid IL or missing references)
		//IL_149b: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bda: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1092: Unknown result type (might be due to invalid IL or missing references)
		//IL_101a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1026: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0502: Unknown result type (might be due to invalid IL or missing references)
		//IL_050b: Unknown result type (might be due to invalid IL or missing references)
		//IL_051a: Unknown result type (might be due to invalid IL or missing references)
		//IL_028e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0298: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1503: Unknown result type (might be due to invalid IL or missing references)
		//IL_1506: Unknown result type (might be due to invalid IL or missing references)
		//IL_150b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1510: Unknown result type (might be due to invalid IL or missing references)
		//IL_1517: Unknown result type (might be due to invalid IL or missing references)
		//IL_151c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1521: Unknown result type (might be due to invalid IL or missing references)
		//IL_1526: Unknown result type (might be due to invalid IL or missing references)
		//IL_152d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1537: Unknown result type (might be due to invalid IL or missing references)
		//IL_153c: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_14bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1043: Unknown result type (might be due to invalid IL or missing references)
		//IL_1744: Unknown result type (might be due to invalid IL or missing references)
		//IL_1752: Unknown result type (might be due to invalid IL or missing references)
		//IL_1757: Unknown result type (might be due to invalid IL or missing references)
		//IL_175c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0307: Unknown result type (might be due to invalid IL or missing references)
		//IL_02da: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c05: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c37: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c66: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_14d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_14de: Unknown result type (might be due to invalid IL or missing references)
		//IL_177a: Unknown result type (might be due to invalid IL or missing references)
		//IL_177d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1782: Unknown result type (might be due to invalid IL or missing references)
		//IL_1787: Unknown result type (might be due to invalid IL or missing references)
		//IL_1789: Unknown result type (might be due to invalid IL or missing references)
		//IL_178b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1790: Unknown result type (might be due to invalid IL or missing references)
		//IL_179a: Unknown result type (might be due to invalid IL or missing references)
		//IL_179f: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_17ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_17d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_17d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_17ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1801: Unknown result type (might be due to invalid IL or missing references)
		//IL_1762: Unknown result type (might be due to invalid IL or missing references)
		//IL_176e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1773: Unknown result type (might be due to invalid IL or missing references)
		//IL_1778: Unknown result type (might be due to invalid IL or missing references)
		//IL_0315: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_11de: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1203: Unknown result type (might be due to invalid IL or missing references)
		//IL_121c: Unknown result type (might be due to invalid IL or missing references)
		//IL_121e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1102: Unknown result type (might be due to invalid IL or missing references)
		//IL_1129: Unknown result type (might be due to invalid IL or missing references)
		//IL_1607: Unknown result type (might be due to invalid IL or missing references)
		//IL_1618: Unknown result type (might be due to invalid IL or missing references)
		//IL_161d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1622: Unknown result type (might be due to invalid IL or missing references)
		//IL_162b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1636: Unknown result type (might be due to invalid IL or missing references)
		//IL_1640: Unknown result type (might be due to invalid IL or missing references)
		//IL_1647: Unknown result type (might be due to invalid IL or missing references)
		//IL_0323: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0331: Unknown result type (might be due to invalid IL or missing references)
		//IL_047f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0492: Unknown result type (might be due to invalid IL or missing references)
		//IL_0897: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_08bb: Unknown result type (might be due to invalid IL or missing references)
		int num = 30;
		int num11 = 40;
		_ = Main.expertMode;
		float num22 = 1f;
		bool flag = false;
		bool flag2 = life <= lifeMax / 2;
		if (localAI[0] == 0f)
		{
			ai[1] = -100f;
			localAI[0] = lifeMax;
			TargetClosest();
			netUpdate = true;
		}
		Lighting.AddLight(base.Center, 1f, 0.7f, 0.9f);
		int num27 = 500;
		if (Main.player[target].dead || Math.Abs(base.Center.X - Main.player[target].Center.X) / 16f > (float)num27)
		{
			TargetClosest();
			if (Main.player[target].dead || Math.Abs(base.Center.X - Main.player[target].Center.X) / 16f > (float)num27)
			{
				EncourageDespawn(10);
				if (Main.player[target].Center.X < base.Center.X)
				{
					direction = 1;
				}
				else
				{
					direction = -1;
				}
			}
		}
		if (!Main.player[target].dead && timeLeft > 10 && !flag2 && ai[3] >= 300f && ai[0] == 0f && velocity.Y == 0f)
		{
			ai[0] = 2f;
			ai[1] = 0f;
			if (Main.netMode != 1)
			{
				netUpdate = true;
				TargetClosest(faceTarget: false);
				Point point = base.Center.ToTileCoordinates();
				Point point2 = Main.player[target].Center.ToTileCoordinates();
				Vector2 vector = Main.player[target].Center - base.Center;
				int num28 = 10;
				int num29 = 0;
				int num30 = 7;
				int num31 = 0;
				bool flag3 = false;
				if (ai[3] >= 360f || ((Vector2)(ref vector)).Length() > 2000f)
				{
					if (ai[3] > 360f)
					{
						ai[3] = 360f;
					}
					flag3 = true;
					num31 = 100;
				}
				while (!flag3 && num31 < 100)
				{
					num31++;
					int num32 = Main.rand.Next(point2.X - num28, point2.X + num28 + 1);
					int num2 = Main.rand.Next(point2.Y - num28, point2.Y + 1);
					if ((num2 >= point2.Y - num30 && num2 <= point2.Y + num30 && num32 >= point2.X - num30 && num32 <= point2.X + num30) || (num2 >= point.Y - num29 && num2 <= point.Y + num29 && num32 >= point.X - num29 && num32 <= point.X + num29) || Main.tile[num32, num2].nactive())
					{
						continue;
					}
					int num3 = num2;
					int i = 0;
					if (Main.tile[num32, num3].nactive() && Main.tileSolid[Main.tile[num32, num3].type] && !Main.tileSolidTop[Main.tile[num32, num3].type])
					{
						i = 1;
					}
					else
					{
						for (; i < 150 && num3 + i < Main.maxTilesY; i++)
						{
							int num4 = num3 + i;
							if (Main.tile[num32, num4].nactive() && Main.tileSolid[Main.tile[num32, num4].type] && !Main.tileSolidTop[Main.tile[num32, num4].type])
							{
								i--;
								break;
							}
						}
					}
					num2 += i;
					bool flag4 = true;
					if (flag4 && Main.tile[num32, num2].lava())
					{
						flag4 = false;
					}
					if (flag4 && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
					{
						flag4 = false;
					}
					if (flag4)
					{
						localAI[1] = num32 * 16 + 8;
						localAI[2] = num2 * 16 + 16;
						flag3 = true;
						break;
					}
				}
				if (num31 >= 100)
				{
					Vector2 bottom = Main.player[Player.FindClosest(position, width, height)].Bottom;
					localAI[1] = bottom.X;
					localAI[2] = bottom.Y;
					ai[3] = 0f;
				}
			}
		}
		if (!flag2 && (!Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0) || Math.Abs(base.Top.Y - Main.player[target].Bottom.Y) > 320f))
		{
			ai[3] += 1.5f;
		}
		else
		{
			float num5 = ai[3];
			ai[3] -= 1f;
			if (ai[3] < 0f)
			{
				if (Main.netMode != 1 && num5 > 0f)
				{
					netUpdate = true;
				}
				ai[3] = 0f;
			}
		}
		if (timeLeft <= 10 && ((flag2 && ai[0] != 0f) || (!flag2 && ai[0] != 3f)))
		{
			if (flag2)
			{
				ai[0] = 0f;
			}
			else
			{
				ai[0] = 3f;
			}
			ai[1] = 0f;
			ai[2] = 0f;
			ai[3] = 0f;
			netUpdate = true;
		}
		noTileCollide = false;
		noGravity = false;
		if (flag2)
		{
			localAI[3] += 1f;
			if (localAI[3] >= 24f)
			{
				localAI[3] = 0f;
			}
			if (ai[0] == 4f && ai[2] == 1f)
			{
				localAI[3] = 6f;
			}
			if (ai[0] == 5f && ai[2] != 1f)
			{
				localAI[3] = 7f;
			}
		}
		switch ((int)ai[0])
		{
		case 0:
		{
			if (flag2)
			{
				AI_121_QueenSlime_FlyMovement();
			}
			else
			{
				noTileCollide = false;
				noGravity = false;
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.8f;
					if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
					{
						velocity.X = 0f;
					}
				}
			}
			if (timeLeft <= 10 || (!flag2 && velocity.Y != 0f))
			{
				break;
			}
			ai[1] += 1f;
			int num10 = 60;
			if (flag2)
			{
				num10 = 120;
			}
			if (!(ai[1] > (float)num10))
			{
				break;
			}
			ai[1] = 0f;
			if (flag2)
			{
				Player player = Main.player[target];
				if (Main.rand.Next(2) != 1)
				{
					ai[0] = 4f;
				}
				else
				{
					ai[0] = 5f;
				}
				if (ai[0] == 4f)
				{
					ai[2] = 1f;
					if (player != null && player.active && !player.dead && (player.Bottom.Y < base.Bottom.Y || Math.Abs(player.Center.X - base.Center.X) > 250f))
					{
						ai[0] = 5f;
						ai[2] = 0f;
					}
				}
			}
			else
			{
				switch (Main.rand.Next(3))
				{
				default:
					ai[0] = 3f;
					break;
				case 1:
					ai[0] = 4f;
					break;
				case 2:
					ai[0] = 5f;
					break;
				}
			}
			netUpdate = true;
			break;
		}
		case 1:
		{
			rotation = 0f;
			ai[1] += 1f;
			num22 = MathHelper.Clamp(ai[1] / 30f, 0f, 1f);
			num22 = 0.5f + num22 * 0.5f;
			if (ai[1] >= 30f && Main.netMode != 1)
			{
				ai[0] = 0f;
				ai[1] = 0f;
				netUpdate = true;
				TargetClosest();
			}
			if (Main.netMode == 1 && ai[1] >= 60f)
			{
				ai[0] = 0f;
				ai[1] = 0f;
				TargetClosest();
			}
			Color newColor2 = AI_121_QueenSlime_GetDustColor();
			((Color)(ref newColor2)).A = 150;
			for (int num19 = 0; num19 < 10; num19++)
			{
				int num20 = Dust.NewDust(position + Vector2.UnitX * -20f, width + 40, height, 4, velocity.X, velocity.Y, 50, newColor2, 1.5f);
				Main.dust[num20].noGravity = true;
				Dust obj2 = Main.dust[num20];
				obj2.velocity *= 2f;
			}
			break;
		}
		case 2:
			rotation = 0f;
			ai[1] += 1f;
			num22 = MathHelper.Clamp((60f - ai[1]) / 60f, 0f, 1f);
			num22 = 0.5f + num22 * 0.5f;
			if (ai[1] >= 60f)
			{
				flag = true;
			}
			if (ai[1] == 60f)
			{
				Gore.NewGore(base.Center + new Vector2(-40f, (float)(-height / 2)), velocity, 1258);
			}
			if (ai[1] >= 60f && Main.netMode != 1)
			{
				base.Bottom = new Vector2(localAI[1], localAI[2]);
				ai[0] = 1f;
				ai[1] = 0f;
				netUpdate = true;
			}
			if (Main.netMode == 1 && ai[1] >= 120f)
			{
				ai[0] = 1f;
				ai[1] = 0f;
			}
			if (!flag)
			{
				Color newColor = AI_121_QueenSlime_GetDustColor();
				((Color)(ref newColor)).A = 150;
				for (int n = 0; n < 10; n++)
				{
					int num18 = Dust.NewDust(position + Vector2.UnitX * -20f, width + 40, height, 4, velocity.X, velocity.Y, 50, newColor, 1.5f);
					Main.dust[num18].noGravity = true;
					Dust obj = Main.dust[num18];
					obj.velocity *= 0.5f;
				}
			}
			break;
		case 3:
			rotation = 0f;
			if (velocity.Y == 0f)
			{
				velocity.X *= 0.8f;
				if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
				{
					velocity.X = 0f;
				}
				ai[1] += 4f;
				if ((double)life < (double)lifeMax * 0.66)
				{
					ai[1] += 4f;
				}
				if ((double)life < (double)lifeMax * 0.33)
				{
					ai[1] += 4f;
				}
				if (!(ai[1] >= 0f))
				{
					break;
				}
				netUpdate = true;
				TargetClosest();
				if (ai[2] == 3f)
				{
					velocity.Y = -13f;
					velocity.X += 3.5f * (float)direction;
					ai[1] = 0f;
					ai[2] = 0f;
					if (timeLeft > 10)
					{
						ai[0] = 0f;
					}
					else
					{
						ai[1] = -60f;
					}
				}
				else if (ai[2] == 2f)
				{
					velocity.Y = -6f;
					velocity.X += 4.5f * (float)direction;
					ai[1] = -40f;
					ai[2] += 1f;
				}
				else
				{
					velocity.Y = -8f;
					velocity.X += 4f * (float)direction;
					ai[1] = -40f;
					ai[2] += 1f;
				}
			}
			else
			{
				if (target >= 255)
				{
					break;
				}
				float num12 = 3f;
				if (Main.getGoodWorld)
				{
					num12 = 7f;
				}
				if ((direction == 1 && velocity.X < num12) || (direction == -1 && velocity.X > 0f - num12))
				{
					if ((direction == -1 && (double)velocity.X < 0.1) || (direction == 1 && (double)velocity.X > -0.1))
					{
						velocity.X += 0.2f * (float)direction;
					}
					else
					{
						velocity.X *= 0.93f;
					}
				}
			}
			break;
		case 4:
		{
			rotation *= 0.9f;
			noTileCollide = true;
			noGravity = true;
			if (ai[2] == 1f)
			{
				noTileCollide = false;
				noGravity = false;
				int num13 = 30;
				if (flag2)
				{
					num13 = 10;
				}
				if (Main.getGoodWorld)
				{
					num13 = 0;
				}
				Player player2 = Main.player[target];
				_ = base.Center;
				if (!player2.dead && player2.active && Math.Abs(base.Center.X - player2.Center.X) / 16f <= (float)num27)
				{
					_ = player2.Center;
				}
				if (velocity.Y == 0f)
				{
					ai[0] = 0f;
					ai[1] = 0f;
					ai[2] = 0f;
					netUpdate = true;
					SoundEngine.PlaySound(in SoundID.Item167, base.Center);
					if (Main.netMode != 1)
					{
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Bottom, Vector2.Zero, 922, num11, 0f, Main.myPlayer);
					}
					for (int l = 0; l < 20; l++)
					{
						int num14 = Dust.NewDust(base.Bottom - new Vector2((float)(width / 2), 30f), width, 30, 31, velocity.X, velocity.Y, 40, AI_121_QueenSlime_GetDustColor());
						Main.dust[num14].noGravity = true;
						Main.dust[num14].velocity.Y = -5f + Main.rand.NextFloat() * -3f;
						Main.dust[num14].velocity.X *= 7f;
					}
				}
				else if (ai[1] >= (float)num13)
				{
					for (int m = 0; m < 4; m++)
					{
						Vector2 vector3 = base.Bottom - new Vector2(Main.rand.NextFloatDirection() * 16f, (float)Main.rand.Next(8));
						int num15 = Dust.NewDust(vector3, 2, 2, 31, velocity.X, velocity.Y, 40, AI_121_QueenSlime_GetDustColor(), 1.4f);
						Main.dust[num15].position = vector3;
						Main.dust[num15].noGravity = true;
						Main.dust[num15].velocity.Y = velocity.Y * 0.9f;
						Main.dust[num15].velocity.X = ((Main.rand.Next(2) == 0) ? (-10f) : 10f) + Main.rand.NextFloatDirection() * 3f;
					}
				}
				velocity.X *= 0.8f;
				float num16 = ai[1];
				ai[1] += 1f;
				if (ai[1] >= (float)num13)
				{
					if (num16 < (float)num13)
					{
						netUpdate = true;
					}
					if (flag2 && ai[1] > (float)(num13 + 120))
					{
						ai[0] = 0f;
						ai[1] = 0f;
						ai[2] = 0f;
						velocity.Y *= 0.8f;
						netUpdate = true;
						break;
					}
					velocity.Y += 1f;
					float num17 = 14f;
					if (Main.getGoodWorld)
					{
						velocity.Y += 1f;
						num17 = 15.99f;
					}
					if (velocity.Y == 0f)
					{
						velocity.Y = 0.01f;
					}
					if (velocity.Y >= num17)
					{
						velocity.Y = num17;
					}
				}
				else
				{
					velocity.Y *= 0.8f;
				}
				break;
			}
			if (Main.netMode != 1 && ai[1] == 0f)
			{
				TargetClosest();
				netUpdate = true;
			}
			ai[1] += 1f;
			if (!(ai[1] >= 30f))
			{
				break;
			}
			if (ai[1] >= 60f)
			{
				ai[1] = 60f;
				if (Main.netMode != 1)
				{
					ai[1] = 0f;
					ai[2] = 1f;
					velocity.Y = -3f;
					netUpdate = true;
				}
			}
			Player player3 = Main.player[target];
			Vector2 center = base.Center;
			if (!player3.dead && player3.active && Math.Abs(base.Center.X - player3.Center.X) / 16f <= (float)num27)
			{
				center = player3.Center;
			}
			center.Y -= 384f;
			if (velocity.Y == 0f)
			{
				velocity = center - base.Center;
				velocity = velocity.SafeNormalize(Vector2.Zero);
				velocity *= 20f;
			}
			else
			{
				velocity.Y *= 0.95f;
			}
			break;
		}
		case 5:
		{
			rotation *= 0.9f;
			noTileCollide = true;
			noGravity = true;
			if (flag2)
			{
				ai[3] = 0f;
			}
			if (ai[2] == 1f)
			{
				ai[1] += 1f;
				if (!(ai[1] >= 10f))
				{
					break;
				}
				if (Main.netMode != 1)
				{
					int num6 = 10;
					if (Main.getGoodWorld)
					{
						num6 = 15;
					}
					int num7 = num6;
					if (!flag2)
					{
						num7 = 6;
					}
					Vector2 spinningpoint = default(Vector2);
					for (int j = 0; j < num7; j++)
					{
						((Vector2)(ref spinningpoint))._002Ector(9f, 0f);
						spinningpoint = spinningpoint.RotatedBy((float)(-j) * ((float)Math.PI * 2f) / (float)num6, Vector2.Zero);
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, spinningpoint.X, spinningpoint.Y, 926, num, 0f, Main.myPlayer);
					}
				}
				ai[0] = 0f;
				ai[1] = 0f;
				ai[2] = 0f;
				netUpdate = true;
				break;
			}
			if (Main.netMode != 1 && ai[1] == 0f)
			{
				TargetClosest();
				netUpdate = true;
			}
			ai[1] += 1f;
			if (ai[1] >= 50f)
			{
				ai[1] = 50f;
				if (Main.netMode != 1)
				{
					ai[1] = 0f;
					ai[2] = 1f;
					netUpdate = true;
				}
			}
			float num8 = 100f;
			for (int k = 0; k < 4; k++)
			{
				Vector2 vector2 = base.Center + Main.rand.NextVector2CircularEdge(num8, num8);
				if (!flag2)
				{
					vector2 += new Vector2(0f, 20f);
				}
				Vector2 v = vector2 - base.Center;
				v = v.SafeNormalize(Vector2.Zero) * -8f;
				int num9 = Dust.NewDust(vector2, 2, 2, 31, v.X, v.Y, 40, AI_121_QueenSlime_GetDustColor(), 1.8f);
				Main.dust[num9].position = vector2;
				Main.dust[num9].noGravity = true;
				Main.dust[num9].alpha = 250;
				Main.dust[num9].velocity = v;
				Main.dust[num9].customData = this;
			}
			if (flag2)
			{
				AI_121_QueenSlime_FlyMovement();
			}
			break;
		}
		}
		dontTakeDamage = (hide = flag);
		if (num22 != scale)
		{
			position.X += width / 2;
			position.Y += height;
			scale = num22;
			width = (int)(114f * scale);
			height = (int)(100f * scale);
			position.X -= width / 2;
			position.Y -= height;
		}
		if (life <= 0)
		{
			return;
		}
		if (Main.rand.Next(360) == 0)
		{
			SoundEngine.PlaySound(65, position);
		}
		if (Main.netMode == 1)
		{
			return;
		}
		if (localAI[0] >= (float)(lifeMax / 2) && life < lifeMax / 2)
		{
			localAI[0] = life;
			ai[0] = 0f;
			ai[1] = 0f;
			ai[2] = 0f;
			netUpdate = true;
		}
		int num21 = (int)((float)lifeMax * 0.02f);
		if (flag2)
		{
			num21 = (int)((float)lifeMax * 0.015f);
		}
		if (!((float)(life + num21) < localAI[0]))
		{
			return;
		}
		localAI[0] = life;
		int num23 = Main.rand.Next(1, 3);
		for (int num24 = 0; num24 < num23; num24++)
		{
			int x = (int)(position.X + (float)Main.rand.Next(width - 32));
			int y = (int)(position.Y + (float)Main.rand.Next(height - 32));
			int num25 = 658;
			switch (Main.rand.Next(3))
			{
			case 0:
				num25 = 658;
				break;
			case 1:
				num25 = 659;
				break;
			case 2:
				num25 = 660;
				break;
			}
			int num26 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), x, y, num25);
			Main.npc[num26].SetDefaults(num25);
			Main.npc[num26].velocity.X = (float)Main.rand.Next(-15, 16) * 0.1f;
			Main.npc[num26].velocity.Y = (float)Main.rand.Next(-30, 1) * 0.1f;
			Main.npc[num26].ai[0] = -500 * Main.rand.Next(3);
			Main.npc[num26].ai[1] = 0f;
			if (Main.netMode == 2 && num26 < 200)
			{
				NetMessage.SendData(23, -1, -1, null, num26);
			}
		}
	}

	public bool AI_120_HallowBoss_IsInPhase2()
	{
		if (ai[3] != 1f)
		{
			return ai[3] == 3f;
		}
		return true;
	}

	public bool AI_120_HallowBoss_IsGenuinelyEnraged()
	{
		if (ai[3] != 2f)
		{
			return ai[3] == 3f;
		}
		return true;
	}

	private void AI_120_HallowBoss_DoMagicEffect(Vector2 spot, int effectType, float progress)
	{
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01be: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_023d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0242: Unknown result type (might be due to invalid IL or missing references)
		//IL_030b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0310: Unknown result type (might be due to invalid IL or missing references)
		//IL_0338: Unknown result type (might be due to invalid IL or missing references)
		//IL_0342: Unknown result type (might be due to invalid IL or missing references)
		//IL_0347: Unknown result type (might be due to invalid IL or missing references)
		//IL_0364: Unknown result type (might be due to invalid IL or missing references)
		//IL_036a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0374: Unknown result type (might be due to invalid IL or missing references)
		//IL_0379: Unknown result type (might be due to invalid IL or missing references)
		//IL_037e: Unknown result type (might be due to invalid IL or missing references)
		//IL_029e: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02de: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e3: Unknown result type (might be due to invalid IL or missing references)
		float num = 4f;
		float num2 = 1f;
		float fadeIn = 0f;
		float num3 = 0.5f;
		int num4 = 2;
		int num5 = 267;
		switch (effectType)
		{
		case 1:
			num2 = 0.5f;
			fadeIn = 2f;
			num3 = 0f;
			break;
		case 2:
		case 4:
			num = 50f;
			num2 = 0.5f;
			fadeIn = 0f;
			num3 = 0f;
			num4 = 4;
			break;
		case 3:
			num = 30f;
			num2 = 0.1f;
			fadeIn = 2.5f;
			num3 = 0f;
			break;
		case 5:
			if (progress == 0f)
			{
				num4 = 0;
			}
			else
			{
				num4 = 5;
				num5 = Main.rand.Next(86, 92);
			}
			if (progress >= 1f)
			{
				num4 = 0;
			}
			break;
		}
		for (int i = 0; i < num4; i++)
		{
			Dust dust = Dust.NewDustPerfect(spot, num5, Main.rand.NextVector2CircularEdge(num, num) * (Main.rand.NextFloat() * (1f - num3) + num3), 0, Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f), (Main.rand.NextFloat() * 2f + 2f) * num2);
			dust.fadeIn = fadeIn;
			dust.noGravity = true;
			switch (effectType)
			{
			case 2:
			case 4:
			{
				dust.velocity *= 0.005f;
				dust.scale = 3f * Utils.GetLerpValue(0.7f, 0f, progress, clamped: true) * Utils.GetLerpValue(0f, 0.3f, progress, clamped: true);
				dust.velocity = ((float)Math.PI * 2f * ((float)i / 4f) + (float)Math.PI / 4f).ToRotationVector2() * 8f * Utils.GetLerpValue(1f, 0f, progress, clamped: true);
				dust.velocity += velocity * 0.3f;
				float num6 = 0f;
				if (effectType == 4)
				{
					num6 = 0.5f;
				}
				dust.color = Main.hslToRgb(((float)i / 5f + num6 + progress * 0.5f) % 1f, 1f, 0.5f);
				ref Color reference = ref dust.color;
				((Color)(ref reference)).A = (byte)(((Color)(ref reference)).A / 2);
				dust.alpha = 127;
				break;
			}
			case 5:
				if (progress == 0f)
				{
					dust.customData = this;
					dust.scale = 1.5f;
					dust.fadeIn = 0f;
					dust.velocity = new Vector2(0f, -1f) + Main.rand.NextVector2Circular(1f, 1f);
					dust.color = new Color(255, 255, 255, 80) * 0.3f;
				}
				else
				{
					dust.color = Main.hslToRgb(progress * 2f % 1f, 1f, 0.5f);
					dust.alpha = 0;
					dust.scale = 1f;
					dust.fadeIn = 1.3f;
					dust.velocity *= 3f;
					dust.velocity.X *= 0.1f;
					dust.velocity += velocity * 1f;
				}
				break;
			}
		}
	}

	public static bool ShouldEmpressBeEnraged()
	{
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		if (Main.remixWorld)
		{
			if (empressRageMode)
			{
				return true;
			}
			int num = -1;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].type == 636)
				{
					num = i;
					break;
				}
			}
			if (num >= 0 && (double)Main.npc[num].Center.Y < Main.worldSurface * 16.0)
			{
				empressRageMode = true;
				return true;
			}
			empressRageMode = false;
			return false;
		}
		return Main.dayTime;
	}

	private void AI_120_HallowBoss()
	{
		//IL_0d42: Unknown result type (might be due to invalid IL or missing references)
		//IL_1427: Unknown result type (might be due to invalid IL or missing references)
		//IL_142c: Unknown result type (might be due to invalid IL or missing references)
		//IL_142e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1433: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a82: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a84: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_021f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0224: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c57: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_122d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1232: Unknown result type (might be due to invalid IL or missing references)
		//IL_1234: Unknown result type (might be due to invalid IL or missing references)
		//IL_1239: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1451: Unknown result type (might be due to invalid IL or missing references)
		//IL_1449: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2206: Unknown result type (might be due to invalid IL or missing references)
		//IL_2210: Unknown result type (might be due to invalid IL or missing references)
		//IL_2215: Unknown result type (might be due to invalid IL or missing references)
		//IL_21de: Unknown result type (might be due to invalid IL or missing references)
		//IL_21fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_2437: Unknown result type (might be due to invalid IL or missing references)
		//IL_2441: Unknown result type (might be due to invalid IL or missing references)
		//IL_2446: Unknown result type (might be due to invalid IL or missing references)
		//IL_240f: Unknown result type (might be due to invalid IL or missing references)
		//IL_242b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2430: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0290: Unknown result type (might be due to invalid IL or missing references)
		//IL_0238: Unknown result type (might be due to invalid IL or missing references)
		//IL_0247: Unknown result type (might be due to invalid IL or missing references)
		//IL_024c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0251: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a00: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c61: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c62: Unknown result type (might be due to invalid IL or missing references)
		//IL_124c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1251: Unknown result type (might be due to invalid IL or missing references)
		//IL_1253: Unknown result type (might be due to invalid IL or missing references)
		//IL_1456: Unknown result type (might be due to invalid IL or missing references)
		//IL_1459: Unknown result type (might be due to invalid IL or missing references)
		//IL_145b: Unknown result type (might be due to invalid IL or missing references)
		//IL_145d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1638: Unknown result type (might be due to invalid IL or missing references)
		//IL_1630: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a05: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a08: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c72: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c74: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c75: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c84: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e15: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d91: Unknown result type (might be due to invalid IL or missing references)
		//IL_0da0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0da5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dca: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dde: Unknown result type (might be due to invalid IL or missing references)
		//IL_1292: Unknown result type (might be due to invalid IL or missing references)
		//IL_128a: Unknown result type (might be due to invalid IL or missing references)
		//IL_146d: Unknown result type (might be due to invalid IL or missing references)
		//IL_146f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1471: Unknown result type (might be due to invalid IL or missing references)
		//IL_1476: Unknown result type (might be due to invalid IL or missing references)
		//IL_147b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1480: Unknown result type (might be due to invalid IL or missing references)
		//IL_1487: Unknown result type (might be due to invalid IL or missing references)
		//IL_1491: Unknown result type (might be due to invalid IL or missing references)
		//IL_163d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1640: Unknown result type (might be due to invalid IL or missing references)
		//IL_1642: Unknown result type (might be due to invalid IL or missing references)
		//IL_1643: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ce0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e54: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e63: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e68: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a23: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a28: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a34: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ccd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e22: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e25: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e27: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e28: Unknown result type (might be due to invalid IL or missing references)
		//IL_1297: Unknown result type (might be due to invalid IL or missing references)
		//IL_129a: Unknown result type (might be due to invalid IL or missing references)
		//IL_129c: Unknown result type (might be due to invalid IL or missing references)
		//IL_129d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1653: Unknown result type (might be due to invalid IL or missing references)
		//IL_1655: Unknown result type (might be due to invalid IL or missing references)
		//IL_1656: Unknown result type (might be due to invalid IL or missing references)
		//IL_165b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1660: Unknown result type (might be due to invalid IL or missing references)
		//IL_1665: Unknown result type (might be due to invalid IL or missing references)
		//IL_166c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1676: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eac: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2246: Unknown result type (might be due to invalid IL or missing references)
		//IL_224b: Unknown result type (might be due to invalid IL or missing references)
		//IL_224d: Unknown result type (might be due to invalid IL or missing references)
		//IL_24ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_064d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0657: Unknown result type (might be due to invalid IL or missing references)
		//IL_065c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a51: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a56: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a58: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e38: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e40: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e45: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e51: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_12af: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_14d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_14e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ec2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ec4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ec5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eca: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ecf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ed4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1edb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0333: Unknown result type (might be due to invalid IL or missing references)
		//IL_0338: Unknown result type (might be due to invalid IL or missing references)
		//IL_033b: Unknown result type (might be due to invalid IL or missing references)
		//IL_035c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0373: Unknown result type (might be due to invalid IL or missing references)
		//IL_0397: Unknown result type (might be due to invalid IL or missing references)
		//IL_039c: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_041f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0424: Unknown result type (might be due to invalid IL or missing references)
		//IL_042e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0433: Unknown result type (might be due to invalid IL or missing references)
		//IL_0438: Unknown result type (might be due to invalid IL or missing references)
		//IL_0637: Unknown result type (might be due to invalid IL or missing references)
		//IL_0641: Unknown result type (might be due to invalid IL or missing references)
		//IL_0646: Unknown result type (might be due to invalid IL or missing references)
		//IL_05fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0603: Unknown result type (might be due to invalid IL or missing references)
		//IL_0606: Unknown result type (might be due to invalid IL or missing references)
		//IL_05dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_05eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c24: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c29: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d38: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d47: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_22c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_22dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_22de: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2802: Unknown result type (might be due to invalid IL or missing references)
		//IL_2807: Unknown result type (might be due to invalid IL or missing references)
		//IL_2812: Unknown result type (might be due to invalid IL or missing references)
		//IL_0497: Unknown result type (might be due to invalid IL or missing references)
		//IL_049c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1709: Unknown result type (might be due to invalid IL or missing references)
		//IL_170e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1710: Unknown result type (might be due to invalid IL or missing references)
		//IL_1715: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c02: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c07: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b33: Unknown result type (might be due to invalid IL or missing references)
		//IL_22f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_22f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_22f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_22fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_253b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2540: Unknown result type (might be due to invalid IL or missing references)
		//IL_2543: Unknown result type (might be due to invalid IL or missing references)
		//IL_2549: Unknown result type (might be due to invalid IL or missing references)
		//IL_2553: Unknown result type (might be due to invalid IL or missing references)
		//IL_2558: Unknown result type (might be due to invalid IL or missing references)
		//IL_257d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2594: Unknown result type (might be due to invalid IL or missing references)
		//IL_25ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_25b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_25b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_25de: Unknown result type (might be due to invalid IL or missing references)
		//IL_2643: Unknown result type (might be due to invalid IL or missing references)
		//IL_2648: Unknown result type (might be due to invalid IL or missing references)
		//IL_2652: Unknown result type (might be due to invalid IL or missing references)
		//IL_2657: Unknown result type (might be due to invalid IL or missing references)
		//IL_265c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ada: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b53: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b58: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b63: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b68: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_26bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b15: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b17: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1317: Unknown result type (might be due to invalid IL or missing references)
		//IL_1330: Unknown result type (might be due to invalid IL or missing references)
		//IL_1336: Unknown result type (might be due to invalid IL or missing references)
		//IL_1338: Unknown result type (might be due to invalid IL or missing references)
		//IL_133d: Unknown result type (might be due to invalid IL or missing references)
		//IL_177c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1791: Unknown result type (might be due to invalid IL or missing references)
		//IL_1798: Unknown result type (might be due to invalid IL or missing references)
		//IL_179d: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_17be: Unknown result type (might be due to invalid IL or missing references)
		//IL_17d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_17d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_17dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_17e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_17f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_17f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_17fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1802: Unknown result type (might be due to invalid IL or missing references)
		//IL_1814: Unknown result type (might be due to invalid IL or missing references)
		//IL_181b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1822: Unknown result type (might be due to invalid IL or missing references)
		//IL_1827: Unknown result type (might be due to invalid IL or missing references)
		//IL_182c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1855: Unknown result type (might be due to invalid IL or missing references)
		//IL_1870: Unknown result type (might be due to invalid IL or missing references)
		//IL_1877: Unknown result type (might be due to invalid IL or missing references)
		//IL_187c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1881: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_18bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_18cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_18eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_190e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1915: Unknown result type (might be due to invalid IL or missing references)
		//IL_191a: Unknown result type (might be due to invalid IL or missing references)
		//IL_191f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1938: Unknown result type (might be due to invalid IL or missing references)
		//IL_193c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1941: Unknown result type (might be due to invalid IL or missing references)
		//IL_1946: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b95: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f16: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f20: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f22: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f24: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f29: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f42: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f45: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b32: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b34: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b39: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ea1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ec8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ece: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed5: Unknown result type (might be due to invalid IL or missing references)
		//IL_134d: Unknown result type (might be due to invalid IL or missing references)
		//IL_134f: Unknown result type (might be due to invalid IL or missing references)
		//IL_135c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1362: Unknown result type (might be due to invalid IL or missing references)
		//IL_1364: Unknown result type (might be due to invalid IL or missing references)
		//IL_136e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1373: Unknown result type (might be due to invalid IL or missing references)
		//IL_1378: Unknown result type (might be due to invalid IL or missing references)
		//IL_137f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f66: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f70: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f72: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f76: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f80: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f82: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f84: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ee4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1554: Unknown result type (might be due to invalid IL or missing references)
		//IL_1556: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fca: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f91: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f93: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f98: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_235c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2361: Unknown result type (might be due to invalid IL or missing references)
		//IL_2363: Unknown result type (might be due to invalid IL or missing references)
		//IL_2368: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f20: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f23: Unknown result type (might be due to invalid IL or missing references)
		//IL_1954: Unknown result type (might be due to invalid IL or missing references)
		//IL_1956: Unknown result type (might be due to invalid IL or missing references)
		//IL_1960: Unknown result type (might be due to invalid IL or missing references)
		//IL_1965: Unknown result type (might be due to invalid IL or missing references)
		//IL_196a: Unknown result type (might be due to invalid IL or missing references)
		//IL_196c: Unknown result type (might be due to invalid IL or missing references)
		//IL_196e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fda: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fac: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fae: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1faa: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f36: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f40: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f45: Unknown result type (might be due to invalid IL or missing references)
		//IL_1976: Unknown result type (might be due to invalid IL or missing references)
		//IL_1980: Unknown result type (might be due to invalid IL or missing references)
		//IL_1987: Unknown result type (might be due to invalid IL or missing references)
		//IL_198c: Unknown result type (might be due to invalid IL or missing references)
		//IL_198e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1992: Unknown result type (might be due to invalid IL or missing references)
		//IL_1997: Unknown result type (might be due to invalid IL or missing references)
		//IL_1999: Unknown result type (might be due to invalid IL or missing references)
		//IL_199e: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_19b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_19b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_19bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b98: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ba4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f65: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f69: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f71: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f76: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f81: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f86: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f97: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fa1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f53: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_19d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_19d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_19e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fe4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fe6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0feb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0911: Unknown result type (might be due to invalid IL or missing references)
		//IL_0916: Unknown result type (might be due to invalid IL or missing references)
		//IL_091b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0920: Unknown result type (might be due to invalid IL or missing references)
		//IL_092c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0937: Unknown result type (might be due to invalid IL or missing references)
		//IL_094d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0953: Unknown result type (might be due to invalid IL or missing references)
		//IL_0955: Unknown result type (might be due to invalid IL or missing references)
		//IL_095f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0964: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ffb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ffd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fe2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_205a: Unknown result type (might be due to invalid IL or missing references)
		//IL_205f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2064: Unknown result type (might be due to invalid IL or missing references)
		//IL_2066: Unknown result type (might be due to invalid IL or missing references)
		//IL_2068: Unknown result type (might be due to invalid IL or missing references)
		//IL_206d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2072: Unknown result type (might be due to invalid IL or missing references)
		//IL_2081: Unknown result type (might be due to invalid IL or missing references)
		//IL_2086: Unknown result type (might be due to invalid IL or missing references)
		//IL_208c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2090: Unknown result type (might be due to invalid IL or missing references)
		//IL_2098: Unknown result type (might be due to invalid IL or missing references)
		//IL_209d: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_20ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_20b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_20b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_20b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_20fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2104: Unknown result type (might be due to invalid IL or missing references)
		//IL_2106: Unknown result type (might be due to invalid IL or missing references)
		//IL_211c: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_20ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_20cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_20ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_20de: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_20ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_20da: Unknown result type (might be due to invalid IL or missing references)
		//IL_20dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_107b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1080: Unknown result type (might be due to invalid IL or missing references)
		//IL_1084: Unknown result type (might be due to invalid IL or missing references)
		//IL_1089: Unknown result type (might be due to invalid IL or missing references)
		//IL_108e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1093: Unknown result type (might be due to invalid IL or missing references)
		//IL_10af: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_10eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_112e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1130: Unknown result type (might be due to invalid IL or missing references)
		//IL_1135: Unknown result type (might be due to invalid IL or missing references)
		//IL_113d: Unknown result type (might be due to invalid IL or missing references)
		//IL_113f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1155: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1103: Unknown result type (might be due to invalid IL or missing references)
		//IL_1105: Unknown result type (might be due to invalid IL or missing references)
		//IL_1107: Unknown result type (might be due to invalid IL or missing references)
		//IL_1117: Unknown result type (might be due to invalid IL or missing references)
		//IL_1119: Unknown result type (might be due to invalid IL or missing references)
		//IL_111b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1122: Unknown result type (might be due to invalid IL or missing references)
		//IL_1127: Unknown result type (might be due to invalid IL or missing references)
		//IL_112c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1113: Unknown result type (might be due to invalid IL or missing references)
		//IL_1115: Unknown result type (might be due to invalid IL or missing references)
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector(-150f, -250f);
		Vector2 vector10 = default(Vector2);
		((Vector2)(ref vector10))._002Ector(150f, -250f);
		Vector2 vector21 = default(Vector2);
		((Vector2)(ref vector21))._002Ector(0f, -350f);
		Vector2 vector29 = default(Vector2);
		((Vector2)(ref vector29))._002Ector(0f, -350f);
		Vector2 vector30 = default(Vector2);
		((Vector2)(ref vector30))._002Ector(-80f, -500f);
		float num = 0.5f;
		float num12 = 12f;
		float num23 = 40f;
		float num34 = 6400f;
		int num45 = 40;
		int num56 = 50;
		int num67 = 70;
		int num78 = 45;
		int num88 = 45;
		int num2 = 50;
		bool flag = AI_120_HallowBoss_IsInPhase2();
		bool flag5 = Main.expertMode;
		bool flag6 = flag && flag5;
		bool flag7 = ShouldEmpressBeEnraged();
		if (life == lifeMax && flag7 && !AI_120_HallowBoss_IsGenuinelyEnraged())
		{
			this.ai[3] += 2f;
		}
		bool flag8 = true;
		int num3 = 30;
		int num4 = 30;
		int num5 = 30;
		int num6 = 35;
		int num7 = 65;
		if (flag)
		{
			num56 = 60;
			num78 = 50;
			num88 = 50;
			num2 = 60;
			num67 = 65;
			num3 = 35;
			num4 = 35;
			num5 = 35;
			num6 = 40;
			num7 = 30;
		}
		num56 = GetAttackDamage_ForProjectiles(num56, num3);
		num78 = GetAttackDamage_ForProjectiles(num78, num4);
		num88 = GetAttackDamage_ForProjectiles(num88, num5);
		num2 = GetAttackDamage_ForProjectiles(num2, num6);
		num67 = GetAttackDamage_ForProjectiles(num67, num7);
		if (flag7)
		{
			num56 = 9999;
			num78 = 9999;
			num88 = 9999;
			num2 = 9999;
			num67 = 9999;
			flag5 = true;
		}
		float num8 = (flag5 ? 0.3f : 1f);
		bool flag9 = true;
		int num9 = 0;
		if (flag)
		{
			num9 += 15;
		}
		if (flag5)
		{
			num9 += 5;
		}
		Vector2 val = default(Vector2);
		switch ((int)this.ai[0])
		{
		case 0:
			if (this.ai[1] == 0f)
			{
				velocity = new Vector2(0f, 5f);
				if (Main.netMode != 1)
				{
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center + new Vector2(0f, -80f), Vector2.Zero, 874, 0, 0f, Main.myPlayer);
				}
			}
			if (this.ai[1] == 10f)
			{
				SoundEngine.PlaySound(in SoundID.Item161, base.Center);
			}
			velocity *= 0.95f;
			if (this.ai[1] > 10f && this.ai[1] < 150f)
			{
				int num64 = 2;
				for (int m = 0; m < num64; m++)
				{
					float num65 = MathHelper.Lerp(1.3f, 0.7f, Opacity) * Utils.GetLerpValue(0f, 120f, this.ai[1], clamped: true);
					Color newColor2 = Main.hslToRgb(this.ai[1] / 180f, 1f, 0.5f);
					int num66 = Dust.NewDust(position, width, height, 267, 0f, 0f, 0, newColor2);
					Main.dust[num66].position = base.Center + Main.rand.NextVector2Circular((float)width * 3f, (float)height * 3f) + new Vector2(0f, -150f);
					Dust obj3 = Main.dust[num66];
					obj3.velocity *= Main.rand.NextFloat() * 0.8f;
					Main.dust[num66].noGravity = true;
					Main.dust[num66].fadeIn = 0.6f + Main.rand.NextFloat() * 0.7f * num65;
					Dust obj4 = Main.dust[num66];
					obj4.velocity += Vector2.UnitY * 3f;
					Main.dust[num66].scale = 0.35f;
					if (num66 != 6000)
					{
						Dust dust2 = Dust.CloneDust(num66);
						dust2.scale /= 2f;
						dust2.fadeIn *= 0.85f;
						dust2.color = new Color(255, 255, 255, 255);
					}
				}
			}
			this.ai[1] += 1f;
			flag8 = false;
			flag9 = false;
			Opacity = MathHelper.Clamp(this.ai[1] / 180f, 0f, 1f);
			if (this.ai[1] >= 180f)
			{
				if (flag7 && !AI_120_HallowBoss_IsGenuinelyEnraged())
				{
					this.ai[3] += 2f;
				}
				this.ai[0] = 1f;
				this.ai[1] = 0f;
				netUpdate = true;
				TargetClosest();
			}
			break;
		case 1:
		{
			float num28 = (flag ? 20f : 45f);
			if (Main.getGoodWorld)
			{
				num28 /= 2f;
			}
			if (this.ai[1] <= 10f)
			{
				if (this.ai[1] == 0f)
				{
					TargetClosest();
				}
				NPCAimedTarget targetData6 = GetTargetData();
				if (targetData6.Invalid)
				{
					this.ai[0] = 13f;
					this.ai[1] = 0f;
					this.ai[2] += 1f;
					velocity /= 4f;
					netUpdate = true;
					break;
				}
				Vector2 center = targetData6.Center;
				AI_120_HallowBoss_DashTo(center);
				netUpdate = true;
			}
			if (((Vector2)(ref velocity)).Length() > 16f && this.ai[1] > 10f)
			{
				velocity /= 2f;
			}
			velocity *= 0.92f;
			this.ai[1] += 1f;
			if (!(this.ai[1] >= num28))
			{
				break;
			}
			int num29 = (int)this.ai[2];
			int num30 = 2;
			int num31 = 0;
			if (!flag)
			{
				int num32 = num31++;
				int num33 = num31++;
				int num35 = num31++;
				int num36 = num31++;
				int num37 = num31++;
				int num38 = num31++;
				int num39 = num31++;
				int num40 = num31++;
				int num41 = num31++;
				int num42 = num31++;
				if (num29 % num31 == num32)
				{
					num30 = 2;
				}
				if (num29 % num31 == num33)
				{
					num30 = 8;
				}
				if (num29 % num31 == num35)
				{
					num30 = 6;
				}
				if (num29 % num31 == num36)
				{
					num30 = 8;
				}
				if (num29 % num31 == num37)
				{
					num30 = 5;
				}
				if (num29 % num31 == num38)
				{
					num30 = 2;
				}
				if (num29 % num31 == num39)
				{
					num30 = 8;
				}
				if (num29 % num31 == num40)
				{
					num30 = 4;
				}
				if (num29 % num31 == num41)
				{
					num30 = 8;
				}
				if (num29 % num31 == num42)
				{
					num30 = 5;
				}
				if ((float)life / (float)lifeMax <= 0.5f)
				{
					num30 = 10;
				}
			}
			if (flag)
			{
				int num43 = num31++;
				int num44 = num31++;
				int num46 = num31++;
				int num47 = -1;
				if (flag5)
				{
					num47 = num31++;
				}
				int num48 = num31++;
				int num49 = num31++;
				int num50 = num31++;
				int num51 = num31++;
				int num52 = num31++;
				int num53 = num31++;
				if (num29 % num31 == num43)
				{
					num30 = 7;
				}
				if (num29 % num31 == num44)
				{
					num30 = 2;
				}
				if (num29 % num31 == num46)
				{
					num30 = 8;
				}
				if (num29 % num31 == num48)
				{
					num30 = 5;
				}
				if (num29 % num31 == num49)
				{
					num30 = 2;
				}
				if (num29 % num31 == num50)
				{
					num30 = 6;
				}
				if (num29 % num31 == num50)
				{
					num30 = 6;
				}
				if (num29 % num31 == num51)
				{
					num30 = 4;
				}
				if (num29 % num31 == num52)
				{
					num30 = 8;
				}
				if (num29 % num31 == num47)
				{
					num30 = 11;
				}
				if (num29 % num31 == num53)
				{
					num30 = 12;
				}
			}
			TargetClosest();
			NPCAimedTarget targetData7 = GetTargetData();
			bool flag4 = false;
			if (AI_120_HallowBoss_IsGenuinelyEnraged())
			{
				if (!Main.dayTime)
				{
					flag4 = true;
				}
				if (Main.dayTime && Main.time >= 53400.0)
				{
					flag4 = true;
				}
			}
			if (targetData7.Invalid || Distance(targetData7.Center) > num34 || flag4)
			{
				num30 = 13;
			}
			if (num30 == 8 && targetData7.Center.X > base.Center.X)
			{
				num30 = 9;
			}
			if (flag5 && num30 != 5 && num30 != 12)
			{
				Vector2 spinningpoint2 = DirectionFrom(targetData7.Center).SafeNormalize(Vector2.Zero);
				double radians2 = (float)Math.PI / 2f * (float)(targetData7.Center.X > base.Center.X).ToDirectionInt();
				val = default(Vector2);
				velocity = spinningpoint2.RotatedBy(radians2, val) * 20f;
			}
			this.ai[0] = num30;
			this.ai[1] = 0f;
			this.ai[2] += 1f;
			netUpdate = true;
			break;
		}
		case 2:
		{
			if (this.ai[1] == 0f)
			{
				SoundEngine.PlaySound(in SoundID.Item164, base.Center);
			}
			float num89 = 90f - (float)num9;
			Vector2 vector26 = default(Vector2);
			((Vector2)(ref vector26))._002Ector(-55f, -30f);
			NPCAimedTarget targetData3 = GetTargetData();
			Vector2 vector27 = (targetData3.Invalid ? base.Center : targetData3.Center);
			if (Distance(vector27 + vector) > num23)
			{
				SimpleFlyMovement(DirectionTo(vector27 + vector).SafeNormalize(Vector2.Zero) * num12, num);
			}
			if (this.ai[1] < 60f)
			{
				AI_120_HallowBoss_DoMagicEffect(base.Center + vector26, 1, Utils.GetLerpValue(0f, 60f, this.ai[1], clamped: true));
			}
			int num90 = 3;
			if (flag5)
			{
				num90 = 2;
			}
			if ((int)this.ai[1] % num90 == 0 && this.ai[1] < 60f)
			{
				float ai3 = this.ai[1] / 60f;
				Vector2 spinningpoint3 = new Vector2(0f, -6f);
				double radians5 = (float)Math.PI / 2f * Main.rand.NextFloatDirection();
				val = default(Vector2);
				Vector2 vector28 = Utils.RotatedBy(spinningpoint3, radians5, val);
				if (flag6)
				{
					Vector2 spinningpoint4 = new Vector2(0f, -10f);
					double radians6 = (float)Math.PI * 2f * Main.rand.NextFloat();
					val = default(Vector2);
					vector28 = Utils.RotatedBy(spinningpoint4, radians6, val);
				}
				if (Main.netMode != 1)
				{
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center + vector26, vector28, 873, num78, 0f, Main.myPlayer, target, ai3);
				}
				if (Main.netMode != 1)
				{
					int num91 = (int)(this.ai[1] / (float)num90);
					for (int num92 = 0; num92 < 255; num92++)
					{
						if (Boss_CanShootExtraAt(num92, num91 % 3, 3, 2400f))
						{
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center + vector26, vector28, 873, num78, 0f, Main.myPlayer, num92, ai3);
						}
					}
				}
			}
			this.ai[1] += 1f;
			if (this.ai[1] >= 60f + num89)
			{
				this.ai[0] = 1f;
				this.ai[1] = 0f;
				netUpdate = true;
			}
			break;
		}
		case 3:
		{
			this.ai[1] += 1f;
			NPCAimedTarget targetData10 = GetTargetData();
			Vector2 vector14 = (targetData10.Invalid ? base.Center : targetData10.Center);
			if (Distance(vector14 + vector10) > num23)
			{
				SimpleFlyMovement(DirectionTo(vector14 + vector10).SafeNormalize(Vector2.Zero) * num12, num);
			}
			if ((int)this.ai[1] % 180 == 0)
			{
				Vector2 vector15 = default(Vector2);
				((Vector2)(ref vector15))._002Ector(0f, -100f);
				Projectile.NewProjectile(GetSpawnSource_ForProjectile(), targetData10.Center + vector15, Vector2.Zero, 874, num45, 0f, Main.myPlayer);
			}
			if (this.ai[1] >= 120f)
			{
				this.ai[0] = 1f;
				this.ai[1] = 0f;
				netUpdate = true;
			}
			break;
		}
		case 4:
		{
			float num80 = 20 - num9;
			new Vector2(0f, -100f);
			if (this.ai[1] == 0f)
			{
				SoundEngine.PlaySound(in SoundID.Item162, base.Center);
			}
			if (this.ai[1] >= 6f && this.ai[1] < 54f)
			{
				AI_120_HallowBoss_DoMagicEffect(base.Center + new Vector2(-55f, -20f), 2, Utils.GetLerpValue(0f, 100f, this.ai[1], clamped: true));
				AI_120_HallowBoss_DoMagicEffect(base.Center + new Vector2(55f, -20f), 4, Utils.GetLerpValue(0f, 100f, this.ai[1], clamped: true));
			}
			NPCAimedTarget targetData2 = GetTargetData();
			Vector2 vector20 = (targetData2.Invalid ? base.Center : targetData2.Center);
			if (Distance(vector20 + vector21) > num23)
			{
				SimpleFlyMovement(DirectionTo(vector20 + vector21).SafeNormalize(Vector2.Zero) * num12, num);
			}
			int num81 = 4;
			if (flag5)
			{
				num81 = 5;
			}
			if ((int)this.ai[1] % 4 == 0 && this.ai[1] < 100f)
			{
				int num82 = 1;
				for (int n = 0; n < num82; n++)
				{
					int num83 = (int)this.ai[1] / 4;
					Vector2 unitX = Vector2.UnitX;
					double radians4 = (float)Math.PI / (float)(num81 * 2) + (float)num83 * ((float)Math.PI / (float)num81) + 0f;
					val = default(Vector2);
					Vector2 vector22 = unitX.RotatedBy(radians4, val);
					if (!flag5)
					{
						vector22.X += ((vector22.X > 0f) ? 0.5f : (-0.5f));
					}
					((Vector2)(ref vector22)).Normalize();
					float num84 = 300f;
					if (flag5)
					{
						num84 = 450f;
					}
					Vector2 center4 = targetData2.Center;
					if (Distance(center4) > 2400f)
					{
						continue;
					}
					if (Vector2.Dot(targetData2.Velocity.SafeNormalize(Vector2.UnitY), vector22) > 0f)
					{
						vector22 *= -1f;
					}
					int num85 = 90;
					Vector2 val4 = center4 + targetData2.Velocity * (float)num85;
					Vector2 vector23 = center4 + vector22 * num84 - targetData2.Velocity * 30f;
					if (vector23.Distance(center4) < num84)
					{
						Vector2 vector24 = center4 - vector23;
						if (vector24 == Vector2.Zero)
						{
							vector24 = vector22;
						}
						vector23 = center4 - Vector2.Normalize(vector24) * num84;
					}
					Vector2 v3 = val4 - vector23;
					if (Main.netMode != 1)
					{
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector23, Vector2.Zero, 919, num56, 0f, Main.myPlayer, v3.ToRotation(), this.ai[1] / 100f);
					}
					if (Main.netMode == 1)
					{
						continue;
					}
					int num86 = (int)(this.ai[1] / 4f);
					for (int num87 = 0; num87 < 255; num87++)
					{
						if (!Boss_CanShootExtraAt(num87, num86 % 3, 3, 2400f))
						{
							continue;
						}
						Player player2 = Main.player[num87];
						center4 = player2.Center;
						if (Vector2.Dot(player2.velocity.SafeNormalize(Vector2.UnitY), vector22) > 0f)
						{
							vector22 *= -1f;
						}
						Vector2 val5 = center4 + player2.velocity * (float)num85;
						vector23 = center4 + vector22 * num84 - player2.velocity * 30f;
						if (vector23.Distance(center4) < num84)
						{
							Vector2 vector25 = center4 - vector23;
							if (vector25 == Vector2.Zero)
							{
								vector25 = vector22;
							}
							vector23 = center4 - Vector2.Normalize(vector25) * num84;
						}
						v3 = val5 - vector23;
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector23, Vector2.Zero, 919, num56, 0f, Main.myPlayer, v3.ToRotation(), this.ai[1] / 100f);
					}
				}
			}
			this.ai[1] += 1f;
			if (this.ai[1] >= 100f + num80)
			{
				this.ai[0] = 1f;
				this.ai[1] = 0f;
				netUpdate = true;
			}
			break;
		}
		case 5:
		{
			if (this.ai[1] == 0f)
			{
				SoundEngine.PlaySound(in SoundID.Item163, base.Center);
			}
			float num60 = 30f;
			num60 -= (float)num9;
			Vector2 vector9 = default(Vector2);
			((Vector2)(ref vector9))._002Ector(55f, -30f);
			Vector2 vector11 = base.Center + vector9;
			if (this.ai[1] < 42f)
			{
				AI_120_HallowBoss_DoMagicEffect(base.Center + vector9, 3, Utils.GetLerpValue(0f, 42f, this.ai[1], clamped: true));
			}
			NPCAimedTarget targetData9 = GetTargetData();
			Vector2 vector12 = (targetData9.Invalid ? base.Center : targetData9.Center);
			if (Distance(vector12 + vector29) > num23)
			{
				SimpleFlyMovement(DirectionTo(vector12 + vector29).SafeNormalize(Vector2.Zero) * num12, num);
			}
			if ((int)this.ai[1] % 42 == 0 && this.ai[1] < 42f)
			{
				float num61 = (float)Math.PI * 2f * Main.rand.NextFloat();
				for (float num62 = 0f; num62 < 1f; num62 += 1f / 13f)
				{
					float num63 = num62;
					Vector2 unitY = Vector2.UnitY;
					double radians3 = (float)Math.PI / 2f + (float)Math.PI * 2f * num63 + num61;
					val = default(Vector2);
					Vector2 vector13 = unitY.RotatedBy(radians3, val);
					if (Main.netMode != 1)
					{
						IEntitySource spawnSource_ForProjectile = GetSpawnSource_ForProjectile();
						val = default(Vector2);
						Projectile.NewProjectile(spawnSource_ForProjectile, vector11 + vector13.RotatedBy(-1.5707963705062866, val) * 30f, vector13 * 8f, 872, num88, 0f, Main.myPlayer, 0f, num63);
					}
				}
			}
			this.ai[1] += 1f;
			if (this.ai[1] >= 42f + num60)
			{
				this.ai[0] = 1f;
				this.ai[1] = 0f;
				netUpdate = true;
			}
			break;
		}
		case 6:
		{
			float num18 = 120 - num9;
			Vector2 vector33 = default(Vector2);
			((Vector2)(ref vector33))._002Ector(0f, -100f);
			Vector2 vector34 = base.Center + vector33;
			NPCAimedTarget targetData4 = GetTargetData();
			Vector2 vector2 = (targetData4.Invalid ? base.Center : targetData4.Center);
			if (Distance(vector2 + vector30) > num23)
			{
				SimpleFlyMovement(DirectionTo(vector2 + vector30).SafeNormalize(Vector2.Zero) * num12 * 0.3f, num * 0.7f);
			}
			if ((int)this.ai[1] % 60 == 0 && this.ai[1] < 180f)
			{
				int num19 = (int)this.ai[1] / 60;
				int num20 = ((targetData4.Center.X > base.Center.X) ? 1 : 0);
				float num21 = 6f;
				if (flag5)
				{
					num21 = 8f;
				}
				float num22 = 1f / num21;
				for (float num24 = 0f; num24 < 1f; num24 += num22)
				{
					float num25 = (num24 + num22 * 0.5f + (float)num19 * num22 * 0.5f) % 1f;
					float ai = (float)Math.PI * 2f * (num25 + (float)num20);
					if (Main.netMode != 1)
					{
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector34, Vector2.Zero, 923, num2, 0f, Main.myPlayer, ai, whoAmI);
					}
				}
			}
			this.ai[1] += 1f;
			if (this.ai[1] >= 180f + num18)
			{
				this.ai[0] = 1f;
				this.ai[1] = 0f;
				netUpdate = true;
			}
			break;
		}
		case 7:
		{
			float num68 = 20f;
			float num69 = 60f;
			float num70 = num69 * 4f;
			if (flag5)
			{
				num68 = 40f;
				num69 = 40f;
				num70 = num69 * 6f;
			}
			num68 -= (float)num9;
			NPCAimedTarget targetData11 = GetTargetData();
			Vector2 vector16 = (targetData11.Invalid ? base.Center : targetData11.Center);
			if (Distance(vector16 + vector29) > num23)
			{
				SimpleFlyMovement(DirectionTo(vector16 + vector29).SafeNormalize(Vector2.Zero) * num12 * 0.4f, num);
			}
			if ((float)(int)this.ai[1] % num69 == 0f && this.ai[1] < num70)
			{
				SoundEngine.PlaySound(in SoundID.Item162, base.Center);
				Main.rand.NextFloat();
				int num71 = (int)this.ai[1] / (int)num69;
				float num72 = 13f;
				float num73 = 150f;
				float num74 = num72 * num73;
				Vector2 center3 = targetData11.Center;
				if (Distance(center3) <= 3200f)
				{
					Vector2 vector17 = Vector2.Zero;
					Vector2 vector18 = Vector2.UnitY;
					float num75 = 0.4f;
					float num76 = 1.4f;
					float num77 = 1f;
					if (flag5)
					{
						num72 += 5f;
						num73 += 50f;
						num77 *= 1f;
						num74 *= 0.5f;
					}
					switch (num71)
					{
					case 0:
						center3 += new Vector2((0f - num74) / 2f, 0f) * num77;
						((Vector2)(ref vector17))._002Ector(0f, num74);
						vector18 = Vector2.UnitX;
						break;
					case 1:
						center3 += new Vector2(num74 / 2f, num73 / 2f) * num77;
						((Vector2)(ref vector17))._002Ector(0f, num74);
						vector18 = -Vector2.UnitX;
						break;
					case 2:
						center3 += new Vector2(0f - num74, 0f - num74) * num75 * num77;
						((Vector2)(ref vector17))._002Ector(num74 * num76, 0f);
						((Vector2)(ref vector18))._002Ector(1f, 1f);
						break;
					case 3:
						center3 += new Vector2(num74 * num75 + num73 / 2f, (0f - num74) * num75) * num77;
						((Vector2)(ref vector17))._002Ector((0f - num74) * num76, 0f);
						((Vector2)(ref vector18))._002Ector(-1f, 1f);
						break;
					case 4:
						center3 += new Vector2(0f - num74, num74) * num75 * num77;
						((Vector2)(ref vector17))._002Ector(num74 * num76, 0f);
						vector18 = center3.DirectionTo(targetData11.Center);
						break;
					case 5:
						center3 += new Vector2(num74 * num75 + num73 / 2f, num74 * num75) * num77;
						((Vector2)(ref vector17))._002Ector((0f - num74) * num76, 0f);
						vector18 = center3.DirectionTo(targetData11.Center);
						break;
					}
					for (float num79 = 0f; num79 <= 1f; num79 += 1f / num72)
					{
						Vector2 origin = center3 + vector17 * (num79 - 0.5f);
						Vector2 v2 = vector18;
						if (flag5)
						{
							Vector2 vector19 = targetData11.Velocity * 20f * num79;
							Vector2 value2 = origin.DirectionTo(targetData11.Center + vector19);
							v2 = Vector2.Lerp(vector18, value2, 0.75f).SafeNormalize(Vector2.UnitY);
						}
						float ai2 = num79;
						if (Main.netMode != 1)
						{
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), origin, Vector2.Zero, 919, num67, 0f, Main.myPlayer, v2.ToRotation(), ai2);
						}
					}
				}
			}
			this.ai[1] += 1f;
			if (this.ai[1] >= num70 + num68)
			{
				this.ai[0] = 1f;
				this.ai[1] = 0f;
				netUpdate = true;
			}
			break;
		}
		case 8:
		case 9:
		{
			float num26 = 20 - num9;
			Vector2 vector3 = default(Vector2);
			((Vector2)(ref vector3))._002Ector(0f, -100f);
			_ = base.Center + vector3;
			flag9 = !(this.ai[1] >= 6f) || !(this.ai[1] <= 40f);
			int num27 = ((this.ai[0] != 8f) ? 1 : (-1));
			AI_120_HallowBoss_DoMagicEffect(base.Center, 5, Utils.GetLerpValue(40f, 90f, this.ai[1], clamped: true));
			if (this.ai[1] <= 40f)
			{
				if (this.ai[1] == 20f)
				{
					SoundEngine.PlaySound(in SoundID.Item160, base.Center);
				}
				NPCAimedTarget targetData5 = GetTargetData();
				Vector2 destination = (targetData5.Invalid ? base.Center : targetData5.Center) + new Vector2((float)(num27 * -550), 0f);
				SimpleFlyMovement(DirectionTo(destination).SafeNormalize(Vector2.Zero) * num12, num * 2f);
				if (this.ai[1] == 40f)
				{
					velocity *= 0.3f;
				}
			}
			else if (this.ai[1] <= 90f)
			{
				((Vector2)(ref val))._002Ector((float)(num27 * 50), 0f);
				velocity = Vector2.Lerp(velocity, val, 0.05f);
				if (this.ai[1] == 90f)
				{
					velocity *= 0.7f;
				}
				num8 *= 1.5f;
			}
			else
			{
				velocity *= 0.92f;
			}
			this.ai[1] += 1f;
			if (this.ai[1] >= 90f + num26)
			{
				this.ai[0] = 1f;
				this.ai[1] = 0f;
				netUpdate = true;
			}
			break;
		}
		case 10:
		{
			float num93 = 20 - num9;
			if (this.ai[1] == 0f)
			{
				SoundEngine.PlaySound(in SoundID.Item161, base.Center);
			}
			flag9 = !(this.ai[1] >= 30f) || !(this.ai[1] <= 170f);
			velocity *= 0.95f;
			if (this.ai[1] == 90f)
			{
				if (this.ai[3] == 0f)
				{
					this.ai[3] = 1f;
				}
				if (this.ai[3] == 2f)
				{
					this.ai[3] = 3f;
				}
				base.Center = GetTargetData().Center + new Vector2(0f, -250f);
				netUpdate = true;
			}
			this.ai[1] += 1f;
			if (this.ai[1] >= 180f + num93)
			{
				this.ai[0] = 1f;
				this.ai[1] = 0f;
				this.ai[2] = 0f;
				netUpdate = true;
			}
			break;
		}
		case 11:
		{
			if (this.ai[1] == 0f)
			{
				SoundEngine.PlaySound(in SoundID.Item162, base.Center);
			}
			float num54 = 20 - num9;
			new Vector2(0f, -100f);
			if (this.ai[1] >= 6f && this.ai[1] < 54f)
			{
				AI_120_HallowBoss_DoMagicEffect(base.Center + new Vector2(-55f, -20f), 2, Utils.GetLerpValue(0f, 100f, this.ai[1], clamped: true));
				AI_120_HallowBoss_DoMagicEffect(base.Center + new Vector2(55f, -20f), 4, Utils.GetLerpValue(0f, 100f, this.ai[1], clamped: true));
			}
			NPCAimedTarget targetData8 = GetTargetData();
			Vector2 vector4 = (targetData8.Invalid ? base.Center : targetData8.Center);
			if (Distance(vector4 + vector21) > num23)
			{
				SimpleFlyMovement(DirectionTo(vector4 + vector21).SafeNormalize(Vector2.Zero) * num12, num);
			}
			if ((int)this.ai[1] % 3 == 0 && this.ai[1] < 100f)
			{
				int num55 = 1;
				for (int k = 0; k < num55; k++)
				{
					Vector2 vector5 = -targetData8.Velocity;
					vector5.SafeNormalize(-Vector2.UnitY);
					float num57 = 100f;
					Vector2 center2 = targetData8.Center;
					if (Distance(center2) > 2400f)
					{
						continue;
					}
					int num58 = 90;
					Vector2 val2 = center2 + targetData8.Velocity * (float)num58;
					Vector2 vector6 = center2 + vector5 * num57;
					if (vector6.Distance(center2) < num57)
					{
						Vector2 vector7 = center2 - vector6;
						if (vector7 == Vector2.Zero)
						{
							vector7 = vector5;
						}
						vector6 = center2 - Vector2.Normalize(vector7) * num57;
					}
					Vector2 v = val2 - vector6;
					if (Main.netMode != 1)
					{
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector6, Vector2.Zero, 919, num56, 0f, Main.myPlayer, v.ToRotation(), this.ai[1] / 100f);
					}
					if (Main.netMode == 1)
					{
						continue;
					}
					int num59 = (int)(this.ai[1] / 3f);
					for (int l = 0; l < 255; l++)
					{
						if (!Boss_CanShootExtraAt(l, num59 % 3, 3, 2400f))
						{
							continue;
						}
						Player player = Main.player[l];
						vector5 = -player.velocity;
						vector5.SafeNormalize(-Vector2.UnitY);
						num57 = 100f;
						center2 = player.Center;
						num58 = 90;
						Vector2 val3 = center2 + player.velocity * (float)num58;
						vector6 = center2 + vector5 * num57;
						if (vector6.Distance(center2) < num57)
						{
							Vector2 vector8 = center2 - vector6;
							if (vector8 == Vector2.Zero)
							{
								vector8 = vector5;
							}
							vector6 = center2 - Vector2.Normalize(vector8) * num57;
						}
						v = val3 - vector6;
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector6, Vector2.Zero, 919, num56, 0f, Main.myPlayer, v.ToRotation(), this.ai[1] / 100f);
					}
				}
			}
			this.ai[1] += 1f;
			if (this.ai[1] >= 100f + num54)
			{
				this.ai[0] = 1f;
				this.ai[1] = 0f;
				netUpdate = true;
			}
			break;
		}
		case 12:
		{
			float num14 = 90f - (float)num9;
			Vector2 vector31 = default(Vector2);
			((Vector2)(ref vector31))._002Ector(-55f, -30f);
			if (this.ai[1] == 0f)
			{
				SoundEngine.PlaySound(in SoundID.Item165, base.Center);
				velocity = new Vector2(0f, -12f);
			}
			velocity *= 0.95f;
			bool flag3 = this.ai[1] < 60f && this.ai[1] >= 10f;
			if (flag3)
			{
				AI_120_HallowBoss_DoMagicEffect(base.Center + vector31, 1, Utils.GetLerpValue(0f, 60f, this.ai[1], clamped: true));
			}
			int num15 = 6;
			if (flag5)
			{
				num15 = 4;
			}
			float num16 = (this.ai[1] - 10f) / 50f;
			if ((int)this.ai[1] % num15 == 0 && flag3)
			{
				_ = this.ai[1] / 60f;
				Vector2 spinningpoint = new Vector2(0f, -20f);
				double radians = (float)Math.PI * 2f * num16;
				val = default(Vector2);
				Vector2 vector32 = (vector32 = Utils.RotatedBy(spinningpoint, radians, val));
				if (Main.netMode != 1)
				{
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center + vector31, vector32, 873, num78, 0f, Main.myPlayer, target, num16);
				}
				if (Main.netMode != 1)
				{
					int num17 = (int)(this.ai[1] % (float)num15);
					for (int j = 0; j < 255; j++)
					{
						if (Boss_CanShootExtraAt(j, num17 % 3, 3, 2400f))
						{
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center + vector31, vector32, 873, num78, 0f, Main.myPlayer, j, num16);
						}
					}
				}
			}
			this.ai[1] += 1f;
			if (this.ai[1] >= 60f + num14)
			{
				this.ai[0] = 1f;
				this.ai[1] = 0f;
				netUpdate = true;
			}
			break;
		}
		case 13:
		{
			new Vector2(-55f, -30f);
			if (this.ai[1] == 0f)
			{
				SoundEngine.PlaySound(in SoundID.Item165, base.Center);
				velocity = new Vector2(0f, -7f);
			}
			velocity *= 0.95f;
			TargetClosest();
			NPCAimedTarget targetData = GetTargetData();
			flag8 = false;
			bool flag10 = false;
			bool flag11 = false;
			if (!flag10)
			{
				if (AI_120_HallowBoss_IsGenuinelyEnraged())
				{
					if (!Main.dayTime)
					{
						flag11 = true;
					}
					if (Main.dayTime && Main.time >= 53400.0)
					{
						flag11 = true;
					}
				}
				flag10 = flag10 || flag11;
			}
			if (!flag10)
			{
				bool flag12 = targetData.Invalid || Distance(targetData.Center) > num34;
				flag10 = flag10 || flag12;
			}
			alpha = Utils.Clamp(alpha + flag10.ToDirectionInt() * 5, 0, 255);
			bool flag2 = alpha == 0 || alpha == 255;
			int num10 = 5;
			for (int i = 0; i < num10; i++)
			{
				float num11 = MathHelper.Lerp(1.3f, 0.7f, Opacity);
				Color newColor = Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f);
				int num13 = Dust.NewDust(position - base.Size * 0.5f, width * 2, height * 2, 267, 0f, 0f, 0, newColor);
				Main.dust[num13].position = base.Center + Main.rand.NextVector2Circular(width, height);
				Dust obj = Main.dust[num13];
				obj.velocity *= Main.rand.NextFloat() * 0.8f;
				Main.dust[num13].noGravity = true;
				Main.dust[num13].scale = 0.9f + Main.rand.NextFloat() * 1.2f;
				Main.dust[num13].fadeIn = 0.4f + Main.rand.NextFloat() * 1.2f * num11;
				Dust obj2 = Main.dust[num13];
				obj2.velocity += Vector2.UnitY * -2f;
				Main.dust[num13].scale = 0.35f;
				if (num13 != 6000)
				{
					Dust dust = Dust.CloneDust(num13);
					dust.scale /= 2f;
					dust.fadeIn *= 0.85f;
					dust.color = new Color(255, 255, 255, 255);
				}
			}
			this.ai[1] += 1f;
			if (!(this.ai[1] >= 20f && flag2))
			{
				break;
			}
			if (alpha == 255)
			{
				active = false;
				if (Main.netMode != 1)
				{
					NetMessage.SendData(23, -1, -1, null, whoAmI);
				}
				return;
			}
			this.ai[0] = 1f;
			this.ai[1] = 0f;
			netUpdate = true;
			break;
		}
		}
		dontTakeDamage = !flag9;
		damage = GetAttackDamage_ScaledByStrength((float)defDamage * num8);
		if (flag7)
		{
			damage = 9999;
		}
		if (flag)
		{
			defense = (int)((float)defDefense * 1.2f);
		}
		else
		{
			defense = defDefense;
		}
		if ((localAI[0] += 1f) >= 44f)
		{
			localAI[0] = 0f;
		}
		if (flag8)
		{
			alpha = Utils.Clamp(alpha - 5, 0, 255);
		}
		Lighting.AddLight(base.Center, Vector3.One * Opacity);
	}

	private void AI_120_HallowBoss_DashTo(Vector2 targetPosition)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		DirectionTo(targetPosition);
		targetPosition += new Vector2(0f, -300f);
		if (Distance(targetPosition) > 200f)
		{
			targetPosition -= DirectionTo(targetPosition) * 100f;
		}
		Vector2 vector = targetPosition - base.Center;
		float lerpValue = Utils.GetLerpValue(100f, 600f, ((Vector2)(ref vector)).Length(), clamped: true);
		float num = ((Vector2)(ref vector)).Length();
		if (num > 18f)
		{
			num = 18f;
		}
		velocity = Vector2.Lerp(vector.SafeNormalize(Vector2.Zero) * num, vector / 6f, lerpValue);
	}

	public bool Boss_CanShootExtraAt(int playerIndex, int rotationIndexToAttack, int rotationSize, float attackScanDistance, bool alwaysSkipMainTarget = true)
	{
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		if (playerIndex == target && alwaysSkipMainTarget)
		{
			return false;
		}
		if (playerIndex % rotationSize != rotationIndexToAttack)
		{
			return false;
		}
		Player player = Main.player[playerIndex];
		if (!player.active || player.dead || !playerInteraction[playerIndex])
		{
			return false;
		}
		if (Distance(player.Center) > attackScanDistance)
		{
			return false;
		}
		return true;
	}

	private void AI_119_Dandelion()
	{
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01df: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_020d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0212: Unknown result type (might be due to invalid IL or missing references)
		//IL_0214: Unknown result type (might be due to invalid IL or missing references)
		//IL_0219: Unknown result type (might be due to invalid IL or missing references)
		//IL_0234: Unknown result type (might be due to invalid IL or missing references)
		//IL_0236: Unknown result type (might be due to invalid IL or missing references)
		if (!Main.IsItAHappyWindyDay && timeLeft > 10)
		{
			timeLeft = 10;
		}
		bool flag = false;
		float num = 0f;
		float num2 = 0f;
		NPCUtils.TargetClosestDownwindFromNPC(this, 600f);
		NPCAimedTarget targetData = GetTargetData();
		if (targetData.Type == NPCTargetType.Player)
		{
			Rectangle hitbox = targetData.Hitbox;
			float windSpeedCurrent = Main.windSpeedCurrent;
			num = (float)((Rectangle)(ref hitbox)).Center.X - base.Center.X;
			num2 = Math.Abs(num);
			flag = Math.Abs((float)((Rectangle)(ref hitbox)).Center.Y - base.Center.Y) < 100f && num2 < 600f && ((num > 0f && windSpeedCurrent > 0f) || (num < 0f && windSpeedCurrent < 0f));
		}
		if (ai[0] == 1f)
		{
			localAI[0] = 0f;
			if (num2 < 500f)
			{
				localAI[0] = 1f;
			}
			if (Main.netMode == 1)
			{
				return;
			}
			if (!flag)
			{
				ai[0] = 0f;
				netUpdate = true;
			}
			else
			{
				if (localAI[0] != 1f)
				{
					return;
				}
				localAI[1] += 1f;
				if (localAI[1] > 80f)
				{
					ai[0] = 0f;
					netUpdate = true;
				}
				else
				{
					if (localAI[1] != 40f)
					{
						return;
					}
					Vector2 vector = default(Vector2);
					Vector2 vector2 = default(Vector2);
					for (int i = 0; i < 1 + Main.rand.Next(3); i++)
					{
						int num3 = -1;
						if (num > 0f)
						{
							num3 = 1;
						}
						((Vector2)(ref vector))._002Ector((float)(num3 * Main.rand.Next(-2, 10)), (float)(10 + Main.rand.Next(-6, 6)));
						((Vector2)(ref vector2))._002Ector(2f * (float)num3, -2f);
						vector2 += vector * 0.25f;
						if (vector2.Y > -3f)
						{
							vector2.Y = -3f;
						}
						Vector2 vector3 = base.Center + vector;
						vector3.X += num3 * 6;
						int num4 = 7;
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector3, vector2, 836, num4, 1f, Main.myPlayer, 0f, target);
					}
					netUpdate = true;
				}
			}
		}
		else if (ai[0] == 0f)
		{
			localAI[0] = 0f;
			localAI[1] = 0f;
			if (Main.netMode != 1 && flag)
			{
				ai[0] = 1f;
				netUpdate = true;
			}
		}
	}

	private void AI_118_Seahorses()
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_020f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0243: Unknown result type (might be due to invalid IL or missing references)
		//IL_0254: Unknown result type (might be due to invalid IL or missing references)
		//IL_0264: Unknown result type (might be due to invalid IL or missing references)
		//IL_0269: Unknown result type (might be due to invalid IL or missing references)
		noGravity = wet;
		Collision.GetWaterLineIterate(base.Center.ToTileCoordinates(), out var waterLineHeight);
		bool flag = waterLineHeight > 0f && base.Top.Y - waterLineHeight < 20f;
		if (!wet)
		{
			if (velocity.Y == 0f)
			{
				velocity.X *= 0.95f;
			}
			rotation += (velocity.X + velocity.Y) / 2f * 0.05f;
		}
		else
		{
			ai[1] -= 1f;
			if (ai[1] <= 0f)
			{
				velocity += ai[0].ToRotationVector2() * 0.06f;
				float num = ((Vector2)(ref velocity)).Length();
				if (num > 3f || num < -3f)
				{
					velocity.X = Math.Min(3f, Math.Max(-3f, velocity.X));
					ai[1] = Main.rand.Next(450, 600);
					ai[0] = Main.rand.NextFloat() * ((float)Math.PI * 2f);
					if (flag && ai[0] > (float)Math.PI)
					{
						ai[0] -= (float)Math.PI;
					}
					netUpdate = true;
				}
			}
			else
			{
				velocity *= 0.95f;
			}
			rotation = velocity.X * 0.1f;
		}
		bool flag2 = collideY && wet && (!flag || velocity.Y < 0f);
		if (collideX || flag2)
		{
			Vector2 v = ai[0].ToRotationVector2();
			if (collideX)
			{
				v.X *= -1f;
			}
			if (flag2)
			{
				v.Y *= -1f;
			}
			ai[0] = v.ToRotation();
			velocity = ai[0].ToRotationVector2() * ((Vector2)(ref velocity)).Length();
			netUpdate = true;
		}
	}

	private void AI_117_BloodNautilus()
	{
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0102: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_01df: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0177: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0181: Unknown result type (might be due to invalid IL or missing references)
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		//IL_018e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0193: Unknown result type (might be due to invalid IL or missing references)
		//IL_0198: Unknown result type (might be due to invalid IL or missing references)
		//IL_024e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0258: Unknown result type (might be due to invalid IL or missing references)
		//IL_025d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0264: Unknown result type (might be due to invalid IL or missing references)
		//IL_026f: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0500: Unknown result type (might be due to invalid IL or missing references)
		//IL_0503: Unknown result type (might be due to invalid IL or missing references)
		//IL_0508: Unknown result type (might be due to invalid IL or missing references)
		//IL_0660: Unknown result type (might be due to invalid IL or missing references)
		//IL_066c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b29: Unknown result type (might be due to invalid IL or missing references)
		//IL_11be: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_0531: Unknown result type (might be due to invalid IL or missing references)
		//IL_053d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0517: Unknown result type (might be due to invalid IL or missing references)
		//IL_0519: Unknown result type (might be due to invalid IL or missing references)
		//IL_051f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0524: Unknown result type (might be due to invalid IL or missing references)
		//IL_0527: Unknown result type (might be due to invalid IL or missing references)
		//IL_0682: Unknown result type (might be due to invalid IL or missing references)
		//IL_0689: Unknown result type (might be due to invalid IL or missing references)
		//IL_068e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b46: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0420: Unknown result type (might be due to invalid IL or missing references)
		//IL_0553: Unknown result type (might be due to invalid IL or missing references)
		//IL_055a: Unknown result type (might be due to invalid IL or missing references)
		//IL_055f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1203: Unknown result type (might be due to invalid IL or missing references)
		//IL_1209: Unknown result type (might be due to invalid IL or missing references)
		//IL_120e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1213: Unknown result type (might be due to invalid IL or missing references)
		//IL_1256: Unknown result type (might be due to invalid IL or missing references)
		//IL_125b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1262: Unknown result type (might be due to invalid IL or missing references)
		//IL_1267: Unknown result type (might be due to invalid IL or missing references)
		//IL_126d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1272: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1371: Unknown result type (might be due to invalid IL or missing references)
		//IL_1377: Unknown result type (might be due to invalid IL or missing references)
		//IL_137c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1381: Unknown result type (might be due to invalid IL or missing references)
		//IL_1301: Unknown result type (might be due to invalid IL or missing references)
		//IL_130b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1310: Unknown result type (might be due to invalid IL or missing references)
		//IL_1326: Unknown result type (might be due to invalid IL or missing references)
		//IL_1337: Unknown result type (might be due to invalid IL or missing references)
		//IL_134b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1350: Unknown result type (might be due to invalid IL or missing references)
		//IL_1355: Unknown result type (might be due to invalid IL or missing references)
		//IL_135b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1365: Unknown result type (might be due to invalid IL or missing references)
		//IL_136a: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02da: Unknown result type (might be due to invalid IL or missing references)
		//IL_02df: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0308: Unknown result type (might be due to invalid IL or missing references)
		//IL_030d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0317: Unknown result type (might be due to invalid IL or missing references)
		//IL_0321: Unknown result type (might be due to invalid IL or missing references)
		//IL_033d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0343: Unknown result type (might be due to invalid IL or missing references)
		//IL_0345: Unknown result type (might be due to invalid IL or missing references)
		//IL_034b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0350: Unknown result type (might be due to invalid IL or missing references)
		//IL_0355: Unknown result type (might be due to invalid IL or missing references)
		//IL_0357: Unknown result type (might be due to invalid IL or missing references)
		//IL_035c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0361: Unknown result type (might be due to invalid IL or missing references)
		//IL_0363: Unknown result type (might be due to invalid IL or missing references)
		//IL_0365: Unknown result type (might be due to invalid IL or missing references)
		//IL_036d: Unknown result type (might be due to invalid IL or missing references)
		//IL_037a: Unknown result type (might be due to invalid IL or missing references)
		//IL_038b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0391: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bee: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_08fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0901: Unknown result type (might be due to invalid IL or missing references)
		//IL_0906: Unknown result type (might be due to invalid IL or missing references)
		//IL_092e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0935: Unknown result type (might be due to invalid IL or missing references)
		//IL_0741: Unknown result type (might be due to invalid IL or missing references)
		//IL_074b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0750: Unknown result type (might be due to invalid IL or missing references)
		//IL_076f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0775: Unknown result type (might be due to invalid IL or missing references)
		//IL_077a: Unknown result type (might be due to invalid IL or missing references)
		//IL_077f: Unknown result type (might be due to invalid IL or missing references)
		//IL_078e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0790: Unknown result type (might be due to invalid IL or missing references)
		//IL_0797: Unknown result type (might be due to invalid IL or missing references)
		//IL_079c: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_07eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_07fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0801: Unknown result type (might be due to invalid IL or missing references)
		//IL_0806: Unknown result type (might be due to invalid IL or missing references)
		//IL_0817: Unknown result type (might be due to invalid IL or missing references)
		//IL_081c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0829: Unknown result type (might be due to invalid IL or missing references)
		//IL_082b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0832: Unknown result type (might be due to invalid IL or missing references)
		//IL_0837: Unknown result type (might be due to invalid IL or missing references)
		//IL_0841: Unknown result type (might be due to invalid IL or missing references)
		//IL_0846: Unknown result type (might be due to invalid IL or missing references)
		//IL_085d: Unknown result type (might be due to invalid IL or missing references)
		//IL_087e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0883: Unknown result type (might be due to invalid IL or missing references)
		//IL_0894: Unknown result type (might be due to invalid IL or missing references)
		//IL_0899: Unknown result type (might be due to invalid IL or missing references)
		//IL_089e: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_08cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_072b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d91: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d97: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0da1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0da8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0db2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0db7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d63: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d69: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d73: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c25: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c34: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c39: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c53: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c74: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c79: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c94: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ccb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cda: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d18: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d33: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d38: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d54: Unknown result type (might be due to invalid IL or missing references)
		//IL_0947: Unknown result type (might be due to invalid IL or missing references)
		//IL_094e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0954: Unknown result type (might be due to invalid IL or missing references)
		//IL_095b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0960: Unknown result type (might be due to invalid IL or missing references)
		//IL_096a: Unknown result type (might be due to invalid IL or missing references)
		//IL_096f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0974: Unknown result type (might be due to invalid IL or missing references)
		//IL_0645: Unknown result type (might be due to invalid IL or missing references)
		//IL_0626: Unknown result type (might be due to invalid IL or missing references)
		//IL_1178: Unknown result type (might be due to invalid IL or missing references)
		//IL_117e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1183: Unknown result type (might be due to invalid IL or missing references)
		//IL_1188: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f54: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f59: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f60: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f65: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0981: Unknown result type (might be due to invalid IL or missing references)
		//IL_0983: Unknown result type (might be due to invalid IL or missing references)
		//IL_098a: Unknown result type (might be due to invalid IL or missing references)
		//IL_098f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0999: Unknown result type (might be due to invalid IL or missing references)
		//IL_099e: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_09cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_09de: Unknown result type (might be due to invalid IL or missing references)
		//IL_09e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_09e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_09fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a06: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a12: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a17: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a21: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a23: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a39: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a54: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a69: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a84: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a89: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aad: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0abe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ade: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e03: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e12: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e27: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e41: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e52: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e57: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e72: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e86: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e90: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e95: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e97: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ea3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ead: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ec8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0edd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ee2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ef3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ef8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0efd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f14: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f19: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f21: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f26: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f32: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f37: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f77: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f79: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f80: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f85: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f94: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fa9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fde: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ff4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ffc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1001: Unknown result type (might be due to invalid IL or missing references)
		//IL_1008: Unknown result type (might be due to invalid IL or missing references)
		//IL_100d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1012: Unknown result type (might be due to invalid IL or missing references)
		//IL_1017: Unknown result type (might be due to invalid IL or missing references)
		//IL_1019: Unknown result type (might be due to invalid IL or missing references)
		//IL_1020: Unknown result type (might be due to invalid IL or missing references)
		//IL_1025: Unknown result type (might be due to invalid IL or missing references)
		//IL_102f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1034: Unknown result type (might be due to invalid IL or missing references)
		//IL_104a: Unknown result type (might be due to invalid IL or missing references)
		//IL_105f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1064: Unknown result type (might be due to invalid IL or missing references)
		//IL_1075: Unknown result type (might be due to invalid IL or missing references)
		//IL_107a: Unknown result type (might be due to invalid IL or missing references)
		//IL_107f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1096: Unknown result type (might be due to invalid IL or missing references)
		//IL_109b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_10af: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_110c: Unknown result type (might be due to invalid IL or missing references)
		//IL_111d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1122: Unknown result type (might be due to invalid IL or missing references)
		//IL_1127: Unknown result type (might be due to invalid IL or missing references)
		//IL_112f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1131: Unknown result type (might be due to invalid IL or missing references)
		//IL_1138: Unknown result type (might be due to invalid IL or missing references)
		//IL_113d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1142: Unknown result type (might be due to invalid IL or missing references)
		float moveSpeed = 0.15f;
		float num = 7.5f;
		float num12 = 60f;
		float num14 = 90f;
		float num15 = 180f;
		float num16 = 90f;
		float num17 = 90f;
		int num18 = 3;
		float num19 = 180f;
		bool flag = false;
		if (localAI[0] == 0f)
		{
			localAI[0] = 1f;
			alpha = 255;
			if (Main.netMode != 1)
			{
				ai[0] = -1f;
				netUpdate = true;
			}
		}
		if (ai[0] != -1f && Main.rand.Next(4) == 0)
		{
			position += netOffset;
			Dust dust = Dust.NewDustDirect(position + new Vector2(5f), width - 10, height - 10, 5);
			dust.velocity *= 0.5f;
			if (dust.velocity.Y < 0f)
			{
				dust.velocity.Y *= -1f;
			}
			dust.alpha = 120;
			dust.scale = 1f + Main.rand.NextFloat() * 0.4f;
			dust.velocity += velocity * 0.3f;
			position -= netOffset;
		}
		if (target == 255)
		{
			TargetClosest();
			ai[2] = direction;
		}
		if (Main.player[target].dead || Vector2.Distance(Main.player[target].Center, base.Center) > 2000f)
		{
			TargetClosest();
		}
		NPCAimedTarget nPCAimedTarget = GetTargetData();
		if (Main.dayTime || !Main.bloodMoon)
		{
			nPCAimedTarget = default(NPCAimedTarget);
		}
		int num20 = -1;
		Vector2 mouthPosition6 = default(Vector2);
		switch ((int)ai[0])
		{
		case -1:
		{
			velocity *= 0.98f;
			int num9 = Math.Sign(nPCAimedTarget.Center.X - base.Center.X);
			if (num9 != 0)
			{
				direction = num9;
				spriteDirection = -direction;
			}
			if (localAI[1] == 0f && alpha < 100)
			{
				localAI[1] = 1f;
				int num10 = 36;
				for (int l = 0; l < num10; l++)
				{
					position += netOffset;
					Vector2 spinningpoint = Vector2.Normalize(velocity) * new Vector2((float)width / 2f, (float)height) * 0.75f * 0.5f;
					double radians = (float)(l - (num10 / 2 - 1)) * ((float)Math.PI * 2f) / (float)num10;
					mouthPosition6 = default(Vector2);
					Vector2 val = spinningpoint.RotatedBy(radians, mouthPosition6) + base.Center;
					Vector2 vector3 = val - base.Center;
					int num11 = Dust.NewDust(val + vector3, 0, 0, 5, vector3.X * 2f, vector3.Y * 2f, 100, default(Color), 1.4f);
					Main.dust[num11].noGravity = true;
					Main.dust[num11].velocity = Vector2.Normalize(vector3) * 3f;
					position -= netOffset;
				}
			}
			if (ai[2] > 5f)
			{
				velocity.Y = -2.5f;
				alpha -= 10;
				if (Collision.SolidCollision(position, width, height))
				{
					alpha += 15;
					if (alpha > 150)
					{
						alpha = 150;
					}
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			ai[2] += 1f;
			if (ai[2] >= 50f)
			{
				ai[0] = 0f;
				ai[1] = 0f;
				ai[2] = 0f;
				ai[3] = 0f;
				netUpdate = true;
			}
			break;
		}
		case 0:
		{
			Vector2 destination = nPCAimedTarget.Center + new Vector2((0f - ai[2]) * 300f, -200f);
			if (base.Center.Distance(destination) > 50f)
			{
				Vector2 desiredVelocity = DirectionTo(destination) * num;
				SimpleFlyMovement(desiredVelocity, moveSpeed);
			}
			direction = ((base.Center.X < nPCAimedTarget.Center.X) ? 1 : (-1));
			float num7 = base.Center.DirectionTo(nPCAimedTarget.Center).ToRotation() - 0.47123894f * (float)spriteDirection;
			if (spriteDirection == -1)
			{
				num7 += (float)Math.PI;
			}
			if (spriteDirection != direction)
			{
				spriteDirection = direction;
				rotation = 0f - rotation;
				num7 = 0f - num7;
			}
			rotation = rotation.AngleTowards(num7, 0.02f);
			ai[1] += 1f;
			if (ai[1] > num12)
			{
				num20 = 1;
				int num8 = (int)ai[3];
				if (num8 % 7 == 3)
				{
					num20 = 3;
				}
				else if (num8 % 2 == 0)
				{
					SoundEngine.PlaySound(in SoundID.Item170, base.Center);
					num20 = 2;
				}
				else
				{
					SoundEngine.PlaySound(in SoundID.Item170, base.Center);
					num20 = 1;
				}
			}
			break;
		}
		case 1:
		{
			direction = ((!(base.Center.X < nPCAimedTarget.Center.X)) ? 1 : (-1));
			float num13 = base.Center.DirectionFrom(nPCAimedTarget.Center).ToRotation() - 0.47123894f * (float)spriteDirection;
			if (spriteDirection == -1)
			{
				num13 += (float)Math.PI;
			}
			bool flag2 = ai[1] < num14;
			if (spriteDirection != direction && flag2)
			{
				spriteDirection = direction;
				rotation = 0f - rotation;
				num13 = 0f - num13;
			}
			if (ai[1] < num14)
			{
				if (ai[1] == num14 - 1f)
				{
					SoundEngine.PlaySound(in SoundID.Item172, base.Center);
				}
				flag = true;
				velocity *= 0.95f;
				rotation = rotation.AngleLerp(num13, 0.02f);
				position += netOffset;
				BloodNautilus_GetMouthPositionAndRotation(out var mouthPosition4, out var mouthDirection4);
				Dust dust5 = Dust.NewDustDirect(mouthPosition4 + mouthDirection4 * 60f - new Vector2(40f), 80, 80, 16, 0f, 0f, 150, Color.Transparent, 0.6f);
				dust5.fadeIn = 1f;
				dust5.velocity = dust5.position.DirectionTo(mouthPosition4 + Main.rand.NextVector2Circular(15f, 15f)) * ((Vector2)(ref dust5.velocity)).Length();
				dust5.noGravity = true;
				dust5 = Dust.NewDustDirect(mouthPosition4 + mouthDirection4 * 100f - new Vector2(30f), 60, 60, 16, 0f, 0f, 100, Color.Transparent, 0.9f);
				dust5.fadeIn = 1.5f;
				dust5.velocity = dust5.position.DirectionTo(mouthPosition4 + Main.rand.NextVector2Circular(15f, 15f)) * (((Vector2)(ref dust5.velocity)).Length() + 5f);
				dust5.noGravity = true;
				position -= netOffset;
			}
			else if (ai[1] < num14 + num15)
			{
				position += netOffset;
				rotation = rotation.AngleLerp(num13, 0.05f);
				BloodNautilus_GetMouthPositionAndRotation(out var mouthPosition5, out var mouthDirection5);
				if (base.Center.Distance(nPCAimedTarget.Center) > 150f)
				{
					velocity = mouthDirection5 * -16f + base.Center.DirectionTo(nPCAimedTarget.Center) * 1.5f;
				}
				for (int m = 0; m < 4; m++)
				{
					Dust dust6 = Dust.NewDustDirect(mouthPosition5 + mouthDirection5 * 60f - new Vector2(15f), 30, 30, 5, 0f, 0f, 0, Color.Transparent, 1.5f);
					dust6.velocity = dust6.position.DirectionFrom(mouthPosition5 + Main.rand.NextVector2Circular(5f, 5f)) * ((Vector2)(ref dust6.velocity)).Length();
					Dust dust12 = dust6;
					dust12.position -= mouthDirection5 * 60f;
					dust6 = Dust.NewDustDirect(mouthPosition5 + mouthDirection5 * 100f - new Vector2(20f), 40, 40, 5, 0f, 0f, 100, Color.Transparent, 1.5f);
					dust6.velocity = dust6.position.DirectionFrom(mouthPosition5 + Main.rand.NextVector2Circular(10f, 10f)) * (((Vector2)(ref dust6.velocity)).Length() + 5f);
					Dust dust13 = dust6;
					dust13.position -= mouthDirection5 * 100f;
				}
				position -= netOffset;
			}
			ai[1] += 1f;
			if (ai[1] >= num14 + num15)
			{
				num20 = 0;
			}
			break;
		}
		case 2:
		{
			direction = ((base.Center.X < nPCAimedTarget.Center.X) ? 1 : (-1));
			float num4 = base.Center.DirectionTo(nPCAimedTarget.Center).ToRotation() - 0.47123894f * (float)spriteDirection;
			if (spriteDirection == -1)
			{
				num4 += (float)Math.PI;
			}
			if (spriteDirection != direction)
			{
				spriteDirection = direction;
				rotation = 0f - rotation;
				num4 = 0f - num4;
			}
			rotation = rotation.AngleLerp(num4, 0.2f);
			if (ai[1] < num16)
			{
				position += netOffset;
				velocity *= 0.95f;
				BloodNautilus_GetMouthPositionAndRotation(out var mouthPosition2, out var mouthDirection2);
				if (Main.rand.Next(4) != 0)
				{
					Dust dust2 = Dust.NewDustDirect(mouthPosition2 + mouthDirection2 * 60f - new Vector2(60f), 120, 120, 16, 0f, 0f, 150, Color.Transparent, 0.6f);
					dust2.fadeIn = 1f;
					dust2.velocity = dust2.position.DirectionTo(mouthPosition2 + Main.rand.NextVector2Circular(15f, 15f)) * (((Vector2)(ref dust2.velocity)).Length() + 3f);
					dust2.noGravity = true;
					dust2 = Dust.NewDustDirect(mouthPosition2 + mouthDirection2 * 100f - new Vector2(80f), 160, 160, 16, 0f, 0f, 100, Color.Transparent, 0.9f);
					dust2.fadeIn = 1.5f;
					dust2.velocity = dust2.position.DirectionTo(mouthPosition2 + Main.rand.NextVector2Circular(15f, 15f)) * (((Vector2)(ref dust2.velocity)).Length() + 5f);
					dust2.noGravity = true;
				}
				position -= netOffset;
			}
			else if (ai[1] < num16 + num17)
			{
				position += netOffset;
				velocity *= 0.9f;
				float num5 = (ai[1] - num16) % (num17 / (float)num18);
				BloodNautilus_GetMouthPositionAndRotation(out var mouthPosition3, out var mouthDirection3);
				if (num5 < num17 / (float)num18 * 0.8f)
				{
					for (int i = 0; i < 5; i++)
					{
						Dust dust3 = Dust.NewDustDirect(mouthPosition3 + mouthDirection3 * 50f - new Vector2(15f), 30, 30, 5, 0f, 0f, 0, Color.Transparent, 1.5f);
						dust3.velocity = dust3.position.DirectionFrom(mouthPosition3 + Main.rand.NextVector2Circular(5f, 5f)) * ((Vector2)(ref dust3.velocity)).Length();
						Dust dust8 = dust3;
						dust8.position -= mouthDirection3 * 60f;
						dust3 = Dust.NewDustDirect(mouthPosition3 + mouthDirection3 * 90f - new Vector2(20f), 40, 40, 5, 0f, 0f, 100, Color.Transparent, 1.5f);
						dust3.velocity = dust3.position.DirectionFrom(mouthPosition3 + Main.rand.NextVector2Circular(10f, 10f)) * (((Vector2)(ref dust3.velocity)).Length() + 5f);
						Dust dust9 = dust3;
						dust9.position -= mouthDirection3 * 100f;
					}
				}
				if ((int)num5 == 0)
				{
					velocity += mouthDirection3 * -8f;
					for (int j = 0; j < 20; j++)
					{
						Dust dust4 = Dust.NewDustDirect(mouthPosition3 + mouthDirection3 * 60f - new Vector2(15f), 30, 30, 5, 0f, 0f, 0, Color.Transparent, 1.5f);
						dust4.velocity = dust4.position.DirectionFrom(mouthPosition3 + Main.rand.NextVector2Circular(5f, 5f)) * ((Vector2)(ref dust4.velocity)).Length();
						Dust dust10 = dust4;
						dust10.position -= mouthDirection3 * 60f;
						dust4 = Dust.NewDustDirect(mouthPosition3 + mouthDirection3 * 100f - new Vector2(20f), 40, 40, 5, 0f, 0f, 100, Color.Transparent, 1.5f);
						dust4.velocity = dust4.position.DirectionFrom(mouthPosition3 + Main.rand.NextVector2Circular(10f, 10f)) * (((Vector2)(ref dust4.velocity)).Length() + 5f);
						Dust dust11 = dust4;
						dust11.position -= mouthDirection3 * 100f;
					}
					if (Main.netMode != 1)
					{
						int num6 = Main.rand.Next(5, 11);
						Vector2 vector = mouthDirection3 * 10f;
						int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(30f, 25f);
						for (int k = 0; k < num6; k++)
						{
							Vector2 vector2 = vector + Main.rand.NextVector2Square(-6f, 6f);
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), mouthPosition3 - mouthDirection3 * 5f, vector2, 814, attackDamage_ForProjectiles, 0f, Main.myPlayer);
						}
					}
				}
				position -= netOffset;
			}
			ai[1] += 1f;
			if (ai[1] >= num16 + num17)
			{
				num20 = 0;
			}
			break;
		}
		case 3:
		{
			direction = ((base.Center.X < nPCAimedTarget.Center.X) ? 1 : (-1));
			float targetAngle = 0f;
			spriteDirection = direction;
			if (ai[1] < num19)
			{
				position += netOffset;
				float num2 = MathHelper.Clamp(1f - ai[1] / num19 * 1.5f, 0f, 1f);
				((Vector2)(ref mouthPosition6))._002Ector(0f, num2 * -1.5f);
				velocity = Vector2.Lerp(velocity, mouthPosition6, 0.03f);
				velocity = Vector2.Zero;
				rotation = rotation.AngleLerp(targetAngle, 0.02f);
				BloodNautilus_GetMouthPositionAndRotation(out mouthPosition6, out var _);
				float t = ai[1] / num19;
				float num3 = Utils.GetLerpValue(0f, 0.5f, t) * Utils.GetLerpValue(1f, 0.5f, t);
				Lighting.AddLight(base.Center, new Vector3(1f, 0.5f, 0.5f) * num3);
				if (Main.rand.Next(3) != 0)
				{
					Dust dust7 = Dust.NewDustDirect(base.Center - new Vector2(6f), 12, 12, 5, 0f, 0f, 60, Color.Transparent, 1.4f);
					dust7.position += new Vector2((float)(spriteDirection * 12), 12f);
					dust7.velocity *= 0.1f;
				}
				position -= netOffset;
			}
			if (ai[1] == 10f || ai[1] == 20f || ai[1] == 30f)
			{
				BloodNautilus_CallForHelp();
			}
			ai[1] += 1f;
			if (ai[1] >= num19)
			{
				num20 = 0;
			}
			break;
		}
		}
		if (num20 != -1)
		{
			ai[0] = num20;
			ai[1] = 0f;
			ai[2] = 0f;
			netUpdate = true;
			TargetClosest();
			if (num20 == 0)
			{
				ai[2] = direction;
			}
			else
			{
				ai[3] += 1f;
			}
		}
		reflectsProjectiles = flag;
	}

	private void BloodNautilus_CallForHelp()
	{
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_011d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a3: Unknown result type (might be due to invalid IL or missing references)
		if (Main.netMode == 1 || !Main.player[target].active || Main.player[target].dead || Distance(Main.player[target].Center) > 2000f || CountNPCS(619) >= 3)
		{
			return;
		}
		Point point = base.Center.ToTileCoordinates();
		Point point2 = point;
		int num = 20;
		int num2 = 3;
		int num3 = 8;
		int num4 = 2;
		int num5 = 0;
		bool flag = false;
		while (!flag && num5 < 100)
		{
			num5++;
			int num6 = Main.rand.Next(point2.X - num, point2.X + num + 1);
			int num7 = Main.rand.Next(point2.Y - num, point2.Y + num + 1);
			if ((num7 < point2.Y - num3 || num7 > point2.Y + num3 || num6 < point2.X - num3 || num6 > point2.X + num3) && (num7 < point.Y - num2 || num7 > point.Y + num2 || num6 < point.X - num2 || num6 > point.X + num2) && !Main.tile[num6, num7].nactive())
			{
				bool flag2 = true;
				if (flag2 && Main.tile[num6, num7].lava())
				{
					flag2 = false;
				}
				if (flag2 && Collision.SolidTiles(num6 - num4, num6 + num4, num7 - num4, num7 + num4))
				{
					flag2 = false;
				}
				if (flag2 && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
				{
					flag2 = false;
				}
				if (flag2)
				{
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), num6 * 16 + 8, num7 * 16 + 8, 0f, 0f, 813, 0, 0f, Main.myPlayer);
					flag = true;
					break;
				}
			}
		}
	}

	private void AI_116_WaterStriders()
	{
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		bool flag = false;
		if (Collision.GetWaterLine(base.Center.ToTileCoordinates(), out var waterLineHeight))
		{
			float num = base.Bottom.Y - 1f;
			if (base.Center.Y > waterLineHeight)
			{
				velocity.Y -= 0.8f;
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
				if (num + velocity.Y < waterLineHeight)
				{
					velocity.Y = waterLineHeight - num;
				}
			}
			else
			{
				velocity.Y = MathHelper.Min(velocity.Y, waterLineHeight - num);
				flag = true;
			}
		}
		else if (wet)
		{
			velocity.Y -= 0.2f;
		}
		if ((int)ai[0] != 0)
		{
			return;
		}
		ai[1] += 1f;
		velocity.X *= 0.9f;
		if (velocity.Y == 0f)
		{
			velocity.X *= 0.6f;
		}
		bool flag2 = wet || flag;
		bool flag3 = flag2 || velocity.Y == 0f;
		int num2 = Main.rand.Next(120, 241);
		if (!flag2)
		{
			num2 = Main.rand.Next(60, 241);
		}
		if (!flag3 || !(ai[1] >= (float)num2))
		{
			return;
		}
		ai[1] = 0f;
		velocity.X = Main.rand.NextFloatDirection() * 5f;
		netUpdate = true;
		if (!flag2)
		{
			if (velocity.Y == 0f)
			{
				velocity.Y = -2f;
			}
			ai[1] = 60f;
		}
	}

	private void AI_115_LadyBugs()
	{
		//IL_01ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0217: Unknown result type (might be due to invalid IL or missing references)
		//IL_021c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0222: Unknown result type (might be due to invalid IL or missing references)
		//IL_0227: Unknown result type (might be due to invalid IL or missing references)
		//IL_047c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0494: Unknown result type (might be due to invalid IL or missing references)
		//IL_0244: Unknown result type (might be due to invalid IL or missing references)
		//IL_0254: Unknown result type (might be due to invalid IL or missing references)
		//IL_05dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_05fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0340: Unknown result type (might be due to invalid IL or missing references)
		//IL_0351: Unknown result type (might be due to invalid IL or missing references)
		//IL_017f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0533: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_0558: Unknown result type (might be due to invalid IL or missing references)
		if (Main.netMode != 1)
		{
			if (ai[1] == 0f)
			{
				ai[1] = Main.rand.NextFloat() * 0.2f + 0.7f;
				netUpdate = true;
			}
			if ((localAI[0] -= 1f) <= 0f)
			{
				localAI[0] = Main.rand.Next(60, 181);
				if (Main.rand.Next(5) == 0)
				{
					if (ai[2] == 0f)
					{
						ai[2] = 1f;
						ai[0] = 0f;
						netUpdate = true;
					}
					else if (ai[2] == 1f)
					{
						TargetClosest();
						ai[2] = 0f;
						ai[0] = Main.rand.NextFloat() * ((float)Math.PI * 2f);
						if (Distance(Main.player[target].Center) > 700f)
						{
							ai[0] = AngleTo(Main.player[target].Center) + Main.rand.NextFloatDirection() * 0.3f;
						}
						netUpdate = true;
					}
				}
				TargetClosest();
				ai[0] = Main.rand.NextFloat() * ((float)Math.PI * 2f);
				if (Distance(Main.player[target].Center) > 700f)
				{
					ai[0] = AngleTo(Main.player[target].Center) + Main.rand.NextFloatDirection() * 0.3f;
				}
				netUpdate = true;
			}
		}
		scale = ai[1];
		if (ai[2] == 0f)
		{
			Vector2 value = ai[0].ToRotationVector2() * 1f;
			value.X += Main.windSpeedTarget * 0.8f;
			velocity = Vector2.Lerp(velocity, value, 0.0125f);
			if (velocity.Y > 0f)
			{
				int num = 4;
				int num2 = (int)base.Center.X / 16;
				int num3 = (int)base.Center.Y / 16;
				for (int i = num3; i < num3 + num; i++)
				{
					if (Main.tile[num2, i] != null && ((Main.tile[num2, i].nactive() && Main.tileSolid[Main.tile[num2, i].type]) || Main.tile[num2, i].liquid > 0))
					{
						ai[0] = 0f - ai[0];
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.9f;
						}
					}
				}
			}
			if (velocity.Y < 0f)
			{
				int num4 = 30;
				bool flag = false;
				int num5 = (int)base.Center.X / 16;
				int num6 = (int)base.Center.Y / 16;
				for (int j = num6; j < num6 + num4; j++)
				{
					if (Main.tile[num5, j] != null && ((Main.tile[num5, j].nactive() && Main.tileSolid[Main.tile[num5, j].type]) || Main.tile[num5, j].liquid > 0))
					{
						flag = true;
					}
				}
				if (!flag)
				{
					ai[0] = 0f - ai[0];
					if (velocity.Y < 0f)
					{
						velocity.Y *= 0.9f;
					}
				}
			}
			if (collideX)
			{
				ai[0] = 0f - ai[0] + (float)Math.PI;
				velocity.X *= -0.2f;
			}
		}
		else
		{
			if (velocity.Y > 0f)
			{
				int num7 = 4;
				int num8 = (int)base.Center.X / 16 + direction;
				int num9 = (int)base.Center.Y / 16;
				for (int k = num9; k < num9 + num7; k++)
				{
					if (Main.tile[num8, k] != null && Main.tile[num8, k].liquid > 0)
					{
						TargetClosest();
						velocity.Y = -1f;
						ai[2] = 0f;
						ai[0] = Main.rand.NextFloat() * ((float)Math.PI / 4f) - (float)Math.PI / 2f;
						if (Distance(Main.player[target].Center) > 700f)
						{
							ai[0] = AngleTo(Main.player[target].Center) + Main.rand.NextFloatDirection() * 0.3f;
						}
						netUpdate = true;
						return;
					}
				}
			}
			if (velocity.Y != 0f)
			{
				velocity.X *= 0.98f;
				velocity.Y = MathHelper.Lerp(velocity.Y, 2f, 0.005f);
			}
			else
			{
				velocity = Vector2.Lerp(velocity, Vector2.UnitX * (float)direction, 0.05f);
				velocity.Y += 0.2f;
				if (collideX)
				{
					direction *= -1;
					velocity.X *= -0.2f;
					netUpdate = true;
				}
			}
		}
		direction = ((velocity.X > 0f) ? 1 : (-1));
	}

	private void AI_114_Dragonflies()
	{
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_0214: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0155: Unknown result type (might be due to invalid IL or missing references)
		//IL_013c: Unknown result type (might be due to invalid IL or missing references)
		//IL_013e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0148: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_026a: Unknown result type (might be due to invalid IL or missing references)
		//IL_027b: Unknown result type (might be due to invalid IL or missing references)
		//IL_047d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0482: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_0165: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_018f: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_050c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0512: Unknown result type (might be due to invalid IL or missing references)
		//IL_0560: Unknown result type (might be due to invalid IL or missing references)
		//IL_0562: Unknown result type (might be due to invalid IL or missing references)
		//IL_0567: Unknown result type (might be due to invalid IL or missing references)
		//IL_0568: Unknown result type (might be due to invalid IL or missing references)
		//IL_056b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0570: Unknown result type (might be due to invalid IL or missing references)
		//IL_0573: Unknown result type (might be due to invalid IL or missing references)
		//IL_0578: Unknown result type (might be due to invalid IL or missing references)
		//IL_0579: Unknown result type (might be due to invalid IL or missing references)
		//IL_057e: Unknown result type (might be due to invalid IL or missing references)
		//IL_04cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_052b: Unknown result type (might be due to invalid IL or missing references)
		//IL_052f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0534: Unknown result type (might be due to invalid IL or missing references)
		//IL_0539: Unknown result type (might be due to invalid IL or missing references)
		//IL_053e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0625: Unknown result type (might be due to invalid IL or missing references)
		//IL_062b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0630: Unknown result type (might be due to invalid IL or missing references)
		//IL_0635: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_05bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_05fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0597: Unknown result type (might be due to invalid IL or missing references)
		//IL_059c: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_0701: Unknown result type (might be due to invalid IL or missing references)
		if (localAI[0] == 0f && Main.netMode != 1)
		{
			localAI[0] = 1f;
			Vector2 center = base.Center;
			ai[2] = center.X;
			ai[3] = center.Y;
			velocity = (Main.rand.NextVector2Circular(5f, 3f) + Main.rand.NextVector2CircularEdge(5f, 3f)) * 0.4f;
			ai[1] = 0f;
			ai[0] = 1f;
			netUpdate = true;
		}
		switch ((int)ai[0])
		{
		case 0:
			velocity *= 0.94f;
			if (Main.netMode != 1 && (ai[1] += 1f) >= (float)(60 + Main.rand.Next(60)))
			{
				Vector2 vector = default(Vector2);
				((Vector2)(ref vector))._002Ector(ai[2], ai[3]);
				if (Distance(vector) > 96f)
				{
					velocity = DirectionTo(vector) * 3f;
				}
				else if (Distance(vector) > 16f)
				{
					velocity = DirectionTo(vector) * 1f + Main.rand.NextVector2Circular(1f, 0.5f);
				}
				else
				{
					velocity = (Main.rand.NextVector2Circular(5f, 3f) + Main.rand.NextVector2CircularEdge(5f, 3f)) * 0.4f;
				}
				ai[1] = 0f;
				ai[0] = 1f;
				netUpdate = true;
			}
			break;
		case 1:
		{
			int num = 4;
			Vector2 other = default(Vector2);
			((Vector2)(ref other))._002Ector(ai[2], ai[3]);
			if (Distance(other) > 112f)
			{
				num = 200;
			}
			if ((ai[1] += 1f) >= (float)num)
			{
				ai[1] = 0f;
				ai[0] = 0f;
				netUpdate = true;
			}
			int num2 = (int)base.Center.X / 16;
			int num3 = (int)base.Center.Y / 16;
			int num4 = 3;
			for (int i = num3; i < num3 + num4; i++)
			{
				if (Main.tile[num2, i] != null && ((Main.tile[num2, i].nactive() && Main.tileSolid[Main.tile[num2, i].type]) || Main.tile[num2, i].liquid > 0))
				{
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.9f;
					}
					velocity.Y -= 0.2f;
				}
			}
			if (!(velocity.Y < 0f))
			{
				break;
			}
			int num5 = 30;
			bool flag = false;
			for (int j = num3; j < num3 + num5; j++)
			{
				if (Main.tile[num2, j] != null && Main.tile[num2, j].nactive() && Main.tileSolid[Main.tile[num2, j].type])
				{
					flag = true;
					break;
				}
			}
			if (!flag && velocity.Y < 0f)
			{
				velocity.Y *= 0.9f;
			}
			break;
		}
		}
		if (velocity.X != 0f)
		{
			direction = ((velocity.X > 0f) ? 1 : (-1));
		}
		if (wet)
		{
			velocity.Y = -3f;
		}
		if (localAI[1] > 0f)
		{
			localAI[1] -= 1f;
			return;
		}
		localAI[1] = 15f;
		float num6 = 0f;
		Vector2 zero = Vector2.Zero;
		for (int k = 0; k < 200; k++)
		{
			NPC nPC = Main.npc[k];
			if (nPC.active && nPC.damage > 0 && !nPC.friendly && nPC.Hitbox.Distance(base.Center) <= 100f)
			{
				num6 += 1f;
				zero += DirectionFrom(nPC.Center);
			}
		}
		for (int l = 0; l < 255; l++)
		{
			Player player = Main.player[l];
			if (player.active && player.Hitbox.Distance(base.Center) <= 150f)
			{
				num6 += 1f;
				zero += DirectionFrom(player.Center);
			}
		}
		if (num6 > 0f)
		{
			float num7 = 2f;
			zero /= num6;
			zero *= num7;
			velocity += zero;
			if (((Vector2)(ref velocity)).Length() > 16f)
			{
				velocity = velocity.SafeNormalize(Vector2.Zero) * 16f;
			}
			Vector2 vector2 = base.Center + zero * 10f;
			ai[1] = -10f;
			ai[0] = 1f;
			ai[2] = vector2.X;
			ai[3] = vector2.Y;
			netUpdate = true;
		}
		else
		{
			if (Main.netMode == 1)
			{
				return;
			}
			Vector2 val = new Vector2(ai[2], ai[3]) - base.Center;
			if (!(((Vector2)(ref val)).Length() < 16f))
			{
				return;
			}
			int maxValue = 30;
			if (Main.tile[(int)ai[2] / 16, (int)ai[3] / 16].type != 519)
			{
				maxValue = 4;
			}
			if (Main.rand.Next(maxValue) != 0)
			{
				return;
			}
			int cattailX = (int)ai[2];
			int cattailY = (int)ai[2];
			if (FindCattailTop((int)ai[2] / 16, (int)ai[3] / 16, out cattailX, out cattailY))
			{
				ai[2] = cattailX * 16;
				ai[3] = cattailY * 16;
				netUpdate = true;
				return;
			}
			int num8 = (int)(base.Center.X / 16f);
			int m;
			for (m = (int)(base.Center.Y / 16f); !WorldGen.SolidTile(num8, m) && (double)m < Main.worldSurface; m++)
			{
			}
			m -= Main.rand.Next(3, 6);
			ai[2] = num8 * 16;
			ai[3] = m * 16;
			netUpdate = true;
		}
	}

	private void AI_113_WindyBalloon()
	{
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_0147: Unknown result type (might be due to invalid IL or missing references)
		//IL_0157: Unknown result type (might be due to invalid IL or missing references)
		//IL_0164: Unknown result type (might be due to invalid IL or missing references)
		//IL_017e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01be: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_087b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01db: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_020c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_052f: Unknown result type (might be due to invalid IL or missing references)
		//IL_054c: Unknown result type (might be due to invalid IL or missing references)
		//IL_058c: Unknown result type (might be due to invalid IL or missing references)
		//IL_061f: Unknown result type (might be due to invalid IL or missing references)
		//IL_073d: Unknown result type (might be due to invalid IL or missing references)
		//IL_074c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0751: Unknown result type (might be due to invalid IL or missing references)
		//IL_0769: Unknown result type (might be due to invalid IL or missing references)
		//IL_076e: Unknown result type (might be due to invalid IL or missing references)
		//IL_077a: Unknown result type (might be due to invalid IL or missing references)
		//IL_077f: Unknown result type (might be due to invalid IL or missing references)
		if (localAI[0] == 0f && Main.netMode != 1)
		{
			TargetClosest();
			localAI[0] = 1f;
			ai[2] = Main.rand.Next(7) + 1;
			int num = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)position.X, (int)position.Y, 1);
			if (Main.rand.Next(180) == 0)
			{
				Main.npc[num].SetDefaults(-4);
			}
			else if (Main.rand.Next(10) == 0)
			{
				Main.npc[num].SetDefaults(-7);
			}
			else if (Main.rand.Next(3) == 0)
			{
				Main.npc[num].SetDefaults(-3);
			}
			Main.npc[num].ai[0] = -999f;
			Main.npc[num].netUpdate = true;
			ai[3] = num;
			netUpdate = true;
			ai[1] = Main.npc[num].scale;
		}
		position = base.Center;
		base.Size = new Vector2(20f, 20f) * ai[1];
		scale = ai[1];
		base.Center = position;
		NPC nPC = AI_113_WindyBalloon_GetSlaveNPC();
		rotation = velocity.X * 0.05f;
		if (nPC != null)
		{
			NPCAimedTarget targetData = GetTargetData();
			float num4 = float.PositiveInfinity;
			int num5 = 0;
			Vector2 zero = Vector2.Zero;
			if (!targetData.Invalid)
			{
				zero = targetData.Center - base.Bottom;
				if (zero.Y < 0f)
				{
					num5 = (int)zero.Y / -16;
				}
				num4 = ((Vector2)(ref zero)).Length();
				if (direction != Math.Sign(zero.X))
				{
					num5 = 0;
				}
			}
			if (wet || nPC.wet || collideX || (collideY && oldVelocity.Y < 0f))
			{
				float num6 = oldVelocity.X + (float)(direction * 8);
				position.X -= num6;
				nPC.position.X -= num6;
				TargetClosest(faceTarget: false);
				direction *= -1;
				velocity.X = direction * 2;
				life = -1;
				HitEffect();
				active = false;
				netUpdate = true;
				SoundEngine.PlaySound(DeathSound, position);
				return;
			}
			if (collideY)
			{
				velocity.Y = ((oldVelocity.Y > 0f) ? 1 : (-1));
				TargetClosest(faceTarget: false);
			}
			float num7 = 2f + Math.Abs(Main.windSpeedTarget) * 2f;
			if (Math.Sign(velocity.X) != direction || Math.Abs(velocity.X) < num7)
			{
				velocity.X += (float)direction * 0.01f;
				if (velocity.X * (float)direction < 0f)
				{
					if (Math.Abs(velocity.X) > num7)
					{
						velocity.X += (float)direction * 0.1f;
					}
					else
					{
						velocity.X += (float)direction * 0.05f;
					}
				}
				else if (Math.Abs(velocity.X) > num7)
				{
					velocity.X = (float)direction * num7;
				}
			}
			int num8 = (int)((position.X + (float)(width / 2)) / 16f) + direction;
			int num9 = (int)((position.Y + (float)height) / 16f);
			bool flag = true;
			int num10 = 8 + num5;
			bool flag2 = false;
			for (int i = num9; i < num9 + num10; i++)
			{
				if (Main.tile[num8, i] == null)
				{
					Main.tile[num8, i] = default(Tile);
				}
				if ((Main.tile[num8, i].nactive() && Main.tileSolid[Main.tile[num8, i].type]) || Main.tile[num8, i].liquid > 0)
				{
					if (i < num9 + 5 + num5)
					{
						flag2 = true;
					}
					flag = false;
					break;
				}
			}
			if (num4 < 400f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
			{
				float num11 = 2f;
				float num2 = 0.035f;
				if (base.Center.Y + (float)(height / 4) > Main.player[target].position.Y + (float)(Main.player[target].height / 4) && velocity.Y > 0f - num11)
				{
					velocity.Y -= num2;
					if (velocity.Y > 0f)
					{
						velocity.Y -= num2;
					}
				}
				else if (base.Center.Y + (float)(height / 4) < Main.player[target].position.Y + (float)(Main.player[target].height / 4) && velocity.Y < num11)
				{
					velocity.Y += num2;
					if (velocity.Y < 0f)
					{
						velocity.Y += num2;
					}
				}
			}
			else
			{
				if (flag)
				{
					velocity.Y += 0.05f;
				}
				else
				{
					velocity.Y -= 0.1f;
				}
				if (flag2)
				{
					velocity.Y -= 0.2f;
				}
				if (velocity.Y > 2f)
				{
					velocity.Y = 2f;
				}
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
			}
			nPC.Center = base.Bottom + new Vector2(0f, -8f) + new Vector2(0f, 56f * ai[1]);
			nPC.velocity = velocity;
		}
		else
		{
			velocity.Y = MathHelper.Clamp(velocity.Y - 0.2f, -8f, 8f);
			velocity.X = MathHelper.Clamp(velocity.X + Main.windSpeedTarget * 0.3f, -4f, 4f);
			if (collideX || collideY)
			{
				float num3 = oldVelocity.X + (float)(direction * 8);
				position.X -= num3;
				TargetClosest(faceTarget: false);
				direction *= -1;
				velocity.X = direction * 2;
				life = -1;
				HitEffect();
				active = false;
				netUpdate = true;
				SoundEngine.PlaySound(DeathSound, position);
			}
		}
	}

	public NPC AI_113_WindyBalloon_GetSlaveNPC()
	{
		NPC nPC = null;
		int num = (int)ai[3];
		if (num >= 0 && num < 200)
		{
			nPC = Main.npc[num];
			if (!nPC.active || nPC.type != 1 || nPC.ai[0] != -999f)
			{
				nPC = null;
				ai[3] = -1f;
				netUpdate = true;
			}
		}
		else
		{
			nPC = null;
		}
		return nPC;
	}

	private void AI_112_FairyCritter()
	{
		//IL_107c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a87: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a92: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a97: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0192: Unknown result type (might be due to invalid IL or missing references)
		//IL_0199: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_010e: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_06cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0644: Unknown result type (might be due to invalid IL or missing references)
		//IL_064f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0960: Unknown result type (might be due to invalid IL or missing references)
		//IL_096b: Unknown result type (might be due to invalid IL or missing references)
		//IL_093b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0945: Unknown result type (might be due to invalid IL or missing references)
		//IL_094a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cf4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d01: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d05: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c51: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0767: Unknown result type (might be due to invalid IL or missing references)
		//IL_076a: Unknown result type (might be due to invalid IL or missing references)
		//IL_076f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0774: Unknown result type (might be due to invalid IL or missing references)
		//IL_0777: Unknown result type (might be due to invalid IL or missing references)
		//IL_0779: Unknown result type (might be due to invalid IL or missing references)
		//IL_0783: Unknown result type (might be due to invalid IL or missing references)
		//IL_0788: Unknown result type (might be due to invalid IL or missing references)
		//IL_078b: Unknown result type (might be due to invalid IL or missing references)
		//IL_06df: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d37: Unknown result type (might be due to invalid IL or missing references)
		//IL_1178: Unknown result type (might be due to invalid IL or missing references)
		//IL_117d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1192: Unknown result type (might be due to invalid IL or missing references)
		//IL_1197: Unknown result type (might be due to invalid IL or missing references)
		//IL_119a: Unknown result type (might be due to invalid IL or missing references)
		//IL_119c: Unknown result type (might be due to invalid IL or missing references)
		//IL_119e: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_11bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_027d: Unknown result type (might be due to invalid IL or missing references)
		//IL_079d: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0edd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ee0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ee5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eea: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eed: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ef4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ef7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1470: Unknown result type (might be due to invalid IL or missing references)
		//IL_1475: Unknown result type (might be due to invalid IL or missing references)
		//IL_1476: Unknown result type (might be due to invalid IL or missing references)
		//IL_147b: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_07cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_07dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_07bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0702: Unknown result type (might be due to invalid IL or missing references)
		//IL_0712: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f09: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f10: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f15: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d60: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bce: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bde: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_148b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1490: Unknown result type (might be due to invalid IL or missing references)
		//IL_1491: Unknown result type (might be due to invalid IL or missing references)
		//IL_1496: Unknown result type (might be due to invalid IL or missing references)
		//IL_087d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0884: Unknown result type (might be due to invalid IL or missing references)
		//IL_07fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a12: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a14: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a16: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f31: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f36: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f22: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f29: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_14aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_14af: Unknown result type (might be due to invalid IL or missing references)
		//IL_0213: Unknown result type (might be due to invalid IL or missing references)
		//IL_0218: Unknown result type (might be due to invalid IL or missing references)
		//IL_021f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0224: Unknown result type (might be due to invalid IL or missing references)
		//IL_0229: Unknown result type (might be due to invalid IL or missing references)
		//IL_0896: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fed: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ff2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ff9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ffe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f51: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f56: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f62: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0def: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df9: Unknown result type (might be due to invalid IL or missing references)
		//IL_121c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b69: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b75: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1581: Unknown result type (might be due to invalid IL or missing references)
		//IL_1588: Unknown result type (might be due to invalid IL or missing references)
		//IL_1592: Unknown result type (might be due to invalid IL or missing references)
		//IL_14bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_14c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_14cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_14d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_14dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_14e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_14eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_150a: Unknown result type (might be due to invalid IL or missing references)
		//IL_150b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1516: Unknown result type (might be due to invalid IL or missing references)
		//IL_1527: Unknown result type (might be due to invalid IL or missing references)
		//IL_1531: Unknown result type (might be due to invalid IL or missing references)
		//IL_1536: Unknown result type (might be due to invalid IL or missing references)
		//IL_153d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1543: Unknown result type (might be due to invalid IL or missing references)
		//IL_154d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1552: Unknown result type (might be due to invalid IL or missing references)
		//IL_1557: Unknown result type (might be due to invalid IL or missing references)
		//IL_156b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1571: Unknown result type (might be due to invalid IL or missing references)
		//IL_1576: Unknown result type (might be due to invalid IL or missing references)
		//IL_157b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e09: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e15: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1279: Unknown result type (might be due to invalid IL or missing references)
		//IL_1286: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e73: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e78: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e82: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e86: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e92: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e97: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_15b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_15bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ece: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed3: Unknown result type (might be due to invalid IL or missing references)
		bool flag = false;
		lavaImmune = true;
		if (Main.netMode != 1 && ai[2] > 1f)
		{
			int num = 18000;
			localAI[1] += 1f;
			if (localAI[1] >= (float)num)
			{
				ai[2] = 7f;
				if (Main.player[target].Center.X < base.Center.X)
				{
					direction = 1;
				}
				else
				{
					direction = -1;
				}
				netUpdate = true;
			}
		}
		Rectangle val;
		switch ((int)ai[2])
		{
		case 0:
		{
			lavaImmune = false;
			noTileCollide = false;
			if (ai[0] == 0f && ai[1] == 0f)
			{
				ai[0] = base.Center.X;
				ai[1] = base.Center.Y;
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				velocity = new Vector2(MathHelper.Lerp(2f, 4f, Main.rand.NextFloat()) * (float)(Main.rand.Next(2) * 2 - 1), MathHelper.Lerp(1f, 2f, Main.rand.NextFloat()) * (float)(Main.rand.Next(2) * 2 - 1));
				velocity *= 0.7f;
				netUpdate = true;
			}
			Vector2 vector4 = new Vector2(ai[0], ai[1]) - base.Center;
			if (((Vector2)(ref vector4)).Length() > 20f)
			{
				Vector2 vector5 = default(Vector2);
				((Vector2)(ref vector5))._002Ector((float)((vector4.X > 0f) ? 1 : (-1)), (float)((vector4.Y > 0f) ? 1 : (-1)));
				velocity += vector5 * 0.04f;
				if (Math.Abs(velocity.Y) > 2f)
				{
					velocity.Y *= 0.95f;
				}
			}
			TargetClosest();
			Player player = Main.player[target];
			if (!player.dead && player.Distance(base.Center) < 250f)
			{
				ai[2] = 1f;
				direction = ((!(player.Center.X > base.Center.X)) ? 1 : (-1));
				if (velocity.X * (float)direction < 0f)
				{
					velocity.X = direction * 2;
				}
				ai[3] = 0f;
				netUpdate = true;
			}
			break;
		}
		case 1:
		{
			lavaImmune = false;
			noTileCollide = false;
			if (collideX)
			{
				direction *= -1;
				velocity.X = direction * 2;
			}
			if (collideY)
			{
				velocity.Y = ((oldVelocity.Y > 0f) ? 1 : (-1));
			}
			float num4 = 4.5f;
			if (Math.Sign(velocity.X) != direction || Math.Abs(velocity.X) < num4)
			{
				velocity.X += (float)direction * 0.04f;
				if (velocity.X * (float)direction < 0f)
				{
					if (Math.Abs(velocity.X) > num4)
					{
						velocity.X += (float)direction * 0.4f;
					}
					else
					{
						velocity.X += (float)direction * 0.2f;
					}
				}
				else if (Math.Abs(velocity.X) > num4)
				{
					velocity.X = (float)direction * num4;
				}
			}
			int num5 = (int)((position.X + (float)(width / 2)) / 16f);
			int num6 = 20;
			if (direction < 0)
			{
				num5 -= num6;
			}
			int num7 = (int)((position.Y + (float)height) / 16f);
			bool flag4 = true;
			int num8 = 8;
			bool flag5 = false;
			for (int i = num5; i <= num5 + num6; i++)
			{
				for (int j = num7; j < num7 + num8; j++)
				{
					if (Main.tile[i, j] == null)
					{
						Main.tile[i, j] = default(Tile);
					}
					if ((Main.tile[i, j].nactive() && Main.tileSolid[Main.tile[i, j].type]) || Main.tile[i, j].liquid > 0)
					{
						if (j < num7 + 5)
						{
							flag5 = true;
						}
						flag4 = false;
						break;
					}
				}
			}
			if (flag4)
			{
				velocity.Y += 0.05f;
			}
			else
			{
				velocity.Y -= 0.2f;
			}
			if (flag5)
			{
				velocity.Y -= 0.3f;
			}
			if (velocity.Y > 3f)
			{
				velocity.Y = 3f;
			}
			if (velocity.Y < -5f)
			{
				velocity.Y = -5f;
			}
			break;
		}
		case 2:
		{
			noTileCollide = true;
			NPCAimedTarget targetData = GetTargetData();
			bool flag2 = false;
			if (targetData.Type == NPCTargetType.Player)
			{
				flag2 = Main.player[target].dead;
			}
			if (flag2)
			{
				ai[2] = 1f;
				direction = ((!(targetData.Center.X > base.Center.X)) ? 1 : (-1));
				if (velocity.X * (float)direction < 0f)
				{
					velocity.X = direction * 2;
				}
				ai[3] = 0f;
				netUpdate = true;
				break;
			}
			Rectangle r = Utils.CenteredRectangle(targetData.Center, new Vector2((float)(targetData.Width + 60), (float)(targetData.Height / 2)));
			if (Main.netMode != 1)
			{
				val = base.Hitbox;
				if (((Rectangle)(ref val)).Intersects(r))
				{
					if (GetFairyTreasureCoords(out var treasureCoords2))
					{
						ai[0] = treasureCoords2.X;
						ai[1] = treasureCoords2.Y;
						ai[2] = 3f;
						ai[3] = 0f;
						netUpdate = true;
					}
					else
					{
						ai[2] = 6f;
						ai[3] = 0f;
						netUpdate = true;
					}
					break;
				}
			}
			Vector2 vector3 = r.ClosestPointInRect(base.Center);
			Vector2 value = DirectionTo(vector3) * 2f;
			float num15 = Distance(vector3);
			if (num15 > 150f)
			{
				value *= 2f;
			}
			else if (num15 > 80f)
			{
				value *= 1.5f;
			}
			velocity = Vector2.Lerp(velocity, value, 0.07f);
			Point point = base.Center.ToTileCoordinates();
			if (ai[3] < 300f)
			{
				GetBirdFlightRecommendation(6, 3, point, out var goDownwards, out var goUpwards);
				if (goDownwards)
				{
					velocity.Y += 0.05f;
				}
				if (goUpwards)
				{
					velocity.Y -= 0.02f;
				}
				if (velocity.Y > 2f)
				{
					velocity.Y = 2f;
				}
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
			}
			if (WorldGen.InWorld(point.X, point.Y))
			{
				if (WorldGen.SolidTile(point))
				{
					ai[3] = Math.Min(ai[3] + 2f, 400f);
				}
				else
				{
					ai[3] = Math.Max(ai[3] - 1f, 0f);
				}
			}
			break;
		}
		case 3:
			noTileCollide = true;
			if (ai[3] == 15f)
			{
				SoundEngine.PlaySound(27, (int)position.X, (int)position.Y);
			}
			if (ai[3] <= 15f)
			{
				velocity *= 0.9f;
			}
			else
			{
				if (Main.player[target].Center.X > base.Center.X)
				{
					spriteDirection = -1;
				}
				else
				{
					spriteDirection = 1;
				}
				flag = true;
				float num13 = 0f;
				float num14 = ai[3] - 15f;
				float circleHeight = 22f;
				if (num14 <= 65f)
				{
					num13 = (float)Math.PI / 8f;
					circleHeight = 14f;
				}
				else if (num14 <= 130f)
				{
					num13 = -(float)Math.PI / 8f;
					circleHeight = 18f;
				}
				num13 *= (float)direction;
				Vector2 fairyCircleOffset3 = GetFairyCircleOffset(num14 / 65f, num13, circleHeight);
				Vector2 fairyCircleOffset4 = GetFairyCircleOffset(num14 / 65f + 1f / 65f, num13, circleHeight);
				velocity = fairyCircleOffset4 - fairyCircleOffset3;
			}
			ai[3] += 1f;
			if (ai[3] >= 210f)
			{
				ai[2] = 4f;
				TargetClosest();
				ai[3] = 0f;
				netUpdate = true;
			}
			break;
		case 6:
		{
			noTileCollide = true;
			Vector2 vector = Main.player[target].Center - base.Center;
			if (((Vector2)(ref vector)).Length() > 100f)
			{
				ai[2] = 2f;
				TargetClosest();
				ai[3] = 0f;
				netUpdate = true;
				break;
			}
			if (!Collision.SolidCollision(position, width, height))
			{
				noTileCollide = false;
				if (collideX)
				{
					velocity.X *= -1f;
				}
				if (collideY)
				{
					velocity.Y *= -1f;
				}
			}
			if (((Vector2)(ref vector)).Length() > 20f)
			{
				Vector2 vector2 = default(Vector2);
				((Vector2)(ref vector2))._002Ector((float)((vector.X > 0f) ? 1 : (-1)), (float)((vector.Y > 0f) ? 1 : (-1)));
				velocity += vector2 * 0.04f;
				if (Math.Abs(velocity.Y) > 2f)
				{
					velocity.Y *= 0.95f;
				}
			}
			if (Main.netMode != 1 && GetFairyTreasureCoords(out var treasureCoords))
			{
				ai[0] = treasureCoords.X;
				ai[1] = treasureCoords.Y;
				ai[2] = 3f;
				ai[3] = 0f;
				netUpdate = true;
			}
			break;
		}
		case 4:
		{
			noTileCollide = true;
			NPCAimedTarget targetData2 = GetTargetData();
			bool flag3 = false;
			if (targetData2.Type == NPCTargetType.Player)
			{
				flag3 = Main.player[target].dead;
			}
			if (flag3)
			{
				ai[2] = 1f;
				direction = ((!(targetData2.Center.X > base.Center.X)) ? 1 : (-1));
				if (velocity.X * (float)direction < 0f)
				{
					velocity.X = direction * 2;
				}
				ai[3] = 0f;
				netUpdate = true;
				break;
			}
			Rectangle r2 = Utils.CenteredRectangle(new Vector2(ai[0] * 16f + 8f, ai[1] * 16f + 8f), Vector2.One * 5f);
			val = base.Hitbox;
			if (((Rectangle)(ref val)).Intersects(r2))
			{
				ai[2] = 5f;
				ai[3] = 0f;
				netUpdate = true;
				break;
			}
			float num16 = Distance(targetData2.Center);
			float num2 = 300f;
			if (num16 > num2)
			{
				if (num16 < num2 + 100f && !Collision.SolidCollision(position, width, height))
				{
					noTileCollide = false;
					if (collideX)
					{
						velocity.X *= -1f;
					}
					if (collideY)
					{
						velocity.Y *= -1f;
					}
				}
				flag = true;
				if (Main.player[target].Center.X > base.Center.X)
				{
					spriteDirection = -1;
				}
				else
				{
					spriteDirection = 1;
				}
				Vector2 vector6 = DirectionFrom(targetData2.Center);
				if (num16 > num2 + 60f)
				{
					velocity += vector6 * -0.1f;
					if (Main.rand.Next(30) == 0)
					{
						SoundEngine.PlaySound(27, (int)position.X, (int)position.Y);
					}
				}
				else if (num16 < num2 + 30f)
				{
					Vector2 destination = r2.ClosestPointInRect(base.Center);
					Vector2 vector7 = DirectionTo(destination);
					velocity += vector7 * 0.1f;
				}
				if (((Vector2)(ref velocity)).Length() > 1f)
				{
					velocity *= 1f / ((Vector2)(ref velocity)).Length();
				}
				break;
			}
			Vector2 vector8 = r2.ClosestPointInRect(base.Center);
			Vector2 value2 = DirectionTo(vector8);
			float num3 = Distance(vector8);
			if (num3 > 150f)
			{
				value2 *= 3f;
			}
			else if (num3 > 80f)
			{
				value2 *= 2f;
			}
			Point point2 = base.Center.ToTileCoordinates();
			if (ai[3] < 300f)
			{
				velocity = Vector2.Lerp(velocity, value2, 0.07f);
				GetBirdFlightRecommendation(4, 2, point2, out var goDownwards2, out var goUpwards2);
				if (goDownwards2)
				{
					velocity.Y += 0.05f;
				}
				if (goUpwards2)
				{
					velocity.Y -= 0.05f;
				}
				if (velocity.Y > 1f)
				{
					velocity.Y = 1f;
				}
				if (velocity.Y < -1f)
				{
					velocity.Y = -1f;
				}
			}
			else
			{
				velocity = Vector2.Lerp(velocity, value2, 0.07f);
			}
			if (WorldGen.SolidTile(point2))
			{
				ai[3] = Math.Min(ai[3] + 2f, 400f);
			}
			else
			{
				ai[3] = Math.Max(ai[3] - 1f, 0f);
			}
			break;
		}
		case 5:
		{
			localAI[1] = 0f;
			noTileCollide = true;
			Tile tileSafely = Framing.GetTileSafely(new Point((int)ai[0], (int)ai[1]));
			if (tileSafely.active())
			{
				SceneMetrics.IsValidForOreFinder(tileSafely);
			}
			if (ai[3] == 15f)
			{
				SoundEngine.PlaySound(27, (int)position.X, (int)position.Y);
			}
			if (ai[3] <= 15f)
			{
				velocity *= 0.9f;
			}
			else
			{
				flag = true;
				float num10 = 0f;
				float num11 = ai[3] - 15f;
				float num12 = 22f;
				int num17 = (int)(num11 / 50f);
				num10 = (float)Math.Cos((float)num17 * 1f) * ((float)Math.PI * 2f) / 16f;
				num12 = (float)Math.Cos((float)num17 * 2f) * 10f + 8f;
				num10 *= (float)direction;
				Vector2 fairyCircleOffset = GetFairyCircleOffset(num11 / 50f, num10, num12);
				Vector2 fairyCircleOffset2 = GetFairyCircleOffset(num11 / 50f + 0.02f, num10, num12);
				velocity = fairyCircleOffset2 - fairyCircleOffset;
				if (Main.player[target].Center.X > base.Center.X)
				{
					spriteDirection = -1;
				}
				else
				{
					spriteDirection = 1;
				}
			}
			ai[3] += 1f;
			if (Main.netMode != 1 && ai[3] > 200f)
			{
				active = false;
				if (Main.netMode == 0)
				{
					FairyEffects(base.Center, type - 583);
				}
				else if (Main.netMode == 2)
				{
					netSkip = -1;
					life = 0;
					NetMessage.SendData(23, -1, -1, null, whoAmI);
					NetMessage.SendData(112, -1, -1, null, 2, (int)base.Center.X, (int)base.Center.Y, 0f, type - 583);
				}
			}
			break;
		}
		case 7:
			noTileCollide = true;
			velocity.X += 0.05f * (float)direction;
			velocity.X = MathHelper.Clamp(velocity.X, -10f, 10f);
			velocity.Y -= 0.025f;
			velocity.Y = MathHelper.Clamp(velocity.Y, -5f, 5f);
			EncourageDespawn(10);
			break;
		}
		dontTakeDamage = (dontTakeDamageFromHostiles = ai[2] > 1f);
		for (int k = 0; k < 200; k++)
		{
			if (k != whoAmI && Main.npc[k].active && Main.npc[k].aiStyle == 112 && Math.Abs(position.X - Main.npc[k].position.X) + Math.Abs(position.Y - Main.npc[k].position.Y) < (float)width * 1.5f)
			{
				if (position.Y < Main.npc[k].position.Y)
				{
					velocity.Y -= 0.05f;
				}
				else
				{
					velocity.Y += 0.05f;
				}
			}
		}
		if (!flag)
		{
			direction = ((velocity.X >= 0f) ? 1 : (-1));
			spriteDirection = -direction;
		}
		Color value3 = Color.HotPink;
		Color value4 = Color.LightPink;
		int num9 = 4;
		if (type == 584)
		{
			value3 = Color.LimeGreen;
			value4 = Color.LightSeaGreen;
		}
		if (type == 585)
		{
			value3 = Color.RoyalBlue;
			value4 = Color.LightBlue;
		}
		if ((int)Main.timeForVisualEffects % 2 == 0)
		{
			position += netOffset;
			Dust dust = Dust.NewDustDirect(base.Center - new Vector2((float)num9) * 0.5f, num9 + 4, num9 + 4, 278, 0f, 0f, 200, Color.Lerp(value3, value4, Main.rand.NextFloat()), 0.65f);
			dust.velocity *= 0f;
			dust.velocity += velocity * 0.3f;
			dust.noGravity = true;
			dust.noLight = true;
			position -= netOffset;
		}
		Lighting.AddLight(base.Center, ((Color)(ref value3)).ToVector3() * 0.7f);
		if (Main.netMode == 2)
		{
			return;
		}
		Player localPlayer = Main.LocalPlayer;
		if (!localPlayer.dead)
		{
			val = localPlayer.HitboxForBestiaryNearbyCheck;
			if (((Rectangle)(ref val)).Intersects(base.Hitbox))
			{
				AchievementsHelper.HandleSpecialEvent(localPlayer, 22);
			}
		}
	}

	public static void FairyEffects(Vector2 Position, int type)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0114: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		Color value = Color.HotPink;
		Color value2 = Color.LightPink;
		int num = 4;
		if (type == 1)
		{
			value = Color.LimeGreen;
			value2 = Color.LightSeaGreen;
		}
		if (type == 2)
		{
			value = Color.RoyalBlue;
			value2 = Color.LightBlue;
		}
		for (int i = 0; i < 40; i++)
		{
			Dust dust = Dust.NewDustDirect(Position - new Vector2((float)num) * 0.5f, num + 4, num + 4, 278, 0f, 0f, 200, Color.Lerp(value, value2, Main.rand.NextFloat()), 0.65f);
			dust.velocity *= 1.5f;
			if (i >= 30)
			{
				dust.velocity *= 3.5f;
			}
			else if (i >= 20)
			{
				dust.velocity *= 2f;
			}
			dust.fadeIn = (float)Main.rand.Next(0, 17) * 0.1f;
			dust.noGravity = true;
		}
		SoundEngine.PlaySound(SoundID.Item4, (int)Position.X, (int)Position.Y);
	}

	private void GetBirdFlightRecommendation(int downScanRange, int upRange, Point tCoords, out bool goDownwards, out bool goUpwards)
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		tCoords.X += direction;
		goDownwards = true;
		goUpwards = false;
		int x = tCoords.X;
		for (int i = tCoords.Y; i < tCoords.Y + downScanRange && WorldGen.InWorld(x, i); i++)
		{
			Tile tile = Main.tile[x, i];
			if (tile == null)
			{
				break;
			}
			if ((tile.nactive() && Main.tileSolid[tile.type]) || tile.liquid > 0)
			{
				if (i < tCoords.Y + upRange)
				{
					goUpwards = true;
				}
				goDownwards = false;
				break;
			}
		}
	}

	private Vector2 GetFairyCircleOffset(float elapsedTime, float circleRotation, float circleHeight)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		return ((((float)Math.PI * 2f * elapsedTime + (float)Math.PI / 2f).ToRotationVector2() + new Vector2(0f, -1f)) * new Vector2((float)(6 * -direction), circleHeight)).RotatedBy(circleRotation);
	}

	private bool GetFairyTreasureCoords(out Point treasureCoords)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_018b: Unknown result type (might be due to invalid IL or missing references)
		treasureCoords = default(Point);
		Point point = base.Center.ToTileCoordinates();
		Rectangle value = default(Rectangle);
		((Rectangle)(ref value))._002Ector(point.X, point.Y, 1, 1);
		((Rectangle)(ref value)).Inflate(75, 50);
		int num = 40;
		Rectangle value2 = default(Rectangle);
		((Rectangle)(ref value2))._002Ector(0, 0, Main.maxTilesX, Main.maxTilesY);
		((Rectangle)(ref value2)).Inflate(-num, -num);
		value = Rectangle.Intersect(value, value2);
		int num2 = -1;
		float num3 = -1f;
		for (int i = ((Rectangle)(ref value)).Left; i <= ((Rectangle)(ref value)).Right; i++)
		{
			for (int j = ((Rectangle)(ref value)).Top; j <= ((Rectangle)(ref value)).Bottom; j++)
			{
				Tile tile = Main.tile[i, j];
				if (tile == null || !tile.active() || !TileID.Sets.FriendlyFairyCanLureTo[tile.type] || !SceneMetrics.IsValidForOreFinder(tile))
				{
					continue;
				}
				short num4 = Main.tileOreFinderPriority[tile.type];
				if (TileID.Sets.Ore[tile.type])
				{
					int num5 = 3;
					int num6 = 3;
					int num7 = 40;
					int num8 = 0;
					for (int k = i - num5; k <= i + num5; k++)
					{
						for (int l = j - num6; l <= j + num6; l++)
						{
							if (Main.tile[k, l].active() && Main.tile[k, l].type == tile.type)
							{
								num8++;
							}
						}
					}
					if (num8 < num7)
					{
						num4 = -1;
					}
				}
				if (num2 <= num4)
				{
					float num9 = Distance(new Vector2((float)(i * 16 + 8), (float)(j * 16 + 8)));
					if (num2 != num4 || !(num9 >= num3))
					{
						num2 = num4;
						num3 = num9;
						treasureCoords.X = i;
						treasureCoords.Y = j;
					}
				}
			}
		}
		return num2 != -1;
	}

	private void AI_069_DukeFishron()
	{
		//IL_021c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0221: Unknown result type (might be due to invalid IL or missing references)
		//IL_0295: Unknown result type (might be due to invalid IL or missing references)
		//IL_029a: Unknown result type (might be due to invalid IL or missing references)
		//IL_025b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0260: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0405: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_06cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_064a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0737: Unknown result type (might be due to invalid IL or missing references)
		//IL_097a: Unknown result type (might be due to invalid IL or missing references)
		//IL_098c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0991: Unknown result type (might be due to invalid IL or missing references)
		//IL_0996: Unknown result type (might be due to invalid IL or missing references)
		//IL_0998: Unknown result type (might be due to invalid IL or missing references)
		//IL_099e: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_09af: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_095d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0961: Unknown result type (might be due to invalid IL or missing references)
		//IL_0966: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fa6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fca: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fe0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fed: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f89: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f92: Unknown result type (might be due to invalid IL or missing references)
		//IL_0db1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0db6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0de1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e01: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e07: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e09: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e10: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e30: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e42: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e47: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e49: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e57: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e64: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e75: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eae: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ebd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ecb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0edb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a19: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_14c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_14c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1339: Unknown result type (might be due to invalid IL or missing references)
		//IL_1341: Unknown result type (might be due to invalid IL or missing references)
		//IL_1045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_07dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0801: Unknown result type (might be due to invalid IL or missing references)
		//IL_0807: Unknown result type (might be due to invalid IL or missing references)
		//IL_080c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0811: Unknown result type (might be due to invalid IL or missing references)
		//IL_0813: Unknown result type (might be due to invalid IL or missing references)
		//IL_0818: Unknown result type (might be due to invalid IL or missing references)
		//IL_081d: Unknown result type (might be due to invalid IL or missing references)
		//IL_081f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0821: Unknown result type (might be due to invalid IL or missing references)
		//IL_082d: Unknown result type (might be due to invalid IL or missing references)
		//IL_083a: Unknown result type (might be due to invalid IL or missing references)
		//IL_084b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0851: Unknown result type (might be due to invalid IL or missing references)
		//IL_0883: Unknown result type (might be due to invalid IL or missing references)
		//IL_0885: Unknown result type (might be due to invalid IL or missing references)
		//IL_088f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0894: Unknown result type (might be due to invalid IL or missing references)
		//IL_08aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1505: Unknown result type (might be due to invalid IL or missing references)
		//IL_150d: Unknown result type (might be due to invalid IL or missing references)
		//IL_109b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1019: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a45: Unknown result type (might be due to invalid IL or missing references)
		//IL_137f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1384: Unknown result type (might be due to invalid IL or missing references)
		//IL_1390: Unknown result type (might be due to invalid IL or missing references)
		//IL_1395: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1409: Unknown result type (might be due to invalid IL or missing references)
		//IL_1410: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b14: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_15f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_15f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_15fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1600: Unknown result type (might be due to invalid IL or missing references)
		//IL_1606: Unknown result type (might be due to invalid IL or missing references)
		//IL_160b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1610: Unknown result type (might be due to invalid IL or missing references)
		//IL_1617: Unknown result type (might be due to invalid IL or missing references)
		//IL_161c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1629: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_15ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e47: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e51: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e56: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c45: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a74: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a90: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a95: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1abf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1acc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ace: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aee: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b00: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b05: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b07: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b09: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b15: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b22: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b33: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b39: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b76: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b89: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b94: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b99: Unknown result type (might be due to invalid IL or missing references)
		//IL_1681: Unknown result type (might be due to invalid IL or missing references)
		//IL_114f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1157: Unknown result type (might be due to invalid IL or missing references)
		//IL_111f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e92: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1db2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1db8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dba: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c77: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c83: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1655: Unknown result type (might be due to invalid IL or missing references)
		//IL_122f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1239: Unknown result type (might be due to invalid IL or missing references)
		//IL_1189: Unknown result type (might be due to invalid IL or missing references)
		//IL_1195: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f95: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cac: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cca: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ccf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cde: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ce6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d33: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d38: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d53: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d55: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d61: Unknown result type (might be due to invalid IL or missing references)
		//IL_172f: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_11bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_202c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2036: Unknown result type (might be due to invalid IL or missing references)
		//IL_203b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ed2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ed9: Unknown result type (might be due to invalid IL or missing references)
		//IL_177c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1786: Unknown result type (might be due to invalid IL or missing references)
		//IL_1703: Unknown result type (might be due to invalid IL or missing references)
		//IL_2077: Unknown result type (might be due to invalid IL or missing references)
		//IL_207f: Unknown result type (might be due to invalid IL or missing references)
		//IL_175b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2644: Unknown result type (might be due to invalid IL or missing references)
		//IL_264e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2653: Unknown result type (might be due to invalid IL or missing references)
		//IL_218f: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_21bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_21cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2172: Unknown result type (might be due to invalid IL or missing references)
		//IL_2176: Unknown result type (might be due to invalid IL or missing references)
		//IL_217b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c84: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c86: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c92: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c97: Unknown result type (might be due to invalid IL or missing references)
		//IL_28b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_28cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_28d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_28d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_28d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2890: Unknown result type (might be due to invalid IL or missing references)
		//IL_2898: Unknown result type (might be due to invalid IL or missing references)
		//IL_268e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2696: Unknown result type (might be due to invalid IL or missing references)
		//IL_2447: Unknown result type (might be due to invalid IL or missing references)
		//IL_244c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2468: Unknown result type (might be due to invalid IL or missing references)
		//IL_246d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2477: Unknown result type (might be due to invalid IL or missing references)
		//IL_2497: Unknown result type (might be due to invalid IL or missing references)
		//IL_249d: Unknown result type (might be due to invalid IL or missing references)
		//IL_249f: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_24c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_24dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_24df: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_24ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_24fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_250b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2511: Unknown result type (might be due to invalid IL or missing references)
		//IL_2544: Unknown result type (might be due to invalid IL or missing references)
		//IL_254e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2553: Unknown result type (might be due to invalid IL or missing references)
		//IL_2561: Unknown result type (might be due to invalid IL or missing references)
		//IL_2567: Unknown result type (might be due to invalid IL or missing references)
		//IL_256c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2571: Unknown result type (might be due to invalid IL or missing references)
		//IL_2705: Unknown result type (might be due to invalid IL or missing references)
		//IL_271d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2722: Unknown result type (might be due to invalid IL or missing references)
		//IL_2727: Unknown result type (might be due to invalid IL or missing references)
		//IL_272a: Unknown result type (might be due to invalid IL or missing references)
		//IL_272c: Unknown result type (might be due to invalid IL or missing references)
		//IL_272d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2734: Unknown result type (might be due to invalid IL or missing references)
		//IL_2736: Unknown result type (might be due to invalid IL or missing references)
		//IL_273a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2744: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_232d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2332: Unknown result type (might be due to invalid IL or missing references)
		//IL_2334: Unknown result type (might be due to invalid IL or missing references)
		//IL_2339: Unknown result type (might be due to invalid IL or missing references)
		//IL_2340: Unknown result type (might be due to invalid IL or missing references)
		//IL_2345: Unknown result type (might be due to invalid IL or missing references)
		//IL_222f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2234: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_18dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_18de: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_1957: Unknown result type (might be due to invalid IL or missing references)
		//IL_195c: Unknown result type (might be due to invalid IL or missing references)
		//IL_195e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1963: Unknown result type (might be due to invalid IL or missing references)
		//IL_196a: Unknown result type (might be due to invalid IL or missing references)
		//IL_196f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2792: Unknown result type (might be due to invalid IL or missing references)
		//IL_2797: Unknown result type (might be due to invalid IL or missing references)
		bool expertMode = Main.expertMode;
		float num = (expertMode ? 1.2f : 1f);
		bool flag = (double)life <= (double)lifeMax * 0.5;
		bool flag2 = expertMode && (double)life <= (double)lifeMax * 0.15;
		bool flag3 = ai[0] > 4f;
		bool flag4 = ai[0] > 9f;
		bool flag5 = ai[3] < 10f;
		if (flag4)
		{
			damage = (int)((float)defDamage * 1.1f * num);
			defense = 0;
		}
		else if (flag3)
		{
			damage = (int)((float)defDamage * 1.2f * num);
			defense = (int)((float)defDefense * 0.8f);
		}
		else
		{
			damage = defDamage;
			defense = defDefense;
		}
		int num12 = (expertMode ? 40 : 60);
		float num23 = (expertMode ? 0.55f : 0.45f);
		float num34 = (expertMode ? 8.5f : 7.5f);
		if (flag4)
		{
			num23 = 0.7f;
			num34 = 12f;
			num12 = 30;
		}
		else if (flag3 && flag5)
		{
			num23 = (expertMode ? 0.6f : 0.5f);
			num34 = (expertMode ? 10f : 8f);
			num12 = (expertMode ? 40 : 20);
		}
		else if (flag5 && !flag3 && !flag4)
		{
			num12 = 30;
		}
		int num36 = (expertMode ? 28 : 30);
		float num37 = (expertMode ? 17f : 16f);
		if (flag4)
		{
			num36 = 25;
			num37 = 27f;
		}
		else if (flag5 && flag3)
		{
			num36 = (expertMode ? 27 : 30);
			if (expertMode)
			{
				num37 = 21f;
			}
		}
		int num38 = 80;
		int num39 = 4;
		float num40 = 0.3f;
		float num2 = 5f;
		int num3 = 90;
		int num4 = 180;
		int num5 = 180;
		int num6 = 30;
		int num7 = 120;
		int num8 = 4;
		float num9 = 6f;
		float num10 = 20f;
		float num11 = (float)Math.PI * 2f / (float)(num7 / 2);
		int num13 = 75;
		Vector2 center = base.Center;
		Player player = Main.player[target];
		if (target < 0 || target == 255 || player.dead || !player.active || Vector2.Distance(player.Center, center) > 5600f)
		{
			TargetClosest();
			player = Main.player[target];
			netUpdate = true;
		}
		if (player.dead || Vector2.Distance(player.Center, center) > 5600f)
		{
			velocity.Y -= 0.4f;
			EncourageDespawn(10);
			if (ai[0] > 4f)
			{
				ai[0] = 5f;
			}
			else
			{
				ai[0] = 0f;
			}
			ai[2] = 0f;
		}
		bool flag6 = player.position.Y < 800f || (double)player.position.Y > Main.worldSurface * 16.0 || (player.position.X > 6400f && player.position.X < (float)(Main.maxTilesX * 16 - 6400));
		if (flag6)
		{
			num12 = 10;
			damage = defDamage * 2;
			defense = defDefense * 2;
			num37 += 6f;
		}
		bool flag7 = true;
		if (localAI[0] == 0f)
		{
			localAI[0] = 1f;
			alpha = 255;
			rotation = 0f;
			if (Main.netMode != 1)
			{
				ai[0] = -1f;
				netUpdate = true;
			}
		}
		float num14 = (float)Math.Atan2(player.Center.Y - center.Y, player.Center.X - center.X);
		if (spriteDirection == 1)
		{
			num14 += (float)Math.PI;
		}
		if (num14 < 0f)
		{
			num14 += (float)Math.PI * 2f;
		}
		if (num14 > (float)Math.PI * 2f)
		{
			num14 -= (float)Math.PI * 2f;
		}
		if (ai[0] == -1f)
		{
			num14 = 0f;
		}
		if (ai[0] == 3f)
		{
			num14 = 0f;
		}
		if (ai[0] == 4f)
		{
			num14 = 0f;
		}
		if (ai[0] == 8f)
		{
			num14 = 0f;
		}
		float num15 = 0.04f;
		if (ai[0] == 1f || ai[0] == 6f)
		{
			num15 = 0f;
		}
		if (ai[0] == 7f)
		{
			num15 = 0f;
		}
		if (ai[0] == 3f)
		{
			num15 = 0.01f;
		}
		if (ai[0] == 4f)
		{
			num15 = 0.01f;
		}
		if (ai[0] == 8f)
		{
			num15 = 0.01f;
		}
		if (rotation < num14)
		{
			if ((double)(num14 - rotation) > Math.PI)
			{
				rotation -= num15;
			}
			else
			{
				rotation += num15;
			}
		}
		if (rotation > num14)
		{
			if ((double)(rotation - num14) > Math.PI)
			{
				rotation += num15;
			}
			else
			{
				rotation -= num15;
			}
		}
		if (rotation > num14 - num15 && rotation < num14 + num15)
		{
			rotation = num14;
		}
		if (rotation < 0f)
		{
			rotation += (float)Math.PI * 2f;
		}
		if (rotation > (float)Math.PI * 2f)
		{
			rotation -= (float)Math.PI * 2f;
		}
		if (rotation > num14 - num15 && rotation < num14 + num15)
		{
			rotation = num14;
		}
		if (ai[0] != -1f && ai[0] < 9f)
		{
			if (Collision.SolidCollision(position, width, height))
			{
				alpha += 15;
			}
			else
			{
				alpha -= 15;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (alpha > 150)
			{
				alpha = 150;
			}
		}
		if (ai[0] == -1f)
		{
			flag7 = false;
			velocity *= 0.98f;
			int num16 = Math.Sign(player.Center.X - center.X);
			if (num16 != 0)
			{
				direction = num16;
				spriteDirection = -direction;
			}
			if (ai[2] > 20f)
			{
				velocity.Y = -2f;
				alpha -= 5;
				if (Collision.SolidCollision(position, width, height))
				{
					alpha += 15;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha > 150)
				{
					alpha = 150;
				}
			}
			if (ai[2] == (float)(num3 - 30))
			{
				int num17 = 36;
				for (int i = 0; i < num17; i++)
				{
					Vector2 val = (Vector2.Normalize(velocity) * new Vector2((float)width / 2f, (float)height) * 0.75f * 0.5f).RotatedBy((float)(i - (num17 / 2 - 1)) * ((float)Math.PI * 2f) / (float)num17) + base.Center;
					Vector2 vector15 = val - base.Center;
					int num18 = Dust.NewDust(val + vector15, 0, 0, 172, vector15.X * 2f, vector15.Y * 2f, 100, default(Color), 1.4f);
					Main.dust[num18].noGravity = true;
					Main.dust[num18].noLight = true;
					Main.dust[num18].velocity = Vector2.Normalize(vector15) * 3f;
				}
				SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 20);
			}
			ai[2] += 1f;
			if (ai[2] >= (float)num13)
			{
				ai[0] = 0f;
				ai[1] = 0f;
				ai[2] = 0f;
				netUpdate = true;
			}
		}
		else if (ai[0] == 0f && !player.dead)
		{
			if (ai[1] == 0f)
			{
				ai[1] = 300 * Math.Sign((center - player.Center).X);
			}
			Vector2 vector16 = Vector2.Normalize(player.Center + new Vector2(ai[1], -200f) - center - velocity) * num34;
			if (velocity.X < vector16.X)
			{
				velocity.X += num23;
				if (velocity.X < 0f && vector16.X > 0f)
				{
					velocity.X += num23;
				}
			}
			else if (velocity.X > vector16.X)
			{
				velocity.X -= num23;
				if (velocity.X > 0f && vector16.X < 0f)
				{
					velocity.X -= num23;
				}
			}
			if (velocity.Y < vector16.Y)
			{
				velocity.Y += num23;
				if (velocity.Y < 0f && vector16.Y > 0f)
				{
					velocity.Y += num23;
				}
			}
			else if (velocity.Y > vector16.Y)
			{
				velocity.Y -= num23;
				if (velocity.Y > 0f && vector16.Y < 0f)
				{
					velocity.Y -= num23;
				}
			}
			int num19 = Math.Sign(player.Center.X - center.X);
			if (num19 != 0)
			{
				if (ai[2] == 0f && num19 != direction)
				{
					rotation += (float)Math.PI;
				}
				direction = num19;
				if (spriteDirection != -direction)
				{
					rotation += (float)Math.PI;
				}
				spriteDirection = -direction;
			}
			ai[2] += 1f;
			if (ai[2] >= (float)num12)
			{
				int num20 = 0;
				switch ((int)ai[3])
				{
				case 0:
				case 1:
				case 2:
				case 3:
				case 4:
				case 5:
				case 6:
				case 7:
				case 8:
				case 9:
					num20 = 1;
					break;
				case 10:
					ai[3] = 1f;
					num20 = 2;
					break;
				case 11:
					ai[3] = 0f;
					num20 = 3;
					break;
				}
				if (flag6 && num20 == 2)
				{
					num20 = 3;
				}
				if (flag)
				{
					num20 = 4;
				}
				switch (num20)
				{
				case 1:
					ai[0] = 1f;
					ai[1] = 0f;
					ai[2] = 0f;
					velocity = Vector2.Normalize(player.Center - center) * num37;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
					if (num19 != 0)
					{
						direction = num19;
						if (spriteDirection == 1)
						{
							rotation += (float)Math.PI;
						}
						spriteDirection = -direction;
					}
					break;
				case 2:
					ai[0] = 2f;
					ai[1] = 0f;
					ai[2] = 0f;
					break;
				case 3:
					ai[0] = 3f;
					ai[1] = 0f;
					ai[2] = 0f;
					if (flag6)
					{
						ai[2] = num3 - 40;
					}
					break;
				case 4:
					ai[0] = 4f;
					ai[1] = 0f;
					ai[2] = 0f;
					break;
				}
				netUpdate = true;
			}
		}
		else if (ai[0] == 1f)
		{
			int num21 = 7;
			for (int j = 0; j < num21; j++)
			{
				Vector2 val2 = (Vector2.Normalize(velocity) * new Vector2((float)(width + 50) / 2f, (float)height) * 0.75f).RotatedBy((double)(j - (num21 / 2 - 1)) * Math.PI / (double)(float)num21) + center;
				Vector2 vector17 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - (float)Math.PI / 2f).ToRotationVector2() * (float)Main.rand.Next(3, 8);
				int num22 = Dust.NewDust(val2 + vector17, 0, 0, 172, vector17.X * 2f, vector17.Y * 2f, 100, default(Color), 1.4f);
				Main.dust[num22].noGravity = true;
				Main.dust[num22].noLight = true;
				Dust obj = Main.dust[num22];
				obj.velocity /= 4f;
				Dust obj2 = Main.dust[num22];
				obj2.velocity -= velocity;
			}
			ai[2] += 1f;
			if (ai[2] >= (float)num36)
			{
				ai[0] = 0f;
				ai[1] = 0f;
				ai[2] = 0f;
				ai[3] += 2f;
				netUpdate = true;
			}
		}
		else if (ai[0] == 2f)
		{
			if (ai[1] == 0f)
			{
				ai[1] = 300 * Math.Sign((center - player.Center).X);
			}
			Vector2 vector18 = Vector2.Normalize(player.Center + new Vector2(ai[1], -200f) - center - velocity) * num2;
			if (velocity.X < vector18.X)
			{
				velocity.X += num40;
				if (velocity.X < 0f && vector18.X > 0f)
				{
					velocity.X += num40;
				}
			}
			else if (velocity.X > vector18.X)
			{
				velocity.X -= num40;
				if (velocity.X > 0f && vector18.X < 0f)
				{
					velocity.X -= num40;
				}
			}
			if (velocity.Y < vector18.Y)
			{
				velocity.Y += num40;
				if (velocity.Y < 0f && vector18.Y > 0f)
				{
					velocity.Y += num40;
				}
			}
			else if (velocity.Y > vector18.Y)
			{
				velocity.Y -= num40;
				if (velocity.Y > 0f && vector18.Y < 0f)
				{
					velocity.Y -= num40;
				}
			}
			if (ai[2] == 0f)
			{
				SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 20);
			}
			if (ai[2] % (float)num39 == 0f)
			{
				SoundEngine.PlaySound(4, (int)base.Center.X, (int)base.Center.Y, 19);
				if (Main.netMode != 1)
				{
					Vector2 vector19 = Vector2.Normalize(player.Center - center) * (float)(width + 20) / 2f + center;
					NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)vector19.X, (int)vector19.Y + 45, 371);
				}
			}
			int num24 = Math.Sign(player.Center.X - center.X);
			if (num24 != 0)
			{
				direction = num24;
				if (spriteDirection != -direction)
				{
					rotation += (float)Math.PI;
				}
				spriteDirection = -direction;
			}
			ai[2] += 1f;
			if (ai[2] >= (float)num38)
			{
				ai[0] = 0f;
				ai[1] = 0f;
				ai[2] = 0f;
				netUpdate = true;
			}
		}
		else if (ai[0] == 3f)
		{
			velocity *= 0.98f;
			velocity.Y = MathHelper.Lerp(velocity.Y, 0f, 0.02f);
			if (ai[2] == (float)(num3 - 30))
			{
				SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 9);
			}
			if (Main.netMode != 1 && ai[2] == (float)(num3 - 30))
			{
				Vector2 vector20 = rotation.ToRotationVector2() * (Vector2.UnitX * (float)direction) * (float)(width + 20) / 2f + center;
				Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector20.X, vector20.Y, direction * 2, 8f, 385, 0, 0f, Main.myPlayer);
				Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector20.X, vector20.Y, -direction * 2, 8f, 385, 0, 0f, Main.myPlayer);
			}
			ai[2] += 1f;
			if (ai[2] >= (float)num3)
			{
				ai[0] = 0f;
				ai[1] = 0f;
				ai[2] = 0f;
				netUpdate = true;
			}
		}
		else if (ai[0] == 4f)
		{
			flag7 = false;
			velocity *= 0.98f;
			velocity.Y = MathHelper.Lerp(velocity.Y, 0f, 0.02f);
			if (ai[2] == (float)(num4 - 60))
			{
				SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 20);
			}
			ai[2] += 1f;
			if (ai[2] >= (float)num4)
			{
				ai[0] = 5f;
				ai[1] = 0f;
				ai[2] = 0f;
				ai[3] = 0f;
				netUpdate = true;
			}
		}
		else if (ai[0] == 5f && !player.dead)
		{
			if (ai[1] == 0f)
			{
				ai[1] = 300 * Math.Sign((center - player.Center).X);
			}
			Vector2 vector21 = Vector2.Normalize(player.Center + new Vector2(ai[1], -200f) - center - velocity) * num34;
			if (velocity.X < vector21.X)
			{
				velocity.X += num23;
				if (velocity.X < 0f && vector21.X > 0f)
				{
					velocity.X += num23;
				}
			}
			else if (velocity.X > vector21.X)
			{
				velocity.X -= num23;
				if (velocity.X > 0f && vector21.X < 0f)
				{
					velocity.X -= num23;
				}
			}
			if (velocity.Y < vector21.Y)
			{
				velocity.Y += num23;
				if (velocity.Y < 0f && vector21.Y > 0f)
				{
					velocity.Y += num23;
				}
			}
			else if (velocity.Y > vector21.Y)
			{
				velocity.Y -= num23;
				if (velocity.Y > 0f && vector21.Y < 0f)
				{
					velocity.Y -= num23;
				}
			}
			int num25 = Math.Sign(player.Center.X - center.X);
			if (num25 != 0)
			{
				if (ai[2] == 0f && num25 != direction)
				{
					rotation += (float)Math.PI;
				}
				direction = num25;
				if (spriteDirection != -direction)
				{
					rotation += (float)Math.PI;
				}
				spriteDirection = -direction;
			}
			ai[2] += 1f;
			if (ai[2] >= (float)num12)
			{
				int num26 = 0;
				switch ((int)ai[3])
				{
				case 0:
				case 1:
				case 2:
				case 3:
				case 4:
				case 5:
					num26 = 1;
					break;
				case 6:
					ai[3] = 1f;
					num26 = 2;
					break;
				case 7:
					ai[3] = 0f;
					num26 = 3;
					break;
				}
				if (flag2)
				{
					num26 = 4;
				}
				if (flag6 && num26 == 2)
				{
					num26 = 3;
				}
				switch (num26)
				{
				case 1:
					ai[0] = 6f;
					ai[1] = 0f;
					ai[2] = 0f;
					velocity = Vector2.Normalize(player.Center - center) * num37;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
					if (num25 != 0)
					{
						direction = num25;
						if (spriteDirection == 1)
						{
							rotation += (float)Math.PI;
						}
						spriteDirection = -direction;
					}
					break;
				case 2:
					velocity = Vector2.Normalize(player.Center - center) * num10;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
					if (num25 != 0)
					{
						direction = num25;
						if (spriteDirection == 1)
						{
							rotation += (float)Math.PI;
						}
						spriteDirection = -direction;
					}
					ai[0] = 7f;
					ai[1] = 0f;
					ai[2] = 0f;
					break;
				case 3:
					ai[0] = 8f;
					ai[1] = 0f;
					ai[2] = 0f;
					break;
				case 4:
					ai[0] = 9f;
					ai[1] = 0f;
					ai[2] = 0f;
					break;
				}
				netUpdate = true;
			}
		}
		else if (ai[0] == 6f)
		{
			int num27 = 7;
			for (int k = 0; k < num27; k++)
			{
				Vector2 val3 = (Vector2.Normalize(velocity) * new Vector2((float)(width + 50) / 2f, (float)height) * 0.75f).RotatedBy((double)(k - (num27 / 2 - 1)) * Math.PI / (double)(float)num27) + center;
				Vector2 vector11 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - (float)Math.PI / 2f).ToRotationVector2() * (float)Main.rand.Next(3, 8);
				int num28 = Dust.NewDust(val3 + vector11, 0, 0, 172, vector11.X * 2f, vector11.Y * 2f, 100, default(Color), 1.4f);
				Main.dust[num28].noGravity = true;
				Main.dust[num28].noLight = true;
				Dust obj3 = Main.dust[num28];
				obj3.velocity /= 4f;
				Dust obj4 = Main.dust[num28];
				obj4.velocity -= velocity;
			}
			ai[2] += 1f;
			if (ai[2] >= (float)num36)
			{
				ai[0] = 5f;
				ai[1] = 0f;
				ai[2] = 0f;
				ai[3] += 2f;
				netUpdate = true;
			}
		}
		else if (ai[0] == 7f)
		{
			if (ai[2] == 0f)
			{
				SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 20);
			}
			if (ai[2] % (float)num8 == 0f)
			{
				SoundEngine.PlaySound(4, (int)base.Center.X, (int)base.Center.Y, 19);
				if (Main.netMode != 1)
				{
					Vector2 vector12 = Vector2.Normalize(velocity) * (float)(width + 20) / 2f + center;
					int num29 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)vector12.X, (int)vector12.Y + 45, 371);
					Main.npc[num29].target = target;
					Main.npc[num29].velocity = Vector2.Normalize(velocity).RotatedBy((float)Math.PI / 2f * (float)direction) * num9;
					Main.npc[num29].netUpdate = true;
					Main.npc[num29].ai[3] = (float)Main.rand.Next(80, 121) / 100f;
				}
			}
			velocity = velocity.RotatedBy((0f - num11) * (float)direction);
			rotation -= num11 * (float)direction;
			ai[2] += 1f;
			if (ai[2] >= (float)num7)
			{
				ai[0] = 5f;
				ai[1] = 0f;
				ai[2] = 0f;
				netUpdate = true;
			}
		}
		else if (ai[0] == 8f)
		{
			velocity *= 0.98f;
			velocity.Y = MathHelper.Lerp(velocity.Y, 0f, 0.02f);
			if (ai[2] == (float)(num3 - 30))
			{
				SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 20);
			}
			if (Main.netMode != 1 && ai[2] == (float)(num3 - 30))
			{
				Projectile.NewProjectile(GetSpawnSource_ForProjectile(), center.X, center.Y, 0f, 0f, 385, 0, 0f, Main.myPlayer, 1f, target + 1, flag6 ? 1 : 0);
			}
			ai[2] += 1f;
			if (ai[2] >= (float)num3)
			{
				ai[0] = 5f;
				ai[1] = 0f;
				ai[2] = 0f;
				netUpdate = true;
			}
		}
		else if (ai[0] == 9f)
		{
			flag7 = false;
			if (ai[2] < (float)(num5 - 90))
			{
				if (Collision.SolidCollision(position, width, height))
				{
					alpha += 15;
				}
				else
				{
					alpha -= 15;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha > 150)
				{
					alpha = 150;
				}
			}
			else if (alpha < 255)
			{
				alpha += 4;
				if (alpha > 255)
				{
					alpha = 255;
				}
			}
			velocity *= 0.98f;
			velocity.Y = MathHelper.Lerp(velocity.Y, 0f, 0.02f);
			if (ai[2] == (float)(num5 - 60))
			{
				SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 20);
			}
			ai[2] += 1f;
			if (ai[2] >= (float)num5)
			{
				ai[0] = 10f;
				ai[1] = 0f;
				ai[2] = 0f;
				ai[3] = 0f;
				netUpdate = true;
			}
		}
		else if (ai[0] == 10f && !player.dead)
		{
			chaseable = false;
			if (alpha < 255)
			{
				alpha += 25;
				if (alpha > 255)
				{
					alpha = 255;
				}
			}
			if (ai[1] == 0f)
			{
				ai[1] = 360 * Math.Sign((center - player.Center).X);
			}
			Vector2 desiredVelocity = Vector2.Normalize(player.Center + new Vector2(ai[1], -200f) - center - velocity) * num34;
			SimpleFlyMovement(desiredVelocity, num23);
			int num30 = Math.Sign(player.Center.X - center.X);
			if (num30 != 0)
			{
				if (ai[2] == 0f && num30 != direction)
				{
					rotation += (float)Math.PI;
					for (int l = 0; l < oldPos.Length; l++)
					{
						oldPos[l] = Vector2.Zero;
					}
				}
				direction = num30;
				if (spriteDirection != -direction)
				{
					rotation += (float)Math.PI;
				}
				spriteDirection = -direction;
			}
			ai[2] += 1f;
			if (ai[2] >= (float)num12)
			{
				int num31 = 0;
				switch ((int)ai[3])
				{
				case 0:
				case 2:
				case 3:
				case 5:
				case 6:
				case 7:
					num31 = 1;
					break;
				case 1:
				case 4:
				case 8:
					num31 = 2;
					break;
				}
				switch (num31)
				{
				case 1:
					ai[0] = 11f;
					ai[1] = 0f;
					ai[2] = 0f;
					velocity = Vector2.Normalize(player.Center - center) * num37;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
					if (num30 != 0)
					{
						direction = num30;
						if (spriteDirection == 1)
						{
							rotation += (float)Math.PI;
						}
						spriteDirection = -direction;
					}
					break;
				case 2:
					ai[0] = 12f;
					ai[1] = 0f;
					ai[2] = 0f;
					break;
				case 3:
					ai[0] = 13f;
					ai[1] = 0f;
					ai[2] = 0f;
					break;
				}
				netUpdate = true;
			}
		}
		else if (ai[0] == 11f)
		{
			chaseable = true;
			alpha -= 25;
			if (alpha < 0)
			{
				alpha = 0;
			}
			int num32 = 7;
			for (int m = 0; m < num32; m++)
			{
				Vector2 val4 = (Vector2.Normalize(velocity) * new Vector2((float)(width + 50) / 2f, (float)height) * 0.75f).RotatedBy((double)(m - (num32 / 2 - 1)) * Math.PI / (double)(float)num32) + center;
				Vector2 vector13 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - (float)Math.PI / 2f).ToRotationVector2() * (float)Main.rand.Next(3, 8);
				int num33 = Dust.NewDust(val4 + vector13, 0, 0, 172, vector13.X * 2f, vector13.Y * 2f, 100, default(Color), 1.4f);
				Main.dust[num33].noGravity = true;
				Main.dust[num33].noLight = true;
				Dust obj5 = Main.dust[num33];
				obj5.velocity /= 4f;
				Dust obj6 = Main.dust[num33];
				obj6.velocity -= velocity;
			}
			ai[2] += 1f;
			if (ai[2] >= (float)num36)
			{
				ai[0] = 10f;
				ai[1] = 0f;
				ai[2] = 0f;
				ai[3] += 1f;
				netUpdate = true;
			}
		}
		else if (ai[0] == 12f)
		{
			flag7 = false;
			chaseable = false;
			if (alpha < 255)
			{
				alpha += 17;
				if (alpha > 255)
				{
					alpha = 255;
				}
			}
			velocity *= 0.98f;
			velocity.Y = MathHelper.Lerp(velocity.Y, 0f, 0.02f);
			if (ai[2] == (float)(num6 / 2))
			{
				SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 20);
			}
			if (Main.netMode != 1 && ai[2] == (float)(num6 / 2))
			{
				if (ai[1] == 0f)
				{
					ai[1] = 300 * Math.Sign((center - player.Center).X);
				}
				Vector2 vector14 = player.Center + new Vector2(0f - ai[1], -200f);
				Vector2 val6 = (base.Center = vector14);
				center = val6;
				int num35 = Math.Sign(player.Center.X - center.X);
				if (num35 != 0)
				{
					if (ai[2] == 0f && num35 != direction)
					{
						rotation += (float)Math.PI;
						for (int n = 0; n < oldPos.Length; n++)
						{
							oldPos[n] = Vector2.Zero;
						}
					}
					direction = num35;
					if (spriteDirection != -direction)
					{
						rotation += (float)Math.PI;
					}
					spriteDirection = -direction;
				}
			}
			ai[2] += 1f;
			if (ai[2] >= (float)num6)
			{
				ai[0] = 10f;
				ai[1] = 0f;
				ai[2] = 0f;
				ai[3] += 1f;
				if (ai[3] >= 9f)
				{
					ai[3] = 0f;
				}
				netUpdate = true;
			}
		}
		else if (ai[0] == 13f)
		{
			if (ai[2] == 0f)
			{
				SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 20);
			}
			velocity = velocity.RotatedBy((0f - num11) * (float)direction);
			rotation -= num11 * (float)direction;
			ai[2] += 1f;
			if (ai[2] >= (float)num7)
			{
				ai[0] = 10f;
				ai[1] = 0f;
				ai[2] = 0f;
				ai[3] += 1f;
				netUpdate = true;
			}
		}
		dontTakeDamage = !flag7;
	}

	private void AI_037_Destroyer()
	{
		//IL_0d41: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d46: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1602: Unknown result type (might be due to invalid IL or missing references)
		//IL_1607: Unknown result type (might be due to invalid IL or missing references)
		//IL_161a: Unknown result type (might be due to invalid IL or missing references)
		//IL_161c: Unknown result type (might be due to invalid IL or missing references)
		//IL_161e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1623: Unknown result type (might be due to invalid IL or missing references)
		//IL_1639: Unknown result type (might be due to invalid IL or missing references)
		//IL_163e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1640: Unknown result type (might be due to invalid IL or missing references)
		//IL_1645: Unknown result type (might be due to invalid IL or missing references)
		//IL_1648: Unknown result type (might be due to invalid IL or missing references)
		//IL_164b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1655: Unknown result type (might be due to invalid IL or missing references)
		//IL_165a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1661: Unknown result type (might be due to invalid IL or missing references)
		//IL_1666: Unknown result type (might be due to invalid IL or missing references)
		//IL_166b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0417: Unknown result type (might be due to invalid IL or missing references)
		//IL_0434: Unknown result type (might be due to invalid IL or missing references)
		//IL_0181: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0512: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_06bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b33: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b65: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b71: Unknown result type (might be due to invalid IL or missing references)
		//IL_07aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_095d: Unknown result type (might be due to invalid IL or missing references)
		//IL_07be: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f4: Unknown result type (might be due to invalid IL or missing references)
		int num = 0;
		int num12 = 10;
		if (IsMechQueenUp && type != 134)
		{
			int num23 = (int)ai[1];
			while (num23 > 0 && num23 < 200)
			{
				if (Main.npc[num23].active && Main.npc[num23].type >= 134 && Main.npc[num23].type <= 136)
				{
					num++;
					if (Main.npc[num23].type == 134)
					{
						break;
					}
					if (num >= num12)
					{
						num = 0;
						break;
					}
					num23 = (int)Main.npc[num23].ai[1];
					continue;
				}
				num = 0;
				break;
			}
		}
		if (ai[3] > 0f)
		{
			realLife = (int)ai[3];
		}
		if (target < 0 || target == 255 || Main.player[target].dead)
		{
			TargetClosest();
		}
		if (type >= 134 && type <= 136)
		{
			((Vector2)(ref velocity)).Length();
			if (type == 134 || (type != 134 && Main.npc[(int)ai[1]].alpha < 128))
			{
				if (alpha != 0)
				{
					for (int i = 0; i < 2; i++)
					{
						int num25 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 182, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num25].noGravity = true;
						Main.dust[num25].noLight = true;
					}
				}
				alpha -= 42;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
		}
		if (type > 134)
		{
			bool flag = false;
			if (ai[1] <= 0f)
			{
				flag = true;
			}
			else if (Main.npc[(int)ai[1]].life <= 0)
			{
				flag = true;
			}
			if (flag)
			{
				life = 0;
				HitEffect();
				checkDead();
			}
		}
		if (Main.netMode != 1)
		{
			if (ai[0] == 0f && type == 134)
			{
				ai[3] = whoAmI;
				realLife = whoAmI;
				int num26 = 0;
				int num27 = whoAmI;
				int destroyerSegmentsCount = GetDestroyerSegmentsCount();
				for (int j = 0; j <= destroyerSegmentsCount; j++)
				{
					int num28 = 135;
					if (j == destroyerSegmentsCount)
					{
						num28 = 136;
					}
					num26 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), num28, whoAmI);
					Main.npc[num26].ai[3] = whoAmI;
					Main.npc[num26].realLife = whoAmI;
					Main.npc[num26].ai[1] = num27;
					Main.npc[num27].ai[0] = num26;
					NetMessage.SendData(23, -1, -1, null, num26);
					num27 = num26;
				}
			}
			if (type == 135)
			{
				localAI[0] += Main.rand.Next(4);
				if (localAI[0] >= (float)Main.rand.Next(1400, 26000))
				{
					localAI[0] = 0f;
					TargetClosest();
					if (Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						Vector2 vector = default(Vector2);
						((Vector2)(ref vector))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)(height / 2));
						float num29 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector.X + (float)Main.rand.Next(-20, 21);
						float num30 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector.Y + (float)Main.rand.Next(-20, 21);
						float num2 = (float)Math.Sqrt(num29 * num29 + num30 * num30);
						num2 = 8f / num2;
						num29 *= num2;
						num30 *= num2;
						num29 += (float)Main.rand.Next(-20, 21) * 0.05f;
						num30 += (float)Main.rand.Next(-20, 21) * 0.05f;
						int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(22f, 18f);
						int num3 = 100;
						vector.X += num29 * 5f;
						vector.Y += num30 * 5f;
						int num4 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector.X, vector.Y, num29, num30, num3, attackDamage_ForProjectiles, 0f, Main.myPlayer);
						Main.projectile[num4].timeLeft = 300;
						netUpdate = true;
					}
				}
			}
		}
		int num5 = (int)(position.X / 16f) - 1;
		int num6 = (int)((position.X + (float)width) / 16f) + 2;
		int num7 = (int)(position.Y / 16f) - 1;
		int num8 = (int)((position.Y + (float)height) / 16f) + 2;
		if (num5 < 0)
		{
			num5 = 0;
		}
		if (num6 > Main.maxTilesX)
		{
			num6 = Main.maxTilesX;
		}
		if (num7 < 0)
		{
			num7 = 0;
		}
		if (num8 > Main.maxTilesY)
		{
			num8 = Main.maxTilesY;
		}
		bool flag2 = false;
		if (!flag2)
		{
			Vector2 vector2 = default(Vector2);
			for (int k = num5; k < num6; k++)
			{
				for (int l = num7; l < num8; l++)
				{
					if (Main.tile[k, l] != null && ((Main.tile[k, l].nactive() && (Main.tileSolid[Main.tile[k, l].type] || (Main.tileSolidTop[Main.tile[k, l].type] && Main.tile[k, l].frameY == 0))) || Main.tile[k, l].liquid > 64))
					{
						vector2.X = k * 16;
						vector2.Y = l * 16;
						if (position.X + (float)width > vector2.X && position.X < vector2.X + 16f && position.Y + (float)height > vector2.Y && position.Y < vector2.Y + 16f)
						{
							flag2 = true;
							break;
						}
					}
				}
			}
		}
		if (!flag2)
		{
			if (type != 135 || ai[2] != 1f)
			{
				Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), 0.3f, 0.1f, 0.05f);
			}
			localAI[1] = 1f;
			if (type == 134)
			{
				Rectangle rectangle = default(Rectangle);
				((Rectangle)(ref rectangle))._002Ector((int)position.X, (int)position.Y, width, height);
				int num9 = 1000;
				bool flag3 = true;
				if (position.Y > Main.player[target].position.Y)
				{
					Rectangle rectangle2 = default(Rectangle);
					for (int m = 0; m < 255; m++)
					{
						if (Main.player[m].active)
						{
							((Rectangle)(ref rectangle2))._002Ector((int)Main.player[m].position.X - num9, (int)Main.player[m].position.Y - num9, num9 * 2, num9 * 2);
							if (((Rectangle)(ref rectangle)).Intersects(rectangle2))
							{
								flag3 = false;
								break;
							}
						}
					}
					if (flag3)
					{
						flag2 = true;
					}
				}
			}
		}
		else
		{
			localAI[1] = 0f;
		}
		float num10 = 16f;
		if (Main.IsItDay() || Main.player[target].dead)
		{
			flag2 = false;
			velocity.Y += 1f;
			if ((double)position.Y > Main.worldSurface * 16.0)
			{
				velocity.Y += 1f;
				num10 = 32f;
			}
			if ((double)position.Y > Main.rockLayer * 16.0)
			{
				for (int n = 0; n < 200; n++)
				{
					if (Main.npc[n].aiStyle == aiStyle)
					{
						Main.npc[n].active = false;
					}
				}
			}
		}
		float num11 = 0.1f;
		float num13 = 0.15f;
		if (Main.getGoodWorld)
		{
			num11 *= 1.2f;
			num13 *= 1.2f;
		}
		Vector2 vector3 = default(Vector2);
		((Vector2)(ref vector3))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
		float num14 = Main.player[target].position.X + (float)(Main.player[target].width / 2);
		float num15 = Main.player[target].position.Y + (float)(Main.player[target].height / 2);
		num14 = (int)(num14 / 16f) * 16;
		num15 = (int)(num15 / 16f) * 16;
		vector3.X = (int)(vector3.X / 16f) * 16;
		vector3.Y = (int)(vector3.Y / 16f) * 16;
		num14 -= vector3.X;
		num15 -= vector3.Y;
		float num16 = (float)Math.Sqrt(num14 * num14 + num15 * num15);
		if (ai[1] > 0f && ai[1] < (float)Main.npc.Length)
		{
			int num17 = (int)(44f * scale);
			try
			{
				vector3 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				num14 = Main.npc[(int)ai[1]].position.X + (float)(Main.npc[(int)ai[1]].width / 2) - vector3.X;
				num15 = Main.npc[(int)ai[1]].position.Y + (float)(Main.npc[(int)ai[1]].height / 2) - vector3.Y;
			}
			catch
			{
			}
			if (num > 0)
			{
				float num18 = (float)num17 - (float)num17 * (((float)num - 1f) * 0.1f);
				if (num18 < 0f)
				{
					num18 = 0f;
				}
				if (num18 > (float)num17)
				{
					num18 = num17;
				}
				num15 = Main.npc[(int)ai[1]].position.Y + (float)(Main.npc[(int)ai[1]].height / 2) + num18 - vector3.Y;
			}
			rotation = (float)Math.Atan2(num15, num14) + 1.57f;
			num16 = (float)Math.Sqrt(num14 * num14 + num15 * num15);
			if (num > 0)
			{
				num17 = num17 / num12 * num;
			}
			num16 = (num16 - (float)num17) / num16;
			num14 *= num16;
			num15 *= num16;
			velocity = Vector2.Zero;
			position.X += num14;
			position.Y += num15;
			num14 = Main.npc[(int)ai[1]].position.X + (float)(Main.npc[(int)ai[1]].width / 2) - vector3.X;
			num15 = Main.npc[(int)ai[1]].position.Y + (float)(Main.npc[(int)ai[1]].height / 2) - vector3.Y;
			rotation = (float)Math.Atan2(num15, num14) + 1.57f;
		}
		else
		{
			if (!flag2)
			{
				TargetClosest();
				velocity.Y += 0.15f;
				if (velocity.Y > num10)
				{
					velocity.Y = num10;
				}
				if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num10 * 0.4)
				{
					if (velocity.X < 0f)
					{
						velocity.X -= num11 * 1.1f;
					}
					else
					{
						velocity.X += num11 * 1.1f;
					}
				}
				else if (velocity.Y == num10)
				{
					if (velocity.X < num14)
					{
						velocity.X += num11;
					}
					else if (velocity.X > num14)
					{
						velocity.X -= num11;
					}
				}
				else if (velocity.Y > 4f)
				{
					if (velocity.X < 0f)
					{
						velocity.X += num11 * 0.9f;
					}
					else
					{
						velocity.X -= num11 * 0.9f;
					}
				}
			}
			else
			{
				if (soundDelay == 0)
				{
					float num19 = num16 / 40f;
					if (num19 < 10f)
					{
						num19 = 10f;
					}
					if (num19 > 20f)
					{
						num19 = 20f;
					}
					soundDelay = (int)num19;
					SoundEngine.PlaySound(15, (int)position.X, (int)position.Y);
				}
				num16 = (float)Math.Sqrt(num14 * num14 + num15 * num15);
				float num20 = Math.Abs(num14);
				float num21 = Math.Abs(num15);
				float num22 = num10 / num16;
				num14 *= num22;
				num15 *= num22;
				if (((velocity.X > 0f && num14 > 0f) || (velocity.X < 0f && num14 < 0f)) && ((velocity.Y > 0f && num15 > 0f) || (velocity.Y < 0f && num15 < 0f)))
				{
					if (velocity.X < num14)
					{
						velocity.X += num13;
					}
					else if (velocity.X > num14)
					{
						velocity.X -= num13;
					}
					if (velocity.Y < num15)
					{
						velocity.Y += num13;
					}
					else if (velocity.Y > num15)
					{
						velocity.Y -= num13;
					}
				}
				if ((velocity.X > 0f && num14 > 0f) || (velocity.X < 0f && num14 < 0f) || (velocity.Y > 0f && num15 > 0f) || (velocity.Y < 0f && num15 < 0f))
				{
					if (velocity.X < num14)
					{
						velocity.X += num11;
					}
					else if (velocity.X > num14)
					{
						velocity.X -= num11;
					}
					if (velocity.Y < num15)
					{
						velocity.Y += num11;
					}
					else if (velocity.Y > num15)
					{
						velocity.Y -= num11;
					}
					if ((double)Math.Abs(num15) < (double)num10 * 0.2 && ((velocity.X > 0f && num14 < 0f) || (velocity.X < 0f && num14 > 0f)))
					{
						if (velocity.Y > 0f)
						{
							velocity.Y += num11 * 2f;
						}
						else
						{
							velocity.Y -= num11 * 2f;
						}
					}
					if ((double)Math.Abs(num14) < (double)num10 * 0.2 && ((velocity.Y > 0f && num15 < 0f) || (velocity.Y < 0f && num15 > 0f)))
					{
						if (velocity.X > 0f)
						{
							velocity.X += num11 * 2f;
						}
						else
						{
							velocity.X -= num11 * 2f;
						}
					}
				}
				else if (num20 > num21)
				{
					if (velocity.X < num14)
					{
						velocity.X += num11 * 1.1f;
					}
					else if (velocity.X > num14)
					{
						velocity.X -= num11 * 1.1f;
					}
					if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num10 * 0.5)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y += num11;
						}
						else
						{
							velocity.Y -= num11;
						}
					}
				}
				else
				{
					if (velocity.Y < num15)
					{
						velocity.Y += num11 * 1.1f;
					}
					else if (velocity.Y > num15)
					{
						velocity.Y -= num11 * 1.1f;
					}
					if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num10 * 0.5)
					{
						if (velocity.X > 0f)
						{
							velocity.X += num11;
						}
						else
						{
							velocity.X -= num11;
						}
					}
				}
			}
			rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
			if (type == 134)
			{
				if (flag2)
				{
					if (localAI[0] != 1f)
					{
						netUpdate = true;
					}
					localAI[0] = 1f;
				}
				else
				{
					if (localAI[0] != 0f)
					{
						netUpdate = true;
					}
					localAI[0] = 0f;
				}
				if (((velocity.X > 0f && oldVelocity.X < 0f) || (velocity.X < 0f && oldVelocity.X > 0f) || (velocity.Y > 0f && oldVelocity.Y < 0f) || (velocity.Y < 0f && oldVelocity.Y > 0f)) && !justHit)
				{
					netUpdate = true;
				}
			}
		}
		if (IsMechQueenUp && type == 134)
		{
			NPC nPC = Main.npc[mechQueen];
			Vector2 mechQueenCenter = nPC.GetMechQueenCenter();
			Vector2 vector4 = default(Vector2);
			((Vector2)(ref vector4))._002Ector(0f, 100f);
			Vector2 spinningpoint = mechQueenCenter + vector4;
			float num24 = nPC.velocity.X * 0.025f;
			spinningpoint = spinningpoint.RotatedBy(num24, mechQueenCenter);
			position = spinningpoint - base.Size / 2f + nPC.velocity;
			velocity.X = 0f;
			velocity.Y = 0f;
			rotation = num24 * 0.75f + (float)Math.PI;
		}
	}

	private void AI_005_EaterOfSouls()
	{
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_066d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0684: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_026c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0272: Unknown result type (might be due to invalid IL or missing references)
		//IL_0277: Unknown result type (might be due to invalid IL or missing references)
		//IL_027c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_015c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_0176: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_023d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0243: Unknown result type (might be due to invalid IL or missing references)
		//IL_024d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0252: Unknown result type (might be due to invalid IL or missing references)
		//IL_0257: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0adc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aea: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0afb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b00: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b03: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b12: Unknown result type (might be due to invalid IL or missing references)
		//IL_129f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_12aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_12af: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1300: Unknown result type (might be due to invalid IL or missing references)
		//IL_1317: Unknown result type (might be due to invalid IL or missing references)
		//IL_1321: Unknown result type (might be due to invalid IL or missing references)
		//IL_1326: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e52: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e59: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e60: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e67: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e13: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e18: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e28: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e39: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e45: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_147b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1481: Unknown result type (might be due to invalid IL or missing references)
		//IL_1486: Unknown result type (might be due to invalid IL or missing references)
		//IL_148b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1711: Unknown result type (might be due to invalid IL or missing references)
		//IL_14da: Unknown result type (might be due to invalid IL or missing references)
		//IL_1507: Unknown result type (might be due to invalid IL or missing references)
		//IL_150d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1403: Unknown result type (might be due to invalid IL or missing references)
		//IL_1431: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a99: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aad: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ad1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ad6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1875: Unknown result type (might be due to invalid IL or missing references)
		//IL_187f: Unknown result type (might be due to invalid IL or missing references)
		//IL_189b: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1959: Unknown result type (might be due to invalid IL or missing references)
		//IL_1960: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d21: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d28: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d32: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d48: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d53: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d62: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d67: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d76: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d97: Unknown result type (might be due to invalid IL or missing references)
		//IL_1db2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ddf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1de4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1deb: Unknown result type (might be due to invalid IL or missing references)
		if (type == 210 || type == 211)
		{
			NPCUtils.TargetClosestNonBees(this);
		}
		else if (target < 0 || target <= 255 || Main.player[target].dead)
		{
			TargetClosest();
		}
		if (type == 619)
		{
			if (Main.dayTime)
			{
				velocity.Y -= 0.3f;
				EncourageDespawn(60);
			}
			position += netOffset;
			if (alpha == 255)
			{
				spriteDirection = direction;
				velocity.Y = -6f;
				for (int i = 0; i < 35; i++)
				{
					Dust dust = Dust.NewDustDirect(position, width, height, 5);
					dust.velocity *= 1f;
					dust.scale = 1f + Main.rand.NextFloat() * 0.5f;
					dust.fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
					dust.velocity += velocity * 0.5f;
				}
			}
			alpha -= 15;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (alpha != 0)
			{
				for (int j = 0; j < 2; j++)
				{
					Dust dust2 = Dust.NewDustDirect(position, width, height, 5);
					dust2.velocity *= 1f;
					dust2.scale = 1f + Main.rand.NextFloat() * 0.5f;
					dust2.fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
					dust2.velocity += velocity * 0.3f;
				}
			}
			position -= netOffset;
		}
		NPCAimedTarget targetData = GetTargetData();
		bool flag = false;
		if (targetData.Type == NPCTargetType.Player)
		{
			flag = Main.player[target].dead;
		}
		float num = 6f;
		float num12 = 0.05f;
		if (type == 6 || type == 173)
		{
			num = 4f;
			num12 = 0.02f;
			if (type == 6 && Main.expertMode)
			{
				num12 = 0.035f;
			}
			if (Main.remixWorld)
			{
				num12 = 0.06f;
				num = 5f;
			}
		}
		else if (type == 94)
		{
			num = 4.2f;
			num12 = 0.022f;
		}
		else if (type == 619)
		{
			num = 6f;
			num12 = 0.1f;
		}
		else if (type == 252)
		{
			if (targetData.Type != 0 && Collision.CanHit(this, targetData))
			{
				num = 6f;
				num12 = 0.1f;
			}
			else
			{
				num12 = 0.01f;
				num = 2f;
			}
		}
		else if (type == 42 || (type >= 231 && type <= 235))
		{
			num = 3.5f;
			num12 = 0.021f;
			if (type == 231)
			{
				num = 3f;
				num12 = 0.017f;
			}
			num *= 1f - scale;
			num12 *= 1f - scale;
			if ((double)(position.Y / 16f) < Main.worldSurface)
			{
				if (Main.player[target].position.Y - position.Y > 300f && velocity.Y < 0f)
				{
					velocity.Y *= 0.97f;
				}
				if (Main.player[target].position.Y - position.Y < 80f && velocity.Y > 0f)
				{
					velocity.Y *= 0.97f;
				}
			}
		}
		else if (type == 205)
		{
			num = 3.25f;
			num12 = 0.018f;
		}
		else if (type == 176)
		{
			num = 4f;
			num12 = 0.017f;
		}
		else if (type == 23)
		{
			num = 1f;
			num12 = 0.03f;
		}
		else if (type == 5)
		{
			num = 5f;
			num12 = 0.03f;
		}
		else if (type == 210 || type == 211)
		{
			ai[1] += 1f;
			float num22 = (ai[1] - 60f) / 60f;
			if (num22 > 1f)
			{
				num22 = 1f;
			}
			else
			{
				if (velocity.X > 6f)
				{
					velocity.X = 6f;
				}
				if (velocity.X < -6f)
				{
					velocity.X = -6f;
				}
				if (velocity.Y > 6f)
				{
					velocity.Y = 6f;
				}
				if (velocity.Y < -6f)
				{
					velocity.Y = -6f;
				}
			}
			num = 5f;
			num12 = 0.1f;
			num12 *= num22;
		}
		else if (type == 139 && Main.zenithWorld)
		{
			num = 3f;
		}
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
		float num23 = targetData.Position.X + (float)(targetData.Width / 2);
		float num24 = targetData.Position.Y + (float)(targetData.Height / 2);
		num23 = (int)(num23 / 8f) * 8;
		num24 = (int)(num24 / 8f) * 8;
		vector.X = (int)(vector.X / 8f) * 8;
		vector.Y = (int)(vector.Y / 8f) * 8;
		num23 -= vector.X;
		num24 -= vector.Y;
		float num25 = (float)Math.Sqrt(num23 * num23 + num24 * num24);
		float num26 = num25;
		bool flag2 = false;
		if (num25 > 600f)
		{
			flag2 = true;
		}
		if (num25 == 0f)
		{
			num23 = velocity.X;
			num24 = velocity.Y;
		}
		else
		{
			num25 = num / num25;
			num23 *= num25;
			num24 *= num25;
		}
		bool num28 = type == 6 || type == 139 || type == 173 || type == 205;
		bool flag3 = type == 42 || type == 94 || type == 619 || type == 176 || type == 210 || type == 211 || (type >= 231 && type <= 235);
		bool flag4 = type != 173 && type != 6 && type != 42 && (type < 231 || type > 235) && type != 94 && type != 139 && type != 619;
		if (num28 || flag3)
		{
			if (num26 > 100f || flag3)
			{
				ai[0] += 1f;
				if (ai[0] > 0f)
				{
					velocity.Y += 0.023f;
				}
				else
				{
					velocity.Y -= 0.023f;
				}
				if (ai[0] < -100f || ai[0] > 100f)
				{
					velocity.X += 0.023f;
				}
				else
				{
					velocity.X -= 0.023f;
				}
				if (ai[0] > 200f)
				{
					ai[0] = -200f;
				}
			}
			if (num26 < 150f && (type == 6 || type == 94 || type == 173 || type == 619))
			{
				velocity.X += num23 * 0.007f;
				velocity.Y += num24 * 0.007f;
			}
		}
		if (flag)
		{
			num23 = (float)direction * num / 2f;
			num24 = (0f - num) / 2f;
		}
		else if (type == 619 && base.Center.Y > targetData.Center.Y - 200f)
		{
			velocity.Y -= 0.3f;
		}
		if (type == 139 && ai[3] != 0f)
		{
			if (IsMechQueenUp)
			{
				NPC nPC = Main.npc[mechQueen];
				Vector2 vector2 = default(Vector2);
				((Vector2)(ref vector2))._002Ector(26f * ai[3], 0f);
				int num27 = (int)ai[2];
				if (num27 < 0 || num27 >= 200)
				{
					num27 = FindFirstNPC(134);
					ai[2] = num27;
					netUpdate = true;
				}
				if (num27 > -1)
				{
					NPC nPC2 = Main.npc[num27];
					if (!nPC2.active || nPC2.type != 134)
					{
						dontTakeDamage = false;
						if (ai[3] > 0f)
						{
							netUpdate = true;
						}
						ai[3] = 0f;
					}
					else
					{
						Vector2 spinningpoint = nPC2.Center + vector2;
						spinningpoint = spinningpoint.RotatedBy(nPC2.rotation, nPC2.Center);
						base.Center = spinningpoint;
						velocity = nPC.velocity;
						dontTakeDamage = true;
					}
				}
				else
				{
					dontTakeDamage = false;
					if (ai[3] > 0f)
					{
						netUpdate = true;
					}
					ai[3] = 0f;
				}
			}
			else
			{
				dontTakeDamage = false;
				if (ai[3] > 0f)
				{
					netUpdate = true;
				}
				ai[3] = 0f;
			}
		}
		else
		{
			if (type == 139)
			{
				dontTakeDamage = false;
			}
			if (velocity.X < num23)
			{
				velocity.X += num12;
				if (flag4 && velocity.X < 0f && num23 > 0f)
				{
					velocity.X += num12;
				}
			}
			else if (velocity.X > num23)
			{
				velocity.X -= num12;
				if (flag4 && velocity.X > 0f && num23 < 0f)
				{
					velocity.X -= num12;
				}
			}
			if (velocity.Y < num24)
			{
				velocity.Y += num12;
				if (flag4 && velocity.Y < 0f && num24 > 0f)
				{
					velocity.Y += num12;
				}
			}
			else if (velocity.Y > num24)
			{
				velocity.Y -= num12;
				if (flag4 && velocity.Y > 0f && num24 < 0f)
				{
					velocity.Y -= num12;
				}
			}
		}
		if (type == 23)
		{
			if (num23 > 0f)
			{
				spriteDirection = 1;
				rotation = (float)Math.Atan2(num24, num23);
			}
			else if (num23 < 0f)
			{
				spriteDirection = -1;
				rotation = (float)Math.Atan2(num24, num23) + 3.14f;
			}
		}
		else if (type == 139)
		{
			localAI[0] += 1f;
			if (ai[3] != 0f)
			{
				localAI[0] += 2f;
			}
			if (justHit)
			{
				localAI[0] = 0f;
			}
			float num2 = 120f;
			if (IsMechQueenUp)
			{
				num2 = 360f;
			}
			if (Main.netMode != 1 && localAI[0] >= num2)
			{
				localAI[0] = 0f;
				if (targetData.Type != 0 && Collision.CanHit(this, targetData))
				{
					int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(25f, 22f);
					int num3 = 84;
					Vector2 vector3 = default(Vector2);
					((Vector2)(ref vector3))._002Ector(num23, num24);
					if (IsMechQueenUp)
					{
						Vector2 v3 = targetData.Center - base.Center - targetData.Velocity * 20f;
						float num4 = 8f;
						vector3 = v3.SafeNormalize(Vector2.UnitY) * num4;
					}
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector.X, vector.Y, vector3.X, vector3.Y, num3, attackDamage_ForProjectiles, 0f, Main.myPlayer);
				}
			}
			int num5 = (int)position.X + width / 2;
			int num6 = (int)position.Y + height / 2;
			num5 /= 16;
			num6 /= 16;
			if (WorldGen.InWorld(num5, num6) && !WorldGen.SolidTile(num5, num6))
			{
				Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), 0.3f, 0.1f, 0.05f);
			}
			if (num23 > 0f)
			{
				spriteDirection = 1;
				rotation = (float)Math.Atan2(num24, num23);
			}
			if (num23 < 0f)
			{
				spriteDirection = -1;
				rotation = (float)Math.Atan2(num24, num23) + 3.14f;
			}
		}
		else if (type == 6 || type == 94 || type == 173 || type == 619)
		{
			rotation = (float)Math.Atan2(num24, num23) - 1.57f;
		}
		else if (type == 42 || type == 176 || type == 205 || (type >= 231 && type <= 235))
		{
			if (velocity.X > 0f)
			{
				spriteDirection = 1;
			}
			if (velocity.X < 0f)
			{
				spriteDirection = -1;
			}
			rotation = velocity.X * 0.1f;
		}
		else
		{
			rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
		}
		if (type == 6 || type == 619 || type == 23 || type == 42 || type == 94 || type == 139 || type == 173 || type == 176 || type == 205 || type == 210 || type == 211 || (type >= 231 && type <= 235))
		{
			float num7 = 0.7f;
			if (type == 6 || type == 173)
			{
				num7 = 0.4f;
			}
			if (collideX)
			{
				netUpdate = true;
				velocity.X = oldVelocity.X * (0f - num7);
				if (direction == -1 && velocity.X > 0f && velocity.X < 2f)
				{
					velocity.X = 2f;
				}
				if (direction == 1 && velocity.X < 0f && velocity.X > -2f)
				{
					velocity.X = -2f;
				}
			}
			if (collideY)
			{
				netUpdate = true;
				velocity.Y = oldVelocity.Y * (0f - num7);
				if (velocity.Y > 0f && (double)velocity.Y < 1.5)
				{
					velocity.Y = 2f;
				}
				if (velocity.Y < 0f && (double)velocity.Y > -1.5)
				{
					velocity.Y = -2f;
				}
			}
			position += netOffset;
			if (type == 619)
			{
				int num8 = Dust.NewDust(position, width, height, 5, velocity.X * 0.2f, velocity.Y * 0.2f, 100);
				Dust obj = Main.dust[num8];
				obj.velocity *= 0.5f;
			}
			else if (type != 42 && type != 139 && type != 176 && type != 205 && type != 210 && type != 211 && type != 252 && (type < 231 || type > 235) && Main.rand.Next(20) == 0)
			{
				int num9 = 18;
				if (type == 173)
				{
					num9 = 5;
				}
				int num10 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), num9, velocity.X, 2f, 75, color, scale);
				Main.dust[num10].velocity.X *= 0.5f;
				Main.dust[num10].velocity.Y *= 0.1f;
			}
			position -= netOffset;
		}
		else if (type != 252 && Main.rand.Next(40) == 0)
		{
			int num11 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), 5, velocity.X, 2f);
			Main.dust[num11].velocity.X *= 0.5f;
			Main.dust[num11].velocity.Y *= 0.1f;
		}
		if ((type == 6 || type == 94 || type == 173 || type == 619) && wet)
		{
			if (velocity.Y > 0f)
			{
				velocity.Y *= 0.95f;
			}
			velocity.Y -= 0.3f;
			if (velocity.Y < -2f)
			{
				velocity.Y = -2f;
			}
		}
		if (type == 205 && wet)
		{
			if (velocity.Y > 0f)
			{
				velocity.Y *= 0.95f;
			}
			velocity.Y -= 0.5f;
			if (velocity.Y < -4f)
			{
				velocity.Y = -4f;
			}
			TargetClosest();
		}
		if (type == 42 || type == 176 || (type >= 231 && type <= 235))
		{
			if (wet)
			{
				if (velocity.Y > 0f)
				{
					velocity.Y *= 0.95f;
				}
				velocity.Y -= 0.5f;
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
				TargetClosest();
			}
			if (ai[1] == 101f)
			{
				SoundEngine.PlaySound(in SoundID.Item17, position);
				ai[1] = 0f;
			}
			if (Main.netMode != 1)
			{
				ai[1] += (float)Main.rand.Next(5, 20) * 0.1f * scale;
				if (type == 176)
				{
					ai[1] += (float)Main.rand.Next(5, 20) * 0.1f * scale;
				}
				if (Main.getGoodWorld)
				{
					ai[1] += (float)Main.rand.Next(5, 20) * 0.1f * scale;
				}
				if (targetData.Type == NPCTargetType.Player)
				{
					Player player = Main.player[target];
					if (player != null && player.stealth == 0f && player.itemAnimation == 0)
					{
						ai[1] = 0f;
					}
				}
				if (ai[1] >= 130f)
				{
					if (targetData.Type != 0 && Collision.CanHit(this, targetData))
					{
						float num13 = 8f;
						Vector2 vector4 = default(Vector2);
						((Vector2)(ref vector4))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)(height / 2));
						float num14 = targetData.Center.X - vector4.X + (float)Main.rand.Next(-20, 21);
						float num15 = targetData.Center.Y - vector4.Y + (float)Main.rand.Next(-20, 21);
						if ((num14 < 0f && velocity.X < 0f) || (num14 > 0f && velocity.X > 0f))
						{
							float num16 = (float)Math.Sqrt(num14 * num14 + num15 * num15);
							num16 = num13 / num16;
							num14 *= num16;
							num15 *= num16;
							int num17 = (int)(10f * scale);
							if (type == 176)
							{
								num17 = (int)(30f * scale);
							}
							int num18 = 55;
							int num19 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector4.X, vector4.Y, num14, num15, num18, num17, 0f, Main.myPlayer);
							Main.projectile[num19].timeLeft = 300;
							ai[1] = 101f;
							netUpdate = true;
						}
						else
						{
							ai[1] = 0f;
						}
					}
					else
					{
						ai[1] = 0f;
					}
				}
			}
		}
		if (type == 139 && flag2)
		{
			if ((velocity.X > 0f && num23 > 0f) || (velocity.X < 0f && num23 < 0f))
			{
				int num20 = 12;
				if (IsMechQueenUp)
				{
					num20 = 5;
				}
				if (Math.Abs(velocity.X) < (float)num20)
				{
					velocity.X *= 1.05f;
				}
			}
			else
			{
				velocity.X *= 0.9f;
			}
		}
		if (type == 139 && IsMechQueenUp && ai[2] == 0f)
		{
			Vector2 center = GetTargetData().Center;
			Vector2 v2 = center - base.Center;
			int num21 = 120;
			if (((Vector2)(ref v2)).Length() < (float)num21)
			{
				base.Center = center - v2.SafeNormalize(Vector2.UnitY) * (float)num21;
			}
		}
		if (Main.netMode != 1)
		{
			if (Main.getGoodWorld && type == 6 && AnyNPCs(13))
			{
				if (justHit)
				{
					localAI[0] = 0f;
				}
				localAI[0] += 1f;
				if (localAI[0] == 60f)
				{
					if (targetData.Type != 0 && Collision.CanHit(this, targetData))
					{
						NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2) + velocity.X), (int)(position.Y + (float)(height / 2) + velocity.Y), 666);
					}
					localAI[0] = 0f;
				}
			}
			if (type == 94 && !flag)
			{
				if (justHit)
				{
					localAI[0] = 0f;
				}
				localAI[0] += 1f;
				if (localAI[0] == 180f)
				{
					if (targetData.Type != 0 && Collision.CanHit(this, targetData))
					{
						NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2) + velocity.X), (int)(position.Y + (float)(height / 2) + velocity.Y), 112);
					}
					localAI[0] = 0f;
				}
			}
			if (type == 619 && !flag)
			{
				if (justHit)
				{
					localAI[0] += 10f;
				}
				localAI[0] += 1f;
				if (localAI[0] >= 120f)
				{
					if (targetData.Type != 0 && Collision.CanHit(this, targetData))
					{
						Vector2 val = base.Center - targetData.Center;
						if (((Vector2)(ref val)).Length() < 400f)
						{
							Vector2 vector5 = DirectionTo(new Vector2(targetData.Center.X, targetData.Position.Y));
							velocity = -vector5 * 5f;
							netUpdate = true;
							localAI[0] = 0f;
							vector5 = DirectionTo(new Vector2(targetData.Center.X + (float)Main.rand.Next(-100, 101), targetData.Position.Y + (float)Main.rand.Next(-100, 101)));
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center, vector5 * 15f, 811, 35, 1f, Main.myPlayer);
						}
						else
						{
							localAI[0] = 50f;
						}
					}
					else
					{
						localAI[0] = 50f;
					}
				}
			}
		}
		if ((Main.IsItDay() && type != 173 && type != 619 && type != 6 && type != 23 && type != 42 && type != 94 && type != 176 && type != 205 && type != 210 && type != 211 && type != 252 && (type < 231 || type > 235)) || flag)
		{
			velocity.Y -= num12 * 2f;
			EncourageDespawn(10);
		}
		if (((velocity.X > 0f && oldVelocity.X < 0f) || (velocity.X < 0f && oldVelocity.X > 0f) || (velocity.Y > 0f && oldVelocity.Y < 0f) || (velocity.Y < 0f && oldVelocity.Y > 0f)) && !justHit)
		{
			netUpdate = true;
		}
	}

	public void CopyInteractions(NPC npc)
	{
		for (int i = 0; i < playerInteraction.Length; i++)
		{
			playerInteraction[i] = npc.playerInteraction[i];
		}
		lastInteraction = npc.lastInteraction;
	}

	public static int GetEaterOfWorldsSegmentsCount()
	{
		if (!Main.expertMode)
		{
			return 65;
		}
		return 70;
	}

	public static int GetEaterOfWorldsSegmentsCountByGamemode(int gamemode)
	{
		if (!Main.RegisteredGameModes.TryGetValue(gamemode, out var gameModeData))
		{
			return 65;
		}
		if (!gameModeData.IsExpertMode)
		{
			return 65;
		}
		return 70;
	}

	public static int GetBrainOfCthuluCreepersCount()
	{
		if (Main.getGoodWorld)
		{
			return 40;
		}
		return 20;
	}

	public static int GetDestroyerSegmentsCount()
	{
		if (Main.getGoodWorld)
		{
			return 100;
		}
		return 80;
	}

	public Vector2 GetMechQueenCenter()
	{
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		if (IsMechQueenUp && type == 127)
		{
			return base.Center + new Vector2(0f, -14f);
		}
		return base.Center;
	}

	private void AI_006_Worms()
	{
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0230: Unknown result type (might be due to invalid IL or missing references)
		//IL_0236: Unknown result type (might be due to invalid IL or missing references)
		//IL_023b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0240: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_03af: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03db: Unknown result type (might be due to invalid IL or missing references)
		//IL_033f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0345: Unknown result type (might be due to invalid IL or missing references)
		//IL_034a: Unknown result type (might be due to invalid IL or missing references)
		//IL_034f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2be2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0619: Unknown result type (might be due to invalid IL or missing references)
		//IL_062d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0406: Unknown result type (might be due to invalid IL or missing references)
		//IL_040b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0297: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_030a: Unknown result type (might be due to invalid IL or missing references)
		//IL_032a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0330: Unknown result type (might be due to invalid IL or missing references)
		//IL_077c: Unknown result type (might be due to invalid IL or missing references)
		//IL_078f: Unknown result type (might be due to invalid IL or missing references)
		//IL_041e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0442: Unknown result type (might be due to invalid IL or missing references)
		//IL_0448: Unknown result type (might be due to invalid IL or missing references)
		//IL_0493: Unknown result type (might be due to invalid IL or missing references)
		//IL_0495: Unknown result type (might be due to invalid IL or missing references)
		//IL_0586: Unknown result type (might be due to invalid IL or missing references)
		//IL_058b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0590: Unknown result type (might be due to invalid IL or missing references)
		//IL_059a: Unknown result type (might be due to invalid IL or missing references)
		//IL_059f: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0543: Unknown result type (might be due to invalid IL or missing references)
		//IL_0545: Unknown result type (might be due to invalid IL or missing references)
		//IL_0699: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c78: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c83: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c88: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c42: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d68: Unknown result type (might be due to invalid IL or missing references)
		//IL_204c: Unknown result type (might be due to invalid IL or missing references)
		//IL_21bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_21cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_21f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_21f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_2209: Unknown result type (might be due to invalid IL or missing references)
		//IL_220e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2215: Unknown result type (might be due to invalid IL or missing references)
		//IL_2217: Unknown result type (might be due to invalid IL or missing references)
		//IL_2219: Unknown result type (might be due to invalid IL or missing references)
		//IL_2239: Unknown result type (might be due to invalid IL or missing references)
		//IL_226a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2274: Unknown result type (might be due to invalid IL or missing references)
		//IL_2279: Unknown result type (might be due to invalid IL or missing references)
		//IL_227e: Unknown result type (might be due to invalid IL or missing references)
		//IL_228e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2293: Unknown result type (might be due to invalid IL or missing references)
		//IL_229d: Unknown result type (might be due to invalid IL or missing references)
		//IL_229f: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_22c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_22f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_22fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2301: Unknown result type (might be due to invalid IL or missing references)
		//IL_2306: Unknown result type (might be due to invalid IL or missing references)
		//IL_2316: Unknown result type (might be due to invalid IL or missing references)
		//IL_231b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2322: Unknown result type (might be due to invalid IL or missing references)
		//IL_2328: Unknown result type (might be due to invalid IL or missing references)
		//IL_232d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2332: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e57: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e93: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2963: Unknown result type (might be due to invalid IL or missing references)
		//IL_297c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2995: Unknown result type (might be due to invalid IL or missing references)
		//IL_29a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_264e: Unknown result type (might be due to invalid IL or missing references)
		//IL_266d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a39: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a71: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aac: Unknown result type (might be due to invalid IL or missing references)
		//IL_26fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2713: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_27cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_27d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2766: Unknown result type (might be due to invalid IL or missing references)
		//IL_2748: Unknown result type (might be due to invalid IL or missing references)
		//IL_27eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_28e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_28ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_28ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_28f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2842: Unknown result type (might be due to invalid IL or missing references)
		//IL_2848: Unknown result type (might be due to invalid IL or missing references)
		//IL_284d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2852: Unknown result type (might be due to invalid IL or missing references)
		//IL_290b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2912: Unknown result type (might be due to invalid IL or missing references)
		//IL_2917: Unknown result type (might be due to invalid IL or missing references)
		//IL_291b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2927: Unknown result type (might be due to invalid IL or missing references)
		//IL_2869: Unknown result type (might be due to invalid IL or missing references)
		//IL_2870: Unknown result type (might be due to invalid IL or missing references)
		//IL_2875: Unknown result type (might be due to invalid IL or missing references)
		//IL_2879: Unknown result type (might be due to invalid IL or missing references)
		//IL_2885: Unknown result type (might be due to invalid IL or missing references)
		//IL_32b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_32c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_32c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3abf: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ac5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ae0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ae6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3af0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3afb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b10: Unknown result type (might be due to invalid IL or missing references)
		//IL_34a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_34b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_34b6: Unknown result type (might be due to invalid IL or missing references)
		if (type == 117 && localAI[1] == 0f)
		{
			localAI[1] = 1f;
			SoundEngine.PlaySound(in SoundID.NPCDeath13, position);
			int num = 1;
			if (velocity.X < 0f)
			{
				num = -1;
			}
			for (int i = 0; i < 20; i++)
			{
				Dust.NewDust(new Vector2(position.X - 20f, position.Y - 20f), width + 40, height + 40, 5, num * 8, -1f);
			}
		}
		if (type == 454 && localAI[3] == 0f)
		{
			SoundEngine.PlaySound(in SoundID.Item119, position);
			localAI[3] = 1f;
		}
		if (type >= 454 && type <= 459)
		{
			dontTakeDamage = alpha > 0;
			if (type == 454 || (type != 454 && Main.npc[(int)ai[1]].alpha < 85))
			{
				if (dontTakeDamage)
				{
					for (int j = 0; j < 2; j++)
					{
						int num12 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num12].noGravity = true;
						Main.dust[num12].noLight = true;
					}
				}
				alpha -= 42;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
		}
		if (type >= 621 && type <= 623)
		{
			position += netOffset;
			dontTakeDamage = alpha > 0;
			if (type == 621 || (type != 621 && Main.npc[(int)ai[1]].alpha < 85))
			{
				if (dontTakeDamage)
				{
					for (int k = 0; k < 2; k++)
					{
						Dust.NewDust(position, width, height, 5, 0f, 0f, 100);
					}
				}
				alpha -= 42;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (alpha == 0 && Main.rand.Next(5) == 0)
			{
				Dust.NewDust(position, width, height, 5, 0f, 0f, 100);
			}
			position -= netOffset;
		}
		else if (type == 402)
		{
			ai[2] += 1f;
			float num23 = 600f;
			float num34 = num23 - 30f;
			if (((Vector2)(ref velocity)).Length() >= 1f && ai[2] <= num34)
			{
				velocity *= Utils.Remap(ai[2], num34 * 0.5f, num34, 1f, 0.5f);
			}
			if (ai[2] == num34)
			{
				for (int l = 0; l < 50; l++)
				{
					Vector2 vector = Main.rand.NextVector2Circular(8f, 8f);
					if (Main.rand.Next(2) == 0)
					{
						int num45 = Dust.NewDust(position, width, height, 180, 0f, 0f, 100);
						Main.dust[num45].scale += (float)Main.rand.Next(50) * 0.04f;
						Main.dust[num45].noGravity = true;
						Main.dust[num45].velocity = vector;
						Main.dust[num45].fadeIn = Main.rand.NextFloat() * 1.5f;
					}
					if (Main.rand.Next(2) == 0)
					{
						int num55 = Dust.NewDust(position, width, height, 176, 0f, 0f, 100);
						Main.dust[num55].scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num55].noGravity = true;
						Main.dust[num55].velocity = vector;
						Main.dust[num55].fadeIn = Main.rand.NextFloat() * 1.5f;
					}
				}
				if (Main.netMode != 1)
				{
					SpawnStardustMark_StardustWorm();
					velocity = velocity.SafeNormalize(Vector2.Zero) * 6f;
					netUpdate = true;
				}
			}
			if (ai[2] >= num23 && Main.netMode != 1)
			{
				ai[2] = 0f;
				netUpdate = true;
			}
		}
		if (Main.netMode != 1 && Main.expertMode)
		{
			if (type == 14 && ((double)(position.Y / 16f) < Main.worldSurface || Main.getGoodWorld))
			{
				int num66 = (int)(base.Center.X / 16f);
				int num76 = (int)(base.Center.Y / 16f);
				if (WorldGen.InWorld(num66, num76) && Main.tile[num66, num76].wall == 0)
				{
					int num79 = 900;
					if (Main.getGoodWorld)
					{
						num79 /= 2;
					}
					if (Main.rand.Next(num79) == 0)
					{
						TargetClosest();
						if (Collision.CanHitLine(base.Center, 1, 1, Main.player[target].Center, 1, 1))
						{
							NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2) + velocity.X), (int)(position.Y + (float)(height / 2) + velocity.Y), 666, 0, 0f, 1f);
						}
					}
				}
			}
			else if (type == 13)
			{
				int num2 = 90;
				num2 += (int)((float)life / (float)lifeMax * 60f * 5f);
				if (Main.rand.Next(num2) == 0)
				{
					TargetClosest();
					if (Collision.CanHitLine(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2) + velocity.X), (int)(position.Y + (float)(height / 2) + velocity.Y), 666, 0, 0f, 1f);
					}
				}
			}
		}
		bool flag = false;
		float num3 = 0.2f;
		switch (type)
		{
		case 513:
			flag = !Main.player[target].ZoneUndergroundDesert;
			num3 = 0.1f;
			break;
		case 10:
		case 39:
		case 95:
		case 117:
		case 510:
			flag = true;
			break;
		case 621:
			flag = false;
			break;
		}
		if (type >= 13 && type <= 15)
		{
			realLife = -1;
		}
		else if (ai[3] > 0f)
		{
			realLife = (int)ai[3];
		}
		if (target < 0 || target == 255 || Main.player[target].dead || (flag && (double)Main.player[target].position.Y < Main.worldSurface * 16.0))
		{
			TargetClosest();
		}
		if (Main.player[target].dead || (flag && (double)Main.player[target].position.Y < Main.worldSurface * 16.0))
		{
			EncourageDespawn(300);
			if (flag)
			{
				velocity.Y += num3;
			}
		}
		if (type == 621 && Main.dayTime)
		{
			EncourageDespawn(60);
			velocity.Y += 1f;
		}
		if (Main.netMode != 1)
		{
			if (type == 87 && ai[0] == 0f)
			{
				ai[3] = whoAmI;
				realLife = whoAmI;
				int num4 = 0;
				int num5 = whoAmI;
				for (int m = 0; m < 14; m++)
				{
					int num6 = 89;
					switch (m)
					{
					case 1:
					case 8:
						num6 = 88;
						break;
					case 11:
						num6 = 90;
						break;
					case 12:
						num6 = 91;
						break;
					case 13:
						num6 = 92;
						break;
					}
					num4 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), num6, whoAmI);
					Main.npc[num4].ai[3] = whoAmI;
					Main.npc[num4].realLife = whoAmI;
					Main.npc[num4].ai[1] = num5;
					Main.npc[num4].CopyInteractions(this);
					Main.npc[num5].ai[0] = num4;
					NetMessage.SendData(23, -1, -1, null, num4);
					num5 = num4;
				}
			}
			if (type == 454 && ai[0] == 0f)
			{
				ai[3] = whoAmI;
				realLife = whoAmI;
				int num7 = 0;
				int num8 = whoAmI;
				for (int n = 0; n < 30; n++)
				{
					int num9 = 456;
					if ((n - 2) % 4 == 0 && n < 26)
					{
						num9 = 455;
					}
					else
					{
						switch (n)
						{
						case 27:
							num9 = 457;
							break;
						case 28:
							num9 = 458;
							break;
						case 29:
							num9 = 459;
							break;
						}
					}
					num7 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), num9, whoAmI);
					Main.npc[num7].ai[3] = whoAmI;
					Main.npc[num7].realLife = whoAmI;
					Main.npc[num7].ai[1] = num8;
					Main.npc[num7].CopyInteractions(this);
					Main.npc[num8].ai[0] = num7;
					NetMessage.SendData(23, -1, -1, null, num7);
					num8 = num7;
				}
			}
			if (type == 513 && ai[0] == 0f)
			{
				ai[3] = whoAmI;
				realLife = whoAmI;
				int num10 = 0;
				int num11 = whoAmI;
				int num13 = Main.rand.Next(6, 10);
				for (int num14 = 0; num14 < num13; num14++)
				{
					int num15 = 514;
					if (num14 == num13 - 1)
					{
						num15 = 515;
					}
					num10 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), num15, whoAmI);
					Main.npc[num10].ai[3] = whoAmI;
					Main.npc[num10].realLife = whoAmI;
					Main.npc[num10].ai[1] = num11;
					Main.npc[num10].CopyInteractions(this);
					Main.npc[num11].ai[0] = num10;
					NetMessage.SendData(23, -1, -1, null, num10);
					num11 = num10;
				}
			}
			if (type == 510 && ai[0] == 0f)
			{
				ai[3] = whoAmI;
				realLife = whoAmI;
				int num16 = 0;
				int num17 = whoAmI;
				int num18 = Main.rand.Next(12, 21);
				for (int num19 = 0; num19 < num18; num19++)
				{
					int num20 = 511;
					if (num19 == num18 - 1)
					{
						num20 = 512;
					}
					num16 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), num20, whoAmI);
					Main.npc[num16].ai[3] = whoAmI;
					Main.npc[num16].realLife = whoAmI;
					Main.npc[num16].ai[1] = num17;
					Main.npc[num16].CopyInteractions(this);
					Main.npc[num17].ai[0] = num16;
					NetMessage.SendData(23, -1, -1, null, num16);
					num17 = num16;
				}
			}
			if (type == 621 && ai[0] == 0f)
			{
				ai[3] = whoAmI;
				realLife = whoAmI;
				int num21 = 0;
				int num22 = whoAmI;
				int num24 = 16;
				for (int num25 = 0; num25 < num24; num25++)
				{
					int num26 = 622;
					if (num25 == num24 - 1)
					{
						num26 = 623;
					}
					num21 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), num26, whoAmI);
					Main.npc[num21].ai[3] = whoAmI;
					Main.npc[num21].realLife = whoAmI;
					Main.npc[num21].ai[1] = num22;
					Main.npc[num21].CopyInteractions(this);
					Main.npc[num22].ai[0] = num21;
					NetMessage.SendData(23, -1, -1, null, num21);
					num22 = num21;
				}
			}
			else if ((type == 7 || type == 8 || type == 10 || type == 11 || type == 13 || type == 14 || type == 39 || type == 40 || type == 95 || type == 96 || type == 98 || type == 99 || type == 117 || type == 118) && ai[0] == 0f)
			{
				if (type == 7 || type == 10 || type == 13 || type == 39 || type == 95 || type == 98 || type == 117)
				{
					if (type < 13 || type > 15)
					{
						ai[3] = whoAmI;
						realLife = whoAmI;
					}
					ai[2] = Main.rand.Next(8, 13);
					if (type == 10)
					{
						ai[2] = Main.rand.Next(4, 7);
					}
					if (type == 13)
					{
						ai[2] = GetEaterOfWorldsSegmentsCount();
					}
					if (type == 39)
					{
						ai[2] = Main.rand.Next(14, 23);
						if (Main.getGoodWorld)
						{
							ai[2] += 3f;
							if (Main.remixWorld)
							{
								ai[2] += 4f;
							}
						}
					}
					if (type == 95)
					{
						ai[2] = Main.rand.Next(6, 12);
					}
					if (type == 98)
					{
						ai[2] = Main.rand.Next(20, 26);
					}
					if (type == 117)
					{
						ai[2] = Main.rand.Next(3, 6);
					}
					if (type == 7 && Main.remixWorld)
					{
						ai[2] *= 2f;
					}
					ai[0] = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), type + 1, whoAmI);
					Main.npc[(int)ai[0]].CopyInteractions(this);
				}
				else if ((type == 8 || type == 11 || type == 14 || type == 40 || type == 96 || type == 99 || type == 118) && ai[2] > 0f)
				{
					ai[0] = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), type, whoAmI);
					Main.npc[(int)ai[0]].CopyInteractions(this);
				}
				else
				{
					ai[0] = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), type + 1, whoAmI);
					Main.npc[(int)ai[0]].CopyInteractions(this);
				}
				if (type < 13 || type > 15)
				{
					Main.npc[(int)ai[0]].ai[3] = ai[3];
					Main.npc[(int)ai[0]].realLife = realLife;
				}
				Main.npc[(int)ai[0]].ai[1] = whoAmI;
				Main.npc[(int)ai[0]].ai[2] = ai[2] - 1f;
				netUpdate = true;
			}
			if (type == 412 && ai[0] == 0f)
			{
				ai[3] = whoAmI;
				realLife = whoAmI;
				int num27 = 0;
				int num28 = whoAmI;
				int num29 = 30;
				for (int num30 = 0; num30 < num29; num30++)
				{
					int num31 = 413;
					if (num30 == num29 - 1)
					{
						num31 = 414;
					}
					num27 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), num31, whoAmI);
					Main.npc[num27].ai[3] = whoAmI;
					Main.npc[num27].realLife = whoAmI;
					Main.npc[num27].ai[1] = num28;
					Main.npc[num27].CopyInteractions(this);
					Main.npc[num28].ai[0] = num27;
					NetMessage.SendData(23, -1, -1, null, num27);
					num28 = num27;
				}
			}
			switch (type)
			{
			case 8:
			case 9:
			case 11:
			case 12:
			case 40:
			case 41:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 96:
			case 97:
			case 99:
			case 100:
			case 118:
			case 119:
			case 413:
			case 414:
			case 455:
			case 456:
			case 457:
			case 458:
			case 459:
			case 511:
			case 512:
			case 514:
			case 515:
			case 622:
			case 623:
				if (!Main.npc[(int)ai[1]].active || Main.npc[(int)ai[1]].aiStyle != aiStyle)
				{
					life = 0;
					HitEffect();
					checkDead();
					active = false;
					NetMessage.SendData(28, -1, -1, null, whoAmI, -1f);
					return;
				}
				break;
			}
			switch (type)
			{
			case 7:
			case 8:
			case 10:
			case 11:
			case 39:
			case 40:
			case 87:
			case 88:
			case 89:
			case 90:
			case 91:
			case 95:
			case 96:
			case 98:
			case 99:
			case 117:
			case 118:
			case 412:
			case 413:
			case 454:
			case 455:
			case 456:
			case 457:
			case 458:
			case 510:
			case 511:
			case 513:
			case 514:
			case 621:
			case 622:
				if (!Main.npc[(int)ai[0]].active || Main.npc[(int)ai[0]].aiStyle != aiStyle)
				{
					life = 0;
					HitEffect();
					checkDead();
					active = false;
					NetMessage.SendData(28, -1, -1, null, whoAmI, -1f);
					return;
				}
				break;
			}
			if (type == 13 || type == 14 || type == 15)
			{
				if (!Main.npc[(int)ai[1]].active && !Main.npc[(int)ai[0]].active)
				{
					life = 0;
					HitEffect();
					checkDead();
					active = false;
					NetMessage.SendData(28, -1, -1, null, whoAmI, -1f);
					return;
				}
				if (type == 13 && !Main.npc[(int)ai[0]].active)
				{
					life = 0;
					HitEffect();
					checkDead();
					active = false;
					NetMessage.SendData(28, -1, -1, null, whoAmI, -1f);
					return;
				}
				if (type == 15 && !Main.npc[(int)ai[1]].active)
				{
					life = 0;
					HitEffect();
					checkDead();
					active = false;
					NetMessage.SendData(28, -1, -1, null, whoAmI, -1f);
					return;
				}
				if (type == 14 && (!Main.npc[(int)ai[1]].active || Main.npc[(int)ai[1]].aiStyle != aiStyle))
				{
					type = 13;
					int num32 = whoAmI;
					float num33 = (float)life / (float)lifeMax;
					float num35 = ai[0];
					SetDefaultsKeepPlayerInteraction(type);
					life = (int)((float)lifeMax * num33);
					ai[0] = num35;
					TargetClosest();
					netUpdate = true;
					whoAmI = num32;
					alpha = 0;
				}
				if (type == 14 && (!Main.npc[(int)ai[0]].active || Main.npc[(int)ai[0]].aiStyle != aiStyle))
				{
					type = 15;
					int num36 = whoAmI;
					float num37 = (float)life / (float)lifeMax;
					float num38 = ai[1];
					SetDefaultsKeepPlayerInteraction(type);
					life = (int)((float)lifeMax * num37);
					ai[1] = num38;
					TargetClosest();
					netUpdate = true;
					whoAmI = num36;
					alpha = 0;
				}
			}
			if (!active && Main.netMode == 2)
			{
				NetMessage.SendData(28, -1, -1, null, whoAmI, -1f);
			}
		}
		int num39 = (int)(position.X / 16f) - 1;
		int num40 = (int)((position.X + (float)width) / 16f) + 2;
		int num41 = (int)(position.Y / 16f) - 1;
		int num42 = (int)((position.Y + (float)height) / 16f) + 2;
		if (num39 < 0)
		{
			num39 = 0;
		}
		if (num40 > Main.maxTilesX)
		{
			num40 = Main.maxTilesX;
		}
		if (num41 < 0)
		{
			num41 = 0;
		}
		if (num42 > Main.maxTilesY)
		{
			num42 = Main.maxTilesY;
		}
		bool flag2 = false;
		if (type >= 87 && type <= 92)
		{
			flag2 = true;
		}
		if (type >= 454 && type <= 459)
		{
			flag2 = true;
		}
		if (type >= 621 && type <= 623)
		{
			flag2 = true;
		}
		if (type >= 412 && type <= 414)
		{
			flag2 = true;
		}
		if (type == 402)
		{
			flag2 = true;
		}
		if (!flag2)
		{
			Vector2 vector2 = default(Vector2);
			for (int num43 = num39; num43 < num40; num43++)
			{
				for (int num44 = num41; num44 < num42; num44++)
				{
					if (Main.tile[num43, num44] == null || ((!Main.tile[num43, num44].nactive() || (!Main.tileSolid[Main.tile[num43, num44].type] && (!Main.tileSolidTop[Main.tile[num43, num44].type] || Main.tile[num43, num44].frameY != 0))) && Main.tile[num43, num44].liquid <= 64))
					{
						continue;
					}
					vector2.X = num43 * 16;
					vector2.Y = num44 * 16;
					if (position.X + (float)width > vector2.X && position.X < vector2.X + 16f && position.Y + (float)height > vector2.Y && position.Y < vector2.Y + 16f)
					{
						flag2 = true;
						if (Main.rand.Next(100) == 0 && type != 117 && Main.tile[num43, num44].nactive() && Main.tileSolid[Main.tile[num43, num44].type])
						{
							WorldGen.KillTile(num43, num44, fail: true, effectOnly: true);
						}
					}
				}
			}
		}
		if (!flag2 && (type == 7 || type == 10 || type == 13 || type == 39 || type == 95 || type == 98 || type == 117 || type == 375 || type == 454 || type == 510 || type == 513 || type == 621))
		{
			Rectangle rectangle = default(Rectangle);
			((Rectangle)(ref rectangle))._002Ector((int)position.X, (int)position.Y, width, height);
			int num46 = 1000;
			bool flag3 = true;
			Rectangle rectangle2 = default(Rectangle);
			for (int num47 = 0; num47 < 255; num47++)
			{
				if (Main.player[num47].active)
				{
					((Rectangle)(ref rectangle2))._002Ector((int)Main.player[num47].position.X - num46, (int)Main.player[num47].position.Y - num46, num46 * 2, num46 * 2);
					if (((Rectangle)(ref rectangle)).Intersects(rectangle2))
					{
						flag3 = false;
						break;
					}
				}
			}
			if (flag3)
			{
				flag2 = true;
			}
		}
		if ((type >= 87 && type <= 92) || (type >= 454 && type <= 459) || (type >= 621 && type <= 623))
		{
			if (velocity.X < 0f)
			{
				spriteDirection = 1;
			}
			else if (velocity.X > 0f)
			{
				spriteDirection = -1;
			}
		}
		if (type == 414)
		{
			if (justHit)
			{
				localAI[3] = 3f;
			}
			if (localAI[2] > 0f)
			{
				localAI[2] -= 16f;
				if (localAI[2] == 0f)
				{
					localAI[2] = -128f;
				}
			}
			else if (localAI[2] < 0f)
			{
				localAI[2] += 16f;
			}
			else if (localAI[3] > 0f)
			{
				localAI[2] = 128f;
				localAI[3] -= 1f;
			}
		}
		if (type == 412)
		{
			position += netOffset;
			Vector2 vector3 = base.Center + (rotation - (float)Math.PI / 2f).ToRotationVector2() * 8f;
			Vector2 vector4 = rotation.ToRotationVector2() * 16f;
			Dust obj = Main.dust[Dust.NewDust(vector3 + vector4, 0, 0, 6, velocity.X, velocity.Y, 100, Color.Transparent, 1f + Main.rand.NextFloat() * 3f)];
			obj.noGravity = true;
			obj.noLight = true;
			obj.position -= new Vector2(4f);
			obj.fadeIn = 1f;
			obj.velocity = Vector2.Zero;
			Dust obj2 = Main.dust[Dust.NewDust(vector3 - vector4, 0, 0, 6, velocity.X, velocity.Y, 100, Color.Transparent, 1f + Main.rand.NextFloat() * 3f)];
			obj2.noGravity = true;
			obj2.noLight = true;
			obj2.position -= new Vector2(4f);
			obj2.fadeIn = 1f;
			obj2.velocity = Vector2.Zero;
			position -= netOffset;
		}
		float num48 = 8f;
		float num49 = 0.07f;
		if (type == 95)
		{
			num48 = 5.5f;
			num49 = 0.045f;
		}
		if (type == 10)
		{
			num48 = 6f;
			num49 = 0.05f;
		}
		if (type == 513)
		{
			num48 = 7f;
			num49 = 0.1f;
		}
		if (type == 7)
		{
			num48 = 9f;
			num49 = 0.1f;
		}
		if (type == 13)
		{
			num48 = 10f;
			num49 = 0.07f;
			if (Main.expertMode)
			{
				num48 = 12f;
				num49 = 0.15f;
			}
			if (Main.getGoodWorld)
			{
				num48 += 4f;
				num49 += 0.05f;
			}
		}
		if (type == 510)
		{
			if (!Main.player[target].dead && Main.player[target].ZoneSandstorm)
			{
				num48 = 16f;
				num49 = 0.35f;
			}
			else
			{
				num48 = 10f;
				num49 = 0.25f;
			}
		}
		if (type == 87)
		{
			num48 = 11f;
			num49 = 0.25f;
		}
		if (type == 621)
		{
			num48 = 15f;
			num49 = 0.45f;
		}
		if (type == 375)
		{
			num48 = 6f;
			num49 = 0.15f;
		}
		if (type == 454)
		{
			num48 = 20f;
			num49 = 0.55f;
		}
		if (type == 402)
		{
			num48 = 9f;
			num49 = 0.3f;
		}
		if (type == 117 && Main.wofNPCIndex >= 0)
		{
			float num80 = (float)Main.npc[Main.wofNPCIndex].life / (float)Main.npc[Main.wofNPCIndex].lifeMax;
			if ((double)num80 < 0.5)
			{
				num48 += 1f;
				num49 += 0.1f;
			}
			if ((double)num80 < 0.25)
			{
				num48 += 1f;
				num49 += 0.1f;
			}
			if ((double)num80 < 0.1)
			{
				num48 += 2f;
				num49 += 0.1f;
			}
		}
		if (type == 39)
		{
			num48 = 9f;
			num49 = 0.1f;
			if (Main.getGoodWorld)
			{
				num48 = 10f;
				num49 = 0.12f;
			}
		}
		Vector2 vector5 = default(Vector2);
		((Vector2)(ref vector5))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
		float num50 = Main.player[target].position.X + (float)(Main.player[target].width / 2);
		float num51 = Main.player[target].position.Y + (float)(Main.player[target].height / 2);
		if (type == 412)
		{
			num48 = 10f;
			num49 = 0.3f;
			int num52 = -1;
			int num53 = (int)(Main.player[target].Center.X / 16f);
			int num54 = (int)(Main.player[target].Center.Y / 16f);
			for (int num56 = num53 - 2; num56 <= num53 + 2; num56++)
			{
				for (int num57 = num54; num57 <= num54 + 15; num57++)
				{
					if (WorldGen.SolidTile2(num56, num57))
					{
						num52 = num57;
						break;
					}
				}
				if (num52 > 0)
				{
					break;
				}
			}
			if (num52 > 0)
			{
				num52 *= 16;
				float num58 = num52 - 800;
				if (Main.player[target].position.Y > num58)
				{
					num51 = num58;
					if (Math.Abs(base.Center.X - Main.player[target].Center.X) < 500f)
					{
						num50 = ((!(velocity.X > 0f)) ? (Main.player[target].Center.X - 600f) : (Main.player[target].Center.X + 600f));
					}
				}
			}
			else
			{
				num48 = 14f;
				num49 = 0.5f;
			}
			float num59 = num48 * 1.3f;
			float num60 = num48 * 0.7f;
			float num61 = ((Vector2)(ref velocity)).Length();
			if (num61 > 0f)
			{
				if (num61 > num59)
				{
					((Vector2)(ref velocity)).Normalize();
					velocity *= num59;
				}
				else if (num61 < num60)
				{
					((Vector2)(ref velocity)).Normalize();
					velocity *= num60;
				}
			}
			if (num52 > 0)
			{
				for (int num62 = 0; num62 < 200; num62++)
				{
					if (Main.npc[num62].active && Main.npc[num62].type == type && num62 != whoAmI)
					{
						Vector2 vector6 = Main.npc[num62].Center - base.Center;
						if (((Vector2)(ref vector6)).Length() < 400f)
						{
							((Vector2)(ref vector6)).Normalize();
							vector6 *= 1000f;
							num50 -= vector6.X;
							num51 -= vector6.Y;
						}
					}
				}
			}
			else
			{
				for (int num63 = 0; num63 < 200; num63++)
				{
					if (Main.npc[num63].active && Main.npc[num63].type == type && num63 != whoAmI)
					{
						Vector2 vector7 = Main.npc[num63].Center - base.Center;
						if (((Vector2)(ref vector7)).Length() < 60f)
						{
							((Vector2)(ref vector7)).Normalize();
							vector7 *= 200f;
							num50 -= vector7.X;
							num51 -= vector7.Y;
						}
					}
				}
			}
		}
		num50 = (int)(num50 / 16f) * 16;
		num51 = (int)(num51 / 16f) * 16;
		vector5.X = (int)(vector5.X / 16f) * 16;
		vector5.Y = (int)(vector5.Y / 16f) * 16;
		num50 -= vector5.X;
		num51 -= vector5.Y;
		if (type == 375)
		{
			num50 *= -1f;
			num51 *= -1f;
		}
		float num64 = (float)Math.Sqrt(num50 * num50 + num51 * num51);
		if (ai[1] > 0f && ai[1] < (float)Main.npc.Length)
		{
			try
			{
				vector5 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				num50 = Main.npc[(int)ai[1]].position.X + (float)(Main.npc[(int)ai[1]].width / 2) - vector5.X;
				num51 = Main.npc[(int)ai[1]].position.Y + (float)(Main.npc[(int)ai[1]].height / 2) - vector5.Y;
			}
			catch
			{
			}
			rotation = (float)Math.Atan2(num51, num50) + 1.57f;
			num64 = (float)Math.Sqrt(num50 * num50 + num51 * num51);
			int num65 = width;
			if (type >= 87 && type <= 92)
			{
				num65 = 42;
			}
			if (type >= 454 && type <= 459)
			{
				num65 = 36;
			}
			if (type >= 13 && type <= 15)
			{
				num65 = (int)((float)num65 * scale);
			}
			if (type >= 513 && type <= 515)
			{
				num65 -= 6;
			}
			if (type >= 412 && type <= 414)
			{
				num65 += 6;
			}
			if (type >= 621 && type <= 623)
			{
				num65 = 24;
			}
			if (Main.getGoodWorld && type >= 13 && type <= 15)
			{
				num65 = 62;
			}
			num64 = (num64 - (float)num65) / num64;
			num50 *= num64;
			num51 *= num64;
			velocity = Vector2.Zero;
			position.X += num50;
			position.Y += num51;
			if (type >= 87 && type <= 92)
			{
				if (num50 < 0f)
				{
					spriteDirection = 1;
				}
				else if (num50 > 0f)
				{
					spriteDirection = -1;
				}
			}
			if (type >= 454 && type <= 459)
			{
				if (num50 < 0f)
				{
					spriteDirection = 1;
				}
				else if (num50 > 0f)
				{
					spriteDirection = -1;
				}
			}
			if (type >= 621 && type <= 623)
			{
				if (num50 < 0f)
				{
					spriteDirection = 1;
				}
				else if (num50 > 0f)
				{
					spriteDirection = -1;
				}
			}
		}
		else
		{
			if (!flag2)
			{
				TargetClosest();
				if (type == 39 && velocity.Y < 0f)
				{
					velocity.Y += 0.08f;
				}
				else
				{
					velocity.Y += 0.11f;
				}
				if (velocity.Y > num48)
				{
					velocity.Y = num48;
				}
				if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num48 * 0.4)
				{
					if (velocity.X < 0f)
					{
						velocity.X -= num49 * 1.1f;
					}
					else
					{
						velocity.X += num49 * 1.1f;
					}
				}
				else if (velocity.Y == num48)
				{
					if (velocity.X < num50)
					{
						velocity.X += num49;
					}
					else if (velocity.X > num50)
					{
						velocity.X -= num49;
					}
				}
				else if (velocity.Y > 4f)
				{
					if (velocity.X < 0f)
					{
						velocity.X += num49 * 0.9f;
					}
					else
					{
						velocity.X -= num49 * 0.9f;
					}
				}
			}
			else
			{
				if (type != 621 && type != 87 && type != 117 && type != 454 && type != 412 && soundDelay == 0)
				{
					float num67 = num64 / 40f;
					if (num67 < 10f)
					{
						num67 = 10f;
					}
					if (num67 > 20f)
					{
						num67 = 20f;
					}
					soundDelay = (int)num67;
					SoundEngine.PlaySound(15, (int)position.X, (int)position.Y);
				}
				num64 = (float)Math.Sqrt(num50 * num50 + num51 * num51);
				float num68 = Math.Abs(num50);
				float num69 = Math.Abs(num51);
				float num70 = num48 / num64;
				num50 *= num70;
				num51 *= num70;
				bool flag4 = false;
				if ((type == 7 || type == 13) && ((!Main.player[target].ZoneCorrupt && !Main.player[target].ZoneCrimson) || Main.player[target].dead))
				{
					flag4 = true;
				}
				if ((type == 513 && (double)Main.player[target].position.Y < Main.worldSurface * 16.0 && !Main.player[target].ZoneSandstorm && !Main.player[target].ZoneUndergroundDesert) || Main.player[target].dead)
				{
					flag4 = true;
				}
				if ((type == 510 && (double)Main.player[target].position.Y < Main.worldSurface * 16.0 && !Main.player[target].ZoneSandstorm && !Main.player[target].ZoneUndergroundDesert) || Main.player[target].dead)
				{
					flag4 = true;
				}
				if (flag4)
				{
					bool flag5 = true;
					for (int num71 = 0; num71 < 255; num71++)
					{
						if (Main.player[num71].active && !Main.player[num71].dead && Main.player[num71].ZoneCorrupt)
						{
							flag5 = false;
						}
					}
					if (flag5)
					{
						if (Main.netMode != 1 && (double)(position.Y / 16f) > (Main.rockLayer + (double)Main.maxTilesY) / 2.0)
						{
							active = false;
							int num72 = (int)ai[0];
							while (num72 > 0 && num72 < 200 && Main.npc[num72].active && Main.npc[num72].aiStyle == aiStyle)
							{
								int num81 = (int)Main.npc[num72].ai[0];
								Main.npc[num72].active = false;
								life = 0;
								if (Main.netMode == 2)
								{
									NetMessage.SendData(23, -1, -1, null, num72);
								}
								num72 = num81;
							}
							if (Main.netMode == 2)
							{
								NetMessage.SendData(23, -1, -1, null, whoAmI);
							}
						}
						num50 = 0f;
						num51 = num48;
					}
				}
				bool flag6 = false;
				if (type == 87)
				{
					if (((velocity.X > 0f && num50 < 0f) || (velocity.X < 0f && num50 > 0f) || (velocity.Y > 0f && num51 < 0f) || (velocity.Y < 0f && num51 > 0f)) && Math.Abs(velocity.X) + Math.Abs(velocity.Y) > num49 / 2f && num64 < 300f)
					{
						flag6 = true;
						if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < num48)
						{
							velocity *= 1.1f;
						}
					}
					if (position.Y > Main.player[target].position.Y || (double)(Main.player[target].position.Y / 16f) > Main.worldSurface || Main.player[target].dead)
					{
						flag6 = true;
						if (Math.Abs(velocity.X) < num48 / 2f)
						{
							if (velocity.X == 0f)
							{
								velocity.X -= direction;
							}
							velocity.X *= 1.1f;
						}
						else if (velocity.Y > 0f - num48)
						{
							velocity.Y -= num49;
						}
					}
				}
				if (type == 454 || type == 621)
				{
					float num73 = 300f;
					if (type == 621)
					{
						num73 = 120f;
					}
					if (((velocity.X > 0f && num50 < 0f) || (velocity.X < 0f && num50 > 0f) || (velocity.Y > 0f && num51 < 0f) || (velocity.Y < 0f && num51 > 0f)) && Math.Abs(velocity.X) + Math.Abs(velocity.Y) > num49 / 2f && num64 < num73)
					{
						flag6 = true;
						if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < num48)
						{
							velocity *= 1.1f;
						}
					}
					if (position.Y > Main.player[target].position.Y || Main.player[target].dead)
					{
						flag6 = true;
						if (Math.Abs(velocity.X) < num48 / 2f)
						{
							if (velocity.X == 0f)
							{
								velocity.X -= direction;
							}
							velocity.X *= 1.1f;
						}
						else if (velocity.Y > 0f - num48)
						{
							velocity.Y -= num49;
						}
					}
				}
				if (!flag6)
				{
					if ((velocity.X > 0f && num50 > 0f) || (velocity.X < 0f && num50 < 0f) || (velocity.Y > 0f && num51 > 0f) || (velocity.Y < 0f && num51 < 0f))
					{
						if (velocity.X < num50)
						{
							velocity.X += num49;
						}
						else if (velocity.X > num50)
						{
							velocity.X -= num49;
						}
						if (velocity.Y < num51)
						{
							velocity.Y += num49;
						}
						else if (velocity.Y > num51)
						{
							velocity.Y -= num49;
						}
						if ((double)Math.Abs(num51) < (double)num48 * 0.2 && ((velocity.X > 0f && num50 < 0f) || (velocity.X < 0f && num50 > 0f)))
						{
							if (velocity.Y > 0f)
							{
								velocity.Y += num49 * 2f;
							}
							else
							{
								velocity.Y -= num49 * 2f;
							}
						}
						if ((double)Math.Abs(num50) < (double)num48 * 0.2 && ((velocity.Y > 0f && num51 < 0f) || (velocity.Y < 0f && num51 > 0f)))
						{
							if (velocity.X > 0f)
							{
								velocity.X += num49 * 2f;
							}
							else
							{
								velocity.X -= num49 * 2f;
							}
						}
					}
					else if (num68 > num69)
					{
						if (velocity.X < num50)
						{
							velocity.X += num49 * 1.1f;
						}
						else if (velocity.X > num50)
						{
							velocity.X -= num49 * 1.1f;
						}
						if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num48 * 0.5)
						{
							if (velocity.Y > 0f)
							{
								velocity.Y += num49;
							}
							else
							{
								velocity.Y -= num49;
							}
						}
					}
					else
					{
						if (velocity.Y < num51)
						{
							velocity.Y += num49 * 1.1f;
						}
						else if (velocity.Y > num51)
						{
							velocity.Y -= num49 * 1.1f;
						}
						if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num48 * 0.5)
						{
							if (velocity.X > 0f)
							{
								velocity.X += num49;
							}
							else
							{
								velocity.X -= num49;
							}
						}
					}
				}
			}
			rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
			if (type == 7 || type == 10 || type == 13 || type == 39 || type == 95 || type == 98 || type == 117 || type == 510 || type == 513 || type == 621)
			{
				if (flag2)
				{
					if (localAI[0] != 1f)
					{
						netUpdate = true;
					}
					localAI[0] = 1f;
				}
				else
				{
					if (localAI[0] != 0f)
					{
						netUpdate = true;
					}
					localAI[0] = 0f;
				}
				if (((velocity.X > 0f && oldVelocity.X < 0f) || (velocity.X < 0f && oldVelocity.X > 0f) || (velocity.Y > 0f && oldVelocity.Y < 0f) || (velocity.Y < 0f && oldVelocity.Y > 0f)) && !justHit)
				{
					netUpdate = true;
				}
			}
			if (type == 454)
			{
				float num74 = Vector2.Distance(Main.player[target].Center, base.Center);
				int num75 = 0;
				if (Vector2.Normalize(Main.player[target].Center - base.Center).ToRotation().AngleTowards(velocity.ToRotation(), (float)Math.PI / 2f) == velocity.ToRotation() && num74 < 350f)
				{
					num75 = 4;
				}
				if ((double)num75 > frameCounter)
				{
					frameCounter += 1.0;
				}
				if ((double)num75 < frameCounter)
				{
					frameCounter -= 1.0;
				}
				if (frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				if (frameCounter > 4.0)
				{
					frameCounter = 4.0;
				}
			}
		}
		if (type < 13 || type > 15 || (type != 13 && (type == 13 || Main.npc[(int)ai[1]].alpha >= 85)))
		{
			return;
		}
		if (alpha > 0 && life > 0)
		{
			for (int num77 = 0; num77 < 2; num77++)
			{
				int num78 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 14, 0f, 0f, 100, default(Color), 2f);
				Main.dust[num78].noGravity = true;
				Main.dust[num78].noLight = true;
			}
		}
		Vector2 val = position - oldPosition;
		if (((Vector2)(ref val)).Length() > 2f)
		{
			alpha -= 42;
			if (alpha < 0)
			{
				alpha = 0;
			}
		}
	}

	private void AI_002_FloatingEye()
	{
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_023b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0258: Unknown result type (might be due to invalid IL or missing references)
		//IL_0296: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a50: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a55: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a83: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0afe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b03: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b08: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_141f: Unknown result type (might be due to invalid IL or missing references)
		//IL_144c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1452: Unknown result type (might be due to invalid IL or missing references)
		//IL_1497: Unknown result type (might be due to invalid IL or missing references)
		//IL_149d: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a7: Unknown result type (might be due to invalid IL or missing references)
		if ((type == 170 || type == 171 || type == 180) && Main.rand.Next(1000) == 0)
		{
			SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 9);
		}
		noGravity = true;
		if (!noTileCollide)
		{
			if (collideX)
			{
				velocity.X = oldVelocity.X * -0.5f;
				if (direction == -1 && velocity.X > 0f && velocity.X < 2f)
				{
					velocity.X = 2f;
				}
				if (direction == 1 && velocity.X < 0f && velocity.X > -2f)
				{
					velocity.X = -2f;
				}
			}
			if (collideY)
			{
				velocity.Y = oldVelocity.Y * -0.5f;
				if (velocity.Y > 0f && velocity.Y < 1f)
				{
					velocity.Y = 1f;
				}
				if (velocity.Y < 0f && velocity.Y > -1f)
				{
					velocity.Y = -1f;
				}
			}
		}
		if (DespawnEncouragement_AIStyle2_FloatingEye_IsDiscouraged(type, position, target))
		{
			EncourageDespawn(10);
			directionY = -1;
			if (velocity.Y > 0f)
			{
				direction = 1;
			}
			direction = -1;
			if (velocity.X > 0f)
			{
				direction = 1;
			}
		}
		else
		{
			TargetClosest();
		}
		if (type == 170 || type == 171 || type == 180)
		{
			if (Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
			{
				if (ai[1] > 0f && !Collision.SolidCollision(position, width, height))
				{
					ai[1] = 0f;
					ai[0] = 0f;
					netUpdate = true;
				}
			}
			else if (ai[1] == 0f)
			{
				ai[0] += 1f;
			}
			if (ai[0] >= 300f)
			{
				ai[1] = 1f;
				ai[0] = 0f;
				netUpdate = true;
			}
			if (ai[1] == 0f)
			{
				alpha = 0;
				noTileCollide = false;
			}
			else
			{
				wet = false;
				alpha = 200;
				noTileCollide = true;
			}
			rotation = velocity.Y * 0.1f * (float)direction;
			TargetClosest();
			if (direction == -1 && velocity.X > -4f && position.X > Main.player[target].position.X + (float)Main.player[target].width)
			{
				velocity.X -= 0.08f;
				if (velocity.X > 4f)
				{
					velocity.X -= 0.04f;
				}
				else if (velocity.X > 0f)
				{
					velocity.X -= 0.2f;
				}
				if (velocity.X < -4f)
				{
					velocity.X = -4f;
				}
			}
			else if (direction == 1 && velocity.X < 4f && position.X + (float)width < Main.player[target].position.X)
			{
				velocity.X += 0.08f;
				if (velocity.X < -4f)
				{
					velocity.X += 0.04f;
				}
				else if (velocity.X < 0f)
				{
					velocity.X += 0.2f;
				}
				if (velocity.X > 4f)
				{
					velocity.X = 4f;
				}
			}
			if (directionY == -1 && (double)velocity.Y > -2.5 && position.Y > Main.player[target].position.Y + (float)Main.player[target].height)
			{
				velocity.Y -= 0.1f;
				if ((double)velocity.Y > 2.5)
				{
					velocity.Y -= 0.05f;
				}
				else if (velocity.Y > 0f)
				{
					velocity.Y -= 0.15f;
				}
				if ((double)velocity.Y < -2.5)
				{
					velocity.Y = -2.5f;
				}
			}
			else if (directionY == 1 && (double)velocity.Y < 2.5 && position.Y + (float)height < Main.player[target].position.Y)
			{
				velocity.Y += 0.1f;
				if ((double)velocity.Y < -2.5)
				{
					velocity.Y += 0.05f;
				}
				else if (velocity.Y < 0f)
				{
					velocity.Y += 0.15f;
				}
				if ((double)velocity.Y > 2.5)
				{
					velocity.Y = 2.5f;
				}
			}
		}
		else if (type == 116)
		{
			TargetClosest();
			Lighting.AddLight((int)(position.X + (float)(width / 2)) / 16, (int)(position.Y + (float)(height / 2)) / 16, 0.3f, 0.2f, 0.1f);
			if (direction == -1 && velocity.X > -6f)
			{
				velocity.X -= 0.1f;
				if (velocity.X > 6f)
				{
					velocity.X -= 0.1f;
				}
				else if (velocity.X > 0f)
				{
					velocity.X -= 0.2f;
				}
				if (velocity.X < -6f)
				{
					velocity.X = -6f;
				}
			}
			else if (direction == 1 && velocity.X < 6f)
			{
				velocity.X += 0.1f;
				if (velocity.X < -6f)
				{
					velocity.X += 0.1f;
				}
				else if (velocity.X < 0f)
				{
					velocity.X += 0.2f;
				}
				if (velocity.X > 6f)
				{
					velocity.X = 6f;
				}
			}
			if (directionY == -1 && (double)velocity.Y > -2.5)
			{
				velocity.Y -= 0.04f;
				if ((double)velocity.Y > 2.5)
				{
					velocity.Y -= 0.05f;
				}
				else if (velocity.Y > 0f)
				{
					velocity.Y -= 0.15f;
				}
				if ((double)velocity.Y < -2.5)
				{
					velocity.Y = -2.5f;
				}
			}
			else if (directionY == 1 && (double)velocity.Y < 1.5)
			{
				velocity.Y += 0.04f;
				if ((double)velocity.Y < -2.5)
				{
					velocity.Y += 0.05f;
				}
				else if (velocity.Y < 0f)
				{
					velocity.Y += 0.15f;
				}
				if ((double)velocity.Y > 2.5)
				{
					velocity.Y = 2.5f;
				}
			}
			if (Main.rand.Next(40) == 0)
			{
				position += netOffset;
				int num = Dust.NewDust(new Vector2(position.X, position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), 5, velocity.X, 2f);
				Main.dust[num].velocity.X *= 0.5f;
				Main.dust[num].velocity.Y *= 0.1f;
				position -= netOffset;
			}
		}
		else if (type == 133)
		{
			if ((double)life < (double)lifeMax * 0.5)
			{
				if (direction == -1 && velocity.X > -6f)
				{
					velocity.X -= 0.1f;
					if (velocity.X > 6f)
					{
						velocity.X -= 0.1f;
					}
					else if (velocity.X > 0f)
					{
						velocity.X += 0.05f;
					}
					if (velocity.X < -6f)
					{
						velocity.X = -6f;
					}
				}
				else if (direction == 1 && velocity.X < 6f)
				{
					velocity.X += 0.1f;
					if (velocity.X < -6f)
					{
						velocity.X += 0.1f;
					}
					else if (velocity.X < 0f)
					{
						velocity.X -= 0.05f;
					}
					if (velocity.X > 6f)
					{
						velocity.X = 6f;
					}
				}
				if (directionY == -1 && velocity.Y > -4f)
				{
					velocity.Y -= 0.1f;
					if (velocity.Y > 4f)
					{
						velocity.Y -= 0.1f;
					}
					else if (velocity.Y > 0f)
					{
						velocity.Y += 0.05f;
					}
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
				}
				else if (directionY == 1 && velocity.Y < 4f)
				{
					velocity.Y += 0.1f;
					if (velocity.Y < -4f)
					{
						velocity.Y += 0.1f;
					}
					else if (velocity.Y < 0f)
					{
						velocity.Y -= 0.05f;
					}
					if (velocity.Y > 4f)
					{
						velocity.Y = 4f;
					}
				}
			}
			else
			{
				if (direction == -1 && velocity.X > -4f)
				{
					velocity.X -= 0.1f;
					if (velocity.X > 4f)
					{
						velocity.X -= 0.1f;
					}
					else if (velocity.X > 0f)
					{
						velocity.X += 0.05f;
					}
					if (velocity.X < -4f)
					{
						velocity.X = -4f;
					}
				}
				else if (direction == 1 && velocity.X < 4f)
				{
					velocity.X += 0.1f;
					if (velocity.X < -4f)
					{
						velocity.X += 0.1f;
					}
					else if (velocity.X < 0f)
					{
						velocity.X -= 0.05f;
					}
					if (velocity.X > 4f)
					{
						velocity.X = 4f;
					}
				}
				if (directionY == -1 && (double)velocity.Y > -1.5)
				{
					velocity.Y -= 0.04f;
					if ((double)velocity.Y > 1.5)
					{
						velocity.Y -= 0.05f;
					}
					else if (velocity.Y > 0f)
					{
						velocity.Y += 0.03f;
					}
					if ((double)velocity.Y < -1.5)
					{
						velocity.Y = -1.5f;
					}
				}
				else if (directionY == 1 && (double)velocity.Y < 1.5)
				{
					velocity.Y += 0.04f;
					if ((double)velocity.Y < -1.5)
					{
						velocity.Y += 0.05f;
					}
					else if (velocity.Y < 0f)
					{
						velocity.Y -= 0.03f;
					}
					if ((double)velocity.Y > 1.5)
					{
						velocity.Y = 1.5f;
					}
				}
			}
		}
		else
		{
			float num2 = 4f;
			float num3 = 1.5f;
			num2 *= 1f + (1f - scale);
			num3 *= 1f + (1f - scale);
			if (direction == -1 && velocity.X > 0f - num2)
			{
				velocity.X -= 0.1f;
				if (velocity.X > num2)
				{
					velocity.X -= 0.1f;
				}
				else if (velocity.X > 0f)
				{
					velocity.X += 0.05f;
				}
				if (velocity.X < 0f - num2)
				{
					velocity.X = 0f - num2;
				}
			}
			else if (direction == 1 && velocity.X < num2)
			{
				velocity.X += 0.1f;
				if (velocity.X < 0f - num2)
				{
					velocity.X += 0.1f;
				}
				else if (velocity.X < 0f)
				{
					velocity.X -= 0.05f;
				}
				if (velocity.X > num2)
				{
					velocity.X = num2;
				}
			}
			if (directionY == -1 && velocity.Y > 0f - num3)
			{
				velocity.Y -= 0.04f;
				if (velocity.Y > num3)
				{
					velocity.Y -= 0.05f;
				}
				else if (velocity.Y > 0f)
				{
					velocity.Y += 0.03f;
				}
				if (velocity.Y < 0f - num3)
				{
					velocity.Y = 0f - num3;
				}
			}
			else if (directionY == 1 && velocity.Y < num3)
			{
				velocity.Y += 0.04f;
				if (velocity.Y < 0f - num3)
				{
					velocity.Y += 0.05f;
				}
				else if (velocity.Y < 0f)
				{
					velocity.Y -= 0.03f;
				}
				if (velocity.Y > num3)
				{
					velocity.Y = num3;
				}
			}
		}
		if ((type == 2 || type == 133 || type == 190 || type == 191 || type == 192 || type == 193 || type == 194) && Main.rand.Next(40) == 0)
		{
			position += netOffset;
			int num4 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), 5, velocity.X, 2f);
			Main.dust[num4].velocity.X *= 0.5f;
			Main.dust[num4].velocity.Y *= 0.1f;
			position -= netOffset;
		}
		if (wet && type != 170 && type != 171 && type != 172)
		{
			if (velocity.Y > 0f)
			{
				velocity.Y *= 0.95f;
			}
			velocity.Y -= 0.5f;
			if (velocity.Y < -4f)
			{
				velocity.Y = -4f;
			}
			TargetClosest();
		}
	}

	private void StingerExplosion()
	{
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		int num = Main.rand.Next(4, 9);
		Vector2 vector = default(Vector2);
		for (int i = 0; i < num; i++)
		{
			float num2 = 8f;
			((Vector2)(ref vector))._002Ector(Main.rand.NextFloat() - 0.5f, Main.rand.NextFloat() - 0.5f);
			((Vector2)(ref vector)).Normalize();
			vector *= num2;
			int num3 = (int)(10f * scale);
			if (type == 176)
			{
				num3 = (int)(30f * scale);
			}
			int num4 = 55;
			int num5 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, vector.X, vector.Y, num4, num3, 0f, Main.myPlayer);
			Main.projectile[num5].timeLeft = 300;
		}
	}

	public static bool DespawnEncouragement_AIStyle2_FloatingEye_IsDiscouraged(int npcID, Vector2 npcPosition, int target = 255)
	{
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		if (!Main.player[target].ZoneGraveyard && Main.IsItDay() && (double)npcPosition.Y <= Main.worldSurface * 16.0)
		{
			if (npcID != 2 && npcID != 133 && npcID != 190 && npcID != 191 && npcID != 192 && npcID != 193 && npcID != 194 && npcID != 317)
			{
				return npcID == 318;
			}
			return true;
		}
		return false;
	}

	private bool AI_007_TownEntities_IsInAGoodRestingSpot(int tileX, int tileY, int idealRestX, int idealRestY)
	{
		if (!Main.dayTime && ai[0] == 5f)
		{
			if (Math.Abs(tileX - idealRestX) <= 7)
			{
				return Math.Abs(tileY - idealRestY) <= 7;
			}
			return false;
		}
		if ((type == 361 || type == 445 || type == 687) && wet)
		{
			return false;
		}
		if (tileX == idealRestX)
		{
			return tileY == idealRestY;
		}
		return false;
	}

	private void AI_007_FindGoodRestingSpot(int myTileX, int myTileY, out int floorX, out int floorY)
	{
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0177: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_0160: Unknown result type (might be due to invalid IL or missing references)
		//IL_018e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0194: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0204: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_021b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0221: Unknown result type (might be due to invalid IL or missing references)
		//IL_0238: Unknown result type (might be due to invalid IL or missing references)
		//IL_023d: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02de: Unknown result type (might be due to invalid IL or missing references)
		//IL_029b: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_02af: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b9: Unknown result type (might be due to invalid IL or missing references)
		floorX = homeTileX;
		floorY = homeTileY;
		if (floorX == -1 || floorY == -1)
		{
			return;
		}
		while (!WorldGen.SolidOrSlopedTile(floorX, floorY) && floorY < Main.maxTilesY - 20)
		{
			floorY++;
		}
		if (Main.dayTime || (ai[0] == 5f && Math.Abs(myTileX - floorX) < 7 && Math.Abs(myTileY - floorY) < 7))
		{
			return;
		}
		Point point = default(Point);
		((Point)(ref point))._002Ector(floorX, floorY);
		Point point2 = default(Point);
		((Point)(ref point2))._002Ector(-1, -1);
		int num = -1;
		if (type == 638 || type == 656 || NPCID.Sets.IsTownSlime[type] || ai[0] == 5f)
		{
			return;
		}
		int num2 = 7;
		int num3 = 6;
		int num4 = 1;
		int num5 = 1;
		int num6 = 1;
		for (int i = point.X - num2; i <= point.X + num2; i += num5)
		{
			for (int num7 = point.Y + num4; num7 >= point.Y - num3; num7 -= num6)
			{
				Tile tile = Main.tile[i, num7];
				if (tile != null && tile.active() && TileID.Sets.CanBeSatOnForNPCs[tile.type])
				{
					int num8 = Math.Abs(i - point.X) + Math.Abs(num7 - point.Y);
					if (num == -1 || num8 < num)
					{
						num = num8;
						point2.X = i;
						point2.Y = num7;
					}
				}
			}
		}
		if (num == -1)
		{
			return;
		}
		Tile tile2 = Main.tile[point2.X, point2.Y];
		if (tile2.type == 497 || tile2.type == 15)
		{
			if (tile2.frameY % 40 != 0)
			{
				point2.Y--;
			}
			point2.Y += 2;
		}
		else if (tile2.type >= TileID.Count)
		{
			TileRestingInfo info = new TileRestingInfo(this, point2, Vector2.Zero, direction);
			TileLoader.ModifySittingTargetInfo(point2.X, point2.Y, tile2.type, ref info);
			point2 = info.AnchorTilePosition;
			point2.Y++;
		}
		for (int j = 0; j < 200; j++)
		{
			if (Main.npc[j].active && Main.npc[j].aiStyle == 7 && Main.npc[j].townNPC && Main.npc[j].ai[0] == 5f && (Main.npc[j].Bottom + Vector2.UnitY * -2f).ToTileCoordinates() == point2)
			{
				return;
			}
		}
		floorX = point2.X;
		floorY = point2.Y;
	}

	private void AI_007_TryForcingSitting(int homeFloorX, int homeFloorY)
	{
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0177: Unknown result type (might be due to invalid IL or missing references)
		//IL_018e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0196: Unknown result type (might be due to invalid IL or missing references)
		//IL_019b: Unknown result type (might be due to invalid IL or missing references)
		//IL_010e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0113: Unknown result type (might be due to invalid IL or missing references)
		//IL_011d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		Tile tile = Main.tile[homeFloorX, homeFloorY - 1];
		bool flag = !NPCID.Sets.CannotSitOnFurniture[type] && !NPCID.Sets.IsTownSlime[type] && ai[0] != 5f;
		if (flag)
		{
			flag &= tile != null && tile.active() && TileID.Sets.CanBeSatOnForNPCs[tile.type];
		}
		if (flag)
		{
			flag &= tile.type != 15 || tile.frameY < 1080 || tile.frameY > 1098;
		}
		if (flag)
		{
			Point point = (base.Bottom + Vector2.UnitY * -2f).ToTileCoordinates();
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].aiStyle == 7 && Main.npc[i].townNPC && Main.npc[i].ai[0] == 5f && (Main.npc[i].Bottom + Vector2.UnitY * -2f).ToTileCoordinates() == point)
				{
					flag = false;
					break;
				}
			}
		}
		if (flag)
		{
			ai[0] = 5f;
			ai[1] = 900 + Main.rand.Next(10800);
			SitDown(new Point(homeFloorX, homeFloorY - 1), out var targetDirection, out var bottom);
			direction = targetDirection;
			base.Bottom = bottom;
			velocity = Vector2.Zero;
			localAI[3] = 0f;
			netUpdate = true;
		}
	}

	public void UpdateHomeTileState(bool homeless, int x, int y)
	{
		bool num = x != homeTileX || y != homeTileY || this.homeless != homeless;
		this.homeless = homeless;
		homeTileX = x;
		homeTileY = y;
		if (num && Main.netMode != 1)
		{
			byte householdStatus = WorldGen.TownManager.GetHouseholdStatus(this);
			NetMessage.SendData(60, -1, -1, null, whoAmI, homeTileX, homeTileY, (int)householdStatus);
		}
	}

	public Color GetMagicAuraColor()
	{
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		Color result = NPCID.Sets.MagicAuraColor[type];
		if (type == 160 && townNpcVariationIndex == 1)
		{
			((Color)(ref result))._002Ector((int)((Color)(ref result)).B, (int)((Color)(ref result)).G, (int)((Color)(ref result)).R, (int)((Color)(ref result)).A);
		}
		if (type == 20 && townNpcVariationIndex == 1)
		{
			((Color)(ref result))._002Ector(90, 20, 210, (int)((Color)(ref result)).A);
		}
		if (type == 663 && townNpcVariationIndex == 1)
		{
			((Color)(ref result))._002Ector(255, 0, 77, (int)((Color)(ref result)).A);
		}
		return result;
	}

	private void AI_007_TownEntities()
	{
		//IL_0ac5: Unknown result type (might be due to invalid IL or missing references)
		//IL_066c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0671: Unknown result type (might be due to invalid IL or missing references)
		//IL_069a: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0607: Unknown result type (might be due to invalid IL or missing references)
		//IL_0730: Unknown result type (might be due to invalid IL or missing references)
		//IL_0732: Unknown result type (might be due to invalid IL or missing references)
		//IL_0746: Unknown result type (might be due to invalid IL or missing references)
		//IL_074b: Unknown result type (might be due to invalid IL or missing references)
		//IL_075a: Unknown result type (might be due to invalid IL or missing references)
		//IL_075f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0773: Unknown result type (might be due to invalid IL or missing references)
		//IL_0789: Unknown result type (might be due to invalid IL or missing references)
		//IL_078f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0791: Unknown result type (might be due to invalid IL or missing references)
		//IL_079e: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0661: Unknown result type (might be due to invalid IL or missing references)
		//IL_0666: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d24: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_090d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0912: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_07fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0809: Unknown result type (might be due to invalid IL or missing references)
		//IL_080b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0813: Unknown result type (might be due to invalid IL or missing references)
		//IL_0815: Unknown result type (might be due to invalid IL or missing references)
		//IL_0833: Unknown result type (might be due to invalid IL or missing references)
		//IL_0839: Unknown result type (might be due to invalid IL or missing references)
		//IL_083b: Unknown result type (might be due to invalid IL or missing references)
		//IL_084a: Unknown result type (might be due to invalid IL or missing references)
		//IL_084f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dac: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0989: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1008: Unknown result type (might be due to invalid IL or missing references)
		//IL_100d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1011: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c50: Unknown result type (might be due to invalid IL or missing references)
		//IL_516e: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_688f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5247: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f62: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f67: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f71: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f76: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f80: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f87: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_68dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_52b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_52b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1236: Unknown result type (might be due to invalid IL or missing references)
		//IL_1241: Unknown result type (might be due to invalid IL or missing references)
		//IL_52ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_52dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_196d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2230: Unknown result type (might be due to invalid IL or missing references)
		//IL_223a: Unknown result type (might be due to invalid IL or missing references)
		//IL_223f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3154: Unknown result type (might be due to invalid IL or missing references)
		//IL_3166: Unknown result type (might be due to invalid IL or missing references)
		//IL_3108: Unknown result type (might be due to invalid IL or missing references)
		//IL_311a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3129: Unknown result type (might be due to invalid IL or missing references)
		//IL_546b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_50e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_50e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_50ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_50ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_50f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_50f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_50fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_5105: Unknown result type (might be due to invalid IL or missing references)
		//IL_419a: Unknown result type (might be due to invalid IL or missing references)
		//IL_41a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_41ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_41b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_41b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_41ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_41c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_35e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_35e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_35ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_41eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_41f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_41f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4200: Unknown result type (might be due to invalid IL or missing references)
		//IL_4216: Unknown result type (might be due to invalid IL or missing references)
		//IL_4226: Unknown result type (might be due to invalid IL or missing references)
		//IL_422d: Unknown result type (might be due to invalid IL or missing references)
		//IL_36b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_59c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_36c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_360b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3626: Unknown result type (might be due to invalid IL or missing references)
		//IL_3643: Unknown result type (might be due to invalid IL or missing references)
		//IL_3648: Unknown result type (might be due to invalid IL or missing references)
		//IL_364d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3652: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ff3: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ff9: Unknown result type (might be due to invalid IL or missing references)
		//IL_5db9: Unknown result type (might be due to invalid IL or missing references)
		//IL_5dbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_5dc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_5dcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_5dd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_5dd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_5dd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_5de0: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ae9: Unknown result type (might be due to invalid IL or missing references)
		//IL_59d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_59e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e94: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e99: Unknown result type (might be due to invalid IL or missing references)
		//IL_36e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_36ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_36f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_36f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3705: Unknown result type (might be due to invalid IL or missing references)
		//IL_370a: Unknown result type (might be due to invalid IL or missing references)
		//IL_370f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3670: Unknown result type (might be due to invalid IL or missing references)
		//IL_368b: Unknown result type (might be due to invalid IL or missing references)
		//IL_36a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_36ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_36b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_36b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_601c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6030: Unknown result type (might be due to invalid IL or missing references)
		//IL_6035: Unknown result type (might be due to invalid IL or missing references)
		//IL_603a: Unknown result type (might be due to invalid IL or missing references)
		//IL_603f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6041: Unknown result type (might be due to invalid IL or missing references)
		//IL_6048: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cde: Unknown result type (might be due to invalid IL or missing references)
		//IL_5af9: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b02: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d45: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d52: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aa9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aae: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ab2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ab9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4abe: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ac1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ac6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4acd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ad4: Unknown result type (might be due to invalid IL or missing references)
		//IL_455f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4564: Unknown result type (might be due to invalid IL or missing references)
		//IL_4035: Unknown result type (might be due to invalid IL or missing references)
		//IL_403a: Unknown result type (might be due to invalid IL or missing references)
		//IL_403f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4041: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ec7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ea9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3eb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ebb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ec0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ec5: Unknown result type (might be due to invalid IL or missing references)
		//IL_37fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3811: Unknown result type (might be due to invalid IL or missing references)
		//IL_3821: Unknown result type (might be due to invalid IL or missing references)
		//IL_3828: Unknown result type (might be due to invalid IL or missing references)
		//IL_605b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6062: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ee8: Unknown result type (might be due to invalid IL or missing references)
		//IL_5eef: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cee: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_45bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4574: Unknown result type (might be due to invalid IL or missing references)
		//IL_458f: Unknown result type (might be due to invalid IL or missing references)
		//IL_45ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_45b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_45b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_45bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_404f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ed0: Unknown result type (might be due to invalid IL or missing references)
		//IL_379f: Unknown result type (might be due to invalid IL or missing references)
		//IL_37b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_37c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_37cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_3739: Unknown result type (might be due to invalid IL or missing references)
		//IL_374f: Unknown result type (might be due to invalid IL or missing references)
		//IL_375f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3766: Unknown result type (might be due to invalid IL or missing references)
		//IL_60b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_60bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_55b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ed6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ede: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ee3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4eeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ef5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4efa: Unknown result type (might be due to invalid IL or missing references)
		//IL_45c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4064: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ef7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3efb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f00: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f02: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f13: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f18: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f71: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f85: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f92: Unknown result type (might be due to invalid IL or missing references)
		//IL_55cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_45ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_45f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_45f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_45f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_4609: Unknown result type (might be due to invalid IL or missing references)
		//IL_460e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4613: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fba: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fca: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f50: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f60: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f67: Unknown result type (might be due to invalid IL or missing references)
		//IL_57cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_55df: Unknown result type (might be due to invalid IL or missing references)
		//IL_55e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_57e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2925: Unknown result type (might be due to invalid IL or missing references)
		//IL_293e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e47: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e56: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e60: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e65: Unknown result type (might be due to invalid IL or missing references)
		//IL_5eb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_5eba: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ebf: Unknown result type (might be due to invalid IL or missing references)
		//IL_57f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_57fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_471b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4728: Unknown result type (might be due to invalid IL or missing references)
		//IL_4732: Unknown result type (might be due to invalid IL or missing references)
		//IL_4737: Unknown result type (might be due to invalid IL or missing references)
		//IL_4744: Unknown result type (might be due to invalid IL or missing references)
		//IL_4758: Unknown result type (might be due to invalid IL or missing references)
		//IL_475d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4767: Unknown result type (might be due to invalid IL or missing references)
		//IL_476c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4771: Unknown result type (might be due to invalid IL or missing references)
		//IL_4656: Unknown result type (might be due to invalid IL or missing references)
		//IL_465b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4664: Unknown result type (might be due to invalid IL or missing references)
		//IL_467a: Unknown result type (might be due to invalid IL or missing references)
		//IL_468a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4691: Unknown result type (might be due to invalid IL or missing references)
		//IL_4699: Unknown result type (might be due to invalid IL or missing references)
		//IL_46a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_62d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_62e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_618e: Unknown result type (might be due to invalid IL or missing references)
		//IL_61a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a44: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a54: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_49b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_49c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_49d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_49dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_488b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4898: Unknown result type (might be due to invalid IL or missing references)
		//IL_48ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_48b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_48bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_48c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_48c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cf3: Unknown result type (might be due to invalid IL or missing references)
		//IL_6465: Unknown result type (might be due to invalid IL or missing references)
		//IL_6474: Unknown result type (might be due to invalid IL or missing references)
		//IL_61be: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_480f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4816: Unknown result type (might be due to invalid IL or missing references)
		//IL_47e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_47ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_65e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_65f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_64bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_64c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_64c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_64c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_6339: Unknown result type (might be due to invalid IL or missing references)
		//IL_6346: Unknown result type (might be due to invalid IL or missing references)
		//IL_62f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_6308: Unknown result type (might be due to invalid IL or missing references)
		//IL_4943: Unknown result type (might be due to invalid IL or missing references)
		//IL_494a: Unknown result type (might be due to invalid IL or missing references)
		//IL_491b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4926: Unknown result type (might be due to invalid IL or missing references)
		//IL_4787: Unknown result type (might be due to invalid IL or missing references)
		//IL_4794: Unknown result type (might be due to invalid IL or missing references)
		//IL_479e: Unknown result type (might be due to invalid IL or missing references)
		//IL_47a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_47b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_47c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_47c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_47d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_47d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_47dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_6785: Unknown result type (might be due to invalid IL or missing references)
		//IL_6794: Unknown result type (might be due to invalid IL or missing references)
		//IL_64da: Unknown result type (might be due to invalid IL or missing references)
		//IL_6488: Unknown result type (might be due to invalid IL or missing references)
		//IL_6497: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e24: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e37: Unknown result type (might be due to invalid IL or missing references)
		//IL_48da: Unknown result type (might be due to invalid IL or missing references)
		//IL_48e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_48fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4900: Unknown result type (might be due to invalid IL or missing references)
		//IL_490a: Unknown result type (might be due to invalid IL or missing references)
		//IL_490f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4914: Unknown result type (might be due to invalid IL or missing references)
		//IL_660a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6619: Unknown result type (might be due to invalid IL or missing references)
		//IL_6517: Unknown result type (might be due to invalid IL or missing references)
		//IL_67a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_67b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f72: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f81: Unknown result type (might be due to invalid IL or missing references)
		ShimmeredTownNPCs[type] = IsShimmerVariant;
		if (type == 441 && GivenName == "Andrew")
		{
			defDefense = 200;
		}
		int num = 300;
		if (type == 638 || type == 656 || NPCID.Sets.IsTownSlime[type])
		{
			num = 0;
		}
		bool flag = Main.raining;
		if (!Main.dayTime)
		{
			flag = true;
		}
		if (Main.eclipse)
		{
			flag = true;
		}
		if (Main.slimeRain)
		{
			flag = true;
		}
		float num42 = 1f;
		if (Main.masterMode)
		{
			defense = (dryadWard ? (defDefense + 14) : defDefense);
		}
		else if (Main.expertMode)
		{
			defense = (dryadWard ? (defDefense + 10) : defDefense);
		}
		else
		{
			defense = (dryadWard ? (defDefense + 6) : defDefense);
		}
		if (isLikeATownNPC)
		{
			if (combatBookWasUsed)
			{
				num42 += 0.2f;
				defense += 6;
			}
			if (combatBookVolumeTwoWasUsed)
			{
				num42 += 0.2f;
				defense += 6;
			}
			if (downedBoss1)
			{
				num42 += 0.1f;
				defense += 3;
			}
			if (downedBoss2)
			{
				num42 += 0.1f;
				defense += 3;
			}
			if (downedBoss3)
			{
				num42 += 0.1f;
				defense += 3;
			}
			if (downedQueenBee)
			{
				num42 += 0.1f;
				defense += 3;
			}
			if (Main.hardMode)
			{
				num42 += 0.4f;
				defense += 12;
			}
			if (downedQueenSlime)
			{
				num42 += 0.15f;
				defense += 6;
			}
			if (downedMechBoss1)
			{
				num42 += 0.15f;
				defense += 6;
			}
			if (downedMechBoss2)
			{
				num42 += 0.15f;
				defense += 6;
			}
			if (downedMechBoss3)
			{
				num42 += 0.15f;
				defense += 6;
			}
			if (downedPlantBoss)
			{
				num42 += 0.15f;
				defense += 8;
			}
			if (downedEmpressOfLight)
			{
				num42 += 0.15f;
				defense += 8;
			}
			if (downedGolemBoss)
			{
				num42 += 0.15f;
				defense += 8;
			}
			if (downedAncientCultist)
			{
				num42 += 0.15f;
				defense += 8;
			}
			NPCLoader.BuffTownNPC(ref num42, ref defense);
		}
		if (type == 142 && Main.netMode != 1 && !Main.xMas)
		{
			StrikeNPCNoInteraction(9999, 0f, 0);
			if (Main.netMode == 2)
			{
				NetMessage.SendData(28, -1, -1, null, whoAmI, 9999f);
			}
		}
		if ((type == 148 || type == 149) && localAI[0] == 0f)
		{
			localAI[0] = Main.rand.Next(1, 5);
		}
		if (type == 124)
		{
			int num53 = lazyNPCOwnedProjectileSearchArray[whoAmI];
			bool flag12 = false;
			if (Main.projectile.IndexInRange(num53))
			{
				Projectile projectile = Main.projectile[num53];
				if (projectile.active && projectile.type == 582 && projectile.ai[1] == (float)whoAmI)
				{
					flag12 = true;
				}
			}
			localAI[0] = flag12.ToInt();
		}
		if ((type == 362 || type == 364 || type == 602 || type == 608) && Main.netMode != 1 && (velocity.Y > 4f || velocity.Y < -4f || wet))
		{
			int num64 = direction;
			Transform(type + 1);
			TargetClosest();
			direction = num64;
			netUpdate = true;
			return;
		}
		switch (type)
		{
		case 588:
			savedGolfer = true;
			break;
		case 441:
			savedTaxCollector = true;
			break;
		case 107:
			savedGoblin = true;
			break;
		case 108:
			savedWizard = true;
			break;
		case 124:
			savedMech = true;
			break;
		case 353:
			savedStylist = true;
			break;
		case 369:
			savedAngler = true;
			break;
		case 550:
			savedBartender = true;
			break;
		}
		dontTakeDamage = false;
		Color newColor;
		if (ai[0] == 25f)
		{
			dontTakeDamage = true;
			if (ai[1] == 0f)
			{
				velocity.X = 0f;
			}
			shimmerWet = false;
			wet = false;
			lavaWet = false;
			honeyWet = false;
			if (ai[1] == 0f && Main.netMode == 1)
			{
				return;
			}
			if (ai[1] == 0f && ai[2] < 1f)
			{
				AI_007_TownEntities_Shimmer_TeleportToLandingSpot();
			}
			if (ai[2] > 0f)
			{
				ai[2] -= 1f;
				if (ai[2] <= 0f)
				{
					ai[1] = 1f;
				}
				return;
			}
			ai[1] += 1f;
			if (ai[1] >= 30f)
			{
				if (!Collision.WetCollision(position, width, height))
				{
					shimmerTransparency = MathHelper.Clamp(shimmerTransparency - 1f / 60f, 0f, 1f);
				}
				else
				{
					ai[1] = 30f;
				}
				velocity = new Vector2(0f, -4f * shimmerTransparency);
			}
			Rectangle hitbox = base.Hitbox;
			hitbox.Y += 20;
			hitbox.Height -= 20;
			float num75 = Main.rand.NextFloatDirection();
			Vector2 center = base.Center;
			newColor = Main.hslToRgb((float)Main.timeForVisualEffects / 360f % 1f, 0.6f, 0.65f);
			Lighting.AddLight(center, ((Color)(ref newColor)).ToVector3() * Utils.Remap(ai[1], 30f, 90f, 0f, 0.7f));
			if (Main.rand.NextFloat() > Utils.Remap(ai[1], 30f, 60f, 1f, 0.5f))
			{
				Vector2 val = Main.rand.NextVector2FromRectangle(hitbox) + Main.rand.NextVector2Circular(8f, 0f) + new Vector2(0f, 4f);
				Vector2? val2 = Utils.RotatedBy(new Vector2(0f, -2f), num75 * ((float)Math.PI * 2f) * 0.11f);
				newColor = default(Color);
				Dust.NewDustPerfect(val, 309, val2, 0, newColor, 1.7f - Math.Abs(num75) * 1.3f);
			}
			if (ai[1] > 60f && Main.rand.Next(15) == 0)
			{
				for (int i = 0; i < 3; i++)
				{
					Vector2 vector = Main.rand.NextVector2FromRectangle(base.Hitbox);
					ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.ShimmerBlock, new ParticleOrchestraSettings
					{
						PositionInWorld = vector,
						MovementVector = DirectionTo(vector).RotatedBy((float)Math.PI * 9f / 20f * (float)(Main.rand.Next(2) * 2 - 1)) * Main.rand.NextFloat()
					});
				}
			}
			TargetClosest();
			NPCAimedTarget targetData = GetTargetData();
			if (ai[1] >= 75f && shimmerTransparency <= 0f && Main.netMode != 1)
			{
				ai[0] = 0f;
				ai[1] = 0f;
				ai[2] = 0f;
				ai[3] = 0f;
				Math.Sign(targetData.Center.X - base.Center.X);
				velocity = new Vector2(0f, -4f);
				localAI[0] = 0f;
				localAI[1] = 0f;
				localAI[2] = 0f;
				localAI[3] = 0f;
				netUpdate = true;
				townNpcVariationIndex = ((townNpcVariationIndex != 1) ? 1 : 0);
				NetMessage.SendData(56, -1, -1, null, whoAmI);
				Teleport(position, 12);
				ParticleOrchestrator.BroadcastParticleSpawn(ParticleOrchestraType.ShimmerTownNPC, new ParticleOrchestraSettings
				{
					PositionInWorld = base.Center
				});
			}
			return;
		}
		if (type >= 0 && NPCID.Sets.TownCritter[type] && target == 255)
		{
			TargetClosest();
			if (position.X < Main.player[target].position.X)
			{
				direction = 1;
				spriteDirection = direction;
			}
			if (position.X > Main.player[target].position.X)
			{
				direction = -1;
				spriteDirection = direction;
			}
			if (homeTileX == -1)
			{
				UpdateHomeTileState(homeless, (int)((position.X + (float)(width / 2)) / 16f), homeTileY);
			}
		}
		else if (homeTileX == -1 && homeTileY == -1 && velocity.Y == 0f && !shimmering)
		{
			UpdateHomeTileState(homeless, (int)base.Center.X / 16, (int)(position.Y + (float)height + 4f) / 16);
		}
		bool flag23 = false;
		int num86 = (int)(position.X + (float)(width / 2)) / 16;
		int num97 = (int)(position.Y + (float)height + 1f) / 16;
		AI_007_FindGoodRestingSpot(num86, num97, out var floorX, out var floorY);
		if (type == 441)
		{
			taxCollector = true;
		}
		directionY = -1;
		if (direction == 0)
		{
			direction = 1;
		}
		if (ai[0] != 24f)
		{
			for (int j = 0; j < 255; j++)
			{
				if (Main.player[j].active && Main.player[j].talkNPC == whoAmI)
				{
					flag23 = true;
					if (ai[0] != 0f)
					{
						netUpdate = true;
					}
					ai[0] = 0f;
					ai[1] = 300f;
					localAI[3] = 100f;
					if (Main.player[j].position.X + (float)(Main.player[j].width / 2) < position.X + (float)(width / 2))
					{
						direction = -1;
					}
					else
					{
						direction = 1;
					}
				}
			}
		}
		if (ai[3] == 1f)
		{
			life = -1;
			HitEffect();
			active = false;
			netUpdate = true;
			if (type == 37)
			{
				SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
			}
			return;
		}
		if (type == 37 && Main.netMode != 1)
		{
			UpdateHomeTileState(homeless: false, Main.dungeonX, Main.dungeonY);
			if (downedBoss3)
			{
				ai[3] = 1f;
				netUpdate = true;
			}
		}
		if (type == 368)
		{
			homeless = true;
			if (!Main.dayTime)
			{
				if (!shimmering)
				{
					UpdateHomeTileState(homeless, (int)(base.Center.X / 16f), (int)(position.Y + (float)height + 2f) / 16);
				}
				if (!flag23 && ai[0] == 0f)
				{
					ai[0] = 1f;
					ai[1] = 200f;
				}
				flag = false;
			}
		}
		if (type == 369 && homeless && wet)
		{
			if (base.Center.X / 16f < 380f || base.Center.X / 16f > (float)(Main.maxTilesX - 380))
			{
				UpdateHomeTileState(homeless, Main.spawnTileX, Main.spawnTileY);
				ai[0] = 1f;
				ai[1] = 200f;
			}
			if (position.X / 16f < 300f)
			{
				direction = 1;
			}
			else if (position.X / 16f > (float)(Main.maxTilesX - 300))
			{
				direction = -1;
			}
		}
		if (!WorldGen.InWorld(num86, num97) || (Main.netMode == 1 && !Main.sectionManager.TileLoaded(num86, num97)))
		{
			return;
		}
		if (!homeless && Main.netMode != 1 && townNPC && (flag || (type == 37 && Main.tileDungeon[Main.tile[num86, num97].type])) && !AI_007_TownEntities_IsInAGoodRestingSpot(num86, num97, floorX, floorY))
		{
			bool flag27 = true;
			Rectangle rectangle = default(Rectangle);
			for (int k = 0; k < 2; k++)
			{
				if (!flag27)
				{
					break;
				}
				((Rectangle)(ref rectangle))._002Ector((int)(position.X + (float)(width / 2) - (float)(sWidth / 2) - (float)safeRangeX), (int)(position.Y + (float)(height / 2) - (float)(sHeight / 2) - (float)safeRangeY), sWidth + safeRangeX * 2, sHeight + safeRangeY * 2);
				if (k == 1)
				{
					((Rectangle)(ref rectangle))._002Ector(floorX * 16 + 8 - sWidth / 2 - safeRangeX, floorY * 16 + 8 - sHeight / 2 - safeRangeY, sWidth + safeRangeX * 2, sHeight + safeRangeY * 2);
				}
				for (int l = 0; l < 255; l++)
				{
					if (Main.player[l].active)
					{
						Rectangle val3 = new Rectangle((int)Main.player[l].position.X, (int)Main.player[l].position.Y, Main.player[l].width, Main.player[l].height);
						if (((Rectangle)(ref val3)).Intersects(rectangle))
						{
							flag27 = false;
							break;
						}
					}
				}
			}
			if (flag27)
			{
				AI_007_TownEntities_TeleportToHome(floorX, floorY);
			}
		}
		bool flag28 = type == 300 || type == 447 || type == 610;
		bool flag29 = type == 616 || type == 617 || type == 625;
		bool flag30 = type == 361 || type == 445 || type == 687;
		bool flag31 = NPCID.Sets.IsTownSlime[type];
		_ = NPCID.Sets.IsTownPet[type];
		bool flag32 = flag29 || flag30;
		bool flag2 = flag29 || flag30;
		bool flag3 = flag31;
		bool flag4 = flag31;
		float num108 = 200f;
		if (NPCID.Sets.DangerDetectRange[type] != -1)
		{
			num108 = NPCID.Sets.DangerDetectRange[type];
		}
		bool flag5 = false;
		bool flag6 = false;
		float num119 = -1f;
		float num2 = -1f;
		int num13 = 0;
		int num24 = -1;
		int num35 = -1;
		bool keepwalking4;
		if (!flag29 && Main.netMode != 1 && !flag23)
		{
			for (int m = 0; m < 200; m++)
			{
				if (!Main.npc[m].active || Main.npc[m].friendly || Main.npc[m].damage <= 0 || !(Main.npc[m].Distance(base.Center) < num108) || (type == 453 && NPCID.Sets.Skeletons[Main.npc[m].type]) || (!Main.npc[m].noTileCollide && !Collision.CanHit(base.Center, 0, 0, Main.npc[m].Center, 0, 0)) || !NPCLoader.CanHitNPC(Main.npc[m], this))
				{
					continue;
				}
				bool flag7 = Main.npc[m].CanBeChasedBy(this);
				flag5 = true;
				float num36 = Main.npc[m].Center.X - base.Center.X;
				if (type == 614)
				{
					if (num36 < 0f && (num119 == -1f || num36 > num119))
					{
						num2 = num36;
						num35 = m;
					}
					if (num36 > 0f && (num2 == -1f || num36 < num2))
					{
						num119 = num36;
						num24 = m;
					}
					continue;
				}
				if (num36 < 0f && (num119 == -1f || num36 > num119))
				{
					num119 = num36;
					if (flag7)
					{
						num24 = m;
					}
				}
				if (num36 > 0f && (num2 == -1f || num36 < num2))
				{
					num2 = num36;
					if (flag7)
					{
						num35 = m;
					}
				}
			}
			if (flag5)
			{
				num13 = ((num119 == -1f) ? 1 : ((num2 != -1f) ? (num2 < 0f - num119).ToDirectionInt() : (-1)));
				float num37 = 0f;
				if (num119 != -1f)
				{
					num37 = 0f - num119;
				}
				if (num37 == 0f || (num2 < num37 && num2 > 0f))
				{
					num37 = num2;
				}
				if (ai[0] == 8f)
				{
					if (direction == -num13)
					{
						ai[0] = 1f;
						ai[1] = 300 + Main.rand.Next(300);
						ai[2] = 0f;
						localAI[3] = 0f;
						netUpdate = true;
					}
				}
				else if (ai[0] != 10f && ai[0] != 12f && ai[0] != 13f && ai[0] != 14f && ai[0] != 15f)
				{
					if (NPCID.Sets.PrettySafe[type] != -1 && (float)NPCID.Sets.PrettySafe[type] < num37)
					{
						flag5 = false;
						flag6 = NPCID.Sets.AttackType[type] > -1;
					}
					else if (ai[0] != 1f)
					{
						int tileX = (int)((position.X + (float)(width / 2) + (float)(15 * direction)) / 16f);
						int tileY = (int)((position.Y + (float)height - 16f) / 16f);
						bool currentlyDrowning = wet && !flag32;
						AI_007_TownEntities_GetWalkPrediction(num86, floorX, flag32, currentlyDrowning, tileX, tileY, out keepwalking4, out var avoidFalling);
						if (!avoidFalling)
						{
							if (ai[0] == 3f || ai[0] == 4f || ai[0] == 16f || ai[0] == 17f)
							{
								NPC nPC = Main.npc[(int)ai[2]];
								if (nPC.active)
								{
									nPC.ai[0] = 1f;
									nPC.ai[1] = 120 + Main.rand.Next(120);
									nPC.ai[2] = 0f;
									nPC.localAI[3] = 0f;
									nPC.direction = -num13;
									nPC.netUpdate = true;
								}
							}
							ai[0] = 1f;
							ai[1] = 120 + Main.rand.Next(120);
							ai[2] = 0f;
							localAI[3] = 0f;
							direction = -num13;
							netUpdate = true;
						}
					}
					else if (ai[0] == 1f && direction != -num13)
					{
						direction = -num13;
						netUpdate = true;
					}
				}
			}
		}
		if (ai[0] == 0f)
		{
			if (localAI[3] > 0f)
			{
				localAI[3] -= 1f;
			}
			int num38 = 120;
			if (type == 638)
			{
				num38 = 60;
			}
			if ((flag30 || flag31) && wet)
			{
				ai[0] = 1f;
				ai[1] = 200 + Main.rand.Next(500, 700);
				ai[2] = 0f;
				localAI[3] = 0f;
				netUpdate = true;
			}
			else if (flag && !flag23 && !NPCID.Sets.TownCritter[type])
			{
				if (Main.netMode != 1)
				{
					if (num86 == floorX && num97 == floorY)
					{
						if (velocity.X != 0f)
						{
							netUpdate = true;
						}
						if (velocity.X > 0.1f)
						{
							velocity.X -= 0.1f;
						}
						else if (velocity.X < -0.1f)
						{
							velocity.X += 0.1f;
						}
						else
						{
							velocity.X = 0f;
							AI_007_TryForcingSitting(floorX, floorY);
						}
						if (NPCID.Sets.IsTownPet[type])
						{
							AI_007_AttemptToPlayIdleAnimationsForPets(num38 * 4);
						}
					}
					else
					{
						if (num86 > floorX)
						{
							direction = -1;
						}
						else
						{
							direction = 1;
						}
						ai[0] = 1f;
						ai[1] = 200 + Main.rand.Next(200);
						ai[2] = 0f;
						localAI[3] = 0f;
						netUpdate = true;
					}
				}
			}
			else
			{
				if (flag28)
				{
					velocity.X *= 0.5f;
				}
				if (velocity.X > 0.1f)
				{
					velocity.X -= 0.1f;
				}
				else if (velocity.X < -0.1f)
				{
					velocity.X += 0.1f;
				}
				else
				{
					velocity.X = 0f;
				}
				if (Main.netMode != 1)
				{
					if (!flag23 && NPCID.Sets.IsTownPet[type] && ai[1] >= 100f && ai[1] <= 150f)
					{
						AI_007_AttemptToPlayIdleAnimationsForPets(num38);
					}
					if (ai[1] > 0f)
					{
						ai[1] -= 1f;
					}
					bool flag8 = true;
					int tileX2 = (int)((position.X + (float)(width / 2) + (float)(15 * direction)) / 16f);
					int tileY2 = (int)((position.Y + (float)height - 16f) / 16f);
					bool currentlyDrowning2 = wet && !flag32;
					AI_007_TownEntities_GetWalkPrediction(num86, floorX, flag32, currentlyDrowning2, tileX2, tileY2, out keepwalking4, out var avoidFalling2);
					if (wet && !flag32)
					{
						bool currentlyDrowning3 = Collision.DrownCollision(position, width, height, 1f, includeSlopes: true);
						if (AI_007_TownEntities_CheckIfWillDrown(currentlyDrowning3))
						{
							ai[0] = 1f;
							ai[1] = 200 + Main.rand.Next(300);
							ai[2] = 0f;
							if (NPCID.Sets.TownCritter[type])
							{
								ai[1] += Main.rand.Next(200, 400);
							}
							localAI[3] = 0f;
							netUpdate = true;
						}
					}
					if (avoidFalling2)
					{
						flag8 = false;
					}
					if (ai[1] <= 0f)
					{
						if (flag8 && !avoidFalling2)
						{
							ai[0] = 1f;
							ai[1] = 200 + Main.rand.Next(300);
							ai[2] = 0f;
							if (NPCID.Sets.TownCritter[type])
							{
								ai[1] += Main.rand.Next(200, 400);
							}
							localAI[3] = 0f;
							netUpdate = true;
						}
						else
						{
							direction *= -1;
							ai[1] = 60 + Main.rand.Next(120);
							netUpdate = true;
						}
					}
				}
			}
			if (Main.netMode != 1 && (!flag || AI_007_TownEntities_IsInAGoodRestingSpot(num86, num97, floorX, floorY)))
			{
				if (num86 < floorX - 25 || num86 > floorX + 25)
				{
					if (localAI[3] == 0f)
					{
						if (num86 < floorX - 50 && direction == -1)
						{
							direction = 1;
							netUpdate = true;
						}
						else if (num86 > floorX + 50 && direction == 1)
						{
							direction = -1;
							netUpdate = true;
						}
					}
				}
				else if (Main.rand.Next(80) == 0 && localAI[3] == 0f)
				{
					localAI[3] = 200f;
					direction *= -1;
					netUpdate = true;
				}
			}
		}
		else if (ai[0] == 1f)
		{
			if (Main.netMode != 1 && flag && AI_007_TownEntities_IsInAGoodRestingSpot(num86, num97, floorX, floorY) && !NPCID.Sets.TownCritter[type])
			{
				ai[0] = 0f;
				ai[1] = 200 + Main.rand.Next(200);
				localAI[3] = 60f;
				netUpdate = true;
			}
			else
			{
				bool flag9 = !flag32 && Collision.DrownCollision(position, width, height, 1f, includeSlopes: true);
				if (!flag9)
				{
					if (Main.netMode != 1 && !homeless && !Main.tileDungeon[Main.tile[num86, num97].type] && (num86 < floorX - 35 || num86 > floorX + 35))
					{
						if (position.X < (float)(floorX * 16) && direction == -1)
						{
							ai[1] -= 5f;
						}
						else if (position.X > (float)(floorX * 16) && direction == 1)
						{
							ai[1] -= 5f;
						}
					}
					ai[1] -= 1f;
				}
				if (ai[1] <= 0f)
				{
					ai[0] = 0f;
					ai[1] = 300 + Main.rand.Next(300);
					ai[2] = 0f;
					if (NPCID.Sets.TownCritter[type])
					{
						ai[1] -= Main.rand.Next(100);
					}
					else
					{
						ai[1] += Main.rand.Next(900);
					}
					localAI[3] = 60f;
					netUpdate = true;
				}
				if (closeDoor && ((position.X + (float)(width / 2)) / 16f > (float)(doorX + 2) || (position.X + (float)(width / 2)) / 16f < (float)(doorX - 2)))
				{
					Tile tileSafely = Framing.GetTileSafely(doorX, doorY);
					if (TileLoader.CloseDoorID(tileSafely) >= 0)
					{
						if (WorldGen.CloseDoor(doorX, doorY))
						{
							closeDoor = false;
							NetMessage.SendData(19, -1, -1, null, 1, doorX, doorY, direction);
						}
						if ((position.X + (float)(width / 2)) / 16f > (float)(doorX + 4) || (position.X + (float)(width / 2)) / 16f < (float)(doorX - 4) || (position.Y + (float)(height / 2)) / 16f > (float)(doorY + 4) || (position.Y + (float)(height / 2)) / 16f < (float)(doorY - 4))
						{
							closeDoor = false;
						}
					}
					else if (tileSafely.type == 389)
					{
						if (WorldGen.ShiftTallGate(doorX, doorY, closing: true))
						{
							closeDoor = false;
							NetMessage.SendData(19, -1, -1, null, 5, doorX, doorY);
						}
						if ((position.X + (float)(width / 2)) / 16f > (float)(doorX + 4) || (position.X + (float)(width / 2)) / 16f < (float)(doorX - 4) || (position.Y + (float)(height / 2)) / 16f > (float)(doorY + 4) || (position.Y + (float)(height / 2)) / 16f < (float)(doorY - 4))
						{
							closeDoor = false;
						}
					}
					else
					{
						closeDoor = false;
					}
				}
				float num39 = 1f;
				float num40 = 0.07f;
				if (type == 614 && flag5)
				{
					num39 = 1.5f;
					num40 = 0.1f;
				}
				else if (type == 299 || type == 539 || type == 538 || (type >= 639 && type <= 645))
				{
					num39 = 1.5f;
				}
				else if (flag29)
				{
					if (wet)
					{
						num40 = 1f;
						num39 = 2f;
					}
					else
					{
						num40 = 0.07f;
						num39 = 0.5f;
					}
				}
				if (type == 625)
				{
					if (wet)
					{
						num40 = 1f;
						num39 = 2.5f;
					}
					else
					{
						num40 = 0.07f;
						num39 = 0.2f;
					}
				}
				if (flag28)
				{
					num39 = 2f;
					num40 = 1f;
				}
				if (friendly && (flag5 || flag9))
				{
					num39 = 1.5f;
					float num41 = 1f - (float)life / (float)lifeMax;
					num39 += num41 * 0.9f;
					num40 = 0.1f;
				}
				if (flag3 && wet)
				{
					num39 = 2f;
					num40 = 0.2f;
				}
				if (flag30 && wet)
				{
					if (Math.Abs(velocity.X) < 0.05f && Math.Abs(velocity.Y) < 0.05f)
					{
						velocity.X += num39 * 10f * (float)direction;
					}
					else
					{
						velocity.X *= 0.9f;
					}
				}
				else if (velocity.X < 0f - num39 || velocity.X > num39)
				{
					if (velocity.Y == 0f)
					{
						velocity *= 0.8f;
					}
				}
				else if (velocity.X < num39 && direction == 1)
				{
					velocity.X += num40;
					if (velocity.X > num39)
					{
						velocity.X = num39;
					}
				}
				else if (velocity.X > 0f - num39 && direction == -1)
				{
					velocity.X -= num40;
					if (velocity.X > num39)
					{
						velocity.X = num39;
					}
				}
				bool flag10 = true;
				if ((float)(homeTileY * 16 - 32) > position.Y)
				{
					flag10 = false;
				}
				if (!flag10 && velocity.Y == 0f)
				{
					Collision.StepDown(ref position, ref velocity, width, height, ref stepSpeed, ref gfxOffY);
				}
				if (velocity.Y >= 0f)
				{
					Collision.StepUp(ref position, ref velocity, width, height, ref stepSpeed, ref gfxOffY, 1, flag10, 1);
				}
				if (velocity.Y == 0f)
				{
					int num43 = (int)((position.X + (float)(width / 2) + (float)(15 * direction)) / 16f);
					int num44 = (int)((position.Y + (float)height - 16f) / 16f);
					int num45 = 180;
					AI_007_TownEntities_GetWalkPrediction(num86, floorX, flag32, flag9, num43, num44, out var keepwalking3, out var avoidFalling3);
					bool flag11 = false;
					bool flag13 = false;
					if (wet && !flag32 && townNPC && (flag13 = AI_007_TownEntities_CheckIfWillDrown(flag9)) && localAI[3] <= 0f)
					{
						avoidFalling3 = true;
						localAI[3] = num45;
						int num46 = 0;
						for (int n = 0; n <= 10 && Framing.GetTileSafely(num43 - direction, num44 - n).liquid != 0; n++)
						{
							num46++;
						}
						float num47 = 0.3f;
						float num48 = (float)Math.Sqrt((float)(num46 * 16 + 16) * 2f * num47);
						if (num48 > 26f)
						{
							num48 = 26f;
						}
						velocity.Y = 0f - num48;
						localAI[3] = position.X;
						flag11 = true;
					}
					if (avoidFalling3 && !flag11)
					{
						int num49 = (int)((position.X + (float)(width / 2)) / 16f);
						int num50 = 0;
						for (int num51 = -1; num51 <= 1; num51++)
						{
							Tile tileSafely2 = Framing.GetTileSafely(num49 + num51, num44 + 1);
							if (tileSafely2.nactive() && Main.tileSolid[tileSafely2.type])
							{
								num50++;
							}
						}
						if (num50 <= 2)
						{
							if (velocity.X != 0f)
							{
								netUpdate = true;
							}
							keepwalking3 = (avoidFalling3 = false);
							ai[0] = 0f;
							ai[1] = 50 + Main.rand.Next(50);
							ai[2] = 0f;
							localAI[3] = 40f;
						}
					}
					if (position.X == localAI[3] && !flag11)
					{
						direction *= -1;
						netUpdate = true;
						localAI[3] = num45;
					}
					if (flag9 && !flag11)
					{
						if (localAI[3] > (float)num45)
						{
							localAI[3] = num45;
						}
						if (localAI[3] > 0f)
						{
							localAI[3] -= 1f;
						}
					}
					else
					{
						localAI[3] = -1f;
					}
					Tile tileSafely3 = Framing.GetTileSafely(num43, num44);
					Tile tileSafely4 = Framing.GetTileSafely(num43, num44 - 1);
					Tile tileSafely5 = Framing.GetTileSafely(num43, num44 - 2);
					bool flag14 = height / 16 < 3;
					if ((townNPC || NPCID.Sets.AllowDoorInteraction[type]) && tileSafely5.nactive() && (TileLoader.IsClosedDoor(tileSafely5) || tileSafely5.type == 388) && (Main.rand.Next(10) == 0 || flag))
					{
						if (Main.netMode != 1)
						{
							if (WorldGen.OpenDoor(num43, num44 - 2, direction))
							{
								closeDoor = true;
								doorX = num43;
								doorY = num44 - 2;
								NetMessage.SendData(19, -1, -1, null, 0, num43, num44 - 2, direction);
								netUpdate = true;
								ai[1] += 80f;
							}
							else if (WorldGen.OpenDoor(num43, num44 - 2, -direction))
							{
								closeDoor = true;
								doorX = num43;
								doorY = num44 - 2;
								NetMessage.SendData(19, -1, -1, null, 0, num43, num44 - 2, -direction);
								netUpdate = true;
								ai[1] += 80f;
							}
							else if (WorldGen.ShiftTallGate(num43, num44 - 2, closing: false))
							{
								closeDoor = true;
								doorX = num43;
								doorY = num44 - 2;
								NetMessage.SendData(19, -1, -1, null, 4, num43, num44 - 2);
								netUpdate = true;
								ai[1] += 80f;
							}
							else
							{
								direction *= -1;
								netUpdate = true;
							}
						}
					}
					else
					{
						if ((velocity.X < 0f && direction == -1) || (velocity.X > 0f && direction == 1))
						{
							bool flag15 = false;
							bool flag16 = false;
							if (tileSafely5.nactive() && Main.tileSolid[tileSafely5.type] && !Main.tileSolidTop[tileSafely5.type] && (!flag14 || (tileSafely4.nactive() && Main.tileSolid[tileSafely4.type] && !Main.tileSolidTop[tileSafely4.type])))
							{
								if (!Collision.SolidTilesVersatile(num43 - direction * 2, num43 - direction, num44 - 5, num44 - 1) && !Collision.SolidTiles(num43, num43, num44 - 5, num44 - 3))
								{
									velocity.Y = -6f;
									netUpdate = true;
								}
								else if (flag28)
								{
									if (WorldGen.SolidTile((int)(base.Center.X / 16f) + direction, (int)(base.Center.Y / 16f)))
									{
										direction *= -1;
										velocity.X *= 0f;
										netUpdate = true;
									}
								}
								else if (flag5)
								{
									flag16 = true;
									flag15 = true;
								}
								else if (!flag13)
								{
									flag15 = true;
								}
							}
							else if (tileSafely4.nactive() && Main.tileSolid[tileSafely4.type] && !Main.tileSolidTop[tileSafely4.type])
							{
								if (!Collision.SolidTilesVersatile(num43 - direction * 2, num43 - direction, num44 - 4, num44 - 1) && !Collision.SolidTiles(num43, num43, num44 - 4, num44 - 2))
								{
									velocity.Y = -5f;
									netUpdate = true;
								}
								else if (flag5)
								{
									flag16 = true;
									flag15 = true;
								}
								else
								{
									flag15 = true;
								}
							}
							else if (position.Y + (float)height - (float)(num44 * 16) > 20f && tileSafely3.nactive() && Main.tileSolid[tileSafely3.type] && !tileSafely3.topSlope())
							{
								if (!Collision.SolidTilesVersatile(num43 - direction * 2, num43, num44 - 3, num44 - 1))
								{
									velocity.Y = -4.4f;
									netUpdate = true;
								}
								else if (flag5)
								{
									flag16 = true;
									flag15 = true;
								}
								else
								{
									flag15 = true;
								}
							}
							else if (avoidFalling3)
							{
								if (!flag13)
								{
									flag15 = true;
								}
								if (flag5)
								{
									flag16 = true;
								}
							}
							else if (flag4 && !Collision.SolidTilesVersatile(num43 - direction * 2, num43 - direction, num44 - 2, num44 - 1))
							{
								velocity.Y = -5f;
								netUpdate = true;
							}
							if (flag16)
							{
								keepwalking3 = false;
								velocity.X = 0f;
								ai[0] = 8f;
								ai[1] = 240f;
								netUpdate = true;
							}
							if (flag15)
							{
								direction *= -1;
								velocity.X *= -1f;
								netUpdate = true;
							}
							if (keepwalking3)
							{
								ai[1] = 90f;
								netUpdate = true;
							}
							if (velocity.Y < 0f)
							{
								localAI[3] = position.X;
							}
						}
						if (velocity.Y < 0f && wet)
						{
							velocity.Y *= 1.2f;
						}
						if (velocity.Y < 0f && NPCID.Sets.TownCritter[type] && !flag28)
						{
							velocity.Y *= 1.2f;
						}
					}
				}
				else if (flag4 && !wet)
				{
					int num52 = (int)(base.Center.X / 16f);
					int num54 = (int)((position.Y + (float)height - 16f) / 16f);
					int num55 = 0;
					for (int num56 = -1; num56 <= 1; num56++)
					{
						for (int num57 = 1; num57 <= 6; num57++)
						{
							Tile tileSafely6 = Framing.GetTileSafely(num52 + num56, num54 + num57);
							if (tileSafely6.liquid > 0 || (tileSafely6.nactive() && Main.tileSolid[tileSafely6.type]))
							{
								num55++;
							}
						}
					}
					if (num55 <= 2)
					{
						if (velocity.X != 0f)
						{
							netUpdate = true;
						}
						velocity.X *= 0.2f;
						ai[0] = 0f;
						ai[1] = 50 + Main.rand.Next(50);
						ai[2] = 0f;
						localAI[3] = 40f;
					}
				}
			}
		}
		else if (ai[0] == 2f || ai[0] == 11f)
		{
			if (Main.netMode != 1)
			{
				localAI[3] -= 1f;
				if (Main.rand.Next(60) == 0 && localAI[3] == 0f)
				{
					localAI[3] = 60f;
					direction *= -1;
					netUpdate = true;
				}
			}
			ai[1] -= 1f;
			velocity.X *= 0.8f;
			if (ai[1] <= 0f)
			{
				localAI[3] = 40f;
				ai[0] = 0f;
				ai[1] = 60 + Main.rand.Next(60);
				netUpdate = true;
			}
		}
		else if (ai[0] == 3f || ai[0] == 4f || ai[0] == 5f || ai[0] == 8f || ai[0] == 9f || ai[0] == 16f || ai[0] == 17f || ai[0] == 20f || ai[0] == 21f || ai[0] == 22f || ai[0] == 23f)
		{
			velocity.X *= 0.8f;
			ai[1] -= 1f;
			if (ai[0] == 8f && ai[1] < 60f && flag5)
			{
				ai[1] = 180f;
				netUpdate = true;
			}
			if (ai[0] == 5f)
			{
				Point coords = (base.Bottom + Vector2.UnitY * -2f).ToTileCoordinates();
				Tile tile = Main.tile[coords.X, coords.Y];
				if (!TileID.Sets.CanBeSatOnForNPCs[tile.type])
				{
					ai[1] = 0f;
				}
				else
				{
					Main.sittingManager.AddNPC(whoAmI, coords);
				}
			}
			if (ai[1] <= 0f)
			{
				ai[0] = 0f;
				ai[1] = 60 + Main.rand.Next(60);
				ai[2] = 0f;
				localAI[3] = 30 + Main.rand.Next(60);
				netUpdate = true;
			}
		}
		else if (ai[0] == 6f || ai[0] == 7f || ai[0] == 18f || ai[0] == 19f)
		{
			if (ai[0] == 18f && (localAI[3] < 1f || localAI[3] > 2f))
			{
				localAI[3] = 2f;
			}
			velocity.X *= 0.8f;
			ai[1] -= 1f;
			int num58 = (int)ai[2];
			if (num58 < 0 || num58 > 255 || !Main.player[num58].CanBeTalkedTo || Main.player[num58].Distance(base.Center) > 200f || !Collision.CanHitLine(base.Top, 0, 0, Main.player[num58].Top, 0, 0))
			{
				ai[1] = 0f;
			}
			if (ai[1] > 0f)
			{
				int num59 = ((base.Center.X < Main.player[num58].Center.X) ? 1 : (-1));
				if (num59 != direction)
				{
					netUpdate = true;
				}
				direction = num59;
			}
			else
			{
				ai[0] = 0f;
				ai[1] = 60 + Main.rand.Next(60);
				ai[2] = 0f;
				localAI[3] = 30 + Main.rand.Next(60);
				netUpdate = true;
			}
		}
		else if (ai[0] == 10f)
		{
			int num60 = 0;
			int num61 = 0;
			float knockBack = 0f;
			float num62 = 0f;
			int num63 = 0;
			int num65 = 0;
			int maxValue = 0;
			float num66 = 0f;
			float num67 = NPCID.Sets.DangerDetectRange[type];
			float num68 = 0f;
			if ((float)NPCID.Sets.AttackTime[type] == ai[1])
			{
				frameCounter = 0.0;
				localAI[3] = 0f;
			}
			if (type == 38)
			{
				num60 = 30;
				num62 = 6f;
				num61 = 20;
				num63 = 10;
				num65 = 180;
				maxValue = 120;
				num66 = 16f;
				knockBack = 7f;
			}
			else if (type == 633)
			{
				num60 = 880;
				num62 = 24f;
				num61 = 15;
				num63 = 1;
				num66 = 0f;
				knockBack = 7f;
				num65 = 15;
				maxValue = 10;
				if (ShouldBestiaryGirlBeLycantrope())
				{
					num60 = 929;
					num61 = (int)((float)num61 * 1.5f);
				}
			}
			else if (type == 550)
			{
				num60 = 669;
				num62 = 6f;
				num61 = 24;
				num63 = 10;
				num65 = 120;
				maxValue = 60;
				num66 = 16f;
				knockBack = 9f;
			}
			else if (type == 588)
			{
				num60 = 721;
				num62 = 8f;
				num61 = 15;
				num63 = 5;
				num65 = 20;
				maxValue = 10;
				num66 = 16f;
				knockBack = 9f;
			}
			else if (type == 208)
			{
				num60 = 588;
				num62 = 6f;
				num61 = 30;
				num63 = 10;
				num65 = 60;
				maxValue = 120;
				num66 = 16f;
				knockBack = 6f;
			}
			else if (type == 17)
			{
				num60 = 48;
				num62 = 9f;
				num61 = 12;
				num63 = 10;
				num65 = 60;
				maxValue = 60;
				num66 = 16f;
				knockBack = 1.5f;
			}
			else if (type == 369)
			{
				num60 = 520;
				num62 = 12f;
				num61 = 10;
				num63 = 10;
				num65 = 0;
				maxValue = 1;
				num66 = 16f;
				knockBack = 3f;
			}
			else if (type == 453)
			{
				num60 = 21;
				num62 = 14f;
				num61 = 14;
				num63 = 10;
				num65 = 0;
				maxValue = 1;
				num66 = 16f;
				knockBack = 3f;
			}
			else if (type == 107)
			{
				num60 = 24;
				num62 = 5f;
				num61 = 15;
				num63 = 10;
				num65 = 60;
				maxValue = 60;
				num66 = 16f;
				knockBack = 1f;
			}
			else if (type == 124)
			{
				num60 = 582;
				num62 = 10f;
				num61 = 11;
				num63 = 1;
				num65 = 30;
				maxValue = 30;
				knockBack = 3.5f;
			}
			else if (type == 18)
			{
				num60 = 583;
				num62 = 8f;
				num61 = 8;
				num63 = 1;
				num65 = 15;
				maxValue = 10;
				knockBack = 2f;
				num66 = 10f;
			}
			else if (type == 142)
			{
				num60 = 589;
				num62 = 7f;
				num61 = 22;
				num63 = 1;
				num65 = 10;
				maxValue = 1;
				knockBack = 2f;
				num66 = 10f;
			}
			NPCLoader.TownNPCAttackStrength(this, ref num61, ref knockBack);
			NPCLoader.TownNPCAttackCooldown(this, ref num65, ref maxValue);
			NPCLoader.TownNPCAttackProj(this, ref num60, ref num63);
			NPCLoader.TownNPCAttackProjSpeed(this, ref num62, ref num66, ref num68);
			if (Main.expertMode)
			{
				num61 = (int)((float)num61 * Main.GameModeInfo.TownNPCDamageMultiplier);
			}
			num61 = (int)((float)num61 * num42);
			velocity.X *= 0.8f;
			ai[1] -= 1f;
			localAI[3] += 1f;
			if (localAI[3] == (float)num63 && Main.netMode != 1)
			{
				Vector2 vec = -Vector2.UnitY;
				if (num13 == 1 && spriteDirection == 1 && num35 != -1)
				{
					vec = DirectionTo(Main.npc[num35].Center + new Vector2(0f, (0f - num66) * MathHelper.Clamp(Distance(Main.npc[num35].Center) / num67, 0f, 1f)));
				}
				if (num13 == -1 && spriteDirection == -1 && num24 != -1)
				{
					vec = DirectionTo(Main.npc[num24].Center + new Vector2(0f, (0f - num66) * MathHelper.Clamp(Distance(Main.npc[num24].Center) / num67, 0f, 1f)));
				}
				if (vec.HasNaNs() || Math.Sign(vec.X) != spriteDirection)
				{
					((Vector2)(ref vec))._002Ector((float)spriteDirection, -1f);
				}
				vec *= num62;
				vec += Utils.RandomVector2(Main.rand, 0f - num68, num68);
				int num69 = 1000;
				num69 = ((type == 124) ? Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec.X, vec.Y, num60, num61, knockBack, Main.myPlayer, 0f, whoAmI, townNpcVariationIndex) : ((type != 142) ? Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec.X, vec.Y, num60, num61, knockBack, Main.myPlayer) : Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec.X, vec.Y, num60, num61, knockBack, Main.myPlayer, 0f, Main.rand.Next(5))));
				Main.projectile[num69].npcProj = true;
				Main.projectile[num69].noDropItem = true;
				if (type == 588)
				{
					Main.projectile[num69].timeLeft = 480;
				}
			}
			if (ai[1] <= 0f)
			{
				ai[0] = ((localAI[2] == 8f && flag5) ? 8 : 0);
				ai[1] = num65 + Main.rand.Next(maxValue);
				ai[2] = 0f;
				localAI[1] = (localAI[3] = num65 / 2 + Main.rand.Next(maxValue));
				netUpdate = true;
			}
		}
		else if (ai[0] == 12f)
		{
			int num70 = 0;
			int num71 = 0;
			float num72 = 0f;
			int num73 = 0;
			int num74 = 0;
			int maxValue2 = 0;
			float knockBack2 = 0f;
			float num76 = 0f;
			bool flag17 = false;
			float num77 = 0f;
			if ((float)NPCID.Sets.AttackTime[type] == ai[1])
			{
				frameCounter = 0.0;
				localAI[3] = 0f;
			}
			int num78 = -1;
			if (num13 == 1 && spriteDirection == 1)
			{
				num78 = num35;
			}
			if (num13 == -1 && spriteDirection == -1)
			{
				num78 = num24;
			}
			if (type == 19)
			{
				num70 = 14;
				num72 = 13f;
				num71 = 24;
				num74 = 14;
				maxValue2 = 4;
				knockBack2 = 3f;
				num73 = 1;
				num77 = 0.5f;
				if ((float)NPCID.Sets.AttackTime[type] == ai[1])
				{
					frameCounter = 0.0;
					localAI[3] = 0f;
				}
				if (Main.hardMode)
				{
					num71 = 15;
					if (localAI[3] > (float)num73)
					{
						num73 = 10;
						flag17 = true;
					}
					if (localAI[3] > (float)num73)
					{
						num73 = 20;
						flag17 = true;
					}
					if (localAI[3] > (float)num73)
					{
						num73 = 30;
						flag17 = true;
					}
				}
			}
			else if (type == 227)
			{
				num70 = 587;
				num72 = 10f;
				num71 = 8;
				num74 = 10;
				maxValue2 = 1;
				knockBack2 = 1.75f;
				num73 = 1;
				num77 = 0.5f;
				if (localAI[3] > (float)num73)
				{
					num73 = 12;
					flag17 = true;
				}
				if (localAI[3] > (float)num73)
				{
					num73 = 24;
					flag17 = true;
				}
				if (Main.hardMode)
				{
					num71 += 2;
				}
			}
			else if (type == 368)
			{
				num70 = 14;
				num72 = 13f;
				num71 = 24;
				num74 = 12;
				maxValue2 = 5;
				knockBack2 = 2f;
				num73 = 1;
				num77 = 0.2f;
				if (Main.hardMode)
				{
					num71 = 30;
					num70 = 357;
				}
			}
			else if (type == 22)
			{
				num72 = 10f;
				num71 = 8;
				num73 = 1;
				if (Main.hardMode)
				{
					num70 = 2;
					num74 = 15;
					maxValue2 = 10;
					num71 += 6;
				}
				else
				{
					num70 = 1;
					num74 = 30;
					maxValue2 = 20;
				}
				knockBack2 = 2.75f;
				num76 = 4f;
				num77 = 0.7f;
			}
			else if (type == 228)
			{
				num70 = 267;
				num72 = 14f;
				num71 = 20;
				num73 = 1;
				num74 = 10;
				maxValue2 = 1;
				knockBack2 = 3f;
				num76 = 6f;
				num77 = 0.4f;
			}
			else if (type == 178)
			{
				num70 = 242;
				num72 = 13f;
				num71 = ((!Main.hardMode) ? 11 : 15);
				num74 = 10;
				maxValue2 = 1;
				knockBack2 = 2f;
				num73 = 1;
				if (localAI[3] > (float)num73)
				{
					num73 = 8;
					flag17 = true;
				}
				if (localAI[3] > (float)num73)
				{
					num73 = 16;
					flag17 = true;
				}
				num77 = 0.3f;
			}
			else if (type == 229)
			{
				num70 = 14;
				num72 = 14f;
				num71 = 24;
				num74 = 10;
				maxValue2 = 1;
				knockBack2 = 2f;
				num73 = 1;
				num77 = 0.7f;
				if (localAI[3] > (float)num73)
				{
					num73 = 16;
					flag17 = true;
				}
				if (localAI[3] > (float)num73)
				{
					num73 = 24;
					flag17 = true;
				}
				if (localAI[3] > (float)num73)
				{
					num73 = 32;
					flag17 = true;
				}
				if (localAI[3] > (float)num73)
				{
					num73 = 40;
					flag17 = true;
				}
				if (localAI[3] > (float)num73)
				{
					num73 = 48;
					flag17 = true;
				}
				if (localAI[3] == 0f && num78 != -1 && Distance(Main.npc[num78].Center) < (float)NPCID.Sets.PrettySafe[type])
				{
					num77 = 0.1f;
					num70 = 162;
					num71 = 50;
					knockBack2 = 10f;
					num72 = 24f;
				}
			}
			else if (type == 209)
			{
				num70 = Utils.SelectRandom<int>(Main.rand, 134, 133, 135);
				num73 = 1;
				switch (num70)
				{
				case 135:
					num72 = 12f;
					num71 = 30;
					num74 = 30;
					maxValue2 = 10;
					knockBack2 = 7f;
					num77 = 0.2f;
					break;
				case 133:
					num72 = 10f;
					num71 = 25;
					num74 = 10;
					maxValue2 = 1;
					knockBack2 = 6f;
					num77 = 0.2f;
					break;
				case 134:
					num72 = 13f;
					num71 = 20;
					num74 = 20;
					maxValue2 = 10;
					knockBack2 = 4f;
					num77 = 0.1f;
					break;
				}
			}
			NPCLoader.TownNPCAttackStrength(this, ref num71, ref knockBack2);
			NPCLoader.TownNPCAttackCooldown(this, ref num74, ref maxValue2);
			NPCLoader.TownNPCAttackProj(this, ref num70, ref num73);
			NPCLoader.TownNPCAttackProjSpeed(this, ref num72, ref num76, ref num77);
			NPCLoader.TownNPCAttackShoot(this, ref flag17);
			if (Main.expertMode)
			{
				num71 = (int)((float)num71 * Main.GameModeInfo.TownNPCDamageMultiplier);
			}
			num71 = (int)((float)num71 * num42);
			velocity.X *= 0.8f;
			ai[1] -= 1f;
			localAI[3] += 1f;
			if (localAI[3] == (float)num73 && Main.netMode != 1)
			{
				Vector2 vec2 = Vector2.Zero;
				if (num78 != -1)
				{
					vec2 = DirectionTo(Main.npc[num78].Center + new Vector2(0f, 0f - num76));
				}
				if (vec2.HasNaNs() || Math.Sign(vec2.X) != spriteDirection)
				{
					((Vector2)(ref vec2))._002Ector((float)spriteDirection, 0f);
				}
				vec2 *= num72;
				vec2 += Utils.RandomVector2(Main.rand, 0f - num77, num77);
				int num79 = 1000;
				num79 = ((type != 227) ? Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec2.X, vec2.Y, num70, num71, knockBack2, Main.myPlayer) : Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec2.X, vec2.Y, num70, num71, knockBack2, Main.myPlayer, 0f, (float)Main.rand.Next(12) / 6f));
				Main.projectile[num79].npcProj = true;
				Main.projectile[num79].noDropItem = true;
			}
			if (localAI[3] == (float)num73 && flag17 && num78 != -1)
			{
				Vector2 vector2 = DirectionTo(Main.npc[num78].Center);
				if (vector2.Y <= 0.5f && vector2.Y >= -0.5f)
				{
					ai[2] = vector2.Y;
				}
			}
			if (ai[1] <= 0f)
			{
				ai[0] = ((localAI[2] == 8f && flag5) ? 8 : 0);
				ai[1] = num74 + Main.rand.Next(maxValue2);
				ai[2] = 0f;
				localAI[1] = (localAI[3] = num74 / 2 + Main.rand.Next(maxValue2));
				netUpdate = true;
			}
		}
		else if (ai[0] == 13f)
		{
			velocity.X *= 0.8f;
			if ((float)NPCID.Sets.AttackTime[type] == ai[1])
			{
				frameCounter = 0.0;
			}
			ai[1] -= 1f;
			localAI[3] += 1f;
			if (localAI[3] == 1f && Main.netMode != 1)
			{
				Vector2 vec3 = DirectionTo(Main.npc[(int)ai[2]].Center + new Vector2(0f, -20f));
				if (vec3.HasNaNs() || Math.Sign(vec3.X) == -spriteDirection)
				{
					((Vector2)(ref vec3))._002Ector((float)spriteDirection, -1f);
				}
				vec3 *= 8f;
				int num80 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec3.X, vec3.Y, 584, 0, 0f, Main.myPlayer, ai[2]);
				Main.projectile[num80].npcProj = true;
				Main.projectile[num80].noDropItem = true;
			}
			if (ai[1] <= 0f)
			{
				ai[0] = 0f;
				ai[1] = 10 + Main.rand.Next(10);
				ai[2] = 0f;
				localAI[3] = 5 + Main.rand.Next(10);
				netUpdate = true;
			}
		}
		else if (ai[0] == 14f)
		{
			int num81 = 0;
			int num82 = 0;
			float num83 = 0f;
			int num84 = 0;
			int num85 = 0;
			int maxValue3 = 0;
			float knockBack3 = 0f;
			float num87 = 0f;
			float num88 = NPCID.Sets.DangerDetectRange[type];
			float num89 = 1f;
			float num90 = 0f;
			if ((float)NPCID.Sets.AttackTime[type] == ai[1])
			{
				frameCounter = 0.0;
				localAI[3] = 0f;
			}
			int num91 = -1;
			if (num13 == 1 && spriteDirection == 1)
			{
				num91 = num35;
			}
			if (num13 == -1 && spriteDirection == -1)
			{
				num91 = num24;
			}
			if (type == 54)
			{
				num81 = 585;
				num83 = 10f;
				num82 = 16;
				num84 = 30;
				num85 = 20;
				maxValue3 = 15;
				knockBack3 = 2f;
				num90 = 1f;
			}
			else if (type == 108)
			{
				num81 = 15;
				num83 = 6f;
				num82 = 18;
				num84 = 15;
				num85 = 15;
				maxValue3 = 5;
				knockBack3 = 3f;
				num87 = 20f;
			}
			else if (type == 160)
			{
				num81 = 590;
				num82 = 40;
				num84 = 15;
				num85 = 10;
				maxValue3 = 1;
				knockBack3 = 3f;
				for (; localAI[3] > (float)num84; num84 += 15)
				{
				}
			}
			else if (type == 663)
			{
				num81 = 950;
				num82 = ((!Main.hardMode) ? 15 : 20);
				num84 = 15;
				num85 = 0;
				maxValue3 = 0;
				knockBack3 = 3f;
				for (; localAI[3] > (float)num84; num84 += 10)
				{
				}
			}
			else if (type == 20)
			{
				num81 = 586;
				num84 = 24;
				num85 = 10;
				maxValue3 = 1;
				knockBack3 = 3f;
			}
			NPCLoader.TownNPCAttackStrength(this, ref num82, ref knockBack3);
			NPCLoader.TownNPCAttackCooldown(this, ref num85, ref maxValue3);
			NPCLoader.TownNPCAttackProj(this, ref num81, ref num84);
			NPCLoader.TownNPCAttackProjSpeed(this, ref num83, ref num87, ref num90);
			NPCLoader.TownNPCAttackMagic(this, ref num89);
			if (Main.expertMode)
			{
				num82 = (int)((float)num82 * Main.GameModeInfo.TownNPCDamageMultiplier);
			}
			num82 = (int)((float)num82 * num42);
			velocity.X *= 0.8f;
			ai[1] -= 1f;
			localAI[3] += 1f;
			if (localAI[3] == (float)num84 && Main.netMode != 1)
			{
				Vector2 vec4 = Vector2.Zero;
				if (num91 != -1)
				{
					vec4 = DirectionTo(Main.npc[num91].Center + new Vector2(0f, (0f - num87) * MathHelper.Clamp(Distance(Main.npc[num91].Center) / num88, 0f, 1f)));
				}
				if (vec4.HasNaNs() || Math.Sign(vec4.X) != spriteDirection)
				{
					((Vector2)(ref vec4))._002Ector((float)spriteDirection, 0f);
				}
				vec4 *= num83;
				vec4 += Utils.RandomVector2(Main.rand, 0f - num90, num90);
				if (type == 108)
				{
					int num92 = Utils.SelectRandom<int>(Main.rand, 1, 1, 1, 1, 2, 2, 3);
					for (int num93 = 0; num93 < num92; num93++)
					{
						Vector2 vector3 = Utils.RandomVector2(Main.rand, -3.4f, 3.4f);
						int num94 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec4.X + vector3.X, vec4.Y + vector3.Y, num81, num82, knockBack3, Main.myPlayer, 0f, 0f, townNpcVariationIndex);
						Main.projectile[num94].npcProj = true;
						Main.projectile[num94].noDropItem = true;
					}
				}
				else if (type == 160)
				{
					if (num91 != -1)
					{
						Vector2 vector4 = Main.npc[num91].position - Main.npc[num91].Size * 2f + Main.npc[num91].Size * Utils.RandomVector2(Main.rand, 0f, 1f) * 5f;
						int num95 = 10;
						while (num95 > 0 && WorldGen.SolidTile(Framing.GetTileSafely((int)vector4.X / 16, (int)vector4.Y / 16)))
						{
							num95--;
							vector4 = Main.npc[num91].position - Main.npc[num91].Size * 2f + Main.npc[num91].Size * Utils.RandomVector2(Main.rand, 0f, 1f) * 5f;
						}
						int num96 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector4.X, vector4.Y, 0f, 0f, num81, num82, knockBack3, Main.myPlayer, 0f, 0f, townNpcVariationIndex);
						Main.projectile[num96].npcProj = true;
						Main.projectile[num96].noDropItem = true;
					}
				}
				else if (type == 663)
				{
					if (num91 != -1)
					{
						Vector2 vector5 = Main.npc[num91].position + Main.npc[num91].Size * Utils.RandomVector2(Main.rand, 0f, 1f) * 1f;
						int num98 = 5;
						while (num98 > 0 && WorldGen.SolidTile(Framing.GetTileSafely((int)vector5.X / 16, (int)vector5.Y / 16)))
						{
							num98--;
							vector5 = Main.npc[num91].position + Main.npc[num91].Size * Utils.RandomVector2(Main.rand, 0f, 1f) * 1f;
						}
						int num99 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector5.X, vector5.Y, 0f, 0f, num81, num82, knockBack3, Main.myPlayer, 0f, 0f, townNpcVariationIndex);
						Main.projectile[num99].npcProj = true;
						Main.projectile[num99].noDropItem = true;
					}
				}
				else if (type == 20)
				{
					int num100 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec4.X, vec4.Y, num81, num82, knockBack3, Main.myPlayer, 0f, whoAmI, townNpcVariationIndex);
					Main.projectile[num100].npcProj = true;
					Main.projectile[num100].noDropItem = true;
				}
				else
				{
					int num101 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec4.X, vec4.Y, num81, num82, knockBack3, Main.myPlayer);
					Main.projectile[num101].npcProj = true;
					Main.projectile[num101].noDropItem = true;
				}
			}
			if (num89 > 0f)
			{
				newColor = GetMagicAuraColor();
				Vector3 vector6 = ((Color)(ref newColor)).ToVector3() * num89;
				Lighting.AddLight(base.Center, vector6.X, vector6.Y, vector6.Z);
			}
			if (ai[1] <= 0f)
			{
				ai[0] = ((localAI[2] == 8f && flag5) ? 8 : 0);
				ai[1] = num85 + Main.rand.Next(maxValue3);
				ai[2] = 0f;
				localAI[1] = (localAI[3] = num85 / 2 + Main.rand.Next(maxValue3));
				netUpdate = true;
			}
		}
		else if (ai[0] == 15f)
		{
			int num102 = 0;
			int maxValue4 = 0;
			if ((float)NPCID.Sets.AttackTime[type] == ai[1])
			{
				frameCounter = 0.0;
				localAI[3] = 0f;
			}
			int num103 = 0;
			float num104 = 0f;
			int num105 = 0;
			int num106 = 0;
			if (num13 == 1)
			{
				_ = spriteDirection;
			}
			if (num13 == -1)
			{
				_ = spriteDirection;
			}
			if (type == 207)
			{
				num103 = 11;
				num105 = (num106 = 32);
				num102 = 12;
				maxValue4 = 6;
				num104 = 4.25f;
			}
			else if (type == 441)
			{
				num103 = 9;
				num105 = (num106 = 28);
				num102 = 9;
				maxValue4 = 3;
				num104 = 3.5f;
				if (GivenName == "Andrew")
				{
					num103 *= 2;
					num104 *= 2f;
				}
			}
			else if (type == 353)
			{
				num103 = 10;
				num105 = (num106 = 32);
				num102 = 15;
				maxValue4 = 8;
				num104 = 5f;
			}
			else if (NPCID.Sets.IsTownPet[type])
			{
				num103 = 10;
				num105 = (num106 = 32);
				num102 = 15;
				maxValue4 = 8;
				num104 = 3f;
			}
			NPCLoader.TownNPCAttackStrength(this, ref num103, ref num104);
			NPCLoader.TownNPCAttackCooldown(this, ref num102, ref maxValue4);
			NPCLoader.TownNPCAttackSwing(this, ref num105, ref num106);
			if (Main.expertMode)
			{
				num103 = (int)((float)num103 * Main.GameModeInfo.TownNPCDamageMultiplier);
			}
			num103 = (int)((float)num103 * num42);
			velocity.X *= 0.8f;
			ai[1] -= 1f;
			if (Main.netMode != 1)
			{
				Tuple<Vector2, float> swingStats = GetSwingStats(NPCID.Sets.AttackTime[type] * 2, (int)ai[1], spriteDirection, num105, num106);
				Rectangle itemRectangle = default(Rectangle);
				((Rectangle)(ref itemRectangle))._002Ector((int)swingStats.Item1.X, (int)swingStats.Item1.Y, num105, num106);
				if (spriteDirection == -1)
				{
					itemRectangle.X -= num105;
				}
				itemRectangle.Y -= num106;
				TweakSwingStats(NPCID.Sets.AttackTime[type] * 2, (int)ai[1], spriteDirection, ref itemRectangle);
				int myPlayer = Main.myPlayer;
				for (int num107 = 0; num107 < 200; num107++)
				{
					NPC nPC2 = Main.npc[num107];
					if (nPC2.active && nPC2.immune[myPlayer] == 0 && !nPC2.dontTakeDamage && !nPC2.friendly && nPC2.damage > 0 && ((Rectangle)(ref itemRectangle)).Intersects(nPC2.Hitbox) && (nPC2.noTileCollide || Collision.CanHit(position, width, height, nPC2.position, nPC2.width, nPC2.height)))
					{
						nPC2.StrikeNPCNoInteraction(num103, num104, spriteDirection);
						if (Main.netMode != 0)
						{
							NetMessage.SendData(28, -1, -1, null, num107, num103, num104, spriteDirection);
						}
						nPC2.netUpdate = true;
						nPC2.immune[myPlayer] = (int)ai[1] + 2;
					}
				}
			}
			if (ai[1] <= 0f)
			{
				bool flag18 = false;
				if (flag5)
				{
					int num109 = -num13;
					if (!Collision.CanHit(base.Center, 0, 0, base.Center + Vector2.UnitX * (float)num109 * 32f, 0, 0) || localAI[2] == 8f)
					{
						flag18 = true;
					}
					if (flag18)
					{
						int num110 = NPCID.Sets.AttackTime[type];
						int num111 = ((num13 == 1) ? num35 : num24);
						int num112 = ((num13 == 1) ? num24 : num35);
						if (num111 != -1 && !Collision.CanHit(base.Center, 0, 0, Main.npc[num111].Center, 0, 0))
						{
							num111 = ((num112 == -1 || !Collision.CanHit(base.Center, 0, 0, Main.npc[num112].Center, 0, 0)) ? (-1) : num112);
						}
						if (num111 != -1)
						{
							ai[0] = 15f;
							ai[1] = num110;
							ai[2] = 0f;
							localAI[3] = 0f;
							direction = ((position.X < Main.npc[num111].position.X) ? 1 : (-1));
							netUpdate = true;
						}
						else
						{
							flag18 = false;
						}
					}
				}
				if (!flag18)
				{
					ai[0] = ((localAI[2] == 8f && flag5) ? 8 : 0);
					ai[1] = num102 + Main.rand.Next(maxValue4);
					ai[2] = 0f;
					localAI[1] = (localAI[3] = num102 / 2 + Main.rand.Next(maxValue4));
					netUpdate = true;
				}
			}
		}
		else if (ai[0] == 24f)
		{
			velocity.X *= 0.8f;
			ai[1] -= 1f;
			localAI[3] += 1f;
			direction = 1;
			spriteDirection = 1;
			newColor = GetMagicAuraColor();
			Vector3 vector7 = ((Color)(ref newColor)).ToVector3();
			Lighting.AddLight(base.Center, vector7.X, vector7.Y, vector7.Z);
			if (ai[1] <= 0f)
			{
				ai[0] = 0f;
				ai[1] = 480f;
				ai[2] = 0f;
				localAI[1] = 480f;
				netUpdate = true;
			}
		}
		if (flag3 && wet)
		{
			int num113 = (int)(base.Center.X / 16f);
			int num114 = 5;
			if (collideX || (num113 < num114 && direction == -1) || (num113 > Main.maxTilesX - num114 && direction == 1))
			{
				direction *= -1;
				velocity.X *= -0.25f;
				netUpdate = true;
			}
			velocity.Y *= 0.9f;
			velocity.Y -= 0.5f;
			if (velocity.Y < -15f)
			{
				velocity.Y = -15f;
			}
		}
		if (flag2 && wet)
		{
			if (flag30)
			{
				ai[1] = 50f;
			}
			int num115 = (int)(base.Center.X / 16f);
			int num116 = 5;
			if (collideX || (num115 < num116 && direction == -1) || (num115 > Main.maxTilesX - num116 && direction == 1))
			{
				direction *= -1;
				velocity.X *= -0.25f;
				netUpdate = true;
			}
			if (Collision.GetWaterLine(base.Center.ToTileCoordinates(), out var waterLineHeight))
			{
				float num117 = base.Center.Y + 1f;
				if (base.Center.Y > waterLineHeight)
				{
					velocity.Y -= 0.8f;
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
					if (num117 + velocity.Y < waterLineHeight)
					{
						velocity.Y = waterLineHeight - num117;
					}
				}
				else
				{
					velocity.Y = MathHelper.Min(velocity.Y, waterLineHeight - num117);
				}
			}
			else
			{
				velocity.Y -= 0.2f;
			}
		}
		if (Main.netMode != 1 && isLikeATownNPC && !flag23)
		{
			bool flag19 = ai[0] < 2f && !flag5 && !wet;
			bool flag20 = (ai[0] < 2f || ai[0] == 8f) && (flag5 || flag6);
			if (localAI[1] > 0f)
			{
				localAI[1] -= 1f;
			}
			if (localAI[1] > 0f)
			{
				flag20 = false;
			}
			if (flag20 && type == 124 && localAI[0] == 1f)
			{
				flag20 = false;
			}
			if (flag20 && type == 20)
			{
				flag20 = false;
				for (int num118 = 0; num118 < 200; num118++)
				{
					NPC nPC3 = Main.npc[num118];
					if (nPC3.active && nPC3.townNPC && !(Distance(nPC3.Center) > 1200f) && nPC3.FindBuffIndex(165) == -1)
					{
						flag20 = true;
						break;
					}
				}
			}
			if (CanTalk && flag19 && ai[0] == 0f && velocity.Y == 0f && Main.rand.Next(300) == 0)
			{
				int num120 = 420;
				num120 = ((Main.rand.Next(2) != 0) ? (num120 * Main.rand.Next(1, 3)) : (num120 * Main.rand.Next(1, 4)));
				int num121 = 100;
				int num122 = 20;
				for (int num123 = 0; num123 < 200; num123++)
				{
					NPC nPC4 = Main.npc[num123];
					bool flag21 = (nPC4.ai[0] == 1f && nPC4.closeDoor) || (nPC4.ai[0] == 1f && nPC4.ai[1] > 200f) || nPC4.ai[0] > 1f || nPC4.wet;
					if (nPC4 != this && nPC4.active && nPC4.CanBeTalkedTo && !flag21 && nPC4.Distance(base.Center) < (float)num121 && nPC4.Distance(base.Center) > (float)num122 && Collision.CanHit(base.Center, 0, 0, nPC4.Center, 0, 0))
					{
						int num124 = (position.X < nPC4.position.X).ToDirectionInt();
						ai[0] = 3f;
						ai[1] = num120;
						ai[2] = num123;
						direction = num124;
						netUpdate = true;
						nPC4.ai[0] = 4f;
						nPC4.ai[1] = num120;
						nPC4.ai[2] = whoAmI;
						nPC4.direction = -num124;
						nPC4.netUpdate = true;
						break;
					}
				}
			}
			else if (CanTalk && flag19 && ai[0] == 0f && velocity.Y == 0f && Main.rand.Next(1800) == 0)
			{
				int num125 = 420;
				num125 = ((Main.rand.Next(2) != 0) ? (num125 * Main.rand.Next(1, 3)) : (num125 * Main.rand.Next(1, 4)));
				int num126 = 100;
				int num127 = 20;
				for (int num128 = 0; num128 < 200; num128++)
				{
					NPC nPC5 = Main.npc[num128];
					bool flag22 = (nPC5.ai[0] == 1f && nPC5.closeDoor) || (nPC5.ai[0] == 1f && nPC5.ai[1] > 200f) || nPC5.ai[0] > 1f || nPC5.wet;
					if (nPC5 != this && nPC5.active && nPC5.CanBeTalkedTo && !NPCID.Sets.IsTownPet[nPC5.type] && !flag22 && nPC5.Distance(base.Center) < (float)num126 && nPC5.Distance(base.Center) > (float)num127 && Collision.CanHit(base.Center, 0, 0, nPC5.Center, 0, 0))
					{
						int num129 = (position.X < nPC5.position.X).ToDirectionInt();
						ai[0] = 16f;
						ai[1] = num125;
						ai[2] = num128;
						localAI[2] = Main.rand.Next(4);
						localAI[3] = Main.rand.Next(3 - (int)localAI[2]);
						direction = num129;
						netUpdate = true;
						nPC5.ai[0] = 17f;
						nPC5.ai[1] = num125;
						nPC5.ai[2] = whoAmI;
						nPC5.localAI[2] = 0f;
						nPC5.localAI[3] = 0f;
						nPC5.direction = -num129;
						nPC5.netUpdate = true;
						break;
					}
				}
			}
			else if (!NPCID.Sets.IsTownPet[type] && flag19 && ai[0] == 0f && velocity.Y == 0f && Main.rand.Next(1200) == 0 && (type == 208 || (BirthdayParty.PartyIsUp && NPCID.Sets.AttackType[type] == NPCID.Sets.AttackType[208])))
			{
				int num3 = 300;
				int num4 = 150;
				for (int num5 = 0; num5 < 255; num5++)
				{
					Player player = Main.player[num5];
					if (player.active && !player.dead && player.Distance(base.Center) < (float)num4 && Collision.CanHitLine(base.Top, 0, 0, player.Top, 0, 0))
					{
						int num6 = (position.X < player.position.X).ToDirectionInt();
						ai[0] = 6f;
						ai[1] = num3;
						ai[2] = num5;
						direction = num6;
						netUpdate = true;
						break;
					}
				}
			}
			else if (flag19 && ai[0] == 0f && velocity.Y == 0f && Main.rand.Next(600) == 0 && type == 550)
			{
				int num7 = 300;
				int num8 = 150;
				for (int num9 = 0; num9 < 255; num9++)
				{
					Player player2 = Main.player[num9];
					if (player2.active && !player2.dead && player2.Distance(base.Center) < (float)num8 && Collision.CanHitLine(base.Top, 0, 0, player2.Top, 0, 0))
					{
						int num10 = (position.X < player2.position.X).ToDirectionInt();
						ai[0] = 18f;
						ai[1] = num7;
						ai[2] = num9;
						direction = num10;
						netUpdate = true;
						break;
					}
				}
			}
			else if (!NPCID.Sets.IsTownPet[type] && flag19 && ai[0] == 0f && velocity.Y == 0f && Main.rand.Next(1800) == 0)
			{
				ai[0] = 2f;
				ai[1] = 45 * Main.rand.Next(1, 2);
				netUpdate = true;
			}
			else if (flag19 && ai[0] == 0f && velocity.Y == 0f && Main.rand.Next(600) == 0 && type == 229 && !flag6)
			{
				ai[0] = 11f;
				ai[1] = 30 * Main.rand.Next(1, 4);
				netUpdate = true;
			}
			else if (flag19 && ai[0] == 0f && velocity.Y == 0f && Main.rand.Next(1200) == 0)
			{
				int num11 = 220;
				int num12 = 150;
				for (int num14 = 0; num14 < 255; num14++)
				{
					Player player3 = Main.player[num14];
					if (player3.CanBeTalkedTo && player3.Distance(base.Center) < (float)num12 && Collision.CanHitLine(base.Top, 0, 0, player3.Top, 0, 0))
					{
						int num15 = (position.X < player3.position.X).ToDirectionInt();
						ai[0] = 7f;
						ai[1] = num11;
						ai[2] = num14;
						direction = num15;
						netUpdate = true;
						break;
					}
				}
			}
			else if (flag19 && ai[0] == 1f && velocity.Y == 0f && num > 0 && Main.rand.Next(num) == 0)
			{
				Point point = (base.Bottom + Vector2.UnitY * -2f).ToTileCoordinates();
				bool flag24 = WorldGen.InWorld(point.X, point.Y, 1);
				if (flag24)
				{
					for (int num16 = 0; num16 < 200; num16++)
					{
						if (Main.npc[num16].active && Main.npc[num16].aiStyle == 7 && Main.npc[num16].townNPC && Main.npc[num16].ai[0] == 5f && (Main.npc[num16].Bottom + Vector2.UnitY * -2f).ToTileCoordinates() == point)
						{
							flag24 = false;
							break;
						}
					}
					for (int num17 = 0; num17 < 255; num17++)
					{
						if (Main.player[num17].active && Main.player[num17].sitting.isSitting && Main.player[num17].Center.ToTileCoordinates() == point)
						{
							flag24 = false;
							break;
						}
					}
				}
				if (flag24)
				{
					Tile tile2 = Main.tile[point.X, point.Y];
					flag24 = TileID.Sets.CanBeSatOnForNPCs[tile2.type];
					if (flag24 && tile2.type == 15 && tile2.frameY >= 1080 && tile2.frameY <= 1098)
					{
						flag24 = false;
					}
					if (flag24)
					{
						ai[0] = 5f;
						ai[1] = 900 + Main.rand.Next(10800);
						SitDown(point, out var targetDirection, out var bottom);
						direction = targetDirection;
						base.Bottom = bottom;
						velocity = Vector2.Zero;
						localAI[3] = 0f;
						netUpdate = true;
					}
				}
			}
			else if (flag19 && ai[0] == 1f && velocity.Y == 0f && Main.rand.Next(600) == 0 && Utils.PlotTileLine(base.Top, base.Bottom, width, DelegateMethods.SearchAvoidedByNPCs))
			{
				Point point2 = (base.Center + new Vector2((float)(direction * 10), 0f)).ToTileCoordinates();
				bool flag25 = WorldGen.InWorld(point2.X, point2.Y, 1);
				if (flag25)
				{
					Tile tileSafely7 = Framing.GetTileSafely(point2.X, point2.Y);
					if (!tileSafely7.nactive() || !TileID.Sets.InteractibleByNPCs[tileSafely7.type])
					{
						flag25 = false;
					}
				}
				if (flag25)
				{
					ai[0] = 9f;
					ai[1] = 40 + Main.rand.Next(90);
					velocity = Vector2.Zero;
					localAI[3] = 0f;
					netUpdate = true;
				}
			}
			if (Main.netMode != 1 && ai[0] < 2f && velocity.Y == 0f && type == 18 && breath > 0)
			{
				int num18 = -1;
				for (int num19 = 0; num19 < 200; num19++)
				{
					NPC nPC6 = Main.npc[num19];
					if (nPC6.active && nPC6.townNPC && nPC6.life != nPC6.lifeMax && (num18 == -1 || nPC6.lifeMax - nPC6.life > Main.npc[num18].lifeMax - Main.npc[num18].life) && Collision.CanHitLine(position, width, height, nPC6.position, nPC6.width, nPC6.height) && Distance(nPC6.Center) < 500f)
					{
						num18 = num19;
					}
				}
				if (num18 != -1)
				{
					ai[0] = 13f;
					ai[1] = 34f;
					ai[2] = num18;
					localAI[3] = 0f;
					direction = ((position.X < Main.npc[num18].position.X) ? 1 : (-1));
					netUpdate = true;
				}
			}
			if (flag20 && velocity.Y == 0f && NPCID.Sets.AttackType[type] == 0 && NPCID.Sets.AttackAverageChance[type] > 0 && Main.rand.Next(NPCID.Sets.AttackAverageChance[type] * 2) == 0)
			{
				int num20 = NPCID.Sets.AttackTime[type];
				int num21 = ((num13 == 1) ? num35 : num24);
				int num22 = ((num13 == 1) ? num24 : num35);
				if (num21 != -1 && !Collision.CanHit(base.Center, 0, 0, Main.npc[num21].Center, 0, 0))
				{
					num21 = ((num22 == -1 || !Collision.CanHit(base.Center, 0, 0, Main.npc[num22].Center, 0, 0)) ? (-1) : num22);
				}
				bool flag26 = num21 != -1;
				if (flag26 && type == 633)
				{
					flag26 = Vector2.Distance(base.Center, Main.npc[num21].Center) <= 50f;
				}
				if (flag26)
				{
					localAI[2] = ai[0];
					ai[0] = 10f;
					ai[1] = num20;
					ai[2] = 0f;
					localAI[3] = 0f;
					direction = ((position.X < Main.npc[num21].position.X) ? 1 : (-1));
					netUpdate = true;
				}
			}
			else if (flag20 && velocity.Y == 0f && NPCID.Sets.AttackType[type] == 1 && NPCID.Sets.AttackAverageChance[type] > 0 && Main.rand.Next(NPCID.Sets.AttackAverageChance[type] * 2) == 0)
			{
				int num23 = NPCID.Sets.AttackTime[type];
				int num25 = ((num13 == 1) ? num35 : num24);
				int num26 = ((num13 == 1) ? num24 : num35);
				if (num25 != -1 && !Collision.CanHitLine(base.Center, 0, 0, Main.npc[num25].Center, 0, 0))
				{
					num25 = ((num26 == -1 || !Collision.CanHitLine(base.Center, 0, 0, Main.npc[num26].Center, 0, 0)) ? (-1) : num26);
				}
				if (num25 != -1)
				{
					Vector2 vector8 = DirectionTo(Main.npc[num25].Center);
					if (vector8.Y <= 0.5f && vector8.Y >= -0.5f)
					{
						localAI[2] = ai[0];
						ai[0] = 12f;
						ai[1] = num23;
						ai[2] = vector8.Y;
						localAI[3] = 0f;
						direction = ((position.X < Main.npc[num25].position.X) ? 1 : (-1));
						netUpdate = true;
					}
				}
			}
			if (flag20 && velocity.Y == 0f && NPCID.Sets.AttackType[type] == 2 && NPCID.Sets.AttackAverageChance[type] > 0 && Main.rand.Next(NPCID.Sets.AttackAverageChance[type] * 2) == 0)
			{
				int num27 = NPCID.Sets.AttackTime[type];
				int num28 = ((num13 == 1) ? num35 : num24);
				int num29 = ((num13 == 1) ? num24 : num35);
				if (num28 != -1 && !Collision.CanHitLine(base.Center, 0, 0, Main.npc[num28].Center, 0, 0))
				{
					num28 = ((num29 == -1 || !Collision.CanHitLine(base.Center, 0, 0, Main.npc[num29].Center, 0, 0)) ? (-1) : num29);
				}
				if (num28 != -1)
				{
					localAI[2] = ai[0];
					ai[0] = 14f;
					ai[1] = num27;
					ai[2] = 0f;
					localAI[3] = 0f;
					direction = ((position.X < Main.npc[num28].position.X) ? 1 : (-1));
					netUpdate = true;
				}
				else if (type == 20)
				{
					localAI[2] = ai[0];
					ai[0] = 14f;
					ai[1] = num27;
					ai[2] = 0f;
					localAI[3] = 0f;
					netUpdate = true;
				}
			}
			if (flag20 && velocity.Y == 0f && NPCID.Sets.AttackType[type] == 3 && NPCID.Sets.AttackAverageChance[type] > 0 && Main.rand.Next(NPCID.Sets.AttackAverageChance[type] * 2) == 0)
			{
				int num30 = NPCID.Sets.AttackTime[type];
				int num31 = ((num13 == 1) ? num35 : num24);
				int num32 = ((num13 == 1) ? num24 : num35);
				if (num31 != -1 && !Collision.CanHit(base.Center, 0, 0, Main.npc[num31].Center, 0, 0))
				{
					num31 = ((num32 == -1 || !Collision.CanHit(base.Center, 0, 0, Main.npc[num32].Center, 0, 0)) ? (-1) : num32);
				}
				if (num31 != -1)
				{
					localAI[2] = ai[0];
					ai[0] = 15f;
					ai[1] = num30;
					ai[2] = 0f;
					localAI[3] = 0f;
					direction = ((position.X < Main.npc[num31].position.X) ? 1 : (-1));
					netUpdate = true;
				}
			}
		}
		if (type == 681)
		{
			float R = 0f;
			float G = 0f;
			float B = 0f;
			TorchID.TorchColor(23, out R, out G, out B);
			float num33 = 0.35f;
			R *= num33;
			G *= num33;
			B *= num33;
			Lighting.AddLight(base.Center, R, G, B);
		}
		if (type == 683 || type == 687)
		{
			float num34 = Utils.WrappedLerp(0.75f, 1f, (float)Main.timeForVisualEffects % 120f / 120f);
			Lighting.AddLight(base.Center, 0.25f * num34, 0.25f * num34, 0.1f * num34);
		}
	}

	private void AI_007_TownEntities_Shimmer_TeleportToLandingSpot()
	{
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		Vector2? vector = AI_007_TownEntities_Shimmer_ScanForBestSpotToLandOn();
		if (vector.HasValue)
		{
			Vector2 vector2 = position;
			position = vector.Value;
			Vector2 movementVector = position - vector2;
			int num = 560;
			if (((Vector2)(ref movementVector)).Length() >= (float)num)
			{
				ai[2] = 30f;
				ParticleOrchestrator.BroadcastParticleSpawn(ParticleOrchestraType.ShimmerTownNPCSend, new ParticleOrchestraSettings
				{
					PositionInWorld = vector2 + base.Size / 2f,
					MovementVector = movementVector
				});
			}
			netUpdate = true;
		}
	}

	private Vector2? AI_007_TownEntities_Shimmer_ScanForBestSpotToLandOn()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_0172: Unknown result type (might be due to invalid IL or missing references)
		Point point = base.Top.ToTileCoordinates();
		int num = 30;
		Vector2? result = null;
		bool flag = homeless && (homeTileX == -1 || homeTileY == -1);
		for (int i = 1; i < num; i += 2)
		{
			Vector2? vector = ShimmerHelper.FindSpotWithoutShimmer(this, point.X, point.Y, i, flag);
			if (vector.HasValue)
			{
				result = vector.Value;
				break;
			}
		}
		if (!result.HasValue && homeTileX != -1 && homeTileY != -1)
		{
			for (int j = 1; j < num; j += 2)
			{
				Vector2? vector2 = ShimmerHelper.FindSpotWithoutShimmer(this, homeTileX, homeTileY, j, flag);
				if (vector2.HasValue)
				{
					result = vector2.Value;
					break;
				}
			}
		}
		if (!result.HasValue)
		{
			int num2 = (flag ? 30 : 0);
			num = 60;
			flag = true;
			for (int k = num2; k < num; k += 2)
			{
				Vector2? vector3 = ShimmerHelper.FindSpotWithoutShimmer(this, point.X, point.Y, k, flag);
				if (vector3.HasValue)
				{
					result = vector3.Value;
					break;
				}
			}
		}
		if (!result.HasValue && homeTileX != -1 && homeTileY != -1)
		{
			num = 60;
			flag = true;
			for (int l = 30; l < num; l += 2)
			{
				Vector2? vector4 = ShimmerHelper.FindSpotWithoutShimmer(this, homeTileX, homeTileY, l, flag);
				if (vector4.HasValue)
				{
					result = vector4.Value;
					break;
				}
			}
		}
		return result;
	}

	private void AI_007_TownEntities_TeleportToHome(int homeFloorX, int homeFloorY)
	{
		bool flag = false;
		for (int i = 0; i < 3; i++)
		{
			int num2 = homeFloorX + i switch
			{
				1 => -1, 
				0 => 0, 
				_ => 1, 
			};
			if (type == 37 || !Collision.SolidTiles(num2 - 1, num2 + 1, homeFloorY - 3, homeFloorY - 1))
			{
				velocity.X = 0f;
				velocity.Y = 0f;
				position.X = num2 * 16 + 8 - width / 2;
				position.Y = (float)(homeFloorY * 16 - height) - 0.1f;
				netUpdate = true;
				AI_007_TryForcingSitting(homeFloorX, homeFloorY);
				flag = true;
				break;
			}
		}
		if (!flag)
		{
			homeless = true;
			WorldGen.QuickFindHome(whoAmI);
		}
	}

	private void AI_007_TownEntities_GetWalkPrediction(int myTileX, int homeFloorX, bool canBreathUnderWater, bool currentlyDrowning, int tileX, int tileY, out bool keepwalking, out bool avoidFalling)
	{
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0203: Unknown result type (might be due to invalid IL or missing references)
		//IL_021a: Unknown result type (might be due to invalid IL or missing references)
		//IL_021f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0224: Unknown result type (might be due to invalid IL or missing references)
		//IL_0228: Unknown result type (might be due to invalid IL or missing references)
		keepwalking = false;
		avoidFalling = true;
		bool flag = myTileX >= homeFloorX - 35 && myTileX <= homeFloorX + 35;
		if (townNPC && ai[1] < 30f)
		{
			keepwalking = !Utils.PlotTileLine(base.Top, base.Bottom, width, DelegateMethods.SearchAvoidedByNPCs);
			if (!keepwalking)
			{
				Rectangle hitbox = base.Hitbox;
				hitbox.X -= 20;
				hitbox.Width += 40;
				for (int i = 0; i < 200; i++)
				{
					if (Main.npc[i].active && Main.npc[i].friendly && i != whoAmI && Main.npc[i].velocity.X == 0f && ((Rectangle)(ref hitbox)).Intersects(Main.npc[i].Hitbox))
					{
						keepwalking = true;
						break;
					}
				}
			}
		}
		if (!keepwalking && currentlyDrowning)
		{
			keepwalking = true;
		}
		if (avoidFalling && (NPCID.Sets.TownCritter[type] || (!flag && direction == Math.Sign(homeFloorX - myTileX))))
		{
			avoidFalling = false;
		}
		if (!avoidFalling)
		{
			return;
		}
		bool flag2 = false;
		Point p = default(Point);
		int num = 0;
		for (int j = -1; j <= 4; j++)
		{
			Tile tileSafely = Framing.GetTileSafely(tileX, tileY + j);
			if (tileSafely.liquid > 0)
			{
				num++;
				if (tileSafely.lava())
				{
					flag2 = true;
					break;
				}
			}
			if (tileSafely.nactive() && Main.tileSolid[tileSafely.type])
			{
				if (num > 0)
				{
					p.X = tileX;
					p.Y = tileY + j;
				}
				avoidFalling = false;
				break;
			}
		}
		avoidFalling |= flag2;
		double num2 = Math.Ceiling((float)height / 16f);
		if ((double)num >= num2)
		{
			avoidFalling = true;
		}
		if (!avoidFalling && p.X != 0 && p.Y != 0)
		{
			Vector2 vector = p.ToWorldCoordinates(8f, 0f) + new Vector2((float)(-width / 2), (float)(-height));
			avoidFalling = Collision.DrownCollision(vector, width, height, 1f);
		}
	}

	private bool AI_007_TownEntities_CheckIfWillDrown(bool currentlyDrowning)
	{
		return currentlyDrowning;
	}

	private void AI_007_AttemptToPlayIdleAnimationsForPets(int petIdleChance)
	{
		if (velocity.X == 0f && Main.netMode != 1 && Main.rand.Next(petIdleChance) == 0)
		{
			int num = 3;
			if (type == 638)
			{
				num = 2;
			}
			if (NPCID.Sets.IsTownSlime[type])
			{
				num = 0;
			}
			ai[0] = ((num == 0) ? 20 : Main.rand.Next(20, 20 + num));
			ai[1] = 200 + Main.rand.Next(300);
			if (ai[0] == 20f && type == 637)
			{
				ai[1] = 500 + Main.rand.Next(200);
			}
			if (ai[0] == 21f && type == 638)
			{
				ai[1] = 100 + Main.rand.Next(100);
			}
			if (ai[0] == 22f && type == 656)
			{
				ai[1] = 200 + Main.rand.Next(200);
			}
			if (ai[0] == 20f && NPCID.Sets.IsTownSlime[type])
			{
				ai[1] = 180 + Main.rand.Next(240);
			}
			ai[2] = 0f;
			localAI[3] = 0f;
			netUpdate = true;
		}
	}

	public bool NPCCanStickToWalls()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		int num = (int)base.Center.X / 16;
		int num2 = (int)base.Center.Y / 16;
		int num3 = 0;
		for (int i = num - 1; i <= num + 1; i++)
		{
			for (int j = num2 - 1; j <= num2 + 1; j++)
			{
				Tile tileSafely = Framing.GetTileSafely(i, j);
				if ((!tileSafely.active() || !Main.tileSolid[tileSafely.type] || TileID.Sets.Platforms[tileSafely.type]) && tileSafely.wall > 0)
				{
					num3++;
					if (num3 > 4)
					{
						return true;
					}
				}
			}
		}
		return false;
	}

	private bool AI_003_Gnomes_ShouldTurnToStone()
	{
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		if (Main.remixWorld)
		{
			return position.Y / 16f > (float)(Main.maxTilesY - 350);
		}
		if (Main.dayTime)
		{
			return WorldGen.InAPlaceWithWind(position, width, height);
		}
		return false;
	}

	private void AI_003_Fighters()
	{
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0734: Unknown result type (might be due to invalid IL or missing references)
		//IL_0739: Unknown result type (might be due to invalid IL or missing references)
		//IL_0751: Unknown result type (might be due to invalid IL or missing references)
		//IL_076d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0528: Unknown result type (might be due to invalid IL or missing references)
		//IL_052d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0545: Unknown result type (might be due to invalid IL or missing references)
		//IL_0561: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0131: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_0173: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0182: Unknown result type (might be due to invalid IL or missing references)
		//IL_0189: Unknown result type (might be due to invalid IL or missing references)
		//IL_018f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0194: Unknown result type (might be due to invalid IL or missing references)
		//IL_0199: Unknown result type (might be due to invalid IL or missing references)
		//IL_041e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0431: Unknown result type (might be due to invalid IL or missing references)
		//IL_0947: Unknown result type (might be due to invalid IL or missing references)
		//IL_094d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0952: Unknown result type (might be due to invalid IL or missing references)
		//IL_0957: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_07dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ef4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0878: Unknown result type (might be due to invalid IL or missing references)
		//IL_0897: Unknown result type (might be due to invalid IL or missing references)
		//IL_089d: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_08fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0908: Unknown result type (might be due to invalid IL or missing references)
		//IL_090d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0912: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0abb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0acb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a53: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a61: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a70: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab4: Unknown result type (might be due to invalid IL or missing references)
		//IL_060c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0612: Unknown result type (might be due to invalid IL or missing references)
		//IL_0617: Unknown result type (might be due to invalid IL or missing references)
		//IL_061c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0625: Unknown result type (might be due to invalid IL or missing references)
		//IL_062c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0631: Unknown result type (might be due to invalid IL or missing references)
		//IL_0635: Unknown result type (might be due to invalid IL or missing references)
		//IL_063f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0644: Unknown result type (might be due to invalid IL or missing references)
		//IL_0646: Unknown result type (might be due to invalid IL or missing references)
		//IL_0650: Unknown result type (might be due to invalid IL or missing references)
		//IL_0655: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d63: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d68: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d70: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0afb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b00: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b08: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b24: Unknown result type (might be due to invalid IL or missing references)
		//IL_0970: Unknown result type (might be due to invalid IL or missing references)
		//IL_098f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0995: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a00: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a05: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1034: Unknown result type (might be due to invalid IL or missing references)
		//IL_1040: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e01: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_06fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_06fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0707: Unknown result type (might be due to invalid IL or missing references)
		//IL_070c: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_06df: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b98: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c37: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c40: Unknown result type (might be due to invalid IL or missing references)
		//IL_169b: Unknown result type (might be due to invalid IL or missing references)
		//IL_16a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_133c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1343: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c88: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c99: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c56: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c60: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c65: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c67: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c71: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c76: Unknown result type (might be due to invalid IL or missing references)
		//IL_27a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_16c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d00: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dda: Unknown result type (might be due to invalid IL or missing references)
		//IL_2deb: Unknown result type (might be due to invalid IL or missing references)
		//IL_27d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_27dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f84: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f94: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1788: Unknown result type (might be due to invalid IL or missing references)
		//IL_178e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1793: Unknown result type (might be due to invalid IL or missing references)
		//IL_1798: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d35: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d44: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d46: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d50: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d55: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d17: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d28: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_316c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3172: Unknown result type (might be due to invalid IL or missing references)
		//IL_3177: Unknown result type (might be due to invalid IL or missing references)
		//IL_317c: Unknown result type (might be due to invalid IL or missing references)
		//IL_28be: Unknown result type (might be due to invalid IL or missing references)
		//IL_28cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_28d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_28d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_28dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_28de: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_280c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fef: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e85: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e94: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e99: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea9: Unknown result type (might be due to invalid IL or missing references)
		//IL_19da: Unknown result type (might be due to invalid IL or missing references)
		//IL_19e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_19e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_19f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_170f: Unknown result type (might be due to invalid IL or missing references)
		//IL_15cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3364: Unknown result type (might be due to invalid IL or missing references)
		//IL_336a: Unknown result type (might be due to invalid IL or missing references)
		//IL_336f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3374: Unknown result type (might be due to invalid IL or missing references)
		//IL_3275: Unknown result type (might be due to invalid IL or missing references)
		//IL_31a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_300d: Unknown result type (might be due to invalid IL or missing references)
		//IL_301e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2900: Unknown result type (might be due to invalid IL or missing references)
		//IL_2904: Unknown result type (might be due to invalid IL or missing references)
		//IL_2909: Unknown result type (might be due to invalid IL or missing references)
		//IL_28f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_28f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_28fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2076: Unknown result type (might be due to invalid IL or missing references)
		//IL_2081: Unknown result type (might be due to invalid IL or missing references)
		//IL_1724: Unknown result type (might be due to invalid IL or missing references)
		//IL_1737: Unknown result type (might be due to invalid IL or missing references)
		//IL_34e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_34e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_34ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_34f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3338: Unknown result type (might be due to invalid IL or missing references)
		//IL_333e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3343: Unknown result type (might be due to invalid IL or missing references)
		//IL_3348: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eae: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ebe: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ec9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eec: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ef2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f22: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f27: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f38: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f45: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f56: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f60: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f95: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_20b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_20be: Unknown result type (might be due to invalid IL or missing references)
		//IL_343e: Unknown result type (might be due to invalid IL or missing references)
		//IL_345f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3391: Unknown result type (might be due to invalid IL or missing references)
		//IL_33b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_30da: Unknown result type (might be due to invalid IL or missing references)
		//IL_30e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_30e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_30ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_30f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3118: Unknown result type (might be due to invalid IL or missing references)
		//IL_311e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3145: Unknown result type (might be due to invalid IL or missing references)
		//IL_314b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3150: Unknown result type (might be due to invalid IL or missing references)
		//IL_3155: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aab: Unknown result type (might be due to invalid IL or missing references)
		//IL_2406: Unknown result type (might be due to invalid IL or missing references)
		//IL_240b: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_2296: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1beb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1984: Unknown result type (might be due to invalid IL or missing references)
		//IL_199f: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_19aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_19af: Unknown result type (might be due to invalid IL or missing references)
		//IL_186a: Unknown result type (might be due to invalid IL or missing references)
		//IL_187d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1882: Unknown result type (might be due to invalid IL or missing references)
		//IL_1887: Unknown result type (might be due to invalid IL or missing references)
		//IL_1478: Unknown result type (might be due to invalid IL or missing references)
		//IL_147d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1482: Unknown result type (might be due to invalid IL or missing references)
		//IL_2be3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2be9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bee: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2acc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ad7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ad9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ade: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3496: Unknown result type (might be due to invalid IL or missing references)
		//IL_34b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_34cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_34d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_33ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_3410: Unknown result type (might be due to invalid IL or missing references)
		//IL_3425: Unknown result type (might be due to invalid IL or missing references)
		//IL_342b: Unknown result type (might be due to invalid IL or missing references)
		//IL_32ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_330e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3323: Unknown result type (might be due to invalid IL or missing references)
		//IL_3329: Unknown result type (might be due to invalid IL or missing references)
		//IL_3226: Unknown result type (might be due to invalid IL or missing references)
		//IL_3247: Unknown result type (might be due to invalid IL or missing references)
		//IL_325c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3262: Unknown result type (might be due to invalid IL or missing references)
		//IL_2af3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b06: Unknown result type (might be due to invalid IL or missing references)
		//IL_2463: Unknown result type (might be due to invalid IL or missing references)
		//IL_246b: Unknown result type (might be due to invalid IL or missing references)
		//IL_21bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_18fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1910: Unknown result type (might be due to invalid IL or missing references)
		//IL_1916: Unknown result type (might be due to invalid IL or missing references)
		//IL_1924: Unknown result type (might be due to invalid IL or missing references)
		//IL_1926: Unknown result type (might be due to invalid IL or missing references)
		//IL_192a: Unknown result type (might be due to invalid IL or missing references)
		//IL_192f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1934: Unknown result type (might be due to invalid IL or missing references)
		//IL_1941: Unknown result type (might be due to invalid IL or missing references)
		//IL_1948: Unknown result type (might be due to invalid IL or missing references)
		//IL_194d: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_14bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_14c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_14cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_14cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c01: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c06: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c12: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c21: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c26: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c43: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c49: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c56: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c64: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c69: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c75: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c85: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c91: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cac: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ccb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d03: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d09: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d13: Unknown result type (might be due to invalid IL or missing references)
		//IL_2362: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b21: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b56: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b72: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b80: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b82: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b86: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b90: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba9: Unknown result type (might be due to invalid IL or missing references)
		//IL_14f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1501: Unknown result type (might be due to invalid IL or missing references)
		//IL_1506: Unknown result type (might be due to invalid IL or missing references)
		//IL_150b: Unknown result type (might be due to invalid IL or missing references)
		//IL_150d: Unknown result type (might be due to invalid IL or missing references)
		//IL_150f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1514: Unknown result type (might be due to invalid IL or missing references)
		//IL_1519: Unknown result type (might be due to invalid IL or missing references)
		//IL_151b: Unknown result type (might be due to invalid IL or missing references)
		//IL_151f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1524: Unknown result type (might be due to invalid IL or missing references)
		//IL_152c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1533: Unknown result type (might be due to invalid IL or missing references)
		//IL_153a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1541: Unknown result type (might be due to invalid IL or missing references)
		//IL_35b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_35c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_35c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_35d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_35df: Unknown result type (might be due to invalid IL or missing references)
		//IL_35e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_35e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_35f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_365d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3686: Unknown result type (might be due to invalid IL or missing references)
		//IL_24ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_24fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2512: Unknown result type (might be due to invalid IL or missing references)
		//IL_2517: Unknown result type (might be due to invalid IL or missing references)
		//IL_2519: Unknown result type (might be due to invalid IL or missing references)
		//IL_251b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2527: Unknown result type (might be due to invalid IL or missing references)
		//IL_253e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2543: Unknown result type (might be due to invalid IL or missing references)
		//IL_2556: Unknown result type (might be due to invalid IL or missing references)
		//IL_255c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2572: Unknown result type (might be due to invalid IL or missing references)
		//IL_2574: Unknown result type (might be due to invalid IL or missing references)
		//IL_257e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2583: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_23bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c30: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c36: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c40: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d71: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_26cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_26d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_26d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_36c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_36e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_36e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cab: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c76: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c78: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ccc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3735: Unknown result type (might be due to invalid IL or missing references)
		//IL_375f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3765: Unknown result type (might be due to invalid IL or missing references)
		//IL_37aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_37b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_37b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_37ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d05: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d22: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d31: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d49: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d58: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d66: Unknown result type (might be due to invalid IL or missing references)
		//IL_4285: Unknown result type (might be due to invalid IL or missing references)
		//IL_4296: Unknown result type (might be due to invalid IL or missing references)
		//IL_44a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_44ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_44b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_44b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_482f: Unknown result type (might be due to invalid IL or missing references)
		//IL_47ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_47fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_46e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4704: Unknown result type (might be due to invalid IL or missing references)
		//IL_44f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_450c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3edb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ee0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ee5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_452e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4544: Unknown result type (might be due to invalid IL or missing references)
		//IL_457e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4594: Unknown result type (might be due to invalid IL or missing references)
		//IL_4762: Unknown result type (might be due to invalid IL or missing references)
		//IL_4773: Unknown result type (might be due to invalid IL or missing references)
		//IL_4778: Unknown result type (might be due to invalid IL or missing references)
		//IL_477d: Unknown result type (might be due to invalid IL or missing references)
		//IL_45bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_45d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_43bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_43cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fce: Unknown result type (might be due to invalid IL or missing references)
		//IL_45f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_460e: Unknown result type (might be due to invalid IL or missing references)
		//IL_43ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_43f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_43f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_43fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_440e: Unknown result type (might be due to invalid IL or missing references)
		//IL_441e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4423: Unknown result type (might be due to invalid IL or missing references)
		//IL_4427: Unknown result type (might be due to invalid IL or missing references)
		//IL_4431: Unknown result type (might be due to invalid IL or missing references)
		//IL_4436: Unknown result type (might be due to invalid IL or missing references)
		//IL_4438: Unknown result type (might be due to invalid IL or missing references)
		//IL_4442: Unknown result type (might be due to invalid IL or missing references)
		//IL_4447: Unknown result type (might be due to invalid IL or missing references)
		//IL_408d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4093: Unknown result type (might be due to invalid IL or missing references)
		//IL_4098: Unknown result type (might be due to invalid IL or missing references)
		//IL_409d: Unknown result type (might be due to invalid IL or missing references)
		//IL_40a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_40a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_40aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_40af: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e89: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4635: Unknown result type (might be due to invalid IL or missing references)
		//IL_464b: Unknown result type (might be due to invalid IL or missing references)
		//IL_500b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5015: Unknown result type (might be due to invalid IL or missing references)
		//IL_501a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a21: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a30: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a35: Unknown result type (might be due to invalid IL or missing references)
		//IL_79dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_79ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_51d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_51df: Unknown result type (might be due to invalid IL or missing references)
		//IL_51e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_411f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4123: Unknown result type (might be due to invalid IL or missing references)
		//IL_4128: Unknown result type (might be due to invalid IL or missing references)
		//IL_410d: Unknown result type (might be due to invalid IL or missing references)
		//IL_410f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4111: Unknown result type (might be due to invalid IL or missing references)
		//IL_4116: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a79: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a81: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a90: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a95: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_416b: Unknown result type (might be due to invalid IL or missing references)
		//IL_418a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4191: Unknown result type (might be due to invalid IL or missing references)
		//IL_4140: Unknown result type (might be due to invalid IL or missing references)
		//IL_4146: Unknown result type (might be due to invalid IL or missing references)
		//IL_414b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4150: Unknown result type (might be due to invalid IL or missing references)
		//IL_4159: Unknown result type (might be due to invalid IL or missing references)
		//IL_415d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4162: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ac2: Unknown result type (might be due to invalid IL or missing references)
		//IL_7acc: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ad1: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ad4: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ae3: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ae8: Unknown result type (might be due to invalid IL or missing references)
		//IL_7aed: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b15: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b24: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b27: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b36: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b40: Unknown result type (might be due to invalid IL or missing references)
		//IL_92e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_931d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c04: Unknown result type (might be due to invalid IL or missing references)
		//IL_93a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_93b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_544d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5457: Unknown result type (might be due to invalid IL or missing references)
		//IL_545c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d88: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ca0: Unknown result type (might be due to invalid IL or missing references)
		//IL_8303: Unknown result type (might be due to invalid IL or missing references)
		//IL_7cee: Unknown result type (might be due to invalid IL or missing references)
		//IL_9458: Unknown result type (might be due to invalid IL or missing references)
		//IL_945e: Unknown result type (might be due to invalid IL or missing references)
		//IL_9463: Unknown result type (might be due to invalid IL or missing references)
		//IL_9468: Unknown result type (might be due to invalid IL or missing references)
		//IL_9471: Unknown result type (might be due to invalid IL or missing references)
		//IL_9478: Unknown result type (might be due to invalid IL or missing references)
		//IL_947d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9498: Unknown result type (might be due to invalid IL or missing references)
		//IL_94a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_94ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_94b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d21: Unknown result type (might be due to invalid IL or missing references)
		//IL_8bb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_8bcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a81: Unknown result type (might be due to invalid IL or missing references)
		//IL_8321: Unknown result type (might be due to invalid IL or missing references)
		//IL_833e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e64: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e77: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8be9: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c02: Unknown result type (might be due to invalid IL or missing references)
		//IL_8aa2: Unknown result type (might be due to invalid IL or missing references)
		//IL_8abf: Unknown result type (might be due to invalid IL or missing references)
		//IL_870a: Unknown result type (might be due to invalid IL or missing references)
		//IL_871d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7eb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ec9: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ee2: Unknown result type (might be due to invalid IL or missing references)
		//IL_7eed: Unknown result type (might be due to invalid IL or missing references)
		//IL_873a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8745: Unknown result type (might be due to invalid IL or missing references)
		//IL_875e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8769: Unknown result type (might be due to invalid IL or missing references)
		//IL_80c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_80ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_80cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_80d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_80da: Unknown result type (might be due to invalid IL or missing references)
		//IL_80ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_80f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_80f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_8102: Unknown result type (might be due to invalid IL or missing references)
		//IL_8107: Unknown result type (might be due to invalid IL or missing references)
		//IL_810c: Unknown result type (might be due to invalid IL or missing references)
		//IL_811d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8127: Unknown result type (might be due to invalid IL or missing references)
		//IL_813b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8145: Unknown result type (might be due to invalid IL or missing references)
		//IL_814a: Unknown result type (might be due to invalid IL or missing references)
		//IL_814f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8156: Unknown result type (might be due to invalid IL or missing references)
		//IL_815f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8166: Unknown result type (might be due to invalid IL or missing references)
		//IL_816f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8198: Unknown result type (might be due to invalid IL or missing references)
		//IL_819a: Unknown result type (might be due to invalid IL or missing references)
		//IL_81a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_81ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_81b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_81b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f50: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_83ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_83f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_83f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_83f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_8405: Unknown result type (might be due to invalid IL or missing references)
		//IL_8425: Unknown result type (might be due to invalid IL or missing references)
		//IL_969a: Unknown result type (might be due to invalid IL or missing references)
		//IL_96b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_843c: Unknown result type (might be due to invalid IL or missing references)
		//IL_844f: Unknown result type (might be due to invalid IL or missing references)
		//IL_99db: Unknown result type (might be due to invalid IL or missing references)
		//IL_99f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_96c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_96df: Unknown result type (might be due to invalid IL or missing references)
		//IL_96ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_970c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fe2: Unknown result type (might be due to invalid IL or missing references)
		//IL_900f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ef9: Unknown result type (might be due to invalid IL or missing references)
		//IL_8eff: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f04: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f09: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f14: Unknown result type (might be due to invalid IL or missing references)
		//IL_8508: Unknown result type (might be due to invalid IL or missing references)
		//IL_851c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8521: Unknown result type (might be due to invalid IL or missing references)
		//IL_8526: Unknown result type (might be due to invalid IL or missing references)
		//IL_8535: Unknown result type (might be due to invalid IL or missing references)
		//IL_853a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8542: Unknown result type (might be due to invalid IL or missing references)
		//IL_8547: Unknown result type (might be due to invalid IL or missing references)
		//IL_8549: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a20: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a30: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_97b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_97eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_9887: Unknown result type (might be due to invalid IL or missing references)
		//IL_988e: Unknown result type (might be due to invalid IL or missing references)
		//IL_90cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_90d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_90da: Unknown result type (might be due to invalid IL or missing references)
		//IL_90df: Unknown result type (might be due to invalid IL or missing references)
		//IL_90ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_9103: Unknown result type (might be due to invalid IL or missing references)
		//IL_9109: Unknown result type (might be due to invalid IL or missing references)
		//IL_911b: Unknown result type (might be due to invalid IL or missing references)
		//IL_856b: Unknown result type (might be due to invalid IL or missing references)
		//IL_857c: Unknown result type (might be due to invalid IL or missing references)
		//IL_858d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8597: Unknown result type (might be due to invalid IL or missing references)
		//IL_859f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9af2: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9bc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_9bca: Unknown result type (might be due to invalid IL or missing references)
		//IL_9028: Unknown result type (might be due to invalid IL or missing references)
		//IL_902d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9050: Unknown result type (might be due to invalid IL or missing references)
		//IL_9056: Unknown result type (might be due to invalid IL or missing references)
		//IL_9065: Unknown result type (might be due to invalid IL or missing references)
		//IL_906f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9081: Unknown result type (might be due to invalid IL or missing references)
		//IL_9086: Unknown result type (might be due to invalid IL or missing references)
		//IL_908b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9090: Unknown result type (might be due to invalid IL or missing references)
		//IL_90a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_90ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_90b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_90b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f32: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f58: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f77: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f87: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f91: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fa9: Unknown result type (might be due to invalid IL or missing references)
		//IL_8faf: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_85b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_85be: Unknown result type (might be due to invalid IL or missing references)
		//IL_85c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_85c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_85d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_9135: Unknown result type (might be due to invalid IL or missing references)
		//IL_913a: Unknown result type (might be due to invalid IL or missing references)
		//IL_913f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9197: Unknown result type (might be due to invalid IL or missing references)
		//IL_919d: Unknown result type (might be due to invalid IL or missing references)
		//IL_91a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_91a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_85f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_8609: Unknown result type (might be due to invalid IL or missing references)
		//IL_8617: Unknown result type (might be due to invalid IL or missing references)
		//IL_861c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8621: Unknown result type (might be due to invalid IL or missing references)
		//IL_8629: Unknown result type (might be due to invalid IL or missing references)
		//IL_8630: Unknown result type (might be due to invalid IL or missing references)
		//IL_8637: Unknown result type (might be due to invalid IL or missing references)
		//IL_863e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5566: Unknown result type (might be due to invalid IL or missing references)
		//IL_5570: Unknown result type (might be due to invalid IL or missing references)
		//IL_5575: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ba6: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bab: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc17: Unknown result type (might be due to invalid IL or missing references)
		//IL_bfae: Unknown result type (might be due to invalid IL or missing references)
		//IL_bfb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_bfd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_c008: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc90: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ddc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_dde0: Unknown result type (might be due to invalid IL or missing references)
		//IL_ddf4: Unknown result type (might be due to invalid IL or missing references)
		//IL_ddf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_de26: Unknown result type (might be due to invalid IL or missing references)
		//IL_de4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_b301: Unknown result type (might be due to invalid IL or missing references)
		//IL_b31e: Unknown result type (might be due to invalid IL or missing references)
		//IL_b8b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_b8c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_baef: Unknown result type (might be due to invalid IL or missing references)
		//IL_bafe: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb03: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb08: Unknown result type (might be due to invalid IL or missing references)
		//IL_b35e: Unknown result type (might be due to invalid IL or missing references)
		//IL_b36d: Unknown result type (might be due to invalid IL or missing references)
		//IL_b372: Unknown result type (might be due to invalid IL or missing references)
		//IL_b385: Unknown result type (might be due to invalid IL or missing references)
		//IL_b8db: Unknown result type (might be due to invalid IL or missing references)
		//IL_b8ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_b91e: Unknown result type (might be due to invalid IL or missing references)
		//IL_b92f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b46b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b4c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_c20a: Unknown result type (might be due to invalid IL or missing references)
		//IL_b941: Unknown result type (might be due to invalid IL or missing references)
		//IL_b954: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_c60e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c626: Unknown result type (might be due to invalid IL or missing references)
		//IL_d551: Unknown result type (might be due to invalid IL or missing references)
		//IL_d55c: Unknown result type (might be due to invalid IL or missing references)
		//IL_d56c: Unknown result type (might be due to invalid IL or missing references)
		//IL_d582: Unknown result type (might be due to invalid IL or missing references)
		//IL_a686: Unknown result type (might be due to invalid IL or missing references)
		//IL_a634: Unknown result type (might be due to invalid IL or missing references)
		//IL_a644: Unknown result type (might be due to invalid IL or missing references)
		//IL_a649: Unknown result type (might be due to invalid IL or missing references)
		//IL_a64e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d5d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_d5ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_d6ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_d6f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_d725: Unknown result type (might be due to invalid IL or missing references)
		//IL_d73d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6322: Unknown result type (might be due to invalid IL or missing references)
		//IL_632c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6331: Unknown result type (might be due to invalid IL or missing references)
		//IL_a827: Unknown result type (might be due to invalid IL or missing references)
		//IL_64a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_64b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_64b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_65cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_65d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_65dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_6731: Unknown result type (might be due to invalid IL or missing references)
		//IL_673b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6740: Unknown result type (might be due to invalid IL or missing references)
		//IL_6895: Unknown result type (might be due to invalid IL or missing references)
		//IL_689f: Unknown result type (might be due to invalid IL or missing references)
		//IL_68a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_69f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a00: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a05: Unknown result type (might be due to invalid IL or missing references)
		//IL_61ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_61f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_61fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f48: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e88: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f88: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6eaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_6eb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ebe: Unknown result type (might be due to invalid IL or missing references)
		//IL_715e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7165: Unknown result type (might be due to invalid IL or missing references)
		//IL_716a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c56: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c60: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c65: Unknown result type (might be due to invalid IL or missing references)
		//IL_72e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_72eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_72f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_73f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_7402: Unknown result type (might be due to invalid IL or missing references)
		//IL_7407: Unknown result type (might be due to invalid IL or missing references)
		//IL_740c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7440: Unknown result type (might be due to invalid IL or missing references)
		//IL_7453: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad93: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad98: Unknown result type (might be due to invalid IL or missing references)
		//IL_adaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_adb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_adc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_ade3: Unknown result type (might be due to invalid IL or missing references)
		//IL_adfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_ae04: Unknown result type (might be due to invalid IL or missing references)
		//IL_ae09: Unknown result type (might be due to invalid IL or missing references)
		//IL_afb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_afc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_aec3: Unknown result type (might be due to invalid IL or missing references)
		//IL_aee8: Unknown result type (might be due to invalid IL or missing references)
		//IL_af52: Unknown result type (might be due to invalid IL or missing references)
		//IL_af59: Unknown result type (might be due to invalid IL or missing references)
		//IL_b12f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b136: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_b11d: Unknown result type (might be due to invalid IL or missing references)
		//IL_b122: Unknown result type (might be due to invalid IL or missing references)
		//IL_b018: Unknown result type (might be due to invalid IL or missing references)
		//IL_b02d: Unknown result type (might be due to invalid IL or missing references)
		//IL_77c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_77cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_77d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_77d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_7905: Unknown result type (might be due to invalid IL or missing references)
		//IL_790f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7914: Unknown result type (might be due to invalid IL or missing references)
		if (Main.player[target].position.Y + (float)Main.player[target].height == position.Y + (float)height)
		{
			directionY = -1;
		}
		bool flag = false;
		if (type == 624 && AI_003_Gnomes_ShouldTurnToStone())
		{
			int num = (int)(base.Center.X / 16f);
			int num110 = (int)(base.Bottom.Y / 16f);
			position += netOffset;
			int num127 = Dust.NewDust(position, width, height, 43, 0f, 0f, 254, Color.White, 0.5f);
			Dust obj = Main.dust[num127];
			obj.velocity *= 0.2f;
			position -= netOffset;
			if (WorldGen.SolidTileAllowBottomSlope(num, num110))
			{
				for (int i = 0; i < 5; i++)
				{
					position += netOffset;
					int num138 = Dust.NewDust(position, width, height, 43, 0f, 0f, 254, Color.White, 0.5f);
					Dust obj2 = Main.dust[num138];
					obj2.velocity *= 0.2f;
					position -= netOffset;
				}
				if (Main.netMode != 1 && TileObject.CanPlace(num, num110 - 1, 567, 0, direction, out var _, onlyCheck: true) && WorldGen.PlaceTile(num, num110 - 1, 567, mute: false, forced: false, -1, Main.rand.Next(5)))
				{
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, num, num110 - 2, 1, 2);
					}
					if (Main.netMode != 1)
					{
						if (IsNPCValidForBestiaryKillCredit())
						{
							Main.BestiaryTracker.Kills.RegisterKill(this);
						}
						CountKillForBannersAndDropThem();
					}
					life = 0;
					active = false;
					AchievementsHelper.NotifyProgressionEvent(24);
					return;
				}
			}
		}
		Vector2 val;
		if (type == 466)
		{
			int num148 = 200;
			if (ai[2] == 0f)
			{
				alpha = num148;
				TargetClosest();
				if (!Main.player[target].dead)
				{
					val = Main.player[target].Center - base.Center;
					if (((Vector2)(ref val)).Length() < 170f)
					{
						ai[2] = -16f;
					}
				}
				if (velocity.X != 0f || velocity.Y < 0f || velocity.Y > 2f || justHit)
				{
					ai[2] = -16f;
				}
				return;
			}
			if (ai[2] < 0f)
			{
				if (alpha > 0)
				{
					alpha -= num148 / 16;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				ai[2] += 1f;
				if (ai[2] == 0f)
				{
					ai[2] = 1f;
					velocity.X = direction * 2;
				}
				return;
			}
			alpha = 0;
		}
		if (type == 166)
		{
			if (Main.netMode != 1 && Main.rand.Next(240) == 0)
			{
				ai[2] = Main.rand.Next(-480, -60);
				netUpdate = true;
			}
			if (ai[2] < 0f)
			{
				TargetClosest();
				if (justHit)
				{
					ai[2] = 0f;
				}
				if (Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					ai[2] = 0f;
				}
			}
			if (ai[2] < 0f)
			{
				velocity.X *= 0.9f;
				if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
				{
					velocity.X = 0f;
				}
				ai[2] += 1f;
				if (ai[2] == 0f)
				{
					velocity.X = (float)direction * 0.1f;
				}
				return;
			}
		}
		if (type == 461)
		{
			if (wet)
			{
				knockBackResist = 0f;
				ai[3] = -0.10101f;
				noGravity = true;
				Vector2 center = base.Center;
				width = 34;
				height = 24;
				position.X = center.X - (float)(width / 2);
				position.Y = center.Y - (float)(height / 2);
				TargetClosest();
				if (collideX)
				{
					velocity.X = 0f - oldVelocity.X;
				}
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				if (velocity.X > 0f)
				{
					direction = 1;
				}
				if (Collision.CanHit(position, width, height, Main.player[target].Center, 1, 1))
				{
					Vector2 vector = Main.player[target].Center - base.Center;
					((Vector2)(ref vector)).Normalize();
					vector *= 5f;
					velocity = (velocity * 19f + vector) / 20f;
					return;
				}
				float num158 = 5f;
				if (velocity.Y > 0f)
				{
					num158 = 3f;
				}
				if (velocity.Y < 0f)
				{
					num158 = 8f;
				}
				Vector2 vector10 = default(Vector2);
				((Vector2)(ref vector10))._002Ector((float)direction, -1f);
				((Vector2)(ref vector10)).Normalize();
				vector10 *= num158;
				if (num158 < 5f)
				{
					velocity = (velocity * 24f + vector10) / 25f;
				}
				else
				{
					velocity = (velocity * 9f + vector10) / 10f;
				}
				return;
			}
			knockBackResist = 0.4f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
			noGravity = false;
			Vector2 center2 = base.Center;
			width = 18;
			height = 40;
			position.X = center2.X - (float)(width / 2);
			position.Y = center2.Y - (float)(height / 2);
			if (ai[3] == -0.10101f)
			{
				ai[3] = 0f;
				float num169 = ((Vector2)(ref velocity)).Length();
				num169 *= 2f;
				if (num169 > 10f)
				{
					num169 = 10f;
				}
				((Vector2)(ref velocity)).Normalize();
				velocity *= num169;
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				if (velocity.X > 0f)
				{
					direction = 1;
				}
				spriteDirection = direction;
			}
		}
		if (type == 586)
		{
			if (alpha == 255)
			{
				TargetClosest();
				spriteDirection = direction;
				velocity.Y = -6f;
				netUpdate = true;
				for (int j = 0; j < 35; j++)
				{
					Dust dust6 = Dust.NewDustDirect(position, width, height, 5);
					dust6.velocity *= 1f;
					dust6.scale = 1f + Main.rand.NextFloat() * 0.5f;
					dust6.fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
					dust6.velocity += velocity * 0.5f;
				}
			}
			alpha -= 15;
			if (alpha < 0)
			{
				alpha = 0;
			}
			position += netOffset;
			if (alpha != 0)
			{
				for (int k = 0; k < 2; k++)
				{
					Dust dust7 = Dust.NewDustDirect(position, width, height, 5);
					dust7.velocity *= 1f;
					dust7.scale = 1f + Main.rand.NextFloat() * 0.5f;
					dust7.fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
					dust7.velocity += velocity * 0.3f;
				}
			}
			if (Main.rand.Next(3) == 0)
			{
				Dust dust8 = Dust.NewDustDirect(position, width, height, 5);
				dust8.velocity *= 0f;
				dust8.alpha = 120;
				dust8.scale = 0.7f + Main.rand.NextFloat() * 0.5f;
				dust8.velocity += velocity * 0.3f;
			}
			position -= netOffset;
			if (wet)
			{
				knockBackResist = 0f;
				ai[3] = -0.10101f;
				noGravity = true;
				Vector2 center3 = base.Center;
				position.X = center3.X - (float)(width / 2);
				position.Y = center3.Y - (float)(height / 2);
				TargetClosest();
				if (collideX)
				{
					velocity.X = 0f - oldVelocity.X;
				}
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				if (velocity.X > 0f)
				{
					direction = 1;
				}
				if (Collision.CanHit(position, width, height, Main.player[target].Center, 1, 1))
				{
					Vector2 vector21 = Main.player[target].Center - base.Center;
					((Vector2)(ref vector21)).Normalize();
					float num180 = 1f;
					num180 += Math.Abs(base.Center.Y - Main.player[target].Center.Y) / 40f;
					num180 = MathHelper.Clamp(num180, 5f, 20f);
					vector21 *= num180;
					if (velocity.Y > 0f)
					{
						velocity = (velocity * 29f + vector21) / 30f;
					}
					else
					{
						velocity = (velocity * 4f + vector21) / 5f;
					}
					return;
				}
				float num191 = 5f;
				if (velocity.Y > 0f)
				{
					num191 = 3f;
				}
				if (velocity.Y < 0f)
				{
					num191 = 8f;
				}
				Vector2 vector31 = default(Vector2);
				((Vector2)(ref vector31))._002Ector((float)direction, -1f);
				((Vector2)(ref vector31)).Normalize();
				vector31 *= num191;
				if (num191 < 5f)
				{
					velocity = (velocity * 24f + vector31) / 25f;
				}
				else
				{
					velocity = (velocity * 9f + vector31) / 10f;
				}
				return;
			}
			noGravity = false;
			Vector2 center4 = base.Center;
			position.X = center4.X - (float)(width / 2);
			position.Y = center4.Y - (float)(height / 2);
			if (ai[3] == -0.10101f)
			{
				ai[3] = 0f;
				float num2 = ((Vector2)(ref velocity)).Length();
				num2 *= 2f;
				if (num2 > 15f)
				{
					num2 = 15f;
				}
				((Vector2)(ref velocity)).Normalize();
				velocity *= num2;
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				if (velocity.X > 0f)
				{
					direction = 1;
				}
				spriteDirection = direction;
			}
		}
		if (type == 379 || type == 380)
		{
			if (ai[3] < 0f)
			{
				directionY = -1;
				flag = false;
				damage = 0;
				velocity.X *= 0.93f;
				if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
				{
					velocity.X = 0f;
				}
				int num13 = (int)(0f - ai[3] - 1f);
				int num24 = Math.Sign(Main.npc[num13].Center.X - base.Center.X);
				if (num24 != direction)
				{
					velocity.X = 0f;
					direction = num24;
					netUpdate = true;
				}
				if (justHit && Main.netMode != 1 && Main.npc[num13].localAI[0] == 0f)
				{
					Main.npc[num13].localAI[0] = 1f;
				}
				if (ai[0] < 1000f)
				{
					ai[0] = 1000f;
				}
				if ((ai[0] += 1f) >= 1300f)
				{
					ai[0] = 1000f;
					netUpdate = true;
				}
				return;
			}
			if (ai[0] >= 1000f)
			{
				ai[0] = 0f;
			}
			damage = defDamage;
		}
		if (type == 383 && ai[2] == 0f && localAI[0] == 0f && Main.netMode != 1)
		{
			int num34 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 384, whoAmI);
			ai[2] = num34 + 1;
			localAI[0] = -1f;
			netUpdate = true;
			Main.npc[num34].ai[0] = whoAmI;
			Main.npc[num34].netUpdate = true;
		}
		if (type == 383)
		{
			int num45 = (int)ai[2] - 1;
			if (num45 != -1 && Main.npc[num45].active && Main.npc[num45].type == 384)
			{
				dontTakeDamage = true;
			}
			else
			{
				dontTakeDamage = false;
				ai[2] = 0f;
				if (localAI[0] == -1f)
				{
					localAI[0] = 180f;
				}
				if (localAI[0] > 0f)
				{
					localAI[0] -= 1f;
				}
			}
		}
		if (type == 482)
		{
			int num56 = 300;
			int num67 = 120;
			dontTakeDamage = false;
			if (ai[2] < 0f)
			{
				dontTakeDamage = true;
				ai[2] += 1f;
				velocity.X *= 0.9f;
				if ((double)Math.Abs(velocity.X) < 0.001)
				{
					velocity.X = 0.001f * (float)direction;
				}
				if (Math.Abs(velocity.Y) > 1f)
				{
					ai[2] += 10f;
				}
				if (ai[2] >= 0f)
				{
					netUpdate = true;
					velocity.X += (float)direction * 0.3f;
				}
				return;
			}
			if (ai[2] < (float)num56)
			{
				if (justHit)
				{
					ai[2] += 15f;
				}
				ai[2] += 1f;
			}
			else if (velocity.Y == 0f)
			{
				ai[2] = -num67;
				netUpdate = true;
			}
		}
		Rectangle hitbox;
		if (type == 631)
		{
			if (target < 0 || target == 255 || Main.player[target].dead || !Main.player[target].active)
			{
				TargetClosest(ai[2] > 0f);
			}
			Player player = Main.player[target];
			bool flag12 = !player.dead && player.active && base.Center.Distance(player.Center) < 320f;
			int num78 = 100;
			int num89 = 32;
			if (ai[2] == 0f)
			{
				ai[3] = 65f;
				if (flag12 && Collision.CanHit(player, this))
				{
					ai[2] = num78;
					ai[3] = 0f;
					velocity.X = (float)direction * 0.01f;
					netUpdate = true;
				}
			}
			else
			{
				if (ai[2] < (float)num78)
				{
					ai[2] += 1f;
					velocity.X *= 0.9f;
					if ((double)Math.Abs(velocity.X) < 0.001)
					{
						velocity.X = 0f;
					}
					if (Math.Abs(velocity.Y) > 1f)
					{
						ai[2] = 0f;
					}
					if (ai[2] == (float)(num78 - num89 / 2) && Main.netMode != 1)
					{
						hitbox = player.Hitbox;
						if (!((Rectangle)(ref hitbox)).Intersects(base.Hitbox) && Collision.CanHit(player, this))
						{
							float num99 = 8f;
							Vector2 center5 = base.Center;
							Vector2 vector32 = DirectionTo(Main.player[target].Center) * num99;
							if (vector32.HasNaNs())
							{
								((Vector2)(ref vector32))._002Ector((float)direction * num99, 0f);
							}
							int num111 = 20;
							Vector2 v = vector32 + Utils.RandomVector2(Main.rand, -0.8f, 0.8f);
							v = v.SafeNormalize(Vector2.Zero);
							v *= num99;
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), center5.X, center5.Y, v.X, v.Y, 909, num111, 1f, Main.myPlayer);
						}
					}
					if (ai[2] >= (float)num78)
					{
						ai[2] = num78;
						ai[3] = 0f;
						velocity.X = (float)direction * 0.01f;
						netUpdate = true;
					}
					return;
				}
				if (velocity.Y == 0f && flag12)
				{
					hitbox = player.Hitbox;
					if (((Rectangle)(ref hitbox)).Intersects(base.Hitbox) || Collision.CanHit(player, this))
					{
						ai[2] = num78 - num89;
						netUpdate = true;
					}
				}
			}
		}
		if (type == 480)
		{
			int num118 = 180;
			int num119 = 300;
			int num120 = 180;
			int num121 = 60;
			int num122 = 20;
			if (life < lifeMax / 3)
			{
				num118 = 120;
				num119 = 240;
				num120 = 240;
				num121 = 90;
			}
			if (ai[2] > 0f)
			{
				ai[2] -= 1f;
			}
			else if (ai[2] == 0f)
			{
				if (((Main.player[target].Center.X < base.Center.X && direction < 0) || (Main.player[target].Center.X > base.Center.X && direction > 0)) && velocity.Y == 0f && Distance(Main.player[target].Center) < 900f && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					ai[2] = -num120 - num122;
					netUpdate = true;
				}
			}
			else
			{
				if (ai[2] < 0f && ai[2] < (float)(-num120))
				{
					position += netOffset;
					velocity.X *= 0.9f;
					if (velocity.Y < -2f || velocity.Y > 4f || justHit)
					{
						ai[2] = num118;
					}
					else
					{
						ai[2] += 1f;
						if (ai[2] == 0f)
						{
							ai[2] = num119;
						}
					}
					float num123 = ai[2] + (float)num120 + (float)num122;
					if (num123 == 1f)
					{
						SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 17);
					}
					if (num123 < (float)num122)
					{
						Vector2 vector33 = base.Top + new Vector2((float)(spriteDirection * 6), 6f);
						float num124 = MathHelper.Lerp(20f, 30f, (num123 * 3f + 50f) / 182f);
						Main.rand.NextFloat();
						for (float num125 = 0f; num125 < 2f; num125 += 1f)
						{
							Vector2 vector34 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (Main.rand.NextFloat() * 0.5f + 0.5f);
							Dust obj3 = Main.dust[Dust.NewDust(vector33, 0, 0, 228)];
							obj3.position = vector33 + vector34 * num124;
							obj3.noGravity = true;
							obj3.velocity = vector34 * 2f;
							obj3.scale = 0.5f + Main.rand.NextFloat() * 0.5f;
						}
					}
					Lighting.AddLight(base.Center, 0.9f, 0.75f, 0.1f);
					position -= netOffset;
					return;
				}
				if (ai[2] < 0f && ai[2] >= (float)(-num120))
				{
					position += netOffset;
					Lighting.AddLight(base.Center, 0.9f, 0.75f, 0.1f);
					velocity.X *= 0.9f;
					if (velocity.Y < -2f || velocity.Y > 4f || justHit)
					{
						ai[2] = num118;
					}
					else
					{
						ai[2] += 1f;
						if (ai[2] == 0f)
						{
							ai[2] = num119;
						}
					}
					float num126 = ai[2] + (float)num120;
					if (num126 < 180f && (Main.rand.Next(3) == 0 || ai[2] % 3f == 0f))
					{
						Vector2 vector35 = base.Top + new Vector2((float)(spriteDirection * 10), 10f);
						float num128 = MathHelper.Lerp(20f, 30f, (num126 * 3f + 50f) / 182f);
						Main.rand.NextFloat();
						for (float num129 = 0f; num129 < 1f; num129 += 1f)
						{
							Vector2 vector36 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (Main.rand.NextFloat() * 0.5f + 0.5f);
							Dust obj4 = Main.dust[Dust.NewDust(vector35, 0, 0, 228)];
							obj4.position = vector35 + vector36 * num128;
							obj4.noGravity = true;
							obj4.velocity = vector36 * 4f;
							obj4.scale = 0.5f + Main.rand.NextFloat();
						}
					}
					position -= netOffset;
					if (Main.netMode == 2)
					{
						return;
					}
					Player player2 = Main.player[Main.myPlayer];
					_ = Main.myPlayer;
					if (player2.dead || !player2.active || player2.FindBuffIndex(156) != -1)
					{
						return;
					}
					Vector2 vector2 = player2.Center - base.Center;
					if (!(((Vector2)(ref vector2)).Length() < 700f))
					{
						return;
					}
					bool flag21 = ((Vector2)(ref vector2)).Length() < 30f;
					if (!flag21)
					{
						float x = ((float)Math.PI / 4f).ToRotationVector2().X;
						Vector2 vector3 = Vector2.Normalize(vector2);
						if (vector3.X > x || vector3.X < 0f - x)
						{
							flag21 = true;
						}
					}
					if (((player2.Center.X < base.Center.X && direction < 0 && player2.direction > 0) || (player2.Center.X > base.Center.X && direction > 0 && player2.direction < 0)) && flag21 && (Collision.CanHitLine(base.Center, 1, 1, player2.Center, 1, 1) || Collision.CanHitLine(base.Center - Vector2.UnitY * 16f, 1, 1, player2.Center, 1, 1) || Collision.CanHitLine(base.Center + Vector2.UnitY * 8f, 1, 1, player2.Center, 1, 1)) && !player2.creativeGodMode)
					{
						player2.AddBuff(156, num121 + (int)ai[2] * -1);
					}
					return;
				}
			}
		}
		if (type == 471)
		{
			if (ai[3] < 0f)
			{
				knockBackResist = 0f;
				defense = (int)((double)defDefense * 1.1);
				noGravity = true;
				noTileCollide = true;
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else if (velocity.X > 0f)
				{
					direction = 1;
				}
				rotation = velocity.X * 0.1f;
				if (Main.netMode != 1)
				{
					localAI[3] += 1f;
					if (localAI[3] > (float)Main.rand.Next(20, 180))
					{
						localAI[3] = 0f;
						Vector2 center6 = base.Center;
						center6 += velocity;
						NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)center6.X, (int)center6.Y, 30);
					}
				}
			}
			else
			{
				localAI[3] = 0f;
				knockBackResist = 0.35f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
				rotation *= 0.9f;
				defense = defDefense;
				noGravity = false;
				noTileCollide = false;
			}
			if (ai[3] == 1f)
			{
				knockBackResist = 0f;
				defense += 10;
			}
			if (ai[3] == -1f)
			{
				TargetClosest();
				float num130 = 8f;
				float num131 = 40f;
				Vector2 vector4 = Main.player[target].Center - base.Center;
				float num132 = ((Vector2)(ref vector4)).Length();
				num130 += num132 / 200f;
				((Vector2)(ref vector4)).Normalize();
				vector4 *= num130;
				velocity = (velocity * (num131 - 1f) + vector4) / num131;
				if (num132 < 500f && !Collision.SolidCollision(position, width, height))
				{
					ai[3] = 0f;
					ai[2] = 0f;
				}
				return;
			}
			if (ai[3] == -2f)
			{
				velocity.Y -= 0.2f;
				if (velocity.Y < -10f)
				{
					velocity.Y = -10f;
				}
				if (Main.player[target].Center.Y - base.Center.Y > 200f)
				{
					TargetClosest();
					ai[3] = -3f;
					if (Main.player[target].Center.X > base.Center.X)
					{
						ai[2] = 1f;
					}
					else
					{
						ai[2] = -1f;
					}
				}
				velocity.X *= 0.99f;
				return;
			}
			if (ai[3] == -3f)
			{
				if (direction == 0)
				{
					TargetClosest();
				}
				if (ai[2] == 0f)
				{
					ai[2] = direction;
				}
				velocity.Y *= 0.9f;
				velocity.X += ai[2] * 0.3f;
				if (velocity.X > 10f)
				{
					velocity.X = 10f;
				}
				if (velocity.X < -10f)
				{
					velocity.X = -10f;
				}
				float num133 = Main.player[target].Center.X - base.Center.X;
				if ((ai[2] < 0f && num133 > 300f) || (ai[2] > 0f && num133 < -300f))
				{
					ai[3] = -4f;
					ai[2] = 0f;
				}
				else if (Math.Abs(num133) > 800f)
				{
					ai[3] = -1f;
					ai[2] = 0f;
				}
				return;
			}
			if (ai[3] == -4f)
			{
				ai[2] += 1f;
				velocity.Y += 0.1f;
				if (((Vector2)(ref velocity)).Length() > 4f)
				{
					velocity *= 0.9f;
				}
				int num134 = (int)base.Center.X / 16;
				int num135 = (int)(position.Y + (float)height + 12f) / 16;
				bool flag22 = false;
				for (int l = num134 - 1; l <= num134 + 1; l++)
				{
					if (Main.tile[l, num135] == null)
					{
						Main.tile[num134, num135] = default(Tile);
					}
					if (Main.tile[l, num135].active() && Main.tileSolid[Main.tile[l, num135].type])
					{
						flag22 = true;
					}
				}
				if (flag22 && !Collision.SolidCollision(position, width, height))
				{
					ai[3] = 0f;
					ai[2] = 0f;
				}
				else if (ai[2] > 300f || base.Center.Y > Main.player[target].Center.Y + 200f)
				{
					ai[3] = -1f;
					ai[2] = 0f;
				}
			}
			else
			{
				if (ai[3] == 1f)
				{
					Vector2 center7 = base.Center;
					center7.Y -= 70f;
					velocity.X *= 0.8f;
					ai[2] += 1f;
					if (ai[2] == 60f)
					{
						if (Main.netMode != 1)
						{
							NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)center7.X, (int)center7.Y + 18, 472);
						}
					}
					else if (ai[2] >= 90f)
					{
						ai[3] = -2f;
						ai[2] = 0f;
					}
					Vector2 vector5 = default(Vector2);
					for (int m = 0; m < 2; m++)
					{
						Vector2 val2 = center7;
						((Vector2)(ref vector5))._002Ector((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
						((Vector2)(ref vector5)).Normalize();
						vector5 *= (float)Main.rand.Next(0, 100) * 0.1f;
						Vector2 val3 = val2 + vector5;
						((Vector2)(ref vector5)).Normalize();
						vector5 *= (float)Main.rand.Next(50, 90) * 0.1f;
						int num136 = Dust.NewDust(val3, 1, 1, 27);
						Main.dust[num136].velocity = -vector5 * 0.3f;
						Main.dust[num136].alpha = 100;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num136].noGravity = true;
							Main.dust[num136].scale += 0.3f;
						}
					}
					return;
				}
				ai[2] += 1f;
				int num137 = 10;
				if (velocity.Y == 0f && CountNPCS(472) < num137)
				{
					if (ai[2] >= 180f)
					{
						ai[2] = 0f;
						ai[3] = 1f;
					}
				}
				else
				{
					if (CountNPCS(472) >= num137)
					{
						ai[2] += 1f;
					}
					if (ai[2] >= 360f)
					{
						ai[2] = 0f;
						ai[3] = -2f;
						velocity.Y -= 3f;
					}
				}
				if (target >= 0 && !Main.player[target].dead)
				{
					val = Main.player[target].Center - base.Center;
					if (((Vector2)(ref val)).Length() > 800f)
					{
						ai[3] = -1f;
						ai[2] = 0f;
					}
				}
			}
			if (Main.player[target].dead)
			{
				TargetClosest();
				if (Main.player[target].dead)
				{
					EncourageDespawn(1);
				}
			}
		}
		if (type == 419)
		{
			reflectsProjectiles = false;
			takenDamageMultiplier = 1f;
			int num139 = 6;
			int num140 = 10;
			float num141 = 16f;
			if (ai[2] > 0f)
			{
				ai[2] -= 1f;
			}
			if (ai[2] == 0f)
			{
				if (((Main.player[target].Center.X < base.Center.X && direction < 0) || (Main.player[target].Center.X > base.Center.X && direction > 0)) && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					ai[2] = -1f;
					netUpdate = true;
					TargetClosest();
				}
			}
			else
			{
				if (ai[2] < 0f && ai[2] > (float)(-num139))
				{
					ai[2] -= 1f;
					velocity.X *= 0.9f;
					return;
				}
				if (ai[2] == (float)(-num139))
				{
					ai[2] -= 1f;
					TargetClosest();
					Vector2 vector6 = DirectionTo(Main.player[target].Top + new Vector2(0f, -30f));
					if (vector6.HasNaNs())
					{
						vector6 = Vector2.Normalize(new Vector2((float)spriteDirection, -1f));
					}
					velocity = vector6 * num141;
					netUpdate = true;
					return;
				}
				if (ai[2] < (float)(-num139))
				{
					ai[2] -= 1f;
					if (velocity.Y == 0f)
					{
						ai[2] = 60f;
					}
					else if (ai[2] < (float)(-num139 - num140))
					{
						velocity.Y += 0.15f;
						if (velocity.Y > 24f)
						{
							velocity.Y = 24f;
						}
					}
					reflectsProjectiles = true;
					takenDamageMultiplier = 3f;
					if (justHit)
					{
						ai[2] = 60f;
						netUpdate = true;
					}
					return;
				}
			}
		}
		if (type == 415)
		{
			int num142 = 42;
			int num143 = 18;
			if (justHit)
			{
				ai[2] = 120f;
				netUpdate = true;
			}
			if (ai[2] > 0f)
			{
				ai[2] -= 1f;
			}
			if (ai[2] == 0f)
			{
				int num144 = 0;
				for (int n = 0; n < 200; n++)
				{
					if (Main.npc[n].active && Main.npc[n].type == 516)
					{
						num144++;
					}
				}
				if (num144 > 6)
				{
					ai[2] = 90f;
				}
				else if (((Main.player[target].Center.X < base.Center.X && direction < 0) || (Main.player[target].Center.X > base.Center.X && direction > 0)) && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					ai[2] = -1f;
					netUpdate = true;
					TargetClosest();
				}
			}
			else if (ai[2] < 0f && ai[2] > (float)(-num142))
			{
				ai[2] -= 1f;
				if (ai[2] == (float)(-num142))
				{
					ai[2] = 180 + 30 * Main.rand.Next(10);
				}
				velocity.X *= 0.8f;
				if (ai[2] == (float)(-num143) || ai[2] == (float)(-num143 - 8) || ai[2] == (float)(-num143 - 16))
				{
					position += netOffset;
					for (int num145 = 0; num145 < 20; num145++)
					{
						Vector2 vector7 = base.Center + Vector2.UnitX * (float)spriteDirection * 40f;
						Dust obj5 = Main.dust[Dust.NewDust(vector7, 0, 0, 259)];
						Vector2 vector8 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						obj5.position = vector7 + vector8 * 4f;
						obj5.velocity = vector8 * 2f + Vector2.UnitX * Main.rand.NextFloat() * (float)spriteDirection * 3f;
						obj5.scale = 0.3f + vector8.X * (float)(-spriteDirection);
						obj5.fadeIn = 0.7f;
						obj5.noGravity = true;
					}
					position -= netOffset;
					if (velocity.X > -0.5f && velocity.X < 0.5f)
					{
						velocity.X = 0f;
					}
					if (Main.netMode != 1)
					{
						NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X + spriteDirection * 45, (int)base.Center.Y + 8, 516, 0, 0f, 0f, 0f, 0f, target);
					}
				}
				return;
			}
		}
		if (type == 428)
		{
			localAI[0] += 1f;
			if (localAI[0] >= 300f)
			{
				int num202 = (int)base.Center.X / 16 - 1;
				int num146 = (int)base.Center.Y / 16 - 1;
				if (!Collision.SolidTiles(num202, num202 + 2, num146, num146 + 1) && Main.netMode != 1)
				{
					Transform(427);
					life = lifeMax;
					localAI[0] = 0f;
					return;
				}
			}
			int num147 = 0;
			num147 = ((localAI[0] < 60f) ? 16 : ((localAI[0] < 120f) ? 8 : ((localAI[0] < 180f) ? 4 : ((localAI[0] < 240f) ? 2 : ((!(localAI[0] < 300f)) ? 1 : 1)))));
			if (Main.rand.Next(num147) == 0)
			{
				position += netOffset;
				Dust dust4 = Main.dust[Dust.NewDust(position, width, height, 229)];
				dust4.noGravity = true;
				dust4.scale = 1f;
				dust4.noLight = true;
				dust4.velocity = DirectionFrom(dust4.position) * ((Vector2)(ref dust4.velocity)).Length();
				dust4.position -= dust4.velocity * 5f;
				dust4.position.X += direction * 6;
				dust4.position.Y += 4f;
				position -= netOffset;
			}
		}
		if (type == 427)
		{
			localAI[0] += 1f;
			localAI[0] += Math.Abs(velocity.X) / 2f;
			if (localAI[0] >= 1200f && Main.netMode != 1)
			{
				int num203 = (int)base.Center.X / 16 - 2;
				int num149 = (int)base.Center.Y / 16 - 3;
				if (!Collision.SolidTiles(num203, num203 + 4, num149, num149 + 4))
				{
					Transform(426);
					life = lifeMax;
					localAI[0] = 0f;
					return;
				}
			}
			int num150 = 0;
			num150 = ((localAI[0] < 360f) ? 32 : ((localAI[0] < 720f) ? 16 : ((localAI[0] < 1080f) ? 6 : ((localAI[0] < 1440f) ? 2 : ((!(localAI[0] < 1800f)) ? 1 : 1)))));
			if (Main.rand.Next(num150) == 0)
			{
				position += netOffset;
				Dust obj6 = Main.dust[Dust.NewDust(position, width, height, 229)];
				obj6.noGravity = true;
				obj6.scale = 1f;
				obj6.noLight = true;
				position -= netOffset;
			}
		}
		if (type == 590)
		{
			position += netOffset;
			int num151 = (int)(position.Y + 6f) / 16;
			if (spriteDirection < 0)
			{
				int num152 = (int)(base.Center.X - 22f) / 16;
				Tile tileSafely = Framing.GetTileSafely(num152, num151);
				Tile tileSafely2 = Framing.GetTileSafely(num152 + 1, num151);
				if (WorldGen.InWorld(num152, num151) && tileSafely2.liquid == 0 && tileSafely.liquid == 0)
				{
					Lighting.AddLight(num152, num151, 1f, 0.95f, 0.8f);
					if (Main.rand.Next(30) == 0)
					{
						Dust.NewDust(new Vector2(base.Center.X - 22f, position.Y + 6f), 1, 1, 6);
					}
				}
			}
			else
			{
				int num153 = (int)(base.Center.X + 14f) / 16;
				Tile tileSafely3 = Framing.GetTileSafely(num153, num151);
				Tile tileSafely4 = Framing.GetTileSafely(num153 - 1, num151);
				if (WorldGen.InWorld(num153, num151) && tileSafely4.liquid == 0 && tileSafely3.liquid == 0)
				{
					Lighting.AddLight(num153, num151, 1f, 0.95f, 0.8f);
					if (Main.rand.Next(30) == 0)
					{
						Dust.NewDust(new Vector2(base.Center.X + 14f, position.Y + 6f), 1, 1, 6);
					}
				}
			}
			position -= netOffset;
		}
		else if (type == 591)
		{
			position += netOffset;
			if (!wet)
			{
				if (spriteDirection < 0)
				{
					Lighting.AddLight(new Vector2(base.Center.X - 36f, position.Y + 24f), 1f, 0.95f, 0.8f);
					if (ai[2] == 0f && Main.rand.Next(30) == 0)
					{
						Dust.NewDust(new Vector2(base.Center.X - 36f, position.Y + 24f), 1, 1, 6);
					}
				}
				else
				{
					Lighting.AddLight(new Vector2(base.Center.X + 28f, position.Y + 24f), 1f, 0.95f, 0.8f);
					if (ai[2] == 0f && Main.rand.Next(30) == 0)
					{
						Dust.NewDust(new Vector2(base.Center.X + 28f, position.Y + 24f), 1, 1, 6);
					}
				}
			}
			position -= netOffset;
		}
		bool flag23 = false;
		bool flag24 = false;
		if (velocity.X == 0f)
		{
			flag24 = true;
		}
		if (justHit)
		{
			flag24 = false;
		}
		if (Main.netMode != 1 && type == 198 && (double)life <= (double)lifeMax * 0.55)
		{
			Transform(199);
		}
		if (Main.netMode != 1 && type == 348 && (double)life <= (double)lifeMax * 0.55)
		{
			Transform(349);
		}
		int num154 = 60;
		if (type == 120)
		{
			num154 = 180;
			if (ai[3] == -120f)
			{
				velocity *= 0f;
				ai[3] = 0f;
				position += netOffset;
				SoundEngine.PlaySound(in SoundID.Item8, position);
				Vector2 vector9 = default(Vector2);
				((Vector2)(ref vector9))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num155 = oldPos[2].X + (float)width * 0.5f - vector9.X;
				float num156 = oldPos[2].Y + (float)height * 0.5f - vector9.Y;
				float num157 = (float)Math.Sqrt(num155 * num155 + num156 * num156);
				num157 = 2f / num157;
				num155 *= num157;
				num156 *= num157;
				for (int num159 = 0; num159 < 20; num159++)
				{
					int num160 = Dust.NewDust(position, width, height, 71, num155, num156, 200, default(Color), 2f);
					Main.dust[num160].noGravity = true;
					Main.dust[num160].velocity.X *= 2f;
				}
				for (int num161 = 0; num161 < 20; num161++)
				{
					int num162 = Dust.NewDust(oldPos[2], width, height, 71, 0f - num155, 0f - num156, 200, default(Color), 2f);
					Main.dust[num162].noGravity = true;
					Main.dust[num162].velocity.X *= 2f;
				}
				position -= netOffset;
			}
		}
		bool flag25 = false;
		bool flag26 = true;
		if (type == 343 || type == 47 || type == 67 || type == 109 || type == 110 || type == 111 || type == 120 || type == 163 || type == 164 || type == 239 || type == 168 || type == 199 || type == 206 || type == 214 || type == 215 || type == 216 || type == 217 || type == 218 || type == 219 || type == 220 || type == 226 || type == 243 || type == 251 || type == 257 || type == 258 || type == 290 || type == 291 || type == 292 || type == 293 || type == 305 || type == 306 || type == 307 || type == 308 || type == 309 || type == 348 || type == 349 || type == 350 || type == 351 || type == 379 || (type >= 430 && type <= 436) || type == 591 || type == 380 || type == 381 || type == 382 || type == 383 || type == 386 || type == 391 || (type >= 449 && type <= 452) || type == 466 || type == 464 || type == 166 || type == 469 || type == 468 || type == 471 || type == 470 || type == 480 || type == 481 || type == 482 || type == 411 || type == 424 || type == 409 || (type >= 494 && type <= 506) || type == 425 || type == 427 || type == 426 || type == 428 || type == 580 || type == 508 || type == 415 || type == 419 || type == 520 || (type >= 524 && type <= 527) || type == 528 || type == 529 || type == 530 || type == 532 || type == 582 || type == 624 || type == 631)
		{
			flag26 = false;
		}
		bool flag27 = false;
		int num163 = type;
		if (num163 == 425 || num163 == 471)
		{
			flag27 = true;
		}
		bool flag2 = true;
		switch (type)
		{
		case 110:
		case 111:
		case 206:
		case 214:
		case 215:
		case 216:
		case 291:
		case 292:
		case 293:
		case 350:
		case 379:
		case 380:
		case 381:
		case 382:
		case 409:
		case 411:
		case 424:
		case 426:
		case 466:
		case 498:
		case 499:
		case 500:
		case 501:
		case 502:
		case 503:
		case 504:
		case 505:
		case 506:
		case 520:
			if (ai[2] > 0f)
			{
				flag2 = false;
			}
			break;
		}
		if (!flag27 && flag2)
		{
			if (velocity.Y == 0f && ((velocity.X > 0f && direction < 0) || (velocity.X < 0f && direction > 0)))
			{
				flag25 = true;
			}
			if (position.X == oldPosition.X || ai[3] >= (float)num154 || flag25)
			{
				ai[3] += 1f;
			}
			else if ((double)Math.Abs(velocity.X) > 0.9 && ai[3] > 0f)
			{
				ai[3] -= 1f;
			}
			if (ai[3] > (float)(num154 * 10))
			{
				ai[3] = 0f;
			}
			if (justHit)
			{
				ai[3] = 0f;
			}
			if (ai[3] == (float)num154)
			{
				netUpdate = true;
			}
			hitbox = Main.player[target].Hitbox;
			if (((Rectangle)(ref hitbox)).Intersects(base.Hitbox))
			{
				ai[3] = 0f;
			}
		}
		if (type == 463 && Main.netMode != 1)
		{
			if (localAI[3] > 0f)
			{
				localAI[3] -= 1f;
			}
			if (justHit && localAI[3] <= 0f && Main.rand.Next(3) == 0)
			{
				localAI[3] = 30f;
				int num164 = Main.rand.Next(3, 6);
				int[] array = new int[num164];
				int num165 = 0;
				for (int num166 = 0; num166 < 255; num166++)
				{
					if (Main.player[num166].active && !Main.player[num166].dead && Collision.CanHitLine(position, width, height, Main.player[num166].position, Main.player[num166].width, Main.player[num166].height))
					{
						array[num165] = num166;
						num165++;
						if (num165 == num164)
						{
							break;
						}
					}
				}
				if (num165 > 1)
				{
					for (int num167 = 0; num167 < 100; num167++)
					{
						int num168 = Main.rand.Next(num165);
						int num170;
						for (num170 = num168; num170 == num168; num170 = Main.rand.Next(num165))
						{
						}
						int num171 = array[num168];
						array[num168] = array[num170];
						array[num170] = num171;
					}
				}
				Vector2 vector11 = default(Vector2);
				((Vector2)(ref vector11))._002Ector(-1f, -1f);
				for (int num172 = 0; num172 < num165; num172++)
				{
					Vector2 vector12 = Main.npc[array[num172]].Center - base.Center;
					((Vector2)(ref vector12)).Normalize();
					vector11 += vector12;
				}
				((Vector2)(ref vector11)).Normalize();
				Vector2 vector13 = default(Vector2);
				for (int num173 = 0; num173 < num164; num173++)
				{
					float num174 = Main.rand.Next(8, 13);
					((Vector2)(ref vector13))._002Ector((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
					((Vector2)(ref vector13)).Normalize();
					if (num165 > 0)
					{
						vector13 += vector11;
						((Vector2)(ref vector13)).Normalize();
					}
					vector13 *= num174;
					if (num165 > 0)
					{
						num165--;
						vector13 = Main.player[array[num165]].Center - base.Center;
						((Vector2)(ref vector13)).Normalize();
						vector13 *= num174;
					}
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, position.Y + (float)(width / 4), vector13.X, vector13.Y, 498, (int)((double)damage * 0.15), 1f, Main.myPlayer);
				}
			}
		}
		if (type == 460)
		{
			if (velocity.Y < 0f - gravity || velocity.Y > gravity)
			{
				knockBackResist = 0f;
			}
			else
			{
				knockBackResist = 0.25f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
			}
		}
		if (type == 469)
		{
			knockBackResist = 0.45f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
			if (ai[2] == 1f)
			{
				knockBackResist = 0f;
			}
			bool flag3 = false;
			int num175 = (int)base.Center.X / 16;
			int num176 = (int)base.Center.Y / 16;
			for (int num177 = num175 - 1; num177 <= num175 + 1; num177++)
			{
				for (int num178 = num176 - 1; num178 <= num176 + 1; num178++)
				{
					if (Main.tile[num177, num178] != null && Main.tile[num177, num178].wall > 0)
					{
						flag3 = true;
						break;
					}
				}
				if (flag3)
				{
					break;
				}
			}
			if (ai[2] == 0f && flag3)
			{
				if (velocity.Y == 0f)
				{
					flag = true;
					velocity.Y = -4.6f;
					velocity.X *= 1.3f;
				}
				else if (velocity.Y > 0f && !Main.player[target].dead)
				{
					ai[2] = 1f;
				}
			}
			if (flag3 && ai[2] == 1f && !Main.player[target].dead && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
			{
				Vector2 vector14 = Main.player[target].Center - base.Center;
				float num179 = ((Vector2)(ref vector14)).Length();
				((Vector2)(ref vector14)).Normalize();
				vector14 *= 4.5f + num179 / 300f;
				velocity = (velocity * 29f + vector14) / 30f;
				noGravity = true;
				ai[2] = 1f;
				return;
			}
			noGravity = false;
			ai[2] = 0f;
		}
		if (type == 462 && velocity.Y == 0f)
		{
			val = Main.player[target].Center - base.Center;
			if (((Vector2)(ref val)).Length() < 150f && Math.Abs(velocity.X) > 3f && ((velocity.X < 0f && base.Center.X > Main.player[target].Center.X) || (velocity.X > 0f && base.Center.X < Main.player[target].Center.X)))
			{
				flag = true;
				velocity.X *= 1.75f;
				velocity.Y -= 4.5f;
				if (base.Center.Y - Main.player[target].Center.Y > 20f)
				{
					velocity.Y -= 0.5f;
				}
				if (base.Center.Y - Main.player[target].Center.Y > 40f)
				{
					velocity.Y -= 1f;
				}
				if (base.Center.Y - Main.player[target].Center.Y > 80f)
				{
					velocity.Y -= 1.5f;
				}
				if (base.Center.Y - Main.player[target].Center.Y > 100f)
				{
					velocity.Y -= 1.5f;
				}
				if (Math.Abs(velocity.X) > 7f)
				{
					if (velocity.X < 0f)
					{
						velocity.X = -7f;
					}
					else
					{
						velocity.X = 7f;
					}
				}
			}
		}
		if (type == 624 && target < 255)
		{
			if (!Main.remixWorld && !Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
			{
				ai[3] = num154;
				directionY = -1;
				if (type == 624 && !AI_003_Gnomes_ShouldTurnToStone())
				{
					val = base.Center - Main.player[target].Center;
					if (((Vector2)(ref val)).Length() > 500f)
					{
						velocity.X *= 0.95f;
						if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
						{
							velocity.X = 0f;
						}
						return;
					}
				}
			}
			else if (Main.player[target].Center.Y > base.Center.Y - 128f)
			{
				ai[3] = 0f;
			}
		}
		if (ai[3] < (float)num154 && DespawnEncouragement_AIStyle3_Fighters_NotDiscouraged(type, position, this))
		{
			if (shimmerTransparency < 1f)
			{
				if ((type == 3 || type == 591 || type == 590 || type == 331 || type == 332 || type == 21 || (type >= 449 && type <= 452) || type == 31 || type == 294 || type == 295 || type == 296 || type == 77 || type == 110 || type == 132 || type == 167 || type == 161 || type == 162 || type == 186 || type == 187 || type == 188 || type == 189 || type == 197 || type == 200 || type == 201 || type == 202 || type == 203 || type == 223 || type == 291 || type == 292 || type == 293 || type == 320 || type == 321 || type == 319 || type == 481 || type == 632 || type == 635) && Main.rand.Next(1000) == 0)
				{
					SoundEngine.PlaySound(14, (int)position.X, (int)position.Y);
				}
				if ((type == 489 || type == 586) && Main.rand.Next(800) == 0)
				{
					SoundEngine.PlaySound(14, (int)position.X, (int)position.Y, type);
				}
				if ((type == 78 || type == 79 || type == 80 || type == 630) && Main.rand.Next(500) == 0)
				{
					SoundEngine.PlaySound(26, (int)position.X, (int)position.Y);
				}
				if (type == 159 && Main.rand.Next(500) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 7);
				}
				if (type == 162 && Main.rand.Next(500) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 6);
				}
				if (type == 181 && Main.rand.Next(500) == 0)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 8);
				}
				if (type >= 269 && type <= 280 && Main.rand.Next(1000) == 0)
				{
					SoundEngine.PlaySound(14, (int)position.X, (int)position.Y);
				}
			}
			TargetClosest();
			if (directionY > 0 && Main.player[target].Center.Y <= base.Bottom.Y)
			{
				directionY = -1;
			}
		}
		else if (!(ai[2] > 0f) || !DespawnEncouragement_AIStyle3_Fighters_CanBeBusyWithAction(type))
		{
			if (Main.IsItDay() && (double)(position.Y / 16f) < Main.worldSurface && type != 624 && type != 631)
			{
				EncourageDespawn(10);
			}
			if (velocity.X == 0f)
			{
				if (velocity.Y == 0f)
				{
					ai[0] += 1f;
					if (ai[0] >= 2f)
					{
						direction *= -1;
						spriteDirection = direction;
						ai[0] = 0f;
					}
				}
			}
			else
			{
				ai[0] = 0f;
			}
			if (direction == 0)
			{
				direction = 1;
			}
		}
		if (type == 159 || type == 349)
		{
			if (type == 159 && ((velocity.X > 0f && direction < 0) || (velocity.X < 0f && direction > 0)))
			{
				velocity.X *= 0.95f;
			}
			if (velocity.X < -6f || velocity.X > 6f)
			{
				if (velocity.Y == 0f)
				{
					velocity *= 0.8f;
				}
			}
			else if (velocity.X < 6f && direction == 1)
			{
				if (velocity.Y == 0f && velocity.X < 0f)
				{
					velocity.X *= 0.99f;
				}
				velocity.X += 0.07f;
				if (velocity.X > 6f)
				{
					velocity.X = 6f;
				}
			}
			else if (velocity.X > -6f && direction == -1)
			{
				if (velocity.Y == 0f && velocity.X > 0f)
				{
					velocity.X *= 0.99f;
				}
				velocity.X -= 0.07f;
				if (velocity.X < -6f)
				{
					velocity.X = -6f;
				}
			}
		}
		else if (type == 199)
		{
			if (velocity.X < -4f || velocity.X > 4f)
			{
				if (velocity.Y == 0f)
				{
					velocity *= 0.8f;
				}
			}
			else if (velocity.X < 4f && direction == 1)
			{
				if (velocity.Y == 0f && velocity.X < 0f)
				{
					velocity.X *= 0.8f;
				}
				velocity.X += 0.1f;
				if (velocity.X > 4f)
				{
					velocity.X = 4f;
				}
			}
			else if (velocity.X > -4f && direction == -1)
			{
				if (velocity.Y == 0f && velocity.X > 0f)
				{
					velocity.X *= 0.8f;
				}
				velocity.X -= 0.1f;
				if (velocity.X < -4f)
				{
					velocity.X = -4f;
				}
			}
		}
		else if (type == 120 || type == 166 || type == 213 || type == 258 || type == 528 || type == 529)
		{
			if (velocity.X < -3f || velocity.X > 3f)
			{
				if (velocity.Y == 0f)
				{
					velocity *= 0.8f;
				}
			}
			else if (velocity.X < 3f && direction == 1)
			{
				if (velocity.Y == 0f && velocity.X < 0f)
				{
					velocity.X *= 0.99f;
				}
				velocity.X += 0.07f;
				if (velocity.X > 3f)
				{
					velocity.X = 3f;
				}
			}
			else if (velocity.X > -3f && direction == -1)
			{
				if (velocity.Y == 0f && velocity.X > 0f)
				{
					velocity.X *= 0.99f;
				}
				velocity.X -= 0.07f;
				if (velocity.X < -3f)
				{
					velocity.X = -3f;
				}
			}
		}
		else if (type == 461 || type == 27 || type == 77 || type == 104 || type == 163 || type == 162 || type == 196 || type == 197 || type == 212 || type == 257 || type == 326 || type == 343 || type == 348 || type == 351 || (type >= 524 && type <= 527) || type == 530 || type == 236)
		{
			if (velocity.X < -2f || velocity.X > 2f)
			{
				if (velocity.Y == 0f)
				{
					velocity *= 0.8f;
				}
			}
			else if (velocity.X < 2f && direction == 1)
			{
				velocity.X += 0.07f;
				if (velocity.X > 2f)
				{
					velocity.X = 2f;
				}
			}
			else if (velocity.X > -2f && direction == -1)
			{
				velocity.X -= 0.07f;
				if (velocity.X < -2f)
				{
					velocity.X = -2f;
				}
			}
		}
		else if (type == 109)
		{
			if (velocity.X < -2f || velocity.X > 2f)
			{
				if (velocity.Y == 0f)
				{
					velocity *= 0.8f;
				}
			}
			else if (velocity.X < 2f && direction == 1)
			{
				velocity.X += 0.04f;
				if (velocity.X > 2f)
				{
					velocity.X = 2f;
				}
			}
			else if (velocity.X > -2f && direction == -1)
			{
				velocity.X -= 0.04f;
				if (velocity.X < -2f)
				{
					velocity.X = -2f;
				}
			}
		}
		else if (type == 21 || type == 26 || type == 31 || type == 294 || type == 295 || type == 296 || type == 47 || type == 73 || type == 140 || type == 164 || type == 239 || type == 167 || type == 168 || type == 185 || type == 198 || type == 201 || type == 202 || type == 203 || type == 217 || type == 218 || type == 219 || type == 226 || type == 181 || type == 254 || type == 338 || type == 339 || type == 340 || type == 342 || type == 385 || type == 389 || type == 462 || type == 463 || type == 466 || type == 464 || type == 469 || type == 470 || type == 480 || type == 482 || type == 425 || type == 429 || type == 586 || type == 631 || type == 635)
		{
			float num181 = 1.5f;
			if (type == 181 && Main.remixWorld)
			{
				num181 = 3.75f;
			}
			else if (type == 294)
			{
				num181 = 2f;
			}
			else if (type == 295)
			{
				num181 = 1.75f;
			}
			else if (type == 296)
			{
				num181 = 1.25f;
			}
			else if (type == 201)
			{
				num181 = 1.1f;
			}
			else if (type == 202)
			{
				num181 = 0.9f;
			}
			else if (type == 203)
			{
				num181 = 1.2f;
			}
			else if (type == 338)
			{
				num181 = 1.75f;
			}
			else if (type == 339)
			{
				num181 = 1.25f;
			}
			else if (type == 340)
			{
				num181 = 2f;
			}
			else if (type == 385)
			{
				num181 = 1.8f;
			}
			else if (type == 389)
			{
				num181 = 2.25f;
			}
			else if (type == 462)
			{
				num181 = 4f;
			}
			else if (type == 463)
			{
				num181 = 0.75f;
			}
			else if (type == 466)
			{
				num181 = 3.75f;
			}
			else if (type == 469)
			{
				num181 = 3.25f;
			}
			else if (type == 480)
			{
				num181 = 1.5f + (1f - (float)life / (float)lifeMax) * 2f;
			}
			else if (type == 425)
			{
				num181 = 6f;
			}
			else if (type == 429)
			{
				num181 = 4f;
			}
			else if (type == 631)
			{
				num181 = 0.9f;
			}
			else if (type == 586)
			{
				num181 = 1.5f + (1f - (float)life / (float)lifeMax) * 3.5f;
			}
			if (type == 21 || type == 201 || type == 202 || type == 203 || type == 342 || type == 635)
			{
				num181 *= 1f + (1f - scale);
			}
			if (velocity.X < 0f - num181 || velocity.X > num181)
			{
				if (velocity.Y == 0f)
				{
					velocity *= 0.8f;
				}
			}
			else if (velocity.X < num181 && direction == 1)
			{
				if (type == 466 && velocity.X < -2f)
				{
					velocity.X *= 0.9f;
				}
				if (type == 586 && velocity.Y == 0f && velocity.X < -1f)
				{
					velocity.X *= 0.9f;
				}
				velocity.X += 0.07f;
				if (velocity.X > num181)
				{
					velocity.X = num181;
				}
			}
			else if (velocity.X > 0f - num181 && direction == -1)
			{
				if (type == 466 && velocity.X > 2f)
				{
					velocity.X *= 0.9f;
				}
				if (type == 586 && velocity.Y == 0f && velocity.X > 1f)
				{
					velocity.X *= 0.9f;
				}
				velocity.X -= 0.07f;
				if (velocity.X < 0f - num181)
				{
					velocity.X = 0f - num181;
				}
			}
			if (velocity.Y == 0f && type == 462 && ((direction > 0 && velocity.X < 0f) || (direction < 0 && velocity.X > 0f)))
			{
				velocity.X *= 0.9f;
			}
		}
		else if (type >= 269 && type <= 280)
		{
			float num182 = 1.5f;
			if (type == 269)
			{
				num182 = 2f;
			}
			if (type == 270)
			{
				num182 = 1f;
			}
			if (type == 271)
			{
				num182 = 1.5f;
			}
			if (type == 272)
			{
				num182 = 3f;
			}
			if (type == 273)
			{
				num182 = 1.25f;
			}
			if (type == 274)
			{
				num182 = 3f;
			}
			if (type == 275)
			{
				num182 = 3.25f;
			}
			if (type == 276)
			{
				num182 = 2f;
			}
			if (type == 277)
			{
				num182 = 2.75f;
			}
			if (type == 278)
			{
				num182 = 1.8f;
			}
			if (type == 279)
			{
				num182 = 1.3f;
			}
			if (type == 280)
			{
				num182 = 2.5f;
			}
			num182 *= 1f + (1f - scale);
			if (velocity.X < 0f - num182 || velocity.X > num182)
			{
				if (velocity.Y == 0f)
				{
					velocity *= 0.8f;
				}
			}
			else if (velocity.X < num182 && direction == 1)
			{
				velocity.X += 0.07f;
				if (velocity.X > num182)
				{
					velocity.X = num182;
				}
			}
			else if (velocity.X > 0f - num182 && direction == -1)
			{
				velocity.X -= 0.07f;
				if (velocity.X < 0f - num182)
				{
					velocity.X = 0f - num182;
				}
			}
		}
		else if (type >= 305 && type <= 314)
		{
			float num183 = 1.5f;
			if (type == 305 || type == 310)
			{
				num183 = 2f;
			}
			if (type == 306 || type == 311)
			{
				num183 = 1.25f;
			}
			if (type == 307 || type == 312)
			{
				num183 = 2.25f;
			}
			if (type == 308 || type == 313)
			{
				num183 = 1.5f;
			}
			if (type == 309 || type == 314)
			{
				num183 = 1f;
			}
			if (type < 310)
			{
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.85f;
					if ((double)velocity.X > -0.3 && (double)velocity.X < 0.3)
					{
						flag = true;
						velocity.Y = -7f;
						velocity.X = num183 * (float)direction;
					}
				}
				else if (spriteDirection == direction)
				{
					velocity.X = (velocity.X * 10f + num183 * (float)direction) / 11f;
				}
			}
			else if (velocity.X < 0f - num183 || velocity.X > num183)
			{
				if (velocity.Y == 0f)
				{
					velocity *= 0.8f;
				}
			}
			else if (velocity.X < num183 && direction == 1)
			{
				velocity.X += 0.07f;
				if (velocity.X > num183)
				{
					velocity.X = num183;
				}
			}
			else if (velocity.X > 0f - num183 && direction == -1)
			{
				velocity.X -= 0.07f;
				if (velocity.X < 0f - num183)
				{
					velocity.X = 0f - num183;
				}
			}
		}
		else if (type == 67 || type == 220 || type == 428)
		{
			if (velocity.X < -0.5f || velocity.X > 0.5f)
			{
				if (velocity.Y == 0f)
				{
					velocity *= 0.7f;
				}
			}
			else if (velocity.X < 0.5f && direction == 1)
			{
				velocity.X += 0.03f;
				if (velocity.X > 0.5f)
				{
					velocity.X = 0.5f;
				}
			}
			else if (velocity.X > -0.5f && direction == -1)
			{
				velocity.X -= 0.03f;
				if (velocity.X < -0.5f)
				{
					velocity.X = -0.5f;
				}
			}
		}
		else if (type == 78 || type == 79 || type == 80 || type == 630)
		{
			float num184 = 1f;
			float num185 = 0.05f;
			if (life < lifeMax / 2)
			{
				num184 = 2f;
				num185 = 0.1f;
			}
			if (type == 79 || type == 630)
			{
				num184 *= 1.5f;
			}
			if (velocity.X < 0f - num184 || velocity.X > num184)
			{
				if (velocity.Y == 0f)
				{
					velocity *= 0.7f;
				}
			}
			else if (velocity.X < num184 && direction == 1)
			{
				velocity.X += num185;
				if (velocity.X > num184)
				{
					velocity.X = num184;
				}
			}
			else if (velocity.X > 0f - num184 && direction == -1)
			{
				velocity.X -= num185;
				if (velocity.X < 0f - num184)
				{
					velocity.X = 0f - num184;
				}
			}
		}
		else if (type == 287)
		{
			float num186 = 5f;
			float num187 = 0.2f;
			if (velocity.X < 0f - num186 || velocity.X > num186)
			{
				if (velocity.Y == 0f)
				{
					velocity *= 0.7f;
				}
			}
			else if (velocity.X < num186 && direction == 1)
			{
				velocity.X += num187;
				if (velocity.X > num186)
				{
					velocity.X = num186;
				}
			}
			else if (velocity.X > 0f - num186 && direction == -1)
			{
				velocity.X -= num187;
				if (velocity.X < 0f - num186)
				{
					velocity.X = 0f - num186;
				}
			}
		}
		else if (type == 243)
		{
			float num188 = 1f;
			float num189 = 0.07f;
			num188 += (1f - (float)life / (float)lifeMax) * 1.5f;
			num189 += (1f - (float)life / (float)lifeMax) * 0.15f;
			if (velocity.X < 0f - num188 || velocity.X > num188)
			{
				if (velocity.Y == 0f)
				{
					velocity *= 0.7f;
				}
			}
			else if (velocity.X < num188 && direction == 1)
			{
				velocity.X += num189;
				if (velocity.X > num188)
				{
					velocity.X = num188;
				}
			}
			else if (velocity.X > 0f - num188 && direction == -1)
			{
				velocity.X -= num189;
				if (velocity.X < 0f - num188)
				{
					velocity.X = 0f - num188;
				}
			}
		}
		else if (type == 251)
		{
			float num190 = 1f;
			float num192 = 0.08f;
			num190 += (1f - (float)life / (float)lifeMax) * 2f;
			num192 += (1f - (float)life / (float)lifeMax) * 0.2f;
			if (velocity.X < 0f - num190 || velocity.X > num190)
			{
				if (velocity.Y == 0f)
				{
					velocity *= 0.7f;
				}
			}
			else if (velocity.X < num190 && direction == 1)
			{
				velocity.X += num192;
				if (velocity.X > num190)
				{
					velocity.X = num190;
				}
			}
			else if (velocity.X > 0f - num190 && direction == -1)
			{
				velocity.X -= num192;
				if (velocity.X < 0f - num190)
				{
					velocity.X = 0f - num190;
				}
			}
		}
		else if (type == 386)
		{
			if (ai[2] > 0f)
			{
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.8f;
				}
			}
			else
			{
				float num193 = 0.15f;
				float num194 = 1.5f;
				if (velocity.X < 0f - num194 || velocity.X > num194)
				{
					if (velocity.Y == 0f)
					{
						velocity *= 0.7f;
					}
				}
				else if (velocity.X < num194 && direction == 1)
				{
					velocity.X += num193;
					if (velocity.X > num194)
					{
						velocity.X = num194;
					}
				}
				else if (velocity.X > 0f - num194 && direction == -1)
				{
					velocity.X -= num193;
					if (velocity.X < 0f - num194)
					{
						velocity.X = 0f - num194;
					}
				}
			}
		}
		else if (type == 460)
		{
			float num195 = 3f;
			float num196 = 0.1f;
			if (Math.Abs(velocity.X) > 2f)
			{
				num196 *= 0.8f;
			}
			if ((double)Math.Abs(velocity.X) > 2.5)
			{
				num196 *= 0.8f;
			}
			if (Math.Abs(velocity.X) > 3f)
			{
				num196 *= 0.8f;
			}
			if ((double)Math.Abs(velocity.X) > 3.5)
			{
				num196 *= 0.8f;
			}
			if (Math.Abs(velocity.X) > 4f)
			{
				num196 *= 0.8f;
			}
			if ((double)Math.Abs(velocity.X) > 4.5)
			{
				num196 *= 0.8f;
			}
			if (Math.Abs(velocity.X) > 5f)
			{
				num196 *= 0.8f;
			}
			if ((double)Math.Abs(velocity.X) > 5.5)
			{
				num196 *= 0.8f;
			}
			num195 += (1f - (float)life / (float)lifeMax) * 3f;
			if (velocity.X < 0f - num195 || velocity.X > num195)
			{
				if (velocity.Y == 0f)
				{
					velocity *= 0.7f;
				}
			}
			else if (velocity.X < num195 && direction == 1)
			{
				if (velocity.X < 0f)
				{
					velocity.X *= 0.93f;
				}
				velocity.X += num196;
				if (velocity.X > num195)
				{
					velocity.X = num195;
				}
			}
			else if (velocity.X > 0f - num195 && direction == -1)
			{
				if (velocity.X > 0f)
				{
					velocity.X *= 0.93f;
				}
				velocity.X -= num196;
				if (velocity.X < 0f - num195)
				{
					velocity.X = 0f - num195;
				}
			}
		}
		else if (type == 508 || type == 580 || type == 582)
		{
			float num197 = 2.5f;
			float num198 = 10f;
			float num199 = Math.Abs(velocity.X);
			if (type == 582)
			{
				num197 = 2.25f;
				num198 = 7f;
				if (num199 > 2.5f)
				{
					num197 = 3f;
					num198 += 75f;
				}
				else if (num199 > 2f)
				{
					num197 = 2.75f;
					num198 += 55f;
				}
			}
			else if (num199 > 2.75f)
			{
				num197 = 3.5f;
				num198 += 80f;
			}
			else if ((double)num199 > 2.25)
			{
				num197 = 3f;
				num198 += 60f;
			}
			if ((double)Math.Abs(velocity.Y) < 0.5)
			{
				if (velocity.X > 0f && direction < 0)
				{
					velocity *= 0.95f;
				}
				if (velocity.X < 0f && direction > 0)
				{
					velocity *= 0.95f;
				}
			}
			if (Math.Abs(velocity.Y) > gravity)
			{
				float num200 = 3f;
				if (type == 582)
				{
					num200 = 2f;
				}
				num198 *= num200;
			}
			if (velocity.X <= 0f && direction < 0)
			{
				velocity.X = (velocity.X * num198 - num197) / (num198 + 1f);
			}
			else if (velocity.X >= 0f && direction > 0)
			{
				velocity.X = (velocity.X * num198 + num197) / (num198 + 1f);
			}
			else if (Math.Abs(base.Center.X - Main.player[target].Center.X) > 20f && Math.Abs(velocity.Y) <= gravity)
			{
				velocity.X *= 0.99f;
				velocity.X += (float)direction * 0.025f;
			}
		}
		else if (type == 391 || type == 427 || type == 415 || type == 419 || type == 518 || type == 532)
		{
			float num201 = 5f;
			float num3 = 0.25f;
			float num4 = 0.7f;
			if (type == 427)
			{
				num201 = 6f;
				num3 = 0.2f;
				num4 = 0.8f;
			}
			else if (type == 415)
			{
				num201 = 4f;
				num3 = 0.1f;
				num4 = 0.95f;
			}
			else if (type == 419)
			{
				num201 = 6f;
				num3 = 0.15f;
				num4 = 0.85f;
			}
			else if (type == 518)
			{
				num201 = 5f;
				num3 = 0.1f;
				num4 = 0.95f;
			}
			else if (type == 532)
			{
				num201 = 5f;
				num3 = 0.15f;
				num4 = 0.98f;
			}
			if (velocity.X < 0f - num201 || velocity.X > num201)
			{
				if (velocity.Y == 0f)
				{
					velocity *= num4;
				}
			}
			else if (velocity.X < num201 && direction == 1)
			{
				velocity.X += num3;
				if (velocity.X > num201)
				{
					velocity.X = num201;
				}
			}
			else if (velocity.X > 0f - num201 && direction == -1)
			{
				velocity.X -= num3;
				if (velocity.X < 0f - num201)
				{
					velocity.X = 0f - num201;
				}
			}
		}
		else if ((type >= 430 && type <= 436) || type == 494 || type == 495 || type == 591)
		{
			if (ai[2] == 0f)
			{
				damage = defDamage;
				float num5 = 1f;
				num5 *= 1f + (1f - scale);
				if (velocity.X < 0f - num5 || velocity.X > num5)
				{
					if (velocity.Y == 0f)
					{
						velocity *= 0.8f;
					}
				}
				else if (velocity.X < num5 && direction == 1)
				{
					velocity.X += 0.07f;
					if (velocity.X > num5)
					{
						velocity.X = num5;
					}
				}
				else if (velocity.X > 0f - num5 && direction == -1)
				{
					velocity.X -= 0.07f;
					if (velocity.X < 0f - num5)
					{
						velocity.X = 0f - num5;
					}
				}
				if (velocity.Y == 0f && (!Main.IsItDay() || (double)position.Y > Main.worldSurface * 16.0) && !Main.player[target].dead)
				{
					Vector2 vector15 = base.Center - Main.player[target].Center;
					int num6 = 50;
					if (type >= 494 && type <= 495)
					{
						num6 = 42;
					}
					if (((Vector2)(ref vector15)).Length() < (float)num6 && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						velocity.X *= 0.7f;
						ai[2] = 1f;
					}
				}
			}
			else
			{
				damage = (int)((double)defDamage * 1.5);
				ai[3] = 1f;
				velocity.X *= 0.9f;
				if ((double)Math.Abs(velocity.X) < 0.1)
				{
					velocity.X = 0f;
				}
				ai[2] += 1f;
				if (ai[2] >= 20f || velocity.Y != 0f || (Main.IsItDay() && (double)position.Y < Main.worldSurface * 16.0))
				{
					ai[2] = 0f;
				}
			}
		}
		else if (type != 110 && type != 111 && type != 206 && type != 214 && type != 215 && type != 216 && type != 290 && type != 291 && type != 292 && type != 293 && type != 350 && type != 379 && type != 380 && type != 381 && type != 382 && (type < 449 || type > 452) && type != 468 && type != 481 && type != 411 && type != 409 && (type < 498 || type > 506) && type != 424 && type != 426 && type != 520)
		{
			float num7 = 1f;
			if (type == 624)
			{
				num7 = 2.5f;
			}
			if (type == 186)
			{
				num7 = 1.1f;
			}
			if (type == 187)
			{
				num7 = 0.9f;
			}
			if (type == 188)
			{
				num7 = 1.2f;
			}
			if (type == 189)
			{
				num7 = 0.8f;
			}
			if (type == 132)
			{
				num7 = 0.95f;
			}
			if (type == 200)
			{
				num7 = 0.87f;
			}
			if (type == 223)
			{
				num7 = 1.05f;
			}
			if (type == 632)
			{
				num7 = 0.8f;
			}
			if (type == 489)
			{
				val = Main.player[target].Center - base.Center;
				float num8 = ((Vector2)(ref val)).Length();
				num8 *= 0.0025f;
				if ((double)num8 > 1.5)
				{
					num8 = 1.5f;
				}
				num7 = ((!Main.expertMode) ? (2.5f - num8) : (3f - num8));
				num7 *= 0.8f;
			}
			if (type == 489 || type == 3 || type == 132 || type == 186 || type == 187 || type == 188 || type == 189 || type == 200 || type == 223 || type == 331 || type == 332)
			{
				num7 *= 1f + (1f - scale);
			}
			if (velocity.X < 0f - num7 || velocity.X > num7)
			{
				if (velocity.Y == 0f)
				{
					velocity *= 0.8f;
				}
			}
			else if (velocity.X < num7 && direction == 1)
			{
				velocity.X += 0.07f;
				if (velocity.X > num7)
				{
					velocity.X = num7;
				}
			}
			else if (velocity.X > 0f - num7 && direction == -1)
			{
				velocity.X -= 0.07f;
				if (velocity.X < 0f - num7)
				{
					velocity.X = 0f - num7;
				}
			}
		}
		if (type >= 277 && type <= 280)
		{
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.2f, 0.1f, 0f);
		}
		else if (type == 520)
		{
			Lighting.AddLight(base.Top + new Vector2(0f, 20f), 0.3f, 0.3f, 0.7f);
		}
		else if (type == 525)
		{
			Vector3 rgb = new Vector3(0.7f, 1f, 0.2f) * 0.5f;
			Lighting.AddLight(base.Top + new Vector2(0f, 15f), rgb);
		}
		else if (type == 526)
		{
			Vector3 rgb2 = new Vector3(1f, 1f, 0.5f) * 0.4f;
			Lighting.AddLight(base.Top + new Vector2(0f, 15f), rgb2);
		}
		else if (type == 527)
		{
			Vector3 rgb3 = new Vector3(0.6f, 0.3f, 1f) * 0.4f;
			Lighting.AddLight(base.Top + new Vector2(0f, 15f), rgb3);
		}
		else if (type == 415)
		{
			hide = false;
			for (int num9 = 0; num9 < 200; num9++)
			{
				if (Main.npc[num9].active && Main.npc[num9].type == 416 && Main.npc[num9].ai[0] == (float)whoAmI)
				{
					hide = true;
					break;
				}
			}
		}
		else if (type == 258)
		{
			if (velocity.Y != 0f)
			{
				TargetClosest();
				spriteDirection = direction;
				if (Main.player[target].Center.X < position.X && velocity.X > 0f)
				{
					velocity.X *= 0.95f;
				}
				else if (Main.player[target].Center.X > position.X + (float)width && velocity.X < 0f)
				{
					velocity.X *= 0.95f;
				}
				if (Main.player[target].Center.X < position.X && velocity.X > -5f)
				{
					velocity.X -= 0.1f;
				}
				else if (Main.player[target].Center.X > position.X + (float)width && velocity.X < 5f)
				{
					velocity.X += 0.1f;
				}
			}
			else if (Main.player[target].Center.Y + 50f < position.Y && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
			{
				flag = true;
				velocity.Y = -7f;
			}
		}
		else if (type == 425)
		{
			if (localAI[3] == 0f)
			{
				localAI[3] = 1f;
				ai[3] = -120f;
			}
			if (velocity.Y == 0f)
			{
				ai[2] = 0f;
			}
			if (velocity.Y != 0f && ai[2] == 1f)
			{
				TargetClosest();
				spriteDirection = -direction;
				if (Collision.CanHit(base.Center, 0, 0, Main.player[target].Center, 0, 0))
				{
					float num10 = 0.3f;
					float num11 = 8f;
					float num12 = 0.3f;
					float num14 = 7f;
					float num15 = Main.player[target].Center.X - (float)(direction * 300) - base.Center.X;
					float num16 = Main.player[target].Bottom.Y - base.Bottom.Y;
					if (num15 < 0f && velocity.X > 0f)
					{
						velocity.X *= 0.9f;
					}
					else if (num15 > 0f && velocity.X < 0f)
					{
						velocity.X *= 0.9f;
					}
					if (num15 < 0f && velocity.X > 0f - num14)
					{
						velocity.X -= num12;
					}
					else if (num15 > 0f && velocity.X < num14)
					{
						velocity.X += num12;
					}
					if (velocity.X > num14)
					{
						velocity.X = num14;
					}
					if (velocity.X < 0f - num14)
					{
						velocity.X = 0f - num14;
					}
					if (num16 < -20f && velocity.Y > 0f)
					{
						velocity.Y *= 0.8f;
					}
					else if (num16 > 20f && velocity.Y < 0f)
					{
						velocity.Y *= 0.8f;
					}
					if (num16 < -20f && velocity.Y > 0f - num11)
					{
						velocity.Y -= num10;
					}
					else if (num16 > 20f && velocity.Y < num11)
					{
						velocity.Y += num10;
					}
				}
				if (Main.rand.Next(3) == 0)
				{
					position += netOffset;
					Vector2 vector16 = base.Center + new Vector2((float)(direction * -14), -8f) - Vector2.One * 4f;
					Vector2 vector17 = new Vector2((float)(direction * -6), 12f) * 0.2f + Utils.RandomVector2(Main.rand, -1f, 1f) * 0.1f;
					Dust obj7 = Main.dust[Dust.NewDust(vector16, 8, 8, 229, vector17.X, vector17.Y, 100, Color.Transparent, 1f + Main.rand.NextFloat() * 0.5f)];
					obj7.noGravity = true;
					obj7.velocity = vector17;
					obj7.customData = this;
					position -= netOffset;
				}
				for (int num17 = 0; num17 < 200; num17++)
				{
					if (num17 != whoAmI && Main.npc[num17].active && Main.npc[num17].type == type && Math.Abs(position.X - Main.npc[num17].position.X) + Math.Abs(position.Y - Main.npc[num17].position.Y) < (float)width)
					{
						if (position.X < Main.npc[num17].position.X)
						{
							velocity.X -= 0.15f;
						}
						else
						{
							velocity.X += 0.15f;
						}
						if (position.Y < Main.npc[num17].position.Y)
						{
							velocity.Y -= 0.15f;
						}
						else
						{
							velocity.Y += 0.15f;
						}
					}
				}
			}
			else if (Main.player[target].Center.Y + 100f < position.Y && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
			{
				flag = true;
				velocity.Y = -5f;
				ai[2] = 1f;
			}
			if (ai[3] < 0f)
			{
				ai[3] += 1f;
			}
			int num18 = 30;
			int num19 = 10;
			int num20 = 180;
			if (ai[3] >= 0f && ai[3] <= (float)num18)
			{
				Vector2 vector18 = DirectionTo(Main.player[target].Center);
				bool flag4 = Math.Abs(vector18.Y) <= Math.Abs(vector18.X);
				bool flag5 = Distance(Main.player[target].Center) < 800f && flag4 && Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0);
				ai[3] = MathHelper.Clamp(ai[3] + (float)flag5.ToDirectionInt(), 0f, (float)num18);
			}
			if (ai[3] >= (float)(num18 + 1) && (ai[3] += 1f) >= (float)(num18 + num19))
			{
				ai[3] = num18 - num20;
				netUpdate = true;
			}
			if (Main.netMode != 1 && ai[3] == (float)num18)
			{
				ai[3] += 1f;
				netUpdate = true;
				int num21 = 20;
				Vector2 chaserPosition = base.Center + new Vector2((float)(direction * 30), 2f);
				Vector2 vector19 = DirectionTo(Main.player[target].Center) * (float)num21;
				if (vector19.HasNaNs())
				{
					((Vector2)(ref vector19))._002Ector((float)(direction * num21), 0f);
				}
				int num22 = 2;
				Utils.ChaseResults chaseResults = Utils.GetChaseResults(chaserPosition, num21, Main.player[target].Center, Main.player[target].velocity * 0.5f / (float)num22);
				if (chaseResults.InterceptionHappens)
				{
					Vector2 vector20 = chaseResults.ChaserVelocity / (float)num22;
					vector19.X = vector20.X;
					vector19.Y = vector20.Y;
				}
				int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(75f, 50f);
				for (int num23 = 0; num23 < 4; num23++)
				{
					Vector2 vector22 = vector19 + Utils.RandomVector2(Main.rand, -0.8f, 0.8f) * (float)((num23 != 0) ? 1 : 0);
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), chaserPosition.X, chaserPosition.Y, vector22.X, vector22.Y, 577, attackDamage_ForProjectiles, 1f, Main.myPlayer);
				}
			}
		}
		else if (type == 427)
		{
			if (velocity.Y == 0f)
			{
				ai[2] = 0f;
				rotation = 0f;
			}
			else
			{
				rotation = velocity.X * 0.1f;
			}
			if (velocity.Y != 0f && ai[2] == 1f)
			{
				TargetClosest();
				spriteDirection = -direction;
				if (Collision.CanHit(base.Center, 0, 0, Main.player[target].Center, 0, 0))
				{
					float num25 = Main.player[target].Center.X - base.Center.X;
					float num26 = Main.player[target].Center.Y - base.Center.Y;
					if (num25 < 0f && velocity.X > 0f)
					{
						velocity.X *= 0.98f;
					}
					else if (num25 > 0f && velocity.X < 0f)
					{
						velocity.X *= 0.98f;
					}
					if (num25 < -20f && velocity.X > -6f)
					{
						velocity.X -= 0.015f;
					}
					else if (num25 > 20f && velocity.X < 6f)
					{
						velocity.X += 0.015f;
					}
					if (velocity.X > 6f)
					{
						velocity.X = 6f;
					}
					if (velocity.X < -6f)
					{
						velocity.X = -6f;
					}
					if (num26 < -20f && velocity.Y > 0f)
					{
						velocity.Y *= 0.98f;
					}
					else if (num26 > 20f && velocity.Y < 0f)
					{
						velocity.Y *= 0.98f;
					}
					if (num26 < -20f && velocity.Y > -6f)
					{
						velocity.Y -= 0.15f;
					}
					else if (num26 > 20f && velocity.Y < 6f)
					{
						velocity.Y += 0.15f;
					}
				}
				for (int num27 = 0; num27 < 200; num27++)
				{
					if (num27 != whoAmI && Main.npc[num27].active && Main.npc[num27].type == type && Math.Abs(position.X - Main.npc[num27].position.X) + Math.Abs(position.Y - Main.npc[num27].position.Y) < (float)width)
					{
						if (position.X < Main.npc[num27].position.X)
						{
							velocity.X -= 0.05f;
						}
						else
						{
							velocity.X += 0.05f;
						}
						if (position.Y < Main.npc[num27].position.Y)
						{
							velocity.Y -= 0.05f;
						}
						else
						{
							velocity.Y += 0.05f;
						}
					}
				}
			}
			else if (Main.player[target].Center.Y + 100f < position.Y && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
			{
				flag = true;
				velocity.Y = -5f;
				ai[2] = 1f;
			}
		}
		else if (type == 426)
		{
			float num28 = 6f;
			float num29 = 0.2f;
			float num30 = 6f;
			if (ai[1] > 0f && velocity.Y > 0f)
			{
				velocity.Y *= 0.85f;
				if (velocity.Y == 0f)
				{
					velocity.Y = -0.4f;
				}
			}
			if (velocity.Y != 0f)
			{
				TargetClosest();
				spriteDirection = direction;
				if (Collision.CanHit(base.Center, 0, 0, Main.player[target].Center, 0, 0))
				{
					float num31 = Main.player[target].Center.X - (float)(direction * 300) - base.Center.X;
					if (num31 < 40f && velocity.X > 0f)
					{
						velocity.X *= 0.98f;
					}
					else if (num31 > 40f && velocity.X < 0f)
					{
						velocity.X *= 0.98f;
					}
					if (num31 < 40f && velocity.X > 0f - num28)
					{
						velocity.X -= num29;
					}
					else if (num31 > 40f && velocity.X < num28)
					{
						velocity.X += num29;
					}
					if (velocity.X > num28)
					{
						velocity.X = num28;
					}
					if (velocity.X < 0f - num28)
					{
						velocity.X = 0f - num28;
					}
				}
			}
			else if (Main.player[target].Center.Y + 100f < position.Y && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
			{
				flag = true;
				velocity.Y = 0f - num30;
			}
			for (int num32 = 0; num32 < 200; num32++)
			{
				if (num32 != whoAmI && Main.npc[num32].active && Main.npc[num32].type == type && Math.Abs(position.X - Main.npc[num32].position.X) + Math.Abs(position.Y - Main.npc[num32].position.Y) < (float)width)
				{
					if (position.X < Main.npc[num32].position.X)
					{
						velocity.X -= 0.1f;
					}
					else
					{
						velocity.X += 0.1f;
					}
					if (position.Y < Main.npc[num32].position.Y)
					{
						velocity.Y -= 0.1f;
					}
					else
					{
						velocity.Y += 0.1f;
					}
				}
			}
			if (Main.rand.Next(6) == 0 && ai[1] <= 20f)
			{
				position += netOffset;
				Dust obj8 = Main.dust[Dust.NewDust(base.Center + new Vector2((float)((spriteDirection == 1) ? 8 : (-20)), -20f), 8, 8, 229, velocity.X, velocity.Y, 100)];
				obj8.velocity = obj8.velocity / 4f + velocity / 2f;
				obj8.scale = 0.6f;
				obj8.noLight = true;
				position -= netOffset;
			}
			if (ai[1] >= 57f)
			{
				position += netOffset;
				int num33 = Utils.SelectRandom<int>(Main.rand, 161, 229);
				Dust obj9 = Main.dust[Dust.NewDust(base.Center + new Vector2((float)((spriteDirection == 1) ? 8 : (-20)), -20f), 8, 8, num33, velocity.X, velocity.Y, 100)];
				obj9.velocity = obj9.velocity / 4f + DirectionTo(Main.player[target].Top);
				obj9.scale = 1.2f;
				obj9.noLight = true;
				position -= netOffset;
			}
			if (Main.rand.Next(6) == 0)
			{
				position += netOffset;
				Dust dust5 = Main.dust[Dust.NewDust(base.Center, 2, 2, 229)];
				dust5.position = base.Center + new Vector2((float)((spriteDirection == 1) ? 26 : (-26)), 24f);
				dust5.velocity.X = 0f;
				if (dust5.velocity.Y < 0f)
				{
					dust5.velocity.Y = 0f;
				}
				dust5.noGravity = true;
				dust5.scale = 1f;
				dust5.noLight = true;
				position -= netOffset;
			}
		}
		else if (type == 185)
		{
			if (velocity.Y == 0f)
			{
				rotation = 0f;
				localAI[0] = 0f;
			}
			else if (localAI[0] == 1f)
			{
				rotation += velocity.X * 0.05f;
			}
		}
		else if (type == 428)
		{
			if (velocity.Y == 0f)
			{
				rotation = 0f;
			}
			else
			{
				rotation += velocity.X * 0.08f;
			}
		}
		if (type == 159 && Main.netMode != 1)
		{
			Vector2 vector23 = default(Vector2);
			((Vector2)(ref vector23))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num204 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector23.X;
			float num35 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector23.Y;
			if ((float)Math.Sqrt(num204 * num204 + num35 * num35) > 300f)
			{
				Transform(158);
			}
		}
		if (Main.netMode != 1)
		{
			if (Main.expertMode && target >= 0 && (type == 163 || type == 238 || type == 236 || type == 237) && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
			{
				localAI[0] += 1f;
				if (justHit)
				{
					localAI[0] -= Main.rand.Next(20, 60);
					if (localAI[0] < 0f)
					{
						localAI[0] = 0f;
					}
				}
				if (localAI[0] > (float)Main.rand.Next(180, 900))
				{
					localAI[0] = 0f;
					Vector2 vector24 = Main.player[target].Center - base.Center;
					((Vector2)(ref vector24)).Normalize();
					vector24 *= 8f;
					int attackDamage_ForProjectiles2 = GetAttackDamage_ForProjectiles(18f, 18f);
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, vector24.X, vector24.Y, 472, attackDamage_ForProjectiles2, 0f, Main.myPlayer);
				}
			}
			if (velocity.Y == 0f)
			{
				int num36 = -1;
				switch (type)
				{
				case 164:
					num36 = 165;
					break;
				case 236:
					num36 = 237;
					break;
				case 163:
					num36 = 238;
					break;
				case 239:
					num36 = 240;
					break;
				case 530:
					num36 = 531;
					break;
				}
				if (num36 != -1 && NPCCanStickToWalls())
				{
					Transform(num36);
				}
			}
		}
		if (type == 243)
		{
			if (justHit && Main.rand.Next(3) == 0)
			{
				ai[2] -= Main.rand.Next(30);
			}
			if (ai[2] < 0f)
			{
				ai[2] = 0f;
			}
			if (confused)
			{
				ai[2] = 0f;
			}
			ai[2] += 1f;
			float num37 = Main.rand.Next(30, 900);
			num37 *= (float)life / (float)lifeMax;
			num37 += 30f;
			if (Main.netMode != 1 && ai[2] >= num37 && velocity.Y == 0f && !Main.player[target].dead && !Main.player[target].frozen && ((direction > 0 && base.Center.X < Main.player[target].Center.X) || (direction < 0 && base.Center.X > Main.player[target].Center.X)) && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
			{
				Vector2 vector25 = default(Vector2);
				((Vector2)(ref vector25))._002Ector(position.X + (float)width * 0.5f, position.Y + 20f);
				vector25.X += 10 * direction;
				float num38 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector25.X;
				float num39 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector25.Y;
				num38 += (float)Main.rand.Next(-40, 41);
				num39 += (float)Main.rand.Next(-40, 41);
				float num40 = (float)Math.Sqrt(num38 * num38 + num39 * num39);
				netUpdate = true;
				num40 = 15f / num40;
				num38 *= num40;
				num39 *= num40;
				int num41 = 32;
				int num42 = 257;
				vector25.X += num38 * 3f;
				vector25.Y += num39 * 3f;
				Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector25.X, vector25.Y, num38, num39, num42, num41, 0f, Main.myPlayer);
				ai[2] = 0f;
			}
		}
		if (type == 251)
		{
			if (justHit)
			{
				ai[2] -= Main.rand.Next(30);
			}
			if (ai[2] < 0f)
			{
				ai[2] = 0f;
			}
			if (confused)
			{
				ai[2] = 0f;
			}
			ai[2] += 1f;
			float num43 = Main.rand.Next(60, 1800);
			num43 *= (float)life / (float)lifeMax;
			num43 += 15f;
			if (Main.netMode != 1 && ai[2] >= num43 && velocity.Y == 0f && !Main.player[target].dead && !Main.player[target].frozen && ((direction > 0 && base.Center.X < Main.player[target].Center.X) || (direction < 0 && base.Center.X > Main.player[target].Center.X)) && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
			{
				Vector2 vector26 = default(Vector2);
				((Vector2)(ref vector26))._002Ector(position.X + (float)width * 0.5f, position.Y + 12f);
				vector26.X += 6 * direction;
				float num44 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector26.X;
				float num46 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector26.Y;
				num44 += (float)Main.rand.Next(-40, 41);
				num46 += (float)Main.rand.Next(-30, 0);
				float num47 = (float)Math.Sqrt(num44 * num44 + num46 * num46);
				netUpdate = true;
				num47 = 15f / num47;
				num44 *= num47;
				num46 *= num47;
				int num48 = 30;
				int num49 = 83;
				vector26.X += num44 * 3f;
				vector26.Y += num46 * 3f;
				Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector26.X, vector26.Y, num44, num46, num49, num48, 0f, Main.myPlayer);
				ai[2] = 0f;
			}
		}
		if (type == 386)
		{
			if (confused)
			{
				ai[2] = -60f;
			}
			else
			{
				if (ai[2] < 60f)
				{
					ai[2] += 1f;
				}
				if (ai[2] > 0f && CountNPCS(387) >= 4 * CountNPCS(386))
				{
					ai[2] = 0f;
				}
				if (justHit)
				{
					ai[2] = -30f;
				}
				if (ai[2] == 30f)
				{
					int num50 = (int)position.X / 16;
					int num51 = (int)position.Y / 16;
					int num52 = (int)position.X / 16;
					int num53 = (int)position.Y / 16;
					int num54 = 5;
					int num55 = 0;
					bool flag6 = false;
					int num57 = 2;
					int num58 = 0;
					while (!flag6 && num55 < 100)
					{
						num55++;
						int num59 = Main.rand.Next(num50 - num54, num50 + num54);
						for (int num60 = Main.rand.Next(num51 - num54, num51 + num54); num60 < num51 + num54; num60++)
						{
							if ((num60 < num51 - num57 || num60 > num51 + num57 || num59 < num50 - num57 || num59 > num50 + num57) && (num60 < num53 - num58 || num60 > num53 + num58 || num59 < num52 - num58 || num59 > num52 + num58) && Main.tile[num59, num60].nactive())
							{
								bool flag7 = true;
								if (Main.tile[num59, num60 - 1].lava())
								{
									flag7 = false;
								}
								if (flag7 && Main.tileSolid[Main.tile[num59, num60].type] && !Collision.SolidTiles(num59 - 1, num59 + 1, num60 - 4, num60 - 1))
								{
									int num61 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), num59 * 16 - width / 2, num60 * 16, 387);
									Main.npc[num61].position.Y = num60 * 16 - Main.npc[num61].height;
									flag6 = true;
									netUpdate = true;
									break;
								}
							}
						}
					}
				}
				if (ai[2] == 60f)
				{
					ai[2] = -120f;
				}
			}
		}
		if (type == 389)
		{
			if (confused)
			{
				ai[2] = -60f;
			}
			else
			{
				if (ai[2] < 20f)
				{
					ai[2] += 1f;
				}
				if (justHit)
				{
					ai[2] = -30f;
				}
				if (ai[2] == 20f && Main.netMode != 1)
				{
					ai[2] = -10 + Main.rand.Next(3) * -10;
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y + 8f, direction * 6, 0f, 437, 25, 1f, Main.myPlayer);
				}
			}
		}
		if (type == 110 || type == 111 || type == 206 || type == 214 || type == 215 || type == 216 || type == 290 || type == 291 || type == 292 || type == 293 || type == 350 || type == 379 || type == 380 || type == 381 || type == 382 || (type >= 449 && type <= 452) || type == 468 || type == 481 || type == 411 || type == 409 || (type >= 498 && type <= 506) || type == 424 || type == 426 || type == 520)
		{
			bool flag8 = type == 381 || type == 382 || type == 520;
			bool flag9 = type == 426;
			bool flag10 = true;
			int num62 = -1;
			int num63 = -1;
			if (type == 411)
			{
				flag8 = true;
				num62 = 120;
				num63 = 120;
				if (ai[1] <= 220f)
				{
					flag10 = false;
				}
			}
			if (ai[1] > 0f)
			{
				ai[1] -= 1f;
			}
			if (justHit)
			{
				ai[1] = 30f;
				ai[2] = 0f;
			}
			int num64 = 70;
			if (type == 379 || type == 380)
			{
				num64 = 80;
			}
			if (type == 381 || type == 382)
			{
				num64 = 80;
			}
			if (type == 520)
			{
				num64 = 15;
			}
			if (type == 350)
			{
				num64 = 110;
			}
			if (type == 291)
			{
				num64 = 200;
			}
			if (type == 292)
			{
				num64 = 120;
			}
			if (type == 293)
			{
				num64 = 90;
			}
			if (type == 111)
			{
				num64 = 180;
			}
			if (type == 206)
			{
				num64 = 50;
			}
			if (type == 481)
			{
				num64 = 100;
			}
			if (type == 214)
			{
				num64 = 40;
			}
			if (type == 215)
			{
				num64 = 80;
			}
			if (type == 290)
			{
				num64 = 30;
			}
			if (type == 411)
			{
				num64 = 330;
			}
			if (type == 409)
			{
				num64 = 60;
			}
			if (type == 424)
			{
				num64 = 180;
			}
			if (type == 426)
			{
				num64 = 60;
			}
			bool flag11 = false;
			if (type == 216)
			{
				if (localAI[2] >= 20f)
				{
					flag11 = true;
				}
				num64 = ((!flag11) ? 8 : 60);
			}
			int num65 = num64 / 2;
			if (type == 424)
			{
				num65 = num64 - 1;
			}
			if (type == 426)
			{
				num65 = num64 - 1;
			}
			if (type == 411)
			{
				num65 = 220;
			}
			if (confused)
			{
				ai[2] = 0f;
			}
			if (ai[2] > 0f)
			{
				if (flag10)
				{
					TargetClosest();
				}
				if (ai[1] == (float)num65)
				{
					if (type == 216)
					{
						localAI[2] += 1f;
					}
					float num66 = 11f;
					if (type == 111)
					{
						num66 = 9f;
					}
					if (type == 206)
					{
						num66 = 7f;
					}
					if (type == 290)
					{
						num66 = 9f;
					}
					if (type == 293)
					{
						num66 = 4f;
					}
					if (type == 214)
					{
						num66 = 14f;
					}
					if (type == 215)
					{
						num66 = 16f;
					}
					if (type == 382)
					{
						num66 = 7f;
					}
					if (type == 520)
					{
						num66 = 8f;
					}
					if (type == 409)
					{
						num66 = 4f;
					}
					if (type >= 449 && type <= 452)
					{
						num66 = 7f;
					}
					if (type == 481)
					{
						num66 = 8f;
					}
					if (type == 468)
					{
						num66 = 7.5f;
					}
					if (type == 411)
					{
						num66 = 1f;
					}
					if (type >= 498 && type <= 506)
					{
						num66 = 7f;
					}
					Vector2 chaserPosition2 = default(Vector2);
					((Vector2)(ref chaserPosition2))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					if (type == 481)
					{
						chaserPosition2.Y -= 14f;
					}
					if (type == 206)
					{
						chaserPosition2.Y -= 10f;
					}
					if (type == 290)
					{
						chaserPosition2.Y -= 10f;
					}
					if (type == 381 || type == 382)
					{
						chaserPosition2.Y += 6f;
					}
					if (type == 520)
					{
						chaserPosition2.Y = position.Y + 20f;
					}
					if (type >= 498 && type <= 506)
					{
						chaserPosition2.Y -= 8f;
					}
					if (type == 426)
					{
						chaserPosition2 += new Vector2((float)(spriteDirection * 2), -12f);
						num66 = 7f;
					}
					float num68 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - chaserPosition2.X;
					float num69 = Math.Abs(num68) * 0.1f;
					if (type == 291 || type == 292)
					{
						num69 = 0f;
					}
					if (type == 215)
					{
						num69 = Math.Abs(num68) * 0.08f;
					}
					if (type == 214 || (type == 216 && !flag11))
					{
						num69 = 0f;
					}
					if (type == 381 || type == 382 || type == 520)
					{
						num69 = 0f;
					}
					if (type >= 449 && type <= 452)
					{
						num69 = Math.Abs(num68) * (float)Main.rand.Next(10, 50) * 0.01f;
					}
					if (type == 468)
					{
						num69 = Math.Abs(num68) * (float)Main.rand.Next(10, 50) * 0.01f;
					}
					if (type == 481)
					{
						num69 = Math.Abs(num68) * (float)Main.rand.Next(-10, 11) * 0.0035f;
					}
					if (type >= 498 && type <= 506)
					{
						num69 = Math.Abs(num68) * (float)Main.rand.Next(1, 11) * 0.0025f;
					}
					float num70 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - chaserPosition2.Y - num69;
					if (type == 291)
					{
						num68 += (float)Main.rand.Next(-40, 41) * 0.2f;
						num70 += (float)Main.rand.Next(-40, 41) * 0.2f;
					}
					else if (type == 381 || type == 382 || type == 520)
					{
						num68 += (float)Main.rand.Next(-100, 101) * 0.4f;
						num70 += (float)Main.rand.Next(-100, 101) * 0.4f;
						num68 *= (float)Main.rand.Next(85, 116) * 0.01f;
						num70 *= (float)Main.rand.Next(85, 116) * 0.01f;
						if (type == 520)
						{
							num68 += (float)Main.rand.Next(-100, 101) * 0.6f;
							num70 += (float)Main.rand.Next(-100, 101) * 0.6f;
							num68 *= (float)Main.rand.Next(85, 116) * 0.015f;
							num70 *= (float)Main.rand.Next(85, 116) * 0.015f;
						}
					}
					else if (type == 481)
					{
						num68 += (float)Main.rand.Next(-40, 41) * 0.4f;
						num70 += (float)Main.rand.Next(-40, 41) * 0.4f;
					}
					else if (type >= 498 && type <= 506)
					{
						num68 += (float)Main.rand.Next(-40, 41) * 0.3f;
						num70 += (float)Main.rand.Next(-40, 41) * 0.3f;
					}
					else if (type == 426)
					{
						num68 += (float)Main.rand.Next(-30, 31) * 0.3f;
						num70 += (float)Main.rand.Next(-30, 31) * 0.3f;
					}
					else if (type != 292)
					{
						num68 += (float)Main.rand.Next(-40, 41);
						num70 += (float)Main.rand.Next(-40, 41);
					}
					float num71 = (float)Math.Sqrt(num68 * num68 + num70 * num70);
					netUpdate = true;
					num71 = num66 / num71;
					num68 *= num71;
					num70 *= num71;
					int num72 = 35;
					int num73 = 82;
					if (type == 111)
					{
						num72 = 11;
					}
					if (type == 206)
					{
						num72 = 37;
					}
					if (type == 379 || type == 380)
					{
						num72 = 40;
					}
					if (type == 350)
					{
						num72 = 45;
					}
					if (type == 468)
					{
						num72 = 50;
					}
					if (type == 111)
					{
						num73 = 81;
					}
					if (type == 379 || type == 380)
					{
						num73 = 81;
					}
					if (type == 381)
					{
						num73 = 436;
						num72 = 24;
					}
					if (type == 382)
					{
						num73 = 438;
						num72 = 30;
					}
					if (type == 520)
					{
						num73 = 592;
						num72 = 35;
					}
					if (type >= 449 && type <= 452)
					{
						num73 = 471;
						num72 = 15;
					}
					if (type >= 498 && type <= 506)
					{
						num73 = 572;
						num72 = 14;
					}
					if (type == 481)
					{
						num73 = 508;
						num72 = 18;
					}
					if (type == 206)
					{
						num73 = 177;
					}
					if (type == 468)
					{
						num73 = 501;
					}
					if (type == 411)
					{
						num73 = 537;
						num72 = GetAttackDamage_ForProjectiles(60f, 45f);
					}
					if (type == 424)
					{
						num73 = 573;
						num72 = GetAttackDamage_ForProjectiles(60f, 45f);
					}
					if (type == 426)
					{
						num73 = 581;
						num72 = GetAttackDamage_ForProjectiles(60f, 45f);
					}
					if (type == 291)
					{
						num73 = 302;
						num72 = 100;
					}
					if (type == 290)
					{
						num73 = 300;
						num72 = 60;
					}
					if (type == 293)
					{
						num73 = 303;
						num72 = 60;
					}
					if (type == 214)
					{
						num73 = 180;
						num72 = 25;
					}
					if (type == 215)
					{
						num73 = 82;
						num72 = 40;
					}
					if (type == 292)
					{
						num72 = 50;
						num73 = 180;
					}
					if (type == 216)
					{
						num73 = 180;
						num72 = 30;
						if (flag11)
						{
							num72 = 100;
							num73 = 240;
							localAI[2] = 0f;
						}
					}
					Player player3 = Main.player[target];
					Vector2? vector27 = null;
					if (type == 426)
					{
						vector27 = Main.rand.NextVector2FromRectangle(player3.Hitbox);
					}
					if (vector27.HasValue)
					{
						Utils.ChaseResults chaseResults2 = Utils.GetChaseResults(chaserPosition2, num66, vector27.Value, player3.velocity);
						if (chaseResults2.InterceptionHappens)
						{
							Vector2 val4 = Utils.FactorAcceleration(chaseResults2.ChaserVelocity, chaseResults2.InterceptionTime, new Vector2(0f, 0.1f), 15);
							num68 = val4.X;
							num70 = val4.Y;
						}
					}
					chaserPosition2.X += num68;
					chaserPosition2.Y += num70;
					if (type == 290)
					{
						num72 = GetAttackDamage_ForProjectiles(num72, (float)num72 * 0.75f);
					}
					if (type >= 381 && type <= 392)
					{
						num72 = GetAttackDamage_ForProjectiles(num72, (float)num72 * 0.8f);
					}
					if (Main.netMode != 1)
					{
						if (type == 292)
						{
							for (int num74 = 0; num74 < 4; num74++)
							{
								num68 = player3.position.X + (float)player3.width * 0.5f - chaserPosition2.X;
								num70 = player3.position.Y + (float)player3.height * 0.5f - chaserPosition2.Y;
								num71 = (float)Math.Sqrt(num68 * num68 + num70 * num70);
								num71 = 12f / num71;
								num68 = (num68 += (float)Main.rand.Next(-40, 41));
								num70 = (num70 += (float)Main.rand.Next(-40, 41));
								num68 *= num71;
								num70 *= num71;
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), chaserPosition2.X, chaserPosition2.Y, num68, num70, num73, num72, 0f, Main.myPlayer);
							}
						}
						else if (type == 411)
						{
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), chaserPosition2.X, chaserPosition2.Y, num68, num70, num73, num72, 0f, Main.myPlayer, 0f, whoAmI);
						}
						else if (type == 424)
						{
							for (int num75 = 0; num75 < 4; num75++)
							{
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X - (float)(spriteDirection * 4), base.Center.Y + 6f, (float)(-3 + 2 * num75) * 0.15f, (float)(-Main.rand.Next(0, 3)) * 0.2f - 0.1f, num73, num72, 0f, Main.myPlayer, 0f, whoAmI);
							}
						}
						else if (type == 409)
						{
							int num76 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 410, whoAmI);
							Main.npc[num76].velocity = new Vector2(num68, -6f + num70);
						}
						else
						{
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), chaserPosition2.X, chaserPosition2.Y, num68, num70, num73, num72, 0f, Main.myPlayer);
						}
					}
					if (Math.Abs(num70) > Math.Abs(num68) * 2f)
					{
						if (num70 > 0f)
						{
							ai[2] = 1f;
						}
						else
						{
							ai[2] = 5f;
						}
					}
					else if (Math.Abs(num68) > Math.Abs(num70) * 2f)
					{
						ai[2] = 3f;
					}
					else if (num70 > 0f)
					{
						ai[2] = 2f;
					}
					else
					{
						ai[2] = 4f;
					}
				}
				if ((velocity.Y != 0f && !flag9) || ai[1] <= 0f)
				{
					ai[2] = 0f;
					ai[1] = 0f;
				}
				else if (!flag8 || (num62 != -1 && ai[1] >= (float)num62 && ai[1] < (float)(num62 + num63) && (!flag9 || velocity.Y == 0f)))
				{
					velocity.X *= 0.9f;
					spriteDirection = direction;
				}
			}
			if (type == 468 && !Main.eclipse)
			{
				flag8 = true;
			}
			else if ((ai[2] <= 0f || flag8) && (velocity.Y == 0f || flag9) && ai[1] <= 0f && !Main.player[target].dead)
			{
				bool flag13 = Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height);
				if (type == 520)
				{
					flag13 = Collision.CanHitLine(base.Top + new Vector2(0f, 20f), 0, 0, Main.player[target].position, Main.player[target].width, Main.player[target].height);
				}
				if (Main.player[target].stealth == 0f && Main.player[target].itemAnimation == 0)
				{
					flag13 = false;
				}
				if (flag13)
				{
					float num77 = 10f;
					Vector2 vector28 = default(Vector2);
					((Vector2)(ref vector28))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num79 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector28.X;
					float num80 = Math.Abs(num79) * 0.1f;
					float num81 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector28.Y - num80;
					num79 += (float)Main.rand.Next(-40, 41);
					num81 += (float)Main.rand.Next(-40, 41);
					float num82 = (float)Math.Sqrt(num79 * num79 + num81 * num81);
					float num83 = 700f;
					if (type == 214)
					{
						num83 = 550f;
					}
					if (type == 215)
					{
						num83 = 800f;
					}
					if (type >= 498 && type <= 506)
					{
						num83 = 190f;
					}
					if (type >= 449 && type <= 452)
					{
						num83 = 200f;
					}
					if (type == 481)
					{
						num83 = 400f;
					}
					if (type == 468)
					{
						num83 = 400f;
					}
					if (num82 < num83)
					{
						netUpdate = true;
						velocity.X *= 0.5f;
						num82 = num77 / num82;
						num79 *= num82;
						num81 *= num82;
						ai[2] = 3f;
						ai[1] = num64;
						if (Math.Abs(num81) > Math.Abs(num79) * 2f)
						{
							if (num81 > 0f)
							{
								ai[2] = 1f;
							}
							else
							{
								ai[2] = 5f;
							}
						}
						else if (Math.Abs(num79) > Math.Abs(num81) * 2f)
						{
							ai[2] = 3f;
						}
						else if (num81 > 0f)
						{
							ai[2] = 2f;
						}
						else
						{
							ai[2] = 4f;
						}
					}
				}
			}
			if (ai[2] <= 0f || (flag8 && (num62 == -1 || !(ai[1] >= (float)num62) || !(ai[1] < (float)(num62 + num63)))))
			{
				float num84 = 1f;
				float num85 = 0.07f;
				float num86 = 0.8f;
				if (type == 214)
				{
					num84 = 2f;
					num85 = 0.09f;
				}
				else if (type == 215)
				{
					num84 = 1.5f;
					num85 = 0.08f;
				}
				else if (type == 381 || type == 382)
				{
					num84 = 2f;
					num85 = 0.5f;
				}
				else if (type == 520)
				{
					num84 = 4f;
					num85 = 1f;
					num86 = 0.7f;
				}
				else if (type == 411)
				{
					num84 = 2f;
					num85 = 0.5f;
				}
				else if (type == 409)
				{
					num84 = 2f;
					num85 = 0.5f;
				}
				else if (type == 426)
				{
					num84 = 4f;
					num85 = 0.6f;
					num86 = 0.95f;
				}
				bool flag14 = false;
				if ((type == 381 || type == 382) && Vector2.Distance(base.Center, Main.player[target].Center) < 300f && Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
				{
					flag14 = true;
					ai[3] = 0f;
				}
				if (type == 520 && Vector2.Distance(base.Center, Main.player[target].Center) < 400f && Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
				{
					flag14 = true;
					ai[3] = 0f;
				}
				if (velocity.X < 0f - num84 || velocity.X > num84 || flag14)
				{
					if (velocity.Y == 0f)
					{
						velocity *= num86;
					}
				}
				else if (velocity.X < num84 && direction == 1)
				{
					velocity.X += num85;
					if (velocity.X > num84)
					{
						velocity.X = num84;
					}
				}
				else if (velocity.X > 0f - num84 && direction == -1)
				{
					velocity.X -= num85;
					if (velocity.X < 0f - num84)
					{
						velocity.X = 0f - num84;
					}
				}
			}
			if (type == 520)
			{
				localAI[2] += 1f;
				if (localAI[2] >= 6f)
				{
					localAI[2] = 0f;
					localAI[3] = Main.player[target].DirectionFrom(base.Top + new Vector2(0f, 20f)).ToRotation();
				}
			}
		}
		if (type == 109 && Main.netMode != 1 && !Main.player[target].dead)
		{
			if (justHit)
			{
				ai[2] = 0f;
			}
			ai[2] += 1f;
			if (ai[2] > 60f)
			{
				Vector2 vector29 = default(Vector2);
				((Vector2)(ref vector29))._002Ector(position.X + (float)width * 0.5f - (float)(direction * 24), position.Y + 4f);
				if (Main.rand.Next(5) != 0 || AnyNPCs(378))
				{
					int num87 = Main.rand.Next(3, 8) * direction;
					int num88 = Main.rand.Next(-8, -5);
					int num90 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector29.X, vector29.Y, num87, num88, 75, 80, 0f, Main.myPlayer, 0f, 0f, 0f);
					Main.projectile[num90].timeLeft = 300;
					ai[2] = 0f;
				}
				else
				{
					ai[2] = -120f;
					int number = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)vector29.X, (int)vector29.Y, 378);
					NetMessage.SendData(23, -1, -1, null, number);
				}
			}
		}
		if (velocity.Y == 0f || flag)
		{
			int num91 = (int)(position.Y + (float)height + 7f) / 16;
			int num92 = (int)(position.Y - 9f) / 16;
			int num93 = (int)position.X / 16;
			int num94 = (int)(position.X + (float)width) / 16;
			int num205 = (int)(position.X + 8f) / 16;
			int num95 = (int)(position.X + (float)width - 8f) / 16;
			bool flag15 = false;
			for (int num96 = num205; num96 <= num95; num96++)
			{
				if (num96 >= num93 && num96 <= num94 && Main.tile[num96, num91] == null)
				{
					flag15 = true;
					continue;
				}
				if (Main.tile[num96, num92] != null && Main.tile[num96, num92].nactive() && Main.tileSolid[Main.tile[num96, num92].type])
				{
					flag23 = false;
					break;
				}
				if (!flag15 && num96 >= num93 && num96 <= num94 && Main.tile[num96, num91].nactive() && Main.tileSolid[Main.tile[num96, num91].type])
				{
					flag23 = true;
				}
			}
			if (!flag23 && velocity.Y < 0f)
			{
				velocity.Y = 0f;
			}
			if (flag15)
			{
				return;
			}
		}
		if (type == 428)
		{
			flag23 = false;
		}
		if (velocity.Y >= 0f && (type != 580 || directionY != 1))
		{
			int num97 = 0;
			if (velocity.X < 0f)
			{
				num97 = -1;
			}
			if (velocity.X > 0f)
			{
				num97 = 1;
			}
			Vector2 vector30 = position;
			vector30.X += velocity.X;
			int num98 = (int)((vector30.X + (float)(width / 2) + (float)((width / 2 + 1) * num97)) / 16f);
			int num100 = (int)((vector30.Y + (float)height - 1f) / 16f);
			if (WorldGen.InWorld(num98, num100, 4))
			{
				if (Main.tile[num98, num100] == null)
				{
					Main.tile[num98, num100] = default(Tile);
				}
				if (Main.tile[num98, num100 - 1] == null)
				{
					Main.tile[num98, num100 - 1] = default(Tile);
				}
				if (Main.tile[num98, num100 - 2] == null)
				{
					Main.tile[num98, num100 - 2] = default(Tile);
				}
				if (Main.tile[num98, num100 - 3] == null)
				{
					Main.tile[num98, num100 - 3] = default(Tile);
				}
				if (Main.tile[num98, num100 + 1] == null)
				{
					Main.tile[num98, num100 + 1] = default(Tile);
				}
				if (Main.tile[num98 - num97, num100 - 3] == null)
				{
					Main.tile[num98 - num97, num100 - 3] = default(Tile);
				}
				if ((float)(num98 * 16) < vector30.X + (float)width && (float)(num98 * 16 + 16) > vector30.X && ((Main.tile[num98, num100].nactive() && !Main.tile[num98, num100].topSlope() && !Main.tile[num98, num100 - 1].topSlope() && Main.tileSolid[Main.tile[num98, num100].type] && !Main.tileSolidTop[Main.tile[num98, num100].type]) || (Main.tile[num98, num100 - 1].halfBrick() && Main.tile[num98, num100 - 1].nactive())) && (!Main.tile[num98, num100 - 1].nactive() || !Main.tileSolid[Main.tile[num98, num100 - 1].type] || Main.tileSolidTop[Main.tile[num98, num100 - 1].type] || (Main.tile[num98, num100 - 1].halfBrick() && (!Main.tile[num98, num100 - 4].nactive() || !Main.tileSolid[Main.tile[num98, num100 - 4].type] || Main.tileSolidTop[Main.tile[num98, num100 - 4].type]))) && (!Main.tile[num98, num100 - 2].nactive() || !Main.tileSolid[Main.tile[num98, num100 - 2].type] || Main.tileSolidTop[Main.tile[num98, num100 - 2].type]) && (!Main.tile[num98, num100 - 3].nactive() || !Main.tileSolid[Main.tile[num98, num100 - 3].type] || Main.tileSolidTop[Main.tile[num98, num100 - 3].type]) && (!Main.tile[num98 - num97, num100 - 3].nactive() || !Main.tileSolid[Main.tile[num98 - num97, num100 - 3].type]))
				{
					float num101 = num100 * 16;
					if (Main.tile[num98, num100].halfBrick())
					{
						num101 += 8f;
					}
					if (Main.tile[num98, num100 - 1].halfBrick())
					{
						num101 -= 8f;
					}
					if (num101 < vector30.Y + (float)height)
					{
						float num102 = vector30.Y + (float)height - num101;
						float num103 = 16.1f;
						if (type == 163 || type == 164 || type == 236 || type == 239 || type == 530)
						{
							num103 += 8f;
						}
						if (num102 <= num103)
						{
							gfxOffY += position.Y + (float)height - num101;
							position.Y = num101 - (float)height;
							if (num102 < 9f)
							{
								stepSpeed = 1f;
							}
							else
							{
								stepSpeed = 2f;
							}
						}
					}
				}
			}
		}
		if (flag23)
		{
			int num104 = (int)((position.X + (float)(width / 2) + (float)(15 * direction)) / 16f);
			int num105 = (int)((position.Y + (float)height - 15f) / 16f);
			if (type == 109 || type == 163 || type == 164 || type == 199 || type == 236 || type == 239 || type == 257 || type == 258 || type == 290 || type == 391 || type == 425 || type == 427 || type == 426 || type == 580 || type == 508 || type == 415 || type == 530 || type == 532 || type == 582)
			{
				num104 = (int)((position.X + (float)(width / 2) + (float)((width / 2 + 16) * direction)) / 16f);
			}
			if (Main.tile[num104, num105] == null)
			{
				Main.tile[num104, num105] = default(Tile);
			}
			if (Main.tile[num104, num105 - 1] == null)
			{
				Main.tile[num104, num105 - 1] = default(Tile);
			}
			if (Main.tile[num104, num105 - 2] == null)
			{
				Main.tile[num104, num105 - 2] = default(Tile);
			}
			if (Main.tile[num104, num105 - 3] == null)
			{
				Main.tile[num104, num105 - 3] = default(Tile);
			}
			if (Main.tile[num104, num105 + 1] == null)
			{
				Main.tile[num104, num105 + 1] = default(Tile);
			}
			if (Main.tile[num104 + direction, num105 - 1] == null)
			{
				Main.tile[num104 + direction, num105 - 1] = default(Tile);
			}
			if (Main.tile[num104 + direction, num105 + 1] == null)
			{
				Main.tile[num104 + direction, num105 + 1] = default(Tile);
			}
			if (Main.tile[num104 - direction, num105 + 1] == null)
			{
				Main.tile[num104 - direction, num105 + 1] = default(Tile);
			}
			Main.tile[num104, num105 + 1].halfBrick();
			if (Main.tile[num104, num105 - 1].nactive() && (TileLoader.IsClosedDoor(Main.tile[num104, num105 - 1]) || Main.tile[num104, num105 - 1].type == 388) && flag26)
			{
				ai[2] += 1f;
				ai[3] = 0f;
				if (ai[2] >= 60f)
				{
					bool flag16 = type == 3 || type == 430 || type == 590 || type == 331 || type == 332 || type == 132 || type == 161 || type == 186 || type == 187 || type == 188 || type == 189 || type == 200 || type == 223 || type == 320 || type == 321 || type == 319 || type == 21 || type == 324 || type == 323 || type == 322 || type == 44 || type == 196 || type == 167 || type == 77 || type == 197 || type == 202 || type == 203 || type == 449 || type == 450 || type == 451 || type == 452 || type == 481 || type == 201 || type == 635;
					bool flag17 = Main.player[target].ZoneGraveyard && Main.rand.Next(60) == 0;
					if ((!Main.bloodMoon || Main.getGoodWorld) && !flag17 && flag16)
					{
						ai[1] = 0f;
					}
					velocity.X = 0.5f * (float)(-direction);
					int num106 = 5;
					if (Main.tile[num104, num105 - 1].type == 388)
					{
						num106 = 2;
					}
					ai[1] += num106;
					if (type == 27)
					{
						ai[1] += 1f;
					}
					if (type == 31 || type == 294 || type == 295 || type == 296)
					{
						ai[1] += 6f;
					}
					ai[2] = 0f;
					bool flag18 = false;
					if (ai[1] >= 10f)
					{
						flag18 = true;
						ai[1] = 10f;
					}
					if (type == 460)
					{
						flag18 = true;
					}
					WorldGen.KillTile(num104, num105 - 1, fail: true);
					if ((Main.netMode != 1 || !flag18) && flag18 && Main.netMode != 1)
					{
						if (type == 26)
						{
							WorldGen.KillTile(num104, num105 - 1);
							if (Main.netMode == 2)
							{
								NetMessage.SendData(17, -1, -1, null, 0, num104, num105 - 1);
							}
						}
						else
						{
							if (TileLoader.IsClosedDoor(Main.tile[num104, num105 - 1]))
							{
								bool flag19 = WorldGen.OpenDoor(num104, num105 - 1, direction);
								if (!flag19)
								{
									ai[3] = num154;
									netUpdate = true;
								}
								if (Main.netMode == 2 && flag19)
								{
									NetMessage.SendData(19, -1, -1, null, 0, num104, num105 - 1, direction);
								}
							}
							if (Main.tile[num104, num105 - 1].type == 388)
							{
								bool flag20 = WorldGen.ShiftTallGate(num104, num105 - 1, closing: false);
								if (!flag20)
								{
									ai[3] = num154;
									netUpdate = true;
								}
								if (Main.netMode == 2 && flag20)
								{
									NetMessage.SendData(19, -1, -1, null, 4, num104, num105 - 1);
								}
							}
						}
					}
				}
			}
			else
			{
				int num107 = spriteDirection;
				if (type == 425)
				{
					num107 *= -1;
				}
				if ((velocity.X < 0f && num107 == -1) || (velocity.X > 0f && num107 == 1))
				{
					if (height >= 32 && Main.tile[num104, num105 - 2].nactive() && Main.tileSolid[Main.tile[num104, num105 - 2].type])
					{
						if (Main.tile[num104, num105 - 3].nactive() && Main.tileSolid[Main.tile[num104, num105 - 3].type])
						{
							velocity.Y = -8f;
							netUpdate = true;
						}
						else
						{
							velocity.Y = -7f;
							netUpdate = true;
						}
					}
					else if (Main.tile[num104, num105 - 1].nactive() && Main.tileSolid[Main.tile[num104, num105 - 1].type])
					{
						if (type == 624)
						{
							velocity.Y = -8f;
							int num108 = (int)(position.Y + (float)height) / 16;
							if (WorldGen.SolidTile((int)base.Center.X / 16, num108 - 8))
							{
								direction *= -1;
								spriteDirection = direction;
								velocity.X = 3 * direction;
							}
						}
						else
						{
							velocity.Y = -6f;
						}
						netUpdate = true;
					}
					else if (position.Y + (float)height - (float)(num105 * 16) > 20f && Main.tile[num104, num105].nactive() && !Main.tile[num104, num105].topSlope() && Main.tileSolid[Main.tile[num104, num105].type])
					{
						velocity.Y = -5f;
						netUpdate = true;
					}
					else if (directionY < 0 && type != 67 && (!Main.tile[num104, num105 + 1].nactive() || !Main.tileSolid[Main.tile[num104, num105 + 1].type]) && (!Main.tile[num104 + direction, num105 + 1].nactive() || !Main.tileSolid[Main.tile[num104 + direction, num105 + 1].type]))
					{
						velocity.Y = -8f;
						velocity.X *= 1.5f;
						netUpdate = true;
					}
					else if (flag26)
					{
						ai[1] = 0f;
						ai[2] = 0f;
					}
					if (velocity.Y == 0f && flag24 && ai[3] == 1f)
					{
						velocity.Y = -5f;
					}
					if (velocity.Y == 0f && (Main.expertMode || type == 586) && Main.player[target].Bottom.Y < base.Top.Y && Math.Abs(base.Center.X - Main.player[target].Center.X) < (float)(Main.player[target].width * 3) && Collision.CanHit(this, Main.player[target]))
					{
						if (type == 586)
						{
							int num109 = (int)((base.Bottom.Y - 16f - Main.player[target].Bottom.Y) / 16f);
							if (num109 < 14 && Collision.CanHit(this, Main.player[target]))
							{
								if (num109 < 7)
								{
									velocity.Y = -8.8f;
								}
								else if (num109 < 8)
								{
									velocity.Y = -9.2f;
								}
								else if (num109 < 9)
								{
									velocity.Y = -9.7f;
								}
								else if (num109 < 10)
								{
									velocity.Y = -10.3f;
								}
								else if (num109 < 11)
								{
									velocity.Y = -10.6f;
								}
								else
								{
									velocity.Y = -11f;
								}
							}
						}
						if (velocity.Y == 0f)
						{
							int num112 = 6;
							if (Main.player[target].Bottom.Y > base.Top.Y - (float)(num112 * 16))
							{
								velocity.Y = -7.9f;
							}
							else
							{
								int num113 = (int)(base.Center.X / 16f);
								int num114 = (int)(base.Bottom.Y / 16f) - 1;
								for (int num115 = num114; num115 > num114 - num112; num115--)
								{
									if (Main.tile[num113, num115].nactive() && TileID.Sets.Platforms[Main.tile[num113, num115].type])
									{
										velocity.Y = -7.9f;
										break;
									}
								}
							}
						}
					}
				}
				if ((type == 31 || type == 294 || type == 295 || type == 296 || type == 47 || type == 77 || type == 104 || type == 168 || type == 196 || type == 385 || type == 389 || type == 464 || type == 470 || (type >= 524 && type <= 527)) && velocity.Y == 0f)
				{
					int num116 = 100;
					int num117 = 50;
					if (type == 586)
					{
						num116 = 150;
						num117 = 150;
					}
					if (Math.Abs(position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2))) < (float)num116 && Math.Abs(position.Y + (float)(height / 2) - (Main.player[target].position.Y + (float)(Main.player[target].height / 2))) < (float)num117 && ((direction > 0 && velocity.X >= 1f) || (direction < 0 && velocity.X <= -1f)))
					{
						if (type == 586)
						{
							velocity.X += direction;
							velocity.X *= 2f;
							if (velocity.X > 8f)
							{
								velocity.X = 8f;
							}
							if (velocity.X < -8f)
							{
								velocity.X = -8f;
							}
							velocity.Y = -4.5f;
							if (position.Y > Main.player[target].position.Y + 40f)
							{
								velocity.Y -= 2f;
							}
							if (position.Y > Main.player[target].position.Y + 80f)
							{
								velocity.Y -= 2f;
							}
							if (position.Y > Main.player[target].position.Y + 120f)
							{
								velocity.Y -= 2f;
							}
						}
						else
						{
							velocity.X *= 2f;
							if (velocity.X > 3f)
							{
								velocity.X = 3f;
							}
							if (velocity.X < -3f)
							{
								velocity.X = -3f;
							}
							velocity.Y = -4f;
						}
						netUpdate = true;
					}
				}
				if (type == 120 && velocity.Y < 0f)
				{
					velocity.Y *= 1.1f;
				}
				if (type == 287 && velocity.Y == 0f && Math.Abs(position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2))) < 150f && Math.Abs(position.Y + (float)(height / 2) - (Main.player[target].position.Y + (float)(Main.player[target].height / 2))) < 50f && ((direction > 0 && velocity.X >= 1f) || (direction < 0 && velocity.X <= -1f)))
				{
					velocity.X = 8 * direction;
					velocity.Y = -4f;
					netUpdate = true;
				}
				if (type == 287 && velocity.Y < 0f)
				{
					velocity.X *= 1.2f;
					velocity.Y *= 1.1f;
				}
				if (type == 460 && velocity.Y < 0f)
				{
					velocity.X *= 1.3f;
					velocity.Y *= 1.1f;
				}
			}
		}
		else if (flag26)
		{
			ai[1] = 0f;
			ai[2] = 0f;
		}
		if (Main.netMode != 1 && type == 120 && ai[3] >= (float)num154)
		{
			int targetTileX = (int)Main.player[target].Center.X / 16;
			int targetTileY = (int)Main.player[target].Center.Y / 16;
			Vector2 chosenTile = Vector2.Zero;
			if (AI_AttemptToFindTeleportSpot(ref chosenTile, targetTileX, targetTileY, 20, 9))
			{
				position.X = chosenTile.X * 16f - (float)(width / 2);
				position.Y = chosenTile.Y * 16f - (float)height;
				ai[3] = -120f;
				netUpdate = true;
			}
		}
	}

	public static bool DespawnEncouragement_AIStyle3_Fighters_NotDiscouraged(int npcID, Vector2 position, NPC npcInstance)
	{
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		if (!Main.eclipse && Main.IsItDay() && (npcInstance == null || !npcInstance.SpawnedFromStatue) && !((double)position.Y > Main.worldSurface * 16.0) && (npcInstance == null || !Main.player[npcInstance.target].ZoneGraveyard) && (!Main.snowMoon || (npcID != 343 && npcID != 350)) && (Main.invasionType != 1 || (npcID != 26 && npcID != 27 && npcID != 28 && npcID != 111 && npcID != 471)) && (!Main.dontStarveWorld || (npcID != 164 && npcID != 163)) && npcID != 73 && npcID != 624 && (npcID != 631 || !(npcInstance.ai[2] > 0f)) && (Main.invasionType != 3 || npcID < 212 || npcID > 216) && (Main.invasionType != 4 || (npcID != 381 && npcID != 382 && npcID != 383 && npcID != 385 && npcID != 386 && npcID != 389 && npcID != 391 && npcID != 520)) && npcID != 31 && npcID != 294 && npcID != 295 && npcID != 296 && npcID != 47 && npcID != 67 && npcID != 77 && npcID != 78 && npcID != 79 && npcID != 80 && npcID != 630 && npcID != 110 && npcID != 120 && npcID != 168 && npcID != 181 && npcID != 185 && npcID != 198 && npcID != 199 && npcID != 206 && npcID != 217 && npcID != 218 && npcID != 219 && npcID != 220 && npcID != 239 && npcID != 243 && npcID != 254 && npcID != 255 && npcID != 257 && npcID != 258 && npcID != 291 && npcID != 292 && npcID != 293 && npcID != 379 && npcID != 380 && npcID != 464 && npcID != 470 && npcID != 424 && (npcID != 411 || (npcInstance != null && !(npcInstance.ai[1] >= 180f) && !(npcInstance.ai[1] < 90f))))
		{
			switch (npcID)
			{
			default:
				if (npcID != 528 && npcID != 529 && npcID != 530)
				{
					return npcID == 532;
				}
				break;
			case 409:
			case 415:
			case 419:
			case 425:
			case 427:
			case 428:
			case 429:
			case 508:
			case 524:
			case 525:
			case 526:
			case 527:
			case 580:
			case 582:
				break;
			}
		}
		return true;
	}

	public static bool DespawnEncouragement_AIStyle3_Fighters_CanBeBusyWithAction(int npcID)
	{
		if (npcID != 110 && npcID != 111 && npcID != 206 && npcID != 216 && npcID != 214 && npcID != 215 && npcID != 291 && npcID != 292 && npcID != 293 && npcID != 350 && npcID != 381 && npcID != 382 && npcID != 383 && npcID != 385 && npcID != 386 && npcID != 389 && npcID != 391 && npcID != 469 && npcID != 166 && npcID != 466 && npcID != 471 && npcID != 411 && npcID != 409 && npcID != 424 && npcID != 425 && npcID != 426 && npcID != 415 && npcID != 419)
		{
			return npcID == 520;
		}
		return true;
	}

	private void AI_001_Slimes()
	{
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_013c: Unknown result type (might be due to invalid IL or missing references)
		//IL_014a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_038e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0394: Unknown result type (might be due to invalid IL or missing references)
		//IL_0399: Unknown result type (might be due to invalid IL or missing references)
		//IL_039e: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0403: Unknown result type (might be due to invalid IL or missing references)
		//IL_0408: Unknown result type (might be due to invalid IL or missing references)
		//IL_0448: Unknown result type (might be due to invalid IL or missing references)
		//IL_0459: Unknown result type (might be due to invalid IL or missing references)
		//IL_059c: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_051e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0524: Unknown result type (might be due to invalid IL or missing references)
		//IL_0548: Unknown result type (might be due to invalid IL or missing references)
		//IL_0552: Unknown result type (might be due to invalid IL or missing references)
		//IL_0557: Unknown result type (might be due to invalid IL or missing references)
		//IL_055e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0564: Unknown result type (might be due to invalid IL or missing references)
		//IL_0569: Unknown result type (might be due to invalid IL or missing references)
		//IL_056e: Unknown result type (might be due to invalid IL or missing references)
		//IL_070a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0626: Unknown result type (might be due to invalid IL or missing references)
		//IL_0633: Unknown result type (might be due to invalid IL or missing references)
		//IL_0638: Unknown result type (might be due to invalid IL or missing references)
		//IL_0659: Unknown result type (might be due to invalid IL or missing references)
		//IL_065f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0664: Unknown result type (might be due to invalid IL or missing references)
		//IL_0669: Unknown result type (might be due to invalid IL or missing references)
		//IL_0684: Unknown result type (might be due to invalid IL or missing references)
		//IL_068a: Unknown result type (might be due to invalid IL or missing references)
		//IL_06bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_06cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_08be: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_08cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0919: Unknown result type (might be due to invalid IL or missing references)
		//IL_0923: Unknown result type (might be due to invalid IL or missing references)
		//IL_0928: Unknown result type (might be due to invalid IL or missing references)
		//IL_092f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0935: Unknown result type (might be due to invalid IL or missing references)
		//IL_093a: Unknown result type (might be due to invalid IL or missing references)
		//IL_093f: Unknown result type (might be due to invalid IL or missing references)
		//IL_074b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0750: Unknown result type (might be due to invalid IL or missing references)
		//IL_0767: Unknown result type (might be due to invalid IL or missing references)
		//IL_076d: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_07cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0804: Unknown result type (might be due to invalid IL or missing references)
		//IL_0809: Unknown result type (might be due to invalid IL or missing references)
		//IL_0877: Unknown result type (might be due to invalid IL or missing references)
		//IL_087d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0882: Unknown result type (might be due to invalid IL or missing references)
		//IL_0887: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_09fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_105a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1077: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e90: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ead: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c19: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c36: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e62: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e67: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ed3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f11: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f34: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f39: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a19: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a39: Unknown result type (might be due to invalid IL or missing references)
		//IL_124d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1252: Unknown result type (might be due to invalid IL or missing references)
		//IL_1255: Unknown result type (might be due to invalid IL or missing references)
		//IL_125f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1269: Unknown result type (might be due to invalid IL or missing references)
		//IL_1273: Unknown result type (might be due to invalid IL or missing references)
		//IL_172f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1734: Unknown result type (might be due to invalid IL or missing references)
		//IL_1737: Unknown result type (might be due to invalid IL or missing references)
		//IL_1741: Unknown result type (might be due to invalid IL or missing references)
		//IL_174b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1755: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a89: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa9: Unknown result type (might be due to invalid IL or missing references)
		//IL_179a: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_150c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_1123: Unknown result type (might be due to invalid IL or missing references)
		//IL_117e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1185: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d44: Unknown result type (might be due to invalid IL or missing references)
		//IL_215f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0faf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0feb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ff2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ff9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b90: Unknown result type (might be due to invalid IL or missing references)
		//IL_0baa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d38: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d75: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dce: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1863: Unknown result type (might be due to invalid IL or missing references)
		//IL_15bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bab: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bee: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2822: Unknown result type (might be due to invalid IL or missing references)
		//IL_1660: Unknown result type (might be due to invalid IL or missing references)
		//IL_1667: Unknown result type (might be due to invalid IL or missing references)
		//IL_191b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1922: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_140e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1413: Unknown result type (might be due to invalid IL or missing references)
		//IL_141e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1425: Unknown result type (might be due to invalid IL or missing references)
		//IL_142a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1462: Unknown result type (might be due to invalid IL or missing references)
		//IL_1469: Unknown result type (might be due to invalid IL or missing references)
		//IL_1470: Unknown result type (might be due to invalid IL or missing references)
		//IL_1477: Unknown result type (might be due to invalid IL or missing references)
		//IL_1437: Unknown result type (might be due to invalid IL or missing references)
		//IL_143e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1443: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_270a: Unknown result type (might be due to invalid IL or missing references)
		if (type == 1 && (ai[1] == 1f || ai[1] == 2f || ai[1] == 3f))
		{
			ai[1] = -1f;
		}
		if (type == 1 && ai[1] == 75f)
		{
			float num = 0.3f;
			Lighting.AddLight((int)(base.Center.X / 16f), (int)(base.Center.Y / 16f), 0.8f * num, 0.7f * num, 0.1f * num);
			if (Main.rand.Next(12) == 0)
			{
				Dust dust3 = Dust.NewDustPerfect(base.Center + new Vector2(0f, (float)height * 0.2f) + Main.rand.NextVector2CircularEdge(width, (float)height * 0.6f) * (0.3f + Main.rand.NextFloat() * 0.5f), 228, (Vector2?)new Vector2(0f, (0f - Main.rand.NextFloat()) * 0.3f - 1.5f), 127, default(Color), 1f);
				dust3.scale = 0.5f;
				dust3.fadeIn = 1.1f;
				dust3.noGravity = true;
				dust3.noLight = true;
			}
		}
		if (type == 1 && ai[1] == 0f && Main.netMode != 1 && value > 0f)
		{
			ai[1] = -1f;
			if (Main.remixWorld && ai[0] != -999f && Main.rand.Next(3) == 0)
			{
				ai[1] = 75f;
				netUpdate = true;
			}
			else if (Main.rand.Next(20) == 0)
			{
				int num12 = AI_001_Slimes_GenerateItemInsideBody(ai[0] == -999f);
				ai[1] = num12;
				netUpdate = true;
			}
		}
		if (type == 1 && ai[0] == -999f)
		{
			frame.Y = 0;
			frameCounter = 0.0;
			rotation = 0f;
			return;
		}
		if (type == 244)
		{
			float num23 = (float)Main.DiscoR / 255f;
			float num29 = (float)Main.DiscoG / 255f;
			float num30 = (float)Main.DiscoB / 255f;
			num23 *= 1f;
			num29 *= 1f;
			num30 *= 1f;
			Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), num23, num29, num30);
			AI_001_SetRainbowSlimeColor();
		}
		bool flag = false;
		if (!Main.dayTime || life != lifeMax || (double)position.Y > Main.worldSurface * 16.0 || Main.slimeRain)
		{
			flag = true;
		}
		if (Main.remixWorld && type == 59 && life == lifeMax)
		{
			flag = false;
		}
		if (type == 81)
		{
			flag = true;
			if (Main.rand.Next(30) == 0)
			{
				position += netOffset;
				int num31 = Dust.NewDust(position, width, height, 14, 0f, 0f, alpha, this.color);
				Dust obj = Main.dust[num31];
				obj.velocity *= 0.3f;
				position -= netOffset;
			}
		}
		if ((type == 377 || type == 446) && target != 255 && !Main.player[target].dead && Vector2.Distance(base.Center, Main.player[target].Center) <= 200f && !wet)
		{
			flag = true;
		}
		if (type == 183)
		{
			flag = true;
		}
		if (type == 304)
		{
			flag = true;
		}
		if (type == 667)
		{
			flag = true;
		}
		if (type == 244)
		{
			flag = true;
			ai[0] += 2f;
		}
		if (type == 147 && Main.rand.Next(10) == 0)
		{
			position += netOffset;
			int num32 = Dust.NewDust(position, width, height, 76);
			Main.dust[num32].noGravity = true;
			Dust obj2 = Main.dust[num32];
			obj2.velocity *= 0.1f;
			position -= netOffset;
		}
		if (type == 667)
		{
			Color color = default(Color);
			((Color)(ref color))._002Ector(204, 181, 72, 255);
			Lighting.AddLight((int)(base.Center.X / 16f), (int)(base.Center.Y / 16f), (float)(int)((Color)(ref color)).R / 255f * 1.1f, (float)(int)((Color)(ref color)).G / 255f * 1.1f, (float)(int)((Color)(ref color)).B / 255f * 1.1f);
			if (((Vector2)(ref velocity)).Length() > 1f || Main.rand.Next(4) != 0)
			{
				int num33 = 8;
				Vector2 val = position + new Vector2((float)(-num33), (float)(-num33));
				int num34 = width + num33 * 2;
				int num2 = height + num33 * 2;
				position += netOffset;
				int num3 = Dust.NewDust(val, num34, num2, 246);
				Main.dust[num3].noGravity = true;
				Main.dust[num3].noLightEmittence = true;
				Dust obj3 = Main.dust[num3];
				obj3.velocity *= 0.2f;
				Main.dust[num3].scale = 1.5f;
				position -= netOffset;
			}
		}
		if (type == 676)
		{
			Lighting.AddLight(base.Center, 23);
			if ((((Vector2)(ref velocity)).Length() > 1f && Main.rand.Next(3) == 0) || Main.rand.Next(5) == 0)
			{
				Dust dust2 = Dust.NewDustPerfect(Main.rand.NextVector2FromRectangle(base.Hitbox), 306);
				dust2.noGravity = true;
				dust2.noLightEmittence = true;
				dust2.alpha = 127;
				dust2.color = Main.hslToRgb(((float)Main.timeForVisualEffects / 300f + Main.rand.NextFloat() * 0.1f) % 1f, 1f, 0.65f);
				((Color)(ref dust2.color)).A = 0;
				dust2.velocity = dust2.position - base.Center;
				dust2.velocity *= 0.1f;
				dust2.velocity.X *= 0.25f;
				if (dust2.velocity.Y > 0f)
				{
					dust2.velocity.Y *= -1f;
				}
				dust2.scale = Main.rand.NextFloat() * 0.3f + 0.5f;
				dust2.fadeIn = 0.9f;
				dust2.position += netOffset;
			}
		}
		if (type == 184)
		{
			if (Main.rand.Next(8) == 0)
			{
				position += netOffset;
				int num4 = Dust.NewDust(position - velocity, width, height, 76);
				Main.dust[num4].noGravity = true;
				Dust obj4 = Main.dust[num4];
				obj4.velocity *= 0.15f;
				position -= netOffset;
			}
			flag = true;
			if (localAI[0] > 0f)
			{
				localAI[0] -= 1f;
			}
			if (!wet && !Main.player[target].npcTypeNoAggro[type])
			{
				Vector2 vector2 = default(Vector2);
				((Vector2)(ref vector2))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num5 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector2.X;
				float num6 = Main.player[target].position.Y - vector2.Y;
				float num7 = (float)Math.Sqrt(num5 * num5 + num6 * num6);
				if (Main.expertMode && num7 < 120f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
				{
					ai[0] = -40f;
					if (velocity.Y == 0f)
					{
						velocity.X *= 0.9f;
					}
					if (Main.netMode != 1 && localAI[0] == 0f)
					{
						Vector2 vector3 = default(Vector2);
						for (int i = 0; i < 5; i++)
						{
							((Vector2)(ref vector3))._002Ector((float)(i - 2), -4f);
							vector3.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
							vector3.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
							((Vector2)(ref vector3)).Normalize();
							vector3 *= 4f + (float)Main.rand.Next(-50, 51) * 0.01f;
							int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(9f, 9f);
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector2.X, vector2.Y, vector3.X, vector3.Y, 174, attackDamage_ForProjectiles, 0f, Main.myPlayer);
							localAI[0] = 30f;
						}
					}
				}
				else if (num7 < 200f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
				{
					ai[0] = -40f;
					if (velocity.Y == 0f)
					{
						velocity.X *= 0.9f;
					}
					if (Main.netMode != 1 && localAI[0] == 0f)
					{
						num6 = Main.player[target].position.Y - vector2.Y - (float)Main.rand.Next(0, 200);
						num7 = (float)Math.Sqrt(num5 * num5 + num6 * num6);
						num7 = 4.5f / num7;
						num5 *= num7;
						num6 *= num7;
						localAI[0] = 50f;
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector2.X, vector2.Y, num5, num6, 174, 9, 0f, Main.myPlayer);
					}
				}
			}
		}
		if (type == 535)
		{
			flag = true;
			if (localAI[0] > 0f)
			{
				localAI[0] -= 1f;
			}
			if (!wet && !Main.player[target].npcTypeNoAggro[type])
			{
				Vector2 vector4 = default(Vector2);
				((Vector2)(ref vector4))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num8 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector4.X;
				float num9 = Main.player[target].position.Y - vector4.Y;
				float num10 = (float)Math.Sqrt(num8 * num8 + num9 * num9);
				if (Main.expertMode && num10 < 120f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
				{
					ai[0] = -40f;
					if (velocity.Y == 0f)
					{
						velocity.X *= 0.9f;
					}
					if (Main.netMode != 1 && localAI[0] == 0f)
					{
						Vector2 vector5 = default(Vector2);
						for (int j = 0; j < 5; j++)
						{
							((Vector2)(ref vector5))._002Ector((float)(j - 2), -4f);
							vector5.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
							vector5.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
							((Vector2)(ref vector5)).Normalize();
							vector5 *= 4f + (float)Main.rand.Next(-50, 51) * 0.01f;
							int attackDamage_ForProjectiles2 = GetAttackDamage_ForProjectiles(9f, 9f);
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector4.X, vector4.Y, vector5.X, vector5.Y, 605, attackDamage_ForProjectiles2, 0f, Main.myPlayer);
							localAI[0] = 30f;
						}
					}
				}
				else if (num10 < 200f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
				{
					ai[0] = -40f;
					if (velocity.Y == 0f)
					{
						velocity.X *= 0.9f;
					}
					if (Main.netMode != 1 && localAI[0] == 0f)
					{
						num9 = Main.player[target].position.Y - vector4.Y - (float)Main.rand.Next(0, 200);
						num10 = (float)Math.Sqrt(num8 * num8 + num9 * num9);
						num10 = 4.5f / num10;
						num8 *= num10;
						num9 *= num10;
						localAI[0] = 50f;
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector4.X, vector4.Y, num8, num9, 605, 9, 0f, Main.myPlayer);
					}
				}
			}
		}
		if (type == 658)
		{
			flag = true;
			if (localAI[0] > 0f)
			{
				localAI[0] -= 1f;
			}
			if (!wet && Main.player[target].active && !Main.player[target].dead && !Main.player[target].npcTypeNoAggro[type])
			{
				Player obj5 = Main.player[target];
				Vector2 center = base.Center;
				float num11 = obj5.Center.X - center.X;
				float num13 = obj5.Center.Y - center.Y;
				float num14 = (float)Math.Sqrt(num11 * num11 + num13 * num13);
				int num15 = CountNPCS(658);
				if (Main.expertMode && num15 < 5 && Math.Abs(num11) < 500f && Math.Abs(num13) < 550f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
				{
					ai[0] = -40f;
					if (velocity.Y == 0f)
					{
						velocity.X *= 0.9f;
					}
					if (Main.netMode != 1 && localAI[0] == 0f)
					{
						Vector2 vector6 = default(Vector2);
						for (int k = 0; k < 3; k++)
						{
							((Vector2)(ref vector6))._002Ector((float)(k - 1), -4f);
							vector6.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
							vector6.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
							((Vector2)(ref vector6)).Normalize();
							vector6 *= 6f + (float)Main.rand.Next(-50, 51) * 0.01f;
							if (num14 > 350f)
							{
								vector6 *= 2f;
							}
							else if (num14 > 250f)
							{
								vector6 *= 1.5f;
							}
							int attackDamage_ForProjectiles_MultiLerp = GetAttackDamage_ForProjectiles_MultiLerp(15f, 17f, 20f);
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), center.X, center.Y, vector6.X, vector6.Y, 920, attackDamage_ForProjectiles_MultiLerp, 0f, Main.myPlayer);
							localAI[0] = 25f;
							if (num15 > 4)
							{
								break;
							}
						}
					}
				}
				else if (Math.Abs(num11) < 500f && Math.Abs(num13) < 550f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
				{
					float num16 = num14;
					ai[0] = -40f;
					if (velocity.Y == 0f)
					{
						velocity.X *= 0.9f;
					}
					if (Main.netMode != 1 && localAI[0] == 0f)
					{
						num13 = Main.player[target].position.Y - center.Y - (float)Main.rand.Next(0, 200);
						num14 = (float)Math.Sqrt(num11 * num11 + num13 * num13);
						num14 = 4.5f / num14;
						num14 *= 2f;
						if (num16 > 350f)
						{
							num14 *= 2f;
						}
						else if (num16 > 250f)
						{
							num14 *= 1.5f;
						}
						num11 *= num14;
						num13 *= num14;
						localAI[0] = 50f;
						int attackDamage_ForProjectiles_MultiLerp2 = GetAttackDamage_ForProjectiles_MultiLerp(15f, 17f, 20f);
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), center.X, center.Y, num11, num13, 920, attackDamage_ForProjectiles_MultiLerp2, 0f, Main.myPlayer);
					}
				}
			}
		}
		if (type == 659)
		{
			flag = true;
			if (localAI[0] > 0f)
			{
				localAI[0] -= 1f;
			}
			if (!wet && Main.player[target].active && !Main.player[target].dead && !Main.player[target].npcTypeNoAggro[type])
			{
				Player obj6 = Main.player[target];
				Vector2 center2 = base.Center;
				float num17 = obj6.Center.X - center2.X;
				float num18 = obj6.Center.Y - center2.Y;
				float num19 = (float)Math.Sqrt(num17 * num17 + num18 * num18);
				float num20 = num19;
				if (Math.Abs(num17) < 500f && Math.Abs(num18) < 550f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
				{
					ai[0] = -40f;
					if (velocity.Y == 0f)
					{
						velocity.X *= 0.9f;
					}
					if (Main.netMode != 1 && localAI[0] == 0f)
					{
						num18 = Main.player[target].position.Y - center2.Y - (float)Main.rand.Next(0, 200);
						num19 = (float)Math.Sqrt(num17 * num17 + num18 * num18);
						num19 = 4.5f / num19;
						num19 *= 2f;
						if (num20 > 350f)
						{
							num19 *= 1.75f;
						}
						else if (num20 > 250f)
						{
							num19 *= 1.25f;
						}
						num17 *= num19;
						num18 *= num19;
						localAI[0] = 40f;
						if (Main.expertMode)
						{
							localAI[0] = 30f;
						}
						int attackDamage_ForProjectiles_MultiLerp3 = GetAttackDamage_ForProjectiles_MultiLerp(15f, 17f, 20f);
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), center2.X, center2.Y, num17, num18, 921, attackDamage_ForProjectiles_MultiLerp3, 0f, Main.myPlayer);
					}
				}
			}
		}
		if (type == 204)
		{
			flag = true;
			if (localAI[0] > 0f)
			{
				localAI[0] -= 1f;
			}
			if (!wet && !Main.player[target].npcTypeNoAggro[type])
			{
				Vector2 vector7 = default(Vector2);
				((Vector2)(ref vector7))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num21 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector7.X;
				float num22 = Main.player[target].position.Y - vector7.Y;
				float num24 = (float)Math.Sqrt(num21 * num21 + num22 * num22);
				if (Main.expertMode && num24 < 200f && Collision.CanHit(new Vector2(position.X, position.Y - 20f), width, height + 20, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
				{
					ai[0] = -40f;
					if (velocity.Y == 0f)
					{
						velocity.X *= 0.9f;
					}
					if (Main.netMode != 1 && localAI[0] == 0f)
					{
						Vector2 vector8 = default(Vector2);
						for (int l = 0; l < 5; l++)
						{
							((Vector2)(ref vector8))._002Ector((float)(l - 2), -2f);
							vector8.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.02f;
							vector8.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.02f;
							((Vector2)(ref vector8)).Normalize();
							vector8 *= 3f + (float)Main.rand.Next(-50, 51) * 0.01f;
							int attackDamage_ForProjectiles3 = GetAttackDamage_ForProjectiles(13f, 13f);
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector7.X, vector7.Y, vector8.X, vector8.Y, 176, attackDamage_ForProjectiles3, 0f, Main.myPlayer);
							localAI[0] = 80f;
						}
					}
				}
				if (num24 < 400f && Collision.CanHit(new Vector2(position.X, position.Y - 20f), width, height + 20, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
				{
					ai[0] = -80f;
					if (velocity.Y == 0f)
					{
						velocity.X *= 0.9f;
					}
					if (Main.netMode != 1 && localAI[0] == 0f)
					{
						num22 = Main.player[target].position.Y - vector7.Y - (float)Main.rand.Next(-30, 20);
						num22 -= num24 * 0.05f;
						num21 = Main.player[target].position.X - vector7.X - (float)Main.rand.Next(-20, 20);
						num24 = (float)Math.Sqrt(num21 * num21 + num22 * num22);
						num24 = 7f / num24;
						num21 *= num24;
						num22 *= num24;
						localAI[0] = 65f;
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector7.X, vector7.Y, num21, num22, 176, 13, 0f, Main.myPlayer);
					}
				}
			}
		}
		if (type == 377 || type == 446)
		{
			if (localAI[2] < 90f)
			{
				localAI[2] += 1f;
			}
			else
			{
				friendly = false;
			}
		}
		if (type == 59)
		{
			position += netOffset;
			Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), 1f, 0.3f, 0.1f);
			int num25 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 1.7f);
			Main.dust[num25].noGravity = true;
			position -= netOffset;
		}
		if (ai[2] > 1f)
		{
			ai[2] -= 1f;
		}
		if (wet)
		{
			if (collideY)
			{
				velocity.Y = -2f;
			}
			if (velocity.Y < 0f && ai[3] == position.X)
			{
				direction *= -1;
				ai[2] = 200f;
			}
			if (velocity.Y > 0f)
			{
				ai[3] = position.X;
			}
			if (type == 59 && !Main.remixWorld)
			{
				if (velocity.Y > 2f)
				{
					velocity.Y *= 0.9f;
				}
				else if (directionY < 0)
				{
					velocity.Y -= 0.8f;
				}
				velocity.Y -= 0.5f;
				if (velocity.Y < -10f)
				{
					velocity.Y = -10f;
				}
			}
			else
			{
				if (velocity.Y > 2f)
				{
					velocity.Y *= 0.9f;
				}
				velocity.Y -= 0.5f;
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
			}
			if (ai[2] == 1f && flag)
			{
				TargetClosest();
			}
		}
		aiAction = 0;
		if (ai[2] == 0f)
		{
			ai[0] = -100f;
			ai[2] = 1f;
			TargetClosest();
		}
		if (velocity.Y == 0f)
		{
			if (collideY && oldVelocity.Y != 0f && Collision.SolidCollision(position, width, height))
			{
				position.X -= velocity.X + (float)direction;
			}
			if (ai[3] == position.X)
			{
				direction *= -1;
				ai[2] = 200f;
			}
			ai[3] = 0f;
			velocity.X *= 0.8f;
			if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
			{
				velocity.X = 0f;
			}
			if (flag)
			{
				ai[0] += 1f;
			}
			ai[0] += 1f;
			if (type == 59 && !Main.remixWorld)
			{
				ai[0] += 2f;
			}
			if (type == 71)
			{
				ai[0] += 3f;
			}
			if (type == 667)
			{
				ai[0] += 3f;
			}
			if (type == 138)
			{
				ai[0] += 2f;
			}
			if (type == 183)
			{
				ai[0] += 1f;
			}
			if (type == 658)
			{
				ai[0] += 5f;
			}
			if (type == 659)
			{
				ai[0] += 3f;
			}
			if (type == 304)
			{
				float num26 = (1 - life / lifeMax) * 10;
				ai[0] += num26;
			}
			if (type == 377 || type == 446)
			{
				ai[0] += 3f;
			}
			if (type == 81)
			{
				if (scale >= 0f)
				{
					ai[0] += 4f;
				}
				else
				{
					ai[0] += 1f;
				}
			}
			float num27 = -1000f;
			if (type == 659)
			{
				num27 = -500f;
			}
			if (type == 667)
			{
				num27 = -400f;
			}
			int num28 = 0;
			if (ai[0] >= 0f)
			{
				num28 = 1;
			}
			if (ai[0] >= num27 && ai[0] <= num27 * 0.5f)
			{
				num28 = 2;
			}
			if (ai[0] >= num27 * 2f && ai[0] <= num27 * 1.5f)
			{
				num28 = 3;
			}
			if (num28 > 0)
			{
				netUpdate = true;
				if (flag && ai[2] == 1f)
				{
					TargetClosest();
				}
				if (num28 == 3)
				{
					velocity.Y = -8f;
					if (type == 59 && !Main.remixWorld)
					{
						velocity.Y -= 2f;
					}
					velocity.X += 3 * direction;
					if (type == 59 && !Main.remixWorld)
					{
						velocity.X += 0.5f * (float)direction;
					}
					ai[0] = -200f;
					ai[3] = position.X;
				}
				else
				{
					velocity.Y = -6f;
					velocity.X += 2 * direction;
					if (type == 59 && !Main.remixWorld)
					{
						velocity.X += 2 * direction;
					}
					ai[0] = -120f;
					if (num28 == 1)
					{
						ai[0] += num27;
					}
					else
					{
						ai[0] += num27 * 2f;
					}
				}
				if (type == 659)
				{
					velocity.Y *= 1.6f;
					velocity.X *= 1.2f;
				}
				if (type == 685)
				{
					velocity.Y *= 0.5f;
					velocity.X *= 0.2f;
					if (Main.rand.Next(2) == 0)
					{
						direction *= -1;
					}
				}
				if (type == 141)
				{
					velocity.Y *= 1.3f;
					velocity.X *= 1.2f;
				}
				if (type == 377 || type == 446)
				{
					velocity.Y *= 0.9f;
					velocity.X *= 0.6f;
					if (flag)
					{
						direction = -direction;
						velocity.X *= -1f;
					}
					int i2 = (int)(base.Center.X / 16f);
					int j2 = (int)(base.Center.Y / 16f) - 1;
					if (WorldGen.SolidTile(i2, j2) && 0f - velocity.Y + (float)height > 16f)
					{
						velocity.Y = -(16 - height);
					}
				}
			}
			else if (ai[0] >= -30f)
			{
				aiAction = 1;
			}
		}
		else if (target < 255 && ((direction == 1 && velocity.X < 3f) || (direction == -1 && velocity.X > -3f)))
		{
			if (collideX && Math.Abs(velocity.X) == 0.2f)
			{
				position.X -= 1.4f * (float)direction;
			}
			if (collideY && oldVelocity.Y != 0f && Collision.SolidCollision(position, width, height))
			{
				position.X -= velocity.X + (float)direction;
			}
			if ((direction == -1 && (double)velocity.X < 0.01) || (direction == 1 && (double)velocity.X > -0.01))
			{
				velocity.X += 0.2f * (float)direction;
			}
			else
			{
				velocity.X *= 0.93f;
			}
		}
	}

	public void AI_001_SetRainbowSlimeColor()
	{
		((Color)(ref color)).R = (byte)Main.DiscoR;
		((Color)(ref color)).G = (byte)Main.DiscoG;
		((Color)(ref color)).B = (byte)Main.DiscoB;
		((Color)(ref color)).A = 100;
		alpha = 175;
	}

	private static int AI_001_Slimes_GenerateItemInsideBody(bool isBallooned)
	{
		int num = Main.rand.Next(4);
		if (isBallooned)
		{
			switch (Main.rand.Next(13))
			{
			default:
				return 4367;
			case 1:
				return 4368;
			case 2:
				return 4369;
			case 3:
				return 4370;
			case 4:
				return 4371;
			case 5:
				return 4612;
			case 6:
				return 4674;
			case 7:
			case 8:
			case 9:
				return 4343;
			case 10:
			case 11:
			case 12:
				return 4344;
			}
		}
		switch (num)
		{
		case 0:
			switch (Main.rand.Next(7))
			{
			case 0:
				return 290;
			case 1:
				return 292;
			case 2:
				return 296;
			case 3:
				return 2322;
			default:
				if (Main.netMode != 0 && Main.rand.Next(2) == 0)
				{
					return 2997;
				}
				return 2350;
			}
		case 1:
			return Main.rand.Next(4) switch
			{
				0 => 8, 
				1 => 166, 
				2 => 965, 
				_ => 58, 
			};
		case 2:
			return Main.rand.Next(ItemID.Sets.OreDropsFromSlime.Keys.ToList());
		default:
			return Main.rand.Next(3) switch
			{
				0 => 71, 
				1 => 72, 
				_ => 73, 
			};
		}
	}

	private void AI_110_Betsy()
	{
		//IL_01a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01be: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0180: Unknown result type (might be due to invalid IL or missing references)
		//IL_018c: Unknown result type (might be due to invalid IL or missing references)
		//IL_047a: Unknown result type (might be due to invalid IL or missing references)
		//IL_076f: Unknown result type (might be due to invalid IL or missing references)
		//IL_077b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0529: Unknown result type (might be due to invalid IL or missing references)
		//IL_0535: Unknown result type (might be due to invalid IL or missing references)
		//IL_0504: Unknown result type (might be due to invalid IL or missing references)
		//IL_1278: Unknown result type (might be due to invalid IL or missing references)
		//IL_127d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aad: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aca: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b24: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c04: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c10: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b88: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_07da: Unknown result type (might be due to invalid IL or missing references)
		//IL_07de: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0563: Unknown result type (might be due to invalid IL or missing references)
		//IL_0579: Unknown result type (might be due to invalid IL or missing references)
		//IL_057e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0583: Unknown result type (might be due to invalid IL or missing references)
		//IL_0586: Unknown result type (might be due to invalid IL or missing references)
		//IL_0588: Unknown result type (might be due to invalid IL or missing references)
		//IL_058f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0594: Unknown result type (might be due to invalid IL or missing references)
		//IL_0597: Unknown result type (might be due to invalid IL or missing references)
		//IL_08fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0903: Unknown result type (might be due to invalid IL or missing references)
		//IL_0925: Unknown result type (might be due to invalid IL or missing references)
		//IL_0934: Unknown result type (might be due to invalid IL or missing references)
		//IL_0939: Unknown result type (might be due to invalid IL or missing references)
		//IL_093e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0864: Unknown result type (might be due to invalid IL or missing references)
		//IL_0869: Unknown result type (might be due to invalid IL or missing references)
		//IL_086e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0880: Unknown result type (might be due to invalid IL or missing references)
		//IL_0882: Unknown result type (might be due to invalid IL or missing references)
		//IL_088e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0893: Unknown result type (might be due to invalid IL or missing references)
		//IL_0898: Unknown result type (might be due to invalid IL or missing references)
		//IL_089b: Unknown result type (might be due to invalid IL or missing references)
		//IL_05fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0605: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cca: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_096d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0987: Unknown result type (might be due to invalid IL or missing references)
		//IL_0995: Unknown result type (might be due to invalid IL or missing references)
		//IL_099b: Unknown result type (might be due to invalid IL or missing references)
		//IL_099d: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0823: Unknown result type (might be due to invalid IL or missing references)
		//IL_0826: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_06cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_05bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0620: Unknown result type (might be due to invalid IL or missing references)
		//IL_062a: Unknown result type (might be due to invalid IL or missing references)
		//IL_062f: Unknown result type (might be due to invalid IL or missing references)
		//IL_033a: Unknown result type (might be due to invalid IL or missing references)
		//IL_033f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0344: Unknown result type (might be due to invalid IL or missing references)
		//IL_0347: Unknown result type (might be due to invalid IL or missing references)
		//IL_039e: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0400: Unknown result type (might be due to invalid IL or missing references)
		//IL_0403: Unknown result type (might be due to invalid IL or missing references)
		//IL_08db: Unknown result type (might be due to invalid IL or missing references)
		//IL_08df: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0695: Unknown result type (might be due to invalid IL or missing references)
		//IL_0656: Unknown result type (might be due to invalid IL or missing references)
		//IL_065c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d66: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d70: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_09db: Unknown result type (might be due to invalid IL or missing references)
		//IL_035f: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_041b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0387: Unknown result type (might be due to invalid IL or missing references)
		//IL_038b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0390: Unknown result type (might be due to invalid IL or missing references)
		//IL_0443: Unknown result type (might be due to invalid IL or missing references)
		//IL_0447: Unknown result type (might be due to invalid IL or missing references)
		//IL_044c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d91: Unknown result type (might be due to invalid IL or missing references)
		//IL_03dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_100f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1024: Unknown result type (might be due to invalid IL or missing references)
		//IL_1033: Unknown result type (might be due to invalid IL or missing references)
		//IL_1038: Unknown result type (might be due to invalid IL or missing references)
		//IL_1042: Unknown result type (might be due to invalid IL or missing references)
		//IL_105d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1062: Unknown result type (might be due to invalid IL or missing references)
		//IL_1067: Unknown result type (might be due to invalid IL or missing references)
		//IL_1069: Unknown result type (might be due to invalid IL or missing references)
		//IL_106d: Unknown result type (might be due to invalid IL or missing references)
		//IL_107e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1080: Unknown result type (might be due to invalid IL or missing references)
		//IL_1085: Unknown result type (might be due to invalid IL or missing references)
		//IL_108d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1094: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ee8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eed: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f73: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f78: Unknown result type (might be due to invalid IL or missing references)
		//IL_1158: Unknown result type (might be due to invalid IL or missing references)
		//IL_115d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1162: Unknown result type (might be due to invalid IL or missing references)
		//IL_116a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1171: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a4: Unknown result type (might be due to invalid IL or missing references)
		NPCUtils.TargetClosestBetsy(this, faceTarget: false);
		NPCAimedTarget targetData = GetTargetData();
		int num = -1;
		float num12 = 1f;
		int num23 = 35;
		int num34 = 35;
		float num43 = 10f;
		float num44 = 0.45f;
		float num45 = 7.5f;
		float num46 = 30f;
		float num47 = 30f;
		float num2 = 23f;
		float num3 = 600f;
		float num4 = 12f;
		float num5 = 40f;
		float num6 = 80f;
		float num7 = num5 + num6;
		float num8 = 1500f;
		float num9 = 60f;
		float num10 = 13f;
		float amount = 1f / 30f;
		float num11 = 12f;
		int num13 = 10;
		int num14 = 6 * num13;
		float num15 = 60f;
		float num16 = num9 + (float)num14 + num15;
		float num17 = 60f;
		float num18 = 1f;
		float num19 = (float)Math.PI * 2f * (num18 / num17);
		float num20 = 0.1f;
		float num21 = 32f;
		float num22 = 90f;
		float num24 = 20f;
		_ = ai[0];
		if (ai[0] == 0f)
		{
			if ((ai[1] += 1f) >= num43)
			{
				ai[1] = 0f;
				ai[0] = 1f;
				ai[2] = 0f;
				netUpdate = true;
			}
		}
		else if (ai[0] == 1f)
		{
			if (ai[2] == 0f)
			{
				ai[2] = ((base.Center.X < targetData.Center.X) ? 1 : (-1));
			}
			Vector2 destination = targetData.Center + new Vector2((0f - ai[2]) * 300f, -200f);
			Vector2 desiredVelocity = DirectionTo(destination) * num45;
			SimpleFlyMovement(desiredVelocity, num44);
			int num25 = ((base.Center.X < targetData.Center.X) ? 1 : (-1));
			direction = (spriteDirection = num25);
			if ((ai[1] += 1f) >= num46)
			{
				int num26 = 1;
				if (ai[3] == 5f && Main.rand.Next(3) == 0)
				{
					ai[3] += 1f;
				}
				switch ((int)ai[3])
				{
				case 0:
				case 1:
				case 3:
					num26 = 2;
					break;
				case 2:
					num26 = 3;
					break;
				case 4:
					num26 = 4;
					break;
				case 5:
					num26 = 5;
					break;
				case 6:
					num26 = 3;
					break;
				case 7:
					num26 = 6;
					break;
				}
				ai[0] = num26;
				ai[1] = 0f;
				ai[2] = 0f;
				ai[3] += 1f;
				netUpdate = true;
				if (ai[3] >= 8f)
				{
					ai[3] = 0f;
				}
				switch (num26)
				{
				case 2:
				{
					Vector2 vector2 = DirectionTo(targetData.Center);
					spriteDirection = ((vector2.X > 0f) ? 1 : (-1));
					rotation = vector2.ToRotation();
					if (spriteDirection == -1)
					{
						rotation += (float)Math.PI;
					}
					velocity = vector2 * num2;
					break;
				}
				case 3:
				{
					Vector2 vector3 = default(Vector2);
					((Vector2)(ref vector3))._002Ector((float)((targetData.Center.X > base.Center.X) ? 1 : (-1)), 0f);
					spriteDirection = ((vector3.X > 0f) ? 1 : (-1));
					velocity = vector3 * -2f;
					break;
				}
				case 5:
				{
					Vector2 vector = DirectionTo(targetData.Center);
					spriteDirection = ((vector.X > 0f) ? 1 : (-1));
					rotation = vector.ToRotation();
					if (spriteDirection == -1)
					{
						rotation += (float)Math.PI;
					}
					velocity = vector * num21;
					break;
				}
				}
			}
		}
		else if (ai[0] == 2f)
		{
			if (ai[1] == 0f)
			{
				SoundEngine.PlayTrackedSound(in SoundID.DD2_BetsyWindAttack, base.Center);
			}
			if ((ai[1] += 1f) >= num47)
			{
				ai[0] = 1f;
				ai[1] = 0f;
				ai[2] = 0f;
			}
		}
		else if (ai[0] == 3f)
		{
			ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[2]));
			if (activeSound != null)
			{
				activeSound.Position = base.Center;
			}
			ai[1] += 1f;
			int num27 = ((base.Center.X < targetData.Center.X) ? 1 : (-1));
			ai[2] = num27;
			if (ai[1] < num5)
			{
				Vector2 vector4 = targetData.Center + new Vector2((float)num27 * (0f - num3), -250f);
				Vector2 vector5 = DirectionTo(vector4) * num4;
				if (Distance(vector4) < num4)
				{
					base.Center = vector4;
				}
				else
				{
					position += vector5;
				}
				if (Vector2.Distance(vector4, base.Center) < 16f)
				{
					ai[1] = num5 - 1f;
				}
				num12 = 1.5f;
			}
			if (ai[1] == num5)
			{
				int num28 = ((targetData.Center.X > base.Center.X) ? 1 : (-1));
				velocity = new Vector2((float)num28, 0f) * 10f;
				direction = (spriteDirection = num28);
				if (Main.netMode != 1)
				{
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center, velocity, 687, num23, 0f, Main.myPlayer, 0f, whoAmI);
				}
				localAI[2] = SoundEngine.PlayTrackedSound(in SoundID.DD2_BetsyFlameBreath, base.Center).ToFloat();
			}
			if (ai[1] >= num5)
			{
				num12 = 1.5f;
				if (Math.Abs(targetData.Center.X - base.Center.X) > 550f && Math.Abs(velocity.X) < 20f)
				{
					velocity.X += (float)Math.Sign(velocity.X) * 0.5f;
				}
			}
			if (ai[1] >= num7)
			{
				ai[0] = 1f;
				ai[1] = 0f;
				ai[2] = 0f;
			}
		}
		else if (ai[0] == 4f)
		{
			int num29 = ((base.Center.X < targetData.Center.X) ? 1 : (-1));
			ai[2] = num29;
			if (ai[1] < num9)
			{
				Vector2 vector6 = targetData.Center + new Vector2((float)num29 * (0f - num8), -350f);
				Vector2 value = DirectionTo(vector6) * num10;
				velocity = Vector2.Lerp(velocity, value, amount);
				int num30 = ((base.Center.X < targetData.Center.X) ? 1 : (-1));
				direction = (spriteDirection = num30);
				if (Vector2.Distance(vector6, base.Center) < 16f)
				{
					ai[1] = num9 - 1f;
				}
				num12 = 1.5f;
			}
			else if (ai[1] == num9)
			{
				Vector2 v = DirectionTo(targetData.Center);
				v.Y *= 0.25f;
				v = v.SafeNormalize(Vector2.UnitX * (float)direction);
				spriteDirection = ((v.X > 0f) ? 1 : (-1));
				rotation = v.ToRotation();
				if (spriteDirection == -1)
				{
					rotation += (float)Math.PI;
				}
				velocity = v * num11;
			}
			else
			{
				position.X += DirectionTo(targetData.Center).X * 7f;
				position.Y += DirectionTo(targetData.Center + new Vector2(0f, -400f)).Y * 6f;
				if (ai[1] <= num16 - num15)
				{
					num12 = 1.5f;
				}
				float num31 = 30f;
				Vector2 vector7 = base.Center + Utils.RotatedBy(new Vector2((110f + num31) * (float)direction, 20f), rotation);
				int num32 = (int)(ai[1] - num9 + 1f);
				if (num32 <= num14 && num32 % num13 == 0 && Main.netMode != 1)
				{
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector7, velocity, 686, num34, 0f, Main.myPlayer);
				}
			}
			if (ai[1] > num16 - num15)
			{
				velocity.Y -= 0.1f;
			}
			ai[1] += 1f;
			if (ai[1] >= num16)
			{
				ai[0] = 1f;
				ai[1] = 0f;
				ai[2] = 0f;
			}
		}
		else if (ai[0] == 5f)
		{
			velocity = velocity.RotatedBy((0f - num19) * (float)direction);
			position.Y -= num20;
			position += DirectionTo(targetData.Center) * 10f;
			rotation -= num19 * (float)direction;
			num12 *= 0.7f;
			if (ai[1] == 1f)
			{
				SoundEngine.PlayTrackedSound(in SoundID.DD2_BetsyFlyingCircleAttack, base.Center);
			}
			if ((ai[1] += 1f) >= num17)
			{
				ai[0] = 1f;
				ai[1] = 0f;
				ai[2] = 0f;
				velocity /= 2f;
			}
		}
		else if (ai[0] == 6f)
		{
			if (ai[1] == 0f)
			{
				Vector2 destination2 = targetData.Center + new Vector2(0f, -200f);
				Vector2 desiredVelocity2 = DirectionTo(destination2) * num45 * 2f;
				SimpleFlyMovement(desiredVelocity2, num44 * 2f);
				int num33 = ((base.Center.X < targetData.Center.X) ? 1 : (-1));
				direction = (spriteDirection = num33);
				ai[2] += 1f;
				if (Distance(targetData.Center) < 350f || ai[2] >= 180f)
				{
					ai[1] = 1f;
					netUpdate = true;
				}
			}
			else
			{
				if (ai[1] == 1f)
				{
					SoundEngine.PlayTrackedSound(in SoundID.DD2_BetsyScream);
				}
				if (ai[1] < num24)
				{
					velocity *= 0.95f;
				}
				else
				{
					velocity *= 0.98f;
				}
				if (ai[1] == num24)
				{
					if (velocity.Y > 0f)
					{
						velocity.Y /= 3f;
					}
					velocity.Y -= 3f;
				}
				num12 *= 0.85f;
				if (ai[1] == 20f || ai[1] == 25f || ai[1] == 30f)
				{
					Point point = base.Center.ToTileCoordinates();
					int num35 = 30;
					int num36 = 35;
					int num37 = 4;
					for (int i = point.X - num35; i <= point.X + num35; i++)
					{
						bool flag = false;
						for (int j = point.Y - num36 / 3; j < point.Y + num36; j++)
						{
							Tile tileSafely = Framing.GetTileSafely(i, j);
							bool flag2 = tileSafely.active() && Main.tileSolid[tileSafely.type] && !Main.tileFrameImportant[tileSafely.type];
							if (flag && flag2)
							{
								int num38 = WorldGen.KillTile_GetTileDustAmount(fail: true, tileSafely, i, j);
								for (int k = 0; k < num38; k++)
								{
									Dust obj = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
									obj.velocity.Y -= 3f + (float)num37 * 1.5f;
									obj.velocity.Y *= Main.rand.NextFloat();
									obj.scale += (float)num37 * 0.03f;
								}
								for (int l = 0; l < num38 - 1; l++)
								{
									Dust obj2 = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
									obj2.velocity.Y -= 1f + (float)num37;
									obj2.velocity.Y *= Main.rand.NextFloat();
								}
								if (num38 > 0 && Main.rand.Next(3) != 0)
								{
									float num39 = Math.Abs(point.X - i) / (num35 / 2);
									Gore gore = Gore.NewGoreDirect(position, Vector2.Zero, 61 + Main.rand.Next(3), 1f - (float)num37 * 0.15f + num39 * 0.5f);
									gore.velocity.Y -= 0.1f + (float)num37 * 0.5f + num39 * (float)num37 * 1f;
									gore.velocity.Y *= Main.rand.NextFloat();
									gore.position = new Vector2((float)(i * 16 + 20), (float)(j * 16 + 20));
								}
							}
							flag = !flag2;
						}
					}
				}
				bool flag3 = ai[1] == 20f || ai[1] == 45f || ai[1] == 70f;
				if (CountNPCS(560) > 4)
				{
					flag3 = false;
				}
				if (flag3 && Main.netMode != 1)
				{
					for (int m = 0; m < 1; m++)
					{
						Vector2 vector8 = base.Center + ((float)Math.PI * 2f * Main.rand.NextFloat()).ToRotationVector2() * new Vector2(2f, 1f) * 300f * (0.6f + Main.rand.NextFloat() * 0.4f);
						if (Vector2.Distance(vector8, targetData.Center) > 100f)
						{
							Point point2 = vector8.ToPoint();
							NewNPC(GetSpawnSourceForNPCFromNPCAI(), point2.X, point2.Y, 560, whoAmI);
							SoundEngine.PlayTrackedSound(in SoundID.DD2_BetsySummon, vector8);
						}
					}
					List<NPC> list = new List<NPC>();
					for (int n = 0; n < 200; n++)
					{
						NPC nPC = Main.npc[n];
						if (nPC.active && nPC.type == 549)
						{
							list.Add(nPC);
						}
					}
					if (list.Count > 0)
					{
						for (int num40 = 0; num40 < 3; num40++)
						{
							NPC nPC2 = list[Main.rand.Next(list.Count)];
							Point point3 = nPC2.Center.ToPoint();
							NewNPC(GetSpawnSourceForNPCFromNPCAI(), point3.X, point3.Y, 560);
							SoundEngine.PlayTrackedSound(in SoundID.DD2_BetsySummon, nPC2.Center);
						}
					}
				}
				ai[1] += 1f;
			}
			if (ai[1] >= num22)
			{
				ai[0] = 1f;
				ai[1] = 0f;
				ai[2] = 0f;
			}
		}
		localAI[0] += num12;
		if (localAI[0] >= 36f)
		{
			localAI[0] = 0f;
		}
		if (num != -1)
		{
			localAI[0] = num * 4;
		}
		if ((localAI[1] += 1f) >= 60f)
		{
			localAI[1] = 0f;
		}
		float num41 = DirectionTo(targetData.Center).ToRotation();
		float num42 = 0.04f;
		switch ((int)ai[0])
		{
		case 2:
		case 5:
			num42 = 0f;
			break;
		case 3:
			num42 = 0.01f;
			num41 = 0f;
			if (spriteDirection == -1)
			{
				num41 -= (float)Math.PI;
			}
			if (ai[1] >= num5)
			{
				num41 += (float)spriteDirection * (float)Math.PI / 12f;
				num42 = 0.05f;
			}
			break;
		case 4:
			num42 = 0.01f;
			num41 = (float)Math.PI;
			if (spriteDirection == 1)
			{
				num41 += (float)Math.PI;
			}
			break;
		case 6:
			num42 = 0.02f;
			num41 = 0f;
			if (spriteDirection == -1)
			{
				num41 -= (float)Math.PI;
			}
			break;
		}
		if (spriteDirection == -1)
		{
			num41 += (float)Math.PI;
		}
		if (num42 != 0f)
		{
			rotation = rotation.AngleTowards(num41, num42);
		}
		if (SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[2])) == null)
		{
			localAI[2] = SlotId.Invalid.ToFloat();
		}
	}

	private void AI_026_Unicorns()
	{
		//IL_02bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0258: Unknown result type (might be due to invalid IL or missing references)
		//IL_026c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0271: Unknown result type (might be due to invalid IL or missing references)
		//IL_0291: Unknown result type (might be due to invalid IL or missing references)
		//IL_030a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0319: Unknown result type (might be due to invalid IL or missing references)
		//IL_031e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0323: Unknown result type (might be due to invalid IL or missing references)
		//IL_0343: Unknown result type (might be due to invalid IL or missing references)
		//IL_034f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0361: Unknown result type (might be due to invalid IL or missing references)
		//IL_0369: Unknown result type (might be due to invalid IL or missing references)
		//IL_036e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0375: Unknown result type (might be due to invalid IL or missing references)
		//IL_0382: Unknown result type (might be due to invalid IL or missing references)
		//IL_0388: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_072a: Unknown result type (might be due to invalid IL or missing references)
		//IL_072f: Unknown result type (might be due to invalid IL or missing references)
		//IL_073b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0745: Unknown result type (might be due to invalid IL or missing references)
		//IL_074a: Unknown result type (might be due to invalid IL or missing references)
		//IL_074f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0756: Unknown result type (might be due to invalid IL or missing references)
		//IL_076c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0772: Unknown result type (might be due to invalid IL or missing references)
		//IL_077f: Unknown result type (might be due to invalid IL or missing references)
		//IL_078d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0792: Unknown result type (might be due to invalid IL or missing references)
		//IL_0795: Unknown result type (might be due to invalid IL or missing references)
		//IL_0797: Unknown result type (might be due to invalid IL or missing references)
		//IL_079e: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_07bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_0634: Unknown result type (might be due to invalid IL or missing references)
		//IL_063f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c98: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cae: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0811: Unknown result type (might be due to invalid IL or missing references)
		//IL_0816: Unknown result type (might be due to invalid IL or missing references)
		//IL_0822: Unknown result type (might be due to invalid IL or missing references)
		//IL_082c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0831: Unknown result type (might be due to invalid IL or missing references)
		//IL_0836: Unknown result type (might be due to invalid IL or missing references)
		//IL_083d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0853: Unknown result type (might be due to invalid IL or missing references)
		//IL_0859: Unknown result type (might be due to invalid IL or missing references)
		//IL_0866: Unknown result type (might be due to invalid IL or missing references)
		//IL_0874: Unknown result type (might be due to invalid IL or missing references)
		//IL_0879: Unknown result type (might be due to invalid IL or missing references)
		//IL_087c: Unknown result type (might be due to invalid IL or missing references)
		//IL_087e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0885: Unknown result type (might be due to invalid IL or missing references)
		//IL_088a: Unknown result type (might be due to invalid IL or missing references)
		//IL_088f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0895: Unknown result type (might be due to invalid IL or missing references)
		//IL_089c: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_08bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_08cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_08db: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ccd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0afc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0975: Unknown result type (might be due to invalid IL or missing references)
		//IL_098b: Unknown result type (might be due to invalid IL or missing references)
		//IL_05be: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d17: Unknown result type (might be due to invalid IL or missing references)
		//IL_05dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1410: Unknown result type (might be due to invalid IL or missing references)
		//IL_1439: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1303: Unknown result type (might be due to invalid IL or missing references)
		//IL_1308: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fde: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ffe: Unknown result type (might be due to invalid IL or missing references)
		//IL_2004: Unknown result type (might be due to invalid IL or missing references)
		//IL_2012: Unknown result type (might be due to invalid IL or missing references)
		//IL_2017: Unknown result type (might be due to invalid IL or missing references)
		//IL_1553: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1570: Unknown result type (might be due to invalid IL or missing references)
		//IL_1889: Unknown result type (might be due to invalid IL or missing references)
		//IL_189a: Unknown result type (might be due to invalid IL or missing references)
		int num = 30;
		int num12 = 10;
		bool flag = false;
		bool flag2 = false;
		bool flag3 = false;
		if (velocity.Y == 0f && ((velocity.X > 0f && direction < 0) || (velocity.X < 0f && direction > 0)))
		{
			flag2 = true;
			ai[3] += 1f;
		}
		if (type == 546)
		{
			num12 = 4;
			bool flag4 = velocity.Y == 0f;
			for (int i = 0; i < 200; i++)
			{
				if (i != whoAmI && Main.npc[i].active && Main.npc[i].type == type && Math.Abs(position.X - Main.npc[i].position.X) + Math.Abs(position.Y - Main.npc[i].position.Y) < (float)width)
				{
					if (position.X < Main.npc[i].position.X)
					{
						velocity.X -= 0.05f;
					}
					else
					{
						velocity.X += 0.05f;
					}
					if (position.Y < Main.npc[i].position.Y)
					{
						velocity.Y -= 0.05f;
					}
					else
					{
						velocity.Y += 0.05f;
					}
				}
			}
			if (flag4)
			{
				velocity.Y = 0f;
			}
		}
		if (type == 315)
		{
			int num18 = 480;
			if (localAI[0]++ >= (float)num18)
			{
				localAI[0] = 0f;
				int num19 = target;
				if (Main.netMode != 1 && num19 != 255)
				{
					int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(40f, 30f);
					Projectile.NewProjectile(GetSpawnSourceForNPCFromNPCAI(), base.Center + Main.rand.NextVector2Circular(40f, 40f), new Vector2(velocity.X, Main.rand.NextFloatDirection() * 3f), 1001, attackDamage_ForProjectiles, 0f, Main.myPlayer, num19);
				}
			}
			Lighting.AddLight(base.Center, 0.4f, 0.36f, 0.2f);
			int num20 = frame.Height;
			if (num20 < 1)
			{
				num20 = 1;
			}
			int num21 = frame.Y / num20;
			if (num21 >= 4 && num21 <= 7)
			{
				Vector2 vector = base.Bottom + new Vector2(-30f, -8f);
				Vector2 vector2 = default(Vector2);
				((Vector2)(ref vector2))._002Ector(60f, 8f);
				if (Main.rand.Next(3) != 0)
				{
					Dust dust = Dust.NewDustPerfect(vector + new Vector2(Main.rand.NextFloat() * vector2.X, Main.rand.NextFloat() * vector2.Y), 6, velocity);
					dust.scale = 0.6f;
					dust.fadeIn = 1.1f;
					dust.noGravity = true;
					dust.noLight = true;
				}
			}
		}
		if (position.X == oldPosition.X || ai[3] >= (float)num || flag2)
		{
			ai[3] += 1f;
			flag3 = true;
		}
		else if (ai[3] > 0f)
		{
			ai[3] -= 1f;
		}
		if (ai[3] > (float)(num * num12))
		{
			ai[3] = 0f;
		}
		if (justHit)
		{
			ai[3] = 0f;
		}
		if (ai[3] == (float)num)
		{
			netUpdate = true;
		}
		Vector2 vector3 = default(Vector2);
		((Vector2)(ref vector3))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
		float num24 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector3.X;
		float num22 = Main.player[target].position.Y - vector3.Y;
		float num23 = (float)Math.Sqrt(num24 * num24 + num22 * num22);
		if (num23 < 200f && !flag3)
		{
			ai[3] = 0f;
		}
		if (type == 410)
		{
			ai[1] += 1f;
			bool flag5 = ai[1] >= 240f;
			if (!flag5 && velocity.Y == 0f)
			{
				for (int j = 0; j < 255; j++)
				{
					if (Main.player[j].active && !Main.player[j].dead && Main.player[j].Distance(base.Center) < 800f && Main.player[j].Center.Y < base.Center.Y && Math.Abs(Main.player[j].Center.X - base.Center.X) < 20f)
					{
						flag5 = true;
						break;
					}
				}
			}
			if (flag5 && Main.netMode != 1)
			{
				for (int k = 0; k < 3; k++)
				{
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, (Main.rand.NextFloat() - 0.5f) * 2f, -4f - 10f * Main.rand.NextFloat(), 538, 50, 0f, Main.myPlayer);
				}
				HitEffect(9999);
				active = false;
				return;
			}
		}
		else if (type == 423)
		{
			if (ai[2] == 1f)
			{
				ai[1] += 1f;
				velocity.X *= 0.7f;
				if (ai[1] < 30f)
				{
					Vector2 vector4 = base.Center + Vector2.UnitX * (float)spriteDirection * -20f;
					Dust obj = Main.dust[Dust.NewDust(vector4, 0, 0, 242)];
					Vector2 vector5 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					obj.position = vector4 + vector5 * 20f;
					obj.velocity = -vector5 * 2f;
					obj.scale = 0.5f + vector5.X * (float)(-spriteDirection);
					obj.fadeIn = 1f;
					obj.noGravity = true;
				}
				else if (ai[1] == 30f)
				{
					for (int l = 0; l < 20; l++)
					{
						Vector2 vector6 = base.Center + Vector2.UnitX * (float)spriteDirection * -20f;
						Dust obj2 = Main.dust[Dust.NewDust(vector6, 0, 0, 242)];
						Vector2 vector7 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						obj2.position = vector6 + vector7 * 4f;
						obj2.velocity = vector7 * 4f + Vector2.UnitX * Main.rand.NextFloat() * (float)spriteDirection * -5f;
						obj2.scale = 0.5f + vector7.X * (float)(-spriteDirection);
						obj2.fadeIn = 1f;
						obj2.noGravity = true;
					}
				}
				if (velocity.X > -0.5f && velocity.X < 0.5f)
				{
					velocity.X = 0f;
				}
				if (ai[1] == 30f && Main.netMode != 1)
				{
					int attackDamage_ForProjectiles2 = GetAttackDamage_ForProjectiles(50f, 35f);
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X + (float)(spriteDirection * -20), base.Center.Y, spriteDirection * -7, 0f, 575, attackDamage_ForProjectiles2, 0f, Main.myPlayer, target);
				}
				if (ai[1] >= 60f)
				{
					ai[1] = -Main.rand.Next(320, 601);
					ai[2] = 0f;
				}
			}
			else
			{
				ai[1] += 1f;
				if (ai[1] >= 180f && num23 < 500f && velocity.Y == 0f)
				{
					flag = true;
					ai[1] = 0f;
					ai[2] = 1f;
					netUpdate = true;
				}
				else if (velocity.Y == 0f && num23 < 100f && Math.Abs(velocity.X) > 3f && ((base.Center.X < Main.player[target].Center.X && velocity.X > 0f) || (base.Center.X > Main.player[target].Center.X && velocity.X < 0f)))
				{
					velocity.Y -= 4f;
				}
			}
		}
		else if (type == 155 || type == 329)
		{
			if (velocity.Y == 0f && num23 < 100f && Math.Abs(velocity.X) > 3f && ((position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2) && velocity.X > 0f) || (position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2) && velocity.X < 0f)))
			{
				velocity.Y -= 4f;
			}
		}
		else if (type == 546 && velocity.Y == 0f && Math.Abs(velocity.X) > 3f && ((base.Center.X < Main.player[target].Center.X && velocity.X > 0f) || (base.Center.X > Main.player[target].Center.X && velocity.X < 0f)))
		{
			velocity.Y -= 4f;
			SoundEngine.PlaySound(3, base.Center, 11);
		}
		if (type == 546 && !Main.player[target].ZoneDesert)
		{
			int num2 = direction;
			TargetClosest();
			if (!Main.player[target].ZoneDesert)
			{
				EncourageDespawn(10);
				ai[3] = num;
				direction = num2;
			}
		}
		if (ai[3] < (float)num)
		{
			if ((type == 329 || type == 315) && !Main.pumpkinMoon)
			{
				EncourageDespawn(10);
			}
			else
			{
				TargetClosest();
			}
		}
		else
		{
			if (velocity.X == 0f)
			{
				if (velocity.Y == 0f)
				{
					ai[0] += 1f;
					if (ai[0] >= 2f)
					{
						direction *= -1;
						spriteDirection = direction;
						ai[0] = 0f;
					}
				}
			}
			else
			{
				ai[0] = 0f;
			}
			directionY = -1;
			if (direction == 0)
			{
				direction = 1;
			}
		}
		float num3 = 6f;
		float num4 = 0.07f;
		if (!flag && (velocity.Y == 0f || wet || (velocity.X <= 0f && direction < 0) || (velocity.X >= 0f && direction > 0)))
		{
			if (type == 155)
			{
				if (velocity.X > 0f && direction < 0)
				{
					velocity.X *= 0.95f;
				}
				if (velocity.X < 0f && direction > 0)
				{
					velocity.X *= 0.95f;
				}
			}
			else if (type == 329)
			{
				if (velocity.X > 0f && direction < 0)
				{
					velocity.X *= 0.9f;
				}
				if (velocity.X < 0f && direction > 0)
				{
					velocity.X *= 0.9f;
				}
				if (direction > 0 && velocity.X < 3f)
				{
					velocity.X += 0.1f;
				}
				if (direction < 0 && velocity.X > -3f)
				{
					velocity.X -= 0.1f;
				}
			}
			else if (type == 315)
			{
				if (velocity.X > 0f && direction < 0)
				{
					velocity.X *= 0.95f;
				}
				if (velocity.X < 0f && direction > 0)
				{
					velocity.X *= 0.95f;
				}
				if (velocity.X < 0f - num3 || velocity.X > num3)
				{
					if (velocity.Y == 0f)
					{
						velocity *= 0.8f;
					}
				}
				else if (velocity.X < num3 && direction == 1)
				{
					velocity.X += 0.07f;
					if (velocity.X > num3)
					{
						velocity.X = num3;
					}
				}
				else if (velocity.X > 0f - num3 && direction == -1)
				{
					velocity.X -= 0.07f;
					if (velocity.X < 0f - num3)
					{
						velocity.X = 0f - num3;
					}
				}
			}
			else if (type == 410)
			{
				if (Math.Sign(velocity.X) != direction)
				{
					velocity.X *= 0.9f;
				}
				num3 = 6f;
				num4 = 0.2f;
			}
			else if (type == 423)
			{
				if (Math.Sign(velocity.X) != direction)
				{
					velocity.X *= 0.85f;
				}
				num3 = 10f;
				num4 = 0.2f;
			}
			else if (type == 546)
			{
				if (Math.Sign(velocity.X) != direction)
				{
					velocity.X *= 0.92f;
				}
				float num5 = MathHelper.Lerp(0.6f, 1f, Math.Abs(Main.windSpeedTarget)) * (float)Math.Sign(Main.windSpeedTarget);
				if (!Main.player[target].ZoneSandstorm)
				{
					num5 = 0f;
				}
				num3 = 4f + num5 * (float)direction * 3f;
				num4 = 0.05f;
			}
			if (velocity.X < 0f - num3 || velocity.X > num3)
			{
				if (velocity.Y == 0f)
				{
					velocity *= 0.8f;
				}
			}
			else if (velocity.X < num3 && direction == 1)
			{
				velocity.X += num4;
				if (velocity.X > num3)
				{
					velocity.X = num3;
				}
			}
			else if (velocity.X > 0f - num3 && direction == -1)
			{
				velocity.X -= num4;
				if (velocity.X < 0f - num3)
				{
					velocity.X = 0f - num3;
				}
			}
		}
		if (velocity.Y >= 0f)
		{
			int num6 = 0;
			if (velocity.X < 0f)
			{
				num6 = -1;
			}
			if (velocity.X > 0f)
			{
				num6 = 1;
			}
			Vector2 vector8 = position;
			vector8.X += velocity.X;
			int num7 = (int)((vector8.X + (float)(width / 2) + (float)((width / 2 + 1) * num6)) / 16f);
			int num8 = (int)((vector8.Y + (float)height - 1f) / 16f);
			if (Main.tile[num7, num8] == null)
			{
				Main.tile[num7, num8] = default(Tile);
			}
			if (Main.tile[num7, num8 - 1] == null)
			{
				Main.tile[num7, num8 - 1] = default(Tile);
			}
			if (Main.tile[num7, num8 - 2] == null)
			{
				Main.tile[num7, num8 - 2] = default(Tile);
			}
			if (Main.tile[num7, num8 - 3] == null)
			{
				Main.tile[num7, num8 - 3] = default(Tile);
			}
			if (Main.tile[num7, num8 + 1] == null)
			{
				Main.tile[num7, num8 + 1] = default(Tile);
			}
			if ((float)(num7 * 16) < vector8.X + (float)width && (float)(num7 * 16 + 16) > vector8.X && ((Main.tile[num7, num8].nactive() && !Main.tile[num7, num8].topSlope() && !Main.tile[num7, num8 - 1].topSlope() && Main.tileSolid[Main.tile[num7, num8].type] && !Main.tileSolidTop[Main.tile[num7, num8].type]) || (Main.tile[num7, num8 - 1].halfBrick() && Main.tile[num7, num8 - 1].nactive())) && (!Main.tile[num7, num8 - 1].nactive() || !Main.tileSolid[Main.tile[num7, num8 - 1].type] || Main.tileSolidTop[Main.tile[num7, num8 - 1].type] || (Main.tile[num7, num8 - 1].halfBrick() && (!Main.tile[num7, num8 - 4].nactive() || !Main.tileSolid[Main.tile[num7, num8 - 4].type] || Main.tileSolidTop[Main.tile[num7, num8 - 4].type]))) && (!Main.tile[num7, num8 - 2].nactive() || !Main.tileSolid[Main.tile[num7, num8 - 2].type] || Main.tileSolidTop[Main.tile[num7, num8 - 2].type]) && (!Main.tile[num7, num8 - 3].nactive() || !Main.tileSolid[Main.tile[num7, num8 - 3].type] || Main.tileSolidTop[Main.tile[num7, num8 - 3].type]) && (!Main.tile[num7 - num6, num8 - 3].nactive() || !Main.tileSolid[Main.tile[num7 - num6, num8 - 3].type]))
			{
				float num9 = num8 * 16;
				if (Main.tile[num7, num8].halfBrick())
				{
					num9 += 8f;
				}
				if (Main.tile[num7, num8 - 1].halfBrick())
				{
					num9 -= 8f;
				}
				if (num9 < vector8.Y + (float)height)
				{
					float num10 = vector8.Y + (float)height - num9;
					if ((double)num10 <= 16.1)
					{
						gfxOffY += position.Y + (float)height - num9;
						position.Y = num9 - (float)height;
						if (num10 < 9f)
						{
							stepSpeed = 1f;
						}
						else
						{
							stepSpeed = 2f;
						}
					}
				}
			}
		}
		if (velocity.Y == 0f)
		{
			bool flag6 = true;
			int num11 = (int)(position.Y - 7f) / 16;
			int num25 = (int)(position.X - 7f) / 16;
			int num13 = (int)(position.X + (float)width + 7f) / 16;
			for (int m = num25; m <= num13; m++)
			{
				if (Main.tile[m, num11] != null && Main.tile[m, num11].nactive() && Main.tileSolid[Main.tile[m, num11].type])
				{
					flag6 = false;
					break;
				}
			}
			if (flag6)
			{
				int num14 = (int)((position.X + (float)(width / 2) + (float)((width / 2 + 2) * direction) + velocity.X * 5f) / 16f);
				int num15 = (int)((position.Y + (float)height - 15f) / 16f);
				if (Main.tile[num14, num15] == null)
				{
					Main.tile[num14, num15] = default(Tile);
				}
				if (Main.tile[num14, num15 - 1] == null)
				{
					Main.tile[num14, num15 - 1] = default(Tile);
				}
				if (Main.tile[num14, num15 - 2] == null)
				{
					Main.tile[num14, num15 - 2] = default(Tile);
				}
				if (Main.tile[num14, num15 - 3] == null)
				{
					Main.tile[num14, num15 - 3] = default(Tile);
				}
				if (Main.tile[num14, num15 + 1] == null)
				{
					Main.tile[num14, num15 + 1] = default(Tile);
				}
				if (Main.tile[num14 + direction, num15 - 1] == null)
				{
					Main.tile[num14 + direction, num15 - 1] = default(Tile);
				}
				if (Main.tile[num14 + direction, num15 + 1] == null)
				{
					Main.tile[num14 + direction, num15 + 1] = default(Tile);
				}
				if (Main.tile[num14 - direction, num15 + 1] == null)
				{
					Main.tile[num14 - direction, num15 + 1] = default(Tile);
				}
				if (Main.tile[num14 + direction, num15 + 3] == null)
				{
					Main.tile[num14 + direction, num15 + 3] = default(Tile);
				}
				int num16 = spriteDirection;
				if (type == 423 || type == 410 || type == 546)
				{
					num16 *= -1;
				}
				if ((velocity.X < 0f && num16 == -1) || (velocity.X > 0f && num16 == 1))
				{
					bool flag7 = type == 410 || type == 423;
					float num17 = 3f;
					if (Main.tile[num14, num15 - 2].nactive() && Main.tileSolid[Main.tile[num14, num15 - 2].type])
					{
						if (Main.tile[num14, num15 - 3].nactive() && Main.tileSolid[Main.tile[num14, num15 - 3].type])
						{
							velocity.Y = -8.5f;
							netUpdate = true;
						}
						else
						{
							velocity.Y = -7.5f;
							netUpdate = true;
						}
					}
					else if (Main.tile[num14, num15 - 1].nactive() && !Main.tile[num14, num15 - 1].topSlope() && Main.tileSolid[Main.tile[num14, num15 - 1].type])
					{
						velocity.Y = -7f;
						netUpdate = true;
					}
					else if (position.Y + (float)height - (float)(num15 * 16) > 20f && Main.tile[num14, num15].nactive() && !Main.tile[num14, num15].topSlope() && Main.tileSolid[Main.tile[num14, num15].type])
					{
						velocity.Y = -6f;
						netUpdate = true;
					}
					else if ((directionY < 0 || Math.Abs(velocity.X) > num17) && (!flag7 || !Main.tile[num14, num15 + 1].nactive() || !Main.tileSolid[Main.tile[num14, num15 + 1].type]) && (!Main.tile[num14, num15 + 2].nactive() || !Main.tileSolid[Main.tile[num14, num15 + 2].type]) && (!Main.tile[num14 + direction, num15 + 3].nactive() || !Main.tileSolid[Main.tile[num14 + direction, num15 + 3].type]))
					{
						velocity.Y = -8f;
						netUpdate = true;
					}
				}
			}
		}
		if (type == 423 && Math.Abs(velocity.X) >= num3 * 0.95f)
		{
			Rectangle hitbox = base.Hitbox;
			for (int n = 0; n < 2; n++)
			{
				if (Main.rand.Next(3) == 0)
				{
					Dust obj3 = Main.dust[Dust.NewDust(hitbox.TopLeft(), hitbox.Width, hitbox.Height, 242)];
					obj3.velocity = Vector2.Zero;
					obj3.noGravity = true;
					obj3.fadeIn = 1f;
					obj3.scale = 0.5f + Main.rand.NextFloat();
				}
			}
		}
		if (type == 546)
		{
			rotation += velocity.X * 0.05f;
			spriteDirection = -direction;
		}
	}

	private void AI_107_ImprovedWalkers()
	{
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0213: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0229: Unknown result type (might be due to invalid IL or missing references)
		//IL_0234: Unknown result type (might be due to invalid IL or missing references)
		//IL_19eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_19f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_19fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a00: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a06: Unknown result type (might be due to invalid IL or missing references)
		//IL_1721: Unknown result type (might be due to invalid IL or missing references)
		//IL_0251: Unknown result type (might be due to invalid IL or missing references)
		//IL_0410: Unknown result type (might be due to invalid IL or missing references)
		//IL_0263: Unknown result type (might be due to invalid IL or missing references)
		//IL_026f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f23: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f28: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2436: Unknown result type (might be due to invalid IL or missing references)
		//IL_142f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1450: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ee4: Unknown result type (might be due to invalid IL or missing references)
		//IL_19c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_25f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1afb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b00: Unknown result type (might be due to invalid IL or missing references)
		//IL_14db: Unknown result type (might be due to invalid IL or missing references)
		//IL_14bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0509: Unknown result type (might be due to invalid IL or missing references)
		//IL_05fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0591: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2613: Unknown result type (might be due to invalid IL or missing references)
		//IL_2619: Unknown result type (might be due to invalid IL or missing references)
		//IL_261e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2623: Unknown result type (might be due to invalid IL or missing references)
		//IL_262c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2630: Unknown result type (might be due to invalid IL or missing references)
		//IL_2635: Unknown result type (might be due to invalid IL or missing references)
		//IL_2639: Unknown result type (might be due to invalid IL or missing references)
		//IL_263e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2642: Unknown result type (might be due to invalid IL or missing references)
		//IL_2647: Unknown result type (might be due to invalid IL or missing references)
		//IL_249a: Unknown result type (might be due to invalid IL or missing references)
		//IL_249f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0825: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0926: Unknown result type (might be due to invalid IL or missing references)
		//IL_092b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0948: Unknown result type (might be due to invalid IL or missing references)
		//IL_0953: Unknown result type (might be due to invalid IL or missing references)
		//IL_0958: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f93: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fa1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fab: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fee: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ffe: Unknown result type (might be due to invalid IL or missing references)
		//IL_2003: Unknown result type (might be due to invalid IL or missing references)
		//IL_2008: Unknown result type (might be due to invalid IL or missing references)
		//IL_084c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1009: Unknown result type (might be due to invalid IL or missing references)
		//IL_102f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2148: Unknown result type (might be due to invalid IL or missing references)
		//IL_214e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2153: Unknown result type (might be due to invalid IL or missing references)
		//IL_2158: Unknown result type (might be due to invalid IL or missing references)
		//IL_210a: Unknown result type (might be due to invalid IL or missing references)
		//IL_212a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2130: Unknown result type (might be due to invalid IL or missing references)
		//IL_213c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2141: Unknown result type (might be due to invalid IL or missing references)
		//IL_2697: Unknown result type (might be due to invalid IL or missing references)
		//IL_269b: Unknown result type (might be due to invalid IL or missing references)
		//IL_26a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c34: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c48: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c81: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c87: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ce2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d28: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b38: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b67: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1523: Unknown result type (might be due to invalid IL or missing references)
		//IL_1538: Unknown result type (might be due to invalid IL or missing references)
		//IL_1542: Unknown result type (might be due to invalid IL or missing references)
		//IL_155d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1562: Unknown result type (might be due to invalid IL or missing references)
		//IL_1567: Unknown result type (might be due to invalid IL or missing references)
		//IL_1569: Unknown result type (might be due to invalid IL or missing references)
		//IL_156b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1570: Unknown result type (might be due to invalid IL or missing references)
		//IL_1572: Unknown result type (might be due to invalid IL or missing references)
		//IL_1579: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_11cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1112: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0997: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_09be: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_09da: Unknown result type (might be due to invalid IL or missing references)
		//IL_09e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a04: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a13: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a18: Unknown result type (might be due to invalid IL or missing references)
		//IL_204f: Unknown result type (might be due to invalid IL or missing references)
		//IL_206e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2074: Unknown result type (might be due to invalid IL or missing references)
		//IL_2082: Unknown result type (might be due to invalid IL or missing references)
		//IL_208c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2091: Unknown result type (might be due to invalid IL or missing references)
		//IL_20cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_20df: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_26aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_26af: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1588: Unknown result type (might be due to invalid IL or missing references)
		//IL_1596: Unknown result type (might be due to invalid IL or missing references)
		//IL_15b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_15cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_15de: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_121b: Unknown result type (might be due to invalid IL or missing references)
		//IL_125a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1264: Unknown result type (might be due to invalid IL or missing references)
		//IL_1269: Unknown result type (might be due to invalid IL or missing references)
		//IL_2192: Unknown result type (might be due to invalid IL or missing references)
		//IL_161d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1623: Unknown result type (might be due to invalid IL or missing references)
		//IL_1628: Unknown result type (might be due to invalid IL or missing references)
		//IL_162d: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12de: Unknown result type (might be due to invalid IL or missing references)
		//IL_1164: Unknown result type (might be due to invalid IL or missing references)
		//IL_1146: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a49: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a72: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a89: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aac: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0acc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b12: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b32: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b38: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b54: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b62: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b72: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b88: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b92: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ba0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0baa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0baf: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_28db: Unknown result type (might be due to invalid IL or missing references)
		//IL_28e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_28e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_28e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_28eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_28f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_28f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_28f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2902: Unknown result type (might be due to invalid IL or missing references)
		//IL_2913: Unknown result type (might be due to invalid IL or missing references)
		//IL_2915: Unknown result type (might be due to invalid IL or missing references)
		//IL_291a: Unknown result type (might be due to invalid IL or missing references)
		//IL_291f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2926: Unknown result type (might be due to invalid IL or missing references)
		//IL_292b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2782: Unknown result type (might be due to invalid IL or missing references)
		//IL_2795: Unknown result type (might be due to invalid IL or missing references)
		//IL_24f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2521: Unknown result type (might be due to invalid IL or missing references)
		//IL_2527: Unknown result type (might be due to invalid IL or missing references)
		//IL_254b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2558: Unknown result type (might be due to invalid IL or missing references)
		//IL_255d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2563: Unknown result type (might be due to invalid IL or missing references)
		//IL_2569: Unknown result type (might be due to invalid IL or missing references)
		//IL_256e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2573: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_21de: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_21f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_21fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2201: Unknown result type (might be due to invalid IL or missing references)
		//IL_220d: Unknown result type (might be due to invalid IL or missing references)
		//IL_27df: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c01: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c20: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c26: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c42: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c50: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c56: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c63: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c69: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c77: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c81: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c86: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ca7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2222: Unknown result type (might be due to invalid IL or missing references)
		//IL_2935: Unknown result type (might be due to invalid IL or missing references)
		//IL_2937: Unknown result type (might be due to invalid IL or missing references)
		//IL_2939: Unknown result type (might be due to invalid IL or missing references)
		//IL_293b: Unknown result type (might be due to invalid IL or missing references)
		//IL_34c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_34c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_34ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_34d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_34d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3426: Unknown result type (might be due to invalid IL or missing references)
		//IL_343d: Unknown result type (might be due to invalid IL or missing references)
		//IL_344c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e14: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e20: Unknown result type (might be due to invalid IL or missing references)
		//IL_2958: Unknown result type (might be due to invalid IL or missing references)
		//IL_2969: Unknown result type (might be due to invalid IL or missing references)
		//IL_296e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2973: Unknown result type (might be due to invalid IL or missing references)
		//IL_2946: Unknown result type (might be due to invalid IL or missing references)
		//IL_294a: Unknown result type (might be due to invalid IL or missing references)
		//IL_294f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2954: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d07: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d24: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d29: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d37: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d50: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d52: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d68: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d72: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d98: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ccc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2975: Unknown result type (might be due to invalid IL or missing references)
		//IL_2977: Unknown result type (might be due to invalid IL or missing references)
		//IL_297b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2980: Unknown result type (might be due to invalid IL or missing references)
		//IL_2985: Unknown result type (might be due to invalid IL or missing references)
		//IL_3540: Unknown result type (might be due to invalid IL or missing references)
		//IL_355c: Unknown result type (might be due to invalid IL or missing references)
		//IL_34fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3500: Unknown result type (might be due to invalid IL or missing references)
		//IL_3502: Unknown result type (might be due to invalid IL or missing references)
		//IL_3507: Unknown result type (might be due to invalid IL or missing references)
		//IL_352a: Unknown result type (might be due to invalid IL or missing references)
		//IL_352c: Unknown result type (might be due to invalid IL or missing references)
		//IL_352e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3533: Unknown result type (might be due to invalid IL or missing references)
		//IL_2995: Unknown result type (might be due to invalid IL or missing references)
		//IL_2997: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dba: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e07: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e13: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e19: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e43: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e51: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e61: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e77: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e81: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e99: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b23: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f31: Unknown result type (might be due to invalid IL or missing references)
		//IL_330a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f34: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f39: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f40: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f44: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f49: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f50: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f73: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f78: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f84: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b16: Unknown result type (might be due to invalid IL or missing references)
		//IL_39db: Unknown result type (might be due to invalid IL or missing references)
		//IL_39e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_331f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3332: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b91: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b91: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b31: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a02: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_31c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_31d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f90: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f92: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f94: Unknown result type (might be due to invalid IL or missing references)
		//IL_3024: Unknown result type (might be due to invalid IL or missing references)
		//IL_3030: Unknown result type (might be due to invalid IL or missing references)
		//IL_31f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_31fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_3202: Unknown result type (might be due to invalid IL or missing references)
		//IL_3207: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fad: Unknown result type (might be due to invalid IL or missing references)
		//IL_3061: Unknown result type (might be due to invalid IL or missing references)
		//IL_306d: Unknown result type (might be due to invalid IL or missing references)
		//IL_304b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c10: Unknown result type (might be due to invalid IL or missing references)
		//IL_324a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3256: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fce: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fde: Unknown result type (might be due to invalid IL or missing references)
		//IL_3097: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3287: Unknown result type (might be due to invalid IL or missing references)
		//IL_3293: Unknown result type (might be due to invalid IL or missing references)
		//IL_3271: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fee: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ff0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c49: Unknown result type (might be due to invalid IL or missing references)
		//IL_32bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_30b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2be6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c13: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c19: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c67: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c71: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c76: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c60: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_32d6: Unknown result type (might be due to invalid IL or missing references)
		bool flag = velocity.X == 0f && velocity.Y == 0f && !justHit;
		bool flag12 = false;
		bool flag23 = false;
		bool flag34 = false;
		int num = 32;
		int num12 = 15;
		float num23 = 9f;
		bool flag36 = false;
		float num32 = 40f;
		int num42 = 30;
		int num53 = 0;
		bool flag37 = false;
		bool flag38 = true;
		float num63 = 0.9f;
		bool flag39 = false;
		bool flag40 = false;
		bool flag2 = false;
		bool flag3 = false;
		bool flag4 = false;
		bool flag5 = false;
		bool flag6 = false;
		bool flag7 = true;
		int num66 = 70;
		int num67 = num66 / 2;
		float num2 = 11f;
		Vector2 vector = Vector2.Zero;
		int num3 = 1;
		int num4 = 81;
		float num5 = 700f;
		float num6 = 0f;
		float num7 = 0.1f;
		Vector2? vector7 = null;
		float num8 = 0.5f;
		int num9 = 1;
		float num10 = 1f;
		bool flag8 = false;
		float num11 = 30f;
		float num13 = 0f;
		bool flag9 = false;
		bool flag10 = true;
		bool flag11 = false;
		int num14 = 30;
		bool flag13 = false;
		bool flag14 = false;
		bool flag15 = false;
		bool flag16 = false;
		SoundStyle? style = null;
		int num15 = 0;
		bool flag17 = false;
		float num16 = 1f;
		float num17 = 0.07f;
		float num18 = 0.8f;
		float num19 = width / 2 + 6;
		bool flag18 = directionY < 0;
		bool flag19 = false;
		int num20 = 1;
		bool flag20 = false;
		float num21 = 5f;
		float num22 = 3f;
		float num24 = 8f;
		float amount = 0.05f;
		float amount2 = 0.04f;
		float amount3 = 0.1f;
		bool flag21 = false;
		float num25 = 0.025f;
		NPCAimedTarget targetData = GetTargetData();
		NPCUtils.NPCTargetingMethod nPCTargetingMethod = NPCUtils.TargetClosestCommon;
		if (NPCID.Sets.BelongsToInvasionOldOnesArmy[type])
		{
			nPCTargetingMethod = NPCUtils.TargetClosestOldOnesInvasion;
		}
		if (targetData.Type == NPCTargetType.NPC && Main.npc[TranslatedTargetIndex].type == 548 && Main.npc[TranslatedTargetIndex].dontTakeDamageFromHostiles)
		{
			nPCTargetingMethod(this, faceTarget: true, null);
			targetData = GetTargetData();
		}
		if (NPCID.Sets.FighterUsesDD2PortalAppearEffect[type])
		{
			if (!targetData.Invalid)
			{
				flag12 = !Collision.CanHit(base.Center, 0, 0, targetData.Center, 0, 0) && (direction == Math.Sign(targetData.Center.X - base.Center.X) || (noGravity && Distance(targetData.Center) > 50f && base.Center.Y > targetData.Center.Y));
			}
			flag12 &= ai[0] <= 0f;
		}
		if (flag12)
		{
			if (velocity.Y == 0f || Math.Abs(targetData.Center.Y - base.Center.Y) > 800f)
			{
				noGravity = true;
				noTileCollide = true;
			}
		}
		else
		{
			noGravity = false;
			noTileCollide = false;
		}
		bool flag22 = NPCID.Sets.FighterUsesDD2PortalAppearEffect[type];
		bool flag24 = true;
		Vector2 center2;
		switch (type)
		{
		case 576:
		case 577:
			num15 = 700;
			style = SoundID.DD2_OgreRoar;
			num19 -= 32f;
			flag36 = true;
			num53 = 60;
			num32 = 130f;
			num42 = 44;
			flag14 = DD2Event.EnemiesShouldChasePlayers;
			num63 = 0.7f;
			if (localAI[0] > 0f)
			{
				localAI[0] -= 1f;
			}
			if (ai[0] <= 0f)
			{
				float num27 = ai[1];
				float num28 = Distance(targetData.Center);
				if (localAI[3] >= 60f)
				{
					if (num28 <= num32 + 300f && localAI[0] <= 0f)
					{
						ai[1] = 2f;
					}
					else if (num28 > num32 + 30f)
					{
						ai[1] = 1f;
					}
					else if (!(num28 > num32))
					{
						ai[1] = 0f;
						if (num27 == 1f)
						{
							ai[0] = 0f;
						}
					}
				}
				if (num27 != ai[1])
				{
					netUpdate = true;
				}
			}
			else if (ai[1] == 2f)
			{
				localAI[0] = 300f;
			}
			switch ((int)ai[1])
			{
			case 0:
				num42 = 44;
				if (ai[0] == 40f)
				{
					SoundEngine.PlayTrackedSound(in SoundID.DD2_OgreAttack, base.Center);
				}
				break;
			case 2:
				num42 = 90;
				num32 = 250f;
				flag34 = true;
				num3 = GetAttackDamage_ForProjectiles(60f, 40f);
				num67 = 36;
				num = 56;
				num12 = 41;
				num23 = 13f;
				flag23 = true;
				num4 = 683;
				flag7 = false;
				((Vector2)(ref vector))._002Ector((float)(-direction * 20), (float)(height / 2 - 1));
				if (ai[0] == 40f)
				{
					SoundEngine.PlayTrackedSound(in SoundID.DD2_OgreGroundPound, base.Center);
				}
				break;
			case 1:
				flag23 = true;
				num42 = 90;
				num32 = 1000f;
				num53 = 240;
				num3 = GetAttackDamage_ForProjectiles(40f, 30f);
				flag7 = false;
				((Vector2)(ref vector))._002Ector((float)(direction * 30), -70f);
				num4 = 676;
				if (ai[0] == 80f)
				{
					SoundEngine.PlayTrackedSound(in SoundID.DD2_OgreSpit, base.Center);
				}
				break;
			}
			if (ai[0] < (float)(-num53))
			{
				ai[0] = -num53;
			}
			break;
		case 552:
		case 553:
		case 554:
			style = SoundID.DD2_GoblinScream;
			num15 = 1000;
			flag36 = true;
			flag14 = DD2Event.EnemiesShouldChasePlayers;
			if (type == 553)
			{
				num17 += 0.01f;
				num16 += 0.2f;
			}
			if (type == 554)
			{
				num17 += 0.02f;
				num16 += 0.4f;
			}
			if (!(localAI[3] >= 60f))
			{
				num17 = 0.01f + localAI[3] / 60f * 0.05f;
			}
			break;
		case 570:
		case 571:
			flag14 = DD2Event.EnemiesShouldChasePlayers;
			flag17 = true;
			flag4 = true;
			flag7 = ai[1] > 40f;
			num66 = 60;
			num67 = 40;
			if (type == 571 && ai[1] > 10f && ai[1] <= 40f && (int)ai[1] % 6 == 0)
			{
				num67 = (int)ai[1] - 1;
			}
			if (type == 570 && ai[1] > 10f && ai[1] <= 40f && (int)ai[1] % 9 == 0)
			{
				num67 = (int)ai[1] - 1;
			}
			num4 = 671;
			vector.X += 22 * direction;
			num7 = 0.15f;
			num8 = 1.5f;
			num5 = 600f;
			num2 = 13f;
			num9 = 1;
			num10 = 0f;
			if (type == 570)
			{
				num8 = 2.5f;
			}
			num3 = GetAttackDamage_ForProjectiles(35f, 25f);
			if (type == 571)
			{
				num3 = GetAttackDamage_ForProjectiles(60f, 45f);
			}
			num16 = 0.77f;
			if (ai[0] > 0f)
			{
				if (ai[1] == 40f)
				{
					SoundEngine.PlayTrackedSound(in SoundID.DD2_DrakinShot, base.Center);
				}
				else if (ai[1] == 60f)
				{
					SoundEngine.PlayTrackedSound(in SoundID.DD2_DrakinBreathIn, base.Center);
				}
			}
			if (!(localAI[3] >= 60f))
			{
				num5 = 1f;
				num17 = 0.01f + localAI[3] / 60f * 0.05f;
			}
			break;
		case 572:
		case 573:
			if (localAI[3] == 0f)
			{
				localAI[0] = SlotId.Invalid.ToFloat();
				localAI[1] = SlotId.Invalid.ToFloat();
			}
			flag14 = DD2Event.EnemiesShouldChasePlayers;
			if (ai[1] == 2f)
			{
				SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[0]))?.Stop();
				SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]))?.Stop();
				position = base.Center;
				width = (height = 192);
				base.Center = position;
				velocity = Vector2.Zero;
				damage = GetAttackDamage_ScaledByStrength(80f);
				alpha = 255;
				for (int k = 0; k < 4; k++)
				{
					int num29 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num29].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				}
				for (int l = 0; l < 20; l++)
				{
					int num30 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num30].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
					Main.dust[num30].noGravity = true;
					Dust obj = Main.dust[num30];
					obj.velocity *= 3f;
					num30 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num30].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 4f;
					Dust obj2 = Main.dust[num30];
					obj2.velocity *= 2f;
					Main.dust[num30].noGravity = true;
					Main.dust[num30].fadeIn = 2.5f;
				}
				for (int m = 0; m < 6; m++)
				{
					int num31 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.7f);
					Dust obj3 = Main.dust[num31];
					Vector2 center = base.Center;
					Vector2 spinningpoint = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
					double radians = velocity.ToRotation();
					center2 = default(Vector2);
					obj3.position = center + spinningpoint.RotatedBy(radians, center2) * (float)width / 2f;
					Main.dust[num31].noGravity = true;
					Dust obj4 = Main.dust[num31];
					obj4.velocity *= 3f;
				}
				for (int n = 0; n < 12; n++)
				{
					int num33 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Dust obj5 = Main.dust[num33];
					Vector2 center3 = base.Center;
					Vector2 spinningpoint2 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
					double radians2 = velocity.ToRotation();
					center2 = default(Vector2);
					obj5.position = center3 + spinningpoint2.RotatedBy(radians2, center2) * (float)width / 2f;
					Main.dust[num33].noGravity = true;
					Dust obj6 = Main.dust[num33];
					obj6.velocity *= 3f;
				}
				for (int num34 = 0; num34 < 5; num34++)
				{
					Vector2 val = position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f;
					center2 = default(Vector2);
					int num35 = Gore.NewGore(val, center2, Main.rand.Next(61, 64));
					Main.gore[num35].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
					Gore obj7 = Main.gore[num35];
					obj7.velocity *= 0.3f;
					Main.gore[num35].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num35].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				ai[0] += 1f;
				if (ai[0] >= 3f)
				{
					SoundEngine.PlayTrackedSound(in SoundID.DD2_KoboldExplosion, base.Center);
					life = 0;
					HitEffect();
					active = false;
				}
				return;
			}
			if (ai[0] > 0f && ai[1] == 0f && life > 0)
			{
				if (!SlotId.FromFloat(localAI[0]).IsValid)
				{
					localAI[0] = SoundEngine.PlayTrackedSound(in SoundID.DD2_KoboldIgnite, base.Center).ToFloat();
				}
				localAI[2] += 1f;
				if (localAI[2] == 30f)
				{
					localAI[0] = SoundEngine.PlayTrackedSound(in SoundID.DD2_KoboldIgniteLoop, base.Center).ToFloat();
					localAI[1] = SoundEngine.PlayTrackedSound(in SoundID.DD2_KoboldScreamChargeLoop, base.Center).ToFloat();
				}
			}
			if (ai[0] > 0f && ai[1] == 1f)
			{
				ai[0] = 0f;
				ai[1] = 2f;
				netUpdate = true;
				return;
			}
			num16 = 0.88f;
			if (ai[0] == 1f)
			{
				ai[1] = 1f;
			}
			if (ai[0] == 0f && ai[1] == 1f)
			{
				ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[0]));
				if (activeSound == null)
				{
					localAI[0] = SoundEngine.PlayTrackedSound(in SoundID.DD2_KoboldIgniteLoop, base.Center).ToFloat();
				}
				else
				{
					activeSound.Position = base.Center;
				}
				ActiveSound activeSound2 = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
				if (activeSound2 == null)
				{
					localAI[1] = SoundEngine.PlayTrackedSound(in SoundID.DD2_KoboldScreamChargeLoop, base.Center).ToFloat();
				}
				else
				{
					activeSound2.Position = base.Center;
				}
			}
			if (ai[1] > 0f && ai[0] == 0f)
			{
				flag36 = true;
				num42 = 40;
				num32 = 64f;
				num17 = 0.3f;
				num16 = 4f;
				Vector2 vector8 = base.Center + new Vector2((float)(spriteDirection * 12), 0f);
				if (Main.rand.Next(6) == 0)
				{
					Dust dust10 = Dust.NewDustDirect(vector8, 1, 1, 213, Main.rand.Next(-2, 3), Main.rand.Next(-2, 3), 100, new Color(255, 255, 255, 0));
					dust10.noGravity = true;
					dust10.fadeIn = dust10.scale + 1f + 0.01f * (float)Main.rand.Next(0, 51);
					dust10.velocity *= 0.3f;
					dust10.velocity.X += (float)(-spriteDirection) * 1.2f;
					dust10.velocity.Y += -3.5f;
					dust10.velocity.X += velocity.X;
				}
				if (Main.rand.Next(12) == 0)
				{
					Dust dust11 = Dust.NewDustPerfect(vector8, 6, velocity, 100);
					dust11.noGravity = true;
					dust11.velocity.Y -= 1f + Main.rand.NextFloat();
					dust11.scale = 1.1f;
					dust11.fadeIn = 0.5f;
					dust11.customData = this;
				}
			}
			else
			{
				flag36 = true;
				num42 = 40;
				num32 = 700f;
			}
			if (!(localAI[3] >= 60f))
			{
				num17 = 0.01f + localAI[3] / 60f * 0.05f;
			}
			break;
		case 568:
		case 569:
		{
			num42 = 110;
			num17 = 0.16f;
			num18 = 0.7f;
			num16 = 1.4f;
			flag36 = true;
			num32 = 600f;
			flag14 = DD2Event.EnemiesShouldChasePlayers;
			if (!(localAI[3] >= 60f))
			{
				num17 = 0.01f + localAI[3] / 60f * 0.05f;
			}
			if (ai[0] == 0f)
			{
				localAI[1] = SlotId.Invalid.ToFloat();
			}
			if (ai[0] != 1f)
			{
				break;
			}
			HitSound = SoundID.DD2_WitherBeastCrystalImpact;
			ai[0] += 1f;
			if (Main.rand.Next(10) == 0)
			{
				Dust dust12 = Dust.NewDustDirect(base.TopLeft, width, height, 271, 0f, -3f, 0, Color.Transparent, 0.6f);
				dust12.velocity.X /= 2f;
				dust12.noGravity = true;
				dust12.fadeIn = 1.5f;
				dust12.position.Y += 4f;
			}
			ActiveSound activeSound3 = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
			if (activeSound3 == null)
			{
				localAI[1] = SoundEngine.PlayTrackedSound(in SoundID.DD2_WitherBeastAuraPulse, base.Center).ToFloat();
			}
			else
			{
				activeSound3.Position = base.Center;
			}
			localAI[0] += 1f;
			if (localAI[0] > 60f && Main.rand.Next(10) == 0)
			{
				Vector2 vec = base.Center + (Main.rand.NextFloat() * ((float)Math.PI * 2f)).ToRotationVector2() * 400f * (0.3f + 0.7f * Main.rand.NextFloat());
				Point point = vec.ToTileCoordinates();
				if (!WorldGen.SolidTile(point.X, point.Y))
				{
					Dust dust7 = Dust.NewDustPerfect(vec, 27, (Vector2?)new Vector2(0f, -3f), 0, new Color(255, 255, 255, 127), 1.5f);
					dust7.velocity = DirectionTo(dust7.position) * ((Vector2)(ref dust7.velocity)).Length();
					dust7.fadeIn = 1.5f;
				}
			}
			if (Main.netMode != 2)
			{
				Player player = Main.player[Main.myPlayer];
				if (!player.dead && player.active)
				{
					center2 = player.Center - base.Center;
					if (((Vector2)(ref center2)).Length() < 400f && !player.creativeGodMode)
					{
						player.AddBuff(195, 3, quiet: false);
					}
				}
			}
			if (ai[1] > 0f)
			{
				ai[1] -= 1f;
			}
			if (!(ai[1] <= 0f))
			{
				break;
			}
			ai[1] = 60f;
			if (Main.netMode != 1)
			{
				int num44 = lifeMax / 20;
				if (num44 > lifeMax - life)
				{
					num44 = lifeMax - life;
				}
				if (num44 > 0)
				{
					life += num44;
					HealEffect(num44);
					netUpdate = true;
				}
			}
			break;
		}
		case 561:
		case 562:
		case 563:
		{
			bool num69 = localAI[3] >= 60f;
			if (ai[1] == 82f)
			{
				SoundEngine.PlayTrackedSound(in SoundID.DD2_JavelinThrowersAttack, base.Center);
				num15 = 7;
				style = SoundID.DD2_JavelinThrowersTaunt;
			}
			flag14 = DD2Event.EnemiesShouldChasePlayers;
			flag17 = true;
			flag4 = true;
			flag7 = ai[1] > 82f;
			num66 = 90;
			num67 = 82;
			num4 = 662;
			if (type == 563)
			{
				num4 = 685;
			}
			vector.Y -= 14f;
			num7 = 0f;
			num8 = 0.5f;
			num5 = 600f;
			num2 = 13f;
			if (!num69)
			{
				num5 = 1f;
				num17 = 0.01f + localAI[3] / 60f * 0.05f;
			}
			if (type == 561)
			{
				num16 = 0.88f;
				num8 = 0.6f;
				num3 = GetAttackDamage_ForProjectiles(15f, 10f);
				num2 = 11.5f;
				num5 -= 100f;
			}
			if (type == 562)
			{
				num16 = 0.94f;
				num8 = 0.5f;
				num3 = GetAttackDamage_ForProjectiles(30f, 20f);
				num2 = 12.2f;
				num5 -= 50f;
			}
			if (type == 563)
			{
				num16 = 1f;
				num8 = 0.4f;
				num3 = GetAttackDamage_ForProjectiles(45f, 30f);
			}
			break;
		}
		case 555:
		case 556:
		case 557:
		{
			num15 = 800;
			style = SoundID.DD2_GoblinBomberScream;
			bool num68 = localAI[3] >= 60f;
			flag14 = DD2Event.EnemiesShouldChasePlayers;
			flag17 = true;
			flag4 = true;
			flag7 = ai[1] > 18f;
			num66 = 42;
			num67 = 18;
			num4 = 681;
			num3 = 10;
			vector.Y -= 14f;
			num7 = 0.4f;
			num8 = 0.5f;
			num5 = 280f;
			num2 = 6f;
			if (!num68)
			{
				num5 = 1f;
				num17 = 0.01f + localAI[3] / 60f * 0.05f;
			}
			if (type == 555)
			{
				num16 = 0.88f;
				num8 = 0.6f;
				num3 = GetAttackDamage_ForProjectiles(20f, 15f);
			}
			if (type == 556)
			{
				num16 = 0.88f;
				num8 = 0.6f;
				num3 = GetAttackDamage_ForProjectiles(30f, 25f);
			}
			if (type == 557)
			{
				num16 = 1.12f;
				num8 = 0.4f;
				num3 = GetAttackDamage_ForProjectiles(40f, 35f);
			}
			if (ai[1] == (float)num67)
			{
				SoundEngine.PlayTrackedSound(in SoundID.DD2_GoblinBomberThrow, base.Center);
			}
			break;
		}
		case 566:
		case 567:
		{
			DelegateMethods.v3_1 = new Vector3(0.3f, 0.05f, 0.45f) * 1.5f;
			Utils.PlotTileLine(base.Top, base.Bottom, width, DelegateMethods.CastLightOpen);
			flag14 = DD2Event.EnemiesShouldChasePlayers;
			bool num70 = localAI[3] >= 120f;
			if (!num70)
			{
				num17 = 0f;
			}
			if (num70)
			{
				dontTakeDamage = false;
				break;
			}
			dontTakeDamage = true;
			velocity.X = 0f;
			flag17 = true;
			flag13 = true;
			ai[3] = 0f;
			if (localAI[3] == 0f)
			{
				alpha = 255;
			}
			localAI[3] += 1f;
			float num36 = localAI[3];
			if (num36 >= 110f)
			{
				alpha -= 26;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (num36 >= 100f)
			{
				int num37 = (int)localAI[3] / 20;
				center2 = base.Size;
				float num38 = ((Vector2)(ref center2)).Length() / 2f;
				num38 /= 20f;
				int maxValue = 5;
				for (int num39 = 0; num39 < num37 * 2; num39++)
				{
					if (Main.rand.Next(maxValue) == 0)
					{
						Dust dust5 = Dust.NewDustDirect(position, width, height, 236, velocity.X * 1f);
						dust5.scale = 1f;
						dust5.fadeIn = 0.3f;
						dust5.velocity = new Vector2(Main.rand.NextFloatDirection() * 1f, 0f - ((Vector2)(ref dust5.velocity)).Length()) * 1.25f * num38;
					}
				}
			}
			else
			{
				int num40 = (int)localAI[3] / 10;
				center2 = base.Size;
				float num41 = ((Vector2)(ref center2)).Length() / 2f;
				num41 /= 20f;
				int maxValue2 = 5;
				for (int num43 = 0; (float)num43 < (float)num40 * 1.3f; num43++)
				{
					if (Main.rand.Next(maxValue2) == 0)
					{
						Dust dust6 = Dust.NewDustDirect(position + new Vector2((float)(-width / 2), 8f), width + width, height, 27, velocity.X * 1f, 0f, 100);
						dust6.scale = 1.1f;
						dust6.fadeIn = 0.1f;
						dust6.velocity = new Vector2(Main.rand.NextFloatDirection() * 0.1f, 0f - ((Vector2)(ref dust6.velocity)).Length()) * 1.05f * num41 * Main.rand.NextFloat();
						dust6.velocity.Y *= Utils.GetLerpValue((float)width * 0.75f, 0f, Math.Abs(dust6.position.X - base.Center.X), clamped: true);
					}
				}
			}
			if (num36 > 100f && (int)num36 % 4 == 0)
			{
				Gore.NewGoreDirect(base.Left, new Vector2(0f, -3f), Utils.SelectRandom<int>(Main.rand, 971, 972), 0.85f).velocity.X *= 0.8f;
			}
			break;
		}
		case 620:
		{
			flag20 = wet;
			flag24 = false;
			flag8 = true;
			num13 = 150f;
			num11 = 20f;
			bool dayTime = Main.dayTime;
			flag14 = !dayTime;
			flag17 = true;
			flag4 = true;
			flag7 = ai[1] > 40f;
			num66 = 60;
			num67 = 40;
			if (ai[1] > 10f && ai[1] <= 40f && (int)ai[1] % 5 == 0)
			{
				num67 = (int)ai[1] - 1;
			}
			num4 = 811;
			vector.X -= 4 * direction;
			vector.Y -= 20f;
			num7 = 0.15f;
			num8 = 2.5f;
			num5 = 600f;
			num2 = 13f;
			num9 = 1;
			num10 = 0f;
			num3 = GetAttackDamage_ForProjectiles(40f, 30f);
			num16 = 8f;
			num17 *= 3f;
			num18 = 0.9f;
			if (ai[0] > 0f)
			{
				if (ai[1] == 40f)
				{
					SoundEngine.PlayTrackedSound(in SoundID.DD2_DrakinShot, base.Center);
				}
				else if (ai[1] == 60f)
				{
					SoundEngine.PlayTrackedSound(in SoundID.DD2_DrakinBreathIn, base.Center);
				}
			}
			position += netOffset;
			if (alpha == 255)
			{
				spriteDirection = direction;
				velocity.Y = -6f;
				netUpdate = true;
				for (int i = 0; i < 35; i++)
				{
					Dust dust8 = Dust.NewDustDirect(position, width, height, 5);
					dust8.velocity *= 1f;
					dust8.scale = 1f + Main.rand.NextFloat() * 0.5f;
					dust8.fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
					dust8.velocity += velocity * 0.5f;
				}
			}
			alpha -= 15;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (alpha != 0)
			{
				for (int j = 0; j < 2; j++)
				{
					Dust dust9 = Dust.NewDustDirect(position, width, height, 5);
					dust9.velocity *= 1f;
					dust9.scale = 1f + Main.rand.NextFloat() * 0.5f;
					dust9.fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
					dust9.velocity += velocity * 0.3f;
				}
			}
			if (Main.rand.Next(3) == 0)
			{
				Dust.NewDustDirect(position, width, height, 5, 0f, 0f, 50, default(Color), 1.3f).velocity = Vector2.Zero;
			}
			position -= netOffset;
			if (dayTime)
			{
				flag4 = false;
				flag17 = false;
				flag16 = true;
			}
			else
			{
				if (velocity.Y != 0f || !((float)((Rectangle)(ref targetData.Hitbox)).Bottom < base.Top.Y) || !(Math.Abs(base.Center.X - (float)((Rectangle)(ref targetData.Hitbox)).Center.X) < (float)(width * 3)) || !Collision.CanHit(base.Hitbox.TopLeft(), base.Hitbox.Width, base.Hitbox.Height, targetData.Hitbox.TopLeft(), targetData.Hitbox.Width, targetData.Hitbox.Height))
				{
					break;
				}
				int num26 = (int)((base.Bottom.Y - 16f - (float)((Rectangle)(ref targetData.Hitbox)).Bottom) / 16f);
				if (num26 < 27)
				{
					if (num26 < 11)
					{
						velocity.Y = -11f;
					}
					else if (num26 < 15)
					{
						velocity.Y = -13f;
					}
					else if (num26 < 19)
					{
						velocity.Y = -14f;
					}
					else
					{
						velocity.Y = -15.9f;
					}
				}
			}
			break;
		}
		}
		if (flag21)
		{
			bool flag25 = velocity.Y == 0f;
			for (int num45 = 0; num45 < 200; num45++)
			{
				if (num45 != whoAmI && Main.npc[num45].active && Main.npc[num45].type == type && Math.Abs(position.X - Main.npc[num45].position.X) + Math.Abs(position.Y - Main.npc[num45].position.Y) < (float)width)
				{
					if (position.X < Main.npc[num45].position.X)
					{
						velocity.X -= num25;
					}
					else
					{
						velocity.X += num25;
					}
					if (position.Y < Main.npc[num45].position.Y)
					{
						velocity.Y -= num25;
					}
					else
					{
						velocity.Y += num25;
					}
				}
			}
			if (flag25)
			{
				velocity.Y = 0f;
			}
		}
		if (flag22)
		{
			if (localAI[3] == 0f)
			{
				alpha = 255;
			}
			if (localAI[3] == 30f)
			{
				SoundEngine.PlayTrackedSound(in SoundID.DD2_EtherianPortalSpawnEnemy, base.Center);
			}
			if (localAI[3] < 60f)
			{
				localAI[3] += 1f;
				alpha -= 5;
				if (alpha < 0)
				{
					alpha = 0;
				}
				int num46 = (int)localAI[3] / 10;
				center2 = base.Size;
				float num47 = ((Vector2)(ref center2)).Length() / 2f;
				num47 /= 20f;
				int maxValue3 = 5;
				if (type == 576 || type == 577)
				{
					maxValue3 = 1;
				}
				for (int num48 = 0; num48 < num46; num48++)
				{
					if (Main.rand.Next(maxValue3) == 0)
					{
						Dust dust13 = Dust.NewDustDirect(position, width, height, 27, velocity.X * 1f, 0f, 100);
						dust13.scale = 0.55f;
						dust13.fadeIn = 0.7f;
						dust13.velocity *= 0.1f * num47;
						dust13.velocity += velocity;
					}
				}
			}
		}
		if (flag20)
		{
			noGravity = true;
			TargetClosest(faceTarget: false);
			if (collideX)
			{
				velocity.X = 0f - oldVelocity.X;
			}
			if (velocity.X != 0f)
			{
				direction = Math.Sign(direction);
			}
			if (Collision.CanHit(position, width, height, targetData.Position, targetData.Width, targetData.Height))
			{
				Vector2 value = targetData.Center - base.Center;
				((Vector2)(ref value)).Normalize();
				value *= num21;
				velocity = Vector2.Lerp(velocity, value, amount);
				return;
			}
			float num49 = num21;
			if (velocity.Y > 0f)
			{
				num49 = num22;
			}
			if (velocity.Y < 0f)
			{
				num49 = num24;
			}
			Vector2 value2 = default(Vector2);
			((Vector2)(ref value2))._002Ector((float)direction, -1f);
			((Vector2)(ref value2)).Normalize();
			value2 *= num49;
			if (num49 < num21)
			{
				velocity = Vector2.Lerp(velocity, value2, amount2);
			}
			else
			{
				velocity = Vector2.Lerp(velocity, value2, amount3);
			}
			return;
		}
		bool flag26 = false;
		if ((flag4 || flag36) && ai[0] > 0f)
		{
			flag10 = false;
		}
		if (flag4 && ai[1] > 0f)
		{
			flag15 = true;
		}
		if (flag36 && ai[0] > 0f)
		{
			flag15 = true;
		}
		if (flag36)
		{
			if (ai[0] < 0f)
			{
				ai[0] += 1f;
				flag = false;
			}
			if (ai[0] == 0f && (velocity.Y == 0f || flag37) && targetData.Type != 0 && (Collision.CanHit(position, width, height, targetData.Position, targetData.Width, targetData.Height) || Collision.CanHitLine(position, width, height, targetData.Position, targetData.Width, targetData.Height)))
			{
				center2 = targetData.Center - base.Center;
				if (((Vector2)(ref center2)).Length() < num32)
				{
					ai[0] = num42;
					netUpdate = true;
				}
			}
			if (ai[0] > 0f)
			{
				spriteDirection = direction * num20;
				if (flag38)
				{
					velocity.X *= num63;
					flag17 = true;
					flag13 = true;
					ai[3] = 0f;
					netUpdate = true;
				}
				ai[0] -= 1f;
				if (ai[0] == 0f)
				{
					ai[0] = -num53;
					netUpdate = true;
				}
			}
		}
		if (flag23 && ai[0] > 0f)
		{
			if (flag7)
			{
				nPCTargetingMethod(this, faceTarget: true, null);
				targetData = GetTargetData();
			}
			if (ai[0] == (float)num67)
			{
				Vector2 vector9 = base.Center + vector;
				Vector2 v = targetData.Center - vector9;
				v.Y -= Math.Abs(v.X) * num7;
				Vector2 vector10 = v.SafeNormalize(-Vector2.UnitY) * num2;
				for (int num50 = 0; num50 < num9; num50++)
				{
					Vector2 vector11 = vector10;
					Vector2 vector12 = vector9;
					vector11 = ((!vector7.HasValue) ? (vector11 + Utils.RandomVector2(Main.rand, 0f - num8, num8)) : (vector11 + vector7.Value));
					vector12 += vector10 * num10;
					if (Main.netMode != 1)
					{
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector12, vector11, num4, num3, 0f, Main.myPlayer);
					}
				}
			}
		}
		if (flag34 && ai[0] > 0f)
		{
			if (velocity.Y != 0f && ai[0] < (float)num12)
			{
				ai[0] = num12;
			}
			if (ai[0] == (float)num)
			{
				velocity.Y = 0f - num23;
			}
		}
		if (!flag9 && flag10)
		{
			if (velocity.Y == 0f && velocity.X * (float)direction < 0f)
			{
				flag11 = true;
			}
			if (position.X == oldPosition.X || ai[3] >= (float)num14 || flag11)
			{
				ai[3] += 1f;
			}
			else if (Math.Abs(velocity.X) > 0.9f && ai[3] > 0f)
			{
				ai[3] -= 1f;
			}
			if (ai[3] > (float)(num14 * 10))
			{
				ai[3] = 0f;
			}
			if (justHit && !flag24)
			{
				ai[3] = 0f;
			}
			if (((Rectangle)(ref targetData.Hitbox)).Intersects(base.Hitbox))
			{
				ai[3] = 0f;
			}
			if (ai[3] == (float)num14)
			{
				netUpdate = true;
				if (flag24)
				{
					noGravity = true;
					noTileCollide = true;
					position.X += direction * width * 2;
					int num51 = 20;
					center2 = base.Size;
					float num52 = ((Vector2)(ref center2)).Length() / 2f;
					num52 /= 20f;
					int maxValue4 = 5;
					if (type == 576 || type == 577)
					{
						maxValue4 = 1;
					}
					for (int num54 = 0; num54 < num51; num54++)
					{
						if (Main.rand.Next(maxValue4) == 0)
						{
							Dust dust14 = Dust.NewDustDirect(position, width, height, 27, velocity.X * 1f, 0f, 100);
							dust14.scale = 0.55f;
							dust14.fadeIn = 0.7f;
							dust14.velocity *= 3f * num52;
							dust14.noGravity = true;
							dust14.fadeIn = 1.5f;
							dust14.velocity *= 3f;
						}
					}
					return;
				}
			}
		}
		if (!flag13)
		{
			if (ai[3] < (float)num14 && flag14)
			{
				if (num15 > 0 && Main.rand.Next(num15) == 0 && style.HasValue)
				{
					SoundStyle style2 = style.Value;
					SoundEngine.PlayTrackedSound(in style2, base.Center);
				}
				bool hasValidTarget = HasValidTarget;
				nPCTargetingMethod(this, faceTarget: true, null);
				targetData = GetTargetData();
				if (hasValidTarget != HasValidTarget)
				{
					netUpdate = true;
				}
			}
			else if (!flag15)
			{
				if (flag16)
				{
					EncourageDespawn(10);
				}
				if (velocity.X == 0f)
				{
					if (velocity.Y == 0f)
					{
						ai[2] += 1f;
						if (ai[2] >= 2f)
						{
							direction *= -1;
							spriteDirection = direction * num20;
							ai[2] = 0f;
							netUpdate = true;
						}
					}
				}
				else if (ai[2] != 0f)
				{
					ai[2] = 0f;
					netUpdate = true;
				}
				if (direction == 0)
				{
					direction = 1;
				}
			}
		}
		if (!flag17)
		{
			if (velocity.X < 0f - num16 || velocity.X > num16)
			{
				if (velocity.Y == 0f)
				{
					velocity *= num18;
				}
			}
			else if ((velocity.X < num16 && direction == 1) || (velocity.X > 0f - num16 && direction == -1))
			{
				velocity.X = MathHelper.Clamp(velocity.X + num17 * (float)direction, 0f - num16, num16);
			}
		}
		if (flag4)
		{
			if (confused)
			{
				ai[0] = 0f;
			}
			else
			{
				if (ai[1] > 0f)
				{
					ai[1] -= 1f;
				}
				if (justHit)
				{
					ai[1] = num11;
					ai[0] = 0f;
				}
				if (ai[0] > 0f)
				{
					if (flag7)
					{
						nPCTargetingMethod(this, faceTarget: true, null);
						targetData = GetTargetData();
					}
					if (ai[1] == (float)num67)
					{
						Vector2 vector13 = base.Center + vector;
						Vector2 v2 = targetData.Center - vector13;
						v2.Y -= Math.Abs(v2.X) * num7;
						Vector2 vector14 = v2.SafeNormalize(-Vector2.UnitY) * num2;
						for (int num55 = 0; num55 < num9; num55++)
						{
							Vector2 vector2 = vector13;
							Vector2 vector3 = vector14;
							vector3 = ((!vector7.HasValue) ? (vector3 + Utils.RandomVector2(Main.rand, 0f - num8, num8)) : (vector3 + vector7.Value));
							vector2 += vector3 * num10;
							if (Main.netMode != 1)
							{
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector2, vector3, num4, num3, 0f, Main.myPlayer);
							}
						}
						if (Math.Abs(vector14.Y) > Math.Abs(vector14.X) * 2f)
						{
							ai[0] = ((vector14.Y > 0f) ? 1 : 5);
						}
						else if (Math.Abs(vector14.X) > Math.Abs(vector14.Y) * 2f)
						{
							ai[0] = 3f;
						}
						else
						{
							ai[0] = ((vector14.Y > 0f) ? 2 : 4);
						}
						if (flag8)
						{
							direction = ((vector14.X > 0f) ? 1 : (-1));
						}
					}
					bool flag27 = true;
					if ((velocity.Y != 0f && !flag6) || ai[1] <= 0f)
					{
						bool flag28 = false;
						if (num13 != 0f && ai[1] <= 0f)
						{
							flag28 = true;
						}
						ai[0] = 0f;
						ai[1] = (flag28 ? num13 : 0f);
					}
					else if (!flag5 || (!flag27 && (!flag6 || velocity.Y == 0f)))
					{
						velocity.X *= 0.9f;
						spriteDirection = direction * num20;
					}
				}
				if ((ai[0] <= 0f || flag5) && (velocity.Y == 0f || flag6) && ai[1] <= 0f && targetData.Type != 0 && Collision.CanHit(position, width, height, targetData.Position, targetData.Width, targetData.Height))
				{
					Vector2 vector4 = targetData.Center - base.Center;
					if (((Vector2)(ref vector4)).Length() < num5)
					{
						netUpdate = true;
						velocity.X *= 0.5f;
						ai[0] = 3f;
						ai[1] = num66;
						if (Math.Abs(vector4.Y) > Math.Abs(vector4.X) * 2f)
						{
							ai[0] = ((vector4.Y > 0f) ? 1 : 5);
						}
						else if (Math.Abs(vector4.X) > Math.Abs(vector4.Y) * 2f)
						{
							ai[0] = 3f;
						}
						else
						{
							ai[0] = ((vector4.Y > 0f) ? 2 : 4);
						}
						if (flag8)
						{
							direction = ((vector4.X > 0f) ? 1 : (-1));
						}
					}
				}
				if (ai[0] <= 0f || flag5)
				{
					bool flag29 = Distance(targetData.Center) < num6;
					if (flag29 && Collision.CanHitLine(position, width, height, targetData.Position, targetData.Width, targetData.Height))
					{
						ai[3] = 0f;
					}
					if (velocity.X < 0f - num16 || velocity.X > num16 || flag29)
					{
						if (velocity.Y == 0f)
						{
							velocity.X *= num18;
						}
					}
					else if ((velocity.X < num16 && direction == 1) || (velocity.X > 0f - num16 && direction == -1))
					{
						velocity.X = MathHelper.Clamp(velocity.X + num17 * (float)direction, 0f - num16, num16);
					}
				}
			}
		}
		if (velocity.Y == 0f)
		{
			int num56 = (int)(base.Bottom.Y + 7f) / 16;
			int num71 = (int)base.Left.X / 16;
			int num57 = (int)base.Right.X / 16;
			int num58;
			for (num58 = num71; num58 <= num57; num58++)
			{
				num58 = Utils.Clamp(num58, 0, Main.maxTilesX);
				num56 = Utils.Clamp(num56, 0, Main.maxTilesY);
				Tile tile = Main.tile[num58, num56];
				if (tile == null)
				{
					return;
				}
				if (tile.nactive() && Main.tileSolid[tile.type])
				{
					flag26 = true;
					break;
				}
			}
		}
		Point point2 = base.Center.ToTileCoordinates();
		if (WorldGen.InWorld(point2.X, point2.Y, 5) && !noGravity)
		{
			GetTileCollisionParameters(out var cPosition, out var cWidth, out var cHeight);
			Vector2 vector5 = position - cPosition;
			Collision.StepUp(ref cPosition, ref velocity, cWidth, cHeight, ref stepSpeed, ref gfxOffY);
			position = cPosition + vector5;
		}
		if (flag26)
		{
			int num59 = (int)(base.Center.X + num19 * (float)direction) / 16;
			int num60 = ((int)base.Bottom.Y - 15) / 16;
			bool flag30 = position.Y + (float)height - (float)(num60 * 16) > 20f;
			Tile tileSafely = Framing.GetTileSafely(num59 + direction, num60 + 1);
			Tile tileSafely2 = Framing.GetTileSafely(num59, num60 + 1);
			Tile tileSafely3 = Framing.GetTileSafely(num59, num60);
			Tile tileSafely4 = Framing.GetTileSafely(num59, num60 - 1);
			Tile tileSafely5 = Framing.GetTileSafely(num59, num60 - 2);
			Tile tileSafely6 = Framing.GetTileSafely(num59, num60 - 3);
			if (flag39 && tileSafely4.nactive() && (TileLoader.IsClosedDoor(tileSafely4) || tileSafely4.type == 388))
			{
				ai[0] += 1f;
				ai[3] = 0f;
				if (ai[0] >= 60f)
				{
					if (flag40)
					{
						ai[1] = 0f;
					}
					int num61 = 5;
					if (Main.tile[num59, num60 - 1].type == 388)
					{
						num61 = 2;
					}
					velocity.X = 0.5f * (float)(-direction);
					ai[1] += num61;
					bool flag31 = false;
					if (ai[1] >= 10f)
					{
						flag31 = true;
						ai[1] = 10f;
					}
					if (flag2)
					{
						flag31 = true;
					}
					WorldGen.KillTile(num59, num60 - 1, fail: true);
					if (Main.netMode != 1 && flag31)
					{
						if (flag3)
						{
							WorldGen.KillTile(num59, num60 - 1);
							if (Main.netMode == 2)
							{
								NetMessage.SendData(17, -1, -1, null, 0, num59, num60 - 1);
							}
						}
						else
						{
							if (TileLoader.IsClosedDoor(tileSafely4))
							{
								bool flag32 = WorldGen.OpenDoor(num59, num60 - 1, direction);
								if (!flag32)
								{
									ai[3] = num14;
									netUpdate = true;
								}
								if (Main.netMode == 2 && flag32)
								{
									NetMessage.SendData(19, -1, -1, null, 0, num59, num60 - 1, direction);
								}
							}
							if (tileSafely4.type == 388)
							{
								bool flag33 = WorldGen.ShiftTallGate(num59, num60 - 1, closing: false);
								if (!flag33)
								{
									ai[3] = num14;
									netUpdate = true;
								}
								if (Main.netMode == 2 && flag33)
								{
									NetMessage.SendData(19, -1, -1, null, 4, num59, num60 - 1, direction);
								}
							}
						}
					}
				}
			}
			else
			{
				int num62 = spriteDirection * num20;
				if (velocity.X * (float)num62 > 0f)
				{
					if (height >= 32 && tileSafely5.nactive() && Main.tileSolid[tileSafely5.type])
					{
						netUpdate = true;
						velocity.Y = -7f;
						if (tileSafely6.nactive() && Main.tileSolid[tileSafely6.type])
						{
							velocity.Y = -8f;
						}
					}
					else if (tileSafely4.nactive() && Main.tileSolid[tileSafely4.type])
					{
						velocity.Y = -6f;
						netUpdate = true;
					}
					else if (flag30 && tileSafely3.nactive() && !tileSafely3.topSlope() && Main.tileSolid[tileSafely3.type])
					{
						velocity.Y = -5f;
						netUpdate = true;
					}
					else if (flag18 && (!tileSafely2.nactive() || !Main.tileSolid[tileSafely2.type]) && (!tileSafely.nactive() || !Main.tileSolid[tileSafely.type]))
					{
						velocity.X *= 1.5f;
						velocity.Y = -8f;
						netUpdate = true;
					}
					else if (flag39)
					{
						ai[0] = 0f;
						ai[1] = 0f;
					}
					if (velocity.Y == 0f && flag && ai[3] == 1f)
					{
						velocity.Y = -5f;
						netUpdate = true;
					}
				}
				if (flag19 && velocity.Y == 0f && Math.Abs(targetData.Center.X - base.Center.X) < 100f && Math.Abs(targetData.Center.Y - base.Center.Y) < 50f && Math.Abs(velocity.X) >= 1f && velocity.X * (float)direction > 0f)
				{
					velocity.X = MathHelper.Clamp(velocity.X * 2f, -3f, 3f);
					velocity.Y = -4f;
					netAlways = true;
				}
			}
		}
		else if (flag39)
		{
			ai[0] = 0f;
			ai[1] = 0f;
		}
		if (!flag12 || !noTileCollide)
		{
			return;
		}
		wet = false;
		if (flag22)
		{
			if (alpha < 60)
			{
				alpha += 20;
			}
			localAI[3] = 40f;
		}
		bool num72 = velocity.Y == 0f;
		if (Math.Abs(base.Center.X - targetData.Center.X) > 200f)
		{
			spriteDirection = (direction = ((targetData.Center.X > base.Center.X) ? 1 : (-1)));
			velocity.X = MathHelper.Lerp(velocity.X, (float)direction, 0.05f);
		}
		int num64 = 80;
		int num65 = height;
		Vector2 vector6 = default(Vector2);
		((Vector2)(ref vector6))._002Ector(base.Center.X - (float)(num64 / 2), position.Y + (float)height - (float)num65);
		bool flag35 = false;
		if (position.Y + (float)height < targetData.Position.Y + (float)targetData.Height - 16f)
		{
			flag35 = true;
		}
		if (flag35)
		{
			velocity.Y += 0.5f;
		}
		else if (Collision.SolidCollision(vector6, num64, num65) || targetData.Center.Y - base.Center.Y < -100f || (targetData.Center.Y - base.Center.Y < 10f && Math.Abs(targetData.Center.X - base.Center.X) < 60f))
		{
			if (velocity.Y > 0f)
			{
				velocity.Y = 0f;
			}
			if ((double)velocity.Y > -0.2)
			{
				velocity.Y -= 0.025f;
			}
			else
			{
				velocity.Y -= 0.2f;
			}
			if (velocity.Y < -4f)
			{
				velocity.Y = -4f;
			}
		}
		else
		{
			if (velocity.Y < 0f)
			{
				velocity.Y = 0f;
			}
			if ((double)velocity.Y < 0.1)
			{
				velocity.Y += 0.025f;
			}
			else
			{
				velocity.Y += 0.5f;
			}
		}
		if (velocity.Y > 10f)
		{
			velocity.Y = 10f;
		}
		if (num72)
		{
			velocity.Y = 0f;
		}
	}

	private void AI_084_LunaticCultist()
	{
		//IL_0496: Unknown result type (might be due to invalid IL or missing references)
		//IL_049b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0303: Unknown result type (might be due to invalid IL or missing references)
		//IL_0308: Unknown result type (might be due to invalid IL or missing references)
		//IL_051c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0521: Unknown result type (might be due to invalid IL or missing references)
		//IL_04dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0853: Unknown result type (might be due to invalid IL or missing references)
		//IL_085d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e61: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e66: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_075f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0769: Unknown result type (might be due to invalid IL or missing references)
		//IL_076e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1201: Unknown result type (might be due to invalid IL or missing references)
		//IL_1206: Unknown result type (might be due to invalid IL or missing references)
		//IL_1208: Unknown result type (might be due to invalid IL or missing references)
		//IL_120d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1212: Unknown result type (might be due to invalid IL or missing references)
		//IL_1214: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e23: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e28: Unknown result type (might be due to invalid IL or missing references)
		//IL_0db7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_07cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1922: Unknown result type (might be due to invalid IL or missing references)
		//IL_1927: Unknown result type (might be due to invalid IL or missing references)
		//IL_1929: Unknown result type (might be due to invalid IL or missing references)
		//IL_192e: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_11cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1946: Unknown result type (might be due to invalid IL or missing references)
		//IL_15eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_15f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_21bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_217a: Unknown result type (might be due to invalid IL or missing references)
		//IL_217f: Unknown result type (might be due to invalid IL or missing references)
		//IL_145e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1468: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_18eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_1103: Unknown result type (might be due to invalid IL or missing references)
		//IL_1108: Unknown result type (might be due to invalid IL or missing references)
		//IL_110d: Unknown result type (might be due to invalid IL or missing references)
		//IL_149b: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_14bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_14c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_14c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2923: Unknown result type (might be due to invalid IL or missing references)
		//IL_2928: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_14e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_14f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_14fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1114: Unknown result type (might be due to invalid IL or missing references)
		//IL_111b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1120: Unknown result type (might be due to invalid IL or missing references)
		//IL_1128: Unknown result type (might be due to invalid IL or missing references)
		//IL_112f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1136: Unknown result type (might be due to invalid IL or missing references)
		//IL_113d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a94: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aad: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2408: Unknown result type (might be due to invalid IL or missing references)
		//IL_2412: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f46: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f59: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fef: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ffe: Unknown result type (might be due to invalid IL or missing references)
		//IL_2003: Unknown result type (might be due to invalid IL or missing references)
		//IL_2005: Unknown result type (might be due to invalid IL or missing references)
		//IL_2007: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f22: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f27: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f29: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f31: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f36: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f38: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1509: Unknown result type (might be due to invalid IL or missing references)
		//IL_1522: Unknown result type (might be due to invalid IL or missing references)
		//IL_1527: Unknown result type (might be due to invalid IL or missing references)
		//IL_1529: Unknown result type (might be due to invalid IL or missing references)
		//IL_1534: Unknown result type (might be due to invalid IL or missing references)
		//IL_1539: Unknown result type (might be due to invalid IL or missing references)
		//IL_1541: Unknown result type (might be due to invalid IL or missing references)
		//IL_1548: Unknown result type (might be due to invalid IL or missing references)
		//IL_154f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1556: Unknown result type (might be due to invalid IL or missing references)
		//IL_26bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2445: Unknown result type (might be due to invalid IL or missing references)
		//IL_244a: Unknown result type (might be due to invalid IL or missing references)
		//IL_244c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2453: Unknown result type (might be due to invalid IL or missing references)
		//IL_245d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2462: Unknown result type (might be due to invalid IL or missing references)
		//IL_2467: Unknown result type (might be due to invalid IL or missing references)
		//IL_246c: Unknown result type (might be due to invalid IL or missing references)
		//IL_246e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2026: Unknown result type (might be due to invalid IL or missing references)
		//IL_2013: Unknown result type (might be due to invalid IL or missing references)
		//IL_2018: Unknown result type (might be due to invalid IL or missing references)
		//IL_201d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f59: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f46: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f50: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dda: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ddf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1de1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1de4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1de9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dee: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d12: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d14: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d17: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d21: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d23: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d25: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_16dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_1306: Unknown result type (might be due to invalid IL or missing references)
		//IL_130b: Unknown result type (might be due to invalid IL or missing references)
		//IL_130f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1319: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f93: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f95: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fa6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_248b: Unknown result type (might be due to invalid IL or missing references)
		//IL_249f: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2048: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e11: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e03: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e08: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d44: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d31: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d36: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fe4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fe9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fee: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2072: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e33: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d66: Unknown result type (might be due to invalid IL or missing references)
		//IL_171f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1724: Unknown result type (might be due to invalid IL or missing references)
		//IL_1726: Unknown result type (might be due to invalid IL or missing references)
		//IL_172d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1737: Unknown result type (might be due to invalid IL or missing references)
		//IL_173c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1741: Unknown result type (might be due to invalid IL or missing references)
		//IL_1746: Unknown result type (might be due to invalid IL or missing references)
		//IL_1748: Unknown result type (might be due to invalid IL or missing references)
		//IL_1848: Unknown result type (might be due to invalid IL or missing references)
		//IL_1853: Unknown result type (might be due to invalid IL or missing references)
		//IL_134e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1353: Unknown result type (might be due to invalid IL or missing references)
		//IL_1355: Unknown result type (might be due to invalid IL or missing references)
		//IL_135c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1366: Unknown result type (might be due to invalid IL or missing references)
		//IL_136b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1370: Unknown result type (might be due to invalid IL or missing references)
		//IL_1375: Unknown result type (might be due to invalid IL or missing references)
		//IL_1377: Unknown result type (might be due to invalid IL or missing references)
		//IL_24c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_24c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_24ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_24cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_24ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_24ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_24f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_251f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2527: Unknown result type (might be due to invalid IL or missing references)
		//IL_253e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2545: Unknown result type (might be due to invalid IL or missing references)
		//IL_2560: Unknown result type (might be due to invalid IL or missing references)
		//IL_2562: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_22b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_22b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_22be: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d90: Unknown result type (might be due to invalid IL or missing references)
		//IL_1764: Unknown result type (might be due to invalid IL or missing references)
		//IL_1775: Unknown result type (might be due to invalid IL or missing references)
		//IL_177a: Unknown result type (might be due to invalid IL or missing references)
		//IL_177f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1393: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_138c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1391: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ff8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1011: Unknown result type (might be due to invalid IL or missing references)
		//IL_1016: Unknown result type (might be due to invalid IL or missing references)
		//IL_1018: Unknown result type (might be due to invalid IL or missing references)
		//IL_1023: Unknown result type (might be due to invalid IL or missing references)
		//IL_1028: Unknown result type (might be due to invalid IL or missing references)
		//IL_1030: Unknown result type (might be due to invalid IL or missing references)
		//IL_1037: Unknown result type (might be due to invalid IL or missing references)
		//IL_103e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b81: Unknown result type (might be due to invalid IL or missing references)
		//IL_2700: Unknown result type (might be due to invalid IL or missing references)
		//IL_2705: Unknown result type (might be due to invalid IL or missing references)
		//IL_270a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2718: Unknown result type (might be due to invalid IL or missing references)
		//IL_271d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2722: Unknown result type (might be due to invalid IL or missing references)
		//IL_2730: Unknown result type (might be due to invalid IL or missing references)
		//IL_2736: Unknown result type (might be due to invalid IL or missing references)
		//IL_273b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2740: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1abf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1acd: Unknown result type (might be due to invalid IL or missing references)
		//IL_22f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_22f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_22fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2301: Unknown result type (might be due to invalid IL or missing references)
		//IL_230b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2310: Unknown result type (might be due to invalid IL or missing references)
		//IL_2315: Unknown result type (might be due to invalid IL or missing references)
		//IL_231a: Unknown result type (might be due to invalid IL or missing references)
		//IL_231c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1789: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_17c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_17c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_17cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_17d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_13fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1405: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c00: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c04: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c09: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c10: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c12: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c17: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c43: Unknown result type (might be due to invalid IL or missing references)
		//IL_2338: Unknown result type (might be due to invalid IL or missing references)
		//IL_2349: Unknown result type (might be due to invalid IL or missing references)
		//IL_234e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2353: Unknown result type (might be due to invalid IL or missing references)
		//IL_2331: Unknown result type (might be due to invalid IL or missing references)
		//IL_2336: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c61: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c66: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2779: Unknown result type (might be due to invalid IL or missing references)
		//IL_2783: Unknown result type (might be due to invalid IL or missing references)
		//IL_279b: Unknown result type (might be due to invalid IL or missing references)
		//IL_27a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_235d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2376: Unknown result type (might be due to invalid IL or missing references)
		//IL_237b: Unknown result type (might be due to invalid IL or missing references)
		//IL_237d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2388: Unknown result type (might be due to invalid IL or missing references)
		//IL_238d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2395: Unknown result type (might be due to invalid IL or missing references)
		//IL_239c: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_23aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2803: Unknown result type (might be due to invalid IL or missing references)
		//IL_27d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2811: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c66: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cce: Unknown result type (might be due to invalid IL or missing references)
		//IL_281f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b41: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b59: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b61: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b66: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c17: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b80: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b88: Unknown result type (might be due to invalid IL or missing references)
		if (this.ai[0] != -1f && Main.rand.Next(1000) == 0)
		{
			SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(88, 92));
		}
		bool expertMode = Main.expertMode;
		bool flag = life <= lifeMax / 2;
		int num = 120;
		int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(35f, 25f);
		if (expertMode)
		{
			num = 90;
		}
		if (Main.getGoodWorld)
		{
			num -= 30;
		}
		int num12 = 18;
		int num23 = 3;
		int attackDamage_ForProjectiles2 = GetAttackDamage_ForProjectiles(30f, 20f);
		if (expertMode)
		{
			num12 = 12;
			num23 = 4;
		}
		if (Main.getGoodWorld)
		{
			num12 = 10;
			num23 = 5;
		}
		int num34 = 80;
		int attackDamage_ForProjectiles3 = GetAttackDamage_ForProjectiles(45f, 30f);
		if (expertMode)
		{
			num34 = 40;
		}
		if (Main.getGoodWorld)
		{
			num34 -= 20;
		}
		int num45 = 20;
		int num56 = 2;
		if (expertMode)
		{
			num45 = 30;
			num56 = 2;
		}
		int num58 = 20;
		int num59 = 3;
		bool flag2 = type == 439;
		bool flag3 = false;
		bool flag4 = false;
		if (flag)
		{
			defense = (int)((float)defDefense * 0.65f);
		}
		if (!flag2)
		{
			if (this.ai[3] < 0f || !Main.npc[(int)this.ai[3]].active || Main.npc[(int)this.ai[3]].type != 439)
			{
				life = 0;
				HitEffect();
				active = false;
				return;
			}
			this.ai[0] = Main.npc[(int)this.ai[3]].ai[0];
			this.ai[1] = Main.npc[(int)this.ai[3]].ai[1];
			if (this.ai[0] == 5f)
			{
				if (justHit)
				{
					life = 0;
					HitEffect();
					active = false;
					if (Main.netMode != 1)
					{
						NetMessage.SendData(23, -1, -1, null, whoAmI);
					}
					NPC obj = Main.npc[(int)this.ai[3]];
					obj.ai[0] = 6f;
					obj.ai[1] = 0f;
					obj.netUpdate = true;
				}
			}
			else
			{
				flag3 = true;
				flag4 = true;
			}
		}
		else if (this.ai[0] == 5f && this.ai[1] >= 120f && this.ai[1] < 420f && justHit)
		{
			this.ai[0] = 0f;
			this.ai[1] = 0f;
			this.ai[3] += 1f;
			velocity = Vector2.Zero;
			netUpdate = true;
			List<int> list = new List<int>();
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == 440 && Main.npc[i].ai[3] == (float)whoAmI)
				{
					list.Add(i);
				}
			}
			int num60 = 10;
			if (Main.expertMode)
			{
				num60 = 3;
			}
			foreach (int item in list)
			{
				NPC nPC = Main.npc[item];
				if (nPC.localAI[1] == localAI[1] && num60 > 0)
				{
					num60--;
					nPC.life = 0;
					nPC.HitEffect();
					nPC.active = false;
					if (Main.netMode != 1)
					{
						NetMessage.SendData(23, -1, -1, null, item);
					}
				}
				else if (num60 > 0)
				{
					num60--;
					nPC.life = 0;
					nPC.HitEffect();
					nPC.active = false;
				}
			}
			Main.projectile[(int)this.ai[2]].ai[1] = -1f;
			Main.projectile[(int)this.ai[2]].netUpdate = true;
		}
		Vector2 center = base.Center;
		Player player = Main.player[target];
		float num2 = 5600f;
		if (target < 0 || target == 255 || player.dead || !player.active || Vector2.Distance(player.Center, center) > num2)
		{
			TargetClosest(faceTarget: false);
			player = Main.player[target];
			netUpdate = true;
		}
		if (player.dead || !player.active || Vector2.Distance(player.Center, center) > num2)
		{
			life = 0;
			HitEffect();
			active = false;
			if (Main.netMode != 1)
			{
				NetMessage.SendData(28, -1, -1, null, whoAmI, -1f);
			}
			new List<int>().Add(whoAmI);
			for (int j = 0; j < 200; j++)
			{
				if (Main.npc[j].active && Main.npc[j].type == 440 && Main.npc[j].ai[3] == (float)whoAmI)
				{
					Main.npc[j].life = 0;
					Main.npc[j].HitEffect();
					Main.npc[j].active = false;
					if (Main.netMode != 1)
					{
						NetMessage.SendData(28, -1, -1, null, whoAmI, -1f);
					}
				}
			}
		}
		float num3 = this.ai[3];
		if (localAI[0] == 0f)
		{
			SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 89);
			localAI[0] = 1f;
			alpha = 255;
			rotation = 0f;
			if (Main.netMode != 1)
			{
				this.ai[0] = -1f;
				netUpdate = true;
			}
		}
		if (this.ai[0] == -1f)
		{
			alpha -= 5;
			if (alpha < 0)
			{
				alpha = 0;
			}
			this.ai[1] += 1f;
			if (this.ai[1] >= 420f)
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				netUpdate = true;
			}
			else if (this.ai[1] > 360f)
			{
				velocity *= 0.95f;
				if (localAI[2] != 13f)
				{
					SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 105);
				}
				localAI[2] = 13f;
			}
			else if (this.ai[1] > 300f)
			{
				velocity = -Vector2.UnitY;
				localAI[2] = 10f;
			}
			else if (this.ai[1] > 120f)
			{
				localAI[2] = 1f;
			}
			else
			{
				localAI[2] = 0f;
			}
			flag3 = true;
			flag4 = true;
		}
		Vector2 center8;
		if (this.ai[0] == 0f)
		{
			if (this.ai[1] == 0f)
			{
				TargetClosest(faceTarget: false);
			}
			localAI[2] = 10f;
			int num4 = Math.Sign(player.Center.X - center.X);
			if (num4 != 0)
			{
				direction = (spriteDirection = num4);
			}
			this.ai[1] += 1f;
			if (this.ai[1] >= 40f && flag2)
			{
				int num5 = 0;
				if (flag)
				{
					switch ((int)this.ai[3])
					{
					case 0:
						num5 = 0;
						break;
					case 1:
						num5 = 1;
						break;
					case 2:
						num5 = 0;
						break;
					case 3:
						num5 = 5;
						break;
					case 4:
						num5 = 0;
						break;
					case 5:
						num5 = 3;
						break;
					case 6:
						num5 = 0;
						break;
					case 7:
						num5 = 5;
						break;
					case 8:
						num5 = 0;
						break;
					case 9:
						num5 = 2;
						break;
					case 10:
						num5 = 0;
						break;
					case 11:
						num5 = 3;
						break;
					case 12:
						num5 = 0;
						break;
					case 13:
						num5 = 4;
						this.ai[3] = -1f;
						break;
					default:
						this.ai[3] = -1f;
						break;
					}
				}
				else
				{
					switch ((int)this.ai[3])
					{
					case 0:
						num5 = 0;
						break;
					case 1:
						num5 = 1;
						break;
					case 2:
						num5 = 0;
						break;
					case 3:
						num5 = 2;
						break;
					case 4:
						num5 = 0;
						break;
					case 5:
						num5 = 3;
						break;
					case 6:
						num5 = 0;
						break;
					case 7:
						num5 = 1;
						break;
					case 8:
						num5 = 0;
						break;
					case 9:
						num5 = 2;
						break;
					case 10:
						num5 = 0;
						break;
					case 11:
						num5 = 4;
						this.ai[3] = -1f;
						break;
					default:
						this.ai[3] = -1f;
						break;
					}
				}
				int maxValue = 6;
				if (life < lifeMax / 3)
				{
					maxValue = 4;
				}
				if (life < lifeMax / 4)
				{
					maxValue = 3;
				}
				if (expertMode && flag && Main.rand.Next(maxValue) == 0 && num5 != 0 && num5 != 4 && num5 != 5 && CountNPCS(523) < 10)
				{
					num5 = 6;
				}
				if (num5 == 0)
				{
					center8 = player.Center + new Vector2(0f, -100f) - center;
					float num6 = (float)Math.Ceiling(((Vector2)(ref center8)).Length() / 50f);
					if (num6 == 0f)
					{
						num6 = 1f;
					}
					List<int> list2 = new List<int>();
					int num7 = 0;
					list2.Add(whoAmI);
					for (int k = 0; k < 200; k++)
					{
						if (Main.npc[k].active && Main.npc[k].type == 440 && Main.npc[k].ai[3] == (float)whoAmI)
						{
							list2.Add(k);
						}
					}
					bool flag5 = list2.Count % 2 == 0;
					foreach (int item2 in list2)
					{
						NPC nPC2 = Main.npc[item2];
						Vector2 center2 = nPC2.Center;
						float num8 = (float)((num7 + flag5.ToInt() + 1) / 2) * ((float)Math.PI * 2f) * 0.4f / (float)list2.Count;
						if (num7 % 2 == 1)
						{
							num8 *= -1f;
						}
						if (list2.Count == 1)
						{
							num8 = 0f;
						}
						Vector2 spinningpoint3 = new Vector2(0f, -1f);
						double radians = num8;
						center8 = default(Vector2);
						Vector2 vector = Utils.RotatedBy(spinningpoint3, radians, center8) * new Vector2(300f, 200f);
						Vector2 vector9 = player.Center + vector - center2;
						nPC2.ai[0] = 1f;
						nPC2.ai[1] = num6 * 2f;
						nPC2.velocity = vector9 / num6;
						if (whoAmI >= nPC2.whoAmI)
						{
							nPC2.position -= nPC2.velocity;
						}
						nPC2.netUpdate = true;
						num7++;
					}
				}
				switch (num5)
				{
				case 1:
					this.ai[0] = 3f;
					this.ai[1] = 0f;
					break;
				case 2:
					this.ai[0] = 2f;
					this.ai[1] = 0f;
					break;
				case 3:
					this.ai[0] = 4f;
					this.ai[1] = 0f;
					break;
				case 4:
					this.ai[0] = 5f;
					this.ai[1] = 0f;
					break;
				}
				if (num5 == 5)
				{
					this.ai[0] = 7f;
					this.ai[1] = 0f;
				}
				if (num5 == 6)
				{
					this.ai[0] = 8f;
					this.ai[1] = 0f;
				}
				netUpdate = true;
			}
		}
		else if (this.ai[0] == 1f)
		{
			flag3 = true;
			localAI[2] = 10f;
			if ((float)(int)this.ai[1] % 2f != 0f && this.ai[1] != 1f)
			{
				position -= velocity;
			}
			this.ai[1] -= 1f;
			if (this.ai[1] <= 0f)
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				this.ai[3] += 1f;
				velocity = Vector2.Zero;
				netUpdate = true;
			}
		}
		else if (this.ai[0] == 2f)
		{
			localAI[2] = 11f;
			Vector2 vec = Vector2.Normalize(player.Center - center);
			if (vec.HasNaNs())
			{
				((Vector2)(ref vec))._002Ector((float)direction, 0f);
			}
			if (this.ai[1] >= 4f && flag2 && (int)(this.ai[1] - 4f) % num == 0)
			{
				if (Main.netMode != 1)
				{
					List<int> list3 = new List<int>();
					for (int l = 0; l < 200; l++)
					{
						if (Main.npc[l].active && Main.npc[l].type == 440 && Main.npc[l].ai[3] == (float)whoAmI)
						{
							list3.Add(l);
						}
					}
					foreach (int item3 in list3)
					{
						NPC nPC3 = Main.npc[item3];
						Vector2 center3 = nPC3.Center;
						int num9 = Math.Sign(player.Center.X - center3.X);
						if (num9 != 0)
						{
							nPC3.direction = (nPC3.spriteDirection = num9);
						}
						if (Main.netMode != 1)
						{
							vec = Vector2.Normalize(player.Center - center3 + player.velocity * 20f);
							if (vec.HasNaNs())
							{
								vec = new Vector2((float)direction, 0f);
							}
							Vector2 vector10 = center3 + new Vector2((float)(direction * 30), 12f);
							for (int m = 0; m < 1; m++)
							{
								Vector2 spinninpoint = vec * (6f + (float)Main.rand.NextDouble() * 4f);
								spinninpoint = spinninpoint.RotatedByRandom(0.5235987901687622);
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector10.X, vector10.Y, spinninpoint.X, spinninpoint.Y, 468, 18, 0f, Main.myPlayer);
							}
						}
					}
				}
				if (Main.netMode != 1)
				{
					vec = Vector2.Normalize(player.Center - center + player.velocity * 20f);
					if (vec.HasNaNs())
					{
						((Vector2)(ref vec))._002Ector((float)direction, 0f);
					}
					Vector2 vector11 = base.Center + new Vector2((float)(direction * 30), 12f);
					for (int n = 0; n < 1; n++)
					{
						Vector2 vector12 = vec * 4f;
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector11.X, vector11.Y, vector12.X, vector12.Y, 464, attackDamage_ForProjectiles, 0f, Main.myPlayer, 0f, 1f);
					}
				}
			}
			this.ai[1] += 1f;
			if (this.ai[1] >= (float)(4 + num))
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				this.ai[3] += 1f;
				velocity = Vector2.Zero;
				netUpdate = true;
			}
		}
		else if (this.ai[0] == 3f)
		{
			localAI[2] = 11f;
			Vector2 vec2 = Vector2.Normalize(player.Center - center);
			if (vec2.HasNaNs())
			{
				((Vector2)(ref vec2))._002Ector((float)direction, 0f);
			}
			if (this.ai[1] >= 4f && flag2 && (int)(this.ai[1] - 4f) % num12 == 0)
			{
				if ((int)(this.ai[1] - 4f) / num12 == 2)
				{
					List<int> list4 = new List<int>();
					for (int num10 = 0; num10 < 200; num10++)
					{
						if (Main.npc[num10].active && Main.npc[num10].type == 440 && Main.npc[num10].ai[3] == (float)whoAmI)
						{
							list4.Add(num10);
						}
					}
					if (Main.netMode != 1)
					{
						foreach (int item4 in list4)
						{
							NPC nPC4 = Main.npc[item4];
							Vector2 center4 = nPC4.Center;
							int num11 = Math.Sign(player.Center.X - center4.X);
							if (num11 != 0)
							{
								nPC4.direction = (nPC4.spriteDirection = num11);
							}
							if (Main.netMode != 1)
							{
								vec2 = Vector2.Normalize(player.Center - center4 + player.velocity * 20f);
								if (vec2.HasNaNs())
								{
									vec2 = new Vector2((float)direction, 0f);
								}
								Vector2 vector13 = center4 + new Vector2((float)(direction * 30), 12f);
								for (int num13 = 0; num13 < 1; num13++)
								{
									Vector2 spinninpoint2 = vec2 * (6f + (float)Main.rand.NextDouble() * 4f);
									spinninpoint2 = spinninpoint2.RotatedByRandom(0.5235987901687622);
									Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector13.X, vector13.Y, spinninpoint2.X, spinninpoint2.Y, 468, 18, 0f, Main.myPlayer);
								}
							}
						}
					}
				}
				int num14 = Math.Sign(player.Center.X - center.X);
				if (num14 != 0)
				{
					direction = (spriteDirection = num14);
				}
				if (Main.netMode != 1)
				{
					vec2 = Vector2.Normalize(player.Center - center + player.velocity * 20f);
					if (vec2.HasNaNs())
					{
						((Vector2)(ref vec2))._002Ector((float)direction, 0f);
					}
					Vector2 vector14 = base.Center + new Vector2((float)(direction * 30), 12f);
					for (int num15 = 0; num15 < 1; num15++)
					{
						Vector2 spinninpoint3 = vec2 * (6f + (float)Main.rand.NextDouble() * 4f);
						spinninpoint3 = spinninpoint3.RotatedByRandom(0.5235987901687622);
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector14.X, vector14.Y, spinninpoint3.X, spinninpoint3.Y, 467, attackDamage_ForProjectiles2, 0f, Main.myPlayer);
					}
				}
			}
			this.ai[1] += 1f;
			if (this.ai[1] >= (float)(4 + num12 * num23))
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				this.ai[3] += 1f;
				velocity = Vector2.Zero;
				netUpdate = true;
			}
		}
		else if (this.ai[0] == 4f)
		{
			if (flag2)
			{
				localAI[2] = 12f;
			}
			else
			{
				localAI[2] = 11f;
			}
			if (this.ai[1] == 20f && flag2 && Main.netMode != 1)
			{
				List<int> list5 = new List<int>();
				for (int num16 = 0; num16 < 200; num16++)
				{
					if (Main.npc[num16].active && Main.npc[num16].type == 440 && Main.npc[num16].ai[3] == (float)whoAmI)
					{
						list5.Add(num16);
					}
				}
				foreach (int item5 in list5)
				{
					NPC nPC5 = Main.npc[item5];
					Vector2 center5 = nPC5.Center;
					int num17 = Math.Sign(player.Center.X - center5.X);
					if (num17 != 0)
					{
						nPC5.direction = (nPC5.spriteDirection = num17);
					}
					if (Main.netMode != 1)
					{
						Vector2 vector15 = Vector2.Normalize(player.Center - center5 + player.velocity * 20f);
						if (vector15.HasNaNs())
						{
							((Vector2)(ref vector15))._002Ector((float)direction, 0f);
						}
						Vector2 vector16 = center5 + new Vector2((float)(direction * 30), 12f);
						for (int num18 = 0; num18 < 1; num18++)
						{
							Vector2 spinninpoint4 = vector15 * (6f + (float)Main.rand.NextDouble() * 4f);
							spinninpoint4 = spinninpoint4.RotatedByRandom(0.5235987901687622);
							Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector16.X, vector16.Y, spinninpoint4.X, spinninpoint4.Y, 468, 18, 0f, Main.myPlayer);
						}
					}
				}
				if ((int)(this.ai[1] - 20f) % num34 == 0)
				{
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y - 100f, 0f, 0f, 465, attackDamage_ForProjectiles3, 0f, Main.myPlayer);
				}
			}
			this.ai[1] += 1f;
			if (this.ai[1] >= (float)(20 + num34))
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				this.ai[3] += 1f;
				velocity = Vector2.Zero;
				netUpdate = true;
			}
		}
		else if (this.ai[0] == 5f)
		{
			localAI[2] = 10f;
			if (Vector2.Normalize(player.Center - center).HasNaNs())
			{
				new Vector2((float)direction, 0f);
			}
			if (this.ai[1] >= 0f && this.ai[1] < 30f)
			{
				flag3 = true;
				flag4 = true;
				float num19 = (this.ai[1] - 0f) / 30f;
				alpha = (int)(num19 * 255f);
			}
			else if (this.ai[1] >= 30f && this.ai[1] < 90f)
			{
				if (this.ai[1] == 30f && Main.netMode != 1 && flag2)
				{
					localAI[1] += 1f;
					Vector2 spinningpoint = default(Vector2);
					((Vector2)(ref spinningpoint))._002Ector(180f, 0f);
					List<int> list6 = new List<int>();
					for (int num20 = 0; num20 < 200; num20++)
					{
						if (Main.npc[num20].active && Main.npc[num20].type == 440 && Main.npc[num20].ai[3] == (float)whoAmI)
						{
							list6.Add(num20);
						}
					}
					int num21 = 6 - list6.Count;
					if (num21 > 2)
					{
						num21 = 2;
					}
					int num22 = list6.Count + num21 + 1;
					float[] array = new float[num22];
					for (int num24 = 0; num24 < array.Length; num24++)
					{
						int num61 = num24;
						Vector2 center9 = base.Center;
						Vector2 spinningpoint4 = spinningpoint;
						double radians2 = (float)num24 * ((float)Math.PI * 2f) / (float)num22 - (float)Math.PI / 2f;
						center8 = default(Vector2);
						array[num61] = Vector2.Distance(center9 + spinningpoint4.RotatedBy(radians2, center8), player.Center);
					}
					int num25 = 0;
					for (int num26 = 1; num26 < array.Length; num26++)
					{
						if (array[num25] > array[num26])
						{
							num25 = num26;
						}
					}
					num25 = ((num25 >= num22 / 2) ? (num25 - num22 / 2) : (num25 + num22 / 2));
					int num27 = num21;
					for (int num28 = 0; num28 < array.Length; num28++)
					{
						if (num25 != num28)
						{
							Vector2 center10 = base.Center;
							Vector2 spinningpoint5 = spinningpoint;
							double radians3 = (float)num28 * ((float)Math.PI * 2f) / (float)num22 - (float)Math.PI / 2f;
							center8 = default(Vector2);
							Vector2 center6 = center10 + spinningpoint5.RotatedBy(radians3, center8);
							if (num27-- > 0)
							{
								int num29 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)center6.X, (int)center6.Y + height / 2, 440, whoAmI);
								Main.npc[num29].ai[3] = whoAmI;
								Main.npc[num29].netUpdate = true;
								Main.npc[num29].localAI[1] = localAI[1];
							}
							else
							{
								int num30 = list6[-num27 - 1];
								Main.npc[num30].Center = center6;
								NetMessage.SendData(23, -1, -1, null, num30);
							}
						}
					}
					this.ai[2] = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, 0f, 0f, 490, 0, 0f, Main.myPlayer, 0f, whoAmI);
					Vector2 center11 = base.Center;
					Vector2 spinningpoint6 = spinningpoint;
					double radians4 = (float)num25 * ((float)Math.PI * 2f) / (float)num22 - (float)Math.PI / 2f;
					center8 = default(Vector2);
					base.Center = center11 + spinningpoint6.RotatedBy(radians4, center8);
					netUpdate = true;
					list6.Clear();
				}
				flag3 = true;
				flag4 = true;
				alpha = 255;
				if (flag2)
				{
					Vector2 vector2 = Main.projectile[(int)this.ai[2]].Center;
					vector2 -= base.Center;
					if (vector2 == Vector2.Zero)
					{
						vector2 = -Vector2.UnitY;
					}
					((Vector2)(ref vector2)).Normalize();
					if (Math.Abs(vector2.Y) < 0.77f)
					{
						localAI[2] = 11f;
					}
					else if (vector2.Y < 0f)
					{
						localAI[2] = 12f;
					}
					else
					{
						localAI[2] = 10f;
					}
					int num31 = Math.Sign(vector2.X);
					if (num31 != 0)
					{
						direction = (spriteDirection = num31);
					}
				}
				else
				{
					Vector2 vector3 = Main.projectile[(int)Main.npc[(int)this.ai[3]].ai[2]].Center;
					vector3 -= base.Center;
					if (vector3 == Vector2.Zero)
					{
						vector3 = -Vector2.UnitY;
					}
					((Vector2)(ref vector3)).Normalize();
					if (Math.Abs(vector3.Y) < 0.77f)
					{
						localAI[2] = 11f;
					}
					else if (vector3.Y < 0f)
					{
						localAI[2] = 12f;
					}
					else
					{
						localAI[2] = 10f;
					}
					int num32 = Math.Sign(vector3.X);
					if (num32 != 0)
					{
						direction = (spriteDirection = num32);
					}
				}
			}
			else if (this.ai[1] >= 90f && this.ai[1] < 120f)
			{
				flag3 = true;
				flag4 = true;
				float num33 = (this.ai[1] - 90f) / 30f;
				alpha = 255 - (int)(num33 * 255f);
			}
			else if (this.ai[1] >= 120f && this.ai[1] < 420f)
			{
				flag4 = true;
				alpha = 0;
				if (flag2)
				{
					Vector2 vector4 = Main.projectile[(int)this.ai[2]].Center;
					vector4 -= base.Center;
					if (vector4 == Vector2.Zero)
					{
						vector4 = -Vector2.UnitY;
					}
					((Vector2)(ref vector4)).Normalize();
					if (Math.Abs(vector4.Y) < 0.77f)
					{
						localAI[2] = 11f;
					}
					else if (vector4.Y < 0f)
					{
						localAI[2] = 12f;
					}
					else
					{
						localAI[2] = 10f;
					}
					int num35 = Math.Sign(vector4.X);
					if (num35 != 0)
					{
						direction = (spriteDirection = num35);
					}
				}
				else
				{
					Vector2 vector5 = Main.projectile[(int)Main.npc[(int)this.ai[3]].ai[2]].Center;
					vector5 -= base.Center;
					if (vector5 == Vector2.Zero)
					{
						vector5 = -Vector2.UnitY;
					}
					((Vector2)(ref vector5)).Normalize();
					if (Math.Abs(vector5.Y) < 0.77f)
					{
						localAI[2] = 11f;
					}
					else if (vector5.Y < 0f)
					{
						localAI[2] = 12f;
					}
					else
					{
						localAI[2] = 10f;
					}
					int num36 = Math.Sign(vector5.X);
					if (num36 != 0)
					{
						direction = (spriteDirection = num36);
					}
				}
			}
			this.ai[1] += 1f;
			if (this.ai[1] >= 420f)
			{
				flag4 = true;
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				this.ai[3] += 1f;
				velocity = Vector2.Zero;
				netUpdate = true;
			}
		}
		else if (this.ai[0] == 6f)
		{
			localAI[2] = 13f;
			this.ai[1] += 1f;
			if (this.ai[1] >= 120f)
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				this.ai[3] += 1f;
				velocity = Vector2.Zero;
				netUpdate = true;
			}
		}
		else if (this.ai[0] == 7f)
		{
			localAI[2] = 11f;
			Vector2 vec3 = Vector2.Normalize(player.Center - center);
			if (vec3.HasNaNs())
			{
				((Vector2)(ref vec3))._002Ector((float)direction, 0f);
			}
			if (this.ai[1] >= 4f && flag2 && (int)(this.ai[1] - 4f) % num45 == 0)
			{
				if ((int)(this.ai[1] - 4f) / num45 == 2)
				{
					List<int> list7 = new List<int>();
					for (int num37 = 0; num37 < 200; num37++)
					{
						if (Main.npc[num37].active && Main.npc[num37].type == 440 && Main.npc[num37].ai[3] == (float)whoAmI)
						{
							list7.Add(num37);
						}
					}
					foreach (int item6 in list7)
					{
						NPC nPC6 = Main.npc[item6];
						Vector2 center7 = nPC6.Center;
						int num38 = Math.Sign(player.Center.X - center7.X);
						if (num38 != 0)
						{
							nPC6.direction = (nPC6.spriteDirection = num38);
						}
						if (Main.netMode != 1)
						{
							vec3 = Vector2.Normalize(player.Center - center7 + player.velocity * 20f);
							if (vec3.HasNaNs())
							{
								vec3 = new Vector2((float)direction, 0f);
							}
							Vector2 vector6 = center7 + new Vector2((float)(direction * 30), 12f);
							for (int num39 = 0; (float)num39 < 5f; num39++)
							{
								Vector2 spinninpoint5 = vec3 * (6f + (float)Main.rand.NextDouble() * 4f);
								spinninpoint5 = spinninpoint5.RotatedByRandom(1.2566370964050293);
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector6.X, vector6.Y, spinninpoint5.X, spinninpoint5.Y, 468, 18, 0f, Main.myPlayer);
							}
						}
					}
				}
				int num40 = Math.Sign(player.Center.X - center.X);
				if (num40 != 0)
				{
					direction = (spriteDirection = num40);
				}
				if (Main.netMode != 1)
				{
					vec3 = Vector2.Normalize(player.Center - center + player.velocity * 20f);
					if (vec3.HasNaNs())
					{
						((Vector2)(ref vec3))._002Ector((float)direction, 0f);
					}
					Vector2 vector7 = base.Center + new Vector2((float)(direction * 30), 12f);
					float num41 = 8f;
					float num42 = (float)Math.PI * 2f / 25f;
					for (int num43 = 0; (float)num43 < 5f; num43++)
					{
						Vector2 spinningpoint2 = vec3 * num41;
						Vector2 spinningpoint7 = spinningpoint2;
						double radians5 = num42 * (float)num43 - ((float)Math.PI * 2f / 5f - num42) / 2f;
						center8 = default(Vector2);
						spinningpoint2 = spinningpoint7.RotatedBy(radians5, center8);
						float ai = (Main.rand.NextFloat() - 0.5f) * 0.3f * ((float)Math.PI * 2f) / 60f;
						int num44 = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)vector7.X, (int)vector7.Y + 7, 522, 0, 0f, ai, spinningpoint2.X, spinningpoint2.Y);
						Main.npc[num44].velocity = spinningpoint2;
						Main.npc[num44].netUpdate = true;
					}
				}
			}
			this.ai[1] += 1f;
			if (this.ai[1] >= (float)(4 + num45 * num56))
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				this.ai[3] += 1f;
				velocity = Vector2.Zero;
				netUpdate = true;
			}
		}
		else if (this.ai[0] == 8f)
		{
			localAI[2] = 13f;
			if (this.ai[1] >= 4f && flag2 && (int)(this.ai[1] - 4f) % num58 == 0)
			{
				List<int> list8 = new List<int>();
				for (int num46 = 0; num46 < 200; num46++)
				{
					if (Main.npc[num46].active && Main.npc[num46].type == 440 && Main.npc[num46].ai[3] == (float)whoAmI)
					{
						list8.Add(num46);
					}
				}
				int num47 = list8.Count + 1;
				if (num47 > 3)
				{
					num47 = 3;
				}
				int num48 = Math.Sign(player.Center.X - center.X);
				if (num48 != 0)
				{
					direction = (spriteDirection = num48);
				}
				if (Main.netMode != 1)
				{
					for (int num49 = 0; num49 < num47; num49++)
					{
						Point point = base.Center.ToTileCoordinates();
						Point point2 = Main.player[target].Center.ToTileCoordinates();
						Vector2 vector8 = Main.player[target].Center - base.Center;
						int num50 = 20;
						int num51 = 3;
						int num52 = 7;
						int num53 = 2;
						int num54 = 0;
						bool flag6 = false;
						if (((Vector2)(ref vector8)).Length() > 2000f)
						{
							flag6 = true;
						}
						while (!flag6 && num54 < 100)
						{
							num54++;
							int num55 = Main.rand.Next(point2.X - num50, point2.X + num50 + 1);
							int num57 = Main.rand.Next(point2.Y - num50, point2.Y + num50 + 1);
							if ((num57 < point2.Y - num52 || num57 > point2.Y + num52 || num55 < point2.X - num52 || num55 > point2.X + num52) && (num57 < point.Y - num51 || num57 > point.Y + num51 || num55 < point.X - num51 || num55 > point.X + num51) && !Main.tile[num55, num57].nactive())
							{
								bool flag7 = true;
								if (flag7 && Collision.SolidTiles(num55 - num53, num55 + num53, num57 - num53, num57 + num53))
								{
									flag7 = false;
								}
								if (flag7)
								{
									NewNPC(GetSpawnSourceForNPCFromNPCAI(), num55 * 16 + 8, num57 * 16 + 8, 523, 0, whoAmI);
									flag6 = true;
									break;
								}
							}
						}
					}
				}
			}
			this.ai[1] += 1f;
			if (this.ai[1] >= (float)(4 + num58 * num59))
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				this.ai[3] += 1f;
				velocity = Vector2.Zero;
				netUpdate = true;
			}
		}
		if (!flag2)
		{
			this.ai[3] = num3;
		}
		dontTakeDamage = flag3;
		chaseable = !flag4;
	}

	private void AI_108_DivingFlyer()
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_020b: Unknown result type (might be due to invalid IL or missing references)
		//IL_026f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0274: Unknown result type (might be due to invalid IL or missing references)
		//IL_0530: Unknown result type (might be due to invalid IL or missing references)
		//IL_0535: Unknown result type (might be due to invalid IL or missing references)
		//IL_0539: Unknown result type (might be due to invalid IL or missing references)
		//IL_053e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0540: Unknown result type (might be due to invalid IL or missing references)
		//IL_0545: Unknown result type (might be due to invalid IL or missing references)
		//IL_0547: Unknown result type (might be due to invalid IL or missing references)
		//IL_0549: Unknown result type (might be due to invalid IL or missing references)
		//IL_054f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0554: Unknown result type (might be due to invalid IL or missing references)
		//IL_0559: Unknown result type (might be due to invalid IL or missing references)
		//IL_0562: Unknown result type (might be due to invalid IL or missing references)
		//IL_0564: Unknown result type (might be due to invalid IL or missing references)
		//IL_056b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0570: Unknown result type (might be due to invalid IL or missing references)
		//IL_0572: Unknown result type (might be due to invalid IL or missing references)
		//IL_0574: Unknown result type (might be due to invalid IL or missing references)
		//IL_057b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0580: Unknown result type (might be due to invalid IL or missing references)
		//IL_0583: Unknown result type (might be due to invalid IL or missing references)
		//IL_058c: Unknown result type (might be due to invalid IL or missing references)
		//IL_072c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0733: Unknown result type (might be due to invalid IL or missing references)
		//IL_0738: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_099a: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_088a: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_08bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_08dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_08de: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0320: Unknown result type (might be due to invalid IL or missing references)
		//IL_032d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0332: Unknown result type (might be due to invalid IL or missing references)
		//IL_0338: Unknown result type (might be due to invalid IL or missing references)
		//IL_033e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0343: Unknown result type (might be due to invalid IL or missing references)
		//IL_0348: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b96: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ba0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ba5: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_09bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0606: Unknown result type (might be due to invalid IL or missing references)
		//IL_0630: Unknown result type (might be due to invalid IL or missing references)
		//IL_0642: Unknown result type (might be due to invalid IL or missing references)
		//IL_064d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0966: Unknown result type (might be due to invalid IL or missing references)
		//IL_0948: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_081b: Unknown result type (might be due to invalid IL or missing references)
		//IL_083a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a37: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a71: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a75: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a81: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aba: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aca: Unknown result type (might be due to invalid IL or missing references)
		//IL_0acf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0adb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cce: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d24: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c69: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c70: Unknown result type (might be due to invalid IL or missing references)
		//IL_132c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d92: Unknown result type (might be due to invalid IL or missing references)
		//IL_0db3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0db9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0de3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e09: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e13: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e44: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e67: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e84: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e89: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e97: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ea7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ebd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ec2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ec7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ee3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eed: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ef2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f33: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f79: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f83: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f88: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0faa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ffc: Unknown result type (might be due to invalid IL or missing references)
		//IL_101b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1021: Unknown result type (might be due to invalid IL or missing references)
		//IL_1038: Unknown result type (might be due to invalid IL or missing references)
		//IL_103d: Unknown result type (might be due to invalid IL or missing references)
		//IL_104b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1051: Unknown result type (might be due to invalid IL or missing references)
		//IL_105e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1064: Unknown result type (might be due to invalid IL or missing references)
		//IL_1066: Unknown result type (might be due to invalid IL or missing references)
		//IL_1072: Unknown result type (might be due to invalid IL or missing references)
		//IL_107c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1081: Unknown result type (might be due to invalid IL or missing references)
		//IL_1086: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1102: Unknown result type (might be due to invalid IL or missing references)
		//IL_1108: Unknown result type (might be due to invalid IL or missing references)
		//IL_111f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1124: Unknown result type (might be due to invalid IL or missing references)
		//IL_1132: Unknown result type (might be due to invalid IL or missing references)
		//IL_1138: Unknown result type (might be due to invalid IL or missing references)
		//IL_1145: Unknown result type (might be due to invalid IL or missing references)
		//IL_114b: Unknown result type (might be due to invalid IL or missing references)
		//IL_114d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1159: Unknown result type (might be due to invalid IL or missing references)
		//IL_1163: Unknown result type (might be due to invalid IL or missing references)
		//IL_1168: Unknown result type (might be due to invalid IL or missing references)
		//IL_116d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1189: Unknown result type (might be due to invalid IL or missing references)
		//IL_1193: Unknown result type (might be due to invalid IL or missing references)
		//IL_1198: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1202: Unknown result type (might be due to invalid IL or missing references)
		//IL_1207: Unknown result type (might be due to invalid IL or missing references)
		//IL_120e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1214: Unknown result type (might be due to invalid IL or missing references)
		//IL_1239: Unknown result type (might be due to invalid IL or missing references)
		//IL_123e: Unknown result type (might be due to invalid IL or missing references)
		//IL_124c: Unknown result type (might be due to invalid IL or missing references)
		//IL_125c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1268: Unknown result type (might be due to invalid IL or missing references)
		//IL_1272: Unknown result type (might be due to invalid IL or missing references)
		//IL_1277: Unknown result type (might be due to invalid IL or missing references)
		//IL_127c: Unknown result type (might be due to invalid IL or missing references)
		//IL_128a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1294: Unknown result type (might be due to invalid IL or missing references)
		//IL_1299: Unknown result type (might be due to invalid IL or missing references)
		rotation = velocity.ToRotation();
		float num = 0.4f;
		float num12 = 10f;
		float num22 = 200f;
		float num23 = 750f;
		float num24 = 30f;
		float num25 = 30f;
		float num26 = 0.95f;
		int num27 = 50;
		float num28 = 14f;
		float num2 = 30f;
		float num3 = 100f;
		float num4 = 20f;
		float num5 = 0f;
		float num6 = 7f;
		bool flag = true;
		bool flag2 = true;
		int num7 = 120;
		bool flag3 = false;
		bool flag4 = false;
		float num8 = 0.05f;
		float num9 = 0f;
		bool flag5 = false;
		switch (type)
		{
		case 558:
		case 559:
		case 560:
			flag4 = true;
			num = 0.7f;
			if (type == 559)
			{
				num = 0.5f;
			}
			if (type == 560)
			{
				num = 0.2f;
			}
			num12 = 3f;
			num22 = 400f;
			num23 = 500f;
			num24 = 90f;
			num25 = 20f;
			num26 = 0.95f;
			num27 = 0;
			num28 = 8f;
			num2 = 30f;
			num3 = 150f;
			num4 = 60f;
			num5 = 0.05f;
			num6 = 6f;
			flag2 = false;
			flag5 = true;
			break;
		case 574:
		case 575:
			flag4 = true;
			num = 0.6f;
			if (type == 575)
			{
				num = 0.4f;
			}
			num12 = 4f;
			num22 = 400f;
			num23 = 500f;
			num24 = 90f;
			num25 = 30f;
			num26 = 0.95f;
			num27 = 3;
			num28 = 8f;
			num2 = 30f;
			num3 = 150f;
			num4 = 10f;
			num5 = 0.05f;
			num6 = 0f;
			num9 = -0.1f;
			flag3 = true;
			flag5 = true;
			break;
		}
		NPCUtils.TargetClosestOldOnesInvasion(this);
		NPCAimedTarget targetData = GetTargetData();
		Vector2 center3;
		if (flag5)
		{
			if (localAI[0] == 0f)
			{
				alpha = 255;
			}
			if (localAI[0] == 30f)
			{
				SoundEngine.PlayTrackedSound(in SoundID.DD2_EtherianPortalSpawnEnemy, base.Center);
			}
			if (localAI[0] < 60f)
			{
				localAI[0] += 1f;
				alpha -= 5;
				if (alpha < 0)
				{
					alpha = 0;
				}
				int num10 = (int)localAI[0] / 10;
				center3 = base.Size;
				float num11 = ((Vector2)(ref center3)).Length() / 2f;
				num11 /= 20f;
				int maxValue = 5;
				if (type == 576 || type == 577)
				{
					maxValue = 1;
				}
				for (int i = 0; i < num10; i++)
				{
					if (Main.rand.Next(maxValue) == 0)
					{
						Dust dust = Dust.NewDustDirect(position, width, height, 27, velocity.X * 1f, 0f, 100);
						dust.scale = 0.55f;
						dust.fadeIn = 0.7f;
						dust.velocity *= 0.1f * num11;
						dust.velocity += velocity;
					}
				}
			}
		}
		if (flag4)
		{
			for (int j = 0; j < 200; j++)
			{
				if (j != whoAmI && Main.npc[j].active && Main.npc[j].type == type && Math.Abs(position.X - Main.npc[j].position.X) + Math.Abs(position.Y - Main.npc[j].position.Y) < (float)width)
				{
					if (position.X < Main.npc[j].position.X)
					{
						velocity.X -= num8;
					}
					else
					{
						velocity.X += num8;
					}
					if (position.Y < Main.npc[j].position.Y)
					{
						velocity.Y -= num8;
					}
					else
					{
						velocity.Y += num8;
					}
				}
			}
		}
		if (Math.Sign(velocity.X) != 0)
		{
			spriteDirection = -Math.Sign(velocity.X);
		}
		if (rotation < -(float)Math.PI / 2f)
		{
			rotation += (float)Math.PI;
		}
		if (rotation > (float)Math.PI / 2f)
		{
			rotation -= (float)Math.PI;
		}
		num5 *= num4;
		if (Main.expertMode)
		{
			num *= Main.GameModeInfo.KnockbackToEnemiesMultiplier;
		}
		if (ai[0] == 0f)
		{
			knockBackResist = num;
			float num13 = num12;
			Vector2 center = base.Center;
			Vector2 vector = targetData.Center - center;
			Vector2 vector2 = vector - Vector2.UnitY * num22;
			float num29 = ((Vector2)(ref vector)).Length();
			vector = Vector2.Normalize(vector) * num13;
			vector2 = Vector2.Normalize(vector2) * num13;
			bool flag6 = Collision.CanHit(base.Center, 1, 1, targetData.Center, 1, 1);
			if (ai[3] >= (float)num7)
			{
				flag6 = true;
			}
			float num14 = 8f;
			flag6 = flag6 && vector.ToRotation() > (float)Math.PI / num14 && vector.ToRotation() < (float)Math.PI - (float)Math.PI / num14;
			if (num29 > num23 || !flag6)
			{
				velocity.X = (velocity.X * (num24 - 1f) + vector2.X) / num24;
				velocity.Y = (velocity.Y * (num24 - 1f) + vector2.Y) / num24;
				if (targetData.Center.Y < base.Center.Y)
				{
					velocity.Y -= 0.2f;
					if (velocity.Y < -10f)
					{
						velocity.Y = -10f;
					}
				}
				if (!flag6)
				{
					ai[3] += 1f;
					if (ai[3] == (float)num7)
					{
						netUpdate = true;
					}
				}
				else
				{
					ai[3] = 0f;
				}
			}
			else
			{
				ai[0] = 1f;
				ai[2] = vector.X;
				ai[3] = vector.Y;
				netUpdate = true;
			}
		}
		else if (ai[0] == 1f)
		{
			knockBackResist = 0f;
			velocity *= num26;
			velocity.Y += num9;
			ai[1] += 1f;
			if (ai[1] == num25)
			{
				if (type == 558 || type == 559 || type == 560)
				{
					localAI[1] = SoundEngine.PlayTrackedSound(in SoundID.DD2_WyvernDiveDown, base.Center).ToFloat();
					if (Main.rand.Next(5) == 0)
					{
						localAI[2] = SoundEngine.PlayTrackedSound(in SoundID.DD2_WyvernScream, base.Center).ToFloat();
					}
				}
				else if (type == 574 || type == 575)
				{
					localAI[1] = SoundEngine.PlayTrackedSound(in SoundID.DD2_KoboldFlyerChargeScream, base.Center).ToFloat();
					SoundEngine.PlayTrackedSound(in SoundID.DD2_KoboldIgnite, base.Center);
				}
			}
			if (ai[1] >= num25)
			{
				ai[0] = 2f;
				ai[1] = 0f;
				netUpdate = true;
				Vector2 vector3 = new Vector2(ai[2], ai[3]) + new Vector2((float)Main.rand.Next(-num27, num27 + 1), (float)Main.rand.Next(-num27, num27 + 1)) * 0.04f;
				((Vector2)(ref vector3)).Normalize();
				vector3 = (velocity = vector3 * num28);
			}
		}
		else if (ai[0] == 2f)
		{
			if (ai[1] >= 20f && (type == 574 || type == 575))
			{
				ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[2]));
				if (activeSound == null)
				{
					localAI[2] = SoundEngine.PlayTrackedSound(in SoundID.DD2_KoboldIgniteLoop, base.Center).ToFloat();
				}
				else
				{
					activeSound.Position = base.Center;
				}
			}
			knockBackResist = 0f;
			float num15 = num2;
			ai[1] += 1f;
			bool flag7 = Vector2.Distance(base.Center, targetData.Center) > num3 && base.Center.Y > targetData.Center.Y;
			if (flag3)
			{
				flag7 = false;
			}
			if ((ai[1] >= num15 && flag7) || ((Vector2)(ref velocity)).Length() < num6)
			{
				ai[0] = 0f;
				ai[1] = 0f;
				ai[2] = 0f;
				ai[3] = 0f;
				velocity /= 2f;
				netUpdate = true;
				if (flag)
				{
					ai[1] = 45f;
					ai[0] = 4f;
				}
			}
			else
			{
				Vector2 center2 = base.Center;
				Vector2 vector4 = targetData.Center - center2;
				((Vector2)(ref vector4)).Normalize();
				if (vector4.HasNaNs())
				{
					((Vector2)(ref vector4))._002Ector((float)direction, 0f);
				}
				velocity = (velocity * (num4 - 1f) + vector4 * (((Vector2)(ref velocity)).Length() + num5)) / num4;
			}
			if (flag2 && Collision.SolidCollision(position, width, height))
			{
				ai[0] = 3f;
				ai[1] = 0f;
				ai[2] = 0f;
				ai[3] = 0f;
				netUpdate = true;
			}
		}
		else if (ai[0] == 4f)
		{
			ai[1] -= 3f;
			if (ai[1] <= 0f)
			{
				ai[0] = 0f;
				ai[1] = 0f;
				netUpdate = true;
			}
			velocity *= 0.95f;
		}
		ActiveSound activeSound2 = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
		if (activeSound2 != null)
		{
			activeSound2.Position = base.Center;
		}
		else
		{
			localAI[1] = SlotId.Invalid.ToFloat();
		}
		if (type == 558 || type == 559 || type == 560)
		{
			activeSound2 = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[2]));
			if (activeSound2 != null)
			{
				activeSound2.Position = base.Center;
			}
			else
			{
				localAI[2] = SlotId.Invalid.ToFloat();
			}
		}
		if (flag2 && ai[0] != 3f && Vector2.Distance(base.Center, targetData.Center) < 64f)
		{
			ai[0] = 3f;
			ai[1] = 0f;
			ai[2] = 0f;
			ai[3] = 0f;
			netUpdate = true;
		}
		if (ai[0] != 3f)
		{
			return;
		}
		position = base.Center;
		width = (height = 192);
		position.X -= width / 2;
		position.Y -= height / 2;
		velocity = Vector2.Zero;
		damage = GetAttackDamage_ScaledByStrength(80f);
		alpha = 255;
		if (ai[1] == 0f && (type == 574 || type == 575))
		{
			for (int k = 0; k < 4; k++)
			{
				int num16 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num16].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
			}
			for (int l = 0; l < 20; l++)
			{
				int num17 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 200, default(Color), 3.7f);
				Main.dust[num17].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				Main.dust[num17].noGravity = true;
				Dust obj = Main.dust[num17];
				obj.velocity *= 3f;
				num17 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num17].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 4f;
				Dust obj2 = Main.dust[num17];
				obj2.velocity *= 2f;
				Main.dust[num17].noGravity = true;
				Main.dust[num17].fadeIn = 2.5f;
			}
			for (int m = 0; m < 6; m++)
			{
				int num18 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.7f);
				Dust obj3 = Main.dust[num18];
				Vector2 center4 = base.Center;
				Vector2 spinningpoint = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
				double radians = velocity.ToRotation();
				center3 = default(Vector2);
				obj3.position = center4 + spinningpoint.RotatedBy(radians, center3) * (float)width / 2f;
				Main.dust[num18].noGravity = true;
				Dust obj4 = Main.dust[num18];
				obj4.velocity *= 3f;
			}
			for (int n = 0; n < 12; n++)
			{
				int num19 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
				Dust obj5 = Main.dust[num19];
				Vector2 center5 = base.Center;
				Vector2 spinningpoint2 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
				double radians2 = velocity.ToRotation();
				center3 = default(Vector2);
				obj5.position = center5 + spinningpoint2.RotatedBy(radians2, center3) * (float)width / 2f;
				Main.dust[num19].noGravity = true;
				Dust obj6 = Main.dust[num19];
				obj6.velocity *= 3f;
			}
			for (int num20 = 0; num20 < 5; num20++)
			{
				Vector2 val = position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f;
				center3 = default(Vector2);
				int num21 = Gore.NewGore(val, center3, Main.rand.Next(61, 64));
				Main.gore[num21].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				Gore obj7 = Main.gore[num21];
				obj7.velocity *= 0.3f;
				Main.gore[num21].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num21].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
		}
		ai[1] += 1f;
		if (ai[1] >= 3f)
		{
			SoundEngine.PlaySound(in SoundID.Item14, position);
			life = 0;
			HitEffect();
			active = false;
		}
	}

	private void AI_109_DarkMage()
	{
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_09df: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a06: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a12: Unknown result type (might be due to invalid IL or missing references)
		//IL_097b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0986: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0501: Unknown result type (might be due to invalid IL or missing references)
		//IL_0506: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0666: Unknown result type (might be due to invalid IL or missing references)
		//IL_027a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0280: Unknown result type (might be due to invalid IL or missing references)
		//IL_0294: Unknown result type (might be due to invalid IL or missing references)
		//IL_0299: Unknown result type (might be due to invalid IL or missing references)
		//IL_029e: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_0200: Unknown result type (might be due to invalid IL or missing references)
		//IL_0214: Unknown result type (might be due to invalid IL or missing references)
		//IL_0219: Unknown result type (might be due to invalid IL or missing references)
		//IL_021e: Unknown result type (might be due to invalid IL or missing references)
		//IL_024a: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_06cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_034a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0535: Unknown result type (might be due to invalid IL or missing references)
		//IL_053a: Unknown result type (might be due to invalid IL or missing references)
		//IL_053c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0584: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_040a: Unknown result type (might be due to invalid IL or missing references)
		//IL_040f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0724: Unknown result type (might be due to invalid IL or missing references)
		//IL_0751: Unknown result type (might be due to invalid IL or missing references)
		//IL_0757: Unknown result type (might be due to invalid IL or missing references)
		//IL_077b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0788: Unknown result type (might be due to invalid IL or missing references)
		//IL_078d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0793: Unknown result type (might be due to invalid IL or missing references)
		//IL_0799: Unknown result type (might be due to invalid IL or missing references)
		//IL_079e: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a3: Unknown result type (might be due to invalid IL or missing references)
		bool flag = false;
		bool flag4 = false;
		bool flag5 = true;
		bool flag6 = false;
		int num = 4;
		int num11 = 3;
		int num14 = 0;
		float num15 = 0.2f;
		float num16 = 2f;
		float num17 = -0.2f;
		float num18 = -4f;
		bool flag7 = true;
		float num19 = 2f;
		float num20 = 0.1f;
		float num2 = 1f;
		float num3 = 0.04f;
		bool flag8 = false;
		float num4 = 0.96f;
		bool flag9 = true;
		NPCAimedTarget targetData = GetTargetData();
		if (type == 564 || type == 565)
		{
			flag7 = false;
			rotation = velocity.X * 0.04f;
			spriteDirection = ((direction > 0) ? 1 : (-1));
			num14 = 2;
			num17 = -0.05f;
			num18 = -0.4f;
			num15 = 0.05f;
			num16 = 0.2f;
			num2 = 0.5f;
			num3 = 0.02f;
			num19 = 0.5f;
			num20 = 0.1f;
			localAI[2] = 0f;
			DelegateMethods.v3_1 = new Vector3(0.3f, 0.05f, 0.45f) * 1.5f;
			Utils.PlotTileLine(base.Top, base.Bottom, width, DelegateMethods.CastLightOpen);
			if (ai[0] < 0f)
			{
				ai[0] = MathHelper.Min(ai[0] + 1f, 0f);
			}
			if (ai[0] > 0f)
			{
				flag9 = false;
				flag8 = true;
				num4 = 0.9f;
				ai[0] -= 1f;
				if (ai[0] == 80f && ai[1] == 2f)
				{
					SoundEngine.PlayTrackedSound(in SoundID.DD2_DarkMageSummonSkeleton, base.Center);
				}
				if (ai[1] == 2f && ai[0] == 64f && Main.netMode != 1)
				{
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center + new Vector2((float)(direction * 24), -40f), Vector2.Zero, 673, 0, 0f, Main.myPlayer);
					DD2Event.RaiseGoblins(this, base.Center);
				}
				if (ai[1] == 0f && ai[0] == 32f)
				{
					Vector2 vector = (targetData.Center - (base.Center + new Vector2((float)(direction * 10), -16f))).SafeNormalize(Vector2.UnitY) * 14f;
					direction = ((vector.X > 0f) ? 1 : (-1));
					if (Main.netMode != 1)
					{
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center + new Vector2((float)(direction * 10), -16f), vector, 675, 40, 0f, Main.myPlayer);
					}
				}
				if (ai[0] == 126f && ai[1] == 1f)
				{
					SoundEngine.PlayTrackedSound(in SoundID.DD2_DarkMageCastHeal, base.Center);
				}
				if (ai[1] == 1f && Main.netMode != 1 && (ai[0] == 40f || ai[0] == 48f || ai[0] == 56f) && WorldUtils.Find(Utils.ToTileCoordinates(new Vector2(base.Center.X + (float)(direction * 240), base.Center.Y)), Searches.Chain(new Searches.Down(50), new Terraria.WorldBuilding.Conditions.IsSolid()), out var result))
				{
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), result.ToWorldCoordinates(8f, 0f), Vector2.Zero, 674, 0, 0f, Main.myPlayer);
				}
				if (ai[0] <= 0f)
				{
					float num21 = ai[1];
					ai[1] += 1f;
					if (ai[1] >= 3f)
					{
						ai[1] = 0f;
					}
					ai[0] = -120f;
					if (num21 == 0f)
					{
						ai[0] = -20f;
					}
					netUpdate = true;
				}
			}
			if (ai[0] == 0f && localAI[3] >= 60f)
			{
				bool flag10 = false;
				Vector2 minimum = base.Center + new Vector2(-600f, -200f);
				Vector2 maximum = base.Center + new Vector2(600f, 200f);
				int num5 = 0;
				for (int i = 0; i < 200; i++)
				{
					NPC nPC = Main.npc[i];
					if (nPC.active && nPC.lifeMax != nPC.life && nPC.Center.Between(minimum, maximum) && ++num5 >= 2)
					{
						flag10 = true;
						break;
					}
				}
				if (!flag10)
				{
					ai[1] = 2f;
				}
				if (ai[1] == 2f && !DD2Event.CanRaiseGoblinsHere(base.Center))
				{
					ai[1] = 0f;
				}
				bool flag11 = true;
				if (ai[1] == 0f && (Distance(targetData.Center) >= 1000f || !Collision.CanHitLine(base.Center, 0, 0, targetData.Center, 0, 0)))
				{
					flag11 = false;
				}
				if (flag11)
				{
					switch ((int)ai[1])
					{
					case 0:
						ai[0] = 97f;
						break;
					case 1:
						ai[0] = 127f;
						break;
					case 2:
						ai[0] = 183f;
						break;
					}
					netUpdate = true;
					flag8 = true;
				}
			}
			if (localAI[3] == 0f)
			{
				alpha = 255;
			}
			if (localAI[3] == 30f)
			{
				SoundEngine.PlayTrackedSound(in SoundID.DD2_EtherianPortalSpawnEnemy, base.Center);
			}
			if (localAI[3] < 60f)
			{
				localAI[3] += 1f;
				alpha -= 5;
				if (alpha < 0)
				{
					alpha = 0;
				}
				int num6 = (int)localAI[3] / 10;
				Vector2 size = base.Size;
				float num7 = ((Vector2)(ref size)).Length() / 2f;
				num7 /= 20f;
				int maxValue = 5;
				if (type == 576 || type == 577)
				{
					maxValue = 1;
				}
				for (int j = 0; j < num6; j++)
				{
					if (Main.rand.Next(maxValue) == 0)
					{
						Dust dust = Dust.NewDustDirect(position, width, height, 27, velocity.X * 1f, 0f, 100);
						dust.scale = 0.55f;
						dust.fadeIn = 0.7f;
						dust.velocity *= 0.1f * num7;
						dust.velocity += velocity;
					}
				}
			}
		}
		if (justHit)
		{
			localAI[2] = 0f;
		}
		if (!flag4)
		{
			if (localAI[2] >= 0f)
			{
				float num8 = 16f;
				bool flag2 = false;
				bool flag3 = false;
				if (position.X > localAI[0] - num8 && position.X < localAI[0] + num8)
				{
					flag2 = true;
				}
				else if ((velocity.X < 0f && direction > 0) || (velocity.X > 0f && direction < 0))
				{
					flag2 = true;
					num8 += 24f;
				}
				if (position.Y > localAI[1] - num8 && position.Y < localAI[1] + num8)
				{
					flag3 = true;
				}
				if (flag2 && flag3)
				{
					localAI[2] += 1f;
					if (localAI[2] >= 30f && num8 == 16f)
					{
						flag = true;
					}
					if (localAI[2] >= 60f)
					{
						localAI[2] = -180f;
						direction *= -1;
						velocity.X *= -1f;
						collideX = false;
					}
				}
				else
				{
					localAI[0] = position.X;
					localAI[1] = position.Y;
					localAI[2] = 0f;
				}
				if (flag9)
				{
					NPCUtils.TargetClosestOldOnesInvasion(this);
				}
			}
			else
			{
				localAI[2] += 1f;
				direction = ((targetData.Center.X > base.Center.X) ? 1 : (-1));
			}
		}
		int num9 = (int)((position.X + (float)(width / 2)) / 16f) + direction * 2;
		int num10 = (int)((position.Y + (float)height) / 16f);
		int num12 = (int)base.Bottom.Y / 16;
		int num13 = (int)base.Bottom.X / 16;
		if (flag8)
		{
			velocity *= num4;
			return;
		}
		for (int k = num10; k < num10 + num; k++)
		{
			if (Main.tile[num9, k] == null)
			{
				Main.tile[num9, k] = default(Tile);
			}
			if ((Main.tile[num9, k].nactive() && Main.tileSolid[Main.tile[num9, k].type]) || Main.tile[num9, k].liquid > 0)
			{
				if (k <= num10 + 1)
				{
					flag6 = true;
				}
				flag5 = false;
				break;
			}
		}
		for (int l = num12; l < num12 + num14; l++)
		{
			if (Main.tile[num13, l] == null)
			{
				Main.tile[num13, l] = default(Tile);
			}
			if ((Main.tile[num13, l].nactive() && Main.tileSolid[Main.tile[num13, l].type]) || Main.tile[num13, l].liquid > 0)
			{
				flag6 = true;
				flag5 = false;
				break;
			}
		}
		if (flag7)
		{
			for (int m = num10 - num11; m < num10; m++)
			{
				if (Main.tile[num9, m] == null)
				{
					Main.tile[num9, m] = default(Tile);
				}
				if ((Main.tile[num9, m].nactive() && Main.tileSolid[Main.tile[num9, m].type]) || Main.tile[num9, m].liquid > 0)
				{
					flag6 = false;
					flag = true;
					break;
				}
			}
		}
		if (flag)
		{
			flag6 = false;
			flag5 = true;
		}
		if (flag5)
		{
			velocity.Y += num15;
			if (velocity.Y > num16)
			{
				velocity.Y = num16;
			}
		}
		else
		{
			if ((directionY < 0 && velocity.Y > 0f) || flag6)
			{
				velocity.Y += num17;
			}
			if (velocity.Y < num18)
			{
				velocity.Y = num18;
			}
		}
		if (collideX)
		{
			velocity.X = oldVelocity.X * -0.4f;
			if (direction == -1 && velocity.X > 0f && velocity.X < 1f)
			{
				velocity.X = 1f;
			}
			if (direction == 1 && velocity.X < 0f && velocity.X > -1f)
			{
				velocity.X = -1f;
			}
		}
		if (collideY)
		{
			velocity.Y = oldVelocity.Y * -0.25f;
			if (velocity.Y > 0f && velocity.Y < 1f)
			{
				velocity.Y = 1f;
			}
			if (velocity.Y < 0f && velocity.Y > -1f)
			{
				velocity.Y = -1f;
			}
		}
		if (direction == -1 && velocity.X > 0f - num19)
		{
			velocity.X -= num20;
			if (velocity.X > num19)
			{
				velocity.X -= num20;
			}
			else if (velocity.X > 0f)
			{
				velocity.X += num20 / 2f;
			}
			if (velocity.X < 0f - num19)
			{
				velocity.X = 0f - num19;
			}
		}
		else if (direction == 1 && velocity.X < num19)
		{
			velocity.X += num20;
			if (velocity.X < 0f - num19)
			{
				velocity.X += num20;
			}
			else if (velocity.X < 0f)
			{
				velocity.X -= num20 / 2f;
			}
			if (velocity.X > num19)
			{
				velocity.X = num19;
			}
		}
		if (directionY == -1 && velocity.Y > 0f - num2)
		{
			velocity.Y -= num3;
			if (velocity.Y > num2)
			{
				velocity.Y -= num3 * 1.25f;
			}
			else if (velocity.Y > 0f)
			{
				velocity.Y += num3 * 0.75f;
			}
			if (velocity.Y < 0f - num2)
			{
				velocity.Y = 0f - num19;
			}
		}
		else if (directionY == 1 && velocity.Y < num2)
		{
			velocity.Y += num3;
			if (velocity.Y < 0f - num2)
			{
				velocity.Y += num3 * 1.25f;
			}
			else if (velocity.Y < 0f)
			{
				velocity.Y -= num3 * 0.75f;
			}
			if (velocity.Y > num2)
			{
				velocity.Y = num2;
			}
		}
	}

	private void AI_111_DD2LightningBug()
	{
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0114: Unknown result type (might be due to invalid IL or missing references)
		//IL_059f: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0205: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_020d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0217: Unknown result type (might be due to invalid IL or missing references)
		//IL_0221: Unknown result type (might be due to invalid IL or missing references)
		//IL_0227: Unknown result type (might be due to invalid IL or missing references)
		//IL_0235: Unknown result type (might be due to invalid IL or missing references)
		//IL_023f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0244: Unknown result type (might be due to invalid IL or missing references)
		//IL_0257: Unknown result type (might be due to invalid IL or missing references)
		//IL_0261: Unknown result type (might be due to invalid IL or missing references)
		//IL_026b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0271: Unknown result type (might be due to invalid IL or missing references)
		//IL_027f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0289: Unknown result type (might be due to invalid IL or missing references)
		//IL_028e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0133: Unknown result type (might be due to invalid IL or missing references)
		//IL_0155: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_0608: Unknown result type (might be due to invalid IL or missing references)
		//IL_0614: Unknown result type (might be due to invalid IL or missing references)
		//IL_0619: Unknown result type (might be due to invalid IL or missing references)
		//IL_061b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0621: Unknown result type (might be due to invalid IL or missing references)
		//IL_0626: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01da: Unknown result type (might be due to invalid IL or missing references)
		//IL_01df: Unknown result type (might be due to invalid IL or missing references)
		//IL_0649: Unknown result type (might be due to invalid IL or missing references)
		//IL_0655: Unknown result type (might be due to invalid IL or missing references)
		//IL_065a: Unknown result type (might be due to invalid IL or missing references)
		//IL_065c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0662: Unknown result type (might be due to invalid IL or missing references)
		//IL_0667: Unknown result type (might be due to invalid IL or missing references)
		//IL_0351: Unknown result type (might be due to invalid IL or missing references)
		//IL_0356: Unknown result type (might be due to invalid IL or missing references)
		//IL_0671: Unknown result type (might be due to invalid IL or missing references)
		//IL_082b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0836: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_084a: Unknown result type (might be due to invalid IL or missing references)
		//IL_084f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0854: Unknown result type (might be due to invalid IL or missing references)
		//IL_0856: Unknown result type (might be due to invalid IL or missing references)
		//IL_085d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0871: Unknown result type (might be due to invalid IL or missing references)
		//IL_0878: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03de: Unknown result type (might be due to invalid IL or missing references)
		//IL_0402: Unknown result type (might be due to invalid IL or missing references)
		//IL_040f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0414: Unknown result type (might be due to invalid IL or missing references)
		//IL_041a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0420: Unknown result type (might be due to invalid IL or missing references)
		//IL_0425: Unknown result type (might be due to invalid IL or missing references)
		//IL_042a: Unknown result type (might be due to invalid IL or missing references)
		//IL_070a: Unknown result type (might be due to invalid IL or missing references)
		//IL_072b: Unknown result type (might be due to invalid IL or missing references)
		//IL_073c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0741: Unknown result type (might be due to invalid IL or missing references)
		//IL_0746: Unknown result type (might be due to invalid IL or missing references)
		//IL_0794: Unknown result type (might be due to invalid IL or missing references)
		//IL_0796: Unknown result type (might be due to invalid IL or missing references)
		//IL_079b: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_07fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_07fd: Unknown result type (might be due to invalid IL or missing references)
		bool flag = true;
		float num = 7f;
		float num8 = 60f;
		float num9 = 60f;
		float num10 = 1f;
		float num11 = 0.96f;
		int num12 = 30;
		int num13 = 20;
		float num14 = 200f;
		int num15 = 40;
		int num2 = 438;
		float num3 = 10f;
		float num4 = 100f;
		bool flag2 = false;
		float num5 = 0.05f;
		Vector2 center = base.Center;
		NPCUtils.TargetClosestOldOnesInvasion(this);
		NPCAimedTarget targetData = GetTargetData();
		bool flag3 = false;
		if (type == 578)
		{
			num = 4f;
			num8 = 20f;
			num9 = 20f;
			flag3 = true;
			flag2 = true;
			num5 = 0.1f;
			num2 = 682;
			num15 = 50;
			num3 = 10f;
			num4 = 50f;
			num12 = 5;
			num13 = 30;
			center += new Vector2((float)(-spriteDirection * 20), 10f);
			position += netOffset;
			if (Main.rand.Next(15) == 0)
			{
				Vector2 vector = position;
				if (direction == -1)
				{
					vector.X += width / 2;
				}
				Dust dust = Dust.NewDustDirect(vector, width / 2, height, 272);
				dust.scale = 0.65f;
				dust.velocity.Y -= 0.8f;
				if (dust.velocity.X * (float)direction > 0f)
				{
					dust.velocity.X *= -1f;
				}
				if (dust.velocity.Y > 0f)
				{
					dust.velocity *= -0.5f;
				}
			}
			if (Main.rand.Next(80) == 0)
			{
				Vector2 vector2 = (Main.rand.NextFloat() * ((float)Math.PI * 2f)).ToRotationVector2();
				Dust dust2 = Dust.NewDustPerfect(base.Center, 272, vector2);
				dust2.velocity *= 1.1f;
				dust2.noGravity = true;
				dust2.customData = this;
				Dust dust3 = Dust.NewDustPerfect(base.Center, 272, vector2);
				dust3.velocity *= 1.5f;
				dust3.noGravity = true;
				dust3.customData = this;
			}
			position -= netOffset;
		}
		if (flag3)
		{
			if (localAI[1] == 0f)
			{
				alpha = 255;
			}
			if (localAI[1] == 30f)
			{
				SoundEngine.PlayTrackedSound(in SoundID.DD2_EtherianPortalSpawnEnemy, base.Center);
			}
			if (localAI[1] < 60f)
			{
				localAI[1] += 1f;
				alpha -= 5;
				if (alpha < 0)
				{
					alpha = 0;
				}
				int num6 = (int)localAI[1] / 10;
				Vector2 size = base.Size;
				float num7 = ((Vector2)(ref size)).Length() / 2f;
				num7 /= 20f;
				int maxValue = 5;
				if (type == 576 || type == 577)
				{
					maxValue = 1;
				}
				for (int i = 0; i < num6; i++)
				{
					if (Main.rand.Next(maxValue) == 0)
					{
						Dust dust4 = Dust.NewDustDirect(position, width, height, 27, velocity.X * 1f, 0f, 100);
						dust4.scale = 0.55f;
						dust4.fadeIn = 0.7f;
						dust4.velocity *= 0.1f * num7;
						dust4.velocity += velocity;
					}
				}
			}
		}
		if (flag2)
		{
			for (int j = 0; j < 200; j++)
			{
				if (j != whoAmI && Main.npc[j].active && Main.npc[j].type == type && Math.Abs(position.X - Main.npc[j].position.X) + Math.Abs(position.Y - Main.npc[j].position.Y) < (float)width)
				{
					if (position.X < Main.npc[j].position.X)
					{
						velocity.X -= num5;
					}
					else
					{
						velocity.X += num5;
					}
					if (position.Y < Main.npc[j].position.Y)
					{
						velocity.Y -= num5;
					}
					else
					{
						velocity.Y += num5;
					}
				}
			}
		}
		rotation = Math.Abs(velocity.X) * (float)direction * 0.1f;
		spriteDirection = direction;
		Vector2 vector3 = center;
		Vector2 vector4 = targetData.Center - vector3;
		Vector2 vector5 = vector4.SafeNormalize(Vector2.UnitY) * num;
		bool flag4 = Collision.CanHit(base.Center, 1, 1, targetData.Center, 1, 1);
		if (localAI[0] < 0f)
		{
			localAI[0] += 1f;
		}
		if (!flag)
		{
			velocity = (velocity * (num8 - 1f) + vector5) / num8;
			EncourageDespawn(10);
		}
		else if (((Vector2)(ref vector4)).Length() > num14 || !flag4)
		{
			velocity = (velocity * (num9 - 1f) + vector5) / num9;
		}
		else if (vector4.Y < num4)
		{
			velocity.Y -= 0.03f;
		}
		else if (localAI[0] >= 0f)
		{
			velocity *= num11;
			if (((Vector2)(ref velocity)).Length() < num10 && Main.netMode != 1)
			{
				localAI[0] += 1f;
				if (localAI[0] >= (float)num12)
				{
					localAI[0] = -num13;
					direction = (spriteDirection = ((vector5.X > 0f) ? 1 : (-1)));
					vector5 = vector4 + Utils.RandomVector2(Main.rand, -25f, 25f);
					vector5.X *= 1f + (float)Main.rand.Next(-20, 21) * 0.005f;
					vector5.Y *= 1f + (float)Main.rand.Next(-20, 21) * 0.005f;
					vector5 = vector5.SafeNormalize(Vector2.UnitY) * num3;
					vector5.X *= 1f + (float)Main.rand.Next(-20, 21) * (1f / 160f);
					vector5.Y *= 1f + (float)Main.rand.Next(-20, 21) * (1f / 160f);
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector3, vector5, num2, num15, 0f, Main.myPlayer);
				}
			}
		}
		if (!flag)
		{
			return;
		}
		bool flag5 = false;
		if (targetData.Center.Y < base.Center.Y)
		{
			flag5 = true;
		}
		if (!flag5)
		{
			Point point = base.Center.ToTileCoordinates();
			if (WorldGen.InWorld(point.X, point.Y, 2))
			{
				Tile tile = Main.tile[point.X, point.Y];
				if (tile != null && tile.active() && WorldGen.SolidTile(tile))
				{
					flag5 = true;
				}
			}
		}
		if (flag5)
		{
			velocity.Y -= 0.2f;
			if (velocity.Y < -10f)
			{
				velocity.Y = -10f;
			}
		}
	}

	public void ReflectProjectiles(Rectangle myRect)
	{
		for (int i = 0; i < 1000; i++)
		{
			if (Main.projectile[i].active && Main.projectile[i].CanBeReflected() && CanReflectProjectile(Main.projectile[i]))
			{
				ReflectProjectile(Main.projectile[i]);
			}
		}
	}

	public bool CanReflectProjectile(Projectile proj)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		Rectangle hitbox = proj.Hitbox;
		bool result = ((Rectangle)(ref hitbox)).Intersects(base.Hitbox);
		if (type == 618)
		{
			BloodNautilus_GetMouthPositionAndRotation(out var _, out var _);
		}
		return result;
	}

	public void BloodNautilus_GetMouthPositionAndRotation(out Vector2 mouthPosition, out Vector2 mouthDirection)
	{
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		float num = rotation + 0.47123894f * (float)spriteDirection;
		if (spriteDirection == -1)
		{
			num += (float)Math.PI;
		}
		mouthDirection = num.ToRotationVector2();
		mouthPosition = base.Center + mouthDirection * 50f;
	}

	public void ReflectProjectile(Projectile proj)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_0116: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_013e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0143: Unknown result type (might be due to invalid IL or missing references)
		SoundEngine.PlaySound(in SoundID.Item150, proj.position);
		for (int i = 0; i < 3; i++)
		{
			int num = Dust.NewDust(proj.position, proj.width, proj.height, 31);
			Dust obj = Main.dust[num];
			obj.velocity *= 0.3f;
		}
		proj.reflected = true;
		proj.hostile = true;
		proj.friendly = false;
		Vector2 vector = Main.player[proj.owner].Center - proj.Center;
		((Vector2)(ref vector)).Normalize();
		vector *= ((Vector2)(ref proj.oldVelocity)).Length();
		proj.velocity = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
		((Vector2)(ref proj.velocity)).Normalize();
		proj.velocity *= ((Vector2)(ref vector)).Length();
		proj.velocity += vector * 20f;
		((Vector2)(ref proj.velocity)).Normalize();
		proj.velocity *= ((Vector2)(ref vector)).Length();
		proj.damage /= 2;
		proj.damage /= 2;
		proj.penetrate = 1;
	}

	public int GetShootingFrame(float circleY)
	{
		int num = -4;
		if (circleY < -0.3f)
		{
			num = 1;
		}
		if (circleY < -0.1f)
		{
			num = 0;
		}
		if (circleY > 0.1f)
		{
			num = 2;
		}
		if (circleY > 0.3f)
		{
			num = 3;
		}
		if (type == 228 || type == 229 || type == 209 || type == 22 || type == 368)
		{
			if (num == -4)
			{
				num = 1;
			}
			if (circleY >= -0.1f)
			{
				num++;
			}
		}
		return num;
	}

	public Tuple<Vector2, float> GetSwingStats(int swingMax, int swingCurrent, int aimDir, int itemWidth, int itemHeight)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0203: Unknown result type (might be due to invalid IL or missing references)
		//IL_0182: Unknown result type (might be due to invalid IL or missing references)
		Vector2 zero = Vector2.Zero;
		if ((double)swingCurrent < (double)swingMax * 0.333)
		{
			float num = 10f;
			if (itemWidth > 32)
			{
				num = 14f;
			}
			if (itemWidth >= 52)
			{
				num = 24f;
			}
			if (itemWidth >= 64)
			{
				num = 28f;
			}
			if (itemWidth >= 92)
			{
				num = 38f;
			}
			zero.X = base.Center.X + ((float)itemWidth * 0.5f - num) * (float)aimDir;
			zero.Y = position.Y + 24f;
		}
		else if ((double)swingCurrent < (double)swingMax * 0.666)
		{
			float num2 = 10f;
			if (itemWidth > 32)
			{
				num2 = 18f;
			}
			if (itemWidth >= 52)
			{
				num2 = 24f;
			}
			if (itemWidth >= 64)
			{
				num2 = 28f;
			}
			if (itemWidth >= 92)
			{
				num2 = 38f;
			}
			zero.X = base.Center.X + ((float)itemWidth * 0.5f - num2) * (float)aimDir;
			num2 = 10f;
			if (itemHeight > 32)
			{
				num2 = 8f;
			}
			if (itemHeight > 52)
			{
				num2 = 12f;
			}
			if (itemHeight > 64)
			{
				num2 = 14f;
			}
			zero.Y = position.Y + num2;
		}
		else
		{
			float num3 = 6f;
			if (itemWidth > 32)
			{
				num3 = 14f;
			}
			if (itemWidth >= 48)
			{
				num3 = 18f;
			}
			if (itemWidth >= 52)
			{
				num3 = 24f;
			}
			if (itemWidth >= 64)
			{
				num3 = 28f;
			}
			if (itemWidth >= 92)
			{
				num3 = 38f;
			}
			zero.X = base.Center.X - ((float)itemWidth * 0.5f - num3) * (float)aimDir;
			num3 = 10f;
			if (itemHeight > 32)
			{
				num3 = 10f;
			}
			if (itemHeight > 52)
			{
				num3 = 12f;
			}
			if (itemHeight > 64)
			{
				num3 = 14f;
			}
			zero.Y = position.Y + num3;
		}
		float item = ((float)swingCurrent / (float)swingMax - 0.5f) * (float)(-aimDir) * 3.5f - (float)aimDir * 0.3f;
		return Tuple.Create<Vector2, float>(zero, item);
	}

	public void TweakSwingStats(int swingMax, int swingCurrent, int aimDir, ref Rectangle itemRectangle)
	{
		if ((double)swingCurrent < (double)swingMax * 0.333)
		{
			if (aimDir == -1)
			{
				itemRectangle.X -= (int)((double)itemRectangle.Width * 1.4 - (double)itemRectangle.Width);
			}
			itemRectangle.Width = (int)((double)itemRectangle.Width * 1.4);
			itemRectangle.Y += (int)((double)itemRectangle.Height * 0.5);
			itemRectangle.Height = (int)((double)itemRectangle.Height * 1.1);
		}
		else if (!((double)swingCurrent < (double)swingMax * 0.666))
		{
			if (aimDir == 1)
			{
				itemRectangle.X -= (int)((double)itemRectangle.Width * 1.2);
			}
			itemRectangle.Width *= 2;
			itemRectangle.Y -= (int)((double)itemRectangle.Height * 1.4 - (double)itemRectangle.Height);
			itemRectangle.Height = (int)((double)itemRectangle.Height * 1.4);
		}
	}

	public bool UsesPartyHat()
	{
		if (type == 441 || type == 37 || type == 633)
		{
			return false;
		}
		if (type == 20 && townNpcVariationIndex == 1)
		{
			return false;
		}
		if (!NPCLoader.UsesPartyHat(this))
		{
			return false;
		}
		if (ForcePartyHatOn)
		{
			return true;
		}
		if (IsABestiaryIconDummy)
		{
			return false;
		}
		if (frame.Height > 0 && townNPC)
		{
			return BirthdayParty.PartyIsUp;
		}
		return false;
	}

	public PartyHatColor GetPartyHatColor()
	{
		if (!UsesPartyHat() || string.IsNullOrEmpty(GivenOrTypeName))
		{
			return PartyHatColor.None;
		}
		int num = GivenOrTypeName.Length + GivenOrTypeName[0];
		int num2 = Main.moonPhase;
		if (Main.dayTime)
		{
			num2--;
		}
		num += whoAmI;
		num += num2 * (whoAmI % 2 == 0).ToDirectionInt();
		if (num < 0)
		{
			num += 5;
		}
		num %= 5;
		if (num == 0)
		{
			num++;
		}
		return (PartyHatColor)num;
	}

	public void SetFrameSize()
	{
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		Main.instance.LoadNPC(type);
		if (setFrameSize)
		{
			frame = new Rectangle(0, 0, TextureAssets.Npc[type].Width(), TextureAssets.Npc[type].Height() / Main.npcFrameCount[type]);
			setFrameSize = false;
		}
	}

	public void FindFrame()
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		position += netOffset;
		int num = 1;
		if (!Main.dedServ)
		{
			if (!TextureAssets.Npc[type].IsLoaded)
			{
				return;
			}
			num = TextureAssets.Npc[type].Height() / Main.npcFrameCount[type];
		}
		NPCLoader.FindFrame(this, num);
	}

	public void VanillaFindFrame(int num, bool isLikeATownNPC, int type)
	{
		//IL_aab2: Unknown result type (might be due to invalid IL or missing references)
		//IL_aab7: Unknown result type (might be due to invalid IL or missing references)
		//IL_aabd: Unknown result type (might be due to invalid IL or missing references)
		//IL_aac8: Unknown result type (might be due to invalid IL or missing references)
		//IL_f4a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_f4de: Unknown result type (might be due to invalid IL or missing references)
		//IL_f4e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c82: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c88: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c92: Unknown result type (might be due to invalid IL or missing references)
		//IL_10dd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e15: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c17: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_aae3: Unknown result type (might be due to invalid IL or missing references)
		//IL_aaee: Unknown result type (might be due to invalid IL or missing references)
		//IL_cd99: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab97: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab09: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab19: Unknown result type (might be due to invalid IL or missing references)
		//IL_b04b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b05a: Unknown result type (might be due to invalid IL or missing references)
		//IL_b05f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b065: Unknown result type (might be due to invalid IL or missing references)
		//IL_b07b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b08a: Unknown result type (might be due to invalid IL or missing references)
		//IL_b08f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b095: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0db: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf79: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e86: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e53: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e83: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e89: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ea8: Unknown result type (might be due to invalid IL or missing references)
		//IL_10eb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10eb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c73: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cac: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ce3: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ced: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab67: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b120: Unknown result type (might be due to invalid IL or missing references)
		//IL_b143: Unknown result type (might be due to invalid IL or missing references)
		//IL_b149: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ca7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c20: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f30: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f44: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f46: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f50: Unknown result type (might be due to invalid IL or missing references)
		//IL_923d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9242: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ce1: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ce6: Unknown result type (might be due to invalid IL or missing references)
		//IL_11cf3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3055: Unknown result type (might be due to invalid IL or missing references)
		//IL_3057: Unknown result type (might be due to invalid IL or missing references)
		//IL_3059: Unknown result type (might be due to invalid IL or missing references)
		//IL_3062: Unknown result type (might be due to invalid IL or missing references)
		//IL_3068: Unknown result type (might be due to invalid IL or missing references)
		//IL_306d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3072: Unknown result type (might be due to invalid IL or missing references)
		//IL_3077: Unknown result type (might be due to invalid IL or missing references)
		//IL_929c: Unknown result type (might be due to invalid IL or missing references)
		//IL_92b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_92b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fe8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ff2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ff7: Unknown result type (might be due to invalid IL or missing references)
		//IL_47a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_47ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_47b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_47c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_47c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_47cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_47d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_47dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_47e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_47eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_47f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_480c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4812: Unknown result type (might be due to invalid IL or missing references)
		//IL_4829: Unknown result type (might be due to invalid IL or missing references)
		//IL_4833: Unknown result type (might be due to invalid IL or missing references)
		//IL_4838: Unknown result type (might be due to invalid IL or missing references)
		//IL_4872: Unknown result type (might be due to invalid IL or missing references)
		//IL_4877: Unknown result type (might be due to invalid IL or missing references)
		//IL_4884: Unknown result type (might be due to invalid IL or missing references)
		//IL_488e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4893: Unknown result type (might be due to invalid IL or missing references)
		//IL_4898: Unknown result type (might be due to invalid IL or missing references)
		//IL_48c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_48d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_48d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_30df: Unknown result type (might be due to invalid IL or missing references)
		//IL_30e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_30f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3108: Unknown result type (might be due to invalid IL or missing references)
		//IL_310e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ea6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d50: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d55: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4da7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dad: Unknown result type (might be due to invalid IL or missing references)
		//IL_4de7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4df1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4df6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e09: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e13: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e18: Unknown result type (might be due to invalid IL or missing references)
		int num124 = 0;
		if (aiAction == 0)
		{
			num124 = ((velocity.Y < 0f) ? 2 : ((velocity.Y > 0f) ? 3 : ((velocity.X != 0f) ? 1 : 0)));
		}
		else if (aiAction == 1)
		{
			num124 = 4;
		}
		switch (type)
		{
		case 668:
		{
			int y2 = frame.Y;
			int num51 = y2;
			frame.Width = 180;
			if (ai[0] == 1f)
			{
				spriteDirection = direction;
				int num52 = 12;
				int num53 = 17;
				if (y2 < num52 || y2 > num53)
				{
					y2 = num52;
					frameCounter = 0.0;
					if (!IsABestiaryIconDummy && y2 != num51)
					{
						SoundEngine.PlaySound(in SoundID.DeerclopsScream, base.Center);
					}
				}
				frameCounter += 1.0;
				int sequenceFrame = (int)frameCounter / 4;
				y2 = FindFrame_Deerclops_GetAttack1Frame(sequenceFrame);
			}
			else if (ai[0] == 2f)
			{
				spriteDirection = direction;
				int num54 = 12;
				int num55 = 18;
				if (y2 < num54 || y2 > num55)
				{
					y2 = num54;
					frameCounter = 0.0;
					if (!IsABestiaryIconDummy && y2 != num51)
					{
						SoundEngine.PlaySound(in SoundID.DeerclopsScream, base.Center);
					}
				}
				frameCounter += 1.0;
				int sequenceFrame2 = (int)frameCounter / 4;
				y2 = FindFrame_Deerclops_GetAttack2Frame(sequenceFrame2);
				spriteDirection = direction;
			}
			else if (ai[0] == 3f || ai[0] == 5f || ai[0] == 7f || ai[0] == 8f)
			{
				spriteDirection = direction;
				int num56 = 19;
				int num58 = 24;
				if (y2 < num56 || y2 > num58)
				{
					y2 = num56;
					frameCounter = 0.0;
				}
				frameCounter += 1.0;
				int sequenceFrame3 = (int)frameCounter / 4;
				y2 = FindFrame_Deerclops_GetAttack3Frame(sequenceFrame3);
				if (y2 == 21)
				{
					spriteDirection = direction;
				}
			}
			else if (ai[0] == 4f)
			{
				spriteDirection = direction;
				int num59 = 12;
				int num60 = 17;
				if (y2 < num59 || y2 > num60)
				{
					y2 = num59;
					frameCounter = 0.0;
					if (!IsABestiaryIconDummy && y2 != num51)
					{
						SoundEngine.PlaySound(in SoundID.DeerclopsScream, base.Center);
					}
				}
				frameCounter += 1.0;
				int sequenceFrame4 = (int)frameCounter / 4;
				y2 = FindFrame_Deerclops_GetAttack1Frame(sequenceFrame4);
			}
			else
			{
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (velocity.Y > 0f || localAI[0] == 1f)
				{
					frameCounter = 0.0;
					y2 = 1;
				}
				else if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					y2 = 0;
				}
				else
				{
					frameCounter += Math.Abs(velocity.X);
					int num61 = 10;
					int num62 = 15;
					if (frameCounter >= (double)(num61 * num62) || frameCounter < 0.0)
					{
						frameCounter = 0.0;
					}
					y2 = 2 + (int)(frameCounter / (double)num62);
					if (num51 != y2 && !IsABestiaryIconDummy && (y2 == 4 || y2 == 9))
					{
						SoundEngine.PlaySound(in SoundID.DeerclopsStep, base.Bottom);
					}
				}
			}
			frame.Y = y2;
			break;
		}
		case 657:
		{
			bool flag = life <= lifeMax / 2;
			frame.Width = 180;
			int num294 = frame.Y / num;
			if ((flag && noGravity) || velocity.Y < 0f)
			{
				if (num294 < 20 || num294 > 23)
				{
					if (num294 < 4 || num294 > 7)
					{
						num294 = 4;
						frameCounter = -1.0;
					}
					if ((frameCounter += 1.0) >= 4.0)
					{
						frameCounter = 0.0;
						num294++;
						if (num294 >= 7)
						{
							num294 = ((!flag) ? 7 : 22);
						}
					}
				}
				else if ((frameCounter += 1.0) >= 5.0)
				{
					frameCounter = 0.0;
					num294++;
					if (num294 >= 24)
					{
						num294 = 20;
					}
				}
				frame.Y = num294 * num;
			}
			else if (velocity.Y > 0f)
			{
				if (num294 < 8 || num294 > 10)
				{
					num294 = 8;
					frameCounter = -1.0;
				}
				if ((frameCounter += 1.0) >= 8.0)
				{
					frameCounter = 0.0;
					num294++;
					if (num294 >= 10)
					{
						num294 = 10;
					}
				}
				frame.Y = num294 * num;
			}
			else
			{
				if (velocity.Y != 0f)
				{
					break;
				}
				if (ai[0] == 5f)
				{
					frameCounter = 0.0;
					num294 = ((int)ai[1] / 3 % 3) switch
					{
						1 => 14, 
						2 => 15, 
						_ => 13, 
					};
				}
				else if (ai[0] == 4f)
				{
					frameCounter = 0.0;
					switch ((int)ai[1] / 15)
					{
					default:
						num294 = 12;
						break;
					case 1:
						num294 = 11;
						break;
					case 2:
					case 3:
						num294 = 10;
						break;
					}
				}
				else
				{
					bool flag6 = num294 >= 10 && num294 <= 12;
					int num2 = 10;
					if (flag6)
					{
						num2 = 6;
					}
					if (!flag6 && num294 >= 4)
					{
						num294 = 0;
						frameCounter = -1.0;
					}
					if ((frameCounter += 1.0) >= (double)num2)
					{
						frameCounter = 0.0;
						num294++;
						if ((!flag6 || num294 == 13) && num294 >= 4)
						{
							num294 = 0;
						}
					}
				}
				frame.Y = num294 * num;
			}
			break;
		}
		case 604:
		case 605:
		{
			spriteDirection = direction;
			int num63 = 2;
			int num64 = 4;
			if ((frameCounter += 1.0) >= (double)(num64 * num63))
			{
				frameCounter = 0.0;
			}
			if (velocity.Y == 0f)
			{
				frame.Y = num * ((int)frameCounter / num63);
			}
			else
			{
				frame.Y = num * (4 + (int)frameCounter / num63);
			}
			break;
		}
		case 669:
		{
			spriteDirection = direction;
			int num109 = 2;
			int num110 = 4;
			if ((frameCounter += 1.0) >= (double)(num110 * num109))
			{
				frameCounter = 0.0;
			}
			if (velocity.Y == 0f)
			{
				frame.Y = num * ((int)frameCounter / num109);
			}
			else
			{
				frame.Y = num * (4 + (int)frameCounter / num109);
			}
			break;
		}
		case 618:
			if ((frameCounter += 1.0) >= 5.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			break;
		case 619:
			if ((frameCounter += 1.0) >= 6.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			break;
		case 636:
			frame.Y = (AI_120_HallowBoss_IsInPhase2() ? num : 0);
			break;
		case 568:
		case 569:
			if (ai[0] > 0f)
			{
				int num111 = frame.Y / num;
				spriteDirection = direction;
				if (num111 < 5 || num111 > 16)
				{
					frameCounter = 0.0;
				}
				num111 = 7;
				frameCounter += 1.0;
				int num112 = 0;
				double num114 = frameCounter;
				int num86 = num112 + 1;
				num112 = num86;
				if (num114 >= (double)(5 * num86))
				{
					num111 = 8;
				}
				double num115 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num115 >= (double)(5 * num86))
				{
					num111 = 9;
				}
				double num116 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num116 >= (double)(5 * num86))
				{
					num111 = 10;
				}
				double num117 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num117 >= (double)(5 * num86))
				{
					num111 = 7;
				}
				double num118 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num118 >= (double)(5 * num86))
				{
					num111 = 8;
				}
				double num119 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num119 >= (double)(5 * num86))
				{
					num111 = 9;
				}
				double num120 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num120 >= (double)(5 * num86))
				{
					num111 = 10;
				}
				double num121 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num121 >= (double)(5 * num86))
				{
					num111 = 7;
				}
				double num122 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num122 >= (double)(5 * num86))
				{
					num111 = 8;
				}
				double num123 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num123 >= (double)(5 * num86))
				{
					num111 = 9;
				}
				double num126 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num126 >= (double)(5 * num86))
				{
					num111 = 10;
				}
				double num127 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num127 >= (double)(5 * num86))
				{
					num111 = 7;
				}
				double num128 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num128 >= (double)(5 * num86))
				{
					num111 = 8;
				}
				double num129 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num129 >= (double)(5 * num86))
				{
					num111 = 9;
				}
				double num130 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num130 >= (double)(5 * num86))
				{
					num111 = 10;
				}
				double num131 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num131 >= (double)(5 * num86))
				{
					num111 = 7;
				}
				double num132 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num132 >= (double)(5 * num86))
				{
					num111 = 8;
				}
				double num133 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num133 >= (double)(5 * num86))
				{
					num111 = 9;
				}
				double num134 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num134 >= (double)(5 * num86))
				{
					num111 = 10;
				}
				double num135 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num135 >= (double)(5 * num86))
				{
					num111 = 7;
				}
				double num137 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num137 >= (double)(5 * num86))
				{
					num111 = 8;
				}
				double num138 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num138 >= (double)(5 * num86))
				{
					num111 = 9;
				}
				double num139 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num139 >= (double)(5 * num86))
				{
					num111 = 10;
				}
				double num140 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num140 >= (double)(5 * num86))
				{
					num111 = 11;
				}
				double num141 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num141 >= (double)(5 * num86))
				{
					num111 = 12;
				}
				double num142 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num142 >= (double)(5 * num86))
				{
					num111 = 13;
				}
				double num143 = frameCounter;
				num86 = num112 + 1;
				num112 = num86;
				if (num143 >= (double)(5 * num86))
				{
					num111 = 14;
				}
				if (frameCounter >= 270.0)
				{
					num111 = 14;
					frameCounter -= 10.0;
				}
				frame.Y = num * num111;
				break;
			}
			if (velocity.Y == 0f)
			{
				spriteDirection = direction;
			}
			if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
			{
				frameCounter = 0.0;
				frame.Y = num * 4;
				break;
			}
			if (velocity.X == 0f)
			{
				frameCounter = 0.0;
				frame.Y = num * 6;
				break;
			}
			frameCounter += Math.Abs(velocity.X);
			if (frameCounter >= 56.0 || frameCounter < 0.0)
			{
				frameCounter = 0.0;
			}
			frame.Y = num * (int)(frameCounter / 8.0);
			break;
		case 551:
		{
			int num13 = frame.Y / num;
			if (ai[0] == 4f)
			{
				float num24 = 60f;
				int num35 = 10;
				int num46 = 6 * num35;
				if (num13 < 5)
				{
					frameCounter = 0.0;
				}
				num13 = 5;
				frameCounter = (int)ai[1];
				int num57 = 0;
				double num68 = frameCounter;
				int num92 = num57 + 1;
				num57 = num92;
				if (num68 >= (double)(5 * num92))
				{
					num13 = 6;
				}
				num57 = 0;
				if (frameCounter >= (double)(num24 - 6f))
				{
					num13 = 7;
				}
				if (frameCounter >= (double)(num24 - 3f))
				{
					num13 = 8;
				}
				if (frameCounter >= (double)num24)
				{
					num13 = 9 + (int)frameCounter / 3 % 2;
				}
				num57 = 0;
				if (frameCounter >= (double)(num24 + (float)num46 + 3f))
				{
					num13 = 8;
				}
				double num102 = frameCounter;
				float num113 = num24 + (float)num46 + 3f;
				num92 = num57 + 1;
				num57 = num92;
				if (num102 >= (double)(num113 + (float)(5 * num92)))
				{
					num13 = 7;
				}
				double num125 = frameCounter;
				float num136 = num24 + (float)num46 + 3f;
				num92 = num57 + 1;
				num57 = num92;
				if (num125 >= (double)(num136 + (float)(5 * num92)))
				{
					num13 = 0;
				}
			}
			else if (ai[0] == 3f)
			{
				float num147 = 40f;
				float num158 = 80f;
				float num169 = num147 + num158;
				float num180 = 25f;
				if (num13 < 5)
				{
					frameCounter = 0.0;
				}
				num13 = 5;
				frameCounter = (int)ai[1];
				int num191 = 0;
				double num202 = frameCounter;
				int num91 = num191 + 1;
				num191 = num91;
				if (num202 >= (double)(5 * num91))
				{
					num13 = 6;
				}
				num191 = 0;
				if (frameCounter >= (double)(num147 - 6f))
				{
					num13 = 7;
				}
				if (frameCounter >= (double)(num147 - 3f))
				{
					num13 = 8;
				}
				if (frameCounter >= (double)num147)
				{
					num13 = 9 + (int)frameCounter / 3 % 2;
				}
				num191 = 0;
				if (frameCounter >= (double)(num169 - num180 + 3f))
				{
					num13 = 8;
				}
				double num213 = frameCounter;
				float num224 = num169 - num180 + 3f;
				num91 = num191 + 1;
				num191 = num91;
				if (num213 >= (double)(num224 + (float)(5 * num91)))
				{
					num13 = 7;
				}
				double num230 = frameCounter;
				float num231 = num169 - num180 + 3f;
				num91 = num191 + 1;
				num191 = num91;
				if (num230 >= (double)(num231 + (float)(5 * num91)))
				{
					num13 = 0;
				}
			}
			else if (ai[0] == 5f)
			{
				num13 = 3;
			}
			else if (ai[0] == 6f)
			{
				if (num13 > 4)
				{
					frameCounter = 0.0;
				}
				num13 = 1;
				frameCounter = (int)ai[1];
				int num232 = 0;
				double num233 = frameCounter;
				int num90 = num232 + 1;
				num232 = num90;
				if (num233 >= (double)(8 * num90))
				{
					num13 = 2;
				}
				double num234 = frameCounter;
				num90 = num232 + 1;
				num232 = num90;
				if (num234 >= (double)(8 * num90))
				{
					num13 = 3;
				}
				double num235 = frameCounter;
				num90 = num232 + 1;
				num232 = num90;
				if (num235 >= (double)(8 * num90))
				{
					num13 = 4;
				}
				double num236 = frameCounter;
				num90 = num232 + 1;
				num232 = num90;
				if (num236 >= (double)(8 * num90))
				{
					num13 = 3;
				}
				double num237 = frameCounter;
				num90 = num232 + 1;
				num232 = num90;
				if (num237 >= (double)(8 * num90))
				{
					num13 = 4;
				}
				double num238 = frameCounter;
				num90 = num232 + 1;
				num232 = num90;
				if (num238 >= (double)(8 * num90))
				{
					num13 = 3;
				}
				double num239 = frameCounter;
				num90 = num232 + 1;
				num232 = num90;
				if (num239 >= (double)(8 * num90))
				{
					num13 = 2;
				}
				double num241 = frameCounter;
				num90 = num232 + 1;
				num232 = num90;
				if (num241 >= (double)(8 * num90))
				{
					num13 = 1;
				}
				double num242 = frameCounter;
				num90 = num232 + 1;
				num232 = num90;
				if (num242 >= (double)(8 * num90))
				{
					num13 = 0;
				}
			}
			else
			{
				num13 = 0;
			}
			frame.Y = num * num13;
			break;
		}
		case 552:
		case 553:
		case 554:
			if (ai[0] > 0f)
			{
				spriteDirection = direction;
				if (frame.Y < num * 10 || frame.Y > num * 13 || ai[1] == 29f)
				{
					frame.Y = num * 10;
					frameCounter = 0.0;
				}
				if ((frameCounter += 1.0) >= 6.0 && frame.Y < num * 13)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				break;
			}
			if (velocity.Y == 0f)
			{
				spriteDirection = direction;
			}
			if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
			{
				frameCounter = 0.0;
				frame.Y = num * 8;
				break;
			}
			if (velocity.X == 0f)
			{
				frameCounter = 0.0;
				frame.Y = num * 9;
				break;
			}
			frameCounter += Math.Abs(velocity.X);
			if (frameCounter >= 64.0 || frameCounter < 0.0)
			{
				frameCounter = 0.0;
			}
			frame.Y = num * (int)(frameCounter / 8.0);
			break;
		case 572:
		case 573:
			if (ai[0] > 0f && ai[1] == 0f)
			{
				spriteDirection = direction;
				if (frame.Y != num * 8 || frameCounter > 2.0)
				{
					frame.Y = num * 8;
					frameCounter = 0.0;
				}
				if (frameCounter == 0.0)
				{
					frameCounter = 1.0;
					EmoteBubble.NewBubble(3, new WorldUIAnchor((Entity)this), 60);
				}
				break;
			}
			if (ai[1] == 1f)
			{
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					frame.Y = num * 17;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 8;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 64.0 || frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				frame.Y = num * ((int)(frameCounter / 8.0) + 8);
				break;
			}
			if (velocity.Y == 0f)
			{
				spriteDirection = direction;
			}
			if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
			{
				frameCounter = 0.0;
				frame.Y = num * 16;
				break;
			}
			if (velocity.X == 0f)
			{
				frameCounter = 0.0;
				frame.Y = 0;
				break;
			}
			frameCounter += Math.Abs(velocity.X);
			if (frameCounter >= 64.0 || frameCounter < 0.0)
			{
				frameCounter = 0.0;
			}
			frame.Y = num * (int)(frameCounter / 8.0);
			break;
		case 566:
		case 567:
			if (velocity.Y == 0f)
			{
				spriteDirection = direction;
			}
			if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
			{
				frameCounter = 0.0;
				frame.Y = num * 8;
				break;
			}
			if (velocity.X == 0f)
			{
				frameCounter = 0.0;
				frame.Y = 0;
				break;
			}
			frameCounter += Math.Abs(velocity.X);
			if (frameCounter >= 64.0 || frameCounter < 0.0)
			{
				frameCounter = 0.0;
			}
			frame.Y = num * (int)(frameCounter / 8.0);
			break;
		case 576:
		case 577:
		{
			int num279 = frame.Y;
			frame.Width = 80;
			if (ai[0] > 0f && ai[1] == 0f)
			{
				spriteDirection = direction;
				if (num279 < 11 || num279 > 20)
				{
					num279 = 11;
					frameCounter = 0.0;
				}
				int num280 = 4;
				if (num279 == 13 || num279 == 19)
				{
					num280 = 8;
				}
				if (num279 == 14 || num279 == 18)
				{
					num280 = 2;
				}
				if ((frameCounter += 1.0) >= (double)num280 && num279 < 20)
				{
					frameCounter = 0.0;
					num279++;
				}
			}
			else if (ai[0] > 0f && ai[1] == 2f)
			{
				spriteDirection = direction;
				if (num279 < 37 || num279 > 47)
				{
					num279 = 39;
					frameCounter = 0.0;
				}
				int num281 = 5;
				if (num279 == 42)
				{
					num281 = 6;
				}
				if (num279 == 45)
				{
					num281 = 8;
				}
				if (num279 == 46)
				{
					num281 = 4;
				}
				if (num279 == 47)
				{
					num281 = 26;
				}
				if (num279 == 37 || num279 == 38)
				{
					num281 = 7;
				}
				bool flag11 = true;
				if (num279 == 46 && velocity.Y != 0f)
				{
					flag11 = false;
				}
				if (num279 == 38)
				{
					flag11 = false;
				}
				if (flag11)
				{
					frameCounter += 1.0;
				}
				if (frameCounter >= (double)num281)
				{
					if (num279 < 47)
					{
						frameCounter = 0.0;
						num279++;
					}
					else
					{
						num279 = 37;
						frameCounter = 0.0;
					}
				}
			}
			else if (ai[0] > 0f && ai[1] == 1f)
			{
				spriteDirection = direction;
				if (num279 < 21 || num279 > 38)
				{
					num279 = 21;
					frameCounter = 0.0;
				}
				int num282 = 5;
				if ((frameCounter += 1.0) >= (double)num282 && num279 < 38)
				{
					frameCounter = 0.0;
					num279++;
				}
			}
			else
			{
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (velocity.Y != 0f)
				{
					frameCounter = 0.0;
					num279 = 43;
				}
				else if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					num279 = 0;
				}
				else
				{
					frameCounter += Math.Abs(velocity.X);
					if (frameCounter >= 60.0 || frameCounter < 0.0)
					{
						frameCounter = 0.0;
					}
					num279 = 1 + (int)(frameCounter / 6.0);
				}
			}
			frame.Y = num279;
			break;
		}
		case 570:
		case 571:
			if (ai[1] > 0f && ai[0] > 0f)
			{
				spriteDirection = direction;
				if (frame.Y < num * 10 || frame.Y > num * 15 || ai[1] == 59f)
				{
					frame.Y = num * 10;
					frameCounter = 0.0;
				}
				int num161 = 5;
				if (frame.Y == num * 14)
				{
					num161 = 35;
				}
				if ((frameCounter += 1.0) >= (double)num161 && frame.Y < num * 15)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				break;
			}
			if (velocity.Y == 0f)
			{
				spriteDirection = direction;
			}
			if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
			{
				frameCounter = 0.0;
				frame.Y = num;
				break;
			}
			if (velocity.X == 0f)
			{
				frameCounter = 0.0;
				frame.Y = num * 9;
				break;
			}
			frameCounter += Math.Abs(velocity.X);
			if (frameCounter >= 64.0 || frameCounter < 0.0)
			{
				frameCounter = 0.0;
			}
			frame.Y = num * (int)(frameCounter / 8.0 + 2.0);
			break;
		case 561:
		case 562:
		case 563:
			if (ai[1] > 0f && ai[0] > 0f)
			{
				spriteDirection = direction;
				if (frame.Y < num * 10 || frame.Y > num * 13 || ai[1] == 89f)
				{
					frame.Y = num * 10;
					frameCounter = 0.0;
				}
				if ((frameCounter += 1.0) >= 6.0 && frame.Y < num * 13)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				break;
			}
			if (velocity.Y == 0f)
			{
				spriteDirection = direction;
			}
			if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
			{
				frameCounter = 0.0;
				frame.Y = num * 8;
				break;
			}
			if (velocity.X == 0f)
			{
				frameCounter = 0.0;
				frame.Y = num * 9;
				break;
			}
			frameCounter += Math.Abs(velocity.X);
			if (frameCounter >= 64.0 || frameCounter < 0.0)
			{
				frameCounter = 0.0;
			}
			frame.Y = num * (int)(frameCounter / 8.0);
			break;
		case 555:
		case 556:
		case 557:
			if (ai[1] > 0f && ai[0] > 0f)
			{
				spriteDirection = direction;
				if (frame.Y < num * 10 || frame.Y > num * 16 || ai[1] == 41f)
				{
					frame.Y = num * 10;
					frameCounter = 0.0;
				}
				if ((frameCounter += 1.0) >= 6.0 && frame.Y < num * 16)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				break;
			}
			if (velocity.Y == 0f)
			{
				spriteDirection = direction;
			}
			if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
			{
				frameCounter = 0.0;
				frame.Y = num;
				break;
			}
			if (velocity.X == 0f)
			{
				frameCounter = 0.0;
				frame.Y = 0;
				break;
			}
			frameCounter += Math.Abs(velocity.X);
			if (frameCounter >= 64.0 || frameCounter < 0.0)
			{
				frameCounter = 0.0;
			}
			frame.Y = num * ((int)(frameCounter / 8.0) + 2);
			break;
		case 558:
		case 559:
		case 560:
		{
			if (velocity.X > 0f)
			{
				spriteDirection = 1;
			}
			if (velocity.X < 0f)
			{
				spriteDirection = -1;
			}
			float num246 = velocity.ToRotation();
			if (velocity.X < 0f)
			{
				num246 += (float)Math.PI;
			}
			if (ai[0] != 2f)
			{
				num246 = velocity.X * 0.1f;
			}
			rotation = num246;
			if (ai[0] == 2f)
			{
				frame.Y = num * 4;
			}
			else if ((frameCounter += 1.0) >= 6.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
				if (frame.Y >= num * 4)
				{
					frame.Y = 0;
				}
			}
			break;
		}
		case 578:
			rotation = velocity.X * 0.1f;
			if ((frameCounter += 1.0) >= 4.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
				if (frame.Y >= num * 4)
				{
					frame.Y = 0;
				}
			}
			break;
		case 574:
		case 575:
		{
			if (velocity.X > 0f)
			{
				spriteDirection = 1;
			}
			if (velocity.X < 0f)
			{
				spriteDirection = -1;
			}
			float num159 = velocity.ToRotation();
			if (velocity.X < 0f)
			{
				num159 += (float)Math.PI;
			}
			rotation = rotation.AngleTowards(num159, 0.02f);
			if (ai[0] != 0f)
			{
				if (frame.Y < num * 2)
				{
					frame.Y = num * 2;
					frameCounter = 0.0;
				}
				int num160 = 4;
				if (frame.Y >= num * 5)
				{
					num160 = 8;
				}
				Vector2 vector3 = base.Center + Utils.RotatedBy(new Vector2((float)(56 * spriteDirection), -30f), rotation);
				if ((frameCounter += 1.0) >= (double)num160 && frame.Y < num * 9)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y == num * 9)
					{
						for (int k = 0; k < 8; k++)
						{
							Dust dust2 = Dust.NewDustDirect(vector3, 0, 0, 6, 0f, 0f, 100);
							dust2.velocity *= 3f;
							dust2.scale = 0.6f;
							dust2.fadeIn = 1.2f;
							dust2.noGravity = true;
							dust2.noLight = true;
						}
					}
				}
				if (frame.Y < num * 9 || !(ai[0] < 3f))
				{
					break;
				}
				Vector2 value = vector3;
				Vector2 value2 = vector3 + (oldPos[3] - position);
				int maxValue = 5;
				if (frameCounter > 60.0)
				{
					maxValue = 4;
				}
				if (frameCounter > 180.0)
				{
					maxValue = 3;
				}
				if (frameCounter > 300.0)
				{
					maxValue = 2;
				}
				if (frameCounter > 600.0)
				{
					maxValue = 1;
				}
				for (int l = 0; l < 2; l++)
				{
					if (Main.rand.Next(maxValue) == 0)
					{
						Dust dust3 = Dust.NewDustDirect(Vector2.Lerp(value2, value, (float)l / 10f + 0.1f), 0, 0, 6, 0f, 0f, 50);
						dust3.scale = 0.3f;
						dust3.fadeIn = 1.5f;
						dust3.noGravity = true;
						dust3.noLight = true;
					}
				}
			}
			else if ((frameCounter += 1.0) >= 6.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
				if (frame.Y >= num * 2)
				{
					frame.Y = 0;
				}
			}
			break;
		}
		case 549:
			spriteDirection = 1;
			rotation = 0f;
			if ((frameCounter += 1.0) >= 6.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			break;
		case 594:
			spriteDirection = 1;
			frame.Y = (int)ai[2];
			frame.Width = 32;
			break;
		case 564:
		case 565:
		{
			int y = frame.Y;
			frame.Width = 80;
			frame.Height = 80;
			if (ai[0] > 0f && ai[1] == 0f)
			{
				spriteDirection = direction;
				if (y < 5 || y > 13)
				{
					frameCounter = 0.0;
				}
				y = 5;
				frameCounter += 1.0;
				int num291 = 0;
				double num292 = frameCounter;
				int num87 = num291 + 1;
				num291 = num87;
				if (num292 >= (double)(7 * num87))
				{
					y = 6;
				}
				double num293 = frameCounter;
				num87 = num291 + 1;
				num291 = num87;
				if (num293 >= (double)(7 * num87))
				{
					y = 7;
				}
				double num295 = frameCounter;
				num87 = num291 + 1;
				num291 = num87;
				if (num295 >= (double)(7 * num87))
				{
					y = 5;
				}
				double num296 = frameCounter;
				num87 = num291 + 1;
				num291 = num87;
				if (num296 >= (double)(7 * num87))
				{
					y = 6;
				}
				double num297 = frameCounter;
				num87 = num291 + 1;
				num291 = num87;
				if (num297 >= (double)(7 * num87))
				{
					y = 7;
				}
				double num298 = frameCounter;
				num87 = num291 + 1;
				num291 = num87;
				if (num298 >= (double)(7 * num87))
				{
					y = 5;
				}
				double num299 = frameCounter;
				num87 = num291 + 1;
				num291 = num87;
				if (num299 >= (double)(7 * num87))
				{
					y = 6;
				}
				double num300 = frameCounter;
				num87 = num291 + 1;
				num291 = num87;
				if (num300 >= (double)(7 * num87))
				{
					y = 7;
				}
				double num301 = frameCounter;
				num87 = num291 + 1;
				num291 = num87;
				if (num301 >= (double)(7 * num87))
				{
					y = 8;
				}
				double num302 = frameCounter;
				num87 = num291 + 1;
				num291 = num87;
				if (num302 >= (double)(7 * num87))
				{
					y = 9;
				}
				double num303 = frameCounter;
				num87 = num291 + 1;
				num291 = num87;
				if (num303 >= (double)(7 * num87))
				{
					y = 10;
				}
				double num304 = frameCounter;
				num87 = num291 + 1;
				num291 = num87;
				if (num304 >= (double)(7 * num87))
				{
					y = 11;
				}
				double num3 = frameCounter;
				num87 = num291 + 1;
				num291 = num87;
				if (num3 >= (double)(7 * num87))
				{
					y = 12;
				}
				double num4 = frameCounter;
				num87 = num291 + 1;
				num291 = num87;
				if (num4 >= (double)(7 * num87))
				{
					y = 5;
					frameCounter = 0.0;
				}
			}
			else if (ai[0] > 0f && ai[1] == 1f)
			{
				spriteDirection = direction;
				if (y < 13 || y > 25)
				{
					frameCounter = 0.0;
				}
				y = 13;
				frameCounter += 1.0;
				int num5 = 0;
				double num6 = frameCounter;
				int num88 = num5 + 1;
				num5 = num88;
				if (num6 >= (double)(8 * num88))
				{
					y = 14;
				}
				double num7 = frameCounter;
				num88 = num5 + 1;
				num5 = num88;
				if (num7 >= (double)(8 * num88))
				{
					y = 15;
				}
				double num8 = frameCounter;
				num88 = num5 + 1;
				num5 = num88;
				if (num8 >= (double)(8 * num88))
				{
					y = 16;
				}
				double num9 = frameCounter;
				num88 = num5 + 1;
				num5 = num88;
				if (num9 >= (double)(8 * num88))
				{
					y = 17;
				}
				double num10 = frameCounter;
				num88 = num5 + 1;
				num5 = num88;
				if (num10 >= (double)(8 * num88))
				{
					y = 18;
				}
				double num11 = frameCounter;
				num88 = num5 + 1;
				num5 = num88;
				if (num11 >= (double)(8 * num88))
				{
					y = 19;
				}
				double num12 = frameCounter;
				num88 = num5 + 1;
				num5 = num88;
				if (num12 >= (double)(8 * num88))
				{
					y = 20;
				}
				double num14 = frameCounter;
				num88 = num5 + 1;
				num5 = num88;
				if (num14 >= (double)(8 * num88))
				{
					y = 18;
				}
				double num15 = frameCounter;
				num88 = num5 + 1;
				num5 = num88;
				if (num15 >= (double)(8 * num88))
				{
					y = 19;
				}
				double num16 = frameCounter;
				num88 = num5 + 1;
				num5 = num88;
				if (num16 >= (double)(8 * num88))
				{
					y = 20;
				}
				double num17 = frameCounter;
				num88 = num5 + 1;
				num5 = num88;
				if (num17 >= (double)(8 * num88))
				{
					y = 21;
				}
				double num18 = frameCounter;
				num88 = num5 + 1;
				num5 = num88;
				if (num18 >= (double)(8 * num88))
				{
					y = 22;
				}
				double num19 = frameCounter;
				num88 = num5 + 1;
				num5 = num88;
				if (num19 >= (double)(8 * num88))
				{
					y = 23;
				}
				double num20 = frameCounter;
				num88 = num5 + 1;
				num5 = num88;
				if (num20 >= (double)(8 * num88))
				{
					y = 24;
				}
				double num21 = frameCounter;
				num88 = num5 + 1;
				num5 = num88;
				if (num21 >= (double)(8 * num88))
				{
					y = 25;
				}
				double num22 = frameCounter;
				num88 = num5 + 1;
				num5 = num88;
				if (num22 >= (double)(8 * num88))
				{
					y = 14;
					frameCounter = 0.0;
				}
			}
			else if (ai[0] > 0f && ai[1] == 2f)
			{
				spriteDirection = direction;
				if (y < 26 || y > 40)
				{
					frameCounter = 0.0;
				}
				y = 26;
				frameCounter += 1.0;
				int num23 = 0;
				double num25 = frameCounter;
				int num89 = num23 + 1;
				num23 = num89;
				if (num25 >= (double)(8 * num89))
				{
					y = 27;
				}
				double num26 = frameCounter;
				num89 = num23 + 1;
				num23 = num89;
				if (num26 >= (double)(8 * num89))
				{
					y = 28;
				}
				double num27 = frameCounter;
				num89 = num23 + 1;
				num23 = num89;
				if (num27 >= (double)(8 * num89))
				{
					y = 29;
				}
				double num28 = frameCounter;
				num89 = num23 + 1;
				num23 = num89;
				if (num28 >= (double)(8 * num89))
				{
					y = 26;
				}
				double num29 = frameCounter;
				num89 = num23 + 1;
				num23 = num89;
				if (num29 >= (double)(8 * num89))
				{
					y = 27;
				}
				double num30 = frameCounter;
				num89 = num23 + 1;
				num23 = num89;
				if (num30 >= (double)(8 * num89))
				{
					y = 28;
				}
				double num31 = frameCounter;
				num89 = num23 + 1;
				num23 = num89;
				if (num31 >= (double)(8 * num89))
				{
					y = 29;
				}
				double num32 = frameCounter;
				num89 = num23 + 1;
				num23 = num89;
				if (num32 >= (double)(8 * num89))
				{
					y = 26;
				}
				double num33 = frameCounter;
				num89 = num23 + 1;
				num23 = num89;
				if (num33 >= (double)(8 * num89))
				{
					y = 27;
				}
				double num34 = frameCounter;
				num89 = num23 + 1;
				num23 = num89;
				if (num34 >= (double)(8 * num89))
				{
					y = 28;
				}
				double num36 = frameCounter;
				num89 = num23 + 1;
				num23 = num89;
				if (num36 >= (double)(8 * num89))
				{
					y = 29;
				}
				double num37 = frameCounter;
				num89 = num23 + 1;
				num23 = num89;
				if (num37 >= (double)(8 * num89))
				{
					y = 30;
				}
				double num38 = frameCounter;
				num89 = num23 + 1;
				num23 = num89;
				if (num38 >= (double)(8 * num89))
				{
					y = 31;
				}
				double num39 = frameCounter;
				num89 = num23 + 1;
				num23 = num89;
				if (num39 >= (double)(8 * num89))
				{
					y = 32;
				}
				double num40 = frameCounter;
				num89 = num23 + 1;
				num23 = num89;
				if (num40 >= (double)(8 * num89))
				{
					y = 33;
				}
				double num41 = frameCounter;
				num89 = num23 + 1;
				num23 = num89;
				if (num41 >= (double)(8 * num89))
				{
					y = 34;
				}
				double num42 = frameCounter;
				num89 = num23 + 1;
				num23 = num89;
				if (num42 >= (double)(8 * num89))
				{
					y = 35;
				}
				double num43 = frameCounter;
				num89 = num23 + 1;
				num23 = num89;
				if (num43 >= (double)(8 * num89))
				{
					y = 36;
				}
				double num44 = frameCounter;
				num89 = num23 + 1;
				num23 = num89;
				if (num44 >= (double)(8 * num89))
				{
					y = 37;
				}
				double num45 = frameCounter;
				num89 = num23 + 1;
				num23 = num89;
				if (num45 >= (double)(8 * num89))
				{
					y = 38;
				}
				double num47 = frameCounter;
				num89 = num23 + 1;
				num23 = num89;
				if (num47 >= (double)(8 * num89))
				{
					y = 39;
				}
				double num48 = frameCounter;
				num89 = num23 + 1;
				num23 = num89;
				if (num48 >= (double)(8 * num89))
				{
					y = 40;
				}
				double num49 = frameCounter;
				num89 = num23 + 1;
				num23 = num89;
				if (num49 >= (double)(8 * num89))
				{
					y = 26;
					frameCounter = 0.0;
				}
			}
			else
			{
				frameCounter = frameCounter + (double)(((Vector2)(ref velocity)).Length() * 0.1f) + 1.0;
				if (frameCounter >= 40.0 || frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				y = (int)(frameCounter / 8.0);
			}
			frame.Y = y;
			break;
		}
		case 620:
			if (ai[1] > 0f && ai[0] > 0f)
			{
				spriteDirection = direction;
				if (frame.Y < num * 14 || frame.Y > num * 20 || ai[1] == 59f)
				{
					frame.Y = num * 14;
					frameCounter = 0.0;
				}
				int num150 = 5;
				if (frame.Y == num * 17 || frame.Y == num * 16)
				{
					num150 = 3;
				}
				if ((frameCounter += 1.0) >= (double)num150 && frame.Y < num * 20)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (ai[1] > 0f && frame.Y == num * 18)
					{
						frame.Y = num * 16;
					}
				}
				break;
			}
			if (wet)
			{
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				if (velocity.X > 0f)
				{
					direction = 1;
				}
				if (spriteDirection != direction)
				{
					rotation *= -1f;
					spriteDirection = direction;
				}
				float num151 = (float)Math.Atan2(velocity.Y * (float)direction, velocity.X * (float)direction);
				if (Math.Abs(rotation - num151) >= (float)Math.PI)
				{
					if (num151 < rotation)
					{
						rotation -= (float)Math.PI * 2f;
					}
					else
					{
						rotation += (float)Math.PI * 2f;
					}
				}
				rotation = (rotation * 4f + num151) / 5f;
				frameCounter += Math.Abs(((Vector2)(ref velocity)).Length());
				frameCounter += 1.0;
				if (frameCounter > 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num > 13)
				{
					frame.Y = num * 8;
				}
				else if (frame.Y / num < 8)
				{
					frame.Y = num * 13;
				}
				break;
			}
			if ((double)rotation > 3.14)
			{
				rotation -= 6.28f;
			}
			if ((double)rotation > -0.01 && (double)rotation < 0.01)
			{
				rotation = 0f;
			}
			else
			{
				rotation *= 0.9f;
			}
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				if (frame.Y < num * 2)
				{
					frame.Y = num * 2;
				}
				frameCounter += Math.Abs(velocity.X);
				frameCounter += 1.0;
				if (frameCounter > 9.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num > 7)
				{
					frame.Y = num * 2;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num;
			}
			break;
		case 17:
		case 18:
		case 19:
		case 20:
		case 21:
		case 22:
		case 26:
		case 27:
		case 28:
		case 31:
		case 37:
		case 38:
		case 44:
		case 54:
		case 73:
		case 77:
		case 78:
		case 79:
		case 80:
		case 104:
		case 107:
		case 108:
		case 120:
		case 124:
		case 140:
		case 142:
		case 159:
		case 160:
		case 162:
		case 167:
		case 178:
		case 181:
		case 185:
		case 196:
		case 197:
		case 198:
		case 201:
		case 202:
		case 203:
		case 207:
		case 208:
		case 209:
		case 212:
		case 213:
		case 227:
		case 228:
		case 229:
		case 287:
		case 294:
		case 295:
		case 296:
		case 310:
		case 311:
		case 312:
		case 313:
		case 314:
		case 322:
		case 323:
		case 324:
		case 326:
		case 338:
		case 339:
		case 340:
		case 353:
		case 368:
		case 369:
		case 441:
		case 453:
		case 460:
		case 462:
		case 463:
		case 489:
		case 534:
		case 550:
		case 588:
		case 630:
		case 632:
		case 633:
		case 635:
		case 637:
		case 638:
		case 656:
		case 663:
		case 670:
		case 678:
		case 679:
		case 680:
		case 681:
		case 682:
		case 683:
		case 684:
		{
			int num165 = (isLikeATownNPC ? NPCID.Sets.ExtraFramesCount[type] : 0);
			bool flag3 = NPCID.Sets.IsTownSlime[type];
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (NPCID.Sets.IsTownSlime[type])
				{
					spriteDirection *= -1;
				}
				int num166 = Main.npcFrameCount[type] - NPCID.Sets.AttackFrameCount[type];
				if (ai[0] == 23f)
				{
					frameCounter += 1.0;
					int num167 = frame.Y / num;
					int num79 = num166 - num167;
					if ((uint)(num79 - 1) > 1u && (uint)(num79 - 4) > 1u && num167 != 0)
					{
						frame.Y = 0;
						frameCounter = 0.0;
					}
					int num168 = 0;
					num168 = ((!(frameCounter < 6.0)) ? (num166 - 4) : (num166 - 5));
					if (ai[1] < 6f)
					{
						num168 = num166 - 5;
					}
					frame.Y = num * num168;
				}
				else if (ai[0] >= 20f && ai[0] <= 22f)
				{
					int num170 = frame.Y / num;
					switch ((int)ai[0])
					{
					case 20:
						if (flag3)
						{
							if (ai[1] > 30f && (num170 < 8 || num170 > 13))
							{
								num170 = 8;
							}
							if (num170 > 0)
							{
								frameCounter += 1.0;
							}
							if (frameCounter >= 12.0)
							{
								frameCounter = 0.0;
								num170++;
								if (num170 > 13 && ai[1] > 30f)
								{
									num170 = 8;
								}
								if (num170 > 13)
								{
									num170 = 0;
								}
							}
						}
						if (type == 656)
						{
							if (ai[1] > 30f && (num170 < 7 || num170 > 9))
							{
								num170 = 7;
							}
							if (num170 > 0)
							{
								frameCounter += 1.0;
							}
							if (frameCounter > 4.0)
							{
								frameCounter = 0.0;
								num170++;
								if (num170 > 8 && ai[1] > 30f)
								{
									num170 = 8;
								}
								if (num170 > 9)
								{
									num170 = 0;
								}
							}
						}
						if (type == 637)
						{
							if (ai[1] > 30f && (num170 < 10 || num170 > 16))
							{
								num170 = 10;
							}
							if (num170 > 0)
							{
								frameCounter += 1.0;
							}
							if (frameCounter > 4.0)
							{
								frameCounter = 0.0;
								num170++;
								if (num170 > 13 && ai[1] > 30f)
								{
									num170 = 13;
								}
								if (num170 > 16)
								{
									num170 = 0;
								}
							}
						}
						if (type != 638)
						{
							break;
						}
						if (ai[1] > 30f && (num170 < 23 || num170 > 27))
						{
							num170 = 23;
						}
						if (num170 > 0)
						{
							frameCounter += 1.0;
						}
						if (frameCounter > 4.0)
						{
							frameCounter = 0.0;
							num170++;
							if (num170 > 26 && ai[1] > 30f)
							{
								num170 = 24;
							}
							if (num170 > 27)
							{
								num170 = 0;
							}
						}
						break;
					case 21:
						if (type == 656)
						{
							if (ai[1] > 30f && (num170 < 10 || num170 > 16))
							{
								num170 = 10;
							}
							if (num170 > 0)
							{
								frameCounter += 1.0;
							}
							if (frameCounter > 4.0)
							{
								frameCounter = 0.0;
								num170++;
								if (num170 > 13 && ai[1] > 30f)
								{
									num170 = 13;
								}
								if (num170 > 16)
								{
									num170 = 0;
								}
							}
						}
						if (type == 637)
						{
							if (ai[1] > 30f && (num170 < 17 || num170 > 21))
							{
								num170 = 17;
							}
							if (num170 > 0)
							{
								frameCounter += 1.0;
							}
							if (frameCounter > 4.0)
							{
								frameCounter = 0.0;
								num170++;
								if (num170 > 19 && ai[1] > 30f)
								{
									num170 = 19;
								}
								if (num170 > 21)
								{
									num170 = 0;
								}
							}
						}
						if (type != 638)
						{
							break;
						}
						if (ai[1] > 30f && (num170 < 17 || num170 > 22))
						{
							num170 = 17;
						}
						if (num170 > 0)
						{
							frameCounter += 1.0;
						}
						if (frameCounter > 4.0)
						{
							frameCounter = 0.0;
							num170++;
							if (num170 > 21 && ai[1] > 30f)
							{
								num170 = 18;
							}
							if (num170 > 22)
							{
								num170 = 0;
							}
						}
						break;
					case 22:
						if (type == 656)
						{
							int num171 = Main.npcFrameCount[type];
							if (ai[1] > 40f && (num170 < 17 || num170 >= num171))
							{
								num170 = 17;
							}
							if (num170 > 0)
							{
								frameCounter += 1.0;
							}
							if (frameCounter > 4.0)
							{
								frameCounter = 0.0;
								num170++;
								if (num170 > 20 && ai[1] > 40f)
								{
									num170 = 19;
								}
								if (num170 >= num171)
								{
									num170 = 0;
								}
							}
						}
						if (type != 637)
						{
							break;
						}
						if (ai[1] > 30f && (num170 < 17 || num170 > 27))
						{
							num170 = 17;
						}
						if (num170 > 0)
						{
							frameCounter += 1.0;
						}
						if (frameCounter > 4.0)
						{
							frameCounter = 0.0;
							num170++;
							if (num170 > 27)
							{
								num170 = ((!(ai[1] <= 30f)) ? 22 : 20);
							}
							else if (ai[1] <= 30f && num170 == 22)
							{
								num170 = 0;
							}
							else if (ai[1] > 30f && num170 > 19 && num170 < 22)
							{
								num170 = 22;
							}
						}
						break;
					}
					frame.Y = num170 * num;
				}
				else if (ai[0] == 2f)
				{
					frameCounter += 1.0;
					if (frame.Y / num == num166 - 1 && frameCounter >= 5.0)
					{
						frame.Y = 0;
						frameCounter = 0.0;
					}
					else if (frame.Y / num == 0 && frameCounter >= 40.0)
					{
						frame.Y = num * (num166 - 1);
						frameCounter = 0.0;
					}
					else if (frame.Y != 0 && frame.Y != num * (num166 - 1))
					{
						frame.Y = 0;
						frameCounter = 0.0;
					}
				}
				else if (ai[0] == 11f)
				{
					frameCounter += 1.0;
					if (frame.Y / num == num166 - 1 && frameCounter >= 50.0)
					{
						if (frameCounter == 50.0)
						{
							int num172 = Main.rand.Next(4);
							for (int m = 0; m < 3 + num172; m++)
							{
								int num173 = Dust.NewDust(base.Center + Vector2.UnitX * (float)(-direction) * 8f - Vector2.One * 5f + Vector2.UnitY * 8f, 3, 6, 216, -direction, 1f);
								Dust obj = Main.dust[num173];
								obj.velocity /= 2f;
								Main.dust[num173].scale = 0.8f;
							}
							if (Main.rand.Next(30) == 0)
							{
								int num174 = Gore.NewGore(base.Center + Vector2.UnitX * (float)(-direction) * 8f, Vector2.Zero, Main.rand.Next(580, 583));
								Gore obj2 = Main.gore[num174];
								obj2.velocity /= 2f;
								Main.gore[num174].velocity.Y = Math.Abs(Main.gore[num174].velocity.Y);
								Main.gore[num174].velocity.X = (0f - Math.Abs(Main.gore[num174].velocity.X)) * (float)direction;
							}
						}
						if (frameCounter >= 100.0 && Main.rand.Next(20) == 0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
					}
					else if (frame.Y / num == 0 && frameCounter >= 20.0)
					{
						frame.Y = num * (num166 - 1);
						frameCounter = 0.0;
						EmoteBubble.NewBubble(89, new WorldUIAnchor((Entity)this), 90);
					}
					else if (frame.Y != 0 && frame.Y != num * (num166 - 1))
					{
						frame.Y = 0;
						frameCounter = 0.0;
					}
				}
				else if (ai[0] == 5f)
				{
					frame.Y = num * (num166 - 3);
					if (type == 637)
					{
						frame.Y = num * 19;
					}
					frameCounter = 0.0;
				}
				else if (ai[0] == 6f)
				{
					frameCounter += 1.0;
					int num175 = frame.Y / num;
					int num80 = num166 - num175;
					if ((uint)(num80 - 1) > 1u && (uint)(num80 - 4) > 1u && num175 != 0)
					{
						frame.Y = 0;
						frameCounter = 0.0;
					}
					int num176 = 0;
					num176 = ((!(frameCounter < 10.0)) ? ((frameCounter < 16.0) ? (num166 - 5) : ((frameCounter < 46.0) ? (num166 - 4) : ((frameCounter < 60.0) ? (num166 - 5) : ((!(frameCounter < 66.0)) ? ((frameCounter < 72.0) ? (num166 - 5) : ((frameCounter < 102.0) ? (num166 - 4) : ((frameCounter < 108.0) ? (num166 - 5) : ((!(frameCounter < 114.0)) ? ((frameCounter < 120.0) ? (num166 - 5) : ((frameCounter < 150.0) ? (num166 - 4) : ((frameCounter < 156.0) ? (num166 - 5) : ((!(frameCounter < 162.0)) ? ((frameCounter < 168.0) ? (num166 - 5) : ((frameCounter < 198.0) ? (num166 - 4) : ((frameCounter < 204.0) ? (num166 - 5) : ((!(frameCounter < 210.0)) ? ((frameCounter < 216.0) ? (num166 - 5) : ((frameCounter < 246.0) ? (num166 - 4) : ((frameCounter < 252.0) ? (num166 - 5) : ((!(frameCounter < 258.0)) ? ((frameCounter < 264.0) ? (num166 - 5) : ((frameCounter < 294.0) ? (num166 - 4) : ((frameCounter < 300.0) ? (num166 - 5) : 0))) : 0)))) : 0)))) : 0)))) : 0)))) : 0)))) : 0);
					if (num176 == num166 - 4 && num175 == num166 - 5)
					{
						Vector2 vector4 = base.Center + new Vector2((float)(10 * direction), -4f);
						for (int n = 0; n < 8; n++)
						{
							int num177 = Main.rand.Next(139, 143);
							int num178 = Dust.NewDust(vector4, 0, 0, num177, velocity.X + (float)direction, velocity.Y - 2.5f, 0, default(Color), 1.2f);
							Main.dust[num178].velocity.X += (float)direction * 1.5f;
							Dust obj3 = Main.dust[num178];
							obj3.position -= new Vector2(4f);
							Dust obj4 = Main.dust[num178];
							obj4.velocity *= 2f;
							Main.dust[num178].scale = 0.7f + Main.rand.NextFloat() * 0.3f;
						}
					}
					frame.Y = num * num176;
					if (frameCounter >= 300.0)
					{
						frameCounter = 0.0;
					}
				}
				else if ((ai[0] == 7f || ai[0] == 19f) && !NPCID.Sets.IsTownPet[type])
				{
					frameCounter += 1.0;
					int num179 = frame.Y / num;
					int num81 = num166 - num179;
					if ((uint)(num81 - 1) > 1u && (uint)(num81 - 4) > 1u && num179 != 0)
					{
						frame.Y = 0;
						frameCounter = 0.0;
					}
					int num181 = 0;
					if (frameCounter < 16.0)
					{
						num181 = 0;
					}
					else if (frameCounter == 16.0)
					{
						EmoteBubble.NewBubbleNPC(new WorldUIAnchor((Entity)this), 112);
					}
					else if (frameCounter < 128.0)
					{
						num181 = ((frameCounter % 16.0 < 8.0) ? (num166 - 2) : 0);
					}
					else if (frameCounter < 160.0)
					{
						num181 = 0;
					}
					else if (frameCounter != 160.0)
					{
						num181 = ((frameCounter < 220.0) ? ((frameCounter % 12.0 < 6.0) ? (num166 - 2) : 0) : 0);
					}
					else
					{
						EmoteBubble.NewBubbleNPC(new WorldUIAnchor((Entity)this), 60);
					}
					frame.Y = num * num181;
					if (frameCounter >= 220.0)
					{
						frameCounter = 0.0;
					}
				}
				else if (ai[0] == 9f)
				{
					frameCounter += 1.0;
					int num182 = frame.Y / num;
					int num82 = num166 - num182;
					if ((uint)(num82 - 1) > 1u && (uint)(num82 - 4) > 1u && num182 != 0)
					{
						frame.Y = 0;
						frameCounter = 0.0;
					}
					int num183 = 0;
					num183 = ((!(frameCounter < 10.0)) ? ((!(frameCounter < 16.0)) ? (num166 - 4) : (num166 - 5)) : 0);
					if (ai[1] < 16f)
					{
						num183 = num166 - 5;
					}
					if (ai[1] < 10f)
					{
						num183 = 0;
					}
					frame.Y = num * num183;
				}
				else if (ai[0] == 18f)
				{
					frameCounter += 1.0;
					int num184 = frame.Y / num;
					int num83 = num166 - num184;
					if ((uint)(num83 - 1) > 1u && (uint)(num83 - 4) > 1u && num184 != 0)
					{
						frame.Y = 0;
						frameCounter = 0.0;
					}
					int num185 = 0;
					if (frameCounter < 10.0)
					{
						num185 = 0;
					}
					else if (frameCounter < 16.0)
					{
						num185 = num166 - 1;
					}
					else
					{
						num185 = num166 - 2;
					}
					if (ai[1] < 16f)
					{
						num185 = num166 - 1;
					}
					if (ai[1] < 10f)
					{
						num185 = 0;
					}
					num185 = Main.npcFrameCount[type] - 2;
					frame.Y = num * num185;
				}
				else if (ai[0] == 10f || ai[0] == 13f)
				{
					frameCounter += 1.0;
					int num186 = frame.Y / num;
					if ((uint)(num186 - num166) > 3u && num186 != 0)
					{
						frame.Y = 0;
						frameCounter = 0.0;
					}
					int num187 = 10;
					int num188 = 6;
					if (type == 633)
					{
						num187 = 0;
						num188 = 2;
					}
					int num189 = 0;
					num189 = ((!(frameCounter < (double)num187)) ? ((frameCounter < (double)(num187 + num188)) ? num166 : ((frameCounter < (double)(num187 + num188 * 2)) ? (num166 + 1) : ((frameCounter < (double)(num187 + num188 * 3)) ? (num166 + 2) : ((frameCounter < (double)(num187 + num188 * 4)) ? (num166 + 3) : 0)))) : 0);
					frame.Y = num * num189;
				}
				else if (ai[0] == 15f)
				{
					frameCounter += 1.0;
					int num190 = frame.Y / num;
					if ((uint)(num190 - num166) > 3u && num190 != 0)
					{
						frame.Y = 0;
						frameCounter = 0.0;
					}
					float num192 = ai[1] / (float)NPCID.Sets.AttackTime[type];
					int num193 = 0;
					num193 = ((num192 > 0.65f) ? num166 : ((num192 > 0.5f) ? (num166 + 1) : ((num192 > 0.35f) ? (num166 + 2) : ((num192 > 0f) ? (num166 + 3) : 0))));
					frame.Y = num * num193;
				}
				else if (ai[0] == 25f)
				{
					frame.Y = num;
				}
				else if (ai[0] == 12f)
				{
					frameCounter += 1.0;
					int num194 = frame.Y / num;
					if ((uint)(num194 - num166) > 4u && num194 != 0)
					{
						frame.Y = 0;
						frameCounter = 0.0;
					}
					int num195 = num166 + GetShootingFrame(ai[2]);
					frame.Y = num * num195;
				}
				else if (ai[0] == 14f || ai[0] == 24f)
				{
					frameCounter += 1.0;
					int num196 = frame.Y / num;
					if ((uint)(num196 - num166) > 1u && num196 != 0)
					{
						frame.Y = 0;
						frameCounter = 0.0;
					}
					int num197 = 12;
					int num198 = ((frameCounter % (double)num197 * 2.0 < (double)num197) ? num166 : (num166 + 1));
					frame.Y = num * num198;
					if (ai[0] == 24f)
					{
						if (frameCounter == 60.0)
						{
							EmoteBubble.NewBubble(87, new WorldUIAnchor((Entity)this), 60);
						}
						if (frameCounter == 150.0)
						{
							EmoteBubble.NewBubble(3, new WorldUIAnchor((Entity)this), 90);
						}
						if (frameCounter >= 240.0)
						{
							frame.Y = 0;
						}
					}
				}
				else if (ai[0] == 1001f)
				{
					frame.Y = num * (num166 - 1);
					frameCounter = 0.0;
				}
				else if (CanTalk && (ai[0] == 3f || ai[0] == 4f))
				{
					frameCounter += 1.0;
					int num199 = frame.Y / num;
					int num84 = num166 - num199;
					if ((uint)(num84 - 1) > 1u && (uint)(num84 - 4) > 1u && num199 != 0)
					{
						frame.Y = 0;
						frameCounter = 0.0;
					}
					bool flag4 = ai[0] == 3f;
					int num200 = 0;
					int num201 = 0;
					int num203 = -1;
					int num204 = -1;
					if (frameCounter < 10.0)
					{
						num200 = 0;
					}
					else if (frameCounter < 16.0)
					{
						num200 = num166 - 5;
					}
					else if (frameCounter < 46.0)
					{
						num200 = num166 - 4;
					}
					else if (frameCounter < 60.0)
					{
						num200 = num166 - 5;
					}
					else if (frameCounter < 216.0)
					{
						num200 = 0;
					}
					else if (frameCounter == 216.0 && Main.netMode != 1)
					{
						num203 = 70;
					}
					else if (frameCounter < 286.0)
					{
						num200 = ((frameCounter % 12.0 < 6.0) ? (num166 - 2) : 0);
					}
					else if (frameCounter < 320.0)
					{
						num200 = 0;
					}
					else if (frameCounter != 320.0 || Main.netMode == 1)
					{
						num200 = ((frameCounter < 420.0) ? ((frameCounter % 16.0 < 8.0) ? (num166 - 2) : 0) : 0);
					}
					else
					{
						num203 = 100;
					}
					if (frameCounter < 70.0)
					{
						num201 = 0;
					}
					else if (frameCounter != 70.0 || Main.netMode == 1)
					{
						num201 = ((!(frameCounter < 160.0)) ? ((frameCounter < 166.0) ? (num166 - 5) : ((frameCounter < 186.0) ? (num166 - 4) : ((frameCounter < 200.0) ? (num166 - 5) : ((!(frameCounter < 320.0)) ? ((frameCounter < 326.0) ? (num166 - 1) : 0) : 0)))) : ((frameCounter % 16.0 < 8.0) ? (num166 - 2) : 0));
					}
					else
					{
						num204 = 90;
					}
					if (flag4)
					{
						NPC nPC = Main.npc[(int)ai[2]];
						if (num203 != -1)
						{
							EmoteBubble.NewBubbleNPC(new WorldUIAnchor((Entity)this), num203, new WorldUIAnchor((Entity)nPC));
						}
						if (num204 != -1 && nPC.CanTalk)
						{
							EmoteBubble.NewBubbleNPC(new WorldUIAnchor((Entity)nPC), num204, new WorldUIAnchor((Entity)this));
						}
					}
					frame.Y = num * (flag4 ? num200 : num201);
					if (frameCounter >= 420.0)
					{
						frameCounter = 0.0;
					}
				}
				else if (CanTalk && (ai[0] == 16f || ai[0] == 17f))
				{
					frameCounter += 1.0;
					int num205 = frame.Y / num;
					int num85 = num166 - num205;
					if ((uint)(num85 - 1) > 1u && (uint)(num85 - 4) > 1u && num205 != 0)
					{
						frame.Y = 0;
						frameCounter = 0.0;
					}
					bool flag5 = ai[0] == 16f;
					int num206 = 0;
					int num207 = -1;
					if (frameCounter < 10.0)
					{
						num206 = 0;
					}
					else if (frameCounter < 16.0)
					{
						num206 = num166 - 5;
					}
					else if (frameCounter < 22.0)
					{
						num206 = num166 - 4;
					}
					else if (frameCounter < 28.0)
					{
						num206 = num166 - 5;
					}
					else if (frameCounter < 34.0)
					{
						num206 = num166 - 4;
					}
					else if (frameCounter < 40.0)
					{
						num206 = num166 - 5;
					}
					else if (frameCounter == 40.0 && Main.netMode != 1)
					{
						num207 = 45;
					}
					else if (frameCounter < 70.0)
					{
						num206 = num166 - 4;
					}
					else if (frameCounter < 76.0)
					{
						num206 = num166 - 5;
					}
					else if (frameCounter < 82.0)
					{
						num206 = num166 - 4;
					}
					else if (frameCounter < 88.0)
					{
						num206 = num166 - 5;
					}
					else if (frameCounter < 94.0)
					{
						num206 = num166 - 4;
					}
					else if (frameCounter < 100.0)
					{
						num206 = num166 - 5;
					}
					else if (frameCounter == 100.0 && Main.netMode != 1)
					{
						num207 = 45;
					}
					else if (frameCounter < 130.0)
					{
						num206 = num166 - 4;
					}
					else if (frameCounter < 136.0)
					{
						num206 = num166 - 5;
					}
					else if (frameCounter < 142.0)
					{
						num206 = num166 - 4;
					}
					else if (frameCounter < 148.0)
					{
						num206 = num166 - 5;
					}
					else if (frameCounter < 154.0)
					{
						num206 = num166 - 4;
					}
					else if (frameCounter < 160.0)
					{
						num206 = num166 - 5;
					}
					else if (frameCounter != 160.0 || Main.netMode == 1)
					{
						num206 = ((frameCounter < 220.0) ? (num166 - 4) : ((frameCounter < 226.0) ? (num166 - 5) : 0));
					}
					else
					{
						num207 = 75;
					}
					if (flag5 && num207 != -1)
					{
						int num208 = (int)localAI[2];
						int num209 = (int)localAI[3];
						int num210 = (int)Main.npc[(int)ai[2]].localAI[3];
						int num211 = (int)Main.npc[(int)ai[2]].localAI[2];
						int num212 = 3 - num208 - num209;
						int num214 = 0;
						if (frameCounter == 40.0)
						{
							num214 = 1;
						}
						if (frameCounter == 100.0)
						{
							num214 = 2;
						}
						if (frameCounter == 160.0)
						{
							num214 = 3;
						}
						int num215 = 3 - num214;
						int num216 = -1;
						int num217 = 0;
						while (num216 < 0)
						{
							num85 = num217 + 1;
							num217 = num85;
							if (num85 >= 100)
							{
								break;
							}
							num216 = Main.rand.Next(2);
							if (num216 == 0 && num211 >= num209)
							{
								num216 = -1;
							}
							if (num216 == 1 && num210 >= num208)
							{
								num216 = -1;
							}
							if (num216 == -1 && num215 <= num212)
							{
								num216 = 2;
							}
						}
						if (num216 == 0)
						{
							Main.npc[(int)ai[2]].localAI[3] += 1f;
							num210++;
						}
						if (num216 == 1)
						{
							Main.npc[(int)ai[2]].localAI[2] += 1f;
							num211++;
						}
						int num218 = Utils.SelectRandom<int>(Main.rand, 38, 37, 36);
						int num219 = num218;
						switch (num216)
						{
						case 0:
							switch (num218)
							{
							case 38:
								num219 = 37;
								break;
							case 37:
								num219 = 36;
								break;
							case 36:
								num219 = 38;
								break;
							}
							break;
						case 1:
							switch (num218)
							{
							case 38:
								num219 = 36;
								break;
							case 37:
								num219 = 38;
								break;
							case 36:
								num219 = 37;
								break;
							}
							break;
						}
						if (num215 == 0)
						{
							if (num210 >= 2)
							{
								num218 -= 3;
							}
							if (num211 >= 2)
							{
								num219 -= 3;
							}
						}
						EmoteBubble.NewBubble(num218, new WorldUIAnchor((Entity)this), num207);
						EmoteBubble.NewBubble(num219, new WorldUIAnchor((Entity)Main.npc[(int)ai[2]]), num207);
					}
					frame.Y = num * (flag5 ? num206 : num206);
					if (frameCounter >= 420.0)
					{
						frameCounter = 0.0;
					}
				}
				else if (velocity.X == 0f)
				{
					switch (type)
					{
					case 638:
					{
						int num220 = frame.Y / num;
						if (num220 > 7)
						{
							num220 = 0;
						}
						frameCounter += 1.0;
						if (frameCounter > 4.0)
						{
							frameCounter = 0.0;
							num220++;
							if (num220 > 7)
							{
								num220 = 0;
							}
						}
						frame.Y = num220 * num;
						break;
					}
					case 140:
					case 489:
						frame.Y = num;
						frameCounter = 0.0;
						break;
					default:
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
				}
				else
				{
					int num221 = 6;
					if (type == 632)
					{
						num221 = 12;
					}
					if (type == 534)
					{
						num221 = 12;
					}
					if (type == 638)
					{
						num221 = 12;
					}
					if (type == 656)
					{
						num221 = 12;
					}
					if (flag3)
					{
						num221 = 12;
					}
					if (type == 489)
					{
						num221 = 8;
						frameCounter += Math.Abs(velocity.X) * 1f;
						frameCounter += 0.5;
					}
					else
					{
						frameCounter += Math.Abs(velocity.X) * 2f;
						frameCounter += 1.0;
					}
					if (type == 462)
					{
						num221 = 9;
					}
					int num222 = num * 2;
					if (type == 638)
					{
						num222 = num * 9;
					}
					if (type == 656)
					{
						num222 = num;
					}
					if (flag3)
					{
						num222 = num;
					}
					if (frame.Y < num222)
					{
						frame.Y = num222;
					}
					if (frameCounter > (double)num221)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type] - num165)
					{
						frame.Y = num222;
					}
				}
				break;
			}
			if (type == 462)
			{
				frameCounter = 0.0;
				if (velocity.Y < 0f)
				{
					frame.Y = num;
				}
				else
				{
					frame.Y = num * 2;
				}
				break;
			}
			if (flag3)
			{
				spriteDirection = -direction;
				int num223 = frame.Y / num;
				if (velocity.Y < 0f)
				{
					if (num223 < 2 || num223 > 3)
					{
						num223 = 2;
						frameCounter = -1.0;
					}
					if ((frameCounter += 1.0) >= 4.0)
					{
						frameCounter = 0.0;
						num223++;
						if (num223 >= 3)
						{
							num223 = 3;
						}
					}
					frame.Y = num223 * num;
				}
				else if (velocity.Y > 0f)
				{
					if (num223 < 3 || num223 > 6)
					{
						num223 = 3;
						frameCounter = -1.0;
					}
					if ((frameCounter += 1.0) >= 4.0)
					{
						frameCounter = 0.0;
						num223++;
						if (num223 >= 6)
						{
							num223 = 6;
						}
					}
					frame.Y = num223 * num;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num;
			}
			if (type == 489 || type == 21 || type == 31 || type == 294 || type == 326 || type == 295 || type == 296 || type == 44 || type == 77 || type == 120 || type == 140 || type == 159 || type == 167 || type == 197 || type == 201 || type == 202)
			{
				frame.Y = 0;
			}
			if (type == 638)
			{
				frame.Y = num * 8;
			}
			break;
		}
		case 494:
		case 495:
			if (ai[2] > 0f)
			{
				if (ai[2] < 7f)
				{
					frame.Y = num * 5;
				}
				else if (ai[2] < 14f)
				{
					frame.Y = num * 6;
				}
				else if (ai[2] < 20f)
				{
					frame.Y = num * 7;
				}
				break;
			}
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
			}
			if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
			{
				frameCounter = 0.0;
				if (velocity.Y < 0f)
				{
					frame.Y = num * 2;
				}
				else
				{
					frame.Y = num * 3;
				}
				break;
			}
			if (velocity.X == 0f)
			{
				frameCounter = 0.0;
				frame.Y = 0;
				break;
			}
			frameCounter += Math.Abs(velocity.X);
			if (frameCounter < 8.0)
			{
				frame.Y = 0;
				break;
			}
			if (frameCounter < 16.0)
			{
				frame.Y = num;
				break;
			}
			if (frameCounter < 24.0)
			{
				frame.Y = num * 2;
				break;
			}
			if (frameCounter < 32.0)
			{
				frame.Y = num * 3;
				break;
			}
			if (frameCounter < 39.0)
			{
				frame.Y = num * 4;
				break;
			}
			frame.Y = num * 4;
			frameCounter = 0.0;
			break;
		case 541:
			if (ai[0] > 0f)
			{
				float num148 = ai[0];
				if (num148 < 6f)
				{
					frame.Y = num * 4;
				}
				else if (num148 < 105f)
				{
					frame.Y = num * (int)(num148 / 8f % 4f + 5f);
				}
				else if (num148 < 114f)
				{
					frame.Y = num * 9;
				}
				else if (num148 < 135f)
				{
					frame.Y = num * (int)((num148 - 99f - 15f) / 7f + 10f);
				}
				else
				{
					frame.Y = num;
				}
			}
			else
			{
				frameCounter = frameCounter + (double)(((Vector2)(ref velocity)).Length() * 0.1f) + 1.0;
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * 4)
				{
					frame.Y = 0;
				}
			}
			break;
		case 612:
		case 613:
		{
			if (IsABestiaryIconDummy)
			{
				frameCounter += 1.0;
				if (frameCounter > 50.0)
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				frame.Y = (int)Utils.WrappedLerp(0f, 4f, (float)frameCounter / 50f) * num;
				break;
			}
			bool flag9 = true;
			if (frame.Y == 0 && Main.rand.Next(180) != 0)
			{
				flag9 = false;
			}
			if (flag9)
			{
				frameCounter += 1.0;
			}
			if (velocity.X != 0f)
			{
				spriteDirection = Math.Sign(velocity.X);
			}
			int num270 = 10;
			bool flag10 = Math.Abs(velocity.X) > 1f;
			if (ai[1] == 1f)
			{
				frameCounter = 0.0;
				frame.Y = num * 4;
			}
			if (Math.Abs(velocity.Y) > 0.1f || flag10)
			{
				frameCounter = 0.0;
				frame.Y = num * 4;
			}
			else if (frame.Y == 0)
			{
				num270 = 2;
			}
			if (frame.Y == num * 4)
			{
				num270 = 60;
				if (!flag10)
				{
					num270 = 2;
				}
			}
			if (frameCounter >= (double)num270)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y / num >= 5)
				{
					frame.Y = 0;
				}
			}
			break;
		}
		case 583:
		case 584:
		case 585:
			rotation = velocity.X * 0.1f;
			if ((frameCounter += 1.0) >= 4.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
				if (frame.Y >= num * 4)
				{
					frame.Y = 0;
				}
			}
			break;
		case 498:
		case 499:
		case 500:
		case 501:
		case 502:
		case 503:
		case 504:
		case 505:
		case 506:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (ai[2] > 0f)
				{
					spriteDirection = direction;
					if (ai[1] < 12f)
					{
						frame.Y = num * 8;
					}
					else if (ai[1] < 34f)
					{
						frame.Y = num * 9;
					}
					else
					{
						frame.Y = num * 8;
					}
					frameCounter = 0.0;
					break;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					break;
				}
				frameCounter += Math.Abs(velocity.X) * 1f;
				if (frameCounter > 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 7)
				{
					frame.Y = 0;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num * 10;
			}
			break;
		case 524:
		case 525:
		case 526:
		case 527:
			if (velocity.Y == 0f)
			{
				if (direction != 0)
				{
					spriteDirection = direction;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				if (frame.Y <= num)
				{
					frame.Y = num * 2;
				}
				frameCounter += Math.Abs(velocity.X);
				frameCounter += 1.0;
				if (frameCounter > 9.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = num * 2;
				}
			}
			else
			{
				frame.Y = num;
				frameCounter = 0.0;
			}
			break;
		case 528:
		case 529:
			if (velocity.Y == 0f)
			{
				if (direction != 0)
				{
					spriteDirection = direction;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				frameCounter += 1.0;
				if (frameCounter > 9.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type] - 1)
				{
					frame.Y = num;
				}
			}
			else
			{
				frame.Y = num * (Main.npcFrameCount[type] - 1);
				frameCounter = 0.0;
			}
			break;
		case 533:
			if (velocity.Y == 0f && direction != 0)
			{
				spriteDirection = direction;
			}
			frameCounter += 1.0;
			if (frameCounter >= 48.0)
			{
				frameCounter = 0.0;
			}
			frame.Y = (int)(frameCounter / 6.0) * num;
			if (ai[1] > 0f)
			{
				frame.Y += num * 8;
			}
			break;
		case 496:
		case 497:
			if (ai[0] == 0f)
			{
				rotation = 0f;
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0.0;
				}
				frameCounter += Math.Abs(velocity.X) * 1.1f;
				if (frameCounter < 6.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 18.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 24.0)
				{
					frame.Y = num * 3;
				}
				else
				{
					frameCounter = 0.0;
				}
			}
			else if (ai[0] == 1f)
			{
				frameCounter = 0.0;
				if (ai[1] < 10f)
				{
					frame.Y = num * 4;
				}
				else if (ai[1] < 20f)
				{
					frame.Y = num * 5;
				}
				else
				{
					frame.Y = num * 6;
				}
			}
			else if (ai[0] == 5f)
			{
				frameCounter = 0.0;
				if (ai[1] < 10f)
				{
					frame.Y = num * 10;
				}
				else if (ai[1] < 20f)
				{
					frame.Y = num * 11;
				}
				else
				{
					frame.Y = num * 3;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num * 7;
			}
			break;
		case 508:
		case 532:
		case 580:
		case 582:
			if (velocity.Y != 0f)
			{
				frame.Y = num;
				break;
			}
			if (velocity.X == 0f)
			{
				frame.Y = 0;
				break;
			}
			if (direction < 0 && velocity.X < 0f)
			{
				spriteDirection = -1;
			}
			if (direction > 0 && velocity.X > 0f)
			{
				spriteDirection = 1;
			}
			if (frame.Y / num < 2)
			{
				frame.Y = num * 2;
			}
			frameCounter += 1f + Math.Abs(velocity.X) / 2f;
			if (frameCounter > 6.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y / num >= Main.npcFrameCount[type])
			{
				frame.Y = num * 2;
			}
			break;
		case 509:
		case 581:
			if ((velocity.X > 0f && direction > 0) || (velocity.X < 0f && direction < 0))
			{
				spriteDirection = direction;
			}
			if ((frameCounter += 1.0) >= 3.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			break;
		case 415:
			if (ai[2] < 0f)
			{
				if (frame.Y / num != 8 && frame.Y / num != 9 && frame.Y / num != 0)
				{
					frameCounter = 0.0;
				}
				frameCounter += 1.0;
				int num72 = 0;
				int num73 = 18;
				int num74 = 4;
				if (frameCounter > (double)(num73 - num74 * 2))
				{
					num72 = 8 + (int)frameCounter / 4 % 2;
				}
				if (frameCounter > (double)(num73 + num74 * 6))
				{
					num72 = 0;
					frameCounter = 0.0;
				}
				frame.Y = num * num72;
			}
			else if (velocity.Y == 0f)
			{
				if (direction != 0)
				{
					spriteDirection = direction;
				}
				if (frame.Y < num * 2)
				{
					frame.Y = num * 2;
				}
				frameCounter += Math.Abs(velocity.X) * 0.5f;
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type] - 2)
				{
					frame.Y = num * 2;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num;
			}
			break;
		case 416:
			if (IsABestiaryIconDummy)
			{
				frameCounter += 1.0;
				if (frameCounter > 5.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y < num * 2 || frame.Y > num * 7)
				{
					frame.Y = num * 2;
				}
			}
			else if (Main.netMode != 2 && !Main.dedServ)
			{
				int num265 = (int)ai[0];
				if (Main.npc[num265].active && Main.npc[num265].type == 415 && TextureAssets.Npc[415].IsLoaded)
				{
					frame.Y = Main.npc[num265].frame.Y / (TextureAssets.Npc[415].Height() / Main.npcFrameCount[415]) * num;
				}
			}
			break;
		case 417:
			if (ai[0] == 0f)
			{
				rotation = 0f;
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0.0;
				}
				frameCounter += Math.Abs(velocity.X) * 1.1f;
				frame.Y = (int)(frameCounter / 6.0) * num;
				if (frameCounter >= 48.0)
				{
					frameCounter = 0.0;
				}
			}
			else if (ai[0] == 1f)
			{
				frameCounter = 0.0;
				frame.Y = num * (9 + (int)(ai[1] / 6f));
			}
			else if (ai[0] == 5f)
			{
				frameCounter = 0.0;
				frame.Y = num * (13 - (int)(ai[1] / 6f));
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num * 14;
			}
			break;
		case 518:
			if (velocity.Y == 0f)
			{
				if (direction != 0)
				{
					spriteDirection = direction;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				if (frame.Y < num * 2)
				{
					frame.Y = num * 2;
				}
				frameCounter += Math.Abs(velocity.X) * 1f;
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = num * 2;
				}
			}
			else
			{
				frame.Y = num;
				frameCounter = 0.0;
			}
			break;
		case 419:
			if (ai[2] < 0f)
			{
				int num263 = 1;
				if (direction != 0)
				{
					spriteDirection = direction;
				}
				if (frame.Y / num >= 9)
				{
					frame.Y = num * 2;
					frameCounter = 0.0;
				}
				if (frame.Y / num < 2)
				{
					frame.Y = num * 2;
					frameCounter = 0.0;
				}
				frameCounter += 1.0;
				if (frameCounter >= (double)(num263 * 4 + 6))
				{
					frameCounter = 8.0;
				}
				if (frameCounter < 6.0)
				{
					frame.Y = num * (int)(2.0 + frameCounter / 3.0);
				}
				else
				{
					frame.Y = num * (int)(4.0 + (frameCounter - 6.0) / (double)num263);
				}
			}
			else if (velocity.Y == 0f)
			{
				if (direction != 0)
				{
					spriteDirection = direction;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				frameCounter += Math.Abs(velocity.X) * 1f;
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = num * 9;
				}
				if (frame.Y / num < 9)
				{
					frame.Y = num * 9;
				}
			}
			else
			{
				frame.Y = num;
				frameCounter = 0.0;
			}
			break;
		case 425:
			if (direction != 0)
			{
				spriteDirection = -direction;
			}
			if (ai[2] == 1f)
			{
				frameCounter += 1.0;
				if (frameCounter >= 3.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 12 || frame.Y < num * 10)
				{
					frame.Y = num * 10;
				}
			}
			else if (velocity.Y != 0f)
			{
				frameCounter = 0.0;
				frame.Y = num;
			}
			else if (velocity.X == 0f)
			{
				frameCounter = 0.0;
				frame.Y = 0;
			}
			else
			{
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 9 || frame.Y < num * 2)
				{
					frame.Y = num * 2;
				}
			}
			break;
		case 427:
			if (direction != 0)
			{
				spriteDirection = direction;
			}
			if (velocity.Y != 0f)
			{
				frameCounter += 1.0;
				if (frameCounter >= 2.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * 9 || frame.Y < num * 6)
				{
					frame.Y = num * 6;
				}
			}
			else if (velocity.X == 0f)
			{
				frameCounter = 0.0;
				frame.Y = 0;
			}
			else
			{
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 5 || frame.Y < num)
				{
					frame.Y = num;
				}
			}
			break;
		case 426:
			if (direction != 0)
			{
				spriteDirection = direction;
			}
			if (ai[1] >= 45f)
			{
				if (velocity.Y == 0f)
				{
					frame.Y = num * 8;
					break;
				}
				frameCounter += 1.0;
				if (frameCounter >= 2.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * 15 || frame.Y < num * 12)
				{
					frame.Y = num * 12;
				}
			}
			else if (velocity.Y != 0f)
			{
				frameCounter += 1.0;
				if (frameCounter >= 2.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * 12 || frame.Y < num * 9)
				{
					frame.Y = num * 9;
				}
			}
			else if (velocity.X == 0f)
			{
				frameCounter = 0.0;
				frame.Y = 0;
			}
			else
			{
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 10.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 7 || frame.Y < num)
				{
					frame.Y = num;
				}
			}
			break;
		case 429:
			if (velocity.Y == 0f)
			{
				if (direction != 0)
				{
					spriteDirection = direction;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				if (frame.Y < num * 2)
				{
					frame.Y = num * 2;
				}
				frameCounter += Math.Abs(velocity.X) * 1f;
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = num * 2;
				}
			}
			else
			{
				frame.Y = num;
				frameCounter = 0.0;
			}
			break;
		case 428:
			if (velocity.Y == 0f)
			{
				if (direction != 0)
				{
					spriteDirection = direction;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				frameCounter += Math.Abs(velocity.X) * 1f;
				if ((frameCounter += 1.0) > 10.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type] - 1)
				{
					frame.Y = 0;
				}
			}
			else if (frame.Y / num != 4)
			{
				if (frameCounter > 0.0)
				{
					frameCounter = 0.0;
				}
				if ((frameCounter -= 1.0) < -10.0 || velocity.Y > 0.6f)
				{
					frame.Y = num * 4;
					frameCounter = 0.0;
				}
			}
			break;
		case 423:
			if (ai[2] == 1f)
			{
				int num162 = 2;
				if (ai[1] >= 30f && ai[1] < 45f)
				{
					num162 = 3;
				}
				frame.Y = num162 * num;
				break;
			}
			if (velocity.Y != 0f)
			{
				frame.Y = num;
				break;
			}
			if (velocity.X == 0f)
			{
				frame.Y = 0;
				break;
			}
			if (velocity.X != 0f)
			{
				spriteDirection = Math.Sign(0f - velocity.X);
			}
			if (frame.Y / num < 4)
			{
				frame.Y = num * 4;
			}
			frameCounter += 1f + Math.Abs(velocity.X) / 2f;
			if (frameCounter > 6.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y / num >= Main.npcFrameCount[type])
			{
				frame.Y = num * 4;
			}
			break;
		case 421:
			if (ai[0] == 5f)
			{
				frameCounter += 1.0;
			}
			if ((frameCounter += 1.0) >= 5.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			break;
		case 424:
			if (velocity.Y == 0f)
			{
				if (direction != 0)
				{
					spriteDirection = -direction;
				}
				if (ai[2] > 0f)
				{
					frame.Y = num * ((ai[1] > 90f) ? (Main.npcFrameCount[type] - 2) : (Main.npcFrameCount[type] - 1));
					frameCounter = 0.0;
					break;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					break;
				}
				if (frame.Y < num * 2)
				{
					frame.Y = num * 2;
				}
				frameCounter += Math.Abs(velocity.X) * 2f;
				frameCounter += velocity.X * 1.3f;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type] - 2)
				{
					frame.Y = num * 2;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num;
			}
			break;
		case 420:
			if ((frameCounter += 1.0) >= 5.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			break;
		case 411:
			if (ai[1] >= 120f && ai[1] < 240f)
			{
				spriteDirection = -direction;
				frame.Y = num * (Main.npcFrameCount[type] - 1);
				frameCounter = 0.0;
			}
			else if (velocity.Y == 0f)
			{
				if (direction != 0)
				{
					spriteDirection = -direction;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				if (frame.Y < num * 2)
				{
					frame.Y = num * 2;
				}
				frameCounter += Math.Abs(velocity.X) * 1f;
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type] - 1)
				{
					frame.Y = num * 2;
				}
			}
			else
			{
				frame.Y = num;
				frameCounter = 0.0;
			}
			break;
		case 409:
			if (velocity.Y == 0f && ai[1] <= 30f && ai[1] > 0f)
			{
				frame.Y = num * (Main.npcFrameCount[type] - 1);
				frameCounter = 0.0;
				break;
			}
			if (velocity.Y == 0f)
			{
				spriteDirection = direction;
			}
			if ((frameCounter += 1.0) >= 6.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y / num >= Main.npcFrameCount[type] - 2)
				{
					frame.Y = 0;
				}
			}
			break;
		case 410:
			frameCounter += Math.Abs(velocity.X);
			if (frameCounter >= 10.0)
			{
				frameCounter -= 10.0;
				frame.Y += num;
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			break;
		case 407:
			if ((frameCounter += 1.0) >= 6.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			break;
		case 405:
		case 406:
			if ((frameCounter += 1.0) >= 4.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			break;
		case 516:
			if (localAI[1] == 0f)
			{
				localAI[1] = 1f;
				frame.Y = num * Main.rand.Next(3);
				frameCounter += Main.rand.Next(3);
			}
			frameCounter += 1.0;
			if (frameCounter > 3.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y > num * 3)
				{
					frame.Y = 0;
				}
			}
			break;
		case 418:
			if (ai[0] == 0f || ai[0] == 1f || ai[0] == -1f)
			{
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y > num * 4)
				{
					frame.Y = 0;
				}
			}
			else if (ai[0] == 2f)
			{
				if (ai[1] < 10f)
				{
					frame.Y = num * 5;
				}
				else if (ai[1] < 20f)
				{
					frame.Y = num * 6;
				}
				else
				{
					frame.Y = num * 7;
				}
			}
			else if (ai[0] == -2f)
			{
				frameCounter += 1.0;
				if (frameCounter > 12.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y > num * 7)
				{
					frame.Y = num * 5;
				}
			}
			break;
		case 302:
		case 304:
			spriteDirection = direction;
			goto case 1;
		case 1:
		case 16:
		case 59:
		case 71:
		case 81:
		case 138:
		case 147:
		case 183:
		case 184:
		case 204:
		case 225:
		case 333:
		case 334:
		case 335:
		case 336:
		case 535:
		case 537:
		case 658:
		case 659:
		case 667:
		case 676:
			frameCounter += 1.0;
			if (num124 > 0)
			{
				frameCounter += 1.0;
			}
			if (num124 == 4)
			{
				frameCounter += 1.0;
			}
			if (frameCounter >= 8.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y >= num * Main.npcFrameCount[type])
			{
				frame.Y = 0;
			}
			break;
		case 488:
		{
			int num103 = (int)localAI[1];
			if (Framing.GetTileSafely((int)ai[0], (int)ai[1]).frameX >= 36)
			{
				num103 *= -1;
			}
			if (localAI[0] > 24f)
			{
				localAI[0] = 24f;
			}
			if (localAI[0] > 0f)
			{
				localAI[0] -= 1f;
			}
			if (localAI[0] < 0f)
			{
				localAI[0] = 0f;
			}
			int num104 = ((num103 == -1) ? 4 : 6);
			int num105 = (int)localAI[0] / num104;
			if (localAI[0] % (float)num104 != 0f)
			{
				num105++;
			}
			if (num105 != 0 && num103 == 1)
			{
				num105 += 5;
			}
			frame.Y = num105 * num;
			break;
		}
		case 430:
		case 431:
		case 432:
		case 433:
		case 434:
		case 435:
		case 436:
		case 591:
			if (ai[2] > 0f)
			{
				if (ai[2] < 5f)
				{
					frame.Y = num * 3;
				}
				else if (ai[2] < 10f)
				{
					frame.Y = num * 4;
				}
				else if (ai[2] < 15f)
				{
					frame.Y = num * 5;
				}
				else
				{
					frame.Y = num * 6;
				}
				break;
			}
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
			}
			if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
			{
				frameCounter = 0.0;
				frame.Y = num * 2;
				break;
			}
			if (velocity.X == 0f)
			{
				frameCounter = 0.0;
				frame.Y = 0;
				break;
			}
			frameCounter += Math.Abs(velocity.X);
			if (frameCounter < 8.0)
			{
				frame.Y = 0;
			}
			else if (frameCounter < 16.0)
			{
				frame.Y = num;
			}
			else if (frameCounter < 24.0)
			{
				frame.Y = num * 2;
			}
			else if (frameCounter < 32.0)
			{
				frame.Y = num;
			}
			else
			{
				frameCounter = 0.0;
			}
			break;
		case 454:
		{
			int num69 = (int)(frameCounter / 2.0);
			frame.Y = num * num69;
			break;
		}
		case 377:
		case 446:
			if (IsABestiaryIconDummy)
			{
				frameCounter += 1.0;
				if (frameCounter > 4.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y > num)
				{
					frame.Y = 0;
				}
			}
			else if (velocity.Y != 0f)
			{
				frame.Y = num;
			}
			else
			{
				frame.Y = 0;
			}
			spriteDirection = direction;
			break;
		case 378:
		{
			if (velocity.Y != 0f && frame.Y < num * 2)
			{
				frame.Y += num * 2;
			}
			if (velocity.Y == 0f && frame.Y > num * 2)
			{
				frame.Y -= num * 2;
			}
			frameCounter += 1.0;
			int num157 = 6;
			if (frameCounter >= (double)num157)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (velocity.Y != 0f && frame.Y >= num * 4)
				{
					frame.Y = num * 2;
				}
				if (velocity.Y == 0f && frame.Y >= num * 2)
				{
					frame.Y = 0;
				}
			}
			break;
		}
		case 376:
			frameCounter += 1.0;
			if (frameCounter > 30.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y >= num * 2)
				{
					frame.Y = 0;
				}
			}
			break;
		case 589:
		{
			int num275 = frame.Y / num;
			frameCounter += 1.0;
			if (velocity.Y != 0f)
			{
				frame.Y = 0;
				frameCounter = 0.0;
			}
			if (num275 >= 12)
			{
				if (frameCounter > 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y >= num * Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
			}
			else if (num275 >= 11)
			{
				if (frameCounter > (double)Main.rand.Next(40, 140))
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
			}
			else if (num275 >= 8)
			{
				if (!(frameCounter > 3.0))
				{
					break;
				}
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y == num * 9)
				{
					Vector2 vector = position;
					vector.Y += height - 6;
					if (direction == 1)
					{
						vector.X += 30f;
					}
					else
					{
						vector.X -= 22f;
					}
					for (int j = 0; j < 4; j++)
					{
						Dust.NewDust(vector, 1, 1, 32);
					}
				}
			}
			else if (num275 >= 7)
			{
				if (frameCounter > (double)Main.rand.Next(30, 90))
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
			}
			else if (num275 >= 4)
			{
				if (frameCounter > 4.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
			}
			else if (num275 >= 1)
			{
				if (frameCounter > 4.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y >= num * 4 && Main.rand.Next(3) != 0)
					{
						frame.Y = 0;
					}
				}
			}
			else if (frameCounter > (double)Main.rand.Next(90, 450))
			{
				frameCounter = 0.0;
				frame.Y += num;
			}
			break;
		}
		case 375:
			frameCounter += 1.0;
			if (frameCounter > 4.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y >= num * 4)
				{
					frame.Y = 0;
				}
			}
			break;
		case 374:
			localAI[0] = -2f;
			if (velocity.Y == 0f)
			{
				rotation = 0f;
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y >= num * 4)
					{
						frame.Y = num;
					}
				}
				break;
			}
			rotation += (float)direction * 0.1f;
			frameCounter += 1.0;
			if (frameCounter > 3.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y >= num * 4)
				{
					frame.Y = num;
				}
			}
			break;
		case 492:
			frame.Y = num * (int)ai[2];
			break;
		case 473:
		case 474:
		case 475:
		case 476:
			if (velocity.Y == 0f)
			{
				spriteDirection = direction;
			}
			if (ai[0] == 0f || ai[0] == 7f)
			{
				rotation = 0f;
				frameCounter = 0.0;
				frame.Y = 0;
			}
			else if (ai[0] == 1f)
			{
				rotation = 0f;
				frameCounter = 0.0;
				int num284 = 6;
				if (ai[1] < (float)num284)
				{
					frame.Y = num;
				}
				else if (ai[1] < (float)(num284 * 2))
				{
					frame.Y = num * 2;
				}
				else if (ai[1] < (float)(num284 * 3))
				{
					frame.Y = num * 3;
				}
				else if (ai[1] < (float)(num284 * 4))
				{
					frame.Y = num * 4;
				}
				else if (ai[1] < (float)(num284 * 5))
				{
					frame.Y = num * 5;
				}
				else
				{
					frame.Y = num * 6;
				}
			}
			else if (ai[0] == 8f)
			{
				rotation = 0f;
				frameCounter += 1.0;
				if (frameCounter >= 24.0)
				{
					frameCounter = 0.0;
				}
				frame.Y = num * Math.Min(6, Math.Max(3, 3 + (int)frameCounter / 6));
			}
			else if (ai[0] == 2f || ai[0] == 6f)
			{
				rotation = 0f;
				if (velocity.Y == 0f)
				{
					int num285 = 6;
					frameCounter += 1.0;
					if (frame.Y < num * 7)
					{
						frame.Y = num * 12;
					}
					if (frame.Y < num * 10)
					{
						if (frameCounter > 8.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
							if (frame.Y == num * 10)
							{
								frameCounter = num285 * 2;
							}
						}
					}
					else if (frameCounter < (double)num285)
					{
						frame.Y = num * 12;
					}
					else if (frameCounter < (double)(num285 * 2))
					{
						frame.Y = num * 11;
					}
					else if (frameCounter < (double)(num285 * 3))
					{
						frame.Y = num * 10;
					}
					else
					{
						frame.Y = num * 11;
						if (frameCounter >= (double)(num285 * 4 - 1))
						{
							frameCounter = 0.0;
						}
					}
				}
				else
				{
					frame.Y = num * 13;
					frameCounter = 0.0;
				}
			}
			else if (ai[0] == 3f)
			{
				rotation = 0f;
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frameCounter = 0.0;
					if (frame.Y > num * 7)
					{
						frame.Y -= num;
					}
				}
			}
			else if (ai[0] == 4f || ai[0] == 5f)
			{
				if (ai[0] == 4f && ai[2] == 1f)
				{
					rotation = 0f;
				}
				frame.Y = num * 13;
				frameCounter = 0.0;
			}
			else
			{
				if (ai[0] != 4.1f)
				{
					break;
				}
				rotation = 0f;
				if (frame.Y > num * 6)
				{
					frameCounter = 0.0;
				}
				frameCounter += 1.0;
				int num286 = 4;
				if (frameCounter < (double)num286)
				{
					frame.Y = num * 6;
					break;
				}
				if (frameCounter < (double)(num286 * 2))
				{
					frame.Y = num * 5;
					break;
				}
				if (frameCounter < (double)(num286 * 3))
				{
					frame.Y = num * 4;
					break;
				}
				if (frameCounter < (double)(num286 * 4))
				{
					frame.Y = num * 3;
					break;
				}
				if (frameCounter < (double)(num286 * 5))
				{
					frame.Y = num * 4;
					break;
				}
				frame.Y = num * 5;
				if (frameCounter >= (double)(num286 * 6 - 1))
				{
					frameCounter = 0.0;
				}
			}
			break;
		case 477:
			frameCounter += ((Vector2)(ref velocity)).Length() / 4f;
			frameCounter += 1.0;
			if (frameCounter >= 6.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
			}
			if (frame.Y / num > 5)
			{
				frame.Y = 0;
			}
			break;
		case 479:
		{
			frameCounter += 1.0;
			int num264 = 4;
			if (frameCounter < (double)num264)
			{
				frame.Y = 0;
			}
			else if (frameCounter < (double)(num264 * 2))
			{
				frame.Y = num;
			}
			else if (frameCounter < (double)(num264 * 3))
			{
				frame.Y = num * 2;
			}
			else if (frameCounter < (double)(num264 * 4 - 1))
			{
				frame.Y = num;
			}
			else
			{
				frameCounter = 0.0;
			}
			break;
		}
		case 472:
			if (velocity.X < 0f)
			{
				direction = -1;
			}
			else
			{
				direction = 1;
			}
			if (direction == 1)
			{
				spriteDirection = 1;
			}
			if (direction == -1)
			{
				spriteDirection = -1;
			}
			rotation = (float)Math.Atan2(velocity.Y * (float)direction, velocity.X * (float)direction);
			frameCounter += 1.0;
			if (frameCounter > 4.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y / num >= 6)
			{
				frame.Y = 0;
			}
			break;
		case 449:
		case 450:
		case 451:
		case 452:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (ai[2] > 0f)
				{
					spriteDirection = direction;
					int num99 = 0;
					int num100 = Main.npcFrameCount[type] - 5;
					int num101 = 7;
					num99 = ((ai[1] >= 50f) ? 1 : ((ai[1] >= (float)(50 - num101)) ? 2 : ((ai[1] >= (float)(50 - num101 * 2)) ? 3 : ((ai[1] >= (float)(50 - num101 * 3)) ? 4 : 0))));
					frame.Y = num * (num100 + num99);
					frameCounter = 0.0;
					break;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					break;
				}
				if (frame.Y < num * 2)
				{
					frame.Y = num * 2;
				}
				if (frame.Y < num * 2)
				{
					frame.Y = num * 2;
				}
				frameCounter += Math.Abs(velocity.X) * 2f;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= 15)
				{
					frame.Y = num * 2;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num;
			}
			break;
		case 481:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (ai[2] > 0f)
				{
					spriteDirection = direction;
					int num271 = 0;
					if (ai[1] < 22f)
					{
						num271 = -14;
					}
					else if (ai[1] < 28f)
					{
						num271 = 3;
					}
					else if (ai[1] < 34f)
					{
						num271 = 2;
					}
					else if (ai[1] < 40f)
					{
						num271 = 1;
					}
					frame.Y = num * (15 + num271);
					frameCounter = 0.0;
				}
				else if (velocity.X == 0f)
				{
					frame.Y = num;
				}
				else
				{
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= 15)
					{
						frame.Y = num * 2;
					}
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = 0;
			}
			break;
		case 468:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (ai[2] > 0f)
				{
					spriteDirection = direction;
					int num245 = 0;
					if (ai[1] < 22f)
					{
						num245 = -15;
					}
					else if (ai[1] < 28f)
					{
						num245 = 3;
					}
					else if (ai[1] < 34f)
					{
						num245 = 2;
					}
					else if (ai[1] < 40f)
					{
						num245 = 1;
					}
					frame.Y = num * (15 + num245);
					frameCounter = 0.0;
				}
				else if (velocity.X == 0f)
				{
					frame.Y = 0;
				}
				else
				{
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= 15)
					{
						frame.Y = num * 2;
					}
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num;
			}
			break;
		case 379:
		case 380:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (ai[2] > 0f)
				{
					spriteDirection = direction;
					frame.Y = num * ((int)ai[2] - 1 + 2);
					frameCounter = 0.0;
					break;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					break;
				}
				if (frame.Y < num * 7)
				{
					frame.Y = num * 7;
				}
				frameCounter += Math.Abs(velocity.X) * 2f;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = num * 7;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num;
			}
			break;
		case 381:
		case 382:
		case 383:
		case 385:
		case 389:
			if (velocity.Y == 0f)
			{
				spriteDirection = direction;
				if (frame.Y < num * 2)
				{
					frame.Y = num * 2;
				}
				if (type == 389 || type == 385)
				{
					frameCounter += (double)Math.Abs(velocity.X) * 1.2;
				}
				else
				{
					frameCounter += Math.Abs(velocity.X) * 2f;
				}
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = num * 2;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num;
			}
			break;
		case 387:
			if (ai[0] > 0f)
			{
				frameCounter += 1.0;
				if (ai[0] >= 20f)
				{
					frameCounter += 1.0;
				}
				if (ai[0] >= 40f)
				{
					frameCounter += 1.0;
				}
				if (frameCounter >= 10.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y >= num * 2)
					{
						frame.Y = 0;
					}
				}
				break;
			}
			frameCounter += 1.0;
			if (frameCounter >= 15.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y >= num * 2)
				{
					frame.Y = 0;
				}
			}
			break;
		case 386:
			if (ai[2] > 0f)
			{
				int num274 = (int)ai[2] / 12;
				frame.Y = num * (9 + num274 % 2);
			}
			else if (velocity.Y == 0f)
			{
				spriteDirection = direction;
				if (frame.Y < num * 2)
				{
					frame.Y = num * 2;
				}
				frameCounter += Math.Abs(velocity.X) * 2f;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= 9)
				{
					frame.Y = num * 2;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num;
			}
			break;
		case 388:
		{
			frameCounter += 1.0;
			int num266 = 6;
			if (frameCounter >= (double)num266)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y >= num * 2)
				{
					frame.Y = 0;
				}
			}
			break;
		}
		case 391:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = -1;
				}
				if (direction == -1)
				{
					spriteDirection = 1;
				}
				if (frame.Y < num)
				{
					frame.Y = num;
				}
				frameCounter += Math.Abs(velocity.X) * 0.5f;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = num;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = 0;
			}
			break;
		case 390:
			if (IsABestiaryIconDummy)
			{
				frameCounter += Math.Abs(velocity.X) * 0.5f;
				if (frameCounter > 6.0)
				{
					frameCounter = 0.0;
					localAI[3] += 1f;
					if (localAI[3] >= (float)Main.npcFrameCount[391])
					{
						localAI[3] = 0f;
					}
				}
			}
			if (direction != 0)
			{
				spriteDirection = -direction;
			}
			if (ai[2] > 0f)
			{
				frame.Y = num * ((int)ai[2] - 1);
			}
			else
			{
				frame.Y = num * 2;
			}
			break;
		case 393:
		{
			int num93 = 0;
			Vector2 vector2 = ai[2].ToRotationVector2();
			num93 = ((vector2.Y > Math.Abs(vector2.X) * 2f) ? 4 : ((!(vector2.Y > Math.Abs(vector2.X) * 1.5f)) ? ((!(Math.Abs(vector2.X) > vector2.Y * 2f)) ? ((Math.Abs(vector2.X) > vector2.Y * 1.5f) ? ((!(vector2.X > 0f)) ? 1 : 7) : ((vector2.X > 0f) ? 6 : 2)) : ((vector2.X > 0f) ? 8 : 0)) : ((vector2.X > 0f) ? 5 : 3)));
			frame.Y = num * num93;
			float num94 = 280f;
			float num95 = 140f;
			if (ai[3] >= num94 && ai[3] < num94 + num95 && (int)ai[3] % 6 <= 2)
			{
				frame.Y += num * 9;
			}
			break;
		}
		case 394:
		{
			int num75 = (int)ai[3] - 300;
			if (num75 >= 120)
			{
				num75 -= 120;
				if (num75 >= 160)
				{
					frame.Y = num * (7 - (num75 - 160) / 5);
				}
				else if (num75 >= 20)
				{
					frame.Y = num * (num75 / 4 % 4);
				}
				else
				{
					frame.Y = num * (4 + num75 / 5);
				}
			}
			else
			{
				frame.Y = num * 4;
			}
			break;
		}
		case 395:
		{
			float num65 = 20f;
			float num66 = 240f;
			bool flag13 = ai[3] >= num65 && ai[3] < num65 + num66;
			frameCounter += 1.0;
			if (frameCounter >= 66.0)
			{
				frameCounter = 0.0;
			}
			if (flag13)
			{
				frameCounter += 1.0;
				if (frameCounter >= 54.0 || frameCounter < 36.0)
				{
					frameCounter = 36.0;
				}
			}
			int num67 = (int)frameCounter % 66;
			num67 /= 6;
			frame.Y = num * num67;
			break;
		}
		case 392:
		{
			float num288 = 20f;
			float num289 = 240f;
			bool flag12 = ai[3] >= num288 && ai[3] < num288 + num289;
			frameCounter += 1.0;
			if (flag12)
			{
				frameCounter += 1.0;
			}
			if (frameCounter >= 12.0)
			{
				frameCounter = 0.0;
			}
			int num290 = (int)frameCounter % 12;
			num290 /= 3;
			frame.Y = num * num290;
			break;
		}
		case 399:
			frameCounter = (frameCounter + 0.25) % 4.0 + (double)((ai[0] != 0f) ? 4 : 0);
			frame.Y = num * (int)frameCounter;
			break;
		case 520:
			if (velocity.Y == 0f)
			{
				spriteDirection = direction;
				frameCounter += Math.Abs(velocity.X) * 1f;
				if (frameCounter > 6.0)
				{
					if (Math.Abs(velocity.X) < 0.2f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
					}
					else
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = num;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num;
			}
			break;
		case 398:
		{
			if (ai[0] <= 0f)
			{
				frame.Y = 0;
				break;
			}
			if (frame.Y == 0)
			{
				Gore.NewGore(position + new Vector2(-10f, -15f), velocity, 619);
				Gore.NewGore(position + new Vector2(10f, -15f), velocity, 620);
				Gore.NewGore(position + new Vector2(-10f, 15f), velocity, 621);
				Gore.NewGore(position + new Vector2(10f, 15f), velocity, 622);
				for (int i = 0; i < 50; i++)
				{
					frame.Y = num;
					Dust.NewDust(position, width, height, 209);
				}
			}
			frameCounter += 1.0;
			if (frameCounter >= 30.0)
			{
				frameCounter = 6.0;
			}
			int num269 = (int)frameCounter % 30;
			num269 /= 6;
			frame.Y = num * num269;
			break;
		}
		case 397:
		{
			int num249 = (int)frameCounter / 7;
			frame.Y = num * num249;
			break;
		}
		case 400:
		{
			frameCounter += 1.0;
			if (ai[0] == 0f || ai[0] == 3f)
			{
				frameCounter += 1.0;
			}
			if (frameCounter >= 16.0)
			{
				frameCounter = 0.0;
			}
			int num250 = (int)frameCounter % 16;
			num250 /= 4;
			frame.Y = num * num250;
			break;
		}
		case 437:
		{
			frameCounter += 1.0;
			if (frameCounter >= 20.0)
			{
				frameCounter = 0.0;
			}
			int num243 = (int)frameCounter % 20;
			num243 /= 5;
			frame.Y = num * num243;
			break;
		}
		case 438:
		{
			frameCounter += 1.0;
			if (ai[1] == 1f)
			{
				frameCounter += 1.0;
			}
			if (frameCounter >= 49.0)
			{
				frameCounter = 0.0;
			}
			int num164 = (int)frameCounter % 49;
			num164 /= 7;
			if (num164 >= 4)
			{
				num164 = 6 - num164;
			}
			frame.Y = num * num164;
			break;
		}
		case 439:
		case 440:
		{
			int num244 = (int)localAI[2];
			if (IsABestiaryIconDummy)
			{
				if (frameCounter > 5.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y < num * 4 || frame.Y > num * 6)
				{
					frame.Y = num * 4;
				}
			}
			else
			{
				switch (num244)
				{
				case 0:
					if (frameCounter >= 15.0)
					{
						frameCounter = 0.0;
						frame.Y = 0;
					}
					else if (frame.Y != 0)
					{
						frame.Y = ((int)frameCounter / 5 + 4) * num;
					}
					break;
				case 10:
					if (frameCounter >= 15.0)
					{
						frameCounter = 0.0;
					}
					frame.Y = ((int)frameCounter / 5 + 4) * num;
					break;
				case 1:
					if (frameCounter >= 15.0)
					{
						frameCounter = 0.0;
						frame.Y = num;
					}
					else if (frame.Y != num)
					{
						frame.Y = ((int)frameCounter / 5 + 10) * num;
					}
					break;
				case 11:
					if (frameCounter >= 15.0)
					{
						frameCounter = 0.0;
					}
					frame.Y = ((int)frameCounter / 5 + 10) * num;
					break;
				case 2:
					if (frameCounter >= 15.0)
					{
						frameCounter = 0.0;
						frame.Y = num * 2;
					}
					else if (frame.Y != num * 2)
					{
						frame.Y = ((int)frameCounter / 5 + 7) * num;
					}
					break;
				case 12:
					if (frameCounter >= 15.0)
					{
						frameCounter = 0.0;
					}
					frame.Y = ((int)frameCounter / 5 + 7) * num;
					break;
				case 13:
					if (frameCounter >= 15.0)
					{
						frameCounter = 0.0;
					}
					frame.Y = ((int)frameCounter / 5 + 13) * num;
					break;
				}
			}
			frameCounter += 1.0;
			break;
		}
		case 521:
			if (velocity.X < 0f)
			{
				direction = -1;
			}
			else
			{
				direction = 1;
			}
			if (direction != 0)
			{
				spriteDirection = direction;
			}
			rotation = (float)Math.Atan2(velocity.Y * (float)spriteDirection, velocity.X * (float)spriteDirection) + velocity.X * 0.1f;
			if ((frameCounter += 1.0) >= 5.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			break;
		case 523:
			if ((frameCounter += 1.0) >= 6.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			break;
		case 371:
		case 372:
		case 373:
			frame.Y = num;
			break;
		case 370:
		{
			if (ai[0] == 0f || ai[0] == 5f)
			{
				int num276 = 5;
				if (ai[0] == 5f)
				{
					num276 = 4;
				}
				frameCounter += 1.0;
				if (frameCounter > (double)num276)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y >= num * 6)
				{
					frame.Y = 0;
				}
			}
			if (ai[0] == 1f || ai[0] == 6f)
			{
				if (ai[2] < 10f)
				{
					frame.Y = num * 6;
				}
				else
				{
					frame.Y = num * 7;
				}
			}
			if (ai[0] == 2f || ai[0] == 7f)
			{
				if (ai[2] < 10f)
				{
					frame.Y = num * 6;
				}
				else
				{
					frame.Y = num * 7;
				}
			}
			if (ai[0] == 3f || ai[0] == 8f || ai[0] == -1f)
			{
				int num277 = 90;
				if (ai[2] < (float)(num277 - 30) || ai[2] > (float)(num277 - 10))
				{
					frameCounter += 1.0;
					if (frameCounter > 5.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y >= num * 6)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frame.Y = num * 6;
					if (ai[2] > (float)(num277 - 20) && ai[2] < (float)(num277 - 15))
					{
						frame.Y = num * 7;
					}
				}
			}
			if (ai[0] != 4f && ai[0] != 9f)
			{
				break;
			}
			int num278 = 180;
			if (ai[2] < (float)(num278 - 60) || ai[2] > (float)(num278 - 20))
			{
				frameCounter += 1.0;
				if (frameCounter > 5.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y >= num * 6)
				{
					frame.Y = 0;
				}
			}
			else
			{
				frame.Y = num * 6;
				if (ai[2] > (float)(num278 - 50) && ai[2] < (float)(num278 - 25))
				{
					frame.Y = num * 7;
				}
			}
			break;
		}
		case 359:
		case 360:
		case 655:
		{
			if (velocity.Y > 1f)
			{
				frameCounter += 1.0;
				int num267 = 6;
				if (frameCounter < (double)num267)
				{
					frame.Y = num * 4;
					break;
				}
				frame.Y = num * 5;
				if (frameCounter >= (double)(num267 * 2 - 1))
				{
					frameCounter = 0.0;
				}
				break;
			}
			frameCounter += 1.0;
			int num268 = 10;
			if (frameCounter < (double)num268)
			{
				frame.Y = 0;
				break;
			}
			if (frameCounter < (double)(num268 * 2))
			{
				frame.Y = num;
				break;
			}
			if (frameCounter < (double)(num268 * 3))
			{
				frame.Y = num * 2;
				break;
			}
			if (frameCounter < (double)(num268 * 4))
			{
				frame.Y = num * 3;
				break;
			}
			if (frameCounter < (double)(num268 * 5))
			{
				frame.Y = num * 2;
				break;
			}
			frame.Y = num;
			if (frameCounter >= (double)(num268 * 6 - 1))
			{
				frameCounter = 0.0;
			}
			break;
		}
		case 327:
			if (ai[3] == 0f)
			{
				if (frame.Y > num * 5)
				{
					frameCounter += 1.0;
				}
				else if (frame.Y > 0)
				{
					frameCounter -= 1.0;
				}
			}
			else if (ai[3] == 1f)
			{
				if (frame.Y > num * 10)
				{
					frameCounter += 1.0;
				}
				else if (frame.Y > num * 4)
				{
					frameCounter -= 1.0;
				}
				else if (frame.Y < num * 4)
				{
					frameCounter += 1.0;
				}
			}
			else if (ai[3] == 2f)
			{
				if (frame.Y < num * 2)
				{
					frameCounter -= 1.0;
				}
				else if (frame.Y > num * 8)
				{
					frameCounter -= 1.0;
				}
				else if (frame.Y < num * 8)
				{
					frameCounter += 1.0;
				}
			}
			if (frameCounter > 6.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y > num * 11)
				{
					frame.Y = 0;
				}
			}
			if (frameCounter < 0.0)
			{
				frameCounter = 6.0;
				frame.Y -= num;
				if (frame.Y < 0)
				{
					frame.Y = num * 11;
				}
			}
			break;
		case 347:
			frameCounter += 1.0;
			if (frameCounter > 1.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y > num * 3)
			{
				frame.Y = 0;
			}
			break;
		case 346:
			if (ai[0] == 1f)
			{
				spriteDirection = direction;
				frameCounter += 1.0;
				if (frameCounter > 2.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 8)
				{
					frame.Y = num * 6;
				}
				if (frame.Y < num * 6)
				{
					frame.Y = num * 6;
				}
				break;
			}
			if (velocity.X == 0f)
			{
				ref int y3 = ref frame.Y;
				y3 = y3;
				frameCounter = 0.0;
				break;
			}
			spriteDirection = direction;
			frameCounter += 1.0;
			frameCounter += Math.Abs(velocity.X) / 2f;
			if (frameCounter > 4.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y > num * 5)
			{
				frame.Y = num;
			}
			if (frame.Y < num)
			{
				frame.Y = num;
			}
			break;
		case 352:
			frameCounter += 1.0;
			if (frameCounter > 3.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y > num * 5)
			{
				frame.Y = 0;
			}
			break;
		case 345:
			if (ai[0] == 0f)
			{
				if (ai[3] >= 0f)
				{
					frame.Y = 0;
				}
				else if (velocity.X < 0f)
				{
					frame.Y = num;
				}
				else
				{
					frame.Y = num * 2;
				}
			}
			else if (ai[0] == 1f)
			{
				frameCounter += 1.0;
				if (frameCounter > 5.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y > num * 4)
				{
					frame.Y = num * 3;
				}
				if (frame.Y < num * 3)
				{
					frame.Y = num * 3;
				}
			}
			else if (ai[0] == 2f)
			{
				frame.Y = num * 5;
			}
			break;
		case 344:
			if (velocity.X == 0f)
			{
				frameCounter += 1.0;
				if (frameCounter > 5.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y > num * 9)
				{
					frame.Y = 0;
				}
			}
			else
			{
				frameCounter += Math.Max(1f, Math.Abs(velocity.X) * 0.75f);
				if (frameCounter > 5.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y > num * 9)
				{
					frame.Y = 0;
				}
			}
			break;
		case 325:
			if (velocity.X == 0f)
			{
				frameCounter += 1.0;
				if (frameCounter > 4.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y > num * 4)
				{
					frame.Y = 0;
				}
				break;
			}
			frameCounter += 1.0;
			if (frameCounter > 4.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
			}
			if (frame.Y < num * 5)
			{
				frame.Y = num * 5;
			}
			if (frame.Y > num * 9)
			{
				frame.Y = num * 5;
			}
			break;
		case 490:
			rotation = velocity.X * 0.15f;
			frameCounter += 1.0;
			if (frameCounter > 6.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
			}
			if (frame.Y >= num * Main.npcFrameCount[type])
			{
				frame.Y = 0;
			}
			break;
		case 266:
			frameCounter += 1.0;
			if (frameCounter > 6.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
			}
			if (ai[0] >= 0f)
			{
				if (frame.Y > num * 3)
				{
					frame.Y = 0;
				}
				break;
			}
			if (frame.Y < num * 4)
			{
				frame.Y = num * 4;
			}
			if (frame.Y > num * 7)
			{
				frame.Y = num * 4;
			}
			break;
		case 262:
			frameCounter += 1.0;
			if (frameCounter > 6.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
			}
			if (life > lifeMax / 2)
			{
				if (frame.Y > num * 3)
				{
					frame.Y = 0;
				}
				break;
			}
			if (frame.Y < num * 4)
			{
				frame.Y = num * 4;
			}
			if (frame.Y > num * 7)
			{
				frame.Y = num * 4;
			}
			break;
		case 305:
		case 306:
		case 307:
		case 308:
		case 309:
			if (velocity.Y == 0f)
			{
				spriteDirection = direction;
			}
			if (velocity.Y < -3f)
			{
				frame.Y = num * 5;
			}
			else if (velocity.Y <= 0f)
			{
				frame.Y = 0;
			}
			else if (velocity.Y < 2f)
			{
				frame.Y = num * 3;
			}
			else
			{
				frame.Y = num;
			}
			rotation = velocity.X * 0.1f;
			break;
		case 263:
			if (velocity.X == 0f && velocity.Y == 0f)
			{
				if (frame.Y > 0)
				{
					frameCounter += 1.0;
					if (frameCounter > 4.0)
					{
						frameCounter = 0.0;
						frame.Y -= num;
					}
				}
			}
			else if (frame.Y < 2)
			{
				frameCounter += 1.0;
				if (frameCounter > 4.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
			}
			break;
		case 244:
			frameCounter += 1.0;
			if (num124 > 0)
			{
				frameCounter += 1.0;
			}
			if (num124 == 4)
			{
				frameCounter += 1.0;
			}
			if (frameCounter >= 8.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y >= num * Main.npcFrameCount[type])
			{
				frame.Y = 0;
			}
			break;
		case 289:
			frameCounter += 1.0;
			if (frameCounter < 4.0)
			{
				frame.Y = 0;
			}
			else if (frameCounter < 8.0)
			{
				frame.Y = num;
			}
			else
			{
				frame.Y = num * 2;
				frameCounter = 0.0;
				if (frameCounter > 12.0)
				{
					frameCounter = 0.0;
				}
			}
			if (ai[3] == 1f)
			{
				frame.Y += num * 3;
			}
			break;
		case 288:
			frameCounter += 1.0;
			if (frameCounter >= 6.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y >= num * Main.npcFrameCount[type])
			{
				frame.Y = 0;
			}
			break;
		case 355:
		case 358:
		case 654:
			spriteDirection = direction;
			frameCounter += 1.0;
			if (frameCounter < 4.0)
			{
				frame.Y = 0;
			}
			else
			{
				frame.Y = num;
				if (frameCounter >= 7.0)
				{
					frameCounter = 0.0;
				}
			}
			if (localAI[2] <= 0f)
			{
				frame.Y += num * 2;
			}
			break;
		case 677:
			spriteDirection = direction;
			frameCounter += 1.0;
			if ((frameCounter += 1.0) >= 6.0)
			{
				frameCounter = 0.0;
				if (++frame.Y >= 5)
				{
					frame.Y = 0;
				}
			}
			break;
		case 595:
		case 596:
		case 597:
		case 598:
		case 599:
		case 600:
		case 601:
		{
			spriteDirection = direction;
			int num145 = 3;
			if ((frameCounter += 1.0) >= (double)(Main.npcFrameCount[type] * num145))
			{
				frameCounter = 0.0;
			}
			frame.Y = num * ((int)frameCounter / num145);
			break;
		}
		case 356:
		case 444:
		case 653:
		case 661:
		{
			int num106 = 7;
			rotation = velocity.X * 0.3f;
			spriteDirection = direction;
			frameCounter = frameCounter + 1.0 + (double)((Math.Abs(velocity.X) + Math.Abs(velocity.Y)) / 2f);
			if (frameCounter < (double)num106)
			{
				frame.Y = 0;
			}
			else if (frameCounter < (double)(num106 * 2))
			{
				frame.Y = num;
			}
			else if (frameCounter < (double)(num106 * 3))
			{
				frame.Y = num * 2;
			}
			else
			{
				frame.Y = num;
				if (frameCounter >= (double)(num106 * 4 - 1))
				{
					frameCounter = 0.0;
				}
			}
			if (type != 444 && type != 653 && type != 661)
			{
				frame.Y += (int)((float)(num * 3) * (ai[2] - 1f));
			}
			break;
		}
		case 357:
		case 448:
		case 484:
		case 606:
		{
			localAI[0] = -2f;
			if (velocity.Y == 0f)
			{
				rotation = 0f;
				if (velocity.X == 0f)
				{
					frame.Y = num;
					frameCounter = 0.0;
				}
				else
				{
					frameCounter += 1.0;
					if (frameCounter > 12.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y > num)
						{
							frame.Y = 0;
						}
					}
				}
			}
			else
			{
				rotation += (float)direction * 0.1f;
				frame.Y = num;
			}
			int i3 = (int)base.Center.X / 16;
			int j3 = (int)position.Y / 16;
			Tile tileSafely2 = Framing.GetTileSafely(i3, j3);
			if (tileSafely2 != null)
			{
				if (tileSafely2.slope() == 0)
				{
					j3++;
					tileSafely2 = Framing.GetTileSafely(i3, j3);
				}
				if (tileSafely2.slope() == 1)
				{
					rotation = 0.785f;
					localAI[0] = 0f;
				}
				else if (tileSafely2.slope() == 2)
				{
					rotation = -0.785f;
					localAI[0] = 0f;
				}
			}
			break;
		}
		case 485:
		case 486:
		case 487:
		{
			spriteDirection = direction;
			localAI[0] = -2f;
			if (velocity.Y == 0f)
			{
				rotation = 0f;
				if (velocity.X == 0f)
				{
					frame.Y = num;
					frameCounter = 0.0;
				}
				else
				{
					frameCounter += Math.Abs(velocity.X * 5f);
					if (frameCounter > 10.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y > num * 3)
						{
							frame.Y = 0;
						}
					}
				}
			}
			else
			{
				rotation += (float)direction * 0.1f;
				frame.Y = num;
			}
			int i2 = (int)base.Center.X / 16;
			int j2 = (int)position.Y / 16;
			Tile tileSafely = Framing.GetTileSafely(i2, j2);
			if (tileSafely != null)
			{
				if (tileSafely.slope() == 0)
				{
					j2++;
					tileSafely = Framing.GetTileSafely(i2, j2);
				}
				if (tileSafely.slope() == 1)
				{
					rotation = 0.785f;
					localAI[0] = 0f;
				}
				else if (tileSafely.slope() == 2)
				{
					rotation = -0.785f;
					localAI[0] = 0f;
				}
			}
			break;
		}
		case 250:
		case 264:
		case 268:
			frameCounter += 1.0;
			if (frameCounter >= 6.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y >= num * Main.npcFrameCount[type])
			{
				frame.Y = 0;
			}
			break;
		case 245:
			if (ai[0] == 0f)
			{
				if (ai[1] < -16f)
				{
					frame.Y = 0;
				}
				else if (ai[1] < -12f)
				{
					frame.Y = num;
				}
				else if (ai[1] < -8f)
				{
					frame.Y = num * 2;
				}
				else if (ai[1] < -4f)
				{
					frame.Y = num * 3;
				}
				else if (ai[1] < 0f)
				{
					frame.Y = num * 4;
				}
				else
				{
					frame.Y = 0;
				}
			}
			else if (ai[0] == 1f)
			{
				frame.Y = 1;
			}
			break;
		case 246:
			if (ai[0] == 0f)
			{
				if (localAI[0] == 1f)
				{
					frame.Y = num;
				}
				else
				{
					frame.Y = 0;
				}
			}
			else if (ai[0] == 1f)
			{
				if (localAI[0] == 1f)
				{
					frame.Y = num;
				}
				else
				{
					frame.Y = 0;
				}
				if (localAI[1] == -1f)
				{
					frame.Y += num * 4;
				}
				if (localAI[1] == 1f)
				{
					frame.Y += num * 2;
				}
			}
			break;
		case 249:
			if (localAI[0] == 1f)
			{
				frame.Y = num;
			}
			else
			{
				frame.Y = 0;
			}
			if ((frameCounter += 1.0) >= 16.0)
			{
				frameCounter = 0.0;
			}
			break;
		case 141:
			spriteDirection = direction;
			if (velocity.Y != 0f)
			{
				frame.Y = num * 2;
				break;
			}
			frameCounter += 1.0;
			if (frameCounter >= 8.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y > num)
			{
				frame.Y = 0;
			}
			break;
		case 243:
			if (frameCounter < 0.0)
			{
				if (velocity.Y == 0f)
				{
					frameCounter += 1.0;
					if (frameCounter < -12.0)
					{
						if (frame.Y > num * 9)
						{
							frame.Y = num * 11;
						}
					}
					else if (frameCounter < -6.0)
					{
						if (frame.Y > num * 9)
						{
							frame.Y = num * 12;
						}
					}
					else if (frameCounter < 0.0)
					{
						frameCounter = 0.0;
						if (frame.Y > num * 9)
						{
							frame.Y = num * 11;
						}
					}
				}
				else
				{
					frameCounter = -18.0;
					if (velocity.Y < 0f)
					{
						frame.Y = num * 14;
					}
					else
					{
						frame.Y = num * 13;
					}
				}
				break;
			}
			spriteDirection = direction;
			frameCounter += Math.Abs(velocity.X * 1.1f);
			if (frameCounter >= 6.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y > num * 9)
				{
					frame.Y = 0;
				}
			}
			if (velocity.Y < -2f || velocity.Y > 5f)
			{
				frameCounter = -18.0;
			}
			break;
		case 222:
			frameCounter += 1.0;
			if (localAI[0] == 1f)
			{
				if (frameCounter > 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * 4)
				{
					frame.Y = 0;
				}
				break;
			}
			if (frameCounter > 4.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y < num * 4)
			{
				frame.Y = num * 4;
			}
			if (frame.Y >= num * 12)
			{
				frame.Y = num * 4;
			}
			break;
		case 164:
		case 236:
		case 239:
		case 530:
			if (velocity.Y != 0f)
			{
				frameCounter = 0.0;
				if (velocity.Y < 0f)
				{
					frame.Y = num * 4;
				}
				else
				{
					frame.Y = 0;
				}
				break;
			}
			spriteDirection = direction;
			frameCounter += Math.Abs(velocity.X) * 1.1f;
			while (frameCounter >= 6.0)
			{
				frameCounter -= 6.0;
				frame.Y += num;
				if (frame.Y > num * 3)
				{
					frame.Y = 0;
				}
			}
			break;
		case 165:
		case 237:
		case 238:
		case 240:
		case 531:
		{
			float num144 = 0.5f;
			if (type == 531)
			{
				num144 = 0.4f;
			}
			frameCounter += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * num144;
			if (frameCounter < 6.0)
			{
				frame.Y = 0;
			}
			else if (frameCounter < 12.0)
			{
				frame.Y = num;
			}
			else if (frameCounter < 18.0)
			{
				frame.Y = num * 2;
			}
			else if (frameCounter < 24.0)
			{
				frame.Y = num * 3;
			}
			else
			{
				frameCounter = 0.0;
			}
			break;
		}
		case 195:
			if (ai[0] < 3f)
			{
				frame.Y = 0;
			}
			else if (ai[0] < 6f)
			{
				frame.Y = num;
			}
			else if (ai[0] < 9f)
			{
				frame.Y = num * 2;
			}
			else if (ai[0] < 12f)
			{
				frame.Y = num * 3;
			}
			else if (ai[0] < 15f)
			{
				frame.Y = num * 4;
			}
			else
			{
				frame.Y = num * 5;
			}
			break;
		case 174:
			if (IsABestiaryIconDummy)
			{
				frameCounter += 1.0;
				if (frameCounter > 5.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y > num * 4)
				{
					frame.Y = 0;
				}
			}
			else if (velocity.Y == 0f)
			{
				frame.Y = 0;
			}
			else if ((double)velocity.Y < -1.5)
			{
				frame.Y = num;
			}
			else if ((double)velocity.Y > 1.5)
			{
				frame.Y = num * 3;
			}
			else
			{
				frame.Y = num * 2;
			}
			break;
		case 177:
			if (velocity.Y == 0f)
			{
				frameCounter += 1.0;
				if (frameCounter >= 10.0)
				{
					frameCounter = 30.0;
					frame.Y = 0;
				}
				else
				{
					frame.Y = num;
				}
			}
			else if (velocity.Y < 0f)
			{
				frame.Y = num * 2;
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num * 2;
			}
			break;
		case 163:
			if (velocity.Y != 0f)
			{
				frameCounter = -12.0;
				if (velocity.Y < 0f)
				{
					frame.Y = num * 5;
				}
				else
				{
					frame.Y = num * 6;
				}
				break;
			}
			spriteDirection = direction;
			frameCounter += Math.Abs(velocity.X) * 1.1f;
			if (frameCounter < -6.0)
			{
				frame.Y = num * 6;
			}
			else if (frameCounter < 0.0)
			{
				frame.Y = num * 7;
			}
			else if (frameCounter < 6.0)
			{
				frame.Y = num;
			}
			else if (frameCounter < 12.0)
			{
				frame.Y = num * 2;
			}
			else if (frameCounter < 18.0)
			{
				frame.Y = num * 3;
			}
			else
			{
				frameCounter = 0.0;
			}
			break;
		case 143:
			if (velocity.Y > 0f)
			{
				frameCounter += 1.0;
			}
			else if (velocity.Y < 0f)
			{
				frameCounter -= 1.0;
			}
			if (frameCounter < 6.0)
			{
				frame.Y = num;
			}
			else if (frameCounter < 12.0)
			{
				frame.Y = num * 2;
			}
			else if (frameCounter < 18.0)
			{
				frame.Y = num * 3;
			}
			if (frameCounter < 0.0)
			{
				frameCounter = 0.0;
			}
			if (frameCounter > 17.0)
			{
				frameCounter = 17.0;
			}
			break;
		case 144:
			if (velocity.X == 0f && velocity.Y == 0f)
			{
				localAI[3] += 1f;
				if (localAI[3] < 6f)
				{
					frame.Y = 0;
				}
				else if (localAI[3] < 12f)
				{
					frame.Y = num;
				}
				if (localAI[3] >= 11f)
				{
					localAI[3] = 0f;
				}
				break;
			}
			if (velocity.Y > 0f)
			{
				frameCounter += 1.0;
			}
			else if (velocity.Y < 0f)
			{
				frameCounter -= 1.0;
			}
			if (frameCounter < 6.0)
			{
				frame.Y = num * 2;
			}
			else if (frameCounter < 12.0)
			{
				frame.Y = num * 3;
			}
			else if (frameCounter < 18.0)
			{
				frame.Y = num * 4;
			}
			if (frameCounter < 0.0)
			{
				frameCounter = 0.0;
			}
			if (frameCounter > 17.0)
			{
				frameCounter = 17.0;
			}
			break;
		case 145:
			if (velocity.X == 0f && velocity.Y == 0f)
			{
				if (ai[2] < 4f)
				{
					frame.Y = 0;
				}
				else if (ai[2] < 8f)
				{
					frame.Y = num;
				}
				else if (ai[2] < 12f)
				{
					frame.Y = num * 2;
				}
				else if (ai[2] < 16f)
				{
					frame.Y = num * 3;
				}
				break;
			}
			if (velocity.Y > 0f)
			{
				frameCounter += 1.0;
			}
			else if (velocity.Y < 0f)
			{
				frameCounter -= 1.0;
			}
			if (frameCounter < 6.0)
			{
				frame.Y = num * 4;
			}
			else if (frameCounter < 12.0)
			{
				frame.Y = num * 5;
			}
			else if (frameCounter < 18.0)
			{
				frame.Y = num * 6;
			}
			if (frameCounter < 0.0)
			{
				frameCounter = 0.0;
			}
			if (frameCounter > 17.0)
			{
				frameCounter = 17.0;
			}
			break;
		case 50:
			if (velocity.Y != 0f)
			{
				if (frame.Y < num * 4)
				{
					frame.Y = num * 4;
					frameCounter = 0.0;
				}
				if ((frameCounter += 1.0) >= 4.0)
				{
					frame.Y = num * 5;
				}
				break;
			}
			if (frame.Y >= num * 5)
			{
				frame.Y = num * 4;
				frameCounter = 0.0;
			}
			frameCounter += 1.0;
			if (num124 > 0)
			{
				frameCounter += 1.0;
			}
			if (num124 == 4)
			{
				frameCounter += 1.0;
			}
			if (frameCounter >= 8.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
				if (frame.Y >= num * 4)
				{
					frame.Y = 0;
				}
			}
			break;
		case 170:
		case 171:
		case 180:
			spriteDirection = direction;
			frameCounter += 1.0;
			if (frameCounter >= 4.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y >= num * 14)
			{
				frame.Y = 0;
			}
			break;
		case 135:
			if (ai[2] == 0f)
			{
				frame.Y = 0;
			}
			else
			{
				frame.Y = num;
			}
			break;
		case 85:
		case 341:
		case 629:
			if (ai[0] == 0f)
			{
				frameCounter = 0.0;
				frame.Y = 0;
			}
			else
			{
				int num96 = 3;
				if (velocity.Y == 0f)
				{
					frameCounter -= 1.0;
				}
				else
				{
					frameCounter += 1.0;
				}
				if (frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				if (frameCounter > (double)(num96 * 4))
				{
					frameCounter = num96 * 4;
				}
				if (frameCounter < (double)num96)
				{
					frame.Y = num;
				}
				else if (frameCounter < (double)(num96 * 2))
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < (double)(num96 * 3))
				{
					frame.Y = num * 3;
				}
				else if (frameCounter < (double)(num96 * 4))
				{
					frame.Y = num * 4;
				}
				else if (frameCounter < (double)(num96 * 5))
				{
					frame.Y = num * 5;
				}
				else if (frameCounter < (double)(num96 * 6))
				{
					frame.Y = num * 4;
				}
				else if (frameCounter < (double)(num96 * 7))
				{
					frame.Y = num * 3;
				}
				else
				{
					frame.Y = num * 2;
					if (frameCounter >= (double)(num96 * 8))
					{
						frameCounter = num96;
					}
				}
			}
			if (ai[3] == 2f || (IsABestiaryIconDummy && type == 85))
			{
				frame.Y += num * 6;
			}
			else if (ai[3] == 3f)
			{
				frame.Y += num * 12;
			}
			break;
		case 113:
		case 114:
			if (ai[2] == 0f)
			{
				frameCounter += 1.0;
				if (frameCounter >= 12.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			else
			{
				frame.Y = 0;
				frameCounter = -60.0;
			}
			break;
		case 61:
		{
			spriteDirection = direction;
			rotation = velocity.X * 0.1f;
			if (velocity.X == 0f && velocity.Y == 0f)
			{
				frame.Y = 0;
				frameCounter = 0.0;
				break;
			}
			int num76 = 5;
			int num77 = 5;
			frameCounter += 1.0;
			if (frameCounter >= (double)(num76 * num77))
			{
				frameCounter = 0.0;
			}
			int num78 = (int)(frameCounter / (double)num76);
			frame.Y = (num78 + 1) * num;
			break;
		}
		case 301:
			if (velocity.Y == 0f)
			{
				spriteDirection = -direction;
			}
			else
			{
				if ((double)velocity.X > 0.5)
				{
					spriteDirection = -1;
				}
				if ((double)velocity.X < -0.5)
				{
					spriteDirection = 1;
				}
			}
			goto IL_e660;
		case 252:
			if ((double)velocity.X > 0.5)
			{
				spriteDirection = 1;
			}
			if ((double)velocity.X < -0.5)
			{
				spriteDirection = -1;
			}
			goto IL_e660;
		case 122:
			spriteDirection = direction;
			rotation = velocity.X * 0.05f;
			if (ai[3] > 0f)
			{
				int num50 = (int)(ai[3] / 8f);
				frameCounter = 0.0;
				frame.Y = (num50 + 3) * num;
				break;
			}
			frameCounter += 1.0;
			if (frameCounter >= 8.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y >= num * 3)
			{
				frame.Y = 0;
			}
			break;
		case 74:
		case 297:
		case 298:
		case 442:
		{
			spriteDirection = direction;
			rotation = velocity.X * 0.1f;
			if (velocity.X == 0f && velocity.Y == 0f)
			{
				frame.Y = num * 4;
				frameCounter = 0.0;
				break;
			}
			int num287 = Main.npcFrameCount[type] - 1;
			frameCounter += 1.0;
			if (frameCounter >= 4.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y >= num * num287)
			{
				frame.Y = 0;
			}
			break;
		}
		case 671:
		case 672:
		case 673:
		case 674:
		case 675:
		{
			spriteDirection = direction;
			rotation = velocity.X * 0.1f;
			if (velocity.X == 0f && velocity.Y == 0f)
			{
				frame.Y = 0;
				frameCounter = 0.0;
				break;
			}
			int num273 = Main.npcFrameCount[type];
			frameCounter += 1.0;
			if (frameCounter >= 4.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
			}
			if (frame.Y >= num * num273)
			{
				frame.Y = num;
			}
			break;
		}
		case 611:
			spriteDirection = -direction;
			rotation = velocity.X * 0.1f;
			if (velocity.X == 0f && velocity.Y == 0f)
			{
				int num258 = frame.Y / num;
				if (num258 < 0 || num258 >= 8)
				{
					frame.Y = 0;
				}
				if ((int)frameCounter % 40 != 0 || Main.rand.Next(80) == 0)
				{
					frameCounter += 1.0;
				}
				if ((frameCounter + 1.0) % 40.0 == 39.0)
				{
					frameCounter = 40 * Main.rand.Next(3);
				}
				int num259 = (int)frameCounter % 40 / 10;
				int num260 = (int)frameCounter / 40;
				int num262 = 0;
				switch (num260)
				{
				case 0:
					if (num259 == 3)
					{
						num259 = 1;
					}
					num262 = num259;
					break;
				case 1:
					if (num259 == 3)
					{
						num259 = 1;
					}
					num262 = 0;
					if (num259 != 0)
					{
						num262 = 2 + num259;
					}
					break;
				case 2:
					num262 = 0;
					if (num259 != 0)
					{
						num262 = 4 + num259;
					}
					break;
				}
				frame.Y = num * num262;
			}
			else
			{
				frameCounter += 1.0;
				if (frameCounter >= 5.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type] || frame.Y < num * 8)
				{
					frame.Y = num * 8;
				}
			}
			break;
		case 362:
		case 364:
		case 608:
			spriteDirection = direction;
			if (velocity.X == 0f)
			{
				frameCounter = 0.0;
				frame.Y = 0;
				break;
			}
			frameCounter += 1.0;
			if (frameCounter >= 4.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y >= num * 10)
			{
				frame.Y = num * 3;
			}
			if (frame.Y < num * 3)
			{
				frame.Y = num * 3;
			}
			break;
		case 363:
		case 365:
		case 609:
			spriteDirection = direction;
			if (wet)
			{
				frameCounter += 1.0;
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 2)
				{
					frame.Y = num;
				}
				if (frame.Y < num)
				{
					frame.Y = num;
				}
				rotation = 0f;
			}
			else if (velocity.X == 0f && velocity.Y == 0f)
			{
				frame.Y = num;
				frameCounter = 0.0;
				rotation = 0f;
			}
			else
			{
				rotation = velocity.X * 0.1f;
				frameCounter += 1.0;
				if (frameCounter >= 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = num * 11;
				}
				if (frame.Y < num * 11)
				{
					frame.Y = num * 11;
				}
			}
			break;
		case 602:
			spriteDirection = direction;
			if (velocity.X == 0f)
			{
				frameCounter = 0.0;
				frame.Y = 0;
				break;
			}
			frameCounter += 1.0;
			if (frameCounter >= 4.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y >= num * 10)
			{
				frame.Y = num * 3;
			}
			if (frame.Y < num * 3)
			{
				frame.Y = num * 3;
			}
			break;
		case 603:
			spriteDirection = direction;
			if (wet)
			{
				frameCounter += 1.0;
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 2)
				{
					frame.Y = num;
				}
				if (frame.Y < num)
				{
					frame.Y = num;
				}
				rotation = 0f;
			}
			else if (velocity.X == 0f && velocity.Y == 0f)
			{
				frame.Y = num;
				frameCounter = 0.0;
				rotation = 0f;
			}
			else
			{
				rotation = velocity.X * 0.1f;
				frameCounter += 1.0;
				if (frameCounter >= 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = num * 11;
				}
				if (frame.Y < num * 11)
				{
					frame.Y = num * 11;
				}
			}
			break;
		case 62:
		case 66:
		{
			spriteDirection = direction;
			rotation = velocity.X * 0.1f;
			int num153 = 5;
			int num154 = 5;
			frameCounter += 1.0;
			if (frameCounter >= (double)(num153 * num154))
			{
				frameCounter = 0.0;
			}
			int num155 = (int)(frameCounter / (double)num153);
			frame.Y = num155 * num;
			break;
		}
		case 156:
		{
			spriteDirection = direction;
			rotation = velocity.X * 0.1f;
			frameCounter += 1.0;
			if (frameCounter >= 20.0)
			{
				frameCounter = 0.0;
			}
			int num149 = (int)frameCounter / 4;
			frame.Y = num149 * num;
			break;
		}
		case 63:
		case 64:
		case 103:
		case 242:
			if (ai[1] == 1f)
			{
				frameCounter += 1.0;
				if (frameCounter > 4.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y > num * 6)
				{
					frame.Y = num * 4;
				}
				if (frame.Y < num * 4)
				{
					frame.Y = num * 4;
				}
				return;
			}
			goto case 256;
		case 256:
			frameCounter += 1.0;
			if (frameCounter < 6.0)
			{
				frame.Y = 0;
				break;
			}
			if (frameCounter < 12.0)
			{
				frame.Y = num;
				break;
			}
			if (frameCounter < 18.0)
			{
				frame.Y = num * 2;
				break;
			}
			frame.Y = num * 3;
			if (frameCounter >= 23.0)
			{
				frameCounter = 0.0;
			}
			break;
		case 221:
			if (localAI[2] == 1f)
			{
				if (localAI[0] == 1f)
				{
					frame.Y = 0;
					localAI[0] = 0f;
				}
				frameCounter += 1.0;
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = num * Main.npcFrameCount[type] - num;
				}
			}
			else
			{
				frameCounter += 1.0;
				if (frameCounter >= 13.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			break;
		case 23:
		{
			int num70 = Dust.NewDust(new Vector2(position.X - velocity.X, position.Y - velocity.Y), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
			Main.dust[num70].noGravity = true;
			Main.dust[num70].velocity.X *= 0.3f;
			Main.dust[num70].velocity.Y *= 0.3f;
			goto case 2;
		}
		case 2:
		case 121:
		case 169:
		case 190:
		case 191:
		case 192:
		case 193:
		case 194:
		case 317:
		case 318:
		case 660:
		{
			if ((type == 121 || type == 660) && localAI[0] == 0f)
			{
				localAI[0] = 1f;
				frame.Y = num * 2;
			}
			if (type == 2 || type == 190 || type == 191 || type == 192 || type == 193 || type == 194 || type == 317 || type == 318)
			{
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 3.14f;
				}
			}
			else if (type == 2 || type == 121 || type == 660)
			{
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				rotation = velocity.X * 0.1f;
			}
			frameCounter += 1.0;
			float num71 = 8f;
			if (type == 660)
			{
				num71 = 6f;
			}
			if (frameCounter >= (double)num71)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y >= num * Main.npcFrameCount[type])
			{
				frame.Y = 0;
			}
			break;
		}
		case 133:
			if (velocity.X > 0f)
			{
				spriteDirection = 1;
				rotation = (float)Math.Atan2(velocity.Y, velocity.X);
			}
			if (velocity.X < 0f)
			{
				spriteDirection = -1;
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 3.14f;
			}
			frameCounter += 1.0;
			if (frameCounter >= 8.0)
			{
				frame.Y = num;
			}
			else
			{
				frame.Y = 0;
			}
			if (frameCounter >= 16.0)
			{
				frame.Y = 0;
				frameCounter = 0.0;
			}
			if ((double)life < (double)lifeMax * 0.5)
			{
				frame.Y += num * 2;
			}
			break;
		case 116:
			if (velocity.X > 0f)
			{
				spriteDirection = 1;
				rotation = (float)Math.Atan2(velocity.Y, velocity.X);
			}
			if (velocity.X < 0f)
			{
				spriteDirection = -1;
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 3.14f;
			}
			frameCounter += 1.0;
			if (frameCounter >= 5.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y >= num * Main.npcFrameCount[type])
			{
				frame.Y = 0;
			}
			break;
		case 75:
			if (velocity.X > 0f)
			{
				spriteDirection = 1;
			}
			else
			{
				spriteDirection = -1;
			}
			rotation = velocity.X * 0.1f;
			frameCounter += 1.0;
			if (frameCounter >= 4.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y >= num * Main.npcFrameCount[type])
			{
				frame.Y = 0;
			}
			break;
		case 157:
		{
			spriteDirection = direction;
			frameCounter += 1.0;
			if (!wet)
			{
				frameCounter += 1.0;
			}
			int num257 = 5;
			if (frameCounter < (double)num257)
			{
				frame.Y = 0;
			}
			else if (frameCounter < (double)(num257 * 2))
			{
				frame.Y = num;
			}
			else if (frameCounter < (double)(num257 * 3))
			{
				frame.Y = num * 2;
			}
			else if (frameCounter < (double)(num257 * 4))
			{
				frame.Y = num;
			}
			else if (frameCounter < (double)(num257 * 5))
			{
				frame.Y = num * 3;
			}
			else if (frameCounter < (double)(num257 * 6))
			{
				frame.Y = num * 4;
			}
			else if (frameCounter < (double)(num257 * 7))
			{
				frame.Y = num * 5;
			}
			else if (frameCounter < (double)(num257 * 8))
			{
				frame.Y = num * 4;
			}
			else
			{
				frameCounter = 0.0;
			}
			break;
		}
		case 55:
		case 57:
		case 58:
		case 102:
		case 241:
		case 465:
		case 592:
		case 607:
			spriteDirection = direction;
			frameCounter += 1.0;
			if (wet)
			{
				if (frameCounter < 6.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 18.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 24.0)
				{
					frame.Y = num * 3;
				}
				else
				{
					frameCounter = 0.0;
				}
			}
			else if (frameCounter < 6.0)
			{
				frame.Y = num * 4;
			}
			else if (frameCounter < 12.0)
			{
				frame.Y = num * 5;
			}
			else
			{
				frameCounter = 0.0;
			}
			break;
		case 615:
			spriteDirection = direction;
			if (!wet && ai[2] == 1f)
			{
				frame.Y = 4 * num;
				break;
			}
			if (!wet)
			{
				frameCounter += 1.0;
			}
			if ((frameCounter += 1.0) >= (double)(7 * (Main.npcFrameCount[type] - 1)))
			{
				frameCounter = 0.0;
			}
			frame.Y = (int)(frameCounter / 7.0) * num;
			break;
		case 69:
			if (ai[0] < 190f)
			{
				frameCounter += 1.0;
				if (frameCounter >= 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type] - 1)
					{
						frame.Y = 0;
					}
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num * (Main.npcFrameCount[type] - 1);
			}
			break;
		case 155:
		{
			int num152 = frame.Y / num;
			if (IsABestiaryIconDummy && num152 < 3)
			{
				num152 = 3;
			}
			if (velocity.Y < 0f)
			{
				num152 = 10;
			}
			else if (velocity.Y > 0f)
			{
				num152 = 11;
			}
			else if (velocity.X == 0f)
			{
				num152 = 0;
				frameCounter = 0.0;
			}
			else if (((direction > 0 && velocity.X < 0f) || (direction < 0 && velocity.X > 0f)) && Math.Abs(velocity.X) < 4f)
			{
				spriteDirection = direction;
				if (num152 > 2)
				{
					num152 = 0;
					frameCounter = 0.0;
				}
				if (num152 < 2)
				{
					frameCounter += 1.0;
					if (frameCounter > 5.0)
					{
						frameCounter = 0.0;
						num152++;
					}
				}
				else
				{
					frameCounter = 0.0;
				}
			}
			else
			{
				spriteDirection = ((!(velocity.X < 0f)) ? 1 : (-1));
				frameCounter += Math.Abs(velocity.X) * 0.4f;
				if (num152 == 10 || num152 == 11)
				{
					num152 = 12;
					frameCounter = 0.0;
				}
				else if (frameCounter > 8.0)
				{
					frameCounter -= 8.0;
					num152++;
					if (num152 > 9)
					{
						num152 = 3;
					}
				}
			}
			frame.Y = num152 * num;
			break;
		}
		case 329:
			if (velocity.Y > 0f)
			{
				frame.Y = num * 3;
				frameCounter = 0.0;
				break;
			}
			if (velocity.Y < 0f)
			{
				frame.Y = num * 2;
				frameCounter = 0.0;
				break;
			}
			spriteDirection = direction;
			frameCounter += Math.Abs(velocity.X) * 0.4f;
			if (frameCounter > 4.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y < num * 2)
				{
					frame.Y = num * 2;
				}
				if (frame.Y > num * 9)
				{
					frame.Y = num * 2;
				}
			}
			break;
		case 86:
			if (velocity.Y == 0f || wet)
			{
				if (velocity.X < -2f)
				{
					spriteDirection = -1;
				}
				else if (velocity.X > 2f)
				{
					spriteDirection = 1;
				}
				else
				{
					spriteDirection = direction;
				}
			}
			if (velocity.Y != 0f)
			{
				frame.Y = num * 15;
				frameCounter = 0.0;
				break;
			}
			if (velocity.X == 0f)
			{
				frameCounter = 0.0;
				frame.Y = 0;
				break;
			}
			if (Math.Abs(velocity.X) < 3f)
			{
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= 9)
					{
						frame.Y = num;
					}
					if (frame.Y / num <= 0)
					{
						frame.Y = num;
					}
				}
				break;
			}
			frameCounter += Math.Abs(velocity.X);
			if (frameCounter >= 10.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y / num >= 15)
				{
					frame.Y = num * 9;
				}
				if (frame.Y / num <= 8)
				{
					frame.Y = num * 9;
				}
			}
			break;
		case 315:
			if (velocity.Y == 0f || wet)
			{
				if (velocity.X < -1f)
				{
					spriteDirection = -1;
				}
				else if (velocity.X > 1f)
				{
					spriteDirection = 1;
				}
				else
				{
					spriteDirection = direction;
				}
			}
			if (velocity.Y != 0f)
			{
				frame.Y = 0;
				frameCounter = 0.0;
				break;
			}
			frameCounter += Math.Abs(velocity.X);
			if (frameCounter >= 8.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y / num > 10)
				{
					frame.Y = num;
				}
			}
			break;
		case 127:
			if (IsMechQueenUp)
			{
				if (ai[1] == 0f)
				{
					frameCounter += 1.0;
					if (frameCounter >= 12.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y / num >= 5)
						{
							frame.Y = num * 3;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 5;
				}
			}
			else if (ai[1] == 0f)
			{
				frameCounter += 1.0;
				if (frameCounter >= 12.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= 2)
					{
						frame.Y = 0;
					}
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num * 2;
			}
			break;
		case 129:
			if (velocity.Y == 0f)
			{
				spriteDirection = direction;
			}
			frameCounter += 1.0;
			if (frameCounter >= 2.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			break;
		case 130:
			if (velocity.Y == 0f)
			{
				spriteDirection = direction;
			}
			frameCounter += 1.0;
			if (frameCounter >= 8.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			break;
		case 67:
		case 217:
		case 218:
		case 219:
			if (velocity.Y == 0f)
			{
				spriteDirection = direction;
			}
			frameCounter += 1.0;
			if (frameCounter >= 6.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			break;
		case 220:
			if (velocity.Y == 0f)
			{
				spriteDirection = direction;
			}
			frameCounter += 1.0;
			if (frameCounter >= 10.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			break;
		case 109:
			if (velocity.Y == 0f && ((velocity.X <= 0f && direction < 0) || (velocity.X >= 0f && direction > 0)))
			{
				spriteDirection = direction;
			}
			frameCounter += Math.Abs(velocity.X);
			if (frameCounter >= 7.0)
			{
				frameCounter -= 7.0;
				frame.Y += num;
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			break;
		case 83:
		case 84:
		case 179:
			if (ai[0] == 2f)
			{
				frameCounter = 0.0;
				frame.Y = 0;
				break;
			}
			frameCounter += 1.0;
			if (frameCounter >= 4.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			break;
		case 72:
			frameCounter += 1.0;
			if (frameCounter >= 3.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			break;
		case 65:
			spriteDirection = direction;
			frameCounter += 1.0;
			if (wet && type == 65)
			{
				if (frameCounter < 6.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 18.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 24.0)
				{
					frame.Y = num * 3;
				}
				else
				{
					frameCounter = 0.0;
				}
			}
			break;
		case 542:
		case 543:
		case 544:
		case 545:
			spriteDirection = direction;
			frameCounter += 1.0;
			if (frameCounter >= 16.0)
			{
				frameCounter = 0.0;
			}
			frame.Y = num * (int)(frameCounter / 4.0);
			break;
		case 224:
		case 587:
			if (velocity.X > 0f)
			{
				spriteDirection = 1;
				rotation = velocity.Y * 0.2f;
			}
			if (velocity.X < 0f)
			{
				spriteDirection = -1;
				rotation = (0f - velocity.Y) * 0.2f;
			}
			frameCounter += 1.0;
			if (frameCounter >= 6.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y >= num * 4)
			{
				frame.Y = 0;
			}
			break;
		case 151:
		{
			int num247 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
			Main.dust[num247].noGravity = true;
			goto case 150;
		}
		case 150:
		case 152:
		case 158:
		case 226:
			if (type == 150 && Main.rand.Next(10) == 0)
			{
				int num248 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 67, velocity.X * 0.5f, velocity.Y * 0.5f, 90, default(Color), 1.5f);
				Main.dust[num248].noGravity = true;
				Dust obj6 = Main.dust[num248];
				obj6.velocity *= 0.2f;
				Main.dust[num248].noLight = true;
			}
			if (velocity.X > 0f)
			{
				spriteDirection = 1;
			}
			if (velocity.X < 0f)
			{
				spriteDirection = -1;
			}
			rotation = velocity.X * 0.1f;
			frameCounter += 1.0;
			if (frameCounter >= 6.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y >= num * 4)
			{
				frame.Y = 0;
			}
			break;
		case 60:
		{
			int num225 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
			Main.dust[num225].noGravity = true;
			goto case 48;
		}
		case 48:
		case 49:
		case 51:
		case 82:
		case 93:
		case 137:
		case 182:
		case 210:
		case 211:
		case 253:
		case 316:
		case 634:
		case 662:
		case 664:
		{
			if (type == 634 && Main.rand.Next(10) == 0)
			{
				int num226 = Dust.NewDust(position, width, height, 165, velocity.X, velocity.Y, 50);
				Dust obj5 = Main.dust[num226];
				obj5.velocity *= 0.1f;
				Main.dust[num226].noGravity = true;
			}
			if (velocity.X > 0f)
			{
				spriteDirection = 1;
			}
			if (velocity.X < 0f)
			{
				spriteDirection = -1;
			}
			rotation = velocity.X * 0.1f;
			if (type == 210 || type == 211)
			{
				frameCounter += 1.0;
				rotation = velocity.X * 0.2f;
			}
			frameCounter += 1.0;
			int num227 = 6;
			int num228 = Main.npcFrameCount[type];
			if (type == 49 || type == 51 || type == 60 || type == 634)
			{
				num228--;
			}
			if (type == 48)
			{
				num227 = 5;
			}
			if (frameCounter >= (double)num227)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y >= num * num228)
			{
				frame.Y = 0;
			}
			break;
		}
		case 330:
			if (velocity.X > 0f)
			{
				spriteDirection = 1;
			}
			if (velocity.X < 0f)
			{
				spriteDirection = -1;
			}
			rotation = velocity.X * 0.15f;
			frameCounter += 1.0;
			if (frameCounter >= 8.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y >= num * Main.npcFrameCount[type])
			{
				frame.Y = 0;
			}
			break;
		case 42:
		case 231:
		case 232:
		case 233:
		case 234:
		case 235:
			frameCounter += 1.0;
			if (frameCounter < 2.0)
			{
				frame.Y = 0;
			}
			else if (frameCounter < 4.0)
			{
				frame.Y = num;
			}
			else if (frameCounter < 6.0)
			{
				frame.Y = num * 2;
			}
			else if (frameCounter < 8.0)
			{
				frame.Y = num;
			}
			else
			{
				frameCounter = 0.0;
			}
			break;
		case 205:
			frameCounter += 0.5;
			if (frameCounter < 2.0)
			{
				frame.Y = 0;
			}
			else if (frameCounter < 4.0)
			{
				frame.Y = num;
			}
			else if (frameCounter < 6.0)
			{
				frame.Y = num * 2;
			}
			else if (frameCounter < 8.0)
			{
				frame.Y = num;
			}
			else
			{
				frameCounter = 0.0;
			}
			break;
		case 176:
			frameCounter += 1.0;
			if (frameCounter > 4.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y > num)
			{
				frame.Y = 0;
			}
			break;
		case 43:
		case 56:
		case 175:
			frameCounter += 1.0;
			if (frameCounter < 6.0)
			{
				frame.Y = 0;
			}
			else if (frameCounter < 12.0)
			{
				frame.Y = num;
			}
			else if (frameCounter < 18.0)
			{
				frame.Y = num * 2;
			}
			else if (frameCounter < 24.0)
			{
				frame.Y = num;
			}
			if (frameCounter == 23.0)
			{
				frameCounter = 0.0;
			}
			break;
		case 115:
			frameCounter += 1.0;
			if (frameCounter < 3.0)
			{
				frame.Y = 0;
			}
			else if (frameCounter < 6.0)
			{
				frame.Y = num;
			}
			else if (frameCounter < 12.0)
			{
				frame.Y = num * 2;
			}
			else if (frameCounter < 15.0)
			{
				frame.Y = num;
			}
			if (frameCounter == 15.0)
			{
				frameCounter = 0.0;
			}
			break;
		case 101:
			frameCounter += 1.0;
			if (frameCounter > 6.0)
			{
				frame.Y += num * 2;
				frameCounter = 0.0;
			}
			if (frame.Y > num * 2)
			{
				frame.Y = 0;
			}
			break;
		case 199:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
			}
			if (frame.Y < num * 3)
			{
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
			}
			else
			{
				if (velocity.Y != 0f)
				{
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter > 12.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y > num * 7)
					{
						frame.Y = num * 3;
					}
				}
			}
			break;
		case 467:
			if (ai[0] == 1f || IsABestiaryIconDummy)
			{
				frameCounter += 1.0;
				if (frameCounter > 4.0)
				{
					frameCounter = 0.0;
					if (frame.Y < num * 6)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					else if (IsABestiaryIconDummy)
					{
						frame.Y = 0;
					}
				}
				break;
			}
			frameCounter += 1.0;
			if (frameCounter > 4.0)
			{
				frameCounter = 0.0;
				if (frame.Y > num * 3)
				{
					frame.Y = num * 3;
				}
				if (frame.Y > 0)
				{
					frame.Y -= num;
					frameCounter = 0.0;
				}
			}
			break;
		case 480:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (ai[2] < 0f)
				{
					frameCounter += 1.0;
					if (frameCounter > 3.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= Main.npcFrameCount[type] * num)
					{
						frame.Y = num * 21;
					}
					else if (frame.Y < num * 21)
					{
						frame.Y = num * 21;
					}
				}
				else if (velocity.X == 0f)
				{
					frameCounter += 1.0;
					if (frameCounter > 4.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 7)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter += 1f + Math.Abs(velocity.X);
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type] - 4)
					{
						frame.Y = num * 10;
					}
					else if (frame.Y / num < 10)
					{
						frame.Y = num * 10;
					}
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num * 8;
			}
			break;
		case 483:
			if (ai[0] == -1f)
			{
				frameCounter += 1.0;
				if (frameCounter > 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 21)
				{
					frame.Y = num * 21;
				}
				else if (frame.Y < num * 13)
				{
					frame.Y = num * 13;
				}
				rotation += velocity.X * 0.2f;
			}
			else
			{
				frameCounter += 1.0;
				if (frameCounter > 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 11)
				{
					frame.Y = 0;
				}
				rotation = velocity.X * 0.1f;
			}
			break;
		case 482:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (ai[2] < 0f)
				{
					frameCounter += 1.0;
					if (frameCounter > 3.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= Main.npcFrameCount[type] * num)
					{
						frame.Y = num * 11;
					}
					else if (frame.Y < num * 11)
					{
						frame.Y = num * 11;
					}
				}
				else if (velocity.X == 0f)
				{
					frameCounter += 1.0;
					frame.Y = 0;
				}
				else
				{
					frameCounter += 0.2f + Math.Abs(velocity.X);
					if (frameCounter > 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type] - 10)
					{
						frame.Y = num * 2;
					}
					else if (frame.Y / num < 2)
					{
						frame.Y = num * 2;
					}
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num;
			}
			break;
		case 631:
		{
			int num253 = 100;
			int num254 = 32;
			int num255 = 8;
			if (velocity.Y == 0f)
			{
				spriteDirection = direction;
				if (ai[2] != 0f && ai[2] < (float)num253)
				{
					float amount = (ai[2] - (float)(num253 - num254)) / (float)num254;
					Player player = Main.player[target];
					bool flag7 = player != null && ((player.Center.X < base.Center.X) ? (direction == -1) : (direction == 1));
					int num305;
					if (player == null)
					{
						num305 = 0;
					}
					else
					{
						Rectangle hitbox = player.Hitbox;
						num305 = (((Rectangle)(ref hitbox)).Intersects(base.Hitbox) ? 1 : 0);
					}
					bool flag8 = (byte)num305 != 0;
					if (player != null && flag7 && !flag8 && Collision.CanHit(player, this))
					{
						frame.Y = (int)MathHelper.Lerp(15f, (float)Main.npcFrameCount[type], amount) * num;
					}
					else if (flag7 && flag8)
					{
						frame.Y = (int)MathHelper.Lerp(10f, 15f, amount) * num;
					}
					else
					{
						frame.Y = 0;
					}
				}
				else if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				else
				{
					frameCounter += 0.2f + Math.Abs(velocity.X);
					if (frameCounter > 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num255 * num)
					{
						frame.Y = num;
					}
					else if (frame.Y / num < 1)
					{
						frame.Y = num;
					}
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = 0;
			}
			break;
		}
		case 461:
			if (wet)
			{
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				if (velocity.X > 0f)
				{
					direction = 1;
				}
				if (spriteDirection != direction)
				{
					rotation *= -1f;
					spriteDirection = direction;
				}
				float num163 = (float)Math.Atan2(velocity.Y * (float)direction, velocity.X * (float)direction);
				if ((double)Math.Abs(rotation - num163) >= 3.14)
				{
					if (num163 < rotation)
					{
						rotation -= 6.28f;
					}
					else
					{
						rotation += 6.28f;
					}
				}
				rotation = (rotation * 4f + num163) / 5f;
				frameCounter += Math.Abs(((Vector2)(ref velocity)).Length());
				frameCounter += 1.0;
				if (frameCounter > 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num > 20)
				{
					frame.Y = num * 16;
				}
				else if (frame.Y / num < 16)
				{
					frame.Y = num * 19;
				}
				break;
			}
			if ((double)rotation > 3.14)
			{
				rotation -= 6.28f;
			}
			if ((double)rotation > -0.01 && (double)rotation < 0.01)
			{
				rotation = 0f;
			}
			else
			{
				rotation *= 0.9f;
			}
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				if (frame.Y < num * 2)
				{
					frame.Y = num * 2;
				}
				frameCounter += Math.Abs(velocity.X) * 2f;
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num > 15)
				{
					frame.Y = num * 2;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num;
			}
			break;
		case 586:
		{
			if (wet)
			{
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				if (velocity.X > 0f)
				{
					direction = 1;
				}
				spriteDirection = direction;
				frameCounter += Math.Abs(((Vector2)(ref velocity)).Length());
				frameCounter += 1.0;
				if (frameCounter > 60.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num > 1)
				{
					frame.Y = 0;
				}
				else if (frame.Y / num < 0)
				{
					frame.Y = 0;
				}
				break;
			}
			if (velocity.Y == 0f)
			{
				spriteDirection = direction;
			}
			if (velocity.X == 0f)
			{
				frame.Y = num;
				frameCounter = 0.0;
				break;
			}
			int num156 = 6;
			num156 = 8;
			frameCounter += Math.Abs(velocity.X) * 1f;
			frameCounter += 0.5;
			if (frameCounter > (double)num156)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y / num >= Main.npcFrameCount[type])
			{
				frame.Y = 0;
			}
			break;
		}
		case 466:
			if (!IsABestiaryIconDummy && ai[2] <= 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (ai[2] == 0f)
				{
					frame.Y = 0;
				}
				else if (ai[2] < -8f)
				{
					frame.Y = num;
				}
				else
				{
					frame.Y = num * 2;
				}
			}
			else if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (velocity.X == 0f)
				{
					frame.Y = num * 2;
					frameCounter = 0.0;
					break;
				}
				if (frame.Y / num < 4)
				{
					frame.Y = num * 4;
				}
				frameCounter += Math.Abs(velocity.X) * 2f;
				frameCounter += 1.0;
				if (frameCounter > 7.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num > 17)
				{
					frame.Y = num * 4;
				}
				if (frame.Y / num < 4)
				{
					frame.Y = num * 4;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num * 3;
			}
			break;
		case 471:
		{
			bool flag2 = false;
			if (ai[3] < 0f)
			{
				flag2 = true;
			}
			if (flag2)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				frameCounter += Math.Abs(((Vector2)(ref velocity)).Length()) * 0.5f;
				frameCounter += 1.0;
				if (frameCounter < 6.0)
				{
					frame.Y = num * 17;
					break;
				}
				if (frameCounter < 12.0)
				{
					frame.Y = num * 18;
					break;
				}
				if (frameCounter < 18.0)
				{
					frame.Y = num * 19;
					break;
				}
				if (frameCounter < 23.0)
				{
					frame.Y = num * 18;
					break;
				}
				frame.Y = num * 18;
				frameCounter = 0.0;
			}
			else if (ai[3] == 1f)
			{
				frame.Y = num * 16;
				frameCounter = 0.0;
			}
			else if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				frameCounter += Math.Abs(velocity.X) * 2f;
				frameCounter += 1.0;
				if (frameCounter > 7.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num > 15)
				{
					frame.Y = num * 2;
				}
				if (frame.Y / num < 2)
				{
					frame.Y = num * 2;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num;
			}
			break;
		}
		case 166:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (velocity.X == 0f)
				{
					frameCounter += 2.0;
					if (frameCounter > 7.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 5)
					{
						frame.Y = 0;
					}
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				frameCounter += 1.0;
				if (frameCounter > 9.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num > 12)
				{
					frame.Y = num * 7;
				}
				if (frame.Y / num < 7)
				{
					frame.Y = num * 7;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num * 6;
			}
			break;
		case 469:
			if (ai[2] == 1f)
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				if (velocity.X > 0f)
				{
					direction = 1;
				}
				spriteDirection = direction;
				frameCounter += Math.Abs(((Vector2)(ref velocity)).Length());
				if (frameCounter > 11.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num > 5)
				{
					frame.Y = num * 2;
				}
				if (frame.Y / num < 2)
				{
					frame.Y = num * 2;
				}
				break;
			}
			rotation = 0f;
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				frameCounter += 1.0;
				if (frameCounter > 9.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num > 11)
				{
					frame.Y = num * 6;
				}
				if (frame.Y / num < 6)
				{
					frame.Y = num * 6;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num;
			}
			break;
		case 351:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				if (frame.Y < num * 2)
				{
					frame.Y = num * 2;
				}
				frameCounter += Math.Abs(velocity.X) * 1f;
				frameCounter += 1.0;
				if (frameCounter > 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = num * 2;
				}
			}
			else
			{
				if (velocity.Y < 0f)
				{
					frame.Y = num;
				}
				else
				{
					frame.Y = num;
				}
				frameCounter = 0.0;
			}
			break;
		case 343:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (velocity.X == 0f)
				{
					frame.Y = num * 2;
					frameCounter = 0.0;
					break;
				}
				if (frame.Y < num * 2)
				{
					frame.Y = num * 2;
				}
				frameCounter += Math.Abs(velocity.X) * 1f;
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = num * 2;
				}
			}
			else
			{
				if (velocity.Y < 0f)
				{
					frame.Y = 0;
				}
				else
				{
					frame.Y = num;
				}
				frameCounter = 0.0;
			}
			break;
		case 269:
		case 270:
		case 271:
		case 272:
		case 273:
		case 274:
		case 275:
		case 276:
		case 277:
		case 278:
		case 279:
		case 280:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (velocity.X == 0f)
				{
					if (type == 140)
					{
						frame.Y = num;
						frameCounter = 0.0;
					}
					else
					{
						frame.Y = 0;
						frameCounter = 0.0;
					}
					break;
				}
				if (frame.Y < num * 2)
				{
					frame.Y = num * 2;
				}
				frameCounter += Math.Abs(velocity.X) * 2f;
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = num * 2;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = 0;
			}
			break;
		case 230:
			if (velocity.Y == 0f)
			{
				rotation = 0f;
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				frameCounter += Math.Abs(velocity.X) * 2f;
				frameCounter += 1.0;
				if (frameCounter > 10.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = 0;
				if (velocity.Y > 4f)
				{
					rotation -= velocity.Y * 0.01f;
				}
			}
			break;
		case 593:
			if (velocity.Y == 0f)
			{
				rotation = 0f;
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				frameCounter += Math.Abs(velocity.X) * 2f;
				frameCounter += 1.0;
				if (frameCounter > 10.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = 0;
				if (velocity.Y > 4f)
				{
					rotation -= velocity.Y * 0.01f;
				}
			}
			break;
		case 290:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (ai[2] > 0f)
				{
					if (ai[1] < 10f)
					{
						frame.Y = num * 11;
					}
					else if (ai[1] < 20f)
					{
						frame.Y = num * 10;
					}
					else
					{
						frame.Y = num * 9;
					}
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				if (frame.Y < num * 2)
				{
					frame.Y = num * 2;
				}
				frameCounter += Math.Abs(velocity.X) * 1f;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 8)
				{
					frame.Y = num * 2;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num;
			}
			break;
		case 110:
		case 214:
		case 215:
		case 216:
		case 293:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (ai[2] > 0f)
				{
					spriteDirection = direction;
					frame.Y = num * (int)ai[2];
					frameCounter = 0.0;
					break;
				}
				if (frame.Y < num * 6)
				{
					frame.Y = num * 6;
				}
				frameCounter += Math.Abs(velocity.X) * 2f;
				frameCounter += velocity.X;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = num * 6;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = 0;
			}
			break;
		case 206:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (ai[2] > 0f)
				{
					spriteDirection = direction;
					frame.Y = num * (int)ai[2];
					frameCounter = 0.0;
					break;
				}
				if (frame.Y < num * 6)
				{
					frame.Y = num * 6;
				}
				frameCounter += Math.Abs(velocity.X) * 2f;
				frameCounter += velocity.X;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = num * 6;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = 0;
			}
			break;
		case 350:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (ai[2] > 0f)
				{
					spriteDirection = direction;
					frame.Y = num * ((int)ai[2] - 1);
					frameCounter = 0.0;
					break;
				}
				if (frame.Y < num * 7)
				{
					frame.Y = num * 7;
				}
				frameCounter += Math.Abs(velocity.X) * 2f;
				frameCounter += velocity.X * 1.3f;
				if (frameCounter > 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = num * 7;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num * 5;
			}
			break;
		case 111:
		case 291:
		case 292:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (ai[2] > 0f)
				{
					spriteDirection = direction;
					frame.Y = num * ((int)ai[2] - 1);
					frameCounter = 0.0;
					break;
				}
				if (frame.Y < num * 7)
				{
					frame.Y = num * 7;
				}
				frameCounter += Math.Abs(velocity.X) * 2f;
				frameCounter += velocity.X * 1.3f;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = num * 7;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num * 6;
			}
			break;
		case 257:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
			}
			if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
			{
				frameCounter = 0.0;
				frame.Y = num * 4;
				break;
			}
			if (velocity.X == 0f)
			{
				frameCounter = 0.0;
				frame.Y = 0;
				break;
			}
			frameCounter += Math.Abs(velocity.X);
			if (frameCounter < 8.0)
			{
				frame.Y = 0;
			}
			else if (frameCounter < 16.0)
			{
				frame.Y = num;
			}
			else if (frameCounter < 24.0)
			{
				frame.Y = num * 2;
			}
			else if (frameCounter < 32.0)
			{
				frame.Y = num * 3;
			}
			else
			{
				frameCounter = 0.0;
			}
			break;
		case 258:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
			}
			if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
			{
				frameCounter += 1.0;
				if (frameCounter > 1.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 5 || frame.Y < num * 3)
				{
					frame.Y = num * 3;
				}
			}
			else if (velocity.X == 0f)
			{
				frameCounter = 0.0;
				frame.Y = 0;
			}
			else
			{
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter < 8.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 16.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 24.0)
				{
					frame.Y = num * 2;
				}
				else
				{
					frameCounter = 0.0;
				}
			}
			break;
		case 348:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
			}
			if (velocity.Y != 0f)
			{
				frameCounter = 0.0;
				frame.Y = num * 8;
				break;
			}
			if (velocity.X == 0f)
			{
				frameCounter = 0.0;
				frame.Y = 0;
				break;
			}
			frameCounter += Math.Abs(velocity.X);
			frameCounter += 1.0;
			if (frameCounter > 6.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y > num * 7)
			{
				frame.Y = num;
			}
			break;
		case 349:
			frameCounter += 1.0;
			if (frameCounter > 3.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y > num * 7)
			{
				frame.Y = 0;
			}
			break;
		case 3:
		case 52:
		case 53:
		case 132:
		case 161:
		case 186:
		case 187:
		case 188:
		case 189:
		case 200:
		case 223:
		case 251:
		case 254:
		case 255:
		case 319:
		case 320:
		case 321:
		case 331:
		case 332:
		case 342:
		case 536:
		case 590:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
			}
			if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
			{
				frameCounter = 0.0;
				frame.Y = num * 2;
				break;
			}
			if (velocity.X == 0f)
			{
				frameCounter = 0.0;
				frame.Y = 0;
				break;
			}
			frameCounter += Math.Abs(velocity.X);
			if (frameCounter < 8.0)
			{
				frame.Y = 0;
			}
			else if (frameCounter < 16.0)
			{
				frame.Y = num;
			}
			else if (frameCounter < 24.0)
			{
				frame.Y = num * 2;
			}
			else if (frameCounter < 32.0)
			{
				frame.Y = num;
			}
			else
			{
				frameCounter = 0.0;
			}
			break;
		case 148:
		case 149:
		case 168:
		case 470:
		{
			int num252 = 0;
			if (localAI[0] == 2f)
			{
				num252 = 3;
			}
			if (localAI[0] == 3f)
			{
				num252 = 6;
			}
			if (localAI[0] == 4f)
			{
				num252 = 9;
			}
			num252 *= num;
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (velocity.X == 0f)
				{
					frame.Y = num252;
					frameCounter = 0.0;
					break;
				}
				frameCounter += Math.Abs(velocity.X) * 1f;
				if (frameCounter < 6.0)
				{
					frame.Y = num252;
					break;
				}
				if (frameCounter < 12.0)
				{
					frame.Y = num + num252;
					break;
				}
				if (frameCounter < 15.0)
				{
					frame.Y = num * 2 + num252;
					break;
				}
				frameCounter = 0.0;
				frame.Y = num * 2 + num252;
			}
			else if (velocity.Y < 0f)
			{
				frameCounter = 0.0;
				frame.Y = num * 2 + num252;
			}
			else if (velocity.Y > 0f)
			{
				frameCounter = 0.0;
				frame.Y = num * 2 + num252;
			}
			break;
		}
		case 299:
		case 538:
		case 539:
		case 639:
		case 640:
		case 641:
		case 642:
		case 643:
		case 644:
		case 645:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				frameCounter += Math.Abs(velocity.X) * 0.5f;
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type] - 1)
				{
					frame.Y = num;
				}
			}
			else if (velocity.Y < 0f)
			{
				frameCounter = 0.0;
				frame.Y = num * 2;
			}
			else if (velocity.Y > 0f)
			{
				frameCounter = 0.0;
				frame.Y = num * 4;
			}
			break;
		case 300:
		case 447:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (velocity.X == 0f)
				{
					frameCounter += 1.0;
					if (frameCounter > 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 1)
					{
						frame.Y = 0;
					}
					break;
				}
				frameCounter += Math.Abs(velocity.X) * 0.5f;
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = num * 2;
				}
			}
			else
			{
				frameCounter += Math.Abs(velocity.X) * 0.5f;
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = num * 2;
				}
			}
			break;
		case 610:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (velocity.X == 0f)
				{
					frameCounter += 1.0;
					if (frameCounter > 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 1)
					{
						frame.Y = 0;
					}
					break;
				}
				frameCounter += Math.Abs(velocity.X) * 0.5f;
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = num * 2;
				}
			}
			else
			{
				frameCounter += Math.Abs(velocity.X) * 0.5f;
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = num * 2;
				}
			}
			break;
		case 361:
		case 445:
		case 687:
			spriteDirection = direction;
			if (wet)
			{
				frameCounter = 0.0;
				if (velocity.X > 0.25f || velocity.X < -0.25f)
				{
					frame.Y = num * 10;
				}
				else if (velocity.X > 0.15f || velocity.X < -0.15f)
				{
					frame.Y = num * 11;
				}
				else
				{
					frame.Y = num * 12;
				}
			}
			else if (velocity.Y == 0f)
			{
				if (velocity.X == 0f)
				{
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 5)
					{
						frame.Y = 0;
					}
					break;
				}
				frameCounter += 1.0;
				int num146 = 6;
				if (frameCounter < (double)num146)
				{
					frame.Y = 0;
					break;
				}
				if (frameCounter < (double)(num146 * 2))
				{
					frame.Y = num * 6;
					break;
				}
				if (frameCounter < (double)(num146 * 3))
				{
					frame.Y = num * 8;
					break;
				}
				frame.Y = num * 9;
				if (frameCounter >= (double)(num146 * 4 - 1))
				{
					frameCounter = 0.0;
				}
			}
			else if (velocity.Y > 0f)
			{
				frame.Y = num * 9;
			}
			else
			{
				frame.Y = num * 8;
			}
			break;
		case 616:
		case 617:
		{
			int num107 = 8;
			int num108 = 5;
			if (velocity.X == 0f)
			{
				num108 = 10;
			}
			spriteDirection = direction;
			if (wet)
			{
				frameCounter += 1.0;
				if (frameCounter > (double)num108)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y > num * 13)
					{
						frame.Y = num * 8;
					}
				}
				break;
			}
			frameCounter += 1.0;
			if (frameCounter > (double)num107)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y > num * 7)
				{
					frame.Y = 0;
				}
			}
			if (velocity.X == 0f)
			{
				frameCounter = 0.0;
				frame.Y = 0;
			}
			if (velocity.Y != 0f)
			{
				frameCounter = 0.0;
				frame.Y = num * 8;
			}
			break;
		}
		case 625:
		{
			int num97 = 7;
			int num98 = 4;
			if (velocity.X == 0f)
			{
				num98 = 8;
			}
			spriteDirection = direction;
			if (wet)
			{
				if (frame.Y < num * 6)
				{
					frame.Y = num * 6;
				}
				frameCounter += 1.0;
				if (frameCounter > (double)num98)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y > num * 11)
					{
						frame.Y = num * 6;
					}
				}
				break;
			}
			if (frame.Y > num * 5)
			{
				frame.Y = 0;
			}
			frameCounter += 1.0;
			if (frameCounter > (double)num97)
			{
				frameCounter = 0.0;
				frame.Y += num;
				if (frame.Y > num * 5)
				{
					frame.Y = 0;
				}
			}
			if (velocity.X == 0f)
			{
				frameCounter = 0.0;
				frame.Y = 0;
			}
			break;
		}
		case 626:
		case 627:
			if (velocity.X != 0f)
			{
				spriteDirection = ((!(velocity.X < 0f)) ? 1 : (-1));
			}
			if (IsABestiaryIconDummy)
			{
				frameCounter += 1.0;
				if (frameCounter > 5.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y > num * 5)
				{
					frame.Y = 0;
				}
			}
			else if (!wet)
			{
				frame.Y = 0;
			}
			else if (((Vector2)(ref velocity)).Length() > 0.15f)
			{
				frame.Y = num * 3;
			}
			else if (((Vector2)(ref velocity)).Length() > 0.05f)
			{
				frame.Y = num * 2;
			}
			else if (((Vector2)(ref velocity)).Length() > 0.025f)
			{
				frame.Y = num;
			}
			else
			{
				frame.Y = 0;
			}
			break;
		case 366:
		case 367:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
			}
			if (velocity.X == 0f)
			{
				frame.Y = 0;
				frameCounter = 0.0;
				break;
			}
			frameCounter += Math.Abs(velocity.X) * 1f;
			frameCounter += 1.0;
			if (frameCounter > 6.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y / num >= Main.npcFrameCount[type])
			{
				frame.Y = 0;
			}
			break;
		case 46:
		case 47:
		case 303:
		case 337:
		case 443:
		case 464:
		case 540:
		case 614:
		case 646:
		case 647:
		case 648:
		case 649:
		case 650:
		case 651:
		case 652:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				frameCounter += Math.Abs(velocity.X) * 1f;
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
			}
			else if (velocity.Y < 0f)
			{
				frameCounter = 0.0;
				frame.Y = num * 4;
			}
			else if (velocity.Y > 0f)
			{
				frameCounter = 0.0;
				frame.Y = num * 6;
			}
			break;
		case 4:
		case 125:
		case 126:
			frameCounter += 1.0;
			if (frameCounter < 7.0)
			{
				frame.Y = 0;
			}
			else if (frameCounter < 14.0)
			{
				frame.Y = num;
			}
			else if (frameCounter < 21.0)
			{
				frame.Y = num * 2;
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = 0;
			}
			if (ai[0] > 1f)
			{
				frame.Y += num * 3;
			}
			break;
		case 5:
			frameCounter += 1.0;
			if (frameCounter >= 8.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y >= num * Main.npcFrameCount[type])
			{
				frame.Y = 0;
			}
			break;
		case 94:
			frameCounter += 1.0;
			if (frameCounter < 6.0)
			{
				frame.Y = 0;
				break;
			}
			if (frameCounter < 12.0)
			{
				frame.Y = num;
				break;
			}
			if (frameCounter < 18.0)
			{
				frame.Y = num * 2;
				break;
			}
			frame.Y = num;
			if (frameCounter >= 23.0)
			{
				frameCounter = 0.0;
			}
			break;
		case 6:
		case 173:
			frameCounter += 1.0;
			if (frameCounter >= 8.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y >= num * Main.npcFrameCount[type])
			{
				frame.Y = 0;
			}
			break;
		case 24:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
			}
			if (ai[1] > 0f)
			{
				if (frame.Y < 4)
				{
					frameCounter = 0.0;
				}
				frameCounter += 1.0;
				if (frameCounter <= 4.0)
				{
					frame.Y = num * 4;
					break;
				}
				if (frameCounter <= 8.0)
				{
					frame.Y = num * 5;
					break;
				}
				if (frameCounter <= 12.0)
				{
					frame.Y = num * 6;
					break;
				}
				if (frameCounter <= 16.0)
				{
					frame.Y = num * 7;
					break;
				}
				if (frameCounter <= 20.0)
				{
					frame.Y = num * 8;
					break;
				}
				frame.Y = num * 9;
				frameCounter = 100.0;
				break;
			}
			frameCounter += 1.0;
			if (frameCounter <= 4.0)
			{
				frame.Y = 0;
				break;
			}
			if (frameCounter <= 8.0)
			{
				frame.Y = num;
				break;
			}
			if (frameCounter <= 12.0)
			{
				frame.Y = num * 2;
				break;
			}
			frame.Y = num * 3;
			if (frameCounter >= 16.0)
			{
				frameCounter = 0.0;
			}
			break;
		case 29:
		case 32:
		case 45:
		case 172:
		case 281:
		case 282:
		case 283:
		case 284:
		case 285:
		case 286:
			if (velocity.Y == 0f)
			{
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
			}
			frame.Y = 0;
			if (velocity.Y != 0f)
			{
				frame.Y += num * 2;
			}
			else if (ai[1] > 0f)
			{
				frame.Y += num;
			}
			break;
		case 34:
			frameCounter += 1.0;
			if (frameCounter >= 4.0)
			{
				frame.Y += num;
				frameCounter = 0.0;
			}
			if (frame.Y >= num * Main.npcFrameCount[type])
			{
				frame.Y = 0;
			}
			break;
		case 624:
			if (velocity.Y == 0f)
			{
				spriteDirection = direction;
			}
			if (velocity.X == 0f && velocity.Y == 0f)
			{
				frameCounter = 0.0;
				frame.Y = 0;
				break;
			}
			if (velocity.Y < 0f)
			{
				frameCounter = 0.0;
				frame.Y = 9 * num;
				break;
			}
			if (velocity.Y > 0f)
			{
				frameCounter = 0.0;
				frame.Y = 10 * num;
				break;
			}
			frameCounter += Math.Abs(velocity.X);
			if (frameCounter > 8.0)
			{
				int num256 = frame.Y / num;
				frameCounter -= 8.0;
				num256++;
				if (num256 > 8)
				{
					num256 = 1;
				}
				frame.Y = num256 * num;
			}
			break;
		case 628:
			{
				spriteDirection = ((!(Main.WindForVisuals > 0f)) ? 1 : (-1));
				if (IsABestiaryIconDummy)
				{
					int num229 = frame.Y / num;
					int num240 = 5;
					spriteDirection = 1;
					frameCounter += 1.0;
					if (frameCounter > (double)num240)
					{
						frameCounter -= num240;
						num229++;
						if (num229 > 5)
						{
							num229 = 0;
						}
						frame.Y = num229 * num;
					}
				}
				else if (ai[0] == 0f)
				{
					int num251 = frame.Y / num;
					int num261 = 8;
					if (num251 == 6)
					{
						frameCounter += 1f + 0.5f * Math.Abs(Main.WindForVisuals);
						if (frameCounter > (double)num261)
						{
							frameCounter -= num261;
							num251 = 0;
							frame.Y = num251 * num;
						}
						break;
					}
					if (num251 > 5)
					{
						num251 = 6;
						frameCounter = 0.0;
						frame.Y = num251 * num;
						break;
					}
					frameCounter += 1f + 0.5f * Math.Abs(Main.WindForVisuals);
					if (frameCounter > (double)num261)
					{
						frameCounter -= num261;
						num251++;
						if (num251 > 5)
						{
							num251 = 0;
						}
						frame.Y = num251 * num;
					}
				}
				else if (localAI[0] == 0f)
				{
					frameCounter += 1.0;
					if (!(frameCounter > 4.0))
					{
						break;
					}
					frameCounter = 0.0;
					int num272 = frame.Y / num;
					if (num272 == 6)
					{
						num272 = 7;
					}
					else if (num272 < 7)
					{
						num272 = 6;
					}
					else
					{
						num272++;
						if (num272 > 10)
						{
							num272 = 7;
						}
					}
					frame.Y = num272 * num;
				}
				else if (localAI[0] == 1f)
				{
					int num283 = frame.Y / num;
					num283 = (int)MathHelper.Lerp(7f, 20f, (float)frameCounter / 80f);
					if (num283 > 19)
					{
						num283 = 19;
					}
					if (num283 > 16)
					{
						num283 -= 9;
					}
					frameCounter += 1.0;
					if (frameCounter > 80.0)
					{
						frameCounter = 0.0;
					}
					frame.Y = num283 * num;
				}
				break;
			}
			IL_e660:
			rotation = velocity.X * 0.1f;
			if (velocity.X == 0f && velocity.Y == 0f)
			{
				frame.Y = 0;
				frameCounter = 0.0;
				break;
			}
			frameCounter += 1.0;
			if (frameCounter > 4.0)
			{
				frameCounter = 0.0;
				frame.Y += num;
			}
			if (frame.Y > num * 4 || frame.Y == 0)
			{
				frame.Y = num;
			}
			break;
		}
		if (aiStyle == 39 && type != 417)
		{
			if (ai[0] == 0f)
			{
				rotation = 0f;
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0.0;
				}
				frameCounter += Math.Abs(velocity.X) * 1.1f;
				if (frameCounter < 6.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 18.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 24.0)
				{
					frame.Y = num * 3;
				}
				else if (frameCounter < 32.0)
				{
					frame.Y = num * 4;
				}
				else
				{
					frameCounter = 0.0;
				}
			}
			else if (ai[0] == 1f)
			{
				frameCounter = 0.0;
				if (ai[1] < 10f)
				{
					frame.Y = num * 5;
				}
				else if (ai[1] < 20f)
				{
					frame.Y = num * 6;
				}
				else
				{
					frame.Y = num * 7;
				}
			}
			else if (ai[0] == 5f)
			{
				frameCounter = 0.0;
				if (ai[1] < 10f)
				{
					frame.Y = num * 7;
				}
				else if (ai[1] < 20f)
				{
					frame.Y = num * 6;
				}
				else
				{
					frame.Y = num * 5;
				}
			}
			else
			{
				frameCounter = 0.0;
				frame.Y = num * 7;
			}
		}
		position -= netOffset;
	}

	private static int FindFrame_FromSequence(int sequenceFrame, int[] frames)
	{
		int num = sequenceFrame;
		if (num >= frames.Length)
		{
			num = frames.Length - 1;
		}
		return frames[num];
	}

	private static int FindFrame_Deerclops_GetAttack1Frame(int sequenceFrame)
	{
		return FindFrame_FromSequence(sequenceFrame, _deerclopsAttack1Frames);
	}

	private static int FindFrame_Deerclops_GetAttack2Frame(int sequenceFrame)
	{
		return FindFrame_FromSequence(sequenceFrame, _deerclopsAttack2Frames);
	}

	private static int FindFrame_Deerclops_GetAttack3Frame(int sequenceFrame)
	{
		return FindFrame_FromSequence(sequenceFrame, _deerclopsAttack3Frames);
	}

	public void SimpleFlyMovement(Vector2 desiredVelocity, float moveSpeed)
	{
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_012e: Unknown result type (might be due to invalid IL or missing references)
		if (velocity.X < desiredVelocity.X)
		{
			velocity.X += moveSpeed;
			if (velocity.X < 0f && desiredVelocity.X > 0f)
			{
				velocity.X += moveSpeed;
			}
		}
		else if (velocity.X > desiredVelocity.X)
		{
			velocity.X -= moveSpeed;
			if (velocity.X > 0f && desiredVelocity.X < 0f)
			{
				velocity.X -= moveSpeed;
			}
		}
		if (velocity.Y < desiredVelocity.Y)
		{
			velocity.Y += moveSpeed;
			if (velocity.Y < 0f && desiredVelocity.Y > 0f)
			{
				velocity.Y += moveSpeed;
			}
		}
		else if (velocity.Y > desiredVelocity.Y)
		{
			velocity.Y -= moveSpeed;
			if (velocity.Y > 0f && desiredVelocity.Y < 0f)
			{
				velocity.Y -= moveSpeed;
			}
		}
	}

	public void HealEffect(int healAmount, bool broadcast = true)
	{
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		HealEffect(new Rectangle((int)position.X, (int)position.Y, width, height), healAmount, broadcast);
	}

	public static void HealEffect(Rectangle r, int healAmount, bool broadcast = true)
	{
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		if (broadcast && Main.netMode == 2)
		{
			Color healLife = CombatText.HealLife;
			NetMessage.SendData(81, -1, -1, null, (int)((Color)(ref healLife)).PackedValue, ((Rectangle)(ref r)).Center.X, ((Rectangle)(ref r)).Center.Y, healAmount);
		}
		else
		{
			CombatText.NewText(r, CombatText.HealLife, healAmount);
		}
	}

	public int FindClosestPlayer()
	{
		float distanceToPlayer;
		return FindClosestPlayer(out distanceToPlayer);
	}

	public int FindClosestPlayer(out float distanceToPlayer)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		Vector2 center = base.Center;
		float num = float.MaxValue;
		int num2 = -1;
		for (int i = 0; i < 255; i++)
		{
			Player player2 = Main.player[i];
			if (player2.active && !player2.dead && !player2.ghost)
			{
				float num3 = Vector2.DistanceSquared(center, player2.Center);
				if (num3 < num)
				{
					num = num3;
					num2 = i;
				}
			}
		}
		if (num2 < 0)
		{
			for (int j = 0; j < 255; j++)
			{
				Player player = Main.player[j];
				if (player.active)
				{
					float num4 = Vector2.DistanceSquared(center, player.Center);
					if (num4 < num)
					{
						num = num4;
						num2 = j;
					}
				}
			}
		}
		distanceToPlayer = (float)Math.Sqrt(num);
		return num2;
	}

	public void BigMimicSpawnSmoke()
	{
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		if (Main.netMode == 2)
		{
			NetMessage.SendData(51, -1, -1, null, whoAmI, 4f);
			return;
		}
		for (int i = 0; i < 20; i++)
		{
			int num = Dust.NewDust(position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
			Dust obj = Main.dust[num];
			obj.velocity *= 2f;
			Main.dust[num].noGravity = true;
		}
		for (int j = 0; j < 3; j++)
		{
			for (int k = 0; k < 2; k++)
			{
				int num2 = Gore.NewGore(new Vector2(position.X + (float)(width * j) * 0.45f - 20f, position.Y + (float)(height * k) * 0.5f + 10f), new Vector2(0f, 0f), 99, 1.1f);
				Gore obj2 = Main.gore[num2];
				obj2.velocity *= 0.3f;
			}
		}
	}

	public static bool BigMimicSummonCheck(int x, int y, Player user)
	{
		if (Main.netMode == 1 || !Main.hardMode)
		{
			return false;
		}
		int num = Chest.FindChest(x, y);
		if (num < 0)
		{
			return false;
		}
		int num2 = 0;
		int num3 = 0;
		int num4 = 0;
		for (int i = 0; i < 40; i++)
		{
			ushort num5 = Main.tile[Main.chest[num].x, Main.chest[num].y].type;
			int num6 = Main.tile[Main.chest[num].x, Main.chest[num].y].frameX / 36;
			if (TileID.Sets.BasicChest[num5] && (num5 != 21 || num6 < 5 || num6 > 6) && Main.chest[num].item[i] != null && Main.chest[num].item[i].type > 0)
			{
				if (Main.chest[num].item[i].type == 3092)
				{
					num2 += Main.chest[num].item[i].stack;
				}
				else if (Main.chest[num].item[i].type == 3091)
				{
					num3 += Main.chest[num].item[i].stack;
				}
				else
				{
					num4++;
				}
			}
		}
		if (num4 == 0 && num2 + num3 == 1)
		{
			_ = 1;
			if (TileID.Sets.BasicChest[Main.tile[x, y].type])
			{
				if (Main.tile[x, y].frameX % 36 != 0)
				{
					x--;
				}
				if (Main.tile[x, y].frameY % 36 != 0)
				{
					y--;
				}
				int number = Chest.FindChest(x, y);
				for (int j = 0; j < 40; j++)
				{
					Main.chest[num].item[j] = new Item();
				}
				Chest.DestroyChest(x, y);
				for (int k = x; k <= x + 1; k++)
				{
					for (int l = y; l <= y + 1; l++)
					{
						if (TileID.Sets.BasicChest[Main.tile[k, l].type])
						{
							Main.tile[k, l].ClearTile();
						}
					}
				}
				int number2 = 1;
				if (Main.tile[x, y].type == 467)
				{
					number2 = 5;
				}
				if (Main.tile[x, y].type >= TileID.Count)
				{
					number2 = 101;
				}
				NetMessage.SendData(34, -1, -1, null, number2, x, y, 0f, number, Main.tile[x, y].type);
				NetMessage.SendTileSquare(-1, x, y, 3);
			}
			int num7 = 475;
			if (num3 == 1)
			{
				num7 = ((!WorldGen.crimson) ? 473 : 474);
			}
			int num8 = NewNPC(user.GetNPCSource_TileInteraction(x, y), x * 16 + 16, y * 16 + 32, num7);
			Main.npc[num8].whoAmI = num8;
			NetMessage.SendData(23, -1, -1, null, num8);
			Main.npc[num8].BigMimicSpawnSmoke();
		}
		return false;
	}

	public bool ShouldFaceTarget(ref NPCUtils.TargetSearchResults searchResults, NPCUtils.TargetType? overrideTargetType = null)
	{
		NPCUtils.TargetType nearestTargetType = searchResults.NearestTargetType;
		if (overrideTargetType.HasValue)
		{
			nearestTargetType = overrideTargetType.Value;
		}
		switch (nearestTargetType)
		{
		case NPCUtils.TargetType.NPC:
		case NPCUtils.TargetType.TankPet:
			return true;
		case NPCUtils.TargetType.Player:
		{
			bool flag = true;
			Player nearestTankOwner = searchResults.NearestTankOwner;
			if (nearestTankOwner.dead || (nearestTankOwner.npcTypeNoAggro[type] && direction != 0))
			{
				flag = false;
			}
			if (!flag)
			{
				break;
			}
			float num = (float)(nearestTankOwner.width + nearestTankOwner.height + width + height) / 4f + 800f;
			if (nearestTankOwner.itemAnimation == 0 && nearestTankOwner.aggro < 0 && searchResults.NearestTankDistance > num)
			{
				if (oldTarget >= 0)
				{
					return oldTarget >= 255;
				}
				return true;
			}
			return true;
		}
		}
		return false;
	}

	public void FaceTarget()
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		direction = ((!((float)((Rectangle)(ref targetRect)).Center.X < base.Center.X)) ? 1 : (-1));
		directionY = ((!((float)((Rectangle)(ref targetRect)).Center.Y < base.Center.Y)) ? 1 : (-1));
	}

	public void TargetClosestUpgraded(bool faceTarget = true, Vector2? checkPosition = null)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_022b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0230: Unknown result type (might be due to invalid IL or missing references)
		//IL_023c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0248: Unknown result type (might be due to invalid IL or missing references)
		//IL_01eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0264: Unknown result type (might be due to invalid IL or missing references)
		//IL_0270: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		//IL_0346: Unknown result type (might be due to invalid IL or missing references)
		//IL_0352: Unknown result type (might be due to invalid IL or missing references)
		//IL_036e: Unknown result type (might be due to invalid IL or missing references)
		//IL_037a: Unknown result type (might be due to invalid IL or missing references)
		int num = -1;
		int num2 = -1;
		int num3 = -1;
		Vector2 center = base.Center;
		if (checkPosition.HasValue)
		{
			center = checkPosition.Value;
		}
		bool flag = direction == 0;
		float num4 = 9999999f;
		for (int i = 0; i < 255; i++)
		{
			Player player = Main.player[i];
			if (!player.active || player.dead || player.ghost)
			{
				continue;
			}
			float num5 = Vector2.Distance(center, player.Center);
			num5 -= (float)player.aggro;
			bool flag2 = player.npcTypeNoAggro[type];
			if (flag2 && !flag)
			{
				num5 += 1000f;
			}
			if (num5 < num4)
			{
				num = i;
				num2 = -1;
				num4 = num5;
			}
			if (player.tankPet >= 0 && !flag2)
			{
				num5 = Vector2.Distance(center, Main.projectile[player.tankPet].Center);
				num5 -= 200f;
				if (num5 < num4 && num5 < 200f && Collision.CanHit(base.Center, 0, 0, Main.projectile[player.tankPet].Center, 0, 0))
				{
					num2 = player.tankPet;
					num4 = num5;
				}
			}
		}
		for (int j = 0; j < 200; j++)
		{
			NPC nPC = Main.npc[j];
			if (nPC.active && nPC.type == 548)
			{
				float num6 = Vector2.Distance(center, nPC.Center);
				if (num4 > num6)
				{
					num3 = j;
					num = -1;
					num2 = -1;
					num4 = num6;
				}
			}
		}
		if (num4 == 9999999f)
		{
			return;
		}
		if (num3 >= 0)
		{
			target = Main.npc[num3].WhoAmIToTargettingIndex;
			targetRect = Main.npc[num3].Hitbox;
			direction = ((!((float)((Rectangle)(ref targetRect)).Center.X < base.Center.X)) ? 1 : (-1));
			directionY = ((!((float)((Rectangle)(ref targetRect)).Center.Y < base.Center.Y)) ? 1 : (-1));
			return;
		}
		if (num2 >= 0)
		{
			target = Main.projectile[num2].owner;
			targetRect = Main.projectile[num2].Hitbox;
			direction = ((!((float)((Rectangle)(ref targetRect)).Center.X < base.Center.X)) ? 1 : (-1));
			directionY = ((!((float)((Rectangle)(ref targetRect)).Center.Y < base.Center.Y)) ? 1 : (-1));
			return;
		}
		if (num < 0 || num >= 255)
		{
			num = 0;
		}
		Player player2 = Main.player[num];
		targetRect = player2.Hitbox;
		target = num;
		if (player2.dead || (player2.npcTypeNoAggro[type] && !flag))
		{
			faceTarget = false;
		}
		if (faceTarget)
		{
			float num7 = (float)(player2.width + player2.height + width + height) / 4f + 800f;
			float num8 = num4 - (float)player2.aggro;
			if (player2.itemAnimation != 0 || player2.aggro >= 0 || !(num8 > num7) || oldTarget < 0 || oldTarget >= 255)
			{
				direction = ((!((float)((Rectangle)(ref targetRect)).Center.X < base.Center.X)) ? 1 : (-1));
				directionY = ((!((float)((Rectangle)(ref targetRect)).Center.Y < base.Center.Y)) ? 1 : (-1));
			}
		}
	}

	public void TargetClosest(bool faceTarget = true)
	{
		float distance = 0f;
		float realDist = 0f;
		bool t = false;
		int tankTarget = -1;
		for (int i = 0; i < 255; i++)
		{
			if (Main.player[i].active && !Main.player[i].dead && !Main.player[i].ghost)
			{
				TryTrackingTarget(ref distance, ref realDist, ref t, ref tankTarget, i);
			}
		}
		SetTargetTrackingValues(faceTarget, realDist, tankTarget);
	}

	public void TargetClosest_WOF(bool faceTarget = true)
	{
		float distance = 0f;
		float realDist = 0f;
		bool t = false;
		int tankTarget = -1;
		for (int i = 0; i < 255; i++)
		{
			if (Main.player[i].active && !Main.player[i].dead && !Main.player[i].ghost && Main.player[i].gross)
			{
				TryTrackingTarget(ref distance, ref realDist, ref t, ref tankTarget, i);
			}
		}
		SetTargetTrackingValues(faceTarget, realDist, tankTarget);
	}

	private void TryTrackingTarget(ref float distance, ref float realDist, ref bool t, ref int tankTarget, int j)
	{
		//IL_021c: Unknown result type (might be due to invalid IL or missing references)
		//IL_022a: Unknown result type (might be due to invalid IL or missing references)
		float num = Math.Abs(Main.player[j].position.X + (float)(Main.player[j].width / 2) - position.X + (float)(width / 2)) + Math.Abs(Main.player[j].position.Y + (float)(Main.player[j].height / 2) - position.Y + (float)(height / 2));
		num -= (float)Main.player[j].aggro;
		if (Main.player[j].npcTypeNoAggro[type] && direction != 0)
		{
			num += 1000f;
		}
		if (!t || num < distance)
		{
			t = true;
			tankTarget = -1;
			realDist = Math.Abs(Main.player[j].position.X + (float)(Main.player[j].width / 2) - position.X + (float)(width / 2)) + Math.Abs(Main.player[j].position.Y + (float)(Main.player[j].height / 2) - position.Y + (float)(height / 2));
			distance = num;
			target = j;
		}
		if (Main.player[j].tankPet >= 0 && !Main.player[j].npcTypeNoAggro[type])
		{
			int tankPet = Main.player[j].tankPet;
			float num2 = Math.Abs(Main.projectile[tankPet].position.X + (float)(Main.projectile[tankPet].width / 2) - position.X + (float)(width / 2)) + Math.Abs(Main.projectile[tankPet].position.Y + (float)(Main.projectile[tankPet].height / 2) - position.Y + (float)(height / 2));
			num2 -= 200f;
			if (num2 < distance && num2 < 200f && Collision.CanHit(base.Center, 1, 1, Main.projectile[tankPet].Center, 1, 1))
			{
				tankTarget = tankPet;
			}
		}
	}

	private void SetTargetTrackingValues(bool faceTarget, float realDist, int tankTarget)
	{
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_0147: Unknown result type (might be due to invalid IL or missing references)
		if (tankTarget >= 0)
		{
			targetRect = new Rectangle((int)Main.projectile[tankTarget].position.X, (int)Main.projectile[tankTarget].position.Y, Main.projectile[tankTarget].width, Main.projectile[tankTarget].height);
			direction = 1;
			if ((float)(targetRect.X + targetRect.Width / 2) < position.X + (float)(width / 2))
			{
				direction = -1;
			}
			directionY = 1;
			if ((float)(targetRect.Y + targetRect.Height / 2) < position.Y + (float)(height / 2))
			{
				directionY = -1;
			}
		}
		else
		{
			if (target < 0 || target >= 255)
			{
				target = 0;
			}
			targetRect = new Rectangle((int)Main.player[target].position.X, (int)Main.player[target].position.Y, Main.player[target].width, Main.player[target].height);
			if (Main.player[target].dead)
			{
				faceTarget = false;
			}
			if (Main.player[target].npcTypeNoAggro[type] && direction != 0)
			{
				faceTarget = false;
			}
			if (faceTarget)
			{
				_ = Main.player[target].aggro;
				_ = (Main.player[target].height + Main.player[target].width + height + width) / 4;
				bool flag = oldTarget >= 0 && oldTarget <= 254;
				bool num = Main.player[target].itemAnimation == 0 && Main.player[target].aggro < 0;
				bool flag2 = !boss;
				if (!(num && flag && flag2))
				{
					direction = 1;
					if ((float)(targetRect.X + targetRect.Width / 2) < position.X + (float)(width / 2))
					{
						direction = -1;
					}
					directionY = 1;
					if ((float)(targetRect.Y + targetRect.Height / 2) < position.Y + (float)(height / 2))
					{
						directionY = -1;
					}
				}
			}
		}
		if (confused)
		{
			direction *= -1;
		}
		if ((direction != oldDirection || directionY != oldDirectionY || target != oldTarget) && !collideX && !collideY)
		{
			netUpdate = true;
		}
	}

	public bool DoesntDespawnToInactivityAndCountsNPCSlots()
	{
		return type == 668;
	}

	public bool DoesntDespawnToInactivity()
	{
		switch (type)
		{
		case 8:
		case 9:
		case 11:
		case 12:
		case 14:
		case 15:
		case 36:
		case 40:
		case 41:
		case 88:
		case 89:
		case 90:
		case 91:
		case 92:
		case 96:
		case 97:
		case 99:
		case 100:
		case 113:
		case 114:
		case 115:
		case 118:
		case 119:
		case 128:
		case 129:
		case 130:
		case 131:
		case 134:
		case 135:
		case 136:
		case 246:
		case 247:
		case 248:
		case 249:
		case 263:
		case 267:
		case 328:
		case 379:
		case 380:
		case 392:
		case 393:
		case 394:
		case 396:
		case 397:
		case 398:
		case 400:
		case 422:
		case 437:
		case 438:
		case 439:
		case 440:
		case 488:
		case 492:
		case 493:
		case 507:
		case 517:
		case 548:
		case 549:
		case 551:
		case 564:
		case 565:
			return true;
		case 139:
			if (npcsFoundForCheckActive[134])
			{
				return true;
			}
			break;
		case 552:
		case 553:
		case 554:
		case 555:
		case 556:
		case 557:
		case 558:
		case 559:
		case 560:
		case 561:
		case 562:
		case 563:
		case 566:
		case 567:
		case 568:
		case 569:
		case 570:
		case 571:
		case 572:
		case 573:
		case 574:
		case 575:
		case 576:
		case 577:
		case 578:
			if (npcsFoundForCheckActive[548])
			{
				return true;
			}
			break;
		}
		return false;
	}

	public void CheckActive()
	{
		//IL_0126: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ca: Unknown result type (might be due to invalid IL or missing references)
		if (!active || DoesntDespawnToInactivity() || !NPCLoader.CheckActive(this))
		{
			return;
		}
		if (townNPC)
		{
			AddIntoPlayersTownNPCSlots();
			return;
		}
		bool flag = DoesntDespawnToInactivityAndCountsNPCSlots();
		bool flag2 = false;
		Rectangle rectangle = default(Rectangle);
		((Rectangle)(ref rectangle))._002Ector((int)(position.X + (float)(width / 2) - (float)activeRangeX), (int)(position.Y + (float)(height / 2) - (float)activeRangeY), activeRangeX * 2, activeRangeY * 2);
		Rectangle rectangle2 = default(Rectangle);
		((Rectangle)(ref rectangle2))._002Ector((int)((double)(position.X + (float)(width / 2)) - (double)sWidth * 0.5 - (double)width), (int)((double)(position.Y + (float)(height / 2)) - (double)sHeight * 0.5 - (double)height), sWidth + width * 2, sHeight + height * 2);
		for (int i = 0; i < 255; i++)
		{
			if (!Main.player[i].active)
			{
				continue;
			}
			Rectangle hitbox = Main.player[i].Hitbox;
			if (((Rectangle)(ref rectangle)).Intersects(hitbox))
			{
				flag2 = true;
				if (type != 25 && type != 30 && type != 33 && releaseOwner == 255 && lifeMax > 0)
				{
					if (Main.slimeRain && Main.slimeRainNPC[type])
					{
						Main.player[i].nearbyActiveNPCs += npcSlots * Main.slimeRainNPCSlots;
					}
					else
					{
						Main.player[i].nearbyActiveNPCs += npcSlots;
					}
				}
			}
			if (flag)
			{
				continue;
			}
			if (((Rectangle)(ref rectangle2)).Intersects(hitbox))
			{
				timeLeft = activeTime;
				despawnEncouraged = false;
				if (i == Main.myPlayer && (type == 604 || type == 605))
				{
					LadyBugLuck(i, type == 605);
				}
			}
			if (boss)
			{
				flag2 = true;
			}
			switch (type)
			{
			case 7:
			case 10:
			case 13:
			case 35:
			case 36:
			case 39:
			case 87:
			case 127:
			case 128:
			case 129:
			case 130:
			case 131:
			case 392:
			case 393:
			case 394:
			case 491:
			case 492:
				flag2 = true;
				break;
			case 399:
				if (ai[0] == 2f || ai[0] == 1f)
				{
					timeLeft = activeTime;
				}
				flag2 = true;
				break;
			case 583:
			case 584:
			case 585:
				if (!Main.dayTime && ai[2] == 0f)
				{
					flag2 = true;
					timeLeft = activeTime;
				}
				break;
			}
		}
		if (flag)
		{
			return;
		}
		timeLeft--;
		if (timeLeft <= 0)
		{
			flag2 = false;
		}
		if (!flag2 && Main.netMode != 1 && !NPCLoader.SavesAndLoads(this))
		{
			noSpawnCycle = true;
			active = false;
			if (Main.netMode == 2)
			{
				netSkip = -1;
				life = 0;
				NetMessage.SendData(23, -1, -1, null, whoAmI);
			}
			if (extraValue > 0)
			{
				RevengeManager.CacheEnemy(this);
			}
			CheckActive_WormSegments();
		}
	}

	private void CheckActive_WormSegments()
	{
		if (aiStyle != 6)
		{
			return;
		}
		int num = (int)ai[0];
		while (num != whoAmI && num > 0 && num < 200)
		{
			NPC nPC = Main.npc[num];
			if (nPC.active && nPC.aiStyle == 6)
			{
				nPC.active = false;
				if (Main.netMode == 2)
				{
					nPC.life = 0;
					nPC.netSkip = -1;
					NetMessage.SendData(23, -1, -1, null, num);
				}
				num = (int)nPC.ai[0];
				continue;
			}
			break;
		}
	}

	private void AddIntoPlayersTownNPCSlots()
	{
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		Rectangle rectangle = default(Rectangle);
		((Rectangle)(ref rectangle))._002Ector((int)(position.X + (float)(width / 2) - (float)townRangeX), (int)(position.Y + (float)(height / 2) - (float)townRangeY), townRangeX * 2, townRangeY * 2);
		for (int i = 0; i < 255; i++)
		{
			if (Main.player[i].active && ((Rectangle)(ref rectangle)).Intersects(Main.player[i].Hitbox))
			{
				Main.player[i].townNPCs += npcSlots;
			}
		}
	}

	public void checkDead()
	{
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0298: Unknown result type (might be due to invalid IL or missing references)
		//IL_0620: Unknown result type (might be due to invalid IL or missing references)
		//IL_0331: Unknown result type (might be due to invalid IL or missing references)
		//IL_0354: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_0676: Unknown result type (might be due to invalid IL or missing references)
		//IL_067b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0689: Unknown result type (might be due to invalid IL or missing references)
		//IL_068e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0698: Unknown result type (might be due to invalid IL or missing references)
		//IL_069d: Unknown result type (might be due to invalid IL or missing references)
		//IL_054b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0762: Unknown result type (might be due to invalid IL or missing references)
		//IL_0764: Unknown result type (might be due to invalid IL or missing references)
		//IL_0770: Unknown result type (might be due to invalid IL or missing references)
		//IL_0772: Unknown result type (might be due to invalid IL or missing references)
		//IL_06fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0707: Unknown result type (might be due to invalid IL or missing references)
		//IL_071c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0726: Unknown result type (might be due to invalid IL or missing references)
		//IL_0748: Unknown result type (might be due to invalid IL or missing references)
		//IL_074d: Unknown result type (might be due to invalid IL or missing references)
		if (!active || (realLife >= 0 && realLife != whoAmI) || life > 0)
		{
			return;
		}
		if (type == 604 || type == 605)
		{
			LadyBugKilled(base.Center, type == 605);
		}
		if (type == 397 || type == 396)
		{
			if (ai[0] != -2f)
			{
				ai[0] = -2f;
				life = lifeMax;
				netUpdate = true;
				dontTakeDamage = true;
				if (Main.netMode != 1)
				{
					int num = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X, (int)base.Center.Y, 400);
					Main.npc[num].ai[3] = ai[3];
					Main.npc[num].netUpdate = true;
				}
			}
			return;
		}
		if (type == 398 && ai[0] != 2f)
		{
			ai[0] = 2f;
			life = lifeMax;
			netUpdate = true;
			dontTakeDamage = true;
			return;
		}
		if ((type == 517 || type == 422 || type == 507 || type == 493) && ai[2] != 1f)
		{
			ai[2] = 1f;
			ai[1] = 0f;
			life = lifeMax;
			dontTakeDamage = true;
			netUpdate = true;
			return;
		}
		if (type == 548 && ai[1] != 1f)
		{
			ai[1] = 1f;
			ai[0] = 0f;
			life = lifeMax;
			dontTakeDamageFromHostiles = true;
			netUpdate = true;
			return;
		}
		if (Main.netMode != 1 && Main.getGoodWorld && (type == 42 || type == 176 || (type >= 231 && type <= 235)))
		{
			StingerExplosion();
		}
		if (Main.netMode != 1 && Main.getGoodWorld)
		{
			if (type == 13)
			{
				int num3 = NewNPC(GetSpawnSourceForNaturalSpawn(), (int)base.Center.X, (int)(position.Y + (float)height), -12);
				if (Main.netMode == 2 && num3 < 200)
				{
					NetMessage.SendData(23, -1, -1, null, num3);
				}
			}
			if (type == 36)
			{
				int num4 = 3;
				for (int i = 0; i < num4; i++)
				{
					int num5 = 1000;
					for (int j = 0; j < num5; j++)
					{
						int num6 = (int)(base.Center.X / 16f) + Main.rand.Next(-50, 51);
						int k;
						for (k = (int)(base.Center.Y / 16f) + Main.rand.Next(-50, 51); k < Main.maxTilesY - 200 && !WorldGen.SolidTile(num6, k); k++)
						{
						}
						k--;
						if (!WorldGen.SolidTile(num6, k))
						{
							int num7 = NewNPC(GetSpawnSourceForNaturalSpawn(), num6 * 16 + 8, k * 16, 32);
							if (Main.netMode == 2 && num7 < 200)
							{
								NetMessage.SendData(23, -1, -1, null, num7);
							}
							break;
						}
					}
				}
			}
		}
		if (!NPCLoader.CheckDead(this))
		{
			return;
		}
		noSpawnCycle = true;
		if (townNPC && type != 37 && type != 453)
		{
			if (Main.netMode != 2)
			{
				NPCLuck();
			}
			bool flag = true;
			NetworkText fullNetName = GetFullNetName();
			int num8 = 19;
			if (type == 369 || type == 663 || NPCID.Sets.IsTownPet[type])
			{
				num8 = 36;
				flag = false;
			}
			NetworkText networkText = NetworkText.FromKey(Lang.misc[num8].Key, fullNetName);
			if (flag)
			{
				for (int l = 0; l < 255; l++)
				{
					Player player = Main.player[l];
					if (player != null && player.active && player.difficulty != 2)
					{
						flag = false;
						break;
					}
				}
			}
			if (flag)
			{
				DropTombstoneTownNPC(networkText);
			}
			if (Main.netMode == 0)
			{
				Main.NewText(networkText.ToString(), byte.MaxValue, 25, 25);
			}
			else if (Main.netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(networkText, new Color(255, 25, 25));
			}
		}
		if (Main.netMode != 1 && !Main.IsItDay() && type == 54 && !AnyNPCs(35))
		{
			for (int m = 0; m < 255; m++)
			{
				if (Main.player[m].active && !Main.player[m].dead && Main.player[m].killClothier)
				{
					SpawnSkeletron(m);
					break;
				}
			}
		}
		if (townNPC && Main.netMode != 1 && homeless && WorldGen.prioritizedTownNPCType == type)
		{
			WorldGen.prioritizedTownNPCType = 0;
		}
		SoundStyle? legacySoundStyle = DeathSound;
		if (type == 229 && IsShimmerVariant)
		{
			legacySoundStyle = SoundID.NPCDeath6;
		}
		if (legacySoundStyle.HasValue)
		{
			SoundEngine.PlaySound(legacySoundStyle, position);
		}
		if (!NPCLoader.SpecialOnKill(this))
		{
			if (type == 13 || type == 14 || type == 15)
			{
				DropEoWLoot();
			}
			else if (type == 134)
			{
				Vector2 vector = position;
				Vector2 center = Main.player[target].Center;
				float num9 = 100000000f;
				Vector2 vector2 = position;
				for (int n = 0; n < 200; n++)
				{
					if (Main.npc[n].active && (Main.npc[n].type == 134 || Main.npc[n].type == 135 || Main.npc[n].type == 136))
					{
						float num10 = Math.Abs(Main.npc[n].Center.X - center.X) + Math.Abs(Main.npc[n].Center.Y - center.Y);
						if (num10 < num9)
						{
							num9 = num10;
							vector2 = Main.npc[n].position;
						}
					}
				}
				position = vector2;
				NPCLoot();
				position = vector;
			}
			else
			{
				NPCLoot();
			}
		}
		active = false;
		if (Main.getGoodWorld && Main.netMode != 1 && type == 631)
		{
			Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center, Vector2.Zero, 99, 70, 10f, Main.myPlayer);
		}
		DD2Event.CheckProgress(type);
		CheckProgressFrostMoon();
		CheckProgressPumpkinMoon();
		int nPCInvasionGroup = GetNPCInvasionGroup(type);
		if (nPCInvasionGroup <= 0 || nPCInvasionGroup != Main.invasionType)
		{
			return;
		}
		int num2 = 1;
		switch (type)
		{
		case 216:
			num2 = 5;
			break;
		case 395:
			num2 = 10;
			break;
		case 491:
			num2 = 10;
			break;
		case 471:
			num2 = 10;
			break;
		case 472:
			num2 = 0;
			break;
		case 387:
			num2 = 0;
			break;
		}
		num2 = NPCID.Sets.InvasionSlotCount[type];
		if (num2 > 0)
		{
			Main.invasionSize -= num2;
			if (Main.invasionSize < 0)
			{
				Main.invasionSize = 0;
			}
			if (Main.netMode != 1)
			{
				Main.ReportInvasionProgress(Main.invasionSizeStart - Main.invasionSize, Main.invasionSizeStart, nPCInvasionGroup + 3, 0);
			}
			if (Main.netMode == 2)
			{
				NetMessage.SendData(78, -1, -1, null, Main.invasionProgress, Main.invasionProgressMax, Main.invasionProgressIcon);
			}
		}
	}

	public void DropTombstoneTownNPC(NetworkText deathText)
	{
		if (Main.netMode != 1)
		{
			float num = 0.1f;
			if (Main.rand.Next(2) == 0)
			{
				num = -0.1f;
			}
			float num2;
			for (num2 = (float)Main.rand.Next(-35, 36) * 0.1f; num2 < 2f && num2 > -2f; num2 += (float)Main.rand.Next(-30, 31) * 0.1f)
			{
			}
			int num3 = Main.rand.Next(6);
			if (type != 17 && type != 441)
			{
				num3 = ((num3 != 0) ? (num3 + 200) : 43);
			}
			else
			{
				num3 = Main.rand.Next(5);
				num3 += 527;
			}
			int num4 = Projectile.NewProjectile(GetSpawnSource_ForProjectile(), position.X + (float)(width / 2), position.Y + (float)(height / 2), (float)Main.rand.Next(10, 30) * num + num2, (float)Main.rand.Next(-40, -20) * 0.1f, num3, 0, 0f, Main.myPlayer);
			Main.projectile[num4].miscText = deathText.ToString();
		}
	}

	/// <summary>
	/// Gets the <see cref="T:Terraria.ID.InvasionID" /> associated with the given NPC type (<see cref="F:Terraria.NPC.type" />).
	/// </summary>
	/// <param name="npcID">The NPC type to check.</param>
	/// <returns>
	/// <c>0</c> for NPCs not affiliated with any invasion.
	/// <br /> A positive <see cref="T:Terraria.ID.InvasionID" /> for NPCs affiliated with standard events, such as the Goblin Army.
	/// <br /> A negative <see cref="T:Terraria.ID.InvasionID" /> for NPCs affiliated with a wave-based event, such as the Pumpkin Moon. Wave-based events are prefixed with "Cached" in <see cref="T:Terraria.ID.InvasionID" />.
	/// </returns>
	public static int GetNPCInvasionGroup(int npcID)
	{
		int result = 0;
		if (NPCID.Sets.BelongsToInvasionGoblinArmy[npcID])
		{
			result = 1;
		}
		else if (NPCID.Sets.BelongsToInvasionFrostLegion[npcID])
		{
			result = 2;
		}
		else if (NPCID.Sets.BelongsToInvasionPirate[npcID])
		{
			result = 3;
		}
		else if (!NPCID.Sets.BelongsToInvasionMartianMadness[npcID])
		{
			switch (npcID)
			{
			case 338:
			case 339:
			case 340:
			case 341:
			case 342:
			case 343:
			case 344:
			case 345:
			case 346:
			case 347:
			case 348:
			case 349:
			case 350:
				result = -1;
				break;
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 315:
			case 325:
			case 326:
			case 327:
			case 329:
			case 330:
				result = -2;
				break;
			case 547:
			case 548:
			case 549:
			case 550:
			case 551:
			case 552:
			case 553:
			case 554:
			case 555:
			case 556:
			case 557:
			case 558:
			case 559:
			case 560:
			case 561:
			case 562:
			case 563:
			case 564:
			case 565:
			case 566:
			case 567:
			case 568:
			case 569:
			case 570:
			case 571:
			case 572:
			case 573:
			case 574:
			case 575:
			case 576:
			case 577:
			case 578:
				result = -3;
				break;
			}
		}
		else
		{
			result = 4;
		}
		return result;
	}

	private void DropEoWLoot(bool fromCheckDead = true)
	{
		bool flag = true;
		for (int i = 0; i < 200; i++)
		{
			if (i != whoAmI && Main.npc[i].active && (Main.npc[i].type == 13 || Main.npc[i].type == 14 || Main.npc[i].type == 15))
			{
				flag = false;
				break;
			}
		}
		if (flag)
		{
			boss = true;
			NPCLoot();
		}
		else
		{
			NPCLoot();
		}
	}

	private float GetMoonEventPointScalar()
	{
		if (Main.masterMode)
		{
			return 2.5f;
		}
		if (Main.expertMode)
		{
			return 2f;
		}
		return 1f;
	}

	private void CheckProgressFrostMoon()
	{
		//IL_03ec: Unknown result type (might be due to invalid IL or missing references)
		if (!Main.snowMoon)
		{
			return;
		}
		int num = 0;
		NetworkText networkText = NetworkText.Empty;
		num = MoonEventRequiredPointsPerWaveLookup[waveNumber];
		switch (waveNumber)
		{
		case 1:
			networkText = Lang.GetInvasionWaveText(2, 338, 350);
			break;
		case 2:
			networkText = Lang.GetInvasionWaveText(3, 338, 350, 342, 348);
			break;
		case 3:
			networkText = Lang.GetInvasionWaveText(4, 344, 338, 350, 342);
			break;
		case 4:
			networkText = Lang.GetInvasionWaveText(5, 344, 338, 350, 348);
			break;
		case 5:
			networkText = Lang.GetInvasionWaveText(6, 344, 350, 348, 347);
			break;
		case 6:
			networkText = Lang.GetInvasionWaveText(7, 346, 342, 350, 338);
			break;
		case 7:
			networkText = Lang.GetInvasionWaveText(8, 346, 347, 350, 348, 351);
			break;
		case 8:
			networkText = Lang.GetInvasionWaveText(9, 346, 344, 348, 347, 342);
			break;
		case 9:
			networkText = Lang.GetInvasionWaveText(10, 346, 344, 351, 338, 347);
			break;
		case 10:
			networkText = Lang.GetInvasionWaveText(11, 345, 352, 338, 342);
			break;
		case 11:
			networkText = Lang.GetInvasionWaveText(12, 345, 344, 342, 343, 338);
			break;
		case 12:
			networkText = Lang.GetInvasionWaveText(13, 345, 346, 342, 352, 343, 347);
			break;
		case 13:
			networkText = Lang.GetInvasionWaveText(14, 345, 346, 344, 343, 351);
			break;
		case 14:
			networkText = Lang.GetInvasionWaveText(15, 345, 346, 344, 343, 347);
			break;
		case 15:
			networkText = Lang.GetInvasionWaveText(16, 345, 346, 344, 343, 352);
			break;
		case 16:
			networkText = Lang.GetInvasionWaveText(17, 345, 346, 344, 343, 351, 347);
			break;
		case 17:
			networkText = Lang.GetInvasionWaveText(18, 345, 346, 344, 343, 348, 351);
			break;
		case 18:
			networkText = Lang.GetInvasionWaveText(19, 345, 346, 344, 343);
			break;
		case 19:
			networkText = Lang.GetInvasionWaveText(-1, 345, 346, 344);
			break;
		}
		float num2 = 0f;
		switch (type)
		{
		case 338:
		case 339:
		case 340:
			num2 = 1f;
			break;
		case 341:
			num2 = 20f;
			break;
		case 342:
			num2 = 2f;
			break;
		case 343:
			num2 = 18f;
			break;
		case 344:
			num2 = 50f;
			break;
		case 345:
			num2 = 150f;
			break;
		case 346:
			num2 = 100f;
			break;
		case 347:
			num2 = 8f;
			break;
		case 348:
		case 349:
			num2 = 4f;
			break;
		case 350:
			num2 = 3f;
			break;
		case 351:
			num2 = 10f;
			break;
		case 352:
			num2 = 5f;
			break;
		}
		num2 *= GetMoonEventPointScalar();
		float num3 = waveKills;
		waveKills += num2;
		totalInvasionPoints += num2;
		if (waveKills >= (float)num && num != 0)
		{
			waveKills = 0f;
			waveNumber++;
			num = MoonEventRequiredPointsPerWaveLookup[waveNumber];
			if (networkText != NetworkText.Empty)
			{
				if (Main.netMode == 0)
				{
					Main.NewText(networkText.ToString(), 175, 75);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(networkText, new Color(175, 75, 255));
				}
				if (waveNumber == 15)
				{
					AchievementsHelper.NotifyProgressionEvent(14);
				}
			}
		}
		if (waveKills != num3 && num2 != 0f)
		{
			if (Main.netMode != 1)
			{
				Main.ReportInvasionProgress((int)waveKills, num, 1, waveNumber);
			}
			if (Main.netMode == 2)
			{
				NetMessage.SendData(78, -1, -1, null, Main.invasionProgress, Main.invasionProgressMax, 1f, waveNumber);
			}
		}
	}

	private void CheckProgressPumpkinMoon()
	{
		//IL_03ff: Unknown result type (might be due to invalid IL or missing references)
		if (!Main.pumpkinMoon)
		{
			return;
		}
		int num = 0;
		NetworkText networkText = NetworkText.Empty;
		num = MoonEventRequiredPointsPerWaveLookup[waveNumber];
		switch (waveNumber)
		{
		case 1:
			networkText = Lang.GetInvasionWaveText(2, 326, 305);
			break;
		case 2:
			networkText = Lang.GetInvasionWaveText(3, 329, 326);
			break;
		case 3:
			networkText = Lang.GetInvasionWaveText(4, 330, 326, 305);
			break;
		case 4:
			networkText = Lang.GetInvasionWaveText(5, 315, 329);
			break;
		case 5:
			networkText = Lang.GetInvasionWaveText(6, 325, 326, 305);
			break;
		case 6:
			networkText = Lang.GetInvasionWaveText(7, 325, 330, 329);
			break;
		case 7:
			networkText = Lang.GetInvasionWaveText(8, 315, 330, 329);
			break;
		case 8:
			networkText = Lang.GetInvasionWaveText(9, 325, 330, 329, 326, 305);
			break;
		case 9:
			networkText = Lang.GetInvasionWaveText(10, 327, 329, 326);
			break;
		case 10:
			networkText = Lang.GetInvasionWaveText(11, 325, 330, 326);
			break;
		case 11:
			networkText = Lang.GetInvasionWaveText(12, 327, 330);
			break;
		case 12:
			networkText = Lang.GetInvasionWaveText(13, 325, 315, 330, 329, 326);
			break;
		case 13:
			networkText = Lang.GetInvasionWaveText(14, 327, 325, 315, 330, 329, 326, 305);
			break;
		case 14:
			networkText = Lang.GetInvasionWaveText(15, 327, 325, 330, 326, 305);
			break;
		case 15:
			networkText = Lang.GetInvasionWaveText(16, 327, 315, 330, 329, 326);
			break;
		case 16:
			networkText = Lang.GetInvasionWaveText(17, 327, 325, 315, 330, 329);
			break;
		case 17:
			networkText = Lang.GetInvasionWaveText(18, 327, 325, 315, 330);
			break;
		case 18:
			networkText = Lang.GetInvasionWaveText(19, 327, 325, 315);
			break;
		case 19:
			networkText = Lang.GetInvasionWaveText(-1, 327, 325, 315);
			break;
		}
		float num2 = 0f;
		switch (type)
		{
		case 305:
		case 306:
		case 307:
		case 308:
		case 309:
		case 310:
		case 311:
		case 312:
		case 313:
		case 314:
			num2 = 1f;
			break;
		case 315:
			num2 = 50f;
			break;
		case 325:
			num2 = 75f;
			break;
		case 326:
			num2 = 2f;
			break;
		case 327:
			num2 = 150f;
			break;
		case 329:
			num2 = 5f;
			break;
		case 330:
			num2 = 10f;
			break;
		}
		num2 *= GetMoonEventPointScalar();
		float num3 = waveKills;
		waveKills += num2;
		totalInvasionPoints += num2;
		if (waveKills >= (float)num && num != 0)
		{
			waveKills = 0f;
			waveNumber++;
			num = MoonEventRequiredPointsPerWaveLookup[waveNumber];
			if (networkText != NetworkText.Empty)
			{
				if (Main.netMode == 0)
				{
					Main.NewText(networkText.ToString(), 175, 75);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(networkText, new Color(175, 75, 255));
				}
				if (waveNumber == 15)
				{
					AchievementsHelper.NotifyProgressionEvent(15);
				}
			}
		}
		if (waveKills != num3 && num2 != 0f)
		{
			if (Main.netMode != 1)
			{
				Main.ReportInvasionProgress((int)waveKills, num, 2, waveNumber);
			}
			if (Main.netMode == 2)
			{
				NetMessage.SendData(78, -1, -1, null, Main.invasionProgress, Main.invasionProgressMax, 2f, waveNumber);
			}
		}
	}

	public static void ResetKillCount()
	{
		for (int i = 0; i < killCount.Length; i++)
		{
			killCount[i] = 0;
		}
	}

	/// <summary>
	/// Returns true if any player has damaged this NPC. Individual player participation can be determined by checking <see cref="F:Terraria.NPC.playerInteraction" /> directly. Use <see cref="M:Terraria.NPC.GetWereThereAnyInteractions" /> if <see cref="F:Terraria.NPC.realLife" /> might be in use.
	/// </summary>
	/// <returns></returns>
	public bool AnyInteractions()
	{
		if (Main.netMode == 0)
		{
			if (playerInteraction[Main.myPlayer])
			{
				return true;
			}
		}
		else
		{
			for (int i = 0; i < 255; i++)
			{
				if (playerInteraction[i])
				{
					return true;
				}
			}
		}
		return false;
	}

	public bool IsDamageDodgeable()
	{
		switch (type)
		{
		case 21:
		case 68:
			return ai[1] != 2f;
		case 636:
			return !Main.dayTime;
		default:
			return true;
		}
	}

	public static void SetEventFlagCleared(ref bool eventFlag, int gameEventId)
	{
		bool flag = eventFlag;
		eventFlag = true;
		if (eventFlag != flag)
		{
			OnGameEventClearedForTheFirstTime(gameEventId);
		}
	}

	public static void OnGameEventClearedForTheFirstTime(int gameEventId)
	{
		switch (gameEventId)
		{
		default:
			LanternNight.NextNightIsLanternNight = true;
			break;
		case 10:
			LanternNight.NextNightIsLanternNight = true;
			CreditsRollEvent.TryStartingCreditsRoll();
			break;
		case 16:
		case 17:
		case 18:
			LanternNight.NextNightIsLanternNight = true;
			if (Main.netMode != 1 && Main.hardMode && downedMechBoss1 && downedMechBoss2 && downedMechBoss3)
			{
				WorldGen.GeneratePlanteraBulbOnAllMechsDefeated();
			}
			break;
		case 4:
		case 21:
		case 22:
			break;
		}
	}

	public void NPCLoot()
	{
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c4: Unknown result type (might be due to invalid IL or missing references)
		if (Main.netMode == 1 || (Main.getGoodWorld && !downedBoss3 && (type == 31 || type == 294 || type == 296 || type == 295 || type == 32 || type == 34 || type == 71)))
		{
			return;
		}
		Player closestPlayer = Main.player[Player.FindClosest(position, width, height)];
		CountKillForAchievements();
		if (GetWereThereAnyInteractions())
		{
			if (IsNPCValidForBestiaryKillCredit())
			{
				Main.BestiaryTracker.Kills.RegisterKill(this);
			}
			CountKillForBannersAndDropThem();
		}
		if ((type == 23 && Main.hardMode) || (SpawnedFromStatue && NPCID.Sets.NoEarlymodeLootWhenSpawnedFromStatue[type] && !Main.hardMode) || (SpawnedFromStatue && NPCID.Sets.StatueSpawnedDropRarity[type] != -1f && (Main.rand.NextFloat() >= NPCID.Sets.StatueSpawnedDropRarity[type] || !AnyInteractions())) || !NPCLoader.PreKill(this))
		{
			return;
		}
		bool num = downedMechBoss1 && downedMechBoss2 && downedMechBoss3;
		DoDeathEvents_BeforeLoot(closestPlayer);
		NPCLoot_DropItems(closestPlayer);
		NPCLoader.OnKill(this);
		DoDeathEvents(closestPlayer);
		if (!num && downedMechBoss1 && downedMechBoss2 && downedMechBoss3 && Main.hardMode)
		{
			if (Main.netMode == 0)
			{
				Main.NewText(Lang.misc[32].Value, 50, byte.MaxValue, 130);
			}
			else if (Main.netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[32].Key), new Color(50, 255, 130));
			}
		}
		NPCLoot_DropMoney(closestPlayer);
		NPCLoot_DropHeals(closestPlayer);
	}

	public bool IsNPCValidForBestiaryKillCredit()
	{
		if ((uint)(type - 13) <= 2u)
		{
			return boss;
		}
		return true;
	}

	private void DoDeathEvents_BeforeLoot(Player closestPlayer)
	{
		if ((uint)(type - 125) <= 1u && AnyNPCs((type == 125) ? 126 : 125))
		{
			value = 0f;
			boss = false;
		}
	}

	private void NPCLoot_DropItems(Player closestPlayer)
	{
		DropAttemptInfo dropAttemptInfo = default(DropAttemptInfo);
		dropAttemptInfo.player = closestPlayer;
		dropAttemptInfo.npc = this;
		dropAttemptInfo.IsExpertMode = Main.expertMode;
		dropAttemptInfo.IsMasterMode = Main.masterMode;
		dropAttemptInfo.IsInSimulation = false;
		dropAttemptInfo.rng = Main.rand;
		DropAttemptInfo info = dropAttemptInfo;
		Main.ItemDropSolver.TryDropping(info);
	}

	public static void ResetBadgerHatTime()
	{
		EoCKilledToday = false;
		WoFKilledToday = false;
	}

	private void DoDeathEvents_DropBossPotionsAndHearts(ref string typeName)
	{
		int stack = Main.rand.Next(5, 16);
		int num = 28;
		if (type == 113)
		{
			num = 188;
		}
		else if (type == 35)
		{
			num = 188;
		}
		else if (type == 668)
		{
			num = 188;
		}
		else if (type == 222)
		{
			num = 1134;
		}
		else if (type == 657)
		{
			num = 499;
		}
		else if (type > 113 && type < 222)
		{
			num = 499;
		}
		else if (type == 636)
		{
			num = 499;
		}
		else if (type == 245 || type == 262)
		{
			num = 499;
		}
		else if (type == 370)
		{
			num = 499;
		}
		else if (type == 395)
		{
			num = 499;
		}
		else if (type == 439)
		{
			num = 499;
		}
		else if (type == 398)
		{
			num = 3544;
		}
		NPCLoader.BossLoot(this, ref typeName, ref num);
		Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, num, stack);
		int num2 = Main.rand.Next(5) + 5;
		for (int i = 0; i < num2; i++)
		{
			Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
		}
		if (type == 4)
		{
			EoCKilledToday = true;
		}
		else if (type == 113)
		{
			WoFKilledToday = true;
		}
		if (EoCKilledToday && WoFKilledToday)
		{
			ResetBadgerHatTime();
			Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 5004);
		}
	}

	private void DoDeathEvents_CelebrateBossDeath(string typeName)
	{
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		if (type == 125 || type == 126)
		{
			if (Main.netMode == 0)
			{
				Main.NewText(Language.GetTextValue("Announcement.HasBeenDefeated_Plural", Language.GetTextValue("Enemies.TheTwins")), 175, 75);
			}
			else if (Main.netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasBeenDefeated_Plural", NetworkText.FromKey("Enemies.TheTwins")), new Color(175, 75, 255));
			}
		}
		else if (type == 398)
		{
			if (Main.netMode == 0)
			{
				Main.NewText(Language.GetTextValue("Announcement.HasBeenDefeated_Single", Language.GetTextValue("Enemies.MoonLord")), 175, 75);
			}
			else if (Main.netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasBeenDefeated_Single", NetworkText.FromKey("Enemies.MoonLord")), new Color(175, 75, 255));
			}
		}
		else if (Main.netMode == 0)
		{
			Main.NewText(Language.GetTextValue("Announcement.HasBeenDefeated_Single", typeName), 175, 75);
		}
		else if (Main.netMode == 2)
		{
			ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasBeenDefeated_Single", GetTypeNetName()), new Color(175, 75, 255));
		}
	}

	private void CreateBrickBoxForWallOfFlesh()
	{
		int num = (int)(position.X + (float)(width / 2)) / 16;
		int num2 = (int)(position.Y + (float)(height / 2)) / 16;
		int num3 = width / 2 / 16 + 1;
		for (int i = num - num3; i <= num + num3; i++)
		{
			for (int j = num2 - num3; j <= num2 + num3; j++)
			{
				Tile tile;
				if (i == num - num3 || i == num + num3 || j == num2 - num3 || j == num2 + num3)
				{
					tile = Main.tile[i, j];
					if (!tile.active())
					{
						tile = Main.tile[i, j];
						tile.type = (ushort)(WorldGen.crimson ? 347u : 140u);
						tile = Main.tile[i, j];
						tile.active(active: true);
					}
				}
				tile = Main.tile[i, j];
				tile.lava(lava: false);
				tile = Main.tile[i, j];
				tile.liquid = 0;
				if (Main.netMode == 2)
				{
					NetMessage.SendTileSquare(-1, i, j);
				}
				else
				{
					WorldGen.SquareTileFrame(i, j);
				}
			}
		}
	}

	private void DoDeathEvents_SummonDungeonSpirit(Player closestPlayer)
	{
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		if (lifeMax > 100 && type != 288 && value > 0f && HasPlayerTarget && Main.hardMode && downedPlantBoss && Main.player[target].ZoneDungeon)
		{
			int range = 13;
			if (Main.expertMode)
			{
				range = 9;
			}
			if (closestPlayer.RollLuck(range) == 0 && Main.wallDungeon[Main.tile[(int)base.Center.X / 16, (int)base.Center.Y / 16].wall])
			{
				NewNPC(GetSpawnSource_NPCHurt(), (int)base.Center.X, (int)base.Center.Y, 288);
			}
		}
	}

	private void DoDeathEvents_AdvanceSlimeRain(Player closestPlayer)
	{
		if (Main.slimeRain && Main.slimeRainNPC[type] && !AnyNPCs(50))
		{
			int num = 150;
			if (downedSlimeKing)
			{
				num /= 2;
			}
			Main.slimeRainKillCount++;
			if (Main.slimeRainKillCount >= num)
			{
				SpawnOnPlayer(closestPlayer.whoAmI, 50);
				Main.slimeRainKillCount = -num / 2;
			}
		}
	}

	private void NPCLoot_DropHeals(Player closestPlayer)
	{
		NPCLoot_DropCommonLifeAndMana(closestPlayer);
		switch (type)
		{
		case 305:
		case 306:
		case 307:
		case 308:
		case 309:
		case 310:
		case 311:
		case 312:
		case 313:
		case 314:
		case 329:
		case 330:
			if (closestPlayer.RollLuck(4) == 0)
			{
				Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
			}
			break;
		case 326:
			if (closestPlayer.RollLuck(6) == 0)
			{
				Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
			}
			break;
		case 315:
			Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
			break;
		case 341:
		{
			int num2 = Main.rand.Next(5, 11);
			for (int j = 0; j < num2; j++)
			{
				Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
			}
			break;
		}
		case 338:
		case 339:
		case 340:
			if (closestPlayer.RollLuck(5) == 0)
			{
				Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
			}
			break;
		case 342:
			if (Main.rand.Next(3) != 0)
			{
				Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
			}
			break;
		case 325:
		case 327:
		case 344:
		case 345:
		case 346:
		{
			int num = Main.rand.Next(6) + 6;
			for (int i = 0; i < num; i++)
			{
				Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
			}
			break;
		}
		case 267:
			if (Main.rand.Next(2) == 0 && closestPlayer.statLife < closestPlayer.statLifeMax2)
			{
				Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
			}
			break;
		case 13:
		case 14:
		case 15:
			if (Main.rand.Next(4) == 0 && closestPlayer.statLife < closestPlayer.statLifeMax2)
			{
				Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
			}
			break;
		case 116:
		case 117:
		case 118:
		case 119:
			if (!Main.expertMode || Main.rand.Next(5) == 0)
			{
				Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
			}
			break;
		case 139:
			if (Main.rand.Next(2) == 0)
			{
				Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
			}
			break;
		}
	}

	private void DoDeathEvents(Player closestPlayer)
	{
		//IL_0469: Unknown result type (might be due to invalid IL or missing references)
		//IL_046f: Unknown result type (might be due to invalid IL or missing references)
		//IL_06cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0438: Unknown result type (might be due to invalid IL or missing references)
		//IL_043e: Unknown result type (might be due to invalid IL or missing references)
		//IL_070f: Unknown result type (might be due to invalid IL or missing references)
		//IL_071a: Unknown result type (might be due to invalid IL or missing references)
		//IL_049b: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_05be: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_055d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0568: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0507: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a65: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a74: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a79: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a92: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a97: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a99: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa1: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a30: Unknown result type (might be due to invalid IL or missing references)
		DoDeathEvents_AdvanceSlimeRain(closestPlayer);
		DoDeathEvents_SummonDungeonSpirit(closestPlayer);
		if (Main.remixWorld && !downedSlimeKing && AnyInteractions() && Main.AnyPlayerReadyToFightKingSlime() && type == 1 && !AnyNPCs(50) && Main.rand.Next(200) == 0)
		{
			SpawnOnPlayer(closestPlayer.whoAmI, 50);
		}
		switch (type)
		{
		case 216:
			SpawnBoss((int)position.X, (int)position.Y, 662, target);
			break;
		case 327:
			if (Main.pumpkinMoon)
			{
				SetEventFlagCleared(ref downedHalloweenKing, 5);
			}
			break;
		case 325:
			if (Main.pumpkinMoon)
			{
				SetEventFlagCleared(ref downedHalloweenTree, 4);
			}
			break;
		case 344:
			if (Main.snowMoon)
			{
				SetEventFlagCleared(ref downedChristmasTree, 21);
			}
			break;
		case 345:
			if (Main.snowMoon)
			{
				SetEventFlagCleared(ref downedChristmasIceQueen, 20);
			}
			break;
		case 346:
			if (Main.snowMoon)
			{
				SetEventFlagCleared(ref downedChristmasSantank, 22);
			}
			break;
		case 552:
		case 553:
		case 554:
			if (DD2Event.Ongoing)
			{
				DD2Event.AnnounceGoblinDeath(this);
				if (DD2Event.ShouldDropCrystals())
				{
					Item.NewItem(GetItemSource_Loot(), position, base.Size, 3822);
				}
			}
			break;
		case 555:
		case 556:
		case 557:
		case 558:
		case 559:
		case 560:
		case 561:
		case 562:
		case 563:
		case 564:
		case 565:
		case 568:
		case 569:
		case 570:
		case 571:
		case 572:
		case 573:
		case 574:
		case 575:
		case 576:
		case 577:
		case 578:
			if (DD2Event.ShouldDropCrystals())
			{
				Item.NewItem(GetItemSource_Loot(), position, base.Size, 3822);
			}
			break;
		case 412:
		case 413:
		case 414:
		case 415:
		case 416:
		case 417:
		case 418:
		case 419:
		case 518:
			if (ShieldStrengthTowerSolar > 0)
			{
				Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, 0f, 0f, 629, 0, 0f, Main.myPlayer, FindFirstNPC(517));
			}
			break;
		case 425:
		case 426:
		case 427:
		case 429:
			if (ShieldStrengthTowerVortex > 0)
			{
				Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, 0f, 0f, 629, 0, 0f, Main.myPlayer, FindFirstNPC(422));
			}
			break;
		case 420:
		case 421:
		case 423:
		case 424:
			if (ShieldStrengthTowerNebula > 0)
			{
				Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, 0f, 0f, 629, 0, 0f, Main.myPlayer, FindFirstNPC(507));
			}
			break;
		case 402:
		case 405:
		case 407:
		case 409:
		case 411:
			if (ShieldStrengthTowerStardust > 0)
			{
				Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, 0f, 0f, 629, 0, 0f, Main.myPlayer, FindFirstNPC(493));
			}
			break;
		case 517:
			downedTowerSolar = true;
			TowerActiveSolar = false;
			WorldGen.UpdateLunarApocalypse();
			WorldGen.MessageLunarApocalypse();
			break;
		case 422:
			downedTowerVortex = true;
			TowerActiveVortex = false;
			WorldGen.UpdateLunarApocalypse();
			WorldGen.MessageLunarApocalypse();
			break;
		case 507:
			downedTowerNebula = true;
			TowerActiveNebula = false;
			WorldGen.UpdateLunarApocalypse();
			WorldGen.MessageLunarApocalypse();
			break;
		case 493:
			downedTowerStardust = true;
			TowerActiveStardust = false;
			WorldGen.UpdateLunarApocalypse();
			WorldGen.MessageLunarApocalypse();
			break;
		case 245:
			SetEventFlagCleared(ref downedGolemBoss, 6);
			break;
		case 370:
			SetEventFlagCleared(ref downedFishron, 7);
			break;
		case 636:
			SetEventFlagCleared(ref downedEmpressOfLight, 23);
			break;
		case 668:
			SetEventFlagCleared(ref downedDeerclops, 25);
			break;
		case 657:
			SetEventFlagCleared(ref downedQueenSlime, 24);
			break;
		case 22:
			if (Collision.LavaCollision(position, width, height))
			{
				SpawnWOF(position);
			}
			break;
		case 614:
		{
			int num2 = 175;
			if (SpawnedFromStatue)
			{
				num2 = 0;
			}
			Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, 0f, 0f, 281, num2, 0f, Main.myPlayer, -2f, releaseOwner + 1);
			break;
		}
		case 109:
			if (!downedClown)
			{
				downedClown = true;
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7);
				}
			}
			break;
		case 222:
			SetEventFlagCleared(ref downedQueenBee, 8);
			if (Main.netMode == 2)
			{
				NetMessage.SendData(7);
			}
			break;
		case 439:
			SetEventFlagCleared(ref downedAncientCultist, 9);
			WorldGen.TriggerLunarApocalypse();
			break;
		case 398:
			SetEventFlagCleared(ref downedMoonlord, 10);
			LunarApocalypseIsUp = false;
			break;
		case 50:
			if (Main.slimeRain)
			{
				Main.StopSlimeRain();
				AchievementsHelper.NotifyProgressionEvent(16);
			}
			if (Main.netMode != 1 && !unlockedSlimeBlueSpawn)
			{
				unlockedSlimeBlueSpawn = true;
				ViolentlySpawnNerdySlime();
			}
			SetEventFlagCleared(ref downedSlimeKing, 11);
			if (Main.netMode == 2)
			{
				NetMessage.SendData(7);
			}
			break;
		case 125:
		case 126:
			if (boss)
			{
				SetEventFlagCleared(ref downedMechBoss2, 17);
				downedMechBossAny = true;
			}
			break;
		case 262:
		{
			bool num3 = downedPlantBoss;
			SetEventFlagCleared(ref downedPlantBoss, 12);
			if (!num3)
			{
				if (Main.netMode == 0)
				{
					Main.NewText(Lang.misc[33].Value, 50, byte.MaxValue, 130);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[33].Key), new Color(50, 255, 130));
				}
			}
			break;
		}
		case 4:
			SetEventFlagCleared(ref downedBoss1, 13);
			break;
		case 13:
		case 14:
		case 15:
		case 266:
			if (boss)
			{
				if (!downedBoss2 || Main.rand.Next(2) == 0)
				{
					WorldGen.spawnMeteor = true;
				}
				SetEventFlagCleared(ref downedBoss2, 14);
			}
			break;
		case 35:
			if (boss)
			{
				SetEventFlagCleared(ref downedBoss3, 15);
			}
			break;
		case 127:
			if (boss)
			{
				SetEventFlagCleared(ref downedMechBoss3, 18);
				downedMechBossAny = true;
			}
			break;
		case 134:
			if (boss)
			{
				SetEventFlagCleared(ref downedMechBoss1, 16);
				downedMechBossAny = true;
			}
			break;
		case 113:
		{
			if (Main.netMode == 1)
			{
				break;
			}
			CreateBrickBoxForWallOfFlesh();
			bool eventFlag = Main.hardMode;
			WorldGen.StartHardmode();
			if (downedMechBoss1 && downedMechBoss2 && downedMechBoss3 && !eventFlag)
			{
				if (Main.netMode == 0)
				{
					Main.NewText(Lang.misc[32].Value, 50, byte.MaxValue, 130);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[32].Key), new Color(50, 255, 130));
				}
			}
			SetEventFlagCleared(ref eventFlag, 19);
			break;
		}
		case 661:
			if (Main.netMode != 1 && GetWereThereAnyInteractions())
			{
				int num = 636;
				if (!AnyNPCs(num))
				{
					Vector2 vector = base.Center + new Vector2(0f, -200f) + Main.rand.NextVector2Circular(50f, 50f);
					SpawnBoss((int)vector.X, (int)vector.Y, num, closestPlayer.whoAmI);
				}
			}
			break;
		}
		if (boss)
		{
			string typeName = TypeName;
			DoDeathEvents_DropBossPotionsAndHearts(ref typeName);
			DoDeathEvents_CelebrateBossDeath(typeName);
			if (Main.netMode == 2)
			{
				NetMessage.SendData(7);
			}
		}
	}

	private void ViolentlySpawnNerdySlime()
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		int num = NewNPC(GetSpawnSourceForNPCFromNPCAI(), (int)base.Center.X - 10, (int)base.Center.Y, 670);
		NPC obj = Main.npc[num];
		Vector2 movementVector = (obj.velocity = new Vector2(Main.rand.NextFloatDirection() * 3f, -10f));
		obj.netUpdate = true;
		WorldGen.CheckAchievement_RealEstateAndTownSlimes();
		ParticleOrchestrator.BroadcastParticleSpawn(ParticleOrchestraType.TownSlimeTransform, new ParticleOrchestraSettings
		{
			PositionInWorld = base.Center,
			MovementVector = movementVector,
			UniqueInfoPiece = 0
		});
	}

	private void NPCLoot_DropCommonLifeAndMana(Player closestPlayer)
	{
		if (type != 16 && type != 81 && type != 121 && closestPlayer.RollLuck(6) == 0 && lifeMax > 1 && damage > 0)
		{
			if (Main.rand.Next(2) == 0 && closestPlayer.statMana < closestPlayer.statManaMax2)
			{
				Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 184);
			}
			else if (Main.rand.Next(2) == 0 && closestPlayer.statLife < closestPlayer.statLifeMax2)
			{
				Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 58);
			}
		}
		if (type != 16 && type != 81 && type != 121 && closestPlayer.RollLuck(2) == 0 && lifeMax > 1 && damage > 0 && closestPlayer.statMana < closestPlayer.statManaMax2)
		{
			Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 184);
		}
	}

	private void NPCLoot_DropMoney(Player closestPlayer)
	{
		float num = 0f;
		float luck = closestPlayer.luck;
		int num2 = 1;
		if (Main.rand.NextFloat() < Math.Abs(luck))
		{
			num2 = 2;
		}
		for (int i = 0; i < num2; i++)
		{
			float num3 = value;
			if (midas)
			{
				num3 *= 1f + (float)Main.rand.Next(10, 51) * 0.01f;
			}
			num3 *= 1f + (float)Main.rand.Next(-20, 76) * 0.01f;
			if (Main.rand.Next(2) == 0)
			{
				num3 *= 1f + (float)Main.rand.Next(5, 11) * 0.01f;
			}
			if (Main.rand.Next(4) == 0)
			{
				num3 *= 1f + (float)Main.rand.Next(10, 21) * 0.01f;
			}
			if (Main.rand.Next(8) == 0)
			{
				num3 *= 1f + (float)Main.rand.Next(15, 31) * 0.01f;
			}
			if (Main.rand.Next(16) == 0)
			{
				num3 *= 1f + (float)Main.rand.Next(20, 41) * 0.01f;
			}
			if (Main.rand.Next(32) == 0)
			{
				num3 *= 1f + (float)Main.rand.Next(25, 51) * 0.01f;
			}
			if (Main.rand.Next(64) == 0)
			{
				num3 *= 1f + (float)Main.rand.Next(50, 101) * 0.01f;
			}
			if (Main.bloodMoon)
			{
				num3 *= 1f + (float)Main.rand.Next(101) * 0.01f;
			}
			if (i == 0)
			{
				num = num3;
			}
			else if (luck < 0f)
			{
				if (num3 < num)
				{
					num = num3;
				}
			}
			else if (num3 > num)
			{
				num = num3;
			}
		}
		num += (float)extraValue;
		while ((int)num > 0)
		{
			if (num > 1000000f)
			{
				int num4 = (int)(num / 1000000f);
				if (num4 > 50 && Main.rand.Next(5) == 0)
				{
					num4 /= Main.rand.Next(3) + 1;
				}
				if (Main.rand.Next(5) == 0)
				{
					num4 /= Main.rand.Next(3) + 1;
				}
				int num5 = num4;
				while (num5 > 999)
				{
					num5 -= 999;
					Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 74, 999);
				}
				num -= (float)(1000000 * num4);
				Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 74, num5);
			}
			else if (num > 10000f)
			{
				int num6 = (int)(num / 10000f);
				if (num6 > 50 && Main.rand.Next(5) == 0)
				{
					num6 /= Main.rand.Next(3) + 1;
				}
				if (Main.rand.Next(5) == 0)
				{
					num6 /= Main.rand.Next(3) + 1;
				}
				num -= (float)(10000 * num6);
				Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 73, num6);
			}
			else if (num > 100f)
			{
				int num7 = (int)(num / 100f);
				if (num7 > 50 && Main.rand.Next(5) == 0)
				{
					num7 /= Main.rand.Next(3) + 1;
				}
				if (Main.rand.Next(5) == 0)
				{
					num7 /= Main.rand.Next(3) + 1;
				}
				num -= (float)(100 * num7);
				Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 72, num7);
			}
			else
			{
				int num8 = (int)num;
				if (num8 > 50 && Main.rand.Next(5) == 0)
				{
					num8 /= Main.rand.Next(3) + 1;
				}
				if (Main.rand.Next(5) == 0)
				{
					num8 /= Main.rand.Next(4) + 1;
				}
				if (num8 < 1)
				{
					num8 = 1;
				}
				num -= (float)num8;
				Item.NewItem(GetItemSource_Loot(), (int)position.X, (int)position.Y, width, height, 71, num8);
			}
		}
	}

	public bool ExcludedFromDeathTally()
	{
		if (netID < 0)
		{
			if (netID != -5)
			{
				return netID == -1;
			}
			return true;
		}
		if (!NPCID.Sets.ProjectileNPC[netID])
		{
			return NPCID.Sets.PositiveNPCTypesExcludedFromDeathTally[netID];
		}
		return true;
	}

	private void CountKillForBannersAndDropThem()
	{
		//IL_0177: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_019e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0191: Unknown result type (might be due to invalid IL or missing references)
		//IL_0196: Unknown result type (might be due to invalid IL or missing references)
		int num = Item.NPCtoBanner(BannerID());
		if (num <= 0 || ExcludedFromDeathTally())
		{
			return;
		}
		killCount[num]++;
		if (Main.netMode == 2)
		{
			NetMessage.SendData(83, -1, -1, null, num);
		}
		int num2 = ItemID.Sets.KillsToBanner[Item.BannerToItem(num)];
		if (killCount[num] % num2 == 0 && num > 0)
		{
			int num3 = Item.BannerToNPC(num);
			int num4 = lastInteraction;
			if (!Main.player[num4].active || Main.player[num4].dead)
			{
				num4 = FindClosestPlayer();
			}
			NetworkText networkText = NetworkText.FromKey("Game.EnemiesDefeatedAnnouncement", killCount[num], NetworkText.FromKey(Lang.GetNPCName(num3).Key));
			if (num4 >= 0 && num4 < 255)
			{
				networkText = NetworkText.FromKey("Game.EnemiesDefeatedByAnnouncement", Main.player[num4].name, killCount[num], NetworkText.FromKey(Lang.GetNPCName(num3).Key));
			}
			if (Main.netMode == 0)
			{
				Main.NewText(networkText.ToString(), 250, 250, 0);
			}
			else if (Main.netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(networkText, new Color(250, 250, 0));
			}
			int num5 = Item.BannerToItem(num);
			Vector2 vector = position;
			if (num4 >= 0 && num4 < 255)
			{
				vector = Main.player[num4].position;
			}
			Item.NewItem(GetItemSource_Loot(), (int)vector.X, (int)vector.Y, width, height, num5);
		}
	}

	/// <summary>
	/// Returns true if any player has damaged this NPC. Individual player participation can be determined by checking <see cref="F:Terraria.NPC.playerInteraction" /> directly.
	/// </summary>
	/// <returns></returns>
	public bool GetWereThereAnyInteractions()
	{
		if (realLife >= 0)
		{
			return Main.npc[realLife].AnyInteractions();
		}
		return AnyInteractions();
	}

	private void CountKillForAchievements()
	{
		switch (type)
		{
		case 125:
		case 126:
			if (!AnyNPCs((type == 126) ? 125 : 126))
			{
				AchievementsHelper.NotifyNPCKilled(this);
				AchievementsHelper.CheckMechaMayhem(type);
			}
			break;
		case 127:
		case 134:
			AchievementsHelper.CheckMechaMayhem(type);
			AchievementsHelper.NotifyNPCKilled(this);
			break;
		case 13:
		case 14:
		case 15:
			if (boss)
			{
				AchievementsHelper.NotifyNPCKilled(this);
			}
			break;
		default:
			AchievementsHelper.NotifyNPCKilled(this);
			break;
		}
	}

	private bool TryTeleportingCaughtMysticFrog()
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		if (Main.netMode == 1)
		{
			return false;
		}
		if (type != 687)
		{
			return false;
		}
		Vector2 chosenTile = Vector2.Zero;
		Point point = base.Center.ToTileCoordinates();
		if (AI_AttemptToFindTeleportSpot(ref chosenTile, point.X, point.Y, 15, 8))
		{
			Vector2 newPos = default(Vector2);
			((Vector2)(ref newPos))._002Ector(chosenTile.X * 16f - (float)(width / 2), chosenTile.Y * 16f - (float)height);
			NetMessage.SendData(23, -1, -1, null, whoAmI);
			Teleport(newPos, 13);
			return true;
		}
		Vector2 vector = base.Center - new Vector2(20f);
		Utils.PoofOfSmoke(vector);
		active = false;
		NetMessage.SendData(23, -1, -1, null, whoAmI);
		NetMessage.SendData(106, -1, -1, null, (int)vector.X, vector.Y);
		return false;
	}

	internal static void CatchNPC(int i, int who = -1)
	{
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		if (!Main.npc[i].active)
		{
			return;
		}
		if (who == -1)
		{
			who = Main.myPlayer;
		}
		if (Main.netMode == 1)
		{
			Main.npc[i].active = false;
			NetMessage.SendData(70, -1, -1, null, i, who);
		}
		else if (Main.npc[i].catchItem > 0)
		{
			if (Main.npc[i].type == 687)
			{
				Main.npc[i].TryTeleportingCaughtMysticFrog();
			}
			else if (Main.npc[i].SpawnedFromStatue)
			{
				Vector2 vector = Main.npc[i].Center - new Vector2(20f);
				Utils.PoofOfSmoke(vector);
				Main.npc[i].active = false;
				NetMessage.SendData(23, -1, -1, null, i);
				NetMessage.SendData(106, -1, -1, null, (int)vector.X, vector.Y);
			}
			else
			{
				int itemWhoAmI = Item.NewItem(GetSpawnSource_NPCCatch(who, Main.npc[i]), (int)Main.player[who].Center.X, (int)Main.player[who].Center.Y, 0, 0, Main.npc[i].catchItem, 1, noBroadcast: true, 0, noGrabDelay: true);
				NetMessage.SendData(21, -1, -1, null, itemWhoAmI, 1f);
				Main.npc[i].active = false;
				NetMessage.SendData(23, -1, -1, null, i);
			}
		}
	}

	public void DropItemInstanced(Vector2 Position, Vector2 HitboxSize, int itemType, int itemStack = 1, bool interactionRequired = true)
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		if (itemType <= 0)
		{
			return;
		}
		if (Main.netMode == 2)
		{
			int num = Item.NewItem(GetItemSource_Loot(), (int)Position.X, (int)Position.Y, (int)HitboxSize.X, (int)HitboxSize.Y, itemType, itemStack, noBroadcast: true);
			Main.timeItemSlotCannotBeReusedFor[num] = 54000;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && (playerInteraction[i] || !interactionRequired))
				{
					NetMessage.SendData(90, i, -1, null, num);
				}
			}
			Main.item[num].active = false;
		}
		else if (Main.netMode == 0)
		{
			Item.NewItem(GetItemSource_Loot(), (int)Position.X, (int)Position.Y, (int)HitboxSize.X, (int)HitboxSize.Y, itemType, itemStack);
		}
		value = 0f;
	}

	public void PlayerInteraction(int player)
	{
		if ((realLife < 0) ? (lastInteraction == player) : (Main.npc[realLife].lastInteraction == player))
		{
			return;
		}
		if (type == 13 || type == 14 || type == 15)
		{
			for (int i = 0; i < 200; i++)
			{
				if (i != whoAmI && Main.npc[i].active && (Main.npc[i].type == 13 || Main.npc[i].type == 14 || Main.npc[i].type == 15))
				{
					Main.npc[i].ApplyInteraction(player);
				}
			}
		}
		if (type == 134 || type == 135 || type == 136)
		{
			for (int j = 0; j < 200; j++)
			{
				if (j != whoAmI && Main.npc[j].active && (Main.npc[j].type == 134 || Main.npc[j].type == 135 || Main.npc[j].type == 136))
				{
					Main.npc[j].ApplyInteraction(player);
				}
			}
		}
		if (type == 35 || type == 36)
		{
			for (int k = 0; k < 200; k++)
			{
				if (k != whoAmI && Main.npc[k].active && (Main.npc[k].type == 35 || Main.npc[k].type == 36))
				{
					Main.npc[k].ApplyInteraction(player);
				}
			}
		}
		if (type == 113 || type == 114)
		{
			for (int l = 0; l < 200; l++)
			{
				if (l != whoAmI && Main.npc[l].active && (Main.npc[l].type == 113 || Main.npc[l].type == 114))
				{
					Main.npc[l].ApplyInteraction(player);
				}
			}
		}
		if (type >= 127 && type <= 131)
		{
			for (int m = 0; m < 200; m++)
			{
				if (m != whoAmI && Main.npc[m].active && Main.npc[m].type >= 127 && Main.npc[m].type <= 131)
				{
					Main.npc[m].ApplyInteraction(player);
				}
			}
		}
		if (type >= 245 && type <= 249)
		{
			for (int n = 0; n < 200; n++)
			{
				if (n != whoAmI && Main.npc[n].active && Main.npc[n].type >= 245 && Main.npc[n].type <= 249)
				{
					Main.npc[n].ApplyInteraction(player);
				}
			}
		}
		if ((type == 396 || type == 397) && Main.npc[(int)ai[3]].active && Main.npc[(int)ai[3]].type == 398)
		{
			Main.npc[(int)ai[3]].ApplyInteraction(player);
		}
		if ((type == 393 || type == 394) && Main.npc[(int)ai[0]].active && Main.npc[(int)ai[0]].type == 395)
		{
			Main.npc[(int)ai[0]].ApplyInteraction(player);
		}
		if (type == 492 && Main.npc[(int)ai[0]].active && Main.npc[(int)ai[0]].type == 491)
		{
			Main.npc[(int)ai[0]].ApplyInteraction(player);
		}
		if (type == 125 || type == 126)
		{
			for (int num = 0; num < 200; num++)
			{
				if (num != whoAmI && Main.npc[num].active && (Main.npc[num].type == 125 || Main.npc[num].type == 126))
				{
					Main.npc[num].ApplyInteraction(player);
				}
			}
		}
		ApplyInteraction(player);
	}

	public void ApplyInteraction(int player)
	{
		if (realLife >= 0)
		{
			Main.npc[realLife].playerInteraction[player] = true;
		}
		else
		{
			playerInteraction[player] = true;
		}
		if (player < 255)
		{
			if (realLife >= 0)
			{
				Main.npc[realLife].lastInteraction = player;
			}
			else
			{
				lastInteraction = player;
			}
		}
	}

	public static bool CanReleaseNPCs(int who)
	{
		float num = 0.7f;
		if (Main.netMode != 1)
		{
			num += 0.05f;
		}
		int num2 = 0;
		int num3 = 0;
		for (int i = 0; i < 200; i++)
		{
			if (Main.npc[i].active)
			{
				num3++;
				if (Main.npc[i].releaseOwner == who)
				{
					num2++;
				}
			}
		}
		int num4 = 0;
		for (int j = 0; j < 255; j++)
		{
			if (Main.player[j].active)
			{
				num4++;
			}
		}
		int num5 = (int)(200f * num / (float)num4);
		if ((float)num3 < 200f * num && num2 < num5)
		{
			return true;
		}
		return false;
	}

	public static int ReleaseNPC(int x, int y, int Type, int Style, int who)
	{
		int num = -1;
		if (Main.netMode == 1)
		{
			NetMessage.SendData(71, -1, -1, null, x, y, Type, Style);
		}
		else if (Type >= 0 && (Main.npcCatchable[Type] || who == Main.myPlayer) && CanReleaseNPCs(who))
		{
			switch (Type)
			{
			case 583:
			case 584:
			case 585:
				num = NewNPC(GetSpawnSource_NPCRelease(who), x, y, Type);
				Main.npc[num].releaseOwner = (short)who;
				Main.npc[num].ai[2] = 2f;
				Main.npc[num].TargetClosest();
				Main.npc[num].ai[3] = 0f;
				Main.npc[num].netUpdate = true;
				break;
			case 356:
				num = NewNPC(GetSpawnSource_NPCRelease(who), x, y, Type);
				Main.npc[num].ai[2] = Style;
				Main.npc[num].releaseOwner = (short)who;
				break;
			case 148:
			{
				int num3 = Type + Main.rand.Next(2);
				num = NewNPC(GetSpawnSource_NPCRelease(who), x, y, num3);
				Main.npc[num].releaseOwner = (short)who;
				break;
			}
			case 614:
			{
				num = NewNPC(GetSpawnSource_NPCRelease(who), x, y, Type);
				Main.npc[num].releaseOwner = (short)who;
				int num2 = Main.player[who].direction;
				if (Style > 2)
				{
					Style -= 2;
					Main.npc[num].SpawnedFromStatue = true;
					Main.npc[num].CanBeReplacedByOtherNPCs = true;
				}
				if (Style == 1)
				{
					num2 = 1;
				}
				if (Style == 2)
				{
					num2 = -1;
				}
				Main.npc[num].direction = num2;
				Main.npc[num].spriteDirection = num2;
				Main.npc[num].netUpdate = true;
				break;
			}
			default:
				num = NewNPC(GetSpawnSource_NPCRelease(who), x, y, Type);
				Main.npc[num].releaseOwner = (short)who;
				break;
			}
		}
		return num;
	}

	public static void SlimeRainSpawns(int plr)
	{
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		int logicCheckScreenHeight = Main.LogicCheckScreenHeight;
		int logicCheckScreenWidth = Main.LogicCheckScreenWidth;
		float num = 15f;
		Player player = Main.player[plr];
		if ((double)player.position.Y > Main.worldSurface * 16.0 + (double)(logicCheckScreenHeight / 2) || player.nearbyActiveNPCs > num)
		{
			return;
		}
		float num2 = player.nearbyActiveNPCs / num;
		int num3 = 45 + (int)(450f * num2);
		if (Main.expertMode)
		{
			num3 = (int)((double)num3 * 0.85);
		}
		if (Main.GameModeInfo.IsJourneyMode)
		{
			CreativePowers.SpawnRateSliderPerPlayerPower power = CreativePowerManager.Instance.GetPower<CreativePowers.SpawnRateSliderPerPlayerPower>();
			if (power != null && power.GetIsUnlocked())
			{
				if (power.GetShouldDisableSpawnsFor(plr))
				{
					return;
				}
				if (power.GetRemappedSliderValueFor(plr, out var num4))
				{
					num3 = (int)((float)num3 / num4);
				}
			}
		}
		if (Main.rand.Next(num3) != 0)
		{
			return;
		}
		int num5 = (int)(player.Center.X - (float)logicCheckScreenWidth);
		int maxValue = num5 + logicCheckScreenWidth * 2;
		int minValue = (int)((double)player.Center.Y - (double)logicCheckScreenHeight * 1.5);
		int maxValue2 = (int)((double)player.Center.Y - (double)logicCheckScreenHeight * 0.75);
		int num6 = Main.rand.Next(num5, maxValue);
		int num7 = Main.rand.Next(minValue, maxValue2);
		num6 /= 16;
		num7 /= 16;
		if (num6 < 10 || num6 > Main.maxTilesX + 10 || (double)num7 < Main.worldSurface * 0.3 || (double)num7 > Main.worldSurface || Collision.SolidTiles(num6 - 3, num6 + 3, num7 - 5, num7 + 2) || Main.wallHouse[Main.tile[num6, num7].wall])
		{
			return;
		}
		int num8 = NewNPC(GetSpawnSourceForNaturalSpawn(), num6 * 16 + 8, num7 * 16, 1);
		if (Main.rand.Next(200) == 0)
		{
			Main.npc[num8].SetDefaults(-4);
		}
		else if (Main.expertMode)
		{
			if (Main.rand.Next(7) == 0)
			{
				Main.npc[num8].SetDefaults(-7);
			}
			else if (Main.rand.Next(3) == 0)
			{
				Main.npc[num8].SetDefaults(-3);
			}
		}
		else if (Main.rand.Next(10) == 0)
		{
			Main.npc[num8].SetDefaults(-7);
		}
		else if (Main.rand.Next(5) < 2)
		{
			Main.npc[num8].SetDefaults(-3);
		}
	}

	public static bool Spawning_SandstoneCheck(int x, int y)
	{
		if (!WorldGen.InWorld(x, y, 10))
		{
			return false;
		}
		int num = 0;
		for (int i = 0; i < 8; i++)
		{
			Tile tile = Main.tile[x, y + i];
			if (!tile.active() || !TileID.Sets.Conversion.Sand[tile.type])
			{
				break;
			}
			num++;
			for (int j = 1; j <= 4; j++)
			{
				tile = Main.tile[x + j, y + i];
				if (!tile.active() || !TileID.Sets.Conversion.Sand[tile.type])
				{
					break;
				}
				num++;
			}
			for (int k = 1; k <= 4; k++)
			{
				tile = Main.tile[x - k, y + i];
				if (!tile.active() || !TileID.Sets.Conversion.Sand[tile.type])
				{
					break;
				}
				num++;
			}
		}
		if (Main.remixWorld)
		{
			return num >= 10;
		}
		return num >= 40;
	}

	public static bool Spawning_FlyingAntlionCheck(int x, int y)
	{
		if (!WorldGen.InWorld(x, y, 10))
		{
			return false;
		}
		for (int i = 0; i < 50; i++)
		{
			if (y - i < 10)
			{
				return true;
			}
			Tile tile = Main.tile[x, y - i];
			if (!WallID.Sets.Conversion.HardenedSand[tile.wall] && !WallID.Sets.Conversion.Sandstone[tile.wall])
			{
				return false;
			}
		}
		return true;
	}

	private static int RollDragonflyType(int tileType = 2)
	{
		if (tileType == 53)
		{
			return Main.rand.NextFromList(new short[3] { 595, 598, 600 });
		}
		return Main.rand.NextFromList(new short[3] { 596, 597, 599 });
	}

	public static void ResetRemixHax()
	{
		Main.dayTime = dayTimeHax;
		Main.raining = rainingHax;
		Main.cloudAlpha = cloudAlphaHax;
	}

	public static void SetRemixHax()
	{
		dayTimeHax = Main.dayTime;
		rainingHax = Main.raining;
		cloudAlphaHax = Main.cloudAlpha;
	}

	public static bool SpawnTileOrAboveHasAnyWallInSet(int x, int y, bool[] wallTypes)
	{
		if (!WorldGen.InWorld(x, y, 2))
		{
			return false;
		}
		Tile tile = Main.tile[x, y];
		Tile tile2 = Main.tile[x, y - 1];
		if (tile == null || tile2 == null)
		{
			return false;
		}
		if (tile.wall < 0 || !wallTypes[tile.wall])
		{
			if (tile2.wall >= 0)
			{
				return wallTypes[tile2.wall];
			}
			return false;
		}
		return true;
	}

	public static void SpawnNPC()
	{
		//IL_02c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2039: Unknown result type (might be due to invalid IL or missing references)
		//IL_2051: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1386: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2640: Unknown result type (might be due to invalid IL or missing references)
		//IL_6908: Unknown result type (might be due to invalid IL or missing references)
		//IL_6940: Unknown result type (might be due to invalid IL or missing references)
		if (noSpawnCycle)
		{
			noSpawnCycle = false;
			return;
		}
		bool tooWindyForButterflies = TooWindyForButterflies;
		bool flag = (double)Main.windSpeedTarget < -0.4 || (double)Main.windSpeedTarget > 0.4;
		RevengeManager.CheckRespawns();
		bool flag12 = false;
		bool flag23 = false;
		int num = 0;
		int num24 = 0;
		int num35 = 0;
		int num46 = 0;
		for (int i = 0; i < 255; i++)
		{
			if (Main.player[i].active)
			{
				num46++;
			}
		}
		float num57 = 0f;
		for (int j = 0; j < 200; j++)
		{
			if (Main.npc[j].active)
			{
				switch (Main.npc[j].type)
				{
				case 315:
				case 325:
				case 327:
				case 328:
				case 344:
				case 345:
				case 346:
					num57 += Main.npc[j].npcSlots;
					break;
				}
			}
		}
		NPCSpawnInfo spawnInfo = default(NPCSpawnInfo);
		float num67 = (int)((float)defaultMaxSpawns * (2f + 0.3f * (float)num46));
		Rectangle rectangle = default(Rectangle);
		Rectangle rectangle2 = default(Rectangle);
		for (int k = 0; k < 255; k++)
		{
			if (!Main.player[k].active || Main.player[k].dead)
			{
				continue;
			}
			flag23 = false;
			if (Main.player[k].isNearNPC(398, MoonLordFightingDistance))
			{
				continue;
			}
			if (Main.slimeRain)
			{
				SlimeRainSpawns(k);
			}
			bool flag33 = false;
			bool flag34 = false;
			bool flag35 = false;
			bool flag36 = false;
			bool flag37 = false;
			bool flag38 = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = downedPlantBoss && Main.hardMode;
			bool isItAHappyWindyDay = Main.IsItAHappyWindyDay;
			if (Main.player[k].active && Main.invasionType > 0 && Main.invasionDelay == 0 && Main.invasionSize > 0 && ((double)Main.player[k].position.Y < Main.worldSurface * 16.0 + (double)sHeight || Main.remixWorld))
			{
				int num78 = 3000;
				if ((double)Main.player[k].position.X > Main.invasionX * 16.0 - (double)num78 && (double)Main.player[k].position.X < Main.invasionX * 16.0 + (double)num78)
				{
					flag35 = true;
				}
				else if (Main.invasionX >= (double)(Main.maxTilesX / 2 - 5) && Main.invasionX <= (double)(Main.maxTilesX / 2 + 5))
				{
					for (int l = 0; l < 200; l++)
					{
						if (Main.npc[l].townNPC && Math.Abs(Main.player[k].position.X - Main.npc[l].Center.X) < (float)num78)
						{
							if (Main.rand.Next(3) != 0)
							{
								flag35 = true;
							}
							break;
						}
					}
				}
			}
			if (Main.player[k].ZoneTowerSolar || Main.player[k].ZoneTowerNebula || Main.player[k].ZoneTowerVortex || Main.player[k].ZoneTowerStardust)
			{
				flag35 = true;
			}
			int num89 = (int)(Main.player[k].position.X + (float)(Main.player[k].width / 2)) / 16;
			int num100 = (int)(Main.player[k].position.Y + (float)(Main.player[k].height / 2)) / 16;
			if (Main.wallHouse[Main.tile[num89, num100].wall])
			{
				flag34 = true;
			}
			if (Main.tile[num89, num100].wall == 87)
			{
				flag33 = true;
			}
			flag12 = false;
			spawnRate = defaultSpawnRate;
			maxSpawns = defaultMaxSpawns;
			if (Main.hardMode)
			{
				spawnRate = (int)((double)defaultSpawnRate * 0.9);
				maxSpawns = defaultMaxSpawns + 1;
			}
			if (Main.player[k].position.Y > (float)(Main.UnderworldLayer * 16))
			{
				maxSpawns = (int)((float)maxSpawns * 2f);
			}
			else if ((double)Main.player[k].position.Y > Main.rockLayer * 16.0 + (double)sHeight)
			{
				if (Main.remixWorld)
				{
					if (Main.hardMode)
					{
						spawnRate = (int)((double)spawnRate * 0.45);
						maxSpawns = (int)((float)maxSpawns * 1.8f);
					}
					else
					{
						spawnRate = (int)((double)spawnRate * 0.5);
						maxSpawns = (int)((float)maxSpawns * 1.7f);
					}
				}
				else
				{
					spawnRate = (int)((double)spawnRate * 0.4);
					maxSpawns = (int)((float)maxSpawns * 1.9f);
				}
			}
			else if ((double)Main.player[k].position.Y > Main.worldSurface * 16.0 + (double)sHeight)
			{
				if (Main.remixWorld)
				{
					spawnRate = (int)((double)spawnRate * 0.4);
					maxSpawns = (int)((float)maxSpawns * 1.9f);
				}
				else if (Main.hardMode)
				{
					spawnRate = (int)((double)spawnRate * 0.45);
					maxSpawns = (int)((float)maxSpawns * 1.8f);
				}
				else
				{
					spawnRate = (int)((double)spawnRate * 0.5);
					maxSpawns = (int)((float)maxSpawns * 1.7f);
				}
			}
			else if (Main.remixWorld)
			{
				if (!Main.dayTime)
				{
					spawnRate = (int)((double)spawnRate * 0.6);
					maxSpawns = (int)((float)maxSpawns * 1.3f);
				}
			}
			else if (!Main.dayTime)
			{
				spawnRate = (int)((double)spawnRate * 0.6);
				maxSpawns = (int)((float)maxSpawns * 1.3f);
				if (Main.bloodMoon)
				{
					spawnRate = (int)((double)spawnRate * 0.3);
					maxSpawns = (int)((float)maxSpawns * 1.8f);
				}
				if ((Main.pumpkinMoon || Main.snowMoon) && (double)Main.player[k].position.Y < Main.worldSurface * 16.0)
				{
					spawnRate = (int)((double)spawnRate * 0.2);
					maxSpawns *= 2;
				}
			}
			else if (Main.dayTime && Main.eclipse)
			{
				spawnRate = (int)((double)spawnRate * 0.2);
				maxSpawns = (int)((float)maxSpawns * 1.9f);
			}
			if (Main.remixWorld)
			{
				if (!Main.dayTime)
				{
					if (Main.bloodMoon)
					{
						spawnRate = (int)((double)spawnRate * 0.3);
						maxSpawns = (int)((float)maxSpawns * 1.8f);
						if ((double)Main.player[k].position.Y > Main.rockLayer * 16.0 + (double)sHeight)
						{
							spawnRate = (int)((double)spawnRate * 0.6);
						}
					}
					if (Main.pumpkinMoon || Main.snowMoon)
					{
						spawnRate = (int)((double)spawnRate * 0.2);
						maxSpawns *= 2;
						if ((double)Main.player[k].position.Y > Main.rockLayer * 16.0 + (double)sHeight)
						{
							spawnRate = (int)((double)spawnRate * 0.6);
						}
					}
				}
				else if (Main.dayTime && Main.eclipse)
				{
					spawnRate = (int)((double)spawnRate * 0.2);
					maxSpawns = (int)((float)maxSpawns * 1.9f);
				}
			}
			if (Main.player[k].ZoneSnow && (double)(Main.player[k].position.Y / 16f) < Main.worldSurface)
			{
				maxSpawns = (int)((float)maxSpawns + (float)maxSpawns * Main.cloudAlpha);
				spawnRate = (int)((float)spawnRate * (1f - Main.cloudAlpha + 1f) / 2f);
			}
			if (Main.drunkWorld && Main.tile[num89, num100].wall == 86)
			{
				spawnRate = (int)((double)spawnRate * 0.3);
				maxSpawns = (int)((float)maxSpawns * 1.8f);
			}
			if (Main.player[k].ZoneDungeon)
			{
				spawnRate = (int)((double)spawnRate * 0.3);
				maxSpawns = (int)((float)maxSpawns * 1.8f);
			}
			else if (Main.player[k].ZoneSandstorm)
			{
				spawnRate = (int)((float)spawnRate * (Main.hardMode ? 0.4f : 0.9f));
				maxSpawns = (int)((float)maxSpawns * (Main.hardMode ? 1.5f : 1.2f));
			}
			else if (Main.player[k].ZoneUndergroundDesert)
			{
				spawnRate = (int)((float)spawnRate * 0.2f);
				maxSpawns = (int)((float)maxSpawns * 3f);
			}
			else if (Main.player[k].ZoneJungle)
			{
				if (Main.player[k].townNPCs == 0f)
				{
					spawnRate = (int)((double)spawnRate * 0.4);
					maxSpawns = (int)((float)maxSpawns * 1.5f);
				}
				else if (Main.player[k].townNPCs == 1f)
				{
					spawnRate = (int)((double)spawnRate * 0.55);
					maxSpawns = (int)((double)maxSpawns * 1.4);
				}
				else if (Main.player[k].townNPCs == 2f)
				{
					spawnRate = (int)((double)spawnRate * 0.7);
					maxSpawns = (int)((float)maxSpawns * 1.3f);
				}
				else
				{
					spawnRate = (int)((double)spawnRate * 0.85);
					maxSpawns = (int)((float)maxSpawns * 1.2f);
				}
			}
			else if (Main.player[k].ZoneCorrupt || Main.player[k].ZoneCrimson)
			{
				spawnRate = (int)((double)spawnRate * 0.65);
				maxSpawns = (int)((float)maxSpawns * 1.3f);
			}
			else if (Main.player[k].ZoneMeteor)
			{
				spawnRate = (int)((double)spawnRate * 0.4);
				maxSpawns = (int)((float)maxSpawns * 1.1f);
			}
			if (flag33)
			{
				spawnRate = (int)((float)spawnRate * 0.8f);
				maxSpawns = (int)((float)maxSpawns * 1.2f);
				if (Main.remixWorld)
				{
					spawnRate = (int)((double)spawnRate * 0.4);
					maxSpawns = (int)((float)maxSpawns * 1.5f);
				}
			}
			if (Main.remixWorld && (Main.player[k].ZoneCorrupt || Main.player[k].ZoneCrimson) && (double)(Main.player[k].position.Y / 16f) < Main.worldSurface)
			{
				spawnRate = (int)((double)spawnRate * 0.5);
				maxSpawns *= 2;
			}
			if (Main.player[k].ZoneHallow && (double)Main.player[k].position.Y > Main.rockLayer * 16.0 + (double)sHeight)
			{
				spawnRate = (int)((double)spawnRate * 0.65);
				maxSpawns = (int)((float)maxSpawns * 1.3f);
			}
			if (Main.wofNPCIndex >= 0 && Main.player[k].position.Y > (float)(Main.UnderworldLayer * 16))
			{
				maxSpawns = (int)((float)maxSpawns * 0.3f);
				spawnRate *= 3;
			}
			if ((double)Main.player[k].nearbyActiveNPCs < (double)maxSpawns * 0.2)
			{
				spawnRate = (int)((float)spawnRate * 0.6f);
			}
			else if ((double)Main.player[k].nearbyActiveNPCs < (double)maxSpawns * 0.4)
			{
				spawnRate = (int)((float)spawnRate * 0.7f);
			}
			else if ((double)Main.player[k].nearbyActiveNPCs < (double)maxSpawns * 0.6)
			{
				spawnRate = (int)((float)spawnRate * 0.8f);
			}
			else if ((double)Main.player[k].nearbyActiveNPCs < (double)maxSpawns * 0.8)
			{
				spawnRate = (int)((float)spawnRate * 0.9f);
			}
			if ((double)(Main.player[k].position.Y / 16f) > (Main.worldSurface + Main.rockLayer) / 2.0 || Main.player[k].ZoneCorrupt || Main.player[k].ZoneCrimson)
			{
				if ((double)Main.player[k].nearbyActiveNPCs < (double)maxSpawns * 0.2)
				{
					spawnRate = (int)((float)spawnRate * 0.7f);
				}
				else if ((double)Main.player[k].nearbyActiveNPCs < (double)maxSpawns * 0.4)
				{
					spawnRate = (int)((float)spawnRate * 0.9f);
				}
			}
			int maxValue = 65;
			if (Main.remixWorld && (double)(Main.player[k].position.Y / 16f) < Main.worldSurface && (Main.player[k].ZoneCorrupt || Main.player[k].ZoneCrimson))
			{
				maxValue = 25;
				spawnRate = (int)((double)spawnRate * 0.8);
				maxSpawns *= 2;
			}
			if (Main.player[k].invis)
			{
				spawnRate = (int)((float)spawnRate * 1.2f);
				maxSpawns = (int)((float)maxSpawns * 0.8f);
			}
			if (Main.player[k].calmed)
			{
				spawnRate = (int)((float)spawnRate * 1.65f);
				maxSpawns = (int)((float)maxSpawns * 0.6f);
			}
			if (Main.player[k].sunflower)
			{
				spawnRate = (int)((float)spawnRate * 1.2f);
				maxSpawns = (int)((float)maxSpawns * 0.8f);
			}
			if (Main.player[k].anglerSetSpawnReduction)
			{
				spawnRate = (int)((float)spawnRate * 1.3f);
				maxSpawns = (int)((float)maxSpawns * 0.7f);
			}
			if (Main.player[k].enemySpawns)
			{
				spawnRate = (int)((double)spawnRate * 0.5);
				maxSpawns = (int)((float)maxSpawns * 2f);
			}
			if (Main.player[k].ZoneWaterCandle || Main.player[k].inventory[Main.player[k].selectedItem].type == 148)
			{
				if (!Main.player[k].ZonePeaceCandle && Main.player[k].inventory[Main.player[k].selectedItem].type != 3117)
				{
					spawnRate = (int)((double)spawnRate * 0.75);
					maxSpawns = (int)((float)maxSpawns * 1.5f);
				}
			}
			else if (Main.player[k].ZonePeaceCandle || Main.player[k].inventory[Main.player[k].selectedItem].type == 3117)
			{
				spawnRate = (int)((double)spawnRate * 1.3);
				maxSpawns = (int)((float)maxSpawns * 0.7f);
			}
			if (Main.player[k].ZoneShadowCandle || Main.player[k].inventory[Main.player[k].selectedItem].type == 5322)
			{
				Main.player[k].townNPCs = 0f;
			}
			if (Main.player[k].ZoneWaterCandle && (double)(Main.player[k].position.Y / 16f) < Main.worldSurface * 0.3499999940395355)
			{
				spawnRate = (int)((double)spawnRate * 0.5);
			}
			if (Main.player[k].isNearFairy())
			{
				spawnRate = (int)((float)spawnRate * 1.2f);
				maxSpawns = (int)((float)maxSpawns * 0.8f);
			}
			if ((double)spawnRate < (double)defaultSpawnRate * 0.1)
			{
				spawnRate = (int)((double)defaultSpawnRate * 0.1);
			}
			if (maxSpawns > defaultMaxSpawns * 3)
			{
				maxSpawns = defaultMaxSpawns * 3;
			}
			if (Main.getGoodWorld)
			{
				spawnRate = (int)((float)spawnRate * 0.8f);
				maxSpawns = (int)((float)maxSpawns * 1.2f);
			}
			if (Main.GameModeInfo.IsJourneyMode)
			{
				CreativePowers.SpawnRateSliderPerPlayerPower power = CreativePowerManager.Instance.GetPower<CreativePowers.SpawnRateSliderPerPlayerPower>();
				if (power != null && power.GetIsUnlocked())
				{
					if (power.GetShouldDisableSpawnsFor(k))
					{
						continue;
					}
					if (power.GetRemappedSliderValueFor(k, out var num2))
					{
						spawnRate = (int)((float)spawnRate / num2);
						maxSpawns = (int)((float)maxSpawns * num2);
					}
				}
			}
			if ((Main.pumpkinMoon || Main.snowMoon) && (Main.remixWorld || (double)Main.player[k].position.Y < Main.worldSurface * 16.0))
			{
				maxSpawns = (int)((double)defaultMaxSpawns * (2.0 + 0.3 * (double)num46));
				spawnRate = 20;
			}
			if (DD2Event.Ongoing && Main.player[k].ZoneOldOneArmy)
			{
				maxSpawns = defaultMaxSpawns;
				spawnRate = defaultSpawnRate;
			}
			if (flag35)
			{
				maxSpawns = (int)((double)defaultMaxSpawns * (2.0 + 0.3 * (double)num46));
				spawnRate = 20;
			}
			if (Main.player[k].ZoneDungeon && !downedBoss3)
			{
				spawnRate = 10;
			}
			if (!flag35 && ((!Main.bloodMoon && !Main.pumpkinMoon && !Main.snowMoon) || Main.dayTime) && (!Main.eclipse || !Main.dayTime) && !Main.player[k].ZoneDungeon && !Main.player[k].ZoneCorrupt && !Main.player[k].ZoneCrimson && !Main.player[k].ZoneMeteor && !Main.player[k].ZoneOldOneArmy)
			{
				if (Main.player[k].Center.Y / 16f > (float)Main.UnderworldLayer && (!Main.remixWorld || !((double)(Main.player[k].Center.X / 16f) > (double)Main.maxTilesX * 0.39 + 50.0) || !((double)(Main.player[k].Center.X / 16f) < (double)Main.maxTilesX * 0.61)))
				{
					if (Main.player[k].townNPCs == 1f)
					{
						if (Main.rand.Next(2) == 0)
						{
							flag34 = true;
						}
						if (Main.rand.Next(10) == 0)
						{
							flag4 = true;
							maxSpawns = (int)((double)(float)maxSpawns * 0.5);
						}
						else
						{
							spawnRate = (int)((double)(float)spawnRate * 1.25);
						}
					}
					else if (Main.player[k].townNPCs == 2f)
					{
						if (Main.rand.Next(4) != 0)
						{
							flag34 = true;
						}
						if (Main.rand.Next(5) == 0)
						{
							flag4 = true;
							maxSpawns = (int)((double)(float)maxSpawns * 0.5);
						}
						else
						{
							spawnRate = (int)((double)(float)spawnRate * 1.5);
						}
					}
					else if (Main.player[k].townNPCs >= 3f)
					{
						if (Main.rand.Next(10) != 0)
						{
							flag34 = true;
						}
						if (Main.rand.Next(3) == 0)
						{
							flag4 = true;
							maxSpawns = (int)((double)(float)maxSpawns * 0.5);
						}
						else
						{
							spawnRate = (int)((float)spawnRate * 2f);
						}
					}
				}
				else if (Main.player[k].townNPCs == 1f)
				{
					flag34 = true;
					if (Main.player[k].ZoneGraveyard)
					{
						spawnRate = (int)((double)(float)spawnRate * 1.66);
						if (Main.rand.Next(9) == 1)
						{
							flag4 = true;
							maxSpawns = (int)((double)(float)maxSpawns * 0.6);
						}
					}
					else if (Main.rand.Next(3) == 1)
					{
						flag4 = true;
						maxSpawns = (int)((double)(float)maxSpawns * 0.6);
					}
					else
					{
						spawnRate = (int)((float)spawnRate * 2f);
					}
				}
				else if (Main.player[k].townNPCs == 2f)
				{
					flag34 = true;
					if (Main.player[k].ZoneGraveyard)
					{
						spawnRate = (int)((double)(float)spawnRate * 2.33);
						if (Main.rand.Next(6) == 1)
						{
							flag4 = true;
							maxSpawns = (int)((double)(float)maxSpawns * 0.6);
						}
					}
					else if (Main.rand.Next(3) != 0)
					{
						flag4 = true;
						maxSpawns = (int)((double)(float)maxSpawns * 0.6);
					}
					else
					{
						spawnRate = (int)((float)spawnRate * 3f);
					}
				}
				else if (Main.player[k].townNPCs >= 3f)
				{
					flag34 = true;
					if (Main.player[k].ZoneGraveyard)
					{
						spawnRate = (int)((float)spawnRate * 3f);
						if (Main.rand.Next(3) == 1)
						{
							flag4 = true;
							maxSpawns = (int)((double)(float)maxSpawns * 0.6);
						}
					}
					else
					{
						if (!Main.expertMode || Main.rand.Next(30) != 0)
						{
							flag4 = true;
						}
						maxSpawns = (int)((double)(float)maxSpawns * 0.6);
					}
				}
			}
			NPCLoader.EditSpawnRate(Main.player[k], ref spawnRate, ref maxSpawns);
			bool flag7 = false;
			if (Main.player[k].active && !Main.player[k].dead && Main.player[k].nearbyActiveNPCs < (float)maxSpawns && Main.rand.Next(spawnRate) == 0)
			{
				bool flag8 = Main.player[k].ZoneTowerNebula || Main.player[k].ZoneTowerSolar || Main.player[k].ZoneTowerStardust || Main.player[k].ZoneTowerVortex;
				spawnRangeX = (int)((double)(sWidth / 16) * 0.7);
				spawnRangeY = (int)((double)(sHeight / 16) * 0.7);
				safeRangeX = (int)((double)(sWidth / 16) * 0.52);
				safeRangeY = (int)((double)(sHeight / 16) * 0.52);
				if (Main.player[k].inventory[Main.player[k].selectedItem].type == 1254 || Main.player[k].inventory[Main.player[k].selectedItem].type == 1299 || Main.player[k].scope)
				{
					float num13 = 1.5f;
					if (Main.player[k].inventory[Main.player[k].selectedItem].type == 1254 && Main.player[k].scope)
					{
						num13 = 1.25f;
					}
					else if (Main.player[k].inventory[Main.player[k].selectedItem].type == 1254)
					{
						num13 = 1.5f;
					}
					else if (Main.player[k].inventory[Main.player[k].selectedItem].type == 1299)
					{
						num13 = 1.5f;
					}
					else if (Main.player[k].scope)
					{
						num13 = 2f;
					}
					spawnRangeX += (int)((double)(sWidth / 16) * 0.5 / (double)num13);
					spawnRangeY += (int)((double)(sHeight / 16) * 0.5 / (double)num13);
					safeRangeX += (int)((double)(sWidth / 16) * 0.5 / (double)num13);
					safeRangeY += (int)((double)(sHeight / 16) * 0.5 / (double)num13);
				}
				NPCLoader.EditSpawnRange(Main.player[k], ref spawnRangeX, ref spawnRangeY, ref safeRangeX, ref safeRangeY);
				int num16 = (int)(Main.player[k].position.X / 16f) - spawnRangeX;
				int num17 = (int)(Main.player[k].position.X / 16f) + spawnRangeX;
				int num18 = (int)(Main.player[k].position.Y / 16f) - spawnRangeY;
				int num19 = (int)(Main.player[k].position.Y / 16f) + spawnRangeY;
				int num20 = (int)(Main.player[k].position.X / 16f) - safeRangeX;
				int num21 = (int)(Main.player[k].position.X / 16f) + safeRangeX;
				int num22 = (int)(Main.player[k].position.Y / 16f) - safeRangeY;
				int num23 = (int)(Main.player[k].position.Y / 16f) + safeRangeY;
				if (num16 < 0)
				{
					num16 = 0;
				}
				if (num17 > Main.maxTilesX)
				{
					num17 = Main.maxTilesX;
				}
				if (num18 < 0)
				{
					num18 = 0;
				}
				if (num19 > Main.maxTilesY)
				{
					num19 = Main.maxTilesY;
				}
				for (int m = 0; m < 50; m++)
				{
					int num25 = Main.rand.Next(num16, num17);
					int num26 = Main.rand.Next(num18, num19);
					if (!Main.tile[num25, num26].nactive() || !Main.tileSolid[Main.tile[num25, num26].type])
					{
						if (!flag8 && Main.wallHouse[Main.tile[num25, num26].wall])
						{
							continue;
						}
						if (!flag35 && (double)num26 < Main.worldSurface * 0.3499999940395355 && !flag4 && ((double)num25 < (double)Main.maxTilesX * 0.45 || (double)num25 > (double)Main.maxTilesX * 0.55 || Main.hardMode))
						{
							num35 = Main.tile[num25, num26].type;
							num = num25;
							num24 = num26;
							flag12 = true;
							flag23 = true;
						}
						else if (!flag35 && (double)num26 < Main.worldSurface * 0.44999998807907104 && !flag4 && Main.hardMode && Main.rand.Next(10) == 0)
						{
							num35 = Main.tile[num25, num26].type;
							num = num25;
							num24 = num26;
							flag12 = true;
							flag23 = true;
						}
						else
						{
							for (int n = num26; n < Main.maxTilesY && n < num19; n++)
							{
								if (Main.tile[num25, n].nactive() && Main.tileSolid[Main.tile[num25, n].type])
								{
									if (num25 < num20 || num25 > num21 || n < num22 || n > num23)
									{
										num35 = Main.tile[num25, n].type;
										num = num25;
										num24 = n;
										flag12 = true;
									}
									break;
								}
							}
						}
						if (Main.player[k].ZoneShadowCandle)
						{
							flag34 = false;
						}
						else if (!flag23 && Main.player[k].afkCounter >= AFKTimeNeededForNoWorms)
						{
							flag34 = true;
						}
						if (flag12)
						{
							int num27 = num - spawnSpaceX / 2;
							int num28 = num + spawnSpaceX / 2;
							int num29 = num24 - spawnSpaceY;
							int num30 = num24;
							if (num27 < 0)
							{
								flag12 = false;
							}
							if (num28 > Main.maxTilesX)
							{
								flag12 = false;
							}
							if (num29 < 0)
							{
								flag12 = false;
							}
							if (num30 > Main.maxTilesY)
							{
								flag12 = false;
							}
							if (flag12)
							{
								for (int num31 = num27; num31 < num28; num31++)
								{
									for (int num32 = num29; num32 < num30; num32++)
									{
										if (Main.tile[num31, num32].nactive() && Main.tileSolid[Main.tile[num31, num32].type])
										{
											flag12 = false;
											break;
										}
										if (Main.tile[num31, num32].lava())
										{
											flag12 = false;
											break;
										}
									}
								}
							}
							if (num >= num20 && num <= num21)
							{
								flag7 = true;
							}
						}
					}
					if (flag12 || flag12)
					{
						break;
					}
				}
			}
			if (flag12)
			{
				((Rectangle)(ref rectangle))._002Ector(num * 16, num24 * 16, 16, 16);
				for (int num33 = 0; num33 < 255; num33++)
				{
					if (Main.player[num33].active)
					{
						((Rectangle)(ref rectangle2))._002Ector((int)(Main.player[num33].position.X + (float)(Main.player[num33].width / 2) - (float)(sWidth / 2) - (float)safeRangeX), (int)(Main.player[num33].position.Y + (float)(Main.player[num33].height / 2) - (float)(sHeight / 2) - (float)safeRangeY), sWidth + safeRangeX * 2, sHeight + safeRangeY * 2);
						if (((Rectangle)(ref rectangle)).Intersects(rectangle2))
						{
							flag12 = false;
						}
					}
				}
			}
			if (flag12)
			{
				if (Main.player[k].ZoneDungeon && (!Main.tileDungeon[Main.tile[num, num24].type] || Main.tile[num, num24 - 1].wall == 0))
				{
					flag12 = false;
				}
				if (Main.tile[num, num24 - 1].liquid > 0 && Main.tile[num, num24 - 2].liquid > 0 && !Main.tile[num, num24 - 1].lava())
				{
					if (Main.tile[num, num24 - 1].shimmer())
					{
						flag12 = false;
					}
					if (Main.tile[num, num24 - 1].honey())
					{
						flag37 = true;
					}
					else
					{
						flag36 = true;
					}
				}
				int num34 = (int)Main.player[k].Center.X / 16;
				int num36 = (int)(Main.player[k].Bottom.Y + 8f) / 16;
				spawnInfo.PlayerFloorX = num34;
				spawnInfo.PlayerFloorY = num36;
				if (Main.tile[num, num24].type == 367)
				{
					flag2 = true;
				}
				else if (Main.tile[num, num24].type == 368)
				{
					flag38 = true;
				}
				else if (Main.tile[num34, num36].type == 367)
				{
					flag2 = true;
				}
				else if (Main.tile[num34, num36].type == 368)
				{
					flag38 = true;
				}
				else
				{
					int num37 = Main.rand.Next(20, 31);
					int num38 = Main.rand.Next(1, 4);
					if (num - num37 < 0)
					{
						num37 = num;
					}
					if (num24 - num37 < 0)
					{
						num37 = num24;
					}
					if (num + num37 >= Main.maxTilesX)
					{
						num37 = Main.maxTilesX - num - 1;
					}
					if (num24 + num37 >= Main.maxTilesY)
					{
						num37 = Main.maxTilesY - num24 - 1;
					}
					for (int num39 = num - num37; num39 <= num + num37; num39 += num38)
					{
						int num40 = Main.rand.Next(1, 4);
						for (int num41 = num24 - num37; num41 <= num24 + num37; num41 += num40)
						{
							if (Main.tile[num39, num41].type == 367)
							{
								flag2 = true;
							}
							if (Main.tile[num39, num41].type == 368)
							{
								flag38 = true;
							}
						}
					}
					num37 = Main.rand.Next(30, 61);
					num38 = Main.rand.Next(3, 7);
					if (num34 - num37 < 0)
					{
						num37 = num34;
					}
					if (num36 - num37 < 0)
					{
						num37 = num36;
					}
					if (num34 + num37 >= Main.maxTilesX)
					{
						num37 = Main.maxTilesX - num34 - 2;
					}
					if (num36 + num37 >= Main.maxTilesY)
					{
						num37 = Main.maxTilesY - num36 - 2;
					}
					for (int num42 = num34 - num37; num42 <= num34 + num37; num42 += num38)
					{
						int num43 = Main.rand.Next(3, 7);
						for (int num44 = num36 - num37; num44 <= num36 + num37; num44 += num43)
						{
							if (Main.tile[num42, num44].type == 367)
							{
								flag2 = true;
							}
							if (Main.tile[num42, num44].type == 368)
							{
								flag38 = true;
							}
						}
					}
				}
				if (flag37)
				{
					flag12 = false;
				}
				if ((num35 == 477 || num35 == 492) && !Main.bloodMoon && !Main.eclipse && Main.invasionType <= 0 && !Main.pumpkinMoon && !Main.snowMoon && !Main.slimeRain && Main.rand.Next(100) < 10)
				{
					flag12 = false;
				}
			}
			if (!flag12)
			{
				continue;
			}
			if (Main.remixWorld)
			{
				ResetRemixHax();
			}
			bool flag9 = (double)num24 <= Main.rockLayer;
			if (Main.remixWorld)
			{
				flag9 = (double)num24 > Main.rockLayer && num24 <= Main.maxTilesY - 190;
			}
			bool flag10 = (double)num24 > Main.rockLayer && num24 < Main.UnderworldLayer;
			if (Main.dontStarveWorld)
			{
				flag10 = num24 < Main.UnderworldLayer;
			}
			if (flag10 && !Main.player[k].ZoneDungeon && !flag35)
			{
				if (Main.rand.Next(3) == 0)
				{
					int num45 = Main.rand.Next(5, 15);
					if (num - num45 >= 0 && num + num45 < Main.maxTilesX)
					{
						for (int num47 = num - num45; num47 < num + num45; num47++)
						{
							for (int num48 = num24 - num45; num48 < num24 + num45; num48++)
							{
								if (Main.tile[num47, num48].wall == 62)
								{
									flag3 = true;
								}
							}
						}
					}
				}
				else
				{
					int num49 = (int)Main.player[k].position.X / 16;
					int num50 = (int)Main.player[k].position.Y / 16;
					if (Main.tile[num49, num50].wall == 62)
					{
						flag3 = true;
					}
				}
			}
			if ((double)num24 < Main.rockLayer && num24 > 200 && !Main.player[k].ZoneDungeon && !flag35)
			{
				if (Main.rand.Next(3) == 0)
				{
					int num51 = Main.rand.Next(5, 15);
					if (num - num51 >= 0 && num + num51 < Main.maxTilesX)
					{
						for (int num52 = num - num51; num52 < num + num51; num52++)
						{
							for (int num53 = num24 - num51; num53 < num24 + num51; num53++)
							{
								if (WallID.Sets.AllowsUndergroundDesertEnemiesToSpawn[Main.tile[num52, num53].wall])
								{
									flag5 = true;
								}
							}
						}
					}
				}
				else
				{
					int num54 = (int)Main.player[k].position.X / 16;
					int num55 = (int)Main.player[k].position.Y / 16;
					if (WallID.Sets.AllowsUndergroundDesertEnemiesToSpawn[Main.tile[num54, num55].wall])
					{
						flag5 = true;
					}
				}
			}
			flag12 = false;
			int num56 = Main.tile[num, num24].type;
			int num58 = Main.tile[num, num24 - 1].wall;
			if (Main.tile[num, num24 - 2].wall == 244 || Main.tile[num, num24].wall == 244)
			{
				num58 = 244;
			}
			bool flag11 = (float)new Point(num89 - num, num100 - num24).X * Main.windSpeedTarget > 0f;
			bool flag13 = (double)num24 <= Main.worldSurface;
			bool flag14 = (double)num24 >= Main.rockLayer;
			bool flag15 = ((num < WorldGen.oceanDistance || num > Main.maxTilesX - WorldGen.oceanDistance) && Main.tileSand[num56] && (double)num24 < Main.rockLayer) || (num35 == 53 && WorldGen.oceanDepths(num, num24));
			bool flag16 = (double)num24 <= Main.worldSurface && (num < WorldGen.beachDistance || num > Main.maxTilesX - WorldGen.beachDistance);
			bool flag17 = Main.cloudAlpha > 0f;
			int range = 10;
			if (Main.remixWorld)
			{
				flag17 = Main.raining;
				flag14 = (((double)num24 > Main.worldSurface && (double)num24 < Main.rockLayer) ? true : false);
				if ((double)num24 < Main.worldSurface + 5.0)
				{
					Main.raining = false;
					Main.cloudAlpha = 0f;
					Main.dayTime = false;
				}
				range = 5;
				if (Main.player[k].ZoneCorrupt || Main.player[k].ZoneCrimson)
				{
					flag15 = false;
					flag16 = false;
				}
				if ((double)num < (double)Main.maxTilesX * 0.43 || (double)num > (double)Main.maxTilesX * 0.57)
				{
					if ((double)num24 > Main.rockLayer - 200.0 && num24 < Main.maxTilesY - 200 && Main.rand.Next(2) == 0)
					{
						flag15 = true;
					}
					if ((double)num24 > Main.rockLayer - 200.0 && num24 < Main.maxTilesY - 200 && Main.rand.Next(2) == 0)
					{
						flag16 = true;
					}
				}
				if ((double)num24 > Main.rockLayer - 20.0)
				{
					if (num24 <= Main.maxTilesY - 190 && Main.rand.Next(3) != 0)
					{
						flag13 = true;
						Main.dayTime = false;
						if (Main.rand.Next(2) == 0)
						{
							Main.dayTime = true;
						}
					}
					else if ((Main.bloodMoon || (Main.eclipse && Main.dayTime)) && (double)num > (double)Main.maxTilesX * 0.38 + 50.0 && (double)num < (double)Main.maxTilesX * 0.62)
					{
						flag13 = true;
					}
				}
			}
			num56 = SpawnNPC_TryFindingProperGroundTileType(num56, num, num24);
			spawnInfo.SpawnTileX = num;
			spawnInfo.SpawnTileY = num24;
			spawnInfo.SpawnTileType = num35;
			spawnInfo.Player = Main.player[k];
			spawnInfo.Sky = flag23;
			spawnInfo.Lihzahrd = flag33;
			spawnInfo.PlayerSafe = flag34;
			spawnInfo.Invasion = flag35;
			spawnInfo.Water = flag36;
			spawnInfo.Granite = flag38;
			spawnInfo.Marble = flag2;
			spawnInfo.SpiderCave = flag3;
			spawnInfo.PlayerInTown = flag4;
			spawnInfo.DesertCave = flag5;
			spawnInfo.SafeRangeX = flag7;
			int newNPC = 200;
			int? spawnChoice = NPCLoader.ChooseSpawn(spawnInfo);
			if (!spawnChoice.HasValue)
			{
				break;
			}
			int spawn = spawnChoice.Value;
			if (spawn == 0)
			{
				int cattailX;
				int cattailY;
				if (Main.player[k].ZoneTowerNebula)
				{
					bool flag18 = true;
					int num59 = 0;
					while (flag18)
					{
						num59 = Utils.SelectRandom<int>(Main.rand, 424, 424, 424, 423, 423, 423, 421, 421, 421, 420, 420);
						flag18 = false;
						if (num59 == 424 && CountNPCS(num59) >= 3)
						{
							flag18 = true;
						}
						if (num59 == 423 && CountNPCS(num59) >= 3)
						{
							flag18 = true;
						}
						if (num59 == 420 && CountNPCS(num59) >= 3)
						{
							flag18 = true;
						}
					}
					if (num59 != 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, num59, 1);
					}
				}
				else if (Main.player[k].ZoneTowerVortex)
				{
					bool flag19 = true;
					int num60 = 0;
					while (flag19)
					{
						num60 = Utils.SelectRandom<int>(Main.rand, 429, 429, 429, 429, 427, 427, 425, 425, 426);
						flag19 = false;
						if (num60 == 425 && CountNPCS(num60) >= 3)
						{
							flag19 = true;
						}
						if (num60 == 426 && CountNPCS(num60) >= 3)
						{
							flag19 = true;
						}
						if (num60 == 429 && CountNPCS(num60) >= 4)
						{
							flag19 = true;
						}
					}
					if (num60 != 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, num60, 1);
					}
				}
				else if (Main.player[k].ZoneTowerStardust)
				{
					int num61 = Utils.SelectRandom<int>(Main.rand, 411, 411, 411, 409, 409, 407, 402, 405);
					if (num61 != 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, num61, 1);
					}
				}
				else if (Main.player[k].ZoneTowerSolar)
				{
					bool flag20 = true;
					int num62 = 0;
					while (flag20)
					{
						num62 = Utils.SelectRandom<int>(Main.rand, 518, 419, 418, 412, 417, 416, 415);
						flag20 = false;
						if (num62 == 418 && Main.rand.Next(2) == 0)
						{
							num62 = Utils.SelectRandom<int>(Main.rand, 415, 416, 419, 417);
						}
						if (num62 == 518 && CountNPCS(num62) >= 2)
						{
							flag20 = true;
						}
						if (num62 == 412 && CountNPCS(num62) >= 1)
						{
							flag20 = true;
						}
					}
					if (num62 != 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, num62, 1);
					}
				}
				else if (flag23)
				{
					int maxValue2 = 8;
					int maxValue3 = 30;
					bool flag21 = (float)Math.Abs(num - Main.maxTilesX / 2) / (float)(Main.maxTilesX / 2) > 0.33f && (Main.wallLight[Main.tile[num89, num100].wall] || Main.tile[num89, num100].wall == 73);
					if (flag21 && AnyDanger())
					{
						flag21 = false;
					}
					if (Main.player[k].ZoneWaterCandle)
					{
						maxValue2 = 3;
						maxValue3 = 10;
					}
					if (flag35 && Main.invasionType == 4)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 388);
					}
					else if (flag21 && Main.hardMode && downedGolemBoss && ((!downedMartians && Main.rand.Next(maxValue2) == 0) || Main.rand.Next(maxValue3) == 0) && !AnyNPCs(399))
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 399);
					}
					else if (flag21 && Main.hardMode && downedGolemBoss && ((!downedMartians && Main.rand.Next(maxValue2) == 0) || Main.rand.Next(maxValue3) == 0) && !AnyNPCs(399) && (Main.player[k].inventory[Main.player[k].selectedItem].type == 148 || Main.player[k].ZoneWaterCandle))
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 399);
					}
					else if (Main.hardMode && !AnyNPCs(87) && !flag34 && Main.rand.Next(10) == 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 87, 1);
					}
					else if (Main.hardMode && !AnyNPCs(87) && !flag34 && Main.rand.Next(10) == 0 && (Main.player[k].inventory[Main.player[k].selectedItem].type == 148 || Main.player[k].ZoneWaterCandle))
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 87, 1);
					}
					else if (!unlockedSlimePurpleSpawn && Main.player[k].RollLuck(25) == 0 && !AnyNPCs(686))
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 686);
					}
					else
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 48);
					}
				}
				else if (flag35)
				{
					if (Main.invasionType == 1)
					{
						if (Main.hardMode && !AnyNPCs(471) && Main.rand.Next(30) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 471);
						}
						else if (Main.rand.Next(9) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 29);
						}
						else if (Main.rand.Next(5) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 26);
						}
						else if (Main.rand.Next(3) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 111);
						}
						else if (Main.rand.Next(3) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 27);
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 28);
						}
					}
					else if (Main.invasionType == 2)
					{
						if (Main.rand.Next(7) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 145);
						}
						else if (Main.rand.Next(3) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 143);
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 144);
						}
					}
					else if (Main.invasionType == 3)
					{
						if (Main.invasionSize < Main.invasionSizeStart / 2 && Main.rand.Next(20) == 0 && !AnyNPCs(491) && !Collision.SolidTiles(num - 20, num + 20, num24 - 40, num24 - 10))
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, (num24 - 10) * 16, 491);
						}
						else if (Main.rand.Next(30) == 0 && !AnyNPCs(216))
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 216);
						}
						else if (Main.rand.Next(11) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 215);
						}
						else if (Main.rand.Next(9) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 252);
						}
						else if (Main.rand.Next(7) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 214);
						}
						else if (Main.rand.Next(3) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 213);
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 212);
						}
					}
					else if (Main.invasionType == 4)
					{
						int num63 = 0;
						int num64 = Main.rand.Next(7);
						bool flag22 = (float)(Main.invasionSizeStart - Main.invasionSize) / (float)Main.invasionSizeStart >= 0.3f && !AnyNPCs(395);
						if (Main.rand.Next(45) == 0 && flag22)
						{
							num63 = 395;
						}
						else if (num64 >= 6)
						{
							if (Main.rand.Next(20) == 0 && flag22)
							{
								num63 = 395;
							}
							else
							{
								int num111 = Main.rand.Next(2);
								if (num111 == 0)
								{
									num63 = 390;
								}
								if (num111 == 1)
								{
									num63 = 386;
								}
							}
						}
						else if (num64 >= 4)
						{
							int num65 = Main.rand.Next(5);
							num63 = ((num65 < 2) ? 382 : ((num65 >= 4) ? 388 : 381));
						}
						else
						{
							int num66 = Main.rand.Next(4);
							if (num66 == 3)
							{
								if (!AnyNPCs(520))
								{
									num63 = 520;
								}
								else
								{
									num66 = Main.rand.Next(3);
								}
							}
							if (num66 == 0)
							{
								num63 = 385;
							}
							if (num66 == 1)
							{
								num63 = 389;
							}
							if (num66 == 2)
							{
								num63 = 383;
							}
						}
						if (num63 != 0)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, num63, 1);
						}
					}
				}
				else if (num58 == 244 && !Main.remixWorld)
				{
					if (flag36)
					{
						if (Main.player[k].RollLuck(goldCritterChance) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 592);
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 55);
						}
					}
					else if ((double)num24 > Main.worldSurface)
					{
						if (Main.rand.Next(3) == 0)
						{
							if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 447);
							}
							else
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 300);
							}
						}
						else if (Main.rand.Next(2) == 0)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 359);
						}
						else if (Main.player[k].RollLuck(goldCritterChance) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 448);
						}
						else if (Main.rand.Next(3) != 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 357);
						}
					}
					else if (Main.player[k].RollLuck(2) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 624);
						Main.npc[newNPC].timeLeft *= 10;
					}
					else if (Main.player[k].RollLuck(goldCritterChance) == 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 443);
					}
					else if (Main.player[k].RollLuck(goldCritterChance) == 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 539);
					}
					else if (Main.halloween && Main.rand.Next(3) != 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 303);
					}
					else if (Main.xMas && Main.rand.Next(3) != 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 337);
					}
					else if (BirthdayParty.PartyIsUp && Main.rand.Next(3) != 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 540);
					}
					else if (Main.rand.Next(3) == 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Utils.SelectRandom(Main.rand, new short[2] { 299, 538 }));
					}
					else
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 46);
					}
				}
				else if (!savedBartender && DD2Event.ReadyToFindBartender && !AnyNPCs(579) && Main.rand.Next(80) == 0 && !flag36)
				{
					NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 579);
				}
				else if (Main.tile[num, num24].wall == 62 || flag3)
				{
					bool flag24 = flag14 && num24 < Main.maxTilesY - 210;
					if (Main.dontStarveWorld)
					{
						flag24 = num24 < Main.maxTilesY - 210;
					}
					if (Main.tile[num, num24].wall == 62 && Main.rand.Next(8) == 0 && !flag36 && flag24 && !savedStylist && !AnyNPCs(354))
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 354);
					}
					else if (Main.hardMode && Main.rand.Next(10) != 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 163);
					}
					else
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 164);
					}
				}
				else if ((SpawnTileOrAboveHasAnyWallInSet(num, num24, WallID.Sets.AllowsUndergroundDesertEnemiesToSpawn) || flag5) && WorldGen.checkUnderground(num, num24))
				{
					float num68 = 1.15f;
					if ((double)num24 > (Main.rockLayer * 2.0 + (double)Main.maxTilesY) / 3.0)
					{
						num68 *= 0.5f;
					}
					else if ((double)num24 > Main.rockLayer)
					{
						num68 *= 0.85f;
					}
					if (Main.rand.Next(20) == 0 && !flag36 && !savedGolfer && !AnyNPCs(589))
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 589);
					}
					else if (Main.hardMode && Main.rand.Next((int)(45f * num68)) == 0 && !flag34 && (double)num24 > Main.worldSurface + 100.0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 510);
					}
					else if (Main.rand.Next((int)(45f * num68)) == 0 && !flag34 && (double)num24 > Main.worldSurface + 100.0 && CountNPCS(513) == 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 513);
					}
					else if (Main.hardMode && Main.rand.Next(5) != 0)
					{
						List<int> list = new List<int>();
						if (Main.player[k].ZoneCorrupt)
						{
							list.Add(525);
							list.Add(525);
						}
						if (Main.player[k].ZoneCrimson)
						{
							list.Add(526);
							list.Add(526);
						}
						if (Main.player[k].ZoneHallow)
						{
							list.Add(527);
							list.Add(527);
						}
						if (list.Count == 0)
						{
							list.Add(524);
							list.Add(524);
						}
						if (Main.player[k].ZoneCorrupt || Main.player[k].ZoneCrimson)
						{
							list.Add(533);
							list.Add(529);
						}
						else
						{
							list.Add(530);
							list.Add(528);
						}
						list.Add(532);
						int num69 = Utils.SelectRandom(Main.rand, list.ToArray());
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, num69);
						list.Clear();
					}
					else
					{
						int num70 = Utils.SelectRandom<int>(Main.rand, 69, 580, 580, 580, 581);
						if (Main.rand.Next(15) == 0)
						{
							num70 = 537;
						}
						else if (Main.rand.Next(10) == 0)
						{
							switch (num70)
							{
							case 580:
								num70 = 508;
								break;
							case 581:
								num70 = 509;
								break;
							}
						}
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, num70);
					}
				}
				else if (Main.hardMode && flag36 && Main.player[k].ZoneJungle && Main.rand.Next(3) != 0)
				{
					NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 157);
				}
				else if (Main.hardMode && flag36 && Main.player[k].ZoneCrimson && Main.rand.Next(3) != 0)
				{
					NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 242);
				}
				else if (Main.hardMode && flag36 && Main.player[k].ZoneCrimson && Main.rand.Next(3) != 0)
				{
					NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 241);
				}
				else if ((!flag4 || (!savedAngler && !AnyNPCs(376))) && flag36 && flag15)
				{
					bool flag25 = false;
					if (!savedAngler && !AnyNPCs(376) && ((double)num24 < Main.worldSurface - 10.0 || Main.remixWorld))
					{
						int num71 = -1;
						for (int num72 = num24 - 1; num72 > num24 - 50; num72--)
						{
							if (Main.tile[num, num72].liquid == 0 && !WorldGen.SolidTile(num, num72) && !WorldGen.SolidTile(num, num72 + 1) && !WorldGen.SolidTile(num, num72 + 2))
							{
								num71 = num72 + 2;
								break;
							}
						}
						if (num71 > num24)
						{
							num71 = num24;
						}
						if (num71 > 0 && !flag7)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num71 * 16, 376);
							flag25 = true;
						}
					}
					if (!flag25 && !flag7)
					{
						int num73 = -1;
						int num74 = -1;
						if (((double)num24 < Main.worldSurface || Main.remixWorld) && num24 > 50)
						{
							for (int num75 = num24 - 1; num75 > num24 - 50; num75--)
							{
								if (Main.tile[num, num75].liquid == 0 && !WorldGen.SolidTile(num, num75) && !WorldGen.SolidTile(num, num75 + 1) && !WorldGen.SolidTile(num, num75 + 2))
								{
									num73 = num75 + 2;
									if (!WorldGen.SolidTile(num, num73 + 1) && !WorldGen.SolidTile(num, num73 + 2) && !Main.wallHouse[Main.tile[num, num73 + 2].wall])
									{
										num74 = num73 + 2;
									}
									if (Main.wallHouse[Main.tile[num, num73].wall])
									{
										num73 = -1;
									}
									break;
								}
							}
							if (num73 > num24)
							{
								num73 = num24;
							}
							if (num74 > num24)
							{
								num74 = num24;
							}
						}
						if (num73 > 0 && !flag7 && Main.rand.Next(10) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num73 * 16, 602);
						}
						else if (Main.rand.Next(10) == 0)
						{
							int num76 = Main.rand.Next(3);
							if (num76 == 0 && num73 > 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num73 * 16, 625);
							}
							else if (num76 == 1 && num74 > 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num74 * 16, 615);
							}
							else if (num76 == 2)
							{
								int num77 = num24;
								if (num74 > 0)
								{
									num77 = num74;
								}
								if (Main.player[k].RollLuck(goldCritterChance) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num77 * 16, 627);
								}
								else
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num77 * 16, 626);
								}
							}
						}
						else if (Main.rand.Next(40) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 220);
						}
						else if (Main.rand.Next(18) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 221);
						}
						else if (Main.rand.Next(8) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 65);
						}
						else if (Main.rand.Next(3) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 67);
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 64);
						}
					}
				}
				else if (!flag36 && !savedAngler && !AnyNPCs(376) && (num < WorldGen.beachDistance || num > Main.maxTilesX - WorldGen.beachDistance) && Main.tileSand[num56] && ((double)num24 < Main.worldSurface || Main.remixWorld))
				{
					NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 376);
				}
				else if (!flag4 && flag36 && ((flag14 && Main.rand.Next(2) == 0) || num56 == 60))
				{
					bool flag26 = false;
					if (num56 == 60 && flag13 && num24 > 50 && Main.rand.Next(3) == 0 && Main.dayTime)
					{
						int num79 = -1;
						for (int num80 = num24 - 1; num80 > num24 - 50; num80--)
						{
							if (Main.tile[num, num80].liquid == 0 && !WorldGen.SolidTile(num, num80) && !WorldGen.SolidTile(num, num80 + 1) && !WorldGen.SolidTile(num, num80 + 2))
							{
								num79 = num80 + 2;
								break;
							}
						}
						if (num79 > num24)
						{
							num79 = num24;
						}
						if (num79 > 0 && !flag7)
						{
							flag26 = true;
							if (Main.rand.Next(4) == 0)
							{
								flag26 = true;
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num79 * 16, 617);
							}
							else if (!flag && Main.cloudAlpha == 0f)
							{
								flag26 = true;
								int num81 = Main.rand.Next(1, 4);
								for (int num82 = 0; num82 < num81; num82++)
								{
									if (Main.player[k].RollLuck(goldCritterChance) == 0)
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + Main.rand.Next(-16, 17), num79 * 16 - 16, 613);
									}
									else
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + Main.rand.Next(-16, 17), num79 * 16 - 16, 612);
									}
								}
							}
						}
					}
					if (!flag26)
					{
						if (Main.hardMode && Main.rand.Next(3) > 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 102);
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 58);
						}
					}
				}
				else if (!flag4 && flag36 && (double)num24 > Main.worldSurface && Main.rand.Next(3) == 0)
				{
					if (Main.hardMode && Main.rand.Next(3) > 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 103);
					}
					else
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 63);
					}
				}
				else if (flag36 && Main.rand.Next(4) == 0 && ((num > WorldGen.oceanDistance && num < Main.maxTilesX - WorldGen.oceanDistance) || (double)num24 > Main.worldSurface + 50.0))
				{
					if (Main.player[k].ZoneCorrupt)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 57);
					}
					else if (Main.player[k].ZoneCrimson)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 465);
					}
					else if ((double)num24 < Main.worldSurface && num24 > 50 && Main.rand.Next(3) != 0 && Main.dayTime)
					{
						int num83 = -1;
						for (int num84 = num24 - 1; num84 > num24 - 50; num84--)
						{
							if (Main.tile[num, num84].liquid == 0 && !WorldGen.SolidTile(num, num84) && !WorldGen.SolidTile(num, num84 + 1) && !WorldGen.SolidTile(num, num84 + 2))
							{
								num83 = num84 + 2;
								break;
							}
						}
						if (num83 > num24)
						{
							num83 = num24;
						}
						if (num83 > 0 && !flag7)
						{
							if (Main.rand.Next(5) == 0 && (num35 == 2 || num35 == 477))
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num83 * 16, 616);
							}
							else if (num35 == 53)
							{
								if (Main.rand.Next(2) == 0 && !flag && Main.cloudAlpha == 0f)
								{
									int num85 = Main.rand.Next(1, 4);
									for (int num86 = 0; num86 < num85; num86++)
									{
										if (Main.player[k].RollLuck(goldCritterChance) == 0)
										{
											NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + Main.rand.Next(-16, 17), num83 * 16 - 16, 613);
										}
										else
										{
											NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + Main.rand.Next(-16, 17), num83 * 16 - 16, 612);
										}
									}
								}
								else
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num83 * 16, 608);
								}
							}
							else if (Main.rand.Next(2) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num83 * 16, 362);
							}
							else
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num83 * 16, 364);
							}
						}
						else if (num35 == 53 && num > WorldGen.beachDistance && num < Main.maxTilesX - WorldGen.beachDistance)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num83 * 16, 607);
						}
						else if (Main.player[k].RollLuck(goldCritterChance) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 592);
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 55);
						}
					}
					else if (num35 == 53 && num > WorldGen.beachDistance && num < Main.maxTilesX - WorldGen.beachDistance)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 607);
					}
					else if (Main.player[k].RollLuck(goldCritterChance) == 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 592);
					}
					else
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 55);
					}
				}
				else if (downedGoblins && Main.player[k].RollLuck(20) == 0 && !flag36 && flag14 && num24 < Main.maxTilesY - 210 && !savedGoblin && !AnyNPCs(105))
				{
					NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 105);
				}
				else if (Main.hardMode && Main.player[k].RollLuck(20) == 0 && !flag36 && flag14 && num24 < Main.maxTilesY - 210 && !savedWizard && !AnyNPCs(106))
				{
					NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 106);
				}
				else if (downedBoss3 && Main.player[k].RollLuck(20) == 0 && !flag36 && flag14 && num24 < Main.maxTilesY - 210 && !unlockedSlimeOldSpawn && !AnyNPCs(685))
				{
					NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 685);
				}
				else if (flag4)
				{
					if (Main.player[k].ZoneGraveyard)
					{
						if (!flag36)
						{
							if (Main.rand.Next(2) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 606);
							}
							else
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 610);
							}
						}
					}
					else if (!flag7 && flag16)
					{
						if (flag36)
						{
							int num87 = -1;
							int num88 = -1;
							if (((double)num24 < Main.worldSurface || Main.remixWorld) && num24 > 50)
							{
								for (int num90 = num24 - 1; num90 > num24 - 50; num90--)
								{
									if (Main.tile[num, num90].liquid == 0 && !WorldGen.SolidTile(num, num90) && !WorldGen.SolidTile(num, num90 + 1) && !WorldGen.SolidTile(num, num90 + 2))
									{
										num87 = num90 + 2;
										if (!WorldGen.SolidTile(num, num87 + 1) && !WorldGen.SolidTile(num, num87 + 2))
										{
											num88 = num87 + 2;
										}
										break;
									}
								}
								if (num87 > num24)
								{
									num87 = num24;
								}
								if (num88 > num24)
								{
									num88 = num24;
								}
							}
							if (Main.rand.Next(2) == 0)
							{
								int num91 = Main.rand.Next(3);
								if (num91 == 0 && num87 > 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num87 * 16, 625);
								}
								else if (num91 == 1 && num88 > 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num88 * 16, 615);
								}
								else if (num91 == 2)
								{
									int num92 = num24;
									if (num88 > 0)
									{
										num92 = num88;
									}
									if (Main.player[k].RollLuck(goldCritterChance) == 0)
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num92 * 16, 627);
									}
									else
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num92 * 16, 626);
									}
								}
							}
							else if (num87 > 0 && !flag7)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num87 * 16, 602);
							}
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 602);
						}
					}
					else if ((num56 == 2 || num56 == 477 || num56 == 53) && !tooWindyForButterflies && Main.raining && Main.dayTime && Main.rand.Next(2) == 0 && ((double)num24 <= Main.worldSurface || Main.remixWorld) && FindCattailTop(num, num24, out cattailX, out cattailY))
					{
						if (Main.player[k].RollLuck(goldCritterChance) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), cattailX * 16 + 8, cattailY * 16, 601);
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), cattailX * 16 + 8, cattailY * 16, RollDragonflyType(num56));
						}
						if (Main.rand.Next(3) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), cattailX * 16 + 8 - 16, cattailY * 16, RollDragonflyType(num56));
						}
						if (Main.rand.Next(3) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), cattailX * 16 + 8 + 16, cattailY * 16, RollDragonflyType(num56));
						}
					}
					else if (flag36)
					{
						if (flag13 && num24 > 50 && Main.rand.Next(3) != 0 && Main.dayTime)
						{
							int num93 = -1;
							for (int num94 = num24 - 1; num94 > num24 - 50; num94--)
							{
								if (Main.tile[num, num94].liquid == 0 && !WorldGen.SolidTile(num, num94) && !WorldGen.SolidTile(num, num94 + 1) && !WorldGen.SolidTile(num, num94 + 2))
								{
									num93 = num94 + 2;
									break;
								}
							}
							if (num93 > num24)
							{
								num93 = num24;
							}
							if (num93 > 0 && !flag7)
							{
								switch (num35)
								{
								case 60:
									if (Main.rand.Next(3) != 0 && !flag && Main.cloudAlpha == 0f)
									{
										int num97 = Main.rand.Next(1, 4);
										for (int num98 = 0; num98 < num97; num98++)
										{
											if (Main.player[k].RollLuck(goldCritterChance) == 0)
											{
												NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + Main.rand.Next(-16, 17), num93 * 16 - 16, 613);
											}
											else
											{
												NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + Main.rand.Next(-16, 17), num93 * 16 - 16, 612);
											}
										}
									}
									else
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num93 * 16, 617);
									}
									break;
								case 53:
									if (Main.rand.Next(3) != 0 && !flag && Main.cloudAlpha == 0f)
									{
										int num95 = Main.rand.Next(1, 4);
										for (int num96 = 0; num96 < num95; num96++)
										{
											if (Main.player[k].RollLuck(goldCritterChance) == 0)
											{
												NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + Main.rand.Next(-16, 17), num93 * 16 - 16, 613);
											}
											else
											{
												NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + Main.rand.Next(-16, 17), num93 * 16 - 16, 612);
											}
										}
									}
									else
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num93 * 16, 608);
									}
									break;
								default:
									if (Main.rand.Next(5) == 0 && (num35 == 2 || num35 == 477))
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num93 * 16, 616);
									}
									else if (Main.rand.Next(2) == 0)
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num93 * 16, 362);
									}
									else
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num93 * 16, 364);
									}
									break;
								}
							}
							else if (num35 == 53 && num > WorldGen.beachDistance && num < Main.maxTilesX - WorldGen.beachDistance)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 607);
							}
							else if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 592);
							}
							else
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 55);
							}
						}
						else if (num35 == 53 && num > WorldGen.beachDistance && num < Main.maxTilesX - WorldGen.beachDistance)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 607);
						}
						else if (Main.player[k].RollLuck(goldCritterChance) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 592);
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 55);
						}
					}
					else if (num56 == 147 || num56 == 161)
					{
						if (Main.rand.Next(2) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 148);
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 149);
						}
					}
					else if (num56 == 60)
					{
						if (Main.dayTime && Main.rand.Next(3) != 0)
						{
							switch (Main.rand.Next(5))
							{
							case 0:
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 671);
								break;
							case 1:
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 672);
								break;
							case 2:
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 673);
								break;
							case 3:
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 674);
								break;
							default:
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 675);
								break;
							}
						}
						else
						{
							SpawnNPC_SpawnFrog(num, num24, k);
						}
					}
					else if (num56 == 53)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Main.rand.Next(366, 368));
					}
					else
					{
						if (num56 != 2 && num56 != 477 && num56 != 109 && num56 != 492 && !((double)num24 > Main.worldSurface))
						{
							break;
						}
						bool flag27 = flag13;
						if (Main.raining && num24 <= Main.UnderworldLayer)
						{
							if (flag14 && Main.rand.Next(5) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, SpawnNPC_GetGemSquirrelToSpawn());
							}
							else if (flag14 && Main.rand.Next(5) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, SpawnNPC_GetGemBunnyToSpawn());
							}
							else if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 448);
							}
							else if (Main.rand.Next(3) != 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 357);
							}
							else if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 593);
							}
							else
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 230);
							}
						}
						else if (!Main.dayTime && Main.numClouds <= 55 && Main.cloudBGActive == 0f && Star.starfallBoost > 3f && flag27 && Main.player[k].RollLuck(2) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 484);
						}
						else if (!tooWindyForButterflies && !Main.dayTime && Main.rand.Next(fireFlyFriendly) == 0 && flag27)
						{
							int num99 = 355;
							if (num56 == 109)
							{
								num99 = 358;
							}
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, num99);
							if (Main.rand.Next(fireFlyMultiple) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 - 16, num24 * 16, num99);
							}
							if (Main.rand.Next(fireFlyMultiple) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + 16, num24 * 16, num99);
							}
							if (Main.rand.Next(fireFlyMultiple) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16 - 16, num99);
							}
							if (Main.rand.Next(fireFlyMultiple) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16 + 16, num99);
							}
						}
						else if (Main.cloudAlpha == 0f && !Main.dayTime && Main.rand.Next(5) == 0 && flag27)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 611);
						}
						else if (Main.dayTime && Main.time < 18000.0 && Main.rand.Next(3) != 0 && flag27)
						{
							int num101 = Main.rand.Next(4);
							if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 442);
							}
							else
							{
								switch (num101)
								{
								case 0:
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 297);
									break;
								case 1:
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 298);
									break;
								default:
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 74);
									break;
								}
							}
						}
						else if (!tooWindyForButterflies && !Main.raining && Main.dayTime && Main.rand.Next(stinkBugChance) == 0 && flag27)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 669);
							if (Main.rand.Next(4) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 - 16, num24 * 16, 669);
							}
							if (Main.rand.Next(4) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + 16, num24 * 16, 669);
							}
						}
						else if (!tooWindyForButterflies && !Main.raining && Main.dayTime && Main.rand.Next(butterflyChance) == 0 && flag27)
						{
							if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 444);
							}
							else
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 356);
							}
							if (Main.rand.Next(4) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 - 16, num24 * 16, 356);
							}
							if (Main.rand.Next(4) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + 16, num24 * 16, 356);
							}
						}
						else if (tooWindyForButterflies && !Main.raining && Main.dayTime && Main.rand.Next(butterflyChance / 2) == 0 && flag27)
						{
							if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 605);
							}
							else
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 604);
							}
							if (Main.rand.Next(3) != 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 604);
							}
							if (Main.rand.Next(2) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 604);
							}
							if (Main.rand.Next(3) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 604);
							}
							if (Main.rand.Next(4) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 604);
							}
						}
						else if (Main.rand.Next(2) == 0 && flag27)
						{
							int num102 = Main.rand.Next(4);
							if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 442);
							}
							else
							{
								switch (num102)
								{
								case 0:
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 297);
									break;
								case 1:
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 298);
									break;
								default:
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 74);
									break;
								}
							}
						}
						else if (num24 > Main.UnderworldLayer)
						{
							if (Main.remixWorld && (double)(Main.player[k].Center.X / 16f) > (double)Main.maxTilesX * 0.39 + 50.0 && (double)(Main.player[k].Center.X / 16f) < (double)Main.maxTilesX * 0.61 && Main.rand.Next(2) == 0)
							{
								if (Main.rand.Next(2) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, SpawnNPC_GetGemSquirrelToSpawn());
								}
								else
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, SpawnNPC_GetGemBunnyToSpawn());
								}
							}
							else
							{
								newNPC = SpawnNPC_SpawnLavaBaitCritters(num, num24);
							}
						}
						else if (Main.player[k].RollLuck(goldCritterChance) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 443);
						}
						else if (Main.player[k].RollLuck(goldCritterChance) == 0 && flag27)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 539);
						}
						else if (Main.halloween && Main.rand.Next(3) != 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 303);
						}
						else if (Main.xMas && Main.rand.Next(3) != 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 337);
						}
						else if (BirthdayParty.PartyIsUp && Main.rand.Next(3) != 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 540);
						}
						else if (Main.rand.Next(3) == 0)
						{
							if (Main.remixWorld)
							{
								if ((double)num24 < Main.rockLayer && (double)num24 > Main.worldSurface)
								{
									if (Main.rand.Next(5) == 0)
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, SpawnNPC_GetGemSquirrelToSpawn());
									}
								}
								else if (flag27)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Utils.SelectRandom(Main.rand, new short[2] { 299, 538 }));
								}
							}
							else if ((double)num24 >= Main.rockLayer && num24 <= Main.UnderworldLayer)
							{
								if (Main.rand.Next(5) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, SpawnNPC_GetGemSquirrelToSpawn());
								}
							}
							else if (flag27)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Utils.SelectRandom(Main.rand, new short[2] { 299, 538 }));
							}
						}
						else if (Main.remixWorld)
						{
							if ((double)num24 < Main.rockLayer && (double)num24 > Main.worldSurface)
							{
								if ((double)num24 >= Main.rockLayer && num24 <= Main.UnderworldLayer)
								{
									if (Main.rand.Next(5) == 0)
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, SpawnNPC_GetGemBunnyToSpawn());
									}
								}
								else
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 46);
								}
							}
						}
						else if ((double)num24 >= Main.rockLayer && num24 <= Main.UnderworldLayer)
						{
							if (Main.rand.Next(5) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, SpawnNPC_GetGemBunnyToSpawn());
							}
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 46);
						}
					}
				}
				else if (Main.player[k].ZoneDungeon)
				{
					int num103 = 0;
					ushort wall = Main.tile[num, num24].wall;
					ushort wall2 = Main.tile[num, num24 - 1].wall;
					if (wall == 94 || wall == 96 || wall == 98 || wall2 == 94 || wall2 == 96 || wall2 == 98)
					{
						num103 = 1;
					}
					if (wall == 95 || wall == 97 || wall == 99 || wall2 == 95 || wall2 == 97 || wall2 == 99)
					{
						num103 = 2;
					}
					if (Main.player[k].RollLuck(7) == 0)
					{
						num103 = Main.rand.Next(3);
					}
					bool flag28 = !downedBoss3;
					if (Main.drunkWorld && Main.player[k].position.Y / 16f < (float)(Main.dungeonY + 40))
					{
						flag28 = false;
					}
					if (flag28)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 68);
					}
					else if (downedBoss3 && !savedMech && Main.rand.Next(5) == 0 && !flag36 && !AnyNPCs(123) && (double)num24 > (Main.worldSurface * 4.0 + Main.rockLayer) / 5.0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 123);
					}
					else if (flag6 && Main.rand.Next(30) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 287);
					}
					else if (flag6 && num103 == 0 && Main.rand.Next(15) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 293);
					}
					else if (flag6 && num103 == 1 && Main.rand.Next(15) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 291);
					}
					else if (flag6 && num103 == 2 && Main.rand.Next(15) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 292);
					}
					else if (flag6 && !AnyNPCs(290) && num103 == 0 && Main.rand.Next(35) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 290);
					}
					else if (flag6 && (num103 == 1 || num103 == 2) && Main.rand.Next(30) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 289);
					}
					else if (flag6 && Main.rand.Next(20) == 0)
					{
						int num104 = 281;
						if (num103 == 0)
						{
							num104 += 2;
						}
						if (num103 == 2)
						{
							num104 += 4;
						}
						num104 += Main.rand.Next(2);
						if (!AnyNPCs(num104))
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, num104);
						}
					}
					else if (flag6 && Main.rand.Next(3) != 0)
					{
						int num105 = 269;
						if (num103 == 0)
						{
							num105 += 4;
						}
						if (num103 == 2)
						{
							num105 += 8;
						}
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, num105 + Main.rand.Next(4));
					}
					else if (Main.player[k].RollLuck(35) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 71);
					}
					else if (num103 == 1 && Main.rand.Next(3) == 0 && !NearSpikeBall(num, num24))
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 70);
					}
					else if (num103 == 2 && Main.rand.Next(5) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 72);
					}
					else if (num103 == 0 && Main.rand.Next(7) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 34);
					}
					else if (Main.rand.Next(7) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 32);
					}
					else
					{
						switch (Main.rand.Next(5))
						{
						case 0:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 294);
							break;
						case 1:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 295);
							break;
						case 2:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 296);
							break;
						default:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 31);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-14);
							}
							else if (Main.rand.Next(5) == 0)
							{
								Main.npc[newNPC].SetDefaults(-13);
							}
							break;
						}
					}
				}
				else if (Main.player[k].ZoneMeteor)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 23);
				}
				else if (DD2Event.Ongoing && Main.player[k].ZoneOldOneArmy)
				{
					DD2Event.SpawnNPC(ref newNPC);
				}
				else if ((Main.remixWorld || (double)num24 <= Main.worldSurface) && !Main.dayTime && Main.snowMoon)
				{
					int num106 = waveNumber;
					if (Main.rand.Next(30) == 0 && CountNPCS(341) < 4)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 341);
					}
					else if (num106 >= 20)
					{
						int num107 = Main.rand.Next(3);
						if (!(num57 >= (float)num46 * num67))
						{
							newNPC = num107 switch
							{
								0 => NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 345), 
								1 => NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 346), 
								_ => NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 344), 
							};
						}
					}
					else if (num106 >= 19)
					{
						newNPC = ((Main.rand.Next(10) == 0 && CountNPCS(345) < 4) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 345) : ((Main.rand.Next(10) == 0 && CountNPCS(346) < 5) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 346) : ((Main.rand.Next(10) != 0 || CountNPCS(344) >= 7) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 343) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 344))));
					}
					else if (num106 >= 18)
					{
						newNPC = ((Main.rand.Next(10) == 0 && CountNPCS(345) < 3) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 345) : ((Main.rand.Next(10) == 0 && CountNPCS(346) < 4) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 346) : ((Main.rand.Next(10) == 0 && CountNPCS(344) < 6) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 344) : ((Main.rand.Next(3) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 348) : ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 343) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 351))))));
					}
					else if (num106 >= 17)
					{
						newNPC = ((Main.rand.Next(10) == 0 && CountNPCS(345) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 345) : ((Main.rand.Next(10) == 0 && CountNPCS(346) < 3) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 346) : ((Main.rand.Next(10) == 0 && CountNPCS(344) < 5) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 344) : ((Main.rand.Next(4) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 347) : ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 343) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 351))))));
					}
					else if (num106 >= 16)
					{
						newNPC = ((Main.rand.Next(10) == 0 && CountNPCS(345) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 345) : ((Main.rand.Next(10) == 0 && CountNPCS(346) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 346) : ((Main.rand.Next(10) == 0 && CountNPCS(344) < 4) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 344) : ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 343) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 352)))));
					}
					else if (num106 >= 15)
					{
						newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(345)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 345) : ((Main.rand.Next(10) == 0 && CountNPCS(346) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 346) : ((Main.rand.Next(10) == 0 && CountNPCS(344) < 3) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 344) : ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 343) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 347)))));
					}
					else
					{
						switch (num106)
						{
						case 14:
							if (Main.rand.Next(10) == 0 && !AnyNPCs(345))
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 345);
							}
							else if (Main.rand.Next(10) == 0 && !AnyNPCs(346))
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 346);
							}
							else if (Main.rand.Next(10) == 0 && !AnyNPCs(344))
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 344);
							}
							else if (Main.rand.Next(3) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 343);
							}
							break;
						case 13:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(345)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 345) : ((Main.rand.Next(10) == 0 && !AnyNPCs(346)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 346) : ((Main.rand.Next(3) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 352) : ((Main.rand.Next(6) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 343) : ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 347) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 342))))));
							break;
						case 12:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(345)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 345) : ((Main.rand.Next(10) == 0 && !AnyNPCs(344)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 344) : ((Main.rand.Next(8) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 343) : ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Main.rand.Next(338, 341)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 342)))));
							break;
						case 11:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(345)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 345) : ((Main.rand.Next(6) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 352) : ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Main.rand.Next(338, 341)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 342))));
							break;
						case 10:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(346)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 346) : ((Main.rand.Next(10) == 0 && CountNPCS(344) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 344) : ((Main.rand.Next(6) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 351) : ((Main.rand.Next(3) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 348) : ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Main.rand.Next(338, 341)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 347))))));
							break;
						case 9:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(346)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 346) : ((Main.rand.Next(10) == 0 && !AnyNPCs(344)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 344) : ((Main.rand.Next(2) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 348) : ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 342) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 347)))));
							break;
						case 8:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(346)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 346) : ((Main.rand.Next(8) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 351) : ((Main.rand.Next(3) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 348) : ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 350) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 347)))));
							break;
						case 7:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(346)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 346) : ((Main.rand.Next(3) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 342) : ((Main.rand.Next(4) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Main.rand.Next(338, 341)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 350))));
							break;
						case 6:
							newNPC = ((Main.rand.Next(10) == 0 && CountNPCS(344) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 344) : ((Main.rand.Next(4) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 347) : ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 350) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 348))));
							break;
						case 5:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(344)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 344) : ((Main.rand.Next(4) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 350) : ((Main.rand.Next(8) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Main.rand.Next(338, 341)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 348))));
							break;
						case 4:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(344)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 344) : ((Main.rand.Next(4) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 350) : ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Main.rand.Next(338, 341)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 342))));
							break;
						case 3:
							newNPC = ((Main.rand.Next(8) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 348) : ((Main.rand.Next(4) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 350) : ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Main.rand.Next(338, 341)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 342))));
							break;
						case 2:
							newNPC = ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Main.rand.Next(338, 341)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 350));
							break;
						default:
							newNPC = ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Main.rand.Next(338, 341)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 342));
							break;
						}
					}
				}
				else if ((Main.remixWorld || (double)num24 <= Main.worldSurface) && !Main.dayTime && Main.pumpkinMoon)
				{
					int num108 = waveNumber;
					if (waveNumber >= 20)
					{
						if (!(num57 >= (float)num46 * num67))
						{
							if (Main.rand.Next(2) == 0 && CountNPCS(327) < 2)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 327);
							}
							else if (Main.rand.Next(3) != 0 && CountNPCS(325) < 2)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 325);
							}
							else if (CountNPCS(315) < 3)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 315);
							}
						}
					}
					else
					{
						switch (num108)
						{
						case 19:
							if (Main.rand.Next(5) == 0 && CountNPCS(327) < 2)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 327);
							}
							else if (Main.rand.Next(5) == 0 && CountNPCS(325) < 2)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 325);
							}
							else if (!(num57 >= (float)num46 * num67) && CountNPCS(315) < 5)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 315);
							}
							break;
						case 18:
							if (Main.rand.Next(7) == 0 && CountNPCS(327) < 2)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 327);
							}
							newNPC = ((Main.rand.Next(7) == 0 && CountNPCS(325) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 325) : ((Main.rand.Next(7) != 0 || CountNPCS(315) >= 3) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 330) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 315)));
							break;
						case 17:
							if (Main.rand.Next(7) == 0 && CountNPCS(327) < 2)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 327);
							}
							newNPC = ((Main.rand.Next(7) == 0 && CountNPCS(325) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 325) : ((Main.rand.Next(7) == 0 && CountNPCS(315) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 315) : ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 329) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 330))));
							break;
						case 16:
							newNPC = ((Main.rand.Next(10) == 0 && CountNPCS(327) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 327) : ((Main.rand.Next(10) == 0 && CountNPCS(315) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 315) : ((Main.rand.Next(6) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 330) : ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 326) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 329)))));
							break;
						case 15:
							if (Main.rand.Next(10) == 0 && !AnyNPCs(327))
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 327);
							}
							newNPC = ((Main.rand.Next(7) == 0 && CountNPCS(325) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 325) : ((Main.rand.Next(5) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 330) : ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Main.rand.Next(305, 315)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 326))));
							break;
						case 14:
							if (Main.rand.Next(10) == 0 && !AnyNPCs(327))
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 327);
							}
							newNPC = ((Main.rand.Next(7) == 0 && CountNPCS(325) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 325) : ((Main.rand.Next(10) == 0 && !AnyNPCs(315)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 315) : ((Main.rand.Next(10) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 330) : ((Main.rand.Next(7) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 329) : ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Main.rand.Next(305, 315)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 326))))));
							break;
						case 13:
							newNPC = ((Main.rand.Next(7) == 0 && CountNPCS(325) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 325) : ((Main.rand.Next(10) == 0 && CountNPCS(315) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 315) : ((Main.rand.Next(6) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 330) : ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 326) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 329)))));
							break;
						case 12:
							newNPC = ((Main.rand.Next(5) != 0 || AnyNPCs(327)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 330) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 327));
							break;
						case 11:
							newNPC = ((Main.rand.Next(7) == 0 && CountNPCS(325) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 325) : ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 326) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 330)));
							break;
						case 10:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(327)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 327) : ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Main.rand.Next(305, 315)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 329)));
							break;
						case 9:
							newNPC = ((Main.rand.Next(10) == 0 && CountNPCS(325) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 325) : ((Main.rand.Next(8) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 330) : ((Main.rand.Next(5) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 329) : ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Main.rand.Next(305, 315)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 326)))));
							break;
						case 8:
							newNPC = ((Main.rand.Next(8) == 0 && CountNPCS(315) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 315) : ((Main.rand.Next(4) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 329) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 330)));
							break;
						case 7:
							newNPC = ((Main.rand.Next(7) == 0 && CountNPCS(325) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 325) : ((Main.rand.Next(4) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 329) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 330)));
							break;
						case 6:
							newNPC = ((Main.rand.Next(7) == 0 && CountNPCS(325) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 325) : ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Main.rand.Next(305, 315)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 326)));
							break;
						case 5:
							newNPC = ((Main.rand.Next(10) != 0 || AnyNPCs(315)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 329) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 315));
							break;
						case 4:
							newNPC = ((Main.rand.Next(8) == 0 && !AnyNPCs(325)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 330) : ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Main.rand.Next(305, 315)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 326)));
							break;
						case 3:
							newNPC = ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 326) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 329));
							break;
						case 2:
							newNPC = ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Main.rand.Next(305, 315)) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 326));
							break;
						default:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Main.rand.Next(305, 315));
							break;
						}
					}
				}
				else if (((double)num24 <= Main.worldSurface || (Main.remixWorld && (double)num24 > Main.rockLayer)) && Main.dayTime && Main.eclipse)
				{
					bool flag29 = false;
					if (downedMechBoss1 && downedMechBoss2 && downedMechBoss3)
					{
						flag29 = true;
					}
					newNPC = ((downedPlantBoss && Main.rand.Next(80) == 0 && !AnyNPCs(477)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 477) : ((Main.rand.Next(50) == 0 && !AnyNPCs(251)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 251) : ((downedPlantBoss && Main.rand.Next(5) == 0 && !AnyNPCs(466)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 466) : ((downedPlantBoss && Main.rand.Next(20) == 0 && !AnyNPCs(463)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 463) : ((downedPlantBoss && Main.rand.Next(20) == 0 && CountNPCS(467) < 2) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 467) : ((Main.rand.Next(15) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 159) : ((flag29 && Main.rand.Next(13) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 253) : ((Main.rand.Next(8) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 469) : ((downedPlantBoss && Main.rand.Next(7) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 468) : ((downedPlantBoss && Main.rand.Next(5) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 460) : ((Main.rand.Next(4) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 162) : ((Main.rand.Next(3) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 461) : ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 166) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 462))))))))))))));
				}
				else if (SpawnNPC_CheckToSpawnUndergroundFairy(num, num24, k))
				{
					int num109 = Main.rand.Next(583, 586);
					if (Main.tenthAnniversaryWorld && !Main.getGoodWorld && Main.rand.Next(4) != 0)
					{
						num109 = 583;
					}
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, num109);
					Main.npc[newNPC].ai[2] = 2f;
					Main.npc[newNPC].TargetClosest();
					Main.npc[newNPC].ai[3] = 0f;
				}
				else if (!Main.remixWorld && !flag36 && (!Main.dayTime || Main.tile[num, num24].wall > 0) && Main.tile[num89, num100].wall == 244 && !Main.eclipse && !Main.bloodMoon && Main.player[k].RollLuck(30) == 0 && CountNPCS(624) <= Main.rand.Next(3))
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 624);
				}
				else if (!Main.player[k].ZoneCorrupt && !Main.player[k].ZoneCrimson && !flag36 && !Main.eclipse && !Main.bloodMoon && Main.player[k].RollLuck(range) == 0 && ((!Main.remixWorld && (double)num24 >= Main.worldSurface * 0.800000011920929 && (double)num24 < Main.worldSurface * 1.100000023841858) || (Main.remixWorld && (double)num24 > Main.rockLayer && num24 < Main.maxTilesY - 350)) && CountNPCS(624) <= Main.rand.Next(3) && (!Main.dayTime || Main.tile[num, num24].wall > 0) && (Main.tile[num, num24].wall == 63 || Main.tile[num, num24].wall == 2 || Main.tile[num, num24].wall == 196 || Main.tile[num, num24].wall == 197 || Main.tile[num, num24].wall == 198 || Main.tile[num, num24].wall == 199))
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 624);
				}
				else if (Main.hardMode && num35 == 70 && flag36)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 256);
				}
				else if (num35 == 70 && (double)num24 <= Main.worldSurface && Main.rand.Next(3) != 0)
				{
					if ((!Main.hardMode && Main.rand.Next(6) == 0) || Main.rand.Next(12) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 360);
					}
					else if (Main.rand.Next(3) != 0)
					{
						newNPC = ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 255) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 254));
					}
					else if (Main.rand.Next(4) != 0)
					{
						newNPC = ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 258) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 257));
					}
					else if (Main.hardMode && Main.rand.Next(3) != 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 260);
						Main.npc[newNPC].ai[0] = num;
						Main.npc[newNPC].ai[1] = num24;
						Main.npc[newNPC].netUpdate = true;
					}
					else
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 259);
						Main.npc[newNPC].ai[0] = num;
						Main.npc[newNPC].ai[1] = num24;
						Main.npc[newNPC].netUpdate = true;
					}
				}
				else if (num35 == 70 && Main.hardMode && (double)num24 >= Main.worldSurface && Main.rand.Next(3) != 0 && (!Main.remixWorld || Main.getGoodWorld || num24 < Main.maxTilesY - 360))
				{
					if (Main.hardMode && Main.player[k].RollLuck(5) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 374);
					}
					else if ((!Main.hardMode && Main.rand.Next(4) == 0) || Main.rand.Next(8) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 360);
					}
					else if (Main.rand.Next(4) != 0)
					{
						newNPC = ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 258) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 257));
					}
					else if (Main.hardMode && Main.rand.Next(3) != 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 260);
						Main.npc[newNPC].ai[0] = num;
						Main.npc[newNPC].ai[1] = num24;
						Main.npc[newNPC].netUpdate = true;
					}
					else
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 259);
						Main.npc[newNPC].ai[0] = num;
						Main.npc[newNPC].ai[1] = num24;
						Main.npc[newNPC].netUpdate = true;
					}
				}
				else if (Main.player[k].ZoneCorrupt && Main.rand.Next(maxValue) == 0 && !flag34)
				{
					newNPC = ((!Main.hardMode || Main.rand.Next(4) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 7, 1) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 98, 1));
				}
				else if (Main.remixWorld && !Main.hardMode && (double)num24 > Main.worldSurface && Main.player[k].RollLuck(100) == 0)
				{
					newNPC = ((!Main.player[k].ZoneSnow) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 85) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 629));
				}
				else if (Main.hardMode && (double)num24 > Main.worldSurface && Main.player[k].RollLuck(Main.tenthAnniversaryWorld ? 25 : 75) == 0)
				{
					newNPC = ((Main.rand.Next(2) == 0 && Main.player[k].ZoneCorrupt && !AnyNPCs(473)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 473) : ((Main.rand.Next(2) == 0 && Main.player[k].ZoneCrimson && !AnyNPCs(474)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 474) : ((Main.rand.Next(2) == 0 && Main.player[k].ZoneHallow && !AnyNPCs(475)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 475) : ((Main.tenthAnniversaryWorld && Main.rand.Next(2) == 0 && Main.player[k].ZoneJungle && !AnyNPCs(476)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 476) : ((!Main.player[k].ZoneSnow) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 85) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 629))))));
				}
				else if (Main.hardMode && Main.tile[num, num24].wall == 2 && Main.rand.Next(20) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 85);
				}
				else if (Main.hardMode && (double)num24 <= Main.worldSurface && !Main.dayTime && (Main.rand.Next(20) == 0 || (Main.rand.Next(5) == 0 && Main.moonPhase == 4)))
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 82);
				}
				else if (Main.hardMode && Main.halloween && (double)num24 <= Main.worldSurface && !Main.dayTime && Main.rand.Next(10) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 304);
				}
				else if (num56 == 60 && Main.player[k].RollLuck(500) == 0 && !Main.dayTime)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 52);
				}
				else if (num56 == 60 && (double)num24 > Main.worldSurface && Main.rand.Next(60) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 219);
				}
				else if ((double)num24 > Main.worldSurface && num24 < Main.maxTilesY - 210 && !Main.player[k].ZoneSnow && !Main.player[k].ZoneCrimson && !Main.player[k].ZoneCorrupt && !Main.player[k].ZoneJungle && !Main.player[k].ZoneHallow && Main.rand.Next(8) == 0)
				{
					if (Main.player[k].RollLuck(goldCritterChance) == 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 448);
					}
					else
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 357);
					}
				}
				else if ((double)num24 > Main.worldSurface && num24 < Main.maxTilesY - 210 && !Main.player[k].ZoneSnow && !Main.player[k].ZoneCrimson && !Main.player[k].ZoneCorrupt && !Main.player[k].ZoneJungle && !Main.player[k].ZoneHallow && Main.rand.Next(13) == 0)
				{
					if (Main.player[k].RollLuck(goldCritterChance) == 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 447);
					}
					else
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 300);
					}
				}
				else if ((double)num24 > Main.worldSurface && (double)num24 < (Main.rockLayer + (double)Main.maxTilesY) / 2.0 && !Main.player[k].ZoneSnow && !Main.player[k].ZoneCrimson && !Main.player[k].ZoneCorrupt && !Main.player[k].ZoneHallow && Main.rand.Next(13) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 359);
				}
				else if (flag13 && Main.player[k].ZoneJungle && !Main.player[k].ZoneCrimson && !Main.player[k].ZoneCorrupt && Main.rand.Next(7) == 0)
				{
					if (Main.dayTime && Main.time < 43200.00064373016 && Main.rand.Next(3) != 0)
					{
						switch (Main.rand.Next(5))
						{
						case 0:
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 671);
							break;
						case 1:
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 672);
							break;
						case 2:
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 673);
							break;
						case 3:
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 674);
							break;
						default:
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 675);
							break;
						}
					}
					else
					{
						SpawnNPC_SpawnFrog(num, num24, k);
					}
				}
				else if (num56 == 225 && Main.rand.Next(2) == 0)
				{
					if (Main.hardMode && Main.rand.Next(4) != 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 176);
						if (Main.rand.Next(10) == 0)
						{
							Main.npc[newNPC].SetDefaults(-18);
						}
						if (Main.rand.Next(10) == 0)
						{
							Main.npc[newNPC].SetDefaults(-19);
						}
						if (Main.rand.Next(10) == 0)
						{
							Main.npc[newNPC].SetDefaults(-20);
						}
						if (Main.rand.Next(10) == 0)
						{
							Main.npc[newNPC].SetDefaults(-21);
						}
					}
					else
					{
						switch (Main.rand.Next(8))
						{
						case 0:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 231);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-56);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-57);
							}
							break;
						case 1:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 232);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-58);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-59);
							}
							break;
						case 2:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 233);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-60);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-61);
							}
							break;
						case 3:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 234);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-62);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-63);
							}
							break;
						case 4:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 235);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-64);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-65);
							}
							break;
						default:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 42);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-16);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-17);
							}
							break;
						}
					}
				}
				else if (num56 == 60 && Main.hardMode && Main.rand.Next(3) != 0)
				{
					if (flag13 && !Main.dayTime && Main.rand.Next(3) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 152);
					}
					else if (flag13 && Main.dayTime && Main.rand.Next(4) != 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 177);
					}
					else if ((double)num24 > Main.worldSurface && Main.rand.Next(100) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 205);
					}
					else if ((double)num24 > Main.worldSurface && Main.rand.Next(5) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 236);
					}
					else if ((double)num24 > Main.worldSurface && Main.rand.Next(4) != 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 176);
						if (Main.rand.Next(10) == 0)
						{
							Main.npc[newNPC].SetDefaults(-18);
						}
						if (Main.rand.Next(10) == 0)
						{
							Main.npc[newNPC].SetDefaults(-19);
						}
						if (Main.rand.Next(10) == 0)
						{
							Main.npc[newNPC].SetDefaults(-20);
						}
						if (Main.rand.Next(10) == 0)
						{
							Main.npc[newNPC].SetDefaults(-21);
						}
					}
					else if (Main.rand.Next(3) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 175);
						Main.npc[newNPC].ai[0] = num;
						Main.npc[newNPC].ai[1] = num24;
						Main.npc[newNPC].netUpdate = true;
					}
					else
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 153);
					}
				}
				else if (((num56 == 226 || num56 == 232) && flag33) || (Main.remixWorld && flag33))
				{
					newNPC = ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 198) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 226));
				}
				else if (num58 == 86 && Main.rand.Next(8) != 0)
				{
					switch (Main.rand.Next(8))
					{
					case 0:
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 231);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-56);
						}
						else if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-57);
						}
						break;
					case 1:
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 232);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-58);
						}
						else if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-59);
						}
						break;
					case 2:
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 233);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-60);
						}
						else if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-61);
						}
						break;
					case 3:
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 234);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-62);
						}
						else if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-63);
						}
						break;
					case 4:
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 235);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-64);
						}
						else if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-65);
						}
						break;
					default:
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 42);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-16);
						}
						else if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-17);
						}
						break;
					}
				}
				else if (num56 == 60 && ((!Main.remixWorld && (double)num24 > (Main.worldSurface + Main.rockLayer) / 2.0) || (Main.remixWorld && ((double)num24 < Main.rockLayer || Main.rand.Next(2) == 0))))
				{
					if (Main.rand.Next(4) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 204);
					}
					else if (Main.rand.Next(4) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 43);
						Main.npc[newNPC].ai[0] = num;
						Main.npc[newNPC].ai[1] = num24;
						Main.npc[newNPC].netUpdate = true;
					}
					else
					{
						switch (Main.rand.Next(8))
						{
						case 0:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 231);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-56);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-57);
							}
							break;
						case 1:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 232);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-58);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-59);
							}
							break;
						case 2:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 233);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-60);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-61);
							}
							break;
						case 3:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 234);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-62);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-63);
							}
							break;
						case 4:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 235);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-64);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-65);
							}
							break;
						default:
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 42);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-16);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-17);
							}
							break;
						}
					}
				}
				else if (num56 == 60 && Main.rand.Next(4) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 51);
				}
				else if (num56 == 60 && Main.rand.Next(8) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 56);
					Main.npc[newNPC].ai[0] = num;
					Main.npc[newNPC].ai[1] = num24;
					Main.npc[newNPC].netUpdate = true;
				}
				else if (Sandstorm.Happening && Main.player[k].ZoneSandstorm && TileID.Sets.Conversion.Sand[num56] && Spawning_SandstoneCheck(num, num24))
				{
					if (!downedBoss1 && !Main.hardMode)
					{
						newNPC = ((Main.rand.Next(2) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 546) : ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 69) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 61)));
					}
					else if (Main.hardMode && Main.rand.Next(20) == 0 && !AnyNPCs(541))
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 541);
					}
					else if (Main.hardMode && !flag34 && Main.rand.Next(3) == 0 && CountNPCS(510) < 4)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, (num24 + 10) * 16, 510);
					}
					else if (!Main.hardMode || flag34 || Main.rand.Next(2) != 0)
					{
						newNPC = ((Main.hardMode && num56 == 53 && Main.rand.Next(3) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 78) : ((Main.hardMode && num56 == 112 && Main.rand.Next(3) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 79) : ((Main.hardMode && num56 == 234 && Main.rand.Next(3) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 630) : ((Main.hardMode && num56 == 116 && Main.rand.Next(3) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 80) : ((Main.rand.Next(2) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 546) : ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 581) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 580)))))));
					}
					else
					{
						int num110 = 542;
						if (TileID.Sets.Corrupt[num56])
						{
							num110 = 543;
						}
						if (TileID.Sets.Crimson[num56])
						{
							num110 = 544;
						}
						if (TileID.Sets.Hallow[num56])
						{
							num110 = 545;
						}
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, num110);
					}
				}
				else if (Main.hardMode && num56 == 53 && Main.rand.Next(3) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 78);
				}
				else if (Main.hardMode && num56 == 112 && Main.rand.Next(2) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 79);
				}
				else if (Main.hardMode && num56 == 234 && Main.rand.Next(2) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 630);
				}
				else if (Main.hardMode && num56 == 116 && Main.rand.Next(2) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 80);
				}
				else if (Main.hardMode && !flag36 && flag9 && (num56 == 116 || num56 == 117 || num56 == 109 || num56 == 164))
				{
					if (downedPlantBoss && (Main.remixWorld || (!Main.dayTime && Main.time < 16200.0)) && flag13 && Main.player[k].RollLuck(10) == 0 && !AnyNPCs(661))
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 661);
					}
					else if (!flag17 || AnyNPCs(244) || Main.rand.Next(12) != 0)
					{
						newNPC = ((!Main.dayTime && Main.rand.Next(2) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 122) : ((Main.rand.Next(10) != 0 && (!Main.player[k].ZoneWaterCandle || Main.rand.Next(10) != 0)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 75) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 86)));
					}
					else
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 244);
					}
				}
				else if (!flag34 && Main.hardMode && Main.rand.Next(50) == 0 && !flag36 && flag14 && (num56 == 116 || num56 == 117 || num56 == 109 || num56 == 164))
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 84);
				}
				else if ((num56 == 204 && Main.player[k].ZoneCrimson) || num56 == 199 || num56 == 200 || num56 == 203 || num56 == 234 || num56 == 662)
				{
					bool flag30 = (double)num24 >= Main.rockLayer;
					if (Main.remixWorld)
					{
						flag30 = (double)num24 <= Main.rockLayer;
					}
					if (Main.hardMode && flag30 && Main.rand.Next(40) == 0 && !flag34)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 179);
					}
					else if (Main.hardMode && flag30 && Main.rand.Next(5) == 0 && !flag34)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 182);
					}
					else if (Main.hardMode && flag30 && Main.rand.Next(2) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 268);
					}
					else if (Main.hardMode && Main.rand.Next(3) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 183);
						if (Main.rand.Next(3) == 0)
						{
							Main.npc[newNPC].SetDefaults(-24);
						}
						else if (Main.rand.Next(3) == 0)
						{
							Main.npc[newNPC].SetDefaults(-25);
						}
					}
					else if (Main.hardMode && (Main.rand.Next(2) == 0 || ((double)num24 > Main.worldSurface && !Main.remixWorld)))
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 174);
					}
					else if ((Main.tile[num, num24].wall > 0 && Main.rand.Next(4) != 0) || Main.rand.Next(8) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 239);
					}
					else if (Main.rand.Next(2) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 181);
					}
					else
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 173);
						if (Main.rand.Next(3) == 0)
						{
							Main.npc[newNPC].SetDefaults(-22);
						}
						else if (Main.rand.Next(3) == 0)
						{
							Main.npc[newNPC].SetDefaults(-23);
						}
					}
				}
				else if ((num56 == 22 && Main.player[k].ZoneCorrupt) || num56 == 23 || num56 == 25 || num56 == 112 || num56 == 163 || num56 == 661)
				{
					bool flag31 = (double)num24 >= Main.rockLayer;
					if (Main.remixWorld)
					{
						flag31 = (double)num24 <= Main.rockLayer;
					}
					if (Main.hardMode && flag31 && Main.rand.Next(40) == 0 && !flag34)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 83);
					}
					else if (Main.hardMode && flag31 && Main.rand.Next(3) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 101);
						Main.npc[newNPC].ai[0] = num;
						Main.npc[newNPC].ai[1] = num24;
						Main.npc[newNPC].netUpdate = true;
					}
					else if (Main.hardMode && Main.rand.Next(3) == 0)
					{
						newNPC = ((Main.rand.Next(3) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 81) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 121));
					}
					else if (Main.hardMode && (Main.rand.Next(2) == 0 || flag31))
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 94);
					}
					else
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 6);
						if (Main.rand.Next(3) == 0)
						{
							Main.npc[newNPC].SetDefaults(-11);
						}
						else if (Main.rand.Next(3) == 0)
						{
							Main.npc[newNPC].SetDefaults(-12);
						}
					}
				}
				else if (flag13)
				{
					bool flag32 = (float)Math.Abs(num - Main.maxTilesX / 2) / (float)(Main.maxTilesX / 2) > 0.33f;
					if (flag32 && AnyDanger())
					{
						flag32 = false;
					}
					if (Main.player[k].ZoneGraveyard && !flag36 && (num35 == 2 || num35 == 477) && Main.rand.Next(10) == 0)
					{
						if (Main.rand.Next(2) == 0)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 606);
						}
						else
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 610);
						}
					}
					else if (Main.player[k].ZoneSnow && Main.hardMode && flag17 && !AnyNPCs(243) && Main.player[k].RollLuck(20) == 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 243);
					}
					else if (!Main.player[k].ZoneSnow && Main.hardMode && flag17 && CountNPCS(250) < 2 && Main.rand.Next(10) == 0)
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 250);
					}
					else if (flag32 && Main.hardMode && downedGolemBoss && ((!downedMartians && Main.rand.Next(100) == 0) || Main.rand.Next(400) == 0) && !AnyNPCs(399))
					{
						NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 399);
					}
					else if (!Main.player[k].ZoneGraveyard && Main.dayTime)
					{
						int num3 = Math.Abs(num - Main.spawnTileX);
						if (!flag36 && num3 < Main.maxTilesX / 2 && Main.rand.Next(15) == 0 && (num56 == 2 || num56 == 477 || num56 == 109 || num56 == 492 || num56 == 147 || num56 == 161))
						{
							if (num56 == 147 || num56 == 161)
							{
								if (Main.rand.Next(2) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 148);
								}
								else
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 149);
								}
							}
							else if (!tooWindyForButterflies && !Main.raining && Main.dayTime && Main.rand.Next(stinkBugChance) == 0 && flag13)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 669);
								if (Main.rand.Next(4) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 - 16, num24 * 16, 669);
								}
								if (Main.rand.Next(4) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + 16, num24 * 16, 669);
								}
							}
							else if (!tooWindyForButterflies && !Main.raining && Main.dayTime && Main.rand.Next(butterflyChance) == 0 && flag13)
							{
								if (Main.player[k].RollLuck(goldCritterChance) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 444);
								}
								else
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 356);
								}
								if (Main.rand.Next(4) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 - 16, num24 * 16, 356);
								}
								if (Main.rand.Next(4) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + 16, num24 * 16, 356);
								}
							}
							else if (tooWindyForButterflies && !Main.raining && Main.dayTime && Main.rand.Next(butterflyChance / 2) == 0 && flag13)
							{
								if (Main.player[k].RollLuck(goldCritterChance) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 605);
								}
								else
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 604);
								}
								if (Main.rand.Next(3) != 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 604);
								}
								if (Main.rand.Next(2) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 604);
								}
								if (Main.rand.Next(3) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 604);
								}
								if (Main.rand.Next(4) == 0)
								{
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 604);
								}
							}
							else if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 443);
							}
							else if (Main.player[k].RollLuck(goldCritterChance) == 0 && (double)num24 <= Main.worldSurface)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 539);
							}
							else if (Main.halloween && Main.rand.Next(3) != 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 303);
							}
							else if (Main.xMas && Main.rand.Next(3) != 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 337);
							}
							else if (BirthdayParty.PartyIsUp && Main.rand.Next(3) != 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 540);
							}
							else if (Main.rand.Next(3) == 0 && (double)num24 <= Main.worldSurface)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Utils.SelectRandom(Main.rand, new short[2] { 299, 538 }));
							}
							else
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 46);
							}
						}
						else if (!flag36 && num > WorldGen.beachDistance && num < Main.maxTilesX - WorldGen.beachDistance && Main.rand.Next(12) == 0 && num56 == 53)
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Main.rand.Next(366, 368));
						}
						else if ((num56 == 2 || num56 == 477 || num56 == 53) && !tooWindyForButterflies && !Main.raining && Main.dayTime && Main.rand.Next(3) != 0 && ((double)num24 <= Main.worldSurface || Main.remixWorld) && FindCattailTop(num, num24, out cattailX, out cattailY))
						{
							if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), cattailX * 16 + 8, cattailY * 16, 601);
							}
							else
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), cattailX * 16 + 8, cattailY * 16, RollDragonflyType(num56));
							}
							if (Main.rand.Next(3) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), cattailX * 16 + 8 - 16, cattailY * 16, RollDragonflyType(num56));
							}
							if (Main.rand.Next(3) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), cattailX * 16 + 8 + 16, cattailY * 16, RollDragonflyType(num56));
							}
						}
						else if (!flag36 && num3 < Main.maxTilesX / 3 && Main.dayTime && Main.time < 18000.0 && (num56 == 2 || num56 == 477 || num56 == 109 || num56 == 492) && Main.rand.Next(4) == 0 && (double)num24 <= Main.worldSurface && CountNPCS(74) + CountNPCS(297) + CountNPCS(298) < 6)
						{
							int num4 = Main.rand.Next(4);
							if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 442);
							}
							else
							{
								switch (num4)
								{
								case 0:
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 297);
									break;
								case 1:
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 298);
									break;
								default:
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 74);
									break;
								}
							}
						}
						else if (!flag36 && num3 < Main.maxTilesX / 3 && Main.rand.Next(15) == 0 && (num56 == 2 || num56 == 477 || num56 == 109 || num56 == 492 || num56 == 147))
						{
							int num5 = Main.rand.Next(4);
							if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 442);
							}
							else
							{
								switch (num5)
								{
								case 0:
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 297);
									break;
								case 1:
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 298);
									break;
								default:
									NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 74);
									break;
								}
							}
						}
						else if (!flag36 && num3 > Main.maxTilesX / 3 && num56 == 2 && Main.rand.Next(300) == 0 && !AnyNPCs(50))
						{
							SpawnOnPlayer(k, 50);
						}
						else if (!flag7 && num56 == 53 && (num < WorldGen.beachDistance || num > Main.maxTilesX - WorldGen.beachDistance))
						{
							if (!flag36 && Main.rand.Next(10) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 602);
							}
							else if (flag36)
							{
								int num6 = -1;
								int num7 = -1;
								if ((double)num24 < Main.worldSurface && num24 > 50)
								{
									for (int num8 = num24 - 1; num8 > num24 - 50; num8--)
									{
										if (Main.tile[num, num8].liquid == 0 && !WorldGen.SolidTile(num, num8) && !WorldGen.SolidTile(num, num8 + 1) && !WorldGen.SolidTile(num, num8 + 2))
										{
											num6 = num8 + 2;
											if (!WorldGen.SolidTile(num, num6 + 1) && !WorldGen.SolidTile(num, num6 + 2))
											{
												num7 = num6 + 2;
											}
											break;
										}
									}
									if (num6 > num24)
									{
										num6 = num24;
									}
									if (num7 > num24)
									{
										num7 = num24;
									}
								}
								if (Main.rand.Next(10) == 0)
								{
									int num9 = Main.rand.Next(3);
									if (num9 == 0 && num6 > 0)
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num6 * 16, 625);
									}
									else if (num9 == 1 && num7 > 0)
									{
										NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num7 * 16, 615);
									}
									else if (num9 == 2)
									{
										int num10 = num24;
										if (num7 > 0)
										{
											num10 = num7;
										}
										if (Main.player[k].RollLuck(goldCritterChance) == 0)
										{
											NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num10 * 16, 627);
										}
										else
										{
											NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num10 * 16, 626);
										}
									}
								}
							}
						}
						else if (!flag36 && num56 == 53 && Main.rand.Next(5) == 0 && Spawning_SandstoneCheck(num, num24) && !flag36)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 69);
						}
						else if (num56 == 53 && !flag36)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 61);
						}
						else if (!flag36 && (num3 > Main.maxTilesX / 3 || Main.remixWorld) && (Main.rand.Next(15) == 0 || (!downedGoblins && WorldGen.shadowOrbSmashed && Main.rand.Next(7) == 0)))
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 73);
						}
						else if (Main.raining && Main.rand.Next(4) == 0)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 224);
						}
						else if (!flag36 && Main.raining && Main.rand.Next(2) == 0)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 225);
						}
						else if (!flag36 && num58 == 0 && isItAHappyWindyDay && flag11 && Main.rand.Next(3) != 0)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 594);
						}
						else if (!flag36 && num58 == 0 && (num35 == 2 || num35 == 477) && isItAHappyWindyDay && flag11 && Main.rand.Next(10) != 0)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 628);
						}
						else if (!flag36)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 1);
							switch (num56)
							{
							case 60:
								Main.npc[newNPC].SetDefaults(-10);
								break;
							case 147:
							case 161:
								Main.npc[newNPC].SetDefaults(147);
								break;
							default:
								if (Main.halloween && Main.rand.Next(3) != 0)
								{
									Main.npc[newNPC].SetDefaults(302);
								}
								else if (Main.xMas && Main.rand.Next(3) != 0)
								{
									Main.npc[newNPC].SetDefaults(Main.rand.Next(333, 337));
								}
								else if (Main.rand.Next(3) == 0 || (num3 < 200 && !Main.expertMode))
								{
									Main.npc[newNPC].SetDefaults(-3);
								}
								else if (Main.rand.Next(10) == 0 && (num3 > 400 || Main.expertMode))
								{
									Main.npc[newNPC].SetDefaults(-7);
								}
								break;
							}
						}
					}
					else
					{
						if (!Main.player[k].ZoneGraveyard && !tooWindyForButterflies && (num56 == 2 || num56 == 477 || num56 == 109 || num56 == 492) && !Main.raining && Main.rand.Next(fireFlyChance) == 0 && (double)num24 <= Main.worldSurface)
						{
							int num11 = 355;
							if (num56 == 109)
							{
								num11 = 358;
							}
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, num11);
							if (Main.rand.Next(fireFlyMultiple) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 - 16, num24 * 16, num11);
							}
							if (Main.rand.Next(fireFlyMultiple) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8 + 16, num24 * 16, num11);
							}
							if (Main.rand.Next(fireFlyMultiple) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16 - 16, num11);
							}
							if (Main.rand.Next(fireFlyMultiple) == 0)
							{
								NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16 + 16, num11);
							}
						}
						else if ((Main.halloween || Main.player[k].ZoneGraveyard) && Main.rand.Next(12) == 0)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 301);
						}
						else if (Main.player[k].ZoneGraveyard && Main.rand.Next(30) == 0)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 316);
						}
						else if (Main.player[k].ZoneGraveyard && Main.hardMode && (double)num24 <= Main.worldSurface && Main.rand.Next(10) == 0)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 304);
						}
						else if (Main.rand.Next(6) == 0 || (Main.moonPhase == 4 && Main.rand.Next(2) == 0))
						{
							if (Main.hardMode && Main.rand.Next(3) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 133);
							}
							else if (Main.halloween && Main.rand.Next(2) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Main.rand.Next(317, 319));
							}
							else if (Main.rand.Next(2) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 2);
								if (Main.rand.Next(4) == 0)
								{
									Main.npc[newNPC].SetDefaults(-43);
								}
							}
							else
							{
								switch (Main.rand.Next(5))
								{
								case 0:
									newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 190);
									if (Main.rand.Next(3) == 0)
									{
										Main.npc[newNPC].SetDefaults(-38);
									}
									break;
								case 1:
									newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 191);
									if (Main.rand.Next(3) == 0)
									{
										Main.npc[newNPC].SetDefaults(-39);
									}
									break;
								case 2:
									newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 192);
									if (Main.rand.Next(3) == 0)
									{
										Main.npc[newNPC].SetDefaults(-40);
									}
									break;
								case 3:
									newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 193);
									if (Main.rand.Next(3) == 0)
									{
										Main.npc[newNPC].SetDefaults(-41);
									}
									break;
								case 4:
									newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 194);
									if (Main.rand.Next(3) == 0)
									{
										Main.npc[newNPC].SetDefaults(-42);
									}
									break;
								}
							}
						}
						else if (Main.hardMode && Main.rand.Next(50) == 0 && Main.bloodMoon && !AnyNPCs(109))
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 109);
						}
						else if (Main.rand.Next(250) == 0 && (Main.bloodMoon || Main.player[k].ZoneGraveyard))
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 53);
						}
						else if (Main.rand.Next(250) == 0 && (Main.bloodMoon || Main.player[k].ZoneGraveyard))
						{
							NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 536);
						}
						else if (!Main.dayTime && Main.moonPhase == 0 && Main.hardMode && Main.rand.Next(3) != 0)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 104);
						}
						else if (!Main.dayTime && Main.hardMode && Main.rand.Next(3) == 0)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 140);
						}
						else if (Main.bloodMoon && Main.rand.Next(5) < 2)
						{
							newNPC = ((Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 490) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 489));
						}
						else if (num35 == 147 || num35 == 161 || num35 == 163 || num35 == 164 || num35 == 162)
						{
							newNPC = ((!Main.player[k].ZoneGraveyard && Main.hardMode && Main.rand.Next(4) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 169) : ((!Main.player[k].ZoneGraveyard && Main.hardMode && Main.rand.Next(3) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 155) : ((!Main.expertMode || Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 161) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 431))));
						}
						else if (Main.raining && Main.rand.Next(2) == 0)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 223);
							if (Main.rand.Next(3) == 0)
							{
								if (Main.rand.Next(2) == 0)
								{
									Main.npc[newNPC].SetDefaults(-54);
								}
								else
								{
									Main.npc[newNPC].SetDefaults(-55);
								}
							}
						}
						else
						{
							int num12 = Main.rand.Next(7);
							int num14 = 12;
							int maxValue4 = 20;
							if (Main.player[k].ConsumedLifeCrystals == 0)
							{
								num14 = 5;
								num14 -= Main.CurrentFrameFlags.ActivePlayersCount / 2;
								if (num14 < 2)
								{
									num14 = 2;
								}
							}
							if (Main.player[k].ZoneGraveyard && Main.rand.Next(maxValue4) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 632);
							}
							else if (Main.rand.Next(num14) == 0)
							{
								newNPC = ((!Main.expertMode || Main.rand.Next(2) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 590) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 591));
							}
							else if (Main.halloween && Main.rand.Next(2) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Main.rand.Next(319, 322));
							}
							else if (Main.xMas && Main.rand.Next(2) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Main.rand.Next(331, 333));
							}
							else if (num12 == 0 && Main.expertMode && Main.rand.Next(3) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 430);
							}
							else if (num12 == 2 && Main.expertMode && Main.rand.Next(3) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 432);
							}
							else if (num12 == 3 && Main.expertMode && Main.rand.Next(3) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 433);
							}
							else if (num12 == 4 && Main.expertMode && Main.rand.Next(3) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 434);
							}
							else if (num12 == 5 && Main.expertMode && Main.rand.Next(3) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 435);
							}
							else if (num12 == 6 && Main.expertMode && Main.rand.Next(3) == 0)
							{
								newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 436);
							}
							else
							{
								switch (num12)
								{
								case 0:
									newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 3);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[newNPC].SetDefaults(-26);
										}
										else
										{
											Main.npc[newNPC].SetDefaults(-27);
										}
									}
									break;
								case 1:
									newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 132);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[newNPC].SetDefaults(-28);
										}
										else
										{
											Main.npc[newNPC].SetDefaults(-29);
										}
									}
									break;
								case 2:
									newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 186);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[newNPC].SetDefaults(-30);
										}
										else
										{
											Main.npc[newNPC].SetDefaults(-31);
										}
									}
									break;
								case 3:
									newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 187);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[newNPC].SetDefaults(-32);
										}
										else
										{
											Main.npc[newNPC].SetDefaults(-33);
										}
									}
									break;
								case 4:
									newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 188);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[newNPC].SetDefaults(-34);
										}
										else
										{
											Main.npc[newNPC].SetDefaults(-35);
										}
									}
									break;
								case 5:
									newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 189);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[newNPC].SetDefaults(-36);
										}
										else
										{
											Main.npc[newNPC].SetDefaults(-37);
										}
									}
									break;
								case 6:
									newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 200);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[newNPC].SetDefaults(-44);
										}
										else
										{
											Main.npc[newNPC].SetDefaults(-45);
										}
									}
									break;
								}
							}
						}
						if (Main.player[k].ZoneGraveyard)
						{
							Main.npc[newNPC].target = k;
						}
					}
				}
				else if (flag9)
				{
					if (!flag34 && Main.rand.Next(50) == 0 && !Main.player[k].ZoneSnow)
					{
						newNPC = ((!Main.hardMode) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 10, 1) : ((Main.rand.Next(3) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 10, 1) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 95, 1)));
					}
					else if (Main.hardMode && Main.rand.Next(3) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 140);
					}
					else if (Main.hardMode && Main.rand.Next(4) != 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 141);
					}
					else if (Main.remixWorld)
					{
						if (num35 == 147 || num35 == 161 || num35 == 163 || num35 == 164 || num35 == 162 || Main.player[k].ZoneSnow)
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 147);
						}
						else
						{
							newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 1);
							if (Main.rand.Next(3) == 0)
							{
								Main.npc[newNPC].SetDefaults(-9);
							}
							else
							{
								Main.npc[newNPC].SetDefaults(-8);
							}
						}
					}
					else if (num56 == 147 || num56 == 161 || Main.player[k].ZoneSnow)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 147);
					}
					else
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 1);
						if (Main.rand.Next(5) == 0)
						{
							Main.npc[newNPC].SetDefaults(-9);
						}
						else if (Main.rand.Next(2) == 0)
						{
							Main.npc[newNPC].SetDefaults(1);
						}
						else
						{
							Main.npc[newNPC].SetDefaults(-8);
						}
					}
				}
				else if (num24 > Main.maxTilesY - 190)
				{
					newNPC = ((Main.remixWorld && (double)num > (double)Main.maxTilesX * 0.38 + 50.0 && (double)num < (double)Main.maxTilesX * 0.62) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 59) : ((Main.hardMode && !savedTaxCollector && Main.rand.Next(20) == 0 && !AnyNPCs(534)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 534) : ((Main.rand.Next(8) == 0) ? SpawnNPC_SpawnLavaBaitCritters(num, num24) : ((Main.rand.Next(40) == 0 && !AnyNPCs(39)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 39, 1) : ((Main.rand.Next(14) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 24) : ((Main.rand.Next(7) != 0) ? ((Main.rand.Next(3) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 59) : ((!Main.hardMode || !downedMechBossAny || Main.rand.Next(5) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 60) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 151))) : ((Main.rand.Next(10) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 66) : ((!Main.hardMode || !downedMechBossAny || Main.rand.Next(5) == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 62) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 156)))))))));
				}
				else if (SpawnNPC_CheckToSpawnRockGolem(num, num24, k, num56))
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 631);
				}
				else if (Main.rand.Next(60) == 0)
				{
					newNPC = ((!Main.player[k].ZoneSnow) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 217) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 218));
				}
				else if ((num56 == 116 || num56 == 117 || num56 == 164) && Main.hardMode && !flag34 && Main.rand.Next(8) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 120);
				}
				else if ((num35 == 147 || num35 == 161 || num35 == 162 || num35 == 163 || num35 == 164 || num35 == 200) && !flag34 && Main.hardMode && Main.player[k].ZoneCorrupt && Main.rand.Next(30) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 170);
				}
				else if ((num35 == 147 || num35 == 161 || num35 == 162 || num35 == 163 || num35 == 164 || num35 == 200) && !flag34 && Main.hardMode && Main.player[k].ZoneHallow && Main.rand.Next(30) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 171);
				}
				else if ((num35 == 147 || num35 == 161 || num35 == 162 || num35 == 163 || num35 == 164 || num35 == 200) && !flag34 && Main.hardMode && Main.player[k].ZoneCrimson && Main.rand.Next(30) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 180);
				}
				else if (Main.hardMode && Main.player[k].ZoneSnow && Main.rand.Next(10) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 154);
				}
				else if (!flag34 && Main.rand.Next(100) == 0 && !Main.player[k].ZoneHallow)
				{
					newNPC = (Main.hardMode ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 95, 1) : ((!Main.player[k].ZoneSnow) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 10, 1) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 185)));
				}
				else if (Main.player[k].ZoneSnow && Main.rand.Next(20) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 185);
				}
				else if ((!Main.hardMode && Main.rand.Next(10) == 0) || (Main.hardMode && Main.rand.Next(20) == 0))
				{
					if (Main.player[k].ZoneSnow)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 184);
					}
					else if (Main.rand.Next(3) == 0)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 1);
						Main.npc[newNPC].SetDefaults(-6);
					}
					else
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 16);
					}
				}
				else if (!Main.hardMode && Main.rand.Next(4) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 1);
					if (Main.player[k].ZoneJungle)
					{
						Main.npc[newNPC].SetDefaults(-10);
					}
					else if (Main.player[k].ZoneSnow)
					{
						Main.npc[newNPC].SetDefaults(184);
					}
					else
					{
						Main.npc[newNPC].SetDefaults(-6);
					}
				}
				else if (Main.rand.Next(2) != 0)
				{
					newNPC = ((Main.hardMode && (Main.player[k].ZoneHallow & (Main.rand.Next(2) == 0))) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 138) : (Main.player[k].ZoneJungle ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 51) : ((Main.player[k].ZoneGlowshroom && (num35 == 70 || num35 == 190)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 634) : ((Main.hardMode && Main.player[k].ZoneHallow) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 137) : ((Main.hardMode && Main.rand.Next(6) > 0) ? ((Main.rand.Next(3) != 0 || (num35 != 147 && num35 != 161 && num35 != 162)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 93) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 150)) : ((num35 != 147 && num35 != 161 && num35 != 162) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 49) : ((!Main.hardMode) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 150) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 169))))))));
				}
				else if (Main.rand.Next(35) == 0 && CountNPCS(453) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 453);
				}
				else if (Main.rand.Next(80) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 195);
				}
				else if (Main.hardMode && (Main.remixWorld || (double)num24 > (Main.rockLayer + (double)Main.maxTilesY) / 2.0) && Main.rand.Next(200) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 172);
				}
				else if ((Main.remixWorld || (double)num24 > (Main.rockLayer + (double)Main.maxTilesY) / 2.0) && (Main.rand.Next(200) == 0 || (Main.rand.Next(50) == 0 && (Main.player[k].armor[1].type == 4256 || (Main.player[k].armor[1].type >= 1282 && Main.player[k].armor[1].type <= 1287)) && Main.player[k].armor[0].type != 238)))
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 45);
				}
				else if (flag2 && Main.rand.Next(4) != 0)
				{
					newNPC = ((Main.rand.Next(6) == 0 || AnyNPCs(480) || !Main.hardMode) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 481) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 480));
				}
				else if (flag38 && Main.rand.Next(5) != 0)
				{
					newNPC = ((Main.rand.Next(6) == 0 || AnyNPCs(483)) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 482) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 483));
				}
				else if (Main.hardMode && Main.rand.Next(10) != 0)
				{
					if (Main.rand.Next(2) != 0)
					{
						newNPC = ((!Main.player[k].ZoneSnow) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 110) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 206));
					}
					else if (Main.player[k].ZoneSnow)
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 197);
					}
					else
					{
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 77);
						if ((Main.remixWorld || (double)num24 > (Main.rockLayer + (double)Main.maxTilesY) / 2.0) && Main.rand.Next(5) == 0)
						{
							Main.npc[newNPC].SetDefaults(-15);
						}
					}
				}
				else if (!flag34 && (Main.halloween || Main.player[k].ZoneGraveyard) && Main.rand.Next(30) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 316);
				}
				else if (Main.rand.Next(20) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 44);
				}
				else if (num35 == 147 || num35 == 161 || num35 == 162)
				{
					newNPC = ((Main.rand.Next(15) != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 167) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 185));
				}
				else if (Main.player[k].ZoneSnow)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 185);
				}
				else if (Main.rand.Next(3) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, cavernMonsterType[Main.rand.Next(2), Main.rand.Next(3)]);
				}
				else if (Main.player[k].ZoneGlowshroom && (num35 == 70 || num35 == 190))
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 635);
				}
				else if (Main.halloween && Main.rand.Next(2) == 0)
				{
					newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, Main.rand.Next(322, 325));
				}
				else if (Main.expertMode && Main.rand.Next(3) == 0)
				{
					int num15 = Main.rand.Next(4);
					newNPC = ((num15 == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 449) : ((num15 == 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 450) : ((num15 != 0) ? NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 452) : NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 451))));
				}
				else
				{
					switch (Main.rand.Next(4))
					{
					case 0:
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 21);
						if (Main.rand.Next(3) == 0)
						{
							if (Main.rand.Next(2) == 0)
							{
								Main.npc[newNPC].SetDefaults(-47);
							}
							else
							{
								Main.npc[newNPC].SetDefaults(-46);
							}
						}
						break;
					case 1:
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 201);
						if (Main.rand.Next(3) == 0)
						{
							if (Main.rand.Next(2) == 0)
							{
								Main.npc[newNPC].SetDefaults(-49);
							}
							else
							{
								Main.npc[newNPC].SetDefaults(-48);
							}
						}
						break;
					case 2:
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 202);
						if (Main.rand.Next(3) == 0)
						{
							if (Main.rand.Next(2) == 0)
							{
								Main.npc[newNPC].SetDefaults(-51);
							}
							else
							{
								Main.npc[newNPC].SetDefaults(-50);
							}
						}
						break;
					case 3:
						newNPC = NewNPC(GetSpawnSourceForNaturalSpawn(), num * 16 + 8, num24 * 16, 203);
						if (Main.rand.Next(3) == 0)
						{
							if (Main.rand.Next(2) == 0)
							{
								Main.npc[newNPC].SetDefaults(-53);
							}
							else
							{
								Main.npc[newNPC].SetDefaults(-52);
							}
						}
						break;
					}
				}
			}
			if (spawn != 0)
			{
				newNPC = NPCLoader.SpawnNPC(spawn, num, num24);
			}
			if (Main.npc[newNPC].type == 1 && Main.player[k].RollLuck(180) == 0)
			{
				Main.npc[newNPC].SetDefaults(-4);
			}
			if (Main.tenthAnniversaryWorld && Main.npc[newNPC].type == 1 && Main.player[k].RollLuck(180) == 0)
			{
				Main.npc[newNPC].SetDefaults(667);
			}
			if (Main.netMode == 2 && newNPC < 200)
			{
				NetMessage.SendData(23, -1, -1, null, newNPC);
			}
			break;
		}
	}

	public static void SpawnNPC_SpawnFrog(int spawnTileX, int spawnTileY, int plr)
	{
		if (!unlockedSlimeYellowSpawn && Main.player[plr].RollLuck(30) == 0 && !AnyNPCs(687))
		{
			NewNPC(GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8, spawnTileY * 16, 687);
		}
		else if (Main.player[plr].RollLuck(goldCritterChance) == 0)
		{
			NewNPC(GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8, spawnTileY * 16, 445);
		}
		else
		{
			NewNPC(GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8, spawnTileY * 16, 361);
		}
	}

	public static int SpawnNPC_GetGemBunnyToSpawn()
	{
		int num = Main.rand.Next(100);
		if (num < 5)
		{
			return 651;
		}
		if (num < 13)
		{
			return 652;
		}
		if (num < 23)
		{
			return 650;
		}
		if (num < 35)
		{
			return 649;
		}
		if (num < 51)
		{
			return 648;
		}
		if (num < 72)
		{
			return 647;
		}
		return 646;
	}

	public static int SpawnNPC_GetGemSquirrelToSpawn()
	{
		int num = Main.rand.Next(100);
		if (num < 5)
		{
			return 644;
		}
		if (num < 13)
		{
			return 645;
		}
		if (num < 23)
		{
			return 643;
		}
		if (num < 35)
		{
			return 642;
		}
		if (num < 51)
		{
			return 641;
		}
		if (num < 72)
		{
			return 640;
		}
		return 639;
	}

	private static bool SpawnNPC_CheckToSpawnRockGolem(int spawnTileX, int spawnTileY, int plr, int tileType)
	{
		if (!Main.hardMode || (tileType != 1 && !TileID.Sets.Conversion.Moss[tileType]) || Main.player[plr].ZoneSnow)
		{
			return false;
		}
		if (Main.rand.Next(60) != 0)
		{
			return false;
		}
		if (WorldGen.SolidTile(spawnTileX - 1, spawnTileY - 4) || WorldGen.SolidTile(spawnTileX, spawnTileY - 4) || WorldGen.SolidTile(spawnTileX + 1, spawnTileY - 4))
		{
			return false;
		}
		return true;
	}

	private static bool SpawnNPC_CheckToSpawnUndergroundFairy(int spawnTileX, int spawnTileY, int plr)
	{
		if (!fairyLog)
		{
			return false;
		}
		int num = 500;
		if (Main.tenthAnniversaryWorld && !Main.getGoodWorld)
		{
			num = 250;
		}
		if (Main.hardMode)
		{
			num = (int)((float)num * 1.66f);
		}
		if (Main.player[plr].RollLuck(num) != 0)
		{
			return false;
		}
		if ((double)spawnTileY < (Main.worldSurface + Main.rockLayer) / 2.0 || spawnTileY >= Main.maxTilesY - 300)
		{
			return false;
		}
		if (AnyHelpfulFairies())
		{
			return false;
		}
		return true;
	}

	private static int SpawnNPC_SpawnLavaBaitCritters(int spawnTileX, int spawnTileY)
	{
		if (Main.rand.Next(3) != 0)
		{
			if (Main.dayTime)
			{
				return NewNPC(GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8, spawnTileY * 16, 653);
			}
			if (Main.rand.Next(fireFlyMultiple) == 0)
			{
				NewNPC(GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8 - 16, spawnTileY * 16, 654);
			}
			if (Main.rand.Next(fireFlyMultiple) == 0)
			{
				NewNPC(GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8 + 16, spawnTileY * 16, 654);
			}
			if (Main.rand.Next(fireFlyMultiple) == 0)
			{
				NewNPC(GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8, spawnTileY * 16 - 16, 654);
			}
			if (Main.rand.Next(fireFlyMultiple) == 0)
			{
				NewNPC(GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8, spawnTileY * 16 + 16, 654);
			}
			return NewNPC(GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8, spawnTileY * 16, 654);
		}
		return NewNPC(GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8, spawnTileY * 16, 655);
	}

	private static int SpawnNPC_TryFindingProperGroundTileType(int spawnTileType, int x, int y)
	{
		if (!IsValidSpawningGroundTile(x, y))
		{
			for (int i = y + 1; i < y + 30; i++)
			{
				if (IsValidSpawningGroundTile(x, i))
				{
					return Main.tile[x, i].type;
				}
			}
		}
		return spawnTileType;
	}

	public static bool IsValidSpawningGroundTile(int x, int y)
	{
		Tile tile = Main.tile[x, y];
		if (!tile.nactive())
		{
			return false;
		}
		if (!Main.tileSolid[tile.type] || Main.tileSolidTop[tile.type])
		{
			return false;
		}
		if (TileID.Sets.IsSkippedForNPCSpawningGroundTypeCheck[tile.type])
		{
			return false;
		}
		return true;
	}

	public static bool FindCattailTop(int landX, int landY, out int cattailX, out int cattailY)
	{
		cattailX = landX;
		cattailY = landY;
		if (!WorldGen.InWorld(landX, landY, 31))
		{
			return false;
		}
		int num = 1;
		for (int i = landX - 30; i <= landX + 30; i++)
		{
			for (int j = landY - 20; j <= landY + 20; j++)
			{
				Tile tile = Main.tile[i, j];
				if (tile != null && tile.active() && tile.type == 519 && tile.frameX >= 180 && Main.rand.Next(num) == 0)
				{
					cattailX = i;
					cattailY = j;
					num++;
				}
			}
		}
		if (cattailX != landX || cattailY != landY)
		{
			return true;
		}
		return false;
	}

	public static bool FindTreeBranch(int landX, int landY, out int treeBranchX, out int treeBranchY)
	{
		treeBranchX = landX;
		treeBranchY = landY;
		if (!WorldGen.InWorld(landX, landY, 11))
		{
			return false;
		}
		int num = 1;
		for (int i = landX - 10; i <= landX + 10; i++)
		{
			for (int j = landY - 30; j <= landY + 30; j++)
			{
				Tile tile = Main.tile[i, j];
				if (tile != null && tile.active() && TileID.Sets.IsATreeTrunk[tile.type])
				{
					int num2 = tile.frameX / 22;
					int num3 = tile.frameY / 66;
					if (((num2 == 3 && num3 == 0) || (num2 == 3 && num3 == 3) || (num2 == 4 && num3 == 1) || (num2 == 4 && num3 == 3) || (num2 == 2 && num3 == 3)) && Main.rand.Next(num) == 0)
					{
						treeBranchX = i;
						treeBranchY = j;
						num++;
					}
				}
			}
		}
		if (treeBranchX != landX || treeBranchY != landY)
		{
			return true;
		}
		return false;
	}

	public static bool AnyDanger(bool quickBossNPCCheck = false, bool ignorePillarsAndMoonlordCountdown = false)
	{
		bool flag = false;
		if (!ignorePillarsAndMoonlordCountdown && MoonLordCountdown > 0)
		{
			flag = true;
		}
		if (Main.invasionType > 0)
		{
			flag = true;
		}
		if (Main.snowMoon || Main.pumpkinMoon || DD2Event.Ongoing)
		{
			flag = true;
		}
		if (!flag)
		{
			if (quickBossNPCCheck)
			{
				flag |= Main.CurrentFrameFlags.AnyActiveBossNPC;
			}
			else
			{
				for (int i = 0; i < 200; i++)
				{
					if (!Main.npc[i].active || (!Main.npc[i].boss && !NPCID.Sets.DangerThatPreventsOtherDangers[Main.npc[i].type]))
					{
						continue;
					}
					if (ignorePillarsAndMoonlordCountdown)
					{
						switch (Main.npc[i].type)
						{
						case 422:
						case 493:
						case 507:
						case 517:
							continue;
						}
					}
					flag = true;
				}
			}
		}
		return flag;
	}

	public static bool AnyoneNearCultists()
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		int num = FindFirstNPC(437);
		if (num == -1)
		{
			return false;
		}
		Rectangle rectangle = Utils.CenteredRectangle(Main.npc[num].Center, new Vector2(2500f, 1500f));
		Rectangle r = default(Rectangle);
		((Rectangle)(ref r))._002Ector(0, 0, 2500, 1500);
		Vector2 vector = r.Size() / 2f;
		for (int i = 0; i < 255; i++)
		{
			if (Main.player[i].active)
			{
				r.X = (int)Main.player[i].Center.X - (int)vector.X;
				r.Y = (int)Main.player[i].Center.Y - (int)vector.Y;
				if (((Rectangle)(ref rectangle)).Intersects(r))
				{
					return true;
				}
			}
		}
		return false;
	}

	public static void SpawnWOF(Vector2 pos)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		if (pos.Y / 16f < (float)(Main.maxTilesY - 205) || Main.wofNPCIndex >= 0 || Main.netMode == 1 || AnyNPCs(113))
		{
			return;
		}
		Player.FindClosest(pos, 16, 16);
		int num = 1;
		if (pos.X / 16f > (float)(Main.maxTilesX / 2))
		{
			num = -1;
		}
		bool flag = false;
		int num3 = (int)pos.X;
		int targetPlayerIndex = 0;
		while (!flag)
		{
			flag = true;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && Main.player[i].position.X > (float)(num3 - 1200) && Main.player[i].position.X < (float)(num3 + 1200))
				{
					num3 -= num * 16;
					flag = false;
					targetPlayerIndex = i;
				}
			}
			if (num3 / 16 < 20 || num3 / 16 > Main.maxTilesX - 20)
			{
				flag = true;
			}
		}
		int num4 = (int)pos.Y;
		int num5 = num3 / 16;
		int num6 = num4 / 16;
		int num7 = 0;
		int num8 = 1000;
		if (!WorldGen.InWorld(num5, num6, 2) || WorldGen.SolidTile(num5, num6) || Main.tile[num5, num6 - num7].liquid >= 100)
		{
			while (true)
			{
				num8--;
				if (num8 <= 0)
				{
					break;
				}
				try
				{
					if (WorldGen.InWorld(num5, num6 - num7, 2) && !WorldGen.SolidTile(num5, num6 - num7) && Main.tile[num5, num6 - num7].liquid < 100)
					{
						num6 -= num7;
						break;
					}
					if (WorldGen.InWorld(num5, num6 + num7, 2) && !WorldGen.SolidTile(num5, num6 + num7) && Main.tile[num5, num6 + num7].liquid < 100)
					{
						num6 += num7;
						break;
					}
					num7++;
				}
				catch
				{
					break;
				}
			}
		}
		int num9 = Main.UnderworldLayer + 10;
		int num10 = num9 + 70;
		if (num6 < num9)
		{
			num6 = num9;
		}
		if (num6 > num10)
		{
			num6 = num10;
		}
		num4 = num6 * 16;
		int num2 = NewNPC(GetBossSpawnSource(targetPlayerIndex), num3, num4, 113);
		if (Main.netMode == 0)
		{
			Main.NewText(Language.GetTextValue("Announcement.HasAwoken", Main.npc[num2].TypeName), 175, 75);
		}
		else if (Main.netMode == 2)
		{
			ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", Main.npc[num2].GetTypeNetName()), new Color(175, 75, 255));
		}
	}

	public static void SpawnSkeletron(int onWho)
	{
		//IL_0004: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_0144: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e2: Unknown result type (might be due to invalid IL or missing references)
		bool flag = true;
		bool flag2 = false;
		Vector2 zero = Vector2.Zero;
		int num = 0;
		int num2 = 0;
		for (int i = 0; i < 200; i++)
		{
			if (Main.npc[i].active && Main.npc[i].type == 35)
			{
				flag = false;
				break;
			}
		}
		for (int j = 0; j < 200; j++)
		{
			if (!Main.npc[j].active)
			{
				continue;
			}
			if (Main.npc[j].type == 37)
			{
				flag2 = true;
				Main.npc[j].ai[3] = 1f;
				zero = Main.npc[j].position;
				num = Main.npc[j].width;
				num2 = Main.npc[j].height;
				if (Main.netMode == 2)
				{
					NetMessage.SendData(23, -1, -1, null, j);
				}
			}
			else if (Main.npc[j].type == 54)
			{
				flag2 = true;
				zero = Main.npc[j].position;
				num = Main.npc[j].width;
				num2 = Main.npc[j].height;
			}
		}
		if (flag && flag2)
		{
			int num3 = NewNPC(GetBossSpawnSource(onWho), (int)zero.X + num / 2, (int)zero.Y + num2 / 2, 35);
			Main.npc[num3].netUpdate = true;
			string nPCNameValue = Lang.GetNPCNameValue(35);
			if (Main.netMode == 0)
			{
				Main.NewText(Language.GetTextValue("Announcement.HasAwoken", nPCNameValue), 175, 75);
			}
			else if (Main.netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", Lang.GetNPCName(35).ToNetworkText()), new Color(175, 75, 255));
			}
		}
	}

	public static void SpawnFaelings(int plr)
	{
		//IL_0296: Unknown result type (might be due to invalid IL or missing references)
		if (AnyNPCs(677))
		{
			return;
		}
		int num = Main.rand.Next(2, 6);
		int num2 = (int)(Main.player[plr].position.X / 16f) - spawnRangeX * 2;
		int num3 = (int)(Main.player[plr].position.X / 16f) + spawnRangeX * 2;
		int num4 = (int)(Main.player[plr].position.Y / 16f) - spawnRangeY * 2;
		int num5 = (int)(Main.player[plr].position.Y / 16f) + spawnRangeY * 2;
		_ = Main.player[plr].position.X / 16f;
		_ = safeRangeX;
		_ = Main.player[plr].position.X / 16f;
		_ = safeRangeX;
		_ = Main.player[plr].position.Y / 16f;
		_ = safeRangeY;
		_ = Main.player[plr].position.Y / 16f;
		_ = safeRangeY;
		if (num2 < 0)
		{
			num2 = 0;
		}
		if (num3 > Main.maxTilesX)
		{
			num3 = Main.maxTilesX;
		}
		if (num4 < 0)
		{
			num4 = 0;
		}
		if (num5 > Main.maxTilesY)
		{
			num5 = Main.maxTilesY;
		}
		Rectangle rectangle = default(Rectangle);
		Rectangle rectangle2 = default(Rectangle);
		for (int i = 0; i < num; i++)
		{
			int num6 = 1000;
			for (int j = 0; j < num6; j++)
			{
				int num7 = Main.rand.Next(num2, num3);
				int num8 = Main.rand.Next(num4, num5);
				if (Main.tile[num7, num8].liquid <= 0 || !Main.tile[num7, num8].shimmer())
				{
					continue;
				}
				while (Main.tile[num7, num8].liquid > 0)
				{
					if (num8 < 50)
					{
						return;
					}
					num8--;
				}
				bool flag = true;
				((Rectangle)(ref rectangle))._002Ector(num7 * 16, num8 * 16, 16, 16);
				for (int k = 0; k < 255; k++)
				{
					if (Main.player[k].active)
					{
						((Rectangle)(ref rectangle2))._002Ector((int)(Main.player[k].position.X + (float)(Main.player[k].width / 2) - (float)(sWidth / 2) - (float)safeRangeX), (int)(Main.player[k].position.Y + (float)(Main.player[k].height / 2) - (float)(sHeight / 2) - (float)safeRangeY), sWidth + safeRangeX * 2, sHeight + safeRangeY * 2);
						if (((Rectangle)(ref rectangle)).Intersects(rectangle2))
						{
							flag = false;
						}
					}
				}
				if (flag)
				{
					int num9 = NewNPC(GetSpawnSourceForNaturalSpawn(), num7 * 16 + 8, num8 * 16, 677);
					if (Main.netMode == 2 && num9 < 200)
					{
						NetMessage.SendData(23, -1, -1, null, num9);
					}
					break;
				}
			}
		}
	}

	public static void SpawnOnPlayer(int plr, int Type)
	{
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_044e: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0371: Unknown result type (might be due to invalid IL or missing references)
		//IL_0257: Unknown result type (might be due to invalid IL or missing references)
		//IL_093a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0733: Unknown result type (might be due to invalid IL or missing references)
		//IL_073d: Unknown result type (might be due to invalid IL or missing references)
		//IL_074f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0759: Unknown result type (might be due to invalid IL or missing references)
		//IL_0772: Unknown result type (might be due to invalid IL or missing references)
		//IL_077c: Unknown result type (might be due to invalid IL or missing references)
		//IL_078c: Unknown result type (might be due to invalid IL or missing references)
		if (Main.netMode == 1 || (Type == 262 && AnyNPCs(262)))
		{
			return;
		}
		Tile tile;
		switch (Type)
		{
		case 245:
			if (AnyNPCs(245))
			{
				return;
			}
			try
			{
				int num12 = (int)Main.player[plr].Center.X / 16;
				int num23 = (int)Main.player[plr].Center.Y / 16;
				int num25 = 0;
				int num26 = 0;
				for (int j = num12 - 20; j < num12 + 20; j++)
				{
					for (int k = num23 - 20; k < num23 + 20; k++)
					{
						tile = Main.tile[j, k];
						if (!tile.active())
						{
							continue;
						}
						tile = Main.tile[j, k];
						if (tile.type != 237)
						{
							continue;
						}
						tile = Main.tile[j, k];
						if (tile.frameX == 18)
						{
							tile = Main.tile[j, k];
							if (tile.frameY == 0)
							{
								num25 = j;
								num26 = k;
							}
						}
					}
				}
				if (num25 <= 0 || num26 <= 0)
				{
					return;
				}
				int num27 = num26 - 15;
				int num28 = num26 - 15;
				for (int num29 = num26; num29 > num26 - 50; num29--)
				{
					if (WorldGen.SolidTile(num25, num29))
					{
						num27 = num29;
						break;
					}
				}
				for (int l = num26; l < num26 + 50; l++)
				{
					if (WorldGen.SolidTile(num25, l))
					{
						num28 = l;
						break;
					}
				}
				num26 = (num27 + num27 + num28) / 3;
				int num30 = NewNPC(GetBossSpawnSource(plr), num25 * 16 + 8, num26 * 16, 245);
				Main.npc[num30].target = plr;
				string typeName2 = Main.npc[num30].TypeName;
				if (Main.netMode == 0)
				{
					Main.NewText(Language.GetTextValue("Announcement.HasAwoken", typeName2), 175, 75);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", Main.npc[num30].GetTypeNetName()), new Color(175, 75, 255));
				}
				return;
			}
			catch
			{
				return;
			}
		case 370:
		{
			Player player2 = Main.player[plr];
			if (!player2.active || player2.dead)
			{
				return;
			}
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.bobber && projectile.owner == plr)
				{
					int num = NewNPC(GetBossSpawnSource(plr), (int)projectile.Center.X, (int)projectile.Center.Y + 100, 370);
					string typeName = Main.npc[num].TypeName;
					if (Main.netMode == 0)
					{
						Main.NewText(Language.GetTextValue("Announcement.HasAwoken", typeName), 175, 75);
					}
					else if (Main.netMode == 2)
					{
						ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", Main.npc[num].GetTypeNetName()), new Color(175, 75, 255));
					}
					break;
				}
			}
			return;
		}
		case 398:
			if (!AnyNPCs(Type))
			{
				Player player = Main.player[plr];
				NewNPC(GetBossSpawnSource(plr), (int)player.Center.X, (int)player.Center.Y - 150, Type);
				if (Main.netMode == 0)
				{
					Main.NewText(Language.GetTextValue("Announcement.HasAwoken", Language.GetTextValue("Enemies.MoonLord")), 175, 75);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", NetworkText.FromKey("Enemies.MoonLord")), new Color(175, 75, 255));
				}
			}
			return;
		}
		bool flag = false;
		int num2 = 0;
		int num3 = 0;
		int num4 = (int)(Main.player[plr].position.X / 16f) - spawnRangeX * 2;
		int num5 = (int)(Main.player[plr].position.X / 16f) + spawnRangeX * 2;
		int num6 = (int)(Main.player[plr].position.Y / 16f) - spawnRangeY * 2;
		int num7 = (int)(Main.player[plr].position.Y / 16f) + spawnRangeY * 2;
		int num8 = (int)(Main.player[plr].position.X / 16f) - safeRangeX;
		int num9 = (int)(Main.player[plr].position.X / 16f) + safeRangeX;
		int num10 = (int)(Main.player[plr].position.Y / 16f) - safeRangeY;
		int num11 = (int)(Main.player[plr].position.Y / 16f) + safeRangeY;
		if (num4 < 0)
		{
			num4 = 0;
		}
		if (num5 > Main.maxTilesX)
		{
			num5 = Main.maxTilesX;
		}
		if (num6 < 0)
		{
			num6 = 0;
		}
		if (num7 > Main.maxTilesY)
		{
			num7 = Main.maxTilesY;
		}
		Rectangle rectangle = default(Rectangle);
		Rectangle rectangle2 = default(Rectangle);
		for (int m = 0; m < 1000; m++)
		{
			for (int n = 0; n < 100; n++)
			{
				int num13 = Main.rand.Next(num4, num5);
				int num14 = Main.rand.Next(num6, num7);
				tile = Main.tile[num13, num14];
				if (tile.nactive())
				{
					bool[] tileSolid = Main.tileSolid;
					tile = Main.tile[num13, num14];
					if (tileSolid[tile.type])
					{
						goto IL_085c;
					}
				}
				bool[] wallHouse = Main.wallHouse;
				tile = Main.tile[num13, num14];
				if (wallHouse[tile.wall] && m < 999)
				{
					continue;
				}
				if (Type == 50 && m < 500)
				{
					tile = Main.tile[num14, num14];
					if (tile.wall > 0)
					{
						continue;
					}
				}
				for (int num15 = num14; num15 < Main.maxTilesY; num15++)
				{
					tile = Main.tile[num13, num15];
					if (!tile.nactive())
					{
						continue;
					}
					bool[] tileSolid2 = Main.tileSolid;
					tile = Main.tile[num13, num15];
					if (tileSolid2[tile.type])
					{
						if ((num13 < num8 || num13 > num9 || num15 < num10 || num15 > num11 || m == 999) && ((num13 >= num4 && num13 <= num5 && num15 >= num6 && num15 <= num7) || m == 999))
						{
							tile = Main.tile[num13, num15];
							_ = ref tile.type;
							num2 = num13;
							num3 = num15;
							flag = true;
						}
						break;
					}
				}
				if (flag && Type == 50 && m < 900)
				{
					int num16 = 20;
					if (!Collision.CanHit(new Vector2((float)num2, (float)(num3 - 1)) * 16f, 16, 16, new Vector2((float)num2, (float)(num3 - 1 - num16)) * 16f, 16, 16) || !Collision.CanHit(new Vector2((float)num2, (float)(num3 - 1 - num16)) * 16f, 16, 16, Main.player[plr].Center, 0, 0))
					{
						num2 = 0;
						num3 = 0;
						flag = false;
					}
				}
				if (flag && m < 999)
				{
					int num17 = num2 - spawnSpaceX / 2;
					int num18 = num2 + spawnSpaceX / 2;
					int num19 = num3 - spawnSpaceY;
					int num20 = num3;
					if (num17 < 0)
					{
						flag = false;
					}
					if (num18 > Main.maxTilesX)
					{
						flag = false;
					}
					if (num19 < 0)
					{
						flag = false;
					}
					if (num20 > Main.maxTilesY)
					{
						flag = false;
					}
					if (flag)
					{
						for (int num21 = num17; num21 < num18; num21++)
						{
							for (int num22 = num19; num22 < num20; num22++)
							{
								tile = Main.tile[num21, num22];
								if (tile.nactive())
								{
									bool[] tileSolid3 = Main.tileSolid;
									tile = Main.tile[num21, num22];
									if (tileSolid3[tile.type])
									{
										flag = false;
										break;
									}
								}
							}
						}
					}
				}
				goto IL_085c;
				IL_085c:
				if (flag || flag)
				{
					break;
				}
			}
			if (flag && m < 999)
			{
				((Rectangle)(ref rectangle))._002Ector(num2 * 16, num3 * 16, 16, 16);
				for (int num24 = 0; num24 < 255; num24++)
				{
					if (Main.player[num24].active)
					{
						((Rectangle)(ref rectangle2))._002Ector((int)(Main.player[num24].position.X + (float)(Main.player[num24].width / 2) - (float)(sWidth / 2) - (float)safeRangeX), (int)(Main.player[num24].position.Y + (float)(Main.player[num24].height / 2) - (float)(sHeight / 2) - (float)safeRangeY), sWidth + safeRangeX * 2, sHeight + safeRangeY * 2);
						if (((Rectangle)(ref rectangle)).Intersects(rectangle2))
						{
							flag = false;
						}
					}
				}
			}
			if (flag)
			{
				break;
			}
		}
		if (flag)
		{
			int spawnPositionX = num2 * 16 + 8;
			int spawnPositionY = num3 * 16;
			SpawnBoss(spawnPositionX, spawnPositionY, Type, plr);
		}
	}

	public static int GetAvailableAmountOfNPCsToSpawnUpToSlot(int amountWeWant, int highestNPCSlotIndexWeWillPick = 100)
	{
		if (amountWeWant <= 0)
		{
			return 0;
		}
		int num = 0;
		for (int i = 0; i < highestNPCSlotIndexWeWillPick; i++)
		{
			if (!Main.npc[i].active)
			{
				num++;
				if (num >= amountWeWant)
				{
					return amountWeWant;
				}
			}
		}
		return num;
	}

	public static IEntitySource GetBossSpawnSource(int targetPlayerIndex)
	{
		return new EntitySource_BossSpawn(Main.player[targetPlayerIndex]);
	}

	public static void SpawnBoss(int spawnPositionX, int spawnPositionY, int Type, int targetPlayerIndex)
	{
		//IL_015c: Unknown result type (might be due to invalid IL or missing references)
		//IL_020c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0270: Unknown result type (might be due to invalid IL or missing references)
		int num = 200;
		if (Type == 127 && mechQueen != -1)
		{
			num = (mechQueen = NewNPC(GetBossSpawnSource(targetPlayerIndex), spawnPositionX, spawnPositionY, Type, 100));
			Main.npc[mechQueen].ai[3] = mechQueen;
		}
		else
		{
			num = NewNPC(GetBossSpawnSource(targetPlayerIndex), spawnPositionX, spawnPositionY, Type, 1);
		}
		if (num == 200)
		{
			return;
		}
		Main.npc[num].target = targetPlayerIndex;
		Main.npc[num].timeLeft *= 20;
		string typeName = Main.npc[num].TypeName;
		if (Main.netMode == 2 && num < 200)
		{
			NetMessage.SendData(23, -1, -1, null, num);
		}
		if (Type == 134 || Type == 127 || Type == 126 || Type == 125)
		{
			AchievementsHelper.CheckMechaMayhem();
		}
		if (Type == 127 && mechQueen == num)
		{
			if (Main.netMode == 0)
			{
				Main.NewText(Lang.misc[107].Value, 175, 75);
			}
			else if (Main.netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(Lang.misc[107].ToNetworkText(), new Color(175, 75, 255));
			}
			return;
		}
		switch (Type)
		{
		case 125:
			if (Main.netMode == 0)
			{
				Main.NewText(Lang.misc[48].Value, 175, 75);
			}
			else if (Main.netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(Lang.misc[48].ToNetworkText(), new Color(175, 75, 255));
			}
			return;
		case 50:
		case 82:
		case 126:
		case 316:
		case 398:
		case 551:
		case 662:
			return;
		}
		if (Main.netMode == 0)
		{
			Main.NewText(Language.GetTextValue("Announcement.HasAwoken", typeName), 175, 75);
		}
		else if (Main.netMode == 2)
		{
			ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", Main.npc[num].GetTypeNetName()), new Color(175, 75, 255));
		}
	}

	/// <summary>
	/// Spawns an NPC into the game world with the given type. <br />
	/// This method should not be called on multiplayer clients. <br />
	/// The X and Y parameters dictate the centered spawn position. <br />
	/// <c>&gt;ai0, ai1, ai2, ai3</c> will initialize the NPC.ai[] array with the supplied values. This can be used to pass in information to the NPC. The NPC AI code will have to be written to utilize those values. <br />
	/// </summary>
	/// <param name="source"></param>
	/// <param name="X"></param>
	/// <param name="Y"></param>
	/// <param name="Type">Either an <see cref="T:Terraria.ID.NPCID" /> entry or <see cref="M:Terraria.ModLoader.ModContent.NPCType``1" />, for example <see cref="F:Terraria.ID.NPCID.BabySlime" /> or <c>ModContent.NPCType&lt;MyModNPC&gt;()</c></param>
	/// <param name="Start">The lowest slot in which this NPC can spawn. This can be used to ensure that the spawned NPC draws behind an existing NPC. This is useful for bosses that spawn minions. </param>
	/// <param name="ai0"></param>
	/// <param name="ai1"></param>
	/// <param name="ai2"></param>
	/// <param name="ai3"></param>
	/// <param name="Target">Optionally, provide a <c>Player.whoAmI</c> to set <see cref="F:Terraria.NPC.target" /> to a specific Player immediately on spawn.</param>
	/// <returns>The index of the spawned NPC within the <see cref="F:Terraria.Main.npc" /> array</returns>
	public static int NewNPC(IEntitySource source, int X, int Y, int Type, int Start = 0, float ai0 = 0f, float ai1 = 0f, float ai2 = 0f, float ai3 = 0f, int Target = 255)
	{
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c6: Unknown result type (might be due to invalid IL or missing references)
		if (Main.getGoodWorld && Main.rand.Next(3) != 0)
		{
			if (Type == 46)
			{
				Type = 614;
			}
			if (Type == 62)
			{
				Type = 66;
			}
		}
		int availableNPCSlot = GetAvailableNPCSlot(Type, Start);
		if (availableNPCSlot >= 0)
		{
			Main.npc[availableNPCSlot] = new NPC();
			Main.npc[availableNPCSlot].SetDefaults(Type);
			Main.npc[availableNPCSlot].whoAmI = availableNPCSlot;
			GiveTownUniqueDataToNPCsThatNeedIt(Type, availableNPCSlot);
			Main.npc[availableNPCSlot].position.X = X - Main.npc[availableNPCSlot].width / 2;
			Main.npc[availableNPCSlot].position.Y = Y - Main.npc[availableNPCSlot].height;
			Main.npc[availableNPCSlot].active = true;
			Main.npc[availableNPCSlot].timeLeft = (int)((double)activeTime * 1.25);
			Main.npc[availableNPCSlot].wet = Collision.WetCollision(Main.npc[availableNPCSlot].position, Main.npc[availableNPCSlot].width, Main.npc[availableNPCSlot].height);
			Main.npc[availableNPCSlot].ai[0] = ai0;
			Main.npc[availableNPCSlot].ai[1] = ai1;
			Main.npc[availableNPCSlot].ai[2] = ai2;
			Main.npc[availableNPCSlot].ai[3] = ai3;
			Main.npc[availableNPCSlot].target = Target;
			if (Type == 50)
			{
				if (Main.netMode == 0)
				{
					Main.NewText(Language.GetTextValue("Announcement.HasAwoken", Main.npc[availableNPCSlot].TypeName), 175, 75);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", Main.npc[availableNPCSlot].GetTypeNetName()), new Color(175, 75, 255));
				}
			}
			NPCLoader.OnSpawn(Main.npc[availableNPCSlot], source);
			return availableNPCSlot;
		}
		return 200;
	}

	private static int GetAvailableNPCSlot(int Type, int startIndex)
	{
		bool num3 = Type >= 0 && NPCID.Sets.SpawnFromLastEmptySlot[Type];
		int t = 200;
		int num2 = 1;
		if (num3)
		{
			t--;
			Utils.Swap(ref startIndex, ref t);
			num2 = -1;
		}
		for (int i = startIndex; i != t; i += num2)
		{
			if (!Main.npc[i].active)
			{
				return i;
			}
		}
		for (int j = startIndex; j != t; j += num2)
		{
			if (Main.npc[j].CanBeReplacedByOtherNPCs)
			{
				return j;
			}
		}
		return -1;
	}

	private static void GiveTownUniqueDataToNPCsThatNeedIt(int Type, int nextNPC)
	{
		NPC nPC = Main.npc[nextNPC];
		if (nPC.isLikeATownNPC || (Type >= 0 && NPCID.Sets.SpawnsWithCustomName[Type]))
		{
			nPC.GivenName = nPC.getNewNPCName();
			if (TownNPCProfiles.Instance.GetProfile(nPC, out var profile))
			{
				nPC.townNpcVariationIndex = profile.RollVariation();
				nPC.GivenName = profile.GetNameForVariant(nPC);
			}
			if (ShimmeredTownNPCs[Type])
			{
				nPC.townNpcVariationIndex = 1;
			}
			nPC.needsUniqueInfoUpdate = true;
		}
	}

	public static void UnlockOrExchangePet(ref bool petBoughtFlag, int npcType, string textKeyForLicense, int netMessageData)
	{
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		Color color = default(Color);
		((Color)(ref color))._002Ector(50, 255, 130);
		if (Main.netMode == 1)
		{
			if (!petBoughtFlag || AnyNPCs(npcType))
			{
				NetMessage.SendData(61, -1, -1, null, Main.myPlayer, netMessageData);
			}
		}
		else if (!petBoughtFlag)
		{
			petBoughtFlag = true;
			ChatHelper.BroadcastChatMessage(NetworkText.FromKey(textKeyForLicense), color);
			NetMessage.TrySendData(7);
		}
		else if (RerollVariationForNPCType(npcType))
		{
			ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Misc.PetExchangeSuccess"), color);
		}
		else
		{
			ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Misc.PetExchangeFail"), color);
		}
	}

	public static bool RerollVariationForNPCType(int npcType)
	{
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = Main.npc[i];
			if (nPC.active && nPC.type == npcType)
			{
				return nPC.RerollVariation();
			}
		}
		return false;
	}

	public bool RerollVariation()
	{
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		if (!TownNPCProfiles.Instance.GetProfile(this, out var profile))
		{
			return false;
		}
		int num = townNpcVariationIndex;
		int num2 = 0;
		while (num2++ < 100 && townNpcVariationIndex == num)
		{
			townNpcVariationIndex = profile.RollVariation();
		}
		if (num == townNpcVariationIndex)
		{
			return false;
		}
		GivenName = profile.GetNameForVariant(this);
		life = lifeMax;
		if (Main.netMode != 1)
		{
			ParticleOrchestraSettings particleOrchestraSettings = default(ParticleOrchestraSettings);
			particleOrchestraSettings.PositionInWorld = base.Center;
			particleOrchestraSettings.MovementVector = velocity;
			ParticleOrchestraSettings settings = particleOrchestraSettings;
			ParticleOrchestrator.BroadcastParticleSpawn(ParticleOrchestraType.PetExchange, settings);
		}
		NetMessage.TrySendData(56, -1, -1, null, whoAmI);
		return true;
	}

	public void TransformVisuals(int oldType, int newType)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_014f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0154: Unknown result type (might be due to invalid IL or missing references)
		//IL_0549: Unknown result type (might be due to invalid IL or missing references)
		//IL_054f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0554: Unknown result type (might be due to invalid IL or missing references)
		//IL_0559: Unknown result type (might be due to invalid IL or missing references)
		//IL_0179: Unknown result type (might be due to invalid IL or missing references)
		//IL_019c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_020c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0212: Unknown result type (might be due to invalid IL or missing references)
		//IL_0229: Unknown result type (might be due to invalid IL or missing references)
		//IL_022f: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02df: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0302: Unknown result type (might be due to invalid IL or missing references)
		//IL_0307: Unknown result type (might be due to invalid IL or missing references)
		//IL_030c: Unknown result type (might be due to invalid IL or missing references)
		//IL_030e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0310: Unknown result type (might be due to invalid IL or missing references)
		//IL_031a: Unknown result type (might be due to invalid IL or missing references)
		//IL_031f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0324: Unknown result type (might be due to invalid IL or missing references)
		//IL_032b: Unknown result type (might be due to invalid IL or missing references)
		//IL_032d: Unknown result type (might be due to invalid IL or missing references)
		//IL_035a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0366: Unknown result type (might be due to invalid IL or missing references)
		//IL_036b: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0400: Unknown result type (might be due to invalid IL or missing references)
		//IL_0406: Unknown result type (might be due to invalid IL or missing references)
		//IL_0448: Unknown result type (might be due to invalid IL or missing references)
		//IL_045a: Unknown result type (might be due to invalid IL or missing references)
		//IL_045f: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_04da: Unknown result type (might be due to invalid IL or missing references)
		//IL_051c: Unknown result type (might be due to invalid IL or missing references)
		//IL_052e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0533: Unknown result type (might be due to invalid IL or missing references)
		position += netOffset;
		if ((oldType == 158 && newType == 159) || (oldType == 159 && newType == 158))
		{
			SoundEngine.PlaySound(in SoundID.Item8, position);
			int num = Gore.NewGore(new Vector2(position.X, position.Y - 10f), velocity, 99, scale);
			Gore obj = Main.gore[num];
			obj.velocity *= 0.3f;
			num = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), velocity, 99, scale);
			Gore obj2 = Main.gore[num];
			obj2.velocity *= 0.3f;
			num = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 10f), velocity, 99, scale);
			Gore obj3 = Main.gore[num];
			obj3.velocity *= 0.3f;
		}
		else if (oldType == 478 && newType == 479)
		{
			for (int i = 0; i < 30; i++)
			{
				int num2 = Dust.NewDust(position, width, height, 238, 0f, -2f);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num2].noGravity = true;
				}
			}
			Gore.NewGore(position, velocity, 684, scale);
			Gore.NewGore(position, velocity, 685, scale);
			Gore.NewGore(position, velocity, 686, scale);
			Gore.NewGore(position, velocity, 684 + Main.rand.Next(3), scale);
		}
		else if (oldType == 406 && newType == 405)
		{
			float num3 = Main.rand.Next(10, 21);
			float num4 = (float)Math.PI * 2f * Main.rand.NextFloat();
			Vector2 vector = default(Vector2);
			((Vector2)(ref vector))._002Ector(22f, 22f);
			for (float num5 = 0f; num5 < num3; num5 += 1f)
			{
				Dust dust = Main.dust[Dust.NewDust(base.Center, 0, 0, 229)];
				Vector2 vector2 = Vector2.UnitY.RotatedBy(num5 * ((float)Math.PI * 2f) / num3 + num4);
				dust.position = base.Center + vector2 * vector / 2f;
				dust.velocity = vector2;
				dust.noGravity = true;
				dust.scale = 0.6f + Main.rand.NextFloat() * 1.8f;
				dust.velocity *= dust.scale;
				dust.fadeIn = Main.rand.NextFloat() * 2f;
			}
		}
		if (oldType == 428 && newType == 427)
		{
			for (int j = 0; j < 20; j++)
			{
				int num6 = Utils.SelectRandom<int>(Main.rand, 229, 240);
				Dust dust2 = Main.dust[Dust.NewDust(position, width, height, num6)];
				dust2.noGravity = true;
				dust2.scale = 0.6f + Main.rand.NextFloat() * 1.8f;
				dust2.fadeIn = 0.25f;
				dust2.velocity *= dust2.scale / 2f;
			}
		}
		if (oldType == 427 && newType == 426)
		{
			for (int k = 0; k < 30; k++)
			{
				int num7 = Utils.SelectRandom<int>(Main.rand, 229, 240, 240);
				Dust dust3 = Main.dust[Dust.NewDust(position, width, height, num7)];
				dust3.noGravity = true;
				dust3.scale = 0.6f + Main.rand.NextFloat() * 1.8f;
				dust3.fadeIn = 0.25f;
				dust3.velocity *= dust3.scale * 0.75f;
			}
		}
		position -= netOffset;
	}

	public void Teleport(Vector2 newPos, int Style = 0, int extraInfo = 0)
	{
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		int extraInfo2 = 0;
		if (Style == 4)
		{
			extraInfo2 = lastPortalColorIndex;
		}
		float dustCountMult = ((teleportTime > 0f) ? 0.3f : 1f);
		Vector2 otherPosition = position;
		Main.TeleportEffect(getRect(), Style, extraInfo2, dustCountMult, TeleportationSide.Entry, newPos);
		position = newPos;
		if (Style == 4)
		{
			lastPortalColorIndex = extraInfo;
			extraInfo2 = lastPortalColorIndex;
		}
		Main.TeleportEffect(getRect(), Style, extraInfo2, dustCountMult, TeleportationSide.Exit, otherPosition);
		teleportTime = 1f;
		teleportStyle = Style;
		if (Main.netMode == 2 && Style != 4)
		{
			NetMessage.SendData(65, -1, -1, null, 1, whoAmI, newPos.X, newPos.Y, Style);
		}
	}

	public void Transform(int newType)
	{
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
		if (Main.netMode != 1)
		{
			int num = extraValue;
			bool flag = false;
			if (value == 0f)
			{
				flag = true;
			}
			int[] array = new int[maxBuffs];
			int[] array2 = new int[maxBuffs];
			for (int i = 0; i < maxBuffs; i++)
			{
				array[i] = buffType[i];
				array2[i] = buffTime[i];
			}
			float num2 = shimmerTransparency;
			_ = height;
			int oldType = type;
			int num3 = life;
			int num4 = lifeMax;
			Vector2 vector = velocity;
			position.Y += height;
			int num5 = spriteDirection;
			bool spawnedFromStatue = SpawnedFromStatue;
			SetDefaultsKeepPlayerInteraction(newType);
			SpawnedFromStatue = spawnedFromStatue;
			spriteDirection = num5;
			TargetClosest();
			velocity = vector;
			position.Y -= height;
			for (int j = 0; j < maxBuffs; j++)
			{
				buffType[j] = array[j];
				buffTime[j] = array2[j];
			}
			if (flag)
			{
				value = 0f;
			}
			if (lifeMax == num4)
			{
				life = num3;
			}
			shimmerTransparency = num2;
			switch (newType)
			{
			case 107:
			case 108:
			case 124:
			case 353:
			case 369:
			case 550:
			case 588:
			case 679:
			case 680:
			case 683:
			case 684:
				UpdateHomeTileState(homeless: true, (int)(position.X + (float)(width / 2)) / 16, (int)(position.Y + (float)height) / 16);
				break;
			}
			extraValue = num;
			if (Main.netMode == 2)
			{
				netUpdate = true;
				NetMessage.SendData(23, -1, -1, null, whoAmI);
				NetMessage.SendData(54, -1, -1, null, whoAmI);
			}
			TransformVisuals(oldType, newType);
			GiveTownUniqueDataToNPCsThatNeedIt(type, whoAmI);
			if (townNPC)
			{
				homeless = true;
				WorldGen.CheckAchievement_RealEstateAndTownSlimes();
			}
			altTexture = 0;
		}
	}

	internal int StrikeNPCNoInteraction(int Damage, float knockBack, int hitDirection)
	{
		return StrikeNPC(Damage, knockBack, hitDirection, crit: false, fromNet: false, noPlayerInteraction: true);
	}

	internal int StrikeNPC(int Damage, float knockBack, int hitDirection, bool crit = false, bool fromNet = false, bool noPlayerInteraction = false)
	{
		return StrikeNPC(CalculateStrikeFromLegacyValues(Damage, knockBack, hitDirection, crit), fromNet, noPlayerInteraction);
	}

	internal HitInfo CalculateStrikeFromLegacyValues(int Damage, float knockBack, int hitDirection, bool crit)
	{
		HitInfo hit;
		if (Damage == 9999)
		{
			HitInfo hitInfo = new HitInfo();
			hitInfo.Crit = crit;
			hitInfo.Knockback = knockBack;
			hitInfo.HitDirection = hitDirection;
			hitInfo.InstantKill = true;
			hit = hitInfo;
		}
		else
		{
			hit = GetIncomingStrikeModifiers(DamageClass.Default, hitDirection, ignoreArmorDebuffs: true).ToHitInfo(Damage, crit, knockBack);
		}
		NetMessage.SetLegacyStrike(hit);
		return hit;
	}

	/// <summary>
	/// Initializes a <see cref="T:Terraria.NPC.HitModifiers" /> calculation with the properties of this NPC, including calling <see cref="M:Terraria.ModLoader.NPCLoader.ModifyIncomingHit(Terraria.NPC,Terraria.NPC.HitModifiers@)" />
	/// </summary>
	/// <param name="damageType">The DamageType of the hit.</param>
	/// <param name="hitDirection">The direction to apply knockback. If 0, no knockback will be applied.</param>
	/// <param name="ignoreArmorDebuffs">Ignores <see cref="F:Terraria.NPC.ichor" /> and <see cref="F:Terraria.NPC.betsysCurse" />. Only used for legacy vanilla codepaths.</param>
	/// <returns></returns>
	public HitModifiers GetIncomingStrikeModifiers(DamageClass damageType, int hitDirection, bool ignoreArmorDebuffs = false)
	{
		HitModifiers hitModifiers = new HitModifiers();
		hitModifiers.DamageType = damageType;
		hitModifiers.HitDirection = hitDirection;
		hitModifiers.SuperArmor = SuperArmor;
		HitModifiers modifiers = hitModifiers;
		modifiers.FinalDamage *= takenDamageMultiplier;
		if (defense >= 0)
		{
			modifiers.Defense.Base += defense;
		}
		else
		{
			modifiers.FlatBonusDamage += (float)(-defense);
		}
		if (!ignoreArmorDebuffs)
		{
			if (ichor)
			{
				modifiers.Defense.Flat -= 15f;
			}
			if (betsysCurse)
			{
				modifiers.Defense.Flat -= 40f;
			}
		}
		if (onFire2)
		{
			modifiers.Knockback += 0.1f;
		}
		modifiers.Knockback *= knockBackResist;
		NPCLoader.ModifyIncomingHit(this, ref modifiers);
		return modifiers;
	}

	/// <summary>
	/// Runs <see cref="M:Terraria.ModLoader.NPCLoader.ModifyIncomingHit(Terraria.NPC,Terraria.NPC.HitModifiers@)" /> hooks and and does the full damage calculations. <br />
	/// The result <see cref="P:Terraria.NPC.HitInfo.Damage" /> will contain the health the NPC will lose when applied. <br />
	/// </summary>
	/// <param name="damage">The damage to deal to the NPC, before modifications, defense, resistances etc</param>
	/// <param name="hitDirection">The hit direction of the resulting strike (1 or -1)</param>
	/// <param name="crit">Defaults to false</param>
	/// <param name="knockBack">Defaults to 0</param>
	/// <param name="damageType">Defaults to <see cref="P:Terraria.ModLoader.DamageClass.Default" /></param>
	/// <param name="damageVariation">Whether to apply damage variation. Defaults to false.</param>
	/// <param name="luck">Luck modifier to produce weight damageVariation towards higher (positive) or lower (negative) values. Defaults to 0</param>
	/// <returns>A <see cref="T:Terraria.NPC.HitInfo" /> for use with <see cref="M:Terraria.NPC.StrikeNPC(Terraria.NPC.HitInfo,System.Boolean,System.Boolean)" /> and <see cref="M:Terraria.NetMessage.SendStrikeNPC(Terraria.NPC,Terraria.NPC.HitInfo@,System.Int32)" /></returns>
	public HitInfo CalculateHitInfo(int damage, int hitDirection, bool crit = false, float knockBack = 0f, DamageClass damageType = null, bool damageVariation = false, float luck = 0f)
	{
		return GetIncomingStrikeModifiers(damageType, hitDirection).ToHitInfo(damage, crit, knockBack, damageVariation, luck);
	}

	/// <summary>
	/// Calls <see cref="M:Terraria.NPC.CalculateHitInfo(System.Int32,System.Int32,System.Boolean,System.Single,Terraria.ModLoader.DamageClass,System.Boolean,System.Single)" />, <see cref="M:Terraria.NPC.StrikeNPC(Terraria.NPC.HitInfo,System.Boolean,System.Boolean)" /> and then <see cref="M:Terraria.NetMessage.SendStrikeNPC(Terraria.NPC,Terraria.NPC.HitInfo@,System.Int32)" /> (in multiplayer) <br />
	/// </summary>
	/// <param name="damage">The damage to deal to the NPC, before modifications, defense, resistances etc</param>
	/// <param name="hitDirection">The hit direction of the resulting strike (1 or -1)</param>
	/// <param name="crit">Defaults to false</param>
	/// <param name="knockBack">Defaults to 0</param>
	/// <param name="damageType">Defaults to <see cref="P:Terraria.ModLoader.DamageClass.Default" /></param>
	/// <param name="damageVariation">Whether to apply damage variation. Defaults to false.</param>
	/// <param name="luck">Luck modifier to produce weight damageVariation towards higher (positive) or lower (negative) values. Defaults to 0</param>
	/// <param name="noPlayerInteraction">Prevents <see cref="M:Terraria.NPC.PlayerInteraction(System.Int32)" /> from being called in single player. In multiplayer, player interaction is handled by the server.</param>
	/// <returns>The actual health lost by the NPC. Normally this is <see cref="P:Terraria.NPC.HitInfo.Damage" /> but it is capped at the current health of the NPC, and represents the actual damage dealt in the case of <see cref="F:Terraria.NPC.HitInfo.InstantKill" /> </returns>
	public int SimpleStrikeNPC(int damage, int hitDirection, bool crit = false, float knockBack = 0f, DamageClass damageType = null, bool damageVariation = false, float luck = 0f, bool noPlayerInteraction = false)
	{
		HitInfo hit = CalculateHitInfo(damage, hitDirection, crit, knockBack, damageType, damageVariation, luck);
		int result = StrikeNPC(hit, fromNet: false, noPlayerInteraction);
		if (Main.netMode != 0)
		{
			NetMessage.SendStrikeNPC(this, in hit);
		}
		return result;
	}

	/// <summary>
	/// Helper method for calling <see cref="M:Terraria.NPC.StrikeNPC(Terraria.NPC.HitInfo,System.Boolean,System.Boolean)" /> with a <see cref="F:Terraria.NPC.HitInfo.InstantKill" /> strike. <br />
	/// Use to butcher your own NPCs. <br />
	/// Not recommended for use on multiplayer clients because the net packet will trigger <see cref="M:Terraria.NPC.PlayerInteraction(System.Int32)" /> on the server.
	/// </summary>
	public void StrikeInstantKill()
	{
		HitInfo hitInfo = new HitInfo();
		hitInfo.InstantKill = true;
		HitInfo hit = hitInfo;
		StrikeNPC(hit, fromNet: false, noPlayerInteraction: true);
		if (Main.netMode != 0)
		{
			NetMessage.SendStrikeNPC(this, in hit);
		}
	}

	/// <summary>
	/// Directly deals damage to the NPC, spawns combat text, plays hit sound, deals knockback based on the provided <see cref="T:Terraria.NPC.HitInfo" /><br />
	/// Calls <see cref="M:Terraria.NPC.HitEffect(Terraria.NPC.HitInfo)" /> and associated hooks after dealing damage.<br />
	/// Calls <see cref="M:Terraria.NPC.checkDead" /><br />
	/// Does not automatically send packets. Use <see cref="M:Terraria.NetMessage.SendStrikeNPC(Terraria.NPC,Terraria.NPC.HitInfo@,System.Int32)" /> to synchronize hits.
	/// </summary>
	/// <param name="hit">The parameters of the hit. Normally obtained via <see cref="T:Terraria.NPC.HitModifiers" /> or <see cref="M:Terraria.NPC.CalculateHitInfo(System.Int32,System.Int32,System.Boolean,System.Single,Terraria.ModLoader.DamageClass,System.Boolean,System.Single)" /></param>
	/// <param name="fromNet">true if this strike came from another client over the network. Just changes the combat text to be darker in color.</param>
	/// <param name="noPlayerInteraction">Prevents <see cref="M:Terraria.NPC.PlayerInteraction(System.Int32)" /> from being called in single player. In multiplayer, player interaction is handled by the server.</param>
	/// <returns>The actual health lost by the NPC. Normally this is <see cref="P:Terraria.NPC.HitInfo.Damage" /> but it is capped at the current health of the NPC, and represents the actual damage dealt in the case of <see cref="F:Terraria.NPC.HitInfo.InstantKill" /> </returns>
	public int StrikeNPC(HitInfo hit, bool fromNet = false, bool noPlayerInteraction = false)
	{
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0131: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_0438: Unknown result type (might be due to invalid IL or missing references)
		//IL_043e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0846: Unknown result type (might be due to invalid IL or missing references)
		bool flag = Main.netMode == 0;
		flag = flag && !noPlayerInteraction;
		if (!active || life <= 0)
		{
			return 0;
		}
		double num = hit.Damage;
		bool crit = hit.Crit;
		int hitDirection = hit.HitDirection;
		if (hit.InstantKill)
		{
			num = ((realLife > 0) ? Main.npc[realLife].life : life);
		}
		if (!hit.HideCombatText && !hit.InstantKill && lifeMax > 1 && !HideStrikeDamage)
		{
			if (friendly)
			{
				Color color = (crit ? CombatText.DamagedFriendlyCrit : CombatText.DamagedFriendly);
				CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), color, (int)num, crit);
			}
			else
			{
				Color color2 = (crit ? CombatText.DamagedHostileCrit : CombatText.DamagedHostile);
				if (fromNet)
				{
					color2 = (crit ? CombatText.OthersDamagedHostileCrit : CombatText.OthersDamagedHostile);
				}
				CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), color2, (int)num, crit);
			}
		}
		if (num >= 1.0)
		{
			if (flag)
			{
				PlayerInteraction(Main.myPlayer);
			}
			justHit = true;
			if ((type == 438 || type == 379) && Main.netMode != 1)
			{
				int num2 = (int)(0f - ai[3] - 1f);
				if (num2 > -1 && Main.npc[num2].localAI[0] == 0f)
				{
					Main.npc[num2].localAI[0] = 1f;
				}
			}
			if (townNPC)
			{
				if (aiStyle == 7 && (ai[0] == 3f || ai[0] == 4f || ai[0] == 16f || ai[0] == 17f))
				{
					NPC nPC = Main.npc[(int)ai[2]];
					if (nPC.active)
					{
						nPC.ai[0] = 1f;
						nPC.ai[1] = 300 + Main.rand.Next(300);
						nPC.ai[2] = 0f;
						nPC.localAI[3] = 0f;
						nPC.direction = hitDirection;
						nPC.netUpdate = true;
					}
				}
				ai[0] = 1f;
				ai[1] = 300 + Main.rand.Next(300);
				ai[2] = 0f;
				localAI[3] = 0f;
				direction = hitDirection;
				netUpdate = true;
			}
			if (aiStyle == 8 && Main.netMode != 1)
			{
				if (type == 172)
				{
					ai[0] = 450f;
				}
				else if (type == 283 || type == 284)
				{
					if (Main.rand.Next(2) == 0)
					{
						ai[0] = 390f;
						netUpdate = true;
					}
				}
				else if (type == 533)
				{
					if (Main.rand.Next(3) != 0)
					{
						ai[0] = 181f;
						netUpdate = true;
					}
				}
				else
				{
					ai[0] = 400f;
				}
				TargetClosest();
			}
			if (aiStyle == 97 && Main.netMode != 1)
			{
				localAI[1] = 1f;
				TargetClosest();
			}
			if (type == 371)
			{
				num = 0.0;
				ai[0] = 1f;
				ai[1] = 4f;
				dontTakeDamage = true;
			}
			if (type == 346 && (double)life >= (double)lifeMax * 0.5 && (double)life - num < (double)lifeMax * 0.5)
			{
				Gore.NewGore(position, velocity, 517);
			}
			if (type == 184)
			{
				localAI[0] = 60f;
			}
			if (type == 535)
			{
				localAI[0] = 60f;
			}
			if (type == 185)
			{
				localAI[0] = 1f;
			}
			if (!immortal)
			{
				if (realLife >= 0)
				{
					Main.npc[realLife].life -= (int)num;
					life = Main.npc[realLife].life;
					lifeMax = Main.npc[realLife].lifeMax;
				}
				else
				{
					life -= (int)num;
				}
			}
			if (hit.Knockback > 0f)
			{
				float num3 = hit.Knockback;
				if (num3 > 8f)
				{
					float num4 = num3 - 8f;
					num4 *= 0.9f;
					num3 = 8f + num4;
				}
				if (num3 > 10f)
				{
					float num5 = num3 - 10f;
					num5 *= 0.8f;
					num3 = 10f + num5;
				}
				if (num3 > 12f)
				{
					float num6 = num3 - 12f;
					num6 *= 0.7f;
					num3 = 12f + num6;
				}
				if (num3 > 14f)
				{
					float num7 = num3 - 14f;
					num7 *= 0.6f;
					num3 = 14f + num7;
				}
				if (num3 > 16f)
				{
					num3 = 16f;
				}
				if (crit)
				{
					num3 *= 1.4f;
				}
				int num8 = (int)num * 10;
				if (Main.expertMode)
				{
					num8 = (int)num * 15;
				}
				if (num8 > lifeMax)
				{
					if (hitDirection < 0 && velocity.X > 0f - num3)
					{
						if (velocity.X > 0f)
						{
							velocity.X -= num3;
						}
						velocity.X -= num3;
						if (velocity.X < 0f - num3)
						{
							velocity.X = 0f - num3;
						}
					}
					else if (hitDirection > 0 && velocity.X < num3)
					{
						if (velocity.X < 0f)
						{
							velocity.X += num3;
						}
						velocity.X += num3;
						if (velocity.X > num3)
						{
							velocity.X = num3;
						}
					}
					if (type == 185)
					{
						num3 *= 1.5f;
					}
					num3 = (noGravity ? (num3 * -0.5f) : (num3 * -0.75f));
					if (velocity.Y > num3)
					{
						velocity.Y += num3;
						if (velocity.Y < num3)
						{
							velocity.Y = num3;
						}
					}
				}
				else
				{
					if (!noGravity)
					{
						velocity.Y = (0f - num3) * 0.75f * knockBackResist;
					}
					else
					{
						velocity.Y = (0f - num3) * 0.5f * knockBackResist;
					}
					velocity.X = num3 * (float)hitDirection * knockBackResist;
				}
			}
			if ((type == 113 || type == 114) && life <= 0)
			{
				for (int i = 0; i < 200; i++)
				{
					if (Main.npc[i].active && (Main.npc[i].type == 113 || Main.npc[i].type == 114))
					{
						Main.npc[i].HitEffect(hitDirection, num, hit.InstantKill);
					}
				}
			}
			else
			{
				HitEffect(hit);
			}
			if (HitSound.HasValue)
			{
				SoundEngine.PlaySound(HitSound, position);
			}
			if (realLife >= 0)
			{
				Main.npc[realLife].checkDead();
			}
			else
			{
				checkDead();
			}
			return (int)num;
		}
		return 0;
	}

	public static void LadyBugKilled(Vector2 Position, bool GoldLadyBug = false)
	{
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		Main.ladyBugRainBoost += ladyBugRainTime;
		if (Main.ladyBugRainBoost > (double)maximumAmountOfTimesLadyBugRainCanStack)
		{
			Main.ladyBugRainBoost = maximumAmountOfTimesLadyBugRainCanStack;
		}
		int myPlayer = Main.myPlayer;
		if (!Main.player[myPlayer].active || Main.player[myPlayer].dead)
		{
			return;
		}
		Vector2 vector = Position - Main.player[myPlayer].Center;
		int num = 400;
		if (((Vector2)(ref vector)).Length() < (float)num)
		{
			if (((Vector2)(ref vector)).Length() < 100f)
			{
				vector = default(Vector2);
			}
			double num2 = 1.0 - (double)((Vector2)(ref vector)).Length() / (double)num;
			int num3 = (int)((double)ladyBugBadLuckTime * num2);
			if (GoldLadyBug)
			{
				num3 *= 2;
			}
			if ((double)num3 < Main.player[myPlayer].ladyBugLuckTimeLeft)
			{
				Main.player[myPlayer].ladyBugLuckTimeLeft = num3;
				Main.player[myPlayer].luckNeedsSync = true;
			}
		}
	}

	private void LadyBugLuck(int plr, bool GoldLadyBug = false)
	{
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		if (releaseOwner != 255 || Main.player[plr].ladyBugLuckTimeLeft < 0.0)
		{
			return;
		}
		Vector2 vector = base.Center - Main.player[plr].Center;
		int num = 800;
		if (((Vector2)(ref vector)).Length() < (float)num)
		{
			if (((Vector2)(ref vector)).Length() < 30f)
			{
				vector = default(Vector2);
			}
			double x = 1.0 - (double)((Vector2)(ref vector)).Length() / (double)num;
			x = Math.Pow(x, 6.0);
			int num2 = (int)((double)ladyBugGoodLuckTime * x);
			if (GoldLadyBug)
			{
				num2 *= 2;
			}
			if ((double)num2 > Main.player[plr].ladyBugLuckTimeLeft)
			{
				Main.player[plr].ladyBugLuckTimeLeft = num2;
				Main.player[plr].luckNeedsSync = true;
			}
		}
	}

	private void NPCLuck()
	{
		int myPlayer = Main.myPlayer;
		if (type == 22)
		{
			if (Main.player[myPlayer].ladyBugLuckTimeLeft >= 0.0 && Main.player[myPlayer].active && !Main.player[myPlayer].dead)
			{
				int num = ladyBugGoodLuckTime / 3;
				if ((double)num > Main.player[myPlayer].ladyBugLuckTimeLeft)
				{
					Main.player[myPlayer].ladyBugLuckTimeLeft = num;
					Main.player[myPlayer].luckNeedsSync = true;
				}
			}
		}
		else if (type != 54 && Main.player[myPlayer].active && !Main.player[myPlayer].dead)
		{
			int num2 = ladyBugBadLuckTime / 3;
			if ((double)num2 < Main.player[myPlayer].ladyBugLuckTimeLeft)
			{
				Main.player[myPlayer].ladyBugLuckTimeLeft = num2;
				Main.player[myPlayer].luckNeedsSync = true;
			}
		}
	}

	public void HitEffect(int hitDirection = 0, double dmg = 10.0, bool? instantKill = null)
	{
		bool valueOrDefault = instantKill.GetValueOrDefault();
		if (!instantKill.HasValue)
		{
			valueOrDefault = dmg == 9999.0;
			instantKill = valueOrDefault;
		}
		HitEffect(new HitInfo
		{
			DamageType = DamageClass.Default,
			SourceDamage = (instantKill.Value ? 1 : ((int)dmg)),
			Damage = (instantKill.Value ? 1 : ((int)dmg)),
			Crit = false,
			HitDirection = hitDirection,
			Knockback = 0f,
			InstantKill = instantKill.Value
		});
	}

	public void HitEffect(HitInfo hit)
	{
		using (IEntitySource.PushFallback(thisEntitySourceCache))
		{
			VanillaHitEffect(hit.HitDirection, hit.Damage, hit.InstantKill);
			NPCLoader.HitEffect(this, in hit);
		}
	}

	private void VanillaHitEffect(int hitDirection, double dmg, bool instantKill)
	{
		//IL_0393: Unknown result type (might be due to invalid IL or missing references)
		//IL_0398: Unknown result type (might be due to invalid IL or missing references)
		//IL_0517: Unknown result type (might be due to invalid IL or missing references)
		//IL_051c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0521: Unknown result type (might be due to invalid IL or missing references)
		//IL_052b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0539: Unknown result type (might be due to invalid IL or missing references)
		//IL_053f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0541: Unknown result type (might be due to invalid IL or missing references)
		//IL_0546: Unknown result type (might be due to invalid IL or missing references)
		//IL_054b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0778: Unknown result type (might be due to invalid IL or missing references)
		//IL_077d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0782: Unknown result type (might be due to invalid IL or missing references)
		//IL_078c: Unknown result type (might be due to invalid IL or missing references)
		//IL_079a: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0419: Unknown result type (might be due to invalid IL or missing references)
		//IL_0423: Unknown result type (might be due to invalid IL or missing references)
		//IL_0428: Unknown result type (might be due to invalid IL or missing references)
		//IL_12031: Unknown result type (might be due to invalid IL or missing references)
		//IL_12049: Unknown result type (might be due to invalid IL or missing references)
		//IL_0555: Unknown result type (might be due to invalid IL or missing references)
		//IL_0566: Unknown result type (might be due to invalid IL or missing references)
		//IL_056b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0570: Unknown result type (might be due to invalid IL or missing references)
		//IL_0572: Unknown result type (might be due to invalid IL or missing references)
		//IL_0583: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0304: Unknown result type (might be due to invalid IL or missing references)
		//IL_0155: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_07cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_082e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0838: Unknown result type (might be due to invalid IL or missing references)
		//IL_083d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0241: Unknown result type (might be due to invalid IL or missing references)
		//IL_0247: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0211: Unknown result type (might be due to invalid IL or missing references)
		//IL_0217: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		//IL_018b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e65: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e70: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e75: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_05fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0604: Unknown result type (might be due to invalid IL or missing references)
		//IL_060e: Unknown result type (might be due to invalid IL or missing references)
		//IL_061c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0622: Unknown result type (might be due to invalid IL or missing references)
		//IL_0624: Unknown result type (might be due to invalid IL or missing references)
		//IL_0629: Unknown result type (might be due to invalid IL or missing references)
		//IL_063d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0642: Unknown result type (might be due to invalid IL or missing references)
		//IL_0647: Unknown result type (might be due to invalid IL or missing references)
		//IL_0649: Unknown result type (might be due to invalid IL or missing references)
		//IL_065a: Unknown result type (might be due to invalid IL or missing references)
		//IL_069b: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_06aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_032b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0331: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0271: Unknown result type (might be due to invalid IL or missing references)
		//IL_0277: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0da2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d40: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b63: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b72: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b75: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b96: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bad: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bca: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bea: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_09bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_09e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_09fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a13: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a18: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a32: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a38: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a42: Unknown result type (might be due to invalid IL or missing references)
		//IL_085b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0860: Unknown result type (might be due to invalid IL or missing references)
		//IL_0865: Unknown result type (might be due to invalid IL or missing references)
		//IL_086f: Unknown result type (might be due to invalid IL or missing references)
		//IL_087d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0883: Unknown result type (might be due to invalid IL or missing references)
		//IL_0885: Unknown result type (might be due to invalid IL or missing references)
		//IL_088a: Unknown result type (might be due to invalid IL or missing references)
		//IL_089e: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_08aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_08bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_08fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0906: Unknown result type (might be due to invalid IL or missing references)
		//IL_090b: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_06dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0701: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_130a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1310: Unknown result type (might be due to invalid IL or missing references)
		//IL_131a: Unknown result type (might be due to invalid IL or missing references)
		//IL_131f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1325: Unknown result type (might be due to invalid IL or missing references)
		//IL_133b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1341: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e81: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ea7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ead: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ef5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0efa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0efd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f11: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f16: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f39: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f43: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f57: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f70: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f84: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f89: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fac: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fca: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fe3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fe8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e28: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0caa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aee: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0afd: Unknown result type (might be due to invalid IL or missing references)
		//IL_049a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0364: Unknown result type (might be due to invalid IL or missing references)
		//IL_036a: Unknown result type (might be due to invalid IL or missing references)
		//IL_16dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_113f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1149: Unknown result type (might be due to invalid IL or missing references)
		//IL_114e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1151: Unknown result type (might be due to invalid IL or missing references)
		//IL_1160: Unknown result type (might be due to invalid IL or missing references)
		//IL_1165: Unknown result type (might be due to invalid IL or missing references)
		//IL_116a: Unknown result type (might be due to invalid IL or missing references)
		//IL_117e: Unknown result type (might be due to invalid IL or missing references)
		//IL_118d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1192: Unknown result type (might be due to invalid IL or missing references)
		//IL_1197: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_11bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1205: Unknown result type (might be due to invalid IL or missing references)
		//IL_120a: Unknown result type (might be due to invalid IL or missing references)
		//IL_121e: Unknown result type (might be due to invalid IL or missing references)
		//IL_122d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1232: Unknown result type (might be due to invalid IL or missing references)
		//IL_1237: Unknown result type (might be due to invalid IL or missing references)
		//IL_124b: Unknown result type (might be due to invalid IL or missing references)
		//IL_125a: Unknown result type (might be due to invalid IL or missing references)
		//IL_125f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1264: Unknown result type (might be due to invalid IL or missing references)
		//IL_1278: Unknown result type (might be due to invalid IL or missing references)
		//IL_1287: Unknown result type (might be due to invalid IL or missing references)
		//IL_128c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1291: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_12be: Unknown result type (might be due to invalid IL or missing references)
		//IL_15de: Unknown result type (might be due to invalid IL or missing references)
		//IL_149f: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_14d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_14f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_14fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1516: Unknown result type (might be due to invalid IL or missing references)
		//IL_151c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1526: Unknown result type (might be due to invalid IL or missing references)
		//IL_152b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1530: Unknown result type (might be due to invalid IL or missing references)
		//IL_1363: Unknown result type (might be due to invalid IL or missing references)
		//IL_1368: Unknown result type (might be due to invalid IL or missing references)
		//IL_1377: Unknown result type (might be due to invalid IL or missing references)
		//IL_1382: Unknown result type (might be due to invalid IL or missing references)
		//IL_1387: Unknown result type (might be due to invalid IL or missing references)
		//IL_13cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_13fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1406: Unknown result type (might be due to invalid IL or missing references)
		//IL_140b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1422: Unknown result type (might be due to invalid IL or missing references)
		//IL_1428: Unknown result type (might be due to invalid IL or missing references)
		//IL_1432: Unknown result type (might be due to invalid IL or missing references)
		//IL_1437: Unknown result type (might be due to invalid IL or missing references)
		//IL_143c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_111a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1120: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_10eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_105d: Unknown result type (might be due to invalid IL or missing references)
		//IL_107a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1080: Unknown result type (might be due to invalid IL or missing references)
		//IL_102a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1047: Unknown result type (might be due to invalid IL or missing references)
		//IL_104d: Unknown result type (might be due to invalid IL or missing references)
		//IL_17ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_17be: Unknown result type (might be due to invalid IL or missing references)
		//IL_17c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_181c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1821: Unknown result type (might be due to invalid IL or missing references)
		//IL_170d: Unknown result type (might be due to invalid IL or missing references)
		//IL_171d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1722: Unknown result type (might be due to invalid IL or missing references)
		//IL_177b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1780: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_162b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1631: Unknown result type (might be due to invalid IL or missing references)
		//IL_1648: Unknown result type (might be due to invalid IL or missing references)
		//IL_164e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a07: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a23: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a29: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_19c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_19cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1924: Unknown result type (might be due to invalid IL or missing references)
		//IL_192e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1933: Unknown result type (might be due to invalid IL or missing references)
		//IL_1944: Unknown result type (might be due to invalid IL or missing references)
		//IL_194a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1954: Unknown result type (might be due to invalid IL or missing references)
		//IL_1959: Unknown result type (might be due to invalid IL or missing references)
		//IL_195e: Unknown result type (might be due to invalid IL or missing references)
		//IL_183c: Unknown result type (might be due to invalid IL or missing references)
		//IL_185a: Unknown result type (might be due to invalid IL or missing references)
		//IL_166a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1688: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a80: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aec: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b23: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b54: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c07: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c23: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c29: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bad: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_4794: Unknown result type (might be due to invalid IL or missing references)
		//IL_479e: Unknown result type (might be due to invalid IL or missing references)
		//IL_47a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_47a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_47b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_47c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_473d: Unknown result type (might be due to invalid IL or missing references)
		//IL_475c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4762: Unknown result type (might be due to invalid IL or missing references)
		//IL_46e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4702: Unknown result type (might be due to invalid IL or missing references)
		//IL_4708: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c80: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ce6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cec: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d23: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d54: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d91: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_48a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_48a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_48a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_48ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_4808: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e37: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_48c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_48c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_48c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_48cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_48db: Unknown result type (might be due to invalid IL or missing references)
		//IL_48e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_48e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_48e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ec0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ec6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1efb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f01: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f36: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f73: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f79: Unknown result type (might be due to invalid IL or missing references)
		//IL_24bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_24de: Unknown result type (might be due to invalid IL or missing references)
		//IL_2065: Unknown result type (might be due to invalid IL or missing references)
		//IL_2081: Unknown result type (might be due to invalid IL or missing references)
		//IL_2087: Unknown result type (might be due to invalid IL or missing references)
		//IL_200b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2027: Unknown result type (might be due to invalid IL or missing references)
		//IL_202d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4988: Unknown result type (might be due to invalid IL or missing references)
		//IL_4990: Unknown result type (might be due to invalid IL or missing references)
		//IL_499a: Unknown result type (might be due to invalid IL or missing references)
		//IL_499f: Unknown result type (might be due to invalid IL or missing references)
		//IL_49c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_49c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_49ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_49eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_49f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_49fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_48fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4903: Unknown result type (might be due to invalid IL or missing references)
		//IL_490d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4912: Unknown result type (might be due to invalid IL or missing references)
		//IL_4933: Unknown result type (might be due to invalid IL or missing references)
		//IL_4935: Unknown result type (might be due to invalid IL or missing references)
		//IL_4941: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_22b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_22b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_22bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_2304: Unknown result type (might be due to invalid IL or missing references)
		//IL_2313: Unknown result type (might be due to invalid IL or missing references)
		//IL_2318: Unknown result type (might be due to invalid IL or missing references)
		//IL_231e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2335: Unknown result type (might be due to invalid IL or missing references)
		//IL_2344: Unknown result type (might be due to invalid IL or missing references)
		//IL_2349: Unknown result type (might be due to invalid IL or missing references)
		//IL_234f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2366: Unknown result type (might be due to invalid IL or missing references)
		//IL_2375: Unknown result type (might be due to invalid IL or missing references)
		//IL_237a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2380: Unknown result type (might be due to invalid IL or missing references)
		//IL_2397: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_23d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_23dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2408: Unknown result type (might be due to invalid IL or missing references)
		//IL_240d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2413: Unknown result type (might be due to invalid IL or missing references)
		//IL_242a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2439: Unknown result type (might be due to invalid IL or missing references)
		//IL_243e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2444: Unknown result type (might be due to invalid IL or missing references)
		//IL_245b: Unknown result type (might be due to invalid IL or missing references)
		//IL_246a: Unknown result type (might be due to invalid IL or missing references)
		//IL_246f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2475: Unknown result type (might be due to invalid IL or missing references)
		//IL_20b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_20cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_20fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_2115: Unknown result type (might be due to invalid IL or missing references)
		//IL_2124: Unknown result type (might be due to invalid IL or missing references)
		//IL_2129: Unknown result type (might be due to invalid IL or missing references)
		//IL_212f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2146: Unknown result type (might be due to invalid IL or missing references)
		//IL_2155: Unknown result type (might be due to invalid IL or missing references)
		//IL_215a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2160: Unknown result type (might be due to invalid IL or missing references)
		//IL_2177: Unknown result type (might be due to invalid IL or missing references)
		//IL_2186: Unknown result type (might be due to invalid IL or missing references)
		//IL_218b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2191: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_21bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_21f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_220a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2219: Unknown result type (might be due to invalid IL or missing references)
		//IL_221e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2224: Unknown result type (might be due to invalid IL or missing references)
		//IL_223b: Unknown result type (might be due to invalid IL or missing references)
		//IL_224a: Unknown result type (might be due to invalid IL or missing references)
		//IL_224f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2255: Unknown result type (might be due to invalid IL or missing references)
		//IL_226c: Unknown result type (might be due to invalid IL or missing references)
		//IL_227b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2280: Unknown result type (might be due to invalid IL or missing references)
		//IL_2286: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_26d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_26d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aac: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ad0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4af0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4af6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a70: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e34: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4be4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c04: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b60: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b84: Unknown result type (might be due to invalid IL or missing references)
		//IL_2550: Unknown result type (might be due to invalid IL or missing references)
		//IL_256c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2572: Unknown result type (might be due to invalid IL or missing references)
		//IL_2592: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_25ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_25ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_25b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_25cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_25da: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_25f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_25fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_260a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2610: Unknown result type (might be due to invalid IL or missing references)
		//IL_2626: Unknown result type (might be due to invalid IL or missing references)
		//IL_262d: Unknown result type (might be due to invalid IL or missing references)
		//IL_263a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2640: Unknown result type (might be due to invalid IL or missing references)
		//IL_2656: Unknown result type (might be due to invalid IL or missing references)
		//IL_265d: Unknown result type (might be due to invalid IL or missing references)
		//IL_266a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2670: Unknown result type (might be due to invalid IL or missing references)
		//IL_272e: Unknown result type (might be due to invalid IL or missing references)
		//IL_274a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2750: Unknown result type (might be due to invalid IL or missing references)
		//IL_2777: Unknown result type (might be due to invalid IL or missing references)
		//IL_2786: Unknown result type (might be due to invalid IL or missing references)
		//IL_278b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2790: Unknown result type (might be due to invalid IL or missing references)
		//IL_2792: Unknown result type (might be due to invalid IL or missing references)
		//IL_2799: Unknown result type (might be due to invalid IL or missing references)
		//IL_27a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_27bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_27d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_27d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2802: Unknown result type (might be due to invalid IL or missing references)
		//IL_2808: Unknown result type (might be due to invalid IL or missing references)
		//IL_281d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2824: Unknown result type (might be due to invalid IL or missing references)
		//IL_2831: Unknown result type (might be due to invalid IL or missing references)
		//IL_2837: Unknown result type (might be due to invalid IL or missing references)
		//IL_284c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2853: Unknown result type (might be due to invalid IL or missing references)
		//IL_2860: Unknown result type (might be due to invalid IL or missing references)
		//IL_2866: Unknown result type (might be due to invalid IL or missing references)
		//IL_2906: Unknown result type (might be due to invalid IL or missing references)
		//IL_2922: Unknown result type (might be due to invalid IL or missing references)
		//IL_2928: Unknown result type (might be due to invalid IL or missing references)
		//IL_28ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_28c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_28ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f81: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d34: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d56: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d86: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e94: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f40: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f72: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f78: Unknown result type (might be due to invalid IL or missing references)
		//IL_4faa: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fe2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fe8: Unknown result type (might be due to invalid IL or missing references)
		//IL_501a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5020: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d83: Unknown result type (might be due to invalid IL or missing references)
		//IL_4da3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4da9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d10: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d16: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c74: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c94: Unknown result type (might be due to invalid IL or missing references)
		//IL_5dc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_5deb: Unknown result type (might be due to invalid IL or missing references)
		//IL_5df1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4eb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ed3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ed9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f14: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f23: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4de8: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dee: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e29: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e33: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e38: Unknown result type (might be due to invalid IL or missing references)
		//IL_2963: Unknown result type (might be due to invalid IL or missing references)
		//IL_2969: Unknown result type (might be due to invalid IL or missing references)
		//IL_2998: Unknown result type (might be due to invalid IL or missing references)
		//IL_299e: Unknown result type (might be due to invalid IL or missing references)
		//IL_29cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_29d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a06: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a43: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ae3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aff: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b05: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b25: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b63: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b95: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c05: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a89: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aab: Unknown result type (might be due to invalid IL or missing references)
		//IL_5fa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_5fbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_5fd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_5fdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_5fe8: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ff8: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ffe: Unknown result type (might be due to invalid IL or missing references)
		//IL_6000: Unknown result type (might be due to invalid IL or missing references)
		//IL_6005: Unknown result type (might be due to invalid IL or missing references)
		//IL_6007: Unknown result type (might be due to invalid IL or missing references)
		//IL_6022: Unknown result type (might be due to invalid IL or missing references)
		//IL_602c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6031: Unknown result type (might be due to invalid IL or missing references)
		//IL_603e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6043: Unknown result type (might be due to invalid IL or missing references)
		//IL_514b: Unknown result type (might be due to invalid IL or missing references)
		//IL_516b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5171: Unknown result type (might be due to invalid IL or missing references)
		//IL_5217: Unknown result type (might be due to invalid IL or missing references)
		//IL_521d: Unknown result type (might be due to invalid IL or missing references)
		//IL_524f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5255: Unknown result type (might be due to invalid IL or missing references)
		//IL_5287: Unknown result type (might be due to invalid IL or missing references)
		//IL_528d: Unknown result type (might be due to invalid IL or missing references)
		//IL_52bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_52c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_52f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_52fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_532f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5335: Unknown result type (might be due to invalid IL or missing references)
		//IL_5060: Unknown result type (might be due to invalid IL or missing references)
		//IL_5080: Unknown result type (might be due to invalid IL or missing references)
		//IL_5086: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e97: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e99: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ebc: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ec2: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ef4: Unknown result type (might be due to invalid IL or missing references)
		//IL_5efe: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f03: Unknown result type (might be due to invalid IL or missing references)
		//IL_53e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_540d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5413: Unknown result type (might be due to invalid IL or missing references)
		//IL_5389: Unknown result type (might be due to invalid IL or missing references)
		//IL_53a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_53af: Unknown result type (might be due to invalid IL or missing references)
		//IL_5191: Unknown result type (might be due to invalid IL or missing references)
		//IL_51b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_51b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_51f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_51fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_5200: Unknown result type (might be due to invalid IL or missing references)
		//IL_50a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_50c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_50cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_5106: Unknown result type (might be due to invalid IL or missing references)
		//IL_5110: Unknown result type (might be due to invalid IL or missing references)
		//IL_5115: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c81: Unknown result type (might be due to invalid IL or missing references)
		//IL_61b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_61d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_61d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_60c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_60e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_60ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_6566: Unknown result type (might be due to invalid IL or missing references)
		//IL_6586: Unknown result type (might be due to invalid IL or missing references)
		//IL_658c: Unknown result type (might be due to invalid IL or missing references)
		//IL_644b: Unknown result type (might be due to invalid IL or missing references)
		//IL_646b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6471: Unknown result type (might be due to invalid IL or missing references)
		//IL_610a: Unknown result type (might be due to invalid IL or missing references)
		//IL_612d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6133: Unknown result type (might be due to invalid IL or missing references)
		//IL_616e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6178: Unknown result type (might be due to invalid IL or missing references)
		//IL_617d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5433: Unknown result type (might be due to invalid IL or missing references)
		//IL_5454: Unknown result type (might be due to invalid IL or missing references)
		//IL_5472: Unknown result type (might be due to invalid IL or missing references)
		//IL_5478: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d30: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d61: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d67: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d96: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e02: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e08: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e39: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e70: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e76: Unknown result type (might be due to invalid IL or missing references)
		//IL_6893: Unknown result type (might be due to invalid IL or missing references)
		//IL_68b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_68b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_698e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6994: Unknown result type (might be due to invalid IL or missing references)
		//IL_69c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_69cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_69fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a04: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a36: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a74: Unknown result type (might be due to invalid IL or missing references)
		//IL_6775: Unknown result type (might be due to invalid IL or missing references)
		//IL_6795: Unknown result type (might be due to invalid IL or missing references)
		//IL_679b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6494: Unknown result type (might be due to invalid IL or missing references)
		//IL_64b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_64bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_6514: Unknown result type (might be due to invalid IL or missing references)
		//IL_651e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6523: Unknown result type (might be due to invalid IL or missing references)
		//IL_621c: Unknown result type (might be due to invalid IL or missing references)
		//IL_623c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6242: Unknown result type (might be due to invalid IL or missing references)
		//IL_6288: Unknown result type (might be due to invalid IL or missing references)
		//IL_6292: Unknown result type (might be due to invalid IL or missing references)
		//IL_6297: Unknown result type (might be due to invalid IL or missing references)
		//IL_62b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_62bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_62c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_62dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_62e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_62ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_6302: Unknown result type (might be due to invalid IL or missing references)
		//IL_6308: Unknown result type (might be due to invalid IL or missing references)
		//IL_6312: Unknown result type (might be due to invalid IL or missing references)
		//IL_55af: Unknown result type (might be due to invalid IL or missing references)
		//IL_55cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_55d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_55e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_5607: Unknown result type (might be due to invalid IL or missing references)
		//IL_560d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5648: Unknown result type (might be due to invalid IL or missing references)
		//IL_5652: Unknown result type (might be due to invalid IL or missing references)
		//IL_5657: Unknown result type (might be due to invalid IL or missing references)
		//IL_566e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5674: Unknown result type (might be due to invalid IL or missing references)
		//IL_567e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5694: Unknown result type (might be due to invalid IL or missing references)
		//IL_569a: Unknown result type (might be due to invalid IL or missing references)
		//IL_56a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_56ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_56c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_56ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_56e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_56e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_56f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_54c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_54e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_54ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f40: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f60: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f66: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ebc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2edc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ee2: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f64: Unknown result type (might be due to invalid IL or missing references)
		//IL_7039: Unknown result type (might be due to invalid IL or missing references)
		//IL_703f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7056: Unknown result type (might be due to invalid IL or missing references)
		//IL_705c: Unknown result type (might be due to invalid IL or missing references)
		//IL_708e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7094: Unknown result type (might be due to invalid IL or missing references)
		//IL_70c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_70cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_70fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_7104: Unknown result type (might be due to invalid IL or missing references)
		//IL_7136: Unknown result type (might be due to invalid IL or missing references)
		//IL_713c: Unknown result type (might be due to invalid IL or missing references)
		//IL_716e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7174: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e20: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e40: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e46: Unknown result type (might be due to invalid IL or missing references)
		//IL_68dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_68ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_6905: Unknown result type (might be due to invalid IL or missing references)
		//IL_695c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6966: Unknown result type (might be due to invalid IL or missing references)
		//IL_696b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a96: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6aa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ab2: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ab7: Unknown result type (might be due to invalid IL or missing references)
		//IL_6abc: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ace: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ad4: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ad9: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ade: Unknown result type (might be due to invalid IL or missing references)
		//IL_67be: Unknown result type (might be due to invalid IL or missing references)
		//IL_67e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_67e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_683e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6848: Unknown result type (might be due to invalid IL or missing references)
		//IL_684d: Unknown result type (might be due to invalid IL or missing references)
		//IL_65e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_660a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6610: Unknown result type (might be due to invalid IL or missing references)
		//IL_6672: Unknown result type (might be due to invalid IL or missing references)
		//IL_667c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6681: Unknown result type (might be due to invalid IL or missing references)
		//IL_66b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_66b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_66c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_66d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_66dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_66e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_66fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_6702: Unknown result type (might be due to invalid IL or missing references)
		//IL_670c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6722: Unknown result type (might be due to invalid IL or missing references)
		//IL_6728: Unknown result type (might be due to invalid IL or missing references)
		//IL_6732: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_c217: Unknown result type (might be due to invalid IL or missing references)
		//IL_c221: Unknown result type (might be due to invalid IL or missing references)
		//IL_c226: Unknown result type (might be due to invalid IL or missing references)
		//IL_c249: Unknown result type (might be due to invalid IL or missing references)
		//IL_c24f: Unknown result type (might be due to invalid IL or missing references)
		//IL_c259: Unknown result type (might be due to invalid IL or missing references)
		//IL_c26f: Unknown result type (might be due to invalid IL or missing references)
		//IL_c275: Unknown result type (might be due to invalid IL or missing references)
		//IL_c27f: Unknown result type (might be due to invalid IL or missing references)
		//IL_c295: Unknown result type (might be due to invalid IL or missing references)
		//IL_c29b: Unknown result type (might be due to invalid IL or missing references)
		//IL_c2a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_c2bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_c2c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_c14a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c166: Unknown result type (might be due to invalid IL or missing references)
		//IL_c16c: Unknown result type (might be due to invalid IL or missing references)
		//IL_c31d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c322: Unknown result type (might be due to invalid IL or missing references)
		//IL_581a: Unknown result type (might be due to invalid IL or missing references)
		//IL_583a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5840: Unknown result type (might be due to invalid IL or missing references)
		//IL_58e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_58ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_591e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5924: Unknown result type (might be due to invalid IL or missing references)
		//IL_5956: Unknown result type (might be due to invalid IL or missing references)
		//IL_595c: Unknown result type (might be due to invalid IL or missing references)
		//IL_598e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5994: Unknown result type (might be due to invalid IL or missing references)
		//IL_59c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_59cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_59fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_5a04: Unknown result type (might be due to invalid IL or missing references)
		//IL_5a36: Unknown result type (might be due to invalid IL or missing references)
		//IL_5a3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5a6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5a74: Unknown result type (might be due to invalid IL or missing references)
		//IL_572f: Unknown result type (might be due to invalid IL or missing references)
		//IL_574f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5755: Unknown result type (might be due to invalid IL or missing references)
		//IL_550a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5529: Unknown result type (might be due to invalid IL or missing references)
		//IL_552f: Unknown result type (might be due to invalid IL or missing references)
		//IL_556a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5574: Unknown result type (might be due to invalid IL or missing references)
		//IL_5579: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fab: Unknown result type (might be due to invalid IL or missing references)
		//IL_7223: Unknown result type (might be due to invalid IL or missing references)
		//IL_7243: Unknown result type (might be due to invalid IL or missing references)
		//IL_7249: Unknown result type (might be due to invalid IL or missing references)
		//IL_72f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_72f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_7301: Unknown result type (might be due to invalid IL or missing references)
		//IL_7317: Unknown result type (might be due to invalid IL or missing references)
		//IL_731d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7327: Unknown result type (might be due to invalid IL or missing references)
		//IL_71b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_71d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_71d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f87: Unknown result type (might be due to invalid IL or missing references)
		//IL_6faa: Unknown result type (might be due to invalid IL or missing references)
		//IL_6fb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_7007: Unknown result type (might be due to invalid IL or missing references)
		//IL_7011: Unknown result type (might be due to invalid IL or missing references)
		//IL_7016: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e69: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e92: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ee9: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ef3: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ef8: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c38: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c42: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c47: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c64: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c84: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c94: Unknown result type (might be due to invalid IL or missing references)
		//IL_5caa: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cba: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ce0: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d06: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ab4: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ad4: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ada: Unknown result type (might be due to invalid IL or missing references)
		//IL_5860: Unknown result type (might be due to invalid IL or missing references)
		//IL_587f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5885: Unknown result type (might be due to invalid IL or missing references)
		//IL_58c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_58ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_58cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_5775: Unknown result type (might be due to invalid IL or missing references)
		//IL_5794: Unknown result type (might be due to invalid IL or missing references)
		//IL_579a: Unknown result type (might be due to invalid IL or missing references)
		//IL_57d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_57df: Unknown result type (might be due to invalid IL or missing references)
		//IL_57e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fea: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ff0: Unknown result type (might be due to invalid IL or missing references)
		//IL_31ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_31cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_31d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_314e: Unknown result type (might be due to invalid IL or missing references)
		//IL_316e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3174: Unknown result type (might be due to invalid IL or missing references)
		//IL_7488: Unknown result type (might be due to invalid IL or missing references)
		//IL_74a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_74ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_7583: Unknown result type (might be due to invalid IL or missing references)
		//IL_7589: Unknown result type (might be due to invalid IL or missing references)
		//IL_75bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_75c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_75f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_75f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_762b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7631: Unknown result type (might be due to invalid IL or missing references)
		//IL_7663: Unknown result type (might be due to invalid IL or missing references)
		//IL_7669: Unknown result type (might be due to invalid IL or missing references)
		//IL_736a: Unknown result type (might be due to invalid IL or missing references)
		//IL_738a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7390: Unknown result type (might be due to invalid IL or missing references)
		//IL_729d: Unknown result type (might be due to invalid IL or missing references)
		//IL_72c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_72c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_7264: Unknown result type (might be due to invalid IL or missing references)
		//IL_7287: Unknown result type (might be due to invalid IL or missing references)
		//IL_728d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c34d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c361: Unknown result type (might be due to invalid IL or missing references)
		//IL_c36b: Unknown result type (might be due to invalid IL or missing references)
		//IL_c370: Unknown result type (might be due to invalid IL or missing references)
		//IL_c377: Unknown result type (might be due to invalid IL or missing references)
		//IL_c37c: Unknown result type (might be due to invalid IL or missing references)
		//IL_c388: Unknown result type (might be due to invalid IL or missing references)
		//IL_c38d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_c406: Unknown result type (might be due to invalid IL or missing references)
		//IL_c40b: Unknown result type (might be due to invalid IL or missing references)
		//IL_c416: Unknown result type (might be due to invalid IL or missing references)
		//IL_c421: Unknown result type (might be due to invalid IL or missing references)
		//IL_c426: Unknown result type (might be due to invalid IL or missing references)
		//IL_c42b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5afa: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b19: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b64: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b69: Unknown result type (might be due to invalid IL or missing references)
		//IL_302f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3035: Unknown result type (might be due to invalid IL or missing references)
		//IL_3361: Unknown result type (might be due to invalid IL or missing references)
		//IL_3370: Unknown result type (might be due to invalid IL or missing references)
		//IL_3375: Unknown result type (might be due to invalid IL or missing references)
		//IL_337b: Unknown result type (might be due to invalid IL or missing references)
		//IL_31fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_320d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3212: Unknown result type (might be due to invalid IL or missing references)
		//IL_3218: Unknown result type (might be due to invalid IL or missing references)
		//IL_77cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_77eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_77f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_7804: Unknown result type (might be due to invalid IL or missing references)
		//IL_7827: Unknown result type (might be due to invalid IL or missing references)
		//IL_782d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7884: Unknown result type (might be due to invalid IL or missing references)
		//IL_788e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7893: Unknown result type (might be due to invalid IL or missing references)
		//IL_78b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_78bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_78c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_78dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_78e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_78ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_7902: Unknown result type (might be due to invalid IL or missing references)
		//IL_7908: Unknown result type (might be due to invalid IL or missing references)
		//IL_7912: Unknown result type (might be due to invalid IL or missing references)
		//IL_76ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_76cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_76d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_74d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_74f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_74fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_7551: Unknown result type (might be due to invalid IL or missing references)
		//IL_755b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7560: Unknown result type (might be due to invalid IL or missing references)
		//IL_73b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_73d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_73dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_7433: Unknown result type (might be due to invalid IL or missing references)
		//IL_743d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7442: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b45: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b57: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6bc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_6372: Unknown result type (might be due to invalid IL or missing references)
		//IL_637e: Unknown result type (might be due to invalid IL or missing references)
		//IL_63bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_63ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_63cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_63e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_63e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_63f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_63f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_63fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_c5ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_c5d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_c5de: Unknown result type (might be due to invalid IL or missing references)
		//IL_c609: Unknown result type (might be due to invalid IL or missing references)
		//IL_c60e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c618: Unknown result type (might be due to invalid IL or missing references)
		//IL_c624: Unknown result type (might be due to invalid IL or missing references)
		//IL_c629: Unknown result type (might be due to invalid IL or missing references)
		//IL_c62f: Unknown result type (might be due to invalid IL or missing references)
		//IL_c646: Unknown result type (might be due to invalid IL or missing references)
		//IL_c64b: Unknown result type (might be due to invalid IL or missing references)
		//IL_c655: Unknown result type (might be due to invalid IL or missing references)
		//IL_c65a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c660: Unknown result type (might be due to invalid IL or missing references)
		//IL_c677: Unknown result type (might be due to invalid IL or missing references)
		//IL_c67d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c694: Unknown result type (might be due to invalid IL or missing references)
		//IL_c699: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6af: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_c702: Unknown result type (might be due to invalid IL or missing references)
		//IL_c708: Unknown result type (might be due to invalid IL or missing references)
		//IL_c550: Unknown result type (might be due to invalid IL or missing references)
		//IL_c56c: Unknown result type (might be due to invalid IL or missing references)
		//IL_c572: Unknown result type (might be due to invalid IL or missing references)
		//IL_c468: Unknown result type (might be due to invalid IL or missing references)
		//IL_c47d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c487: Unknown result type (might be due to invalid IL or missing references)
		//IL_c48c: Unknown result type (might be due to invalid IL or missing references)
		//IL_c440: Unknown result type (might be due to invalid IL or missing references)
		//IL_c456: Unknown result type (might be due to invalid IL or missing references)
		//IL_c45b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3074: Unknown result type (might be due to invalid IL or missing references)
		//IL_307a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3523: Unknown result type (might be due to invalid IL or missing references)
		//IL_353f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3545: Unknown result type (might be due to invalid IL or missing references)
		//IL_3581: Unknown result type (might be due to invalid IL or missing references)
		//IL_3587: Unknown result type (might be due to invalid IL or missing references)
		//IL_35b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_35bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_35ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_35f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3624: Unknown result type (might be due to invalid IL or missing references)
		//IL_362a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3661: Unknown result type (might be due to invalid IL or missing references)
		//IL_3667: Unknown result type (might be due to invalid IL or missing references)
		//IL_3698: Unknown result type (might be due to invalid IL or missing references)
		//IL_369e: Unknown result type (might be due to invalid IL or missing references)
		//IL_36cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_36d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3706: Unknown result type (might be due to invalid IL or missing references)
		//IL_370c: Unknown result type (might be due to invalid IL or missing references)
		//IL_373e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3744: Unknown result type (might be due to invalid IL or missing references)
		//IL_3775: Unknown result type (might be due to invalid IL or missing references)
		//IL_377b: Unknown result type (might be due to invalid IL or missing references)
		//IL_37ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_37b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_34c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_34e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_34eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a73: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a93: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a99: Unknown result type (might be due to invalid IL or missing references)
		//IL_7aac: Unknown result type (might be due to invalid IL or missing references)
		//IL_7acf: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ad5: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b36: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b64: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b84: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b94: Unknown result type (might be due to invalid IL or missing references)
		//IL_7baa: Unknown result type (might be due to invalid IL or missing references)
		//IL_7bb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_7bba: Unknown result type (might be due to invalid IL or missing references)
		//IL_7955: Unknown result type (might be due to invalid IL or missing references)
		//IL_7975: Unknown result type (might be due to invalid IL or missing references)
		//IL_797b: Unknown result type (might be due to invalid IL or missing references)
		//IL_76f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_7719: Unknown result type (might be due to invalid IL or missing references)
		//IL_771f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7776: Unknown result type (might be due to invalid IL or missing references)
		//IL_7780: Unknown result type (might be due to invalid IL or missing references)
		//IL_7785: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6bdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_c7ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_c7d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_c7d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_c801: Unknown result type (might be due to invalid IL or missing references)
		//IL_c807: Unknown result type (might be due to invalid IL or missing references)
		//IL_c81e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c824: Unknown result type (might be due to invalid IL or missing references)
		//IL_c856: Unknown result type (might be due to invalid IL or missing references)
		//IL_c85c: Unknown result type (might be due to invalid IL or missing references)
		//IL_c88e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c894: Unknown result type (might be due to invalid IL or missing references)
		//IL_c746: Unknown result type (might be due to invalid IL or missing references)
		//IL_c766: Unknown result type (might be due to invalid IL or missing references)
		//IL_c76c: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4db: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_30b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_30bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_33a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_33b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_33b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_33be: Unknown result type (might be due to invalid IL or missing references)
		//IL_33d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_33e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_33e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_33ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_3406: Unknown result type (might be due to invalid IL or missing references)
		//IL_3415: Unknown result type (might be due to invalid IL or missing references)
		//IL_341a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3420: Unknown result type (might be due to invalid IL or missing references)
		//IL_3437: Unknown result type (might be due to invalid IL or missing references)
		//IL_3446: Unknown result type (might be due to invalid IL or missing references)
		//IL_344b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3451: Unknown result type (might be due to invalid IL or missing references)
		//IL_3468: Unknown result type (might be due to invalid IL or missing references)
		//IL_3477: Unknown result type (might be due to invalid IL or missing references)
		//IL_347c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3482: Unknown result type (might be due to invalid IL or missing references)
		//IL_3241: Unknown result type (might be due to invalid IL or missing references)
		//IL_3250: Unknown result type (might be due to invalid IL or missing references)
		//IL_3255: Unknown result type (might be due to invalid IL or missing references)
		//IL_325b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3272: Unknown result type (might be due to invalid IL or missing references)
		//IL_3281: Unknown result type (might be due to invalid IL or missing references)
		//IL_3286: Unknown result type (might be due to invalid IL or missing references)
		//IL_328c: Unknown result type (might be due to invalid IL or missing references)
		//IL_32b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_32c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_32ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_32d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_32fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_3309: Unknown result type (might be due to invalid IL or missing references)
		//IL_330e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3314: Unknown result type (might be due to invalid IL or missing references)
		//IL_332b: Unknown result type (might be due to invalid IL or missing references)
		//IL_333a: Unknown result type (might be due to invalid IL or missing references)
		//IL_333f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3345: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d41: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d54: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d77: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7dd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_7dde: Unknown result type (might be due to invalid IL or missing references)
		//IL_7de3: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e06: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e16: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e32: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e52: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e58: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e62: Unknown result type (might be due to invalid IL or missing references)
		//IL_7bfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c23: Unknown result type (might be due to invalid IL or missing references)
		//IL_799e: Unknown result type (might be due to invalid IL or missing references)
		//IL_79c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_79c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a28: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c48: Unknown result type (might be due to invalid IL or missing references)
		//IL_6bf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_c946: Unknown result type (might be due to invalid IL or missing references)
		//IL_c96c: Unknown result type (might be due to invalid IL or missing references)
		//IL_c972: Unknown result type (might be due to invalid IL or missing references)
		//IL_c99a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c9a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_c9d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_c9d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca10: Unknown result type (might be due to invalid IL or missing references)
		//IL_c8df: Unknown result type (might be due to invalid IL or missing references)
		//IL_c8ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_c905: Unknown result type (might be due to invalid IL or missing references)
		//IL_3101: Unknown result type (might be due to invalid IL or missing references)
		//IL_3107: Unknown result type (might be due to invalid IL or missing references)
		//IL_3846: Unknown result type (might be due to invalid IL or missing references)
		//IL_3862: Unknown result type (might be due to invalid IL or missing references)
		//IL_3868: Unknown result type (might be due to invalid IL or missing references)
		//IL_3888: Unknown result type (might be due to invalid IL or missing references)
		//IL_388e: Unknown result type (might be due to invalid IL or missing references)
		//IL_38c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_38c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_38f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_38fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_3930: Unknown result type (might be due to invalid IL or missing references)
		//IL_3936: Unknown result type (might be due to invalid IL or missing references)
		//IL_37ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_3808: Unknown result type (might be due to invalid IL or missing references)
		//IL_380e: Unknown result type (might be due to invalid IL or missing references)
		//IL_80c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_80d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_80df: Unknown result type (might be due to invalid IL or missing references)
		//IL_80e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_80eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_80f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_80fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_8101: Unknown result type (might be due to invalid IL or missing references)
		//IL_8128: Unknown result type (might be due to invalid IL or missing references)
		//IL_812e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8158: Unknown result type (might be due to invalid IL or missing references)
		//IL_815e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8163: Unknown result type (might be due to invalid IL or missing references)
		//IL_8168: Unknown result type (might be due to invalid IL or missing references)
		//IL_816d: Unknown result type (might be due to invalid IL or missing references)
		//IL_817a: Unknown result type (might be due to invalid IL or missing references)
		//IL_817f: Unknown result type (might be due to invalid IL or missing references)
		//IL_818c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8197: Unknown result type (might be due to invalid IL or missing references)
		//IL_819c: Unknown result type (might be due to invalid IL or missing references)
		//IL_81a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_81ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_81b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ed0: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ee4: Unknown result type (might be due to invalid IL or missing references)
		//IL_7eee: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ef3: Unknown result type (might be due to invalid IL or missing references)
		//IL_7efa: Unknown result type (might be due to invalid IL or missing references)
		//IL_7eff: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f10: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f37: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f67: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f72: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f77: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f89: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7fa6: Unknown result type (might be due to invalid IL or missing references)
		//IL_7fab: Unknown result type (might be due to invalid IL or missing references)
		//IL_7fb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_7fba: Unknown result type (might be due to invalid IL or missing references)
		//IL_7fbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c46: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c69: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7cc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_7cd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_7cd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c62: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c11: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fe2: Unknown result type (might be due to invalid IL or missing references)
		//IL_39fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a16: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a36: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a40: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a45: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a70: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a76: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aab: Unknown result type (might be due to invalid IL or missing references)
		//IL_3adc: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ae2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b13: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b19: Unknown result type (might be due to invalid IL or missing references)
		//IL_3973: Unknown result type (might be due to invalid IL or missing references)
		//IL_398f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3995: Unknown result type (might be due to invalid IL or missing references)
		//IL_39af: Unknown result type (might be due to invalid IL or missing references)
		//IL_39b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_39be: Unknown result type (might be due to invalid IL or missing references)
		//IL_81fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_8202: Unknown result type (might be due to invalid IL or missing references)
		//IL_8216: Unknown result type (might be due to invalid IL or missing references)
		//IL_8220: Unknown result type (might be due to invalid IL or missing references)
		//IL_8225: Unknown result type (might be due to invalid IL or missing references)
		//IL_81c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_81db: Unknown result type (might be due to invalid IL or missing references)
		//IL_81e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_81ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_800b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8011: Unknown result type (might be due to invalid IL or missing references)
		//IL_8025: Unknown result type (might be due to invalid IL or missing references)
		//IL_802f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8034: Unknown result type (might be due to invalid IL or missing references)
		//IL_7fd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_7fea: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ff4: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ff9: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_cab5: Unknown result type (might be due to invalid IL or missing references)
		//IL_cadb: Unknown result type (might be due to invalid IL or missing references)
		//IL_cae1: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb09: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb41: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb47: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb79: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca74: Unknown result type (might be due to invalid IL or missing references)
		//IL_4338: Unknown result type (might be due to invalid IL or missing references)
		//IL_4342: Unknown result type (might be due to invalid IL or missing references)
		//IL_4347: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c18: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c22: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c27: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c52: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c58: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c87: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b55: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b71: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b77: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b91: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ba0: Unknown result type (might be due to invalid IL or missing references)
		//IL_8485: Unknown result type (might be due to invalid IL or missing references)
		//IL_84a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_84a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_84bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_84de: Unknown result type (might be due to invalid IL or missing references)
		//IL_84e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_851b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8525: Unknown result type (might be due to invalid IL or missing references)
		//IL_852a: Unknown result type (might be due to invalid IL or missing references)
		//IL_854d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8553: Unknown result type (might be due to invalid IL or missing references)
		//IL_855d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8573: Unknown result type (might be due to invalid IL or missing references)
		//IL_8579: Unknown result type (might be due to invalid IL or missing references)
		//IL_8583: Unknown result type (might be due to invalid IL or missing references)
		//IL_8599: Unknown result type (might be due to invalid IL or missing references)
		//IL_859f: Unknown result type (might be due to invalid IL or missing references)
		//IL_85a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_83b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_83d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_83dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc83: Unknown result type (might be due to invalid IL or missing references)
		//IL_cca9: Unknown result type (might be due to invalid IL or missing references)
		//IL_ccaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_cbc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_cbe5: Unknown result type (might be due to invalid IL or missing references)
		//IL_cbeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc15: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc25: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_d0b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_d0de: Unknown result type (might be due to invalid IL or missing references)
		//IL_d0e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_d127: Unknown result type (might be due to invalid IL or missing references)
		//IL_d12d: Unknown result type (might be due to invalid IL or missing references)
		//IL_d15f: Unknown result type (might be due to invalid IL or missing references)
		//IL_d165: Unknown result type (might be due to invalid IL or missing references)
		//IL_d197: Unknown result type (might be due to invalid IL or missing references)
		//IL_d19d: Unknown result type (might be due to invalid IL or missing references)
		//IL_cff8: Unknown result type (might be due to invalid IL or missing references)
		//IL_d01a: Unknown result type (might be due to invalid IL or missing references)
		//IL_d020: Unknown result type (might be due to invalid IL or missing references)
		//IL_d04a: Unknown result type (might be due to invalid IL or missing references)
		//IL_d050: Unknown result type (might be due to invalid IL or missing references)
		//IL_d05a: Unknown result type (might be due to invalid IL or missing references)
		//IL_d05f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dda: Unknown result type (might be due to invalid IL or missing references)
		//IL_3de0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e04: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e09: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e34: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e55: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e69: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e83: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ea4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3eba: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ec0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ed6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3edc: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ef2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ef8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f14: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f30: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f46: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f62: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f68: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f84: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d37: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d53: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d59: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d73: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d82: Unknown result type (might be due to invalid IL or missing references)
		//IL_86b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_86d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_86db: Unknown result type (might be due to invalid IL or missing references)
		//IL_86ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_8711: Unknown result type (might be due to invalid IL or missing references)
		//IL_8717: Unknown result type (might be due to invalid IL or missing references)
		//IL_874e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8758: Unknown result type (might be due to invalid IL or missing references)
		//IL_875d: Unknown result type (might be due to invalid IL or missing references)
		//IL_85ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_8609: Unknown result type (might be due to invalid IL or missing references)
		//IL_860f: Unknown result type (might be due to invalid IL or missing references)
		//IL_83fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_841f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8425: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d51: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d64: Unknown result type (might be due to invalid IL or missing references)
		//IL_cd80: Unknown result type (might be due to invalid IL or missing references)
		//IL_cda6: Unknown result type (might be due to invalid IL or missing references)
		//IL_cdac: Unknown result type (might be due to invalid IL or missing references)
		//IL_cdd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_cdda: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce12: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce44: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_cd19: Unknown result type (might be due to invalid IL or missing references)
		//IL_cd39: Unknown result type (might be due to invalid IL or missing references)
		//IL_cd3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_d29c: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_d30b: Unknown result type (might be due to invalid IL or missing references)
		//IL_d311: Unknown result type (might be due to invalid IL or missing references)
		//IL_d328: Unknown result type (might be due to invalid IL or missing references)
		//IL_d32e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d360: Unknown result type (might be due to invalid IL or missing references)
		//IL_d366: Unknown result type (might be due to invalid IL or missing references)
		//IL_d398: Unknown result type (might be due to invalid IL or missing references)
		//IL_d39e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d3d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_d3d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_d1dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_d1fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_d204: Unknown result type (might be due to invalid IL or missing references)
		//IL_d22e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d234: Unknown result type (might be due to invalid IL or missing references)
		//IL_d23e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d243: Unknown result type (might be due to invalid IL or missing references)
		//IL_413c: Unknown result type (might be due to invalid IL or missing references)
		//IL_415f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4165: Unknown result type (might be due to invalid IL or missing references)
		//IL_4176: Unknown result type (might be due to invalid IL or missing references)
		//IL_4178: Unknown result type (might be due to invalid IL or missing references)
		//IL_41a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_41b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_41b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_41c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_41e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_41ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_41fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_41ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_4230: Unknown result type (might be due to invalid IL or missing references)
		//IL_423a: Unknown result type (might be due to invalid IL or missing references)
		//IL_423f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4256: Unknown result type (might be due to invalid IL or missing references)
		//IL_425c: Unknown result type (might be due to invalid IL or missing references)
		//IL_428e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4294: Unknown result type (might be due to invalid IL or missing references)
		//IL_42c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_42cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_42fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_4304: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ffe: Unknown result type (might be due to invalid IL or missing references)
		//IL_4021: Unknown result type (might be due to invalid IL or missing references)
		//IL_4027: Unknown result type (might be due to invalid IL or missing references)
		//IL_4038: Unknown result type (might be due to invalid IL or missing references)
		//IL_403a: Unknown result type (might be due to invalid IL or missing references)
		//IL_406b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4075: Unknown result type (might be due to invalid IL or missing references)
		//IL_407a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4085: Unknown result type (might be due to invalid IL or missing references)
		//IL_40a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_40ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_40bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_40c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_40f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_40fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4101: Unknown result type (might be due to invalid IL or missing references)
		//IL_8948: Unknown result type (might be due to invalid IL or missing references)
		//IL_894e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8958: Unknown result type (might be due to invalid IL or missing references)
		//IL_896e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8974: Unknown result type (might be due to invalid IL or missing references)
		//IL_897e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8994: Unknown result type (might be due to invalid IL or missing references)
		//IL_899a: Unknown result type (might be due to invalid IL or missing references)
		//IL_89a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_89ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_89c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_89ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_89e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_89e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_89f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a06: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a16: Unknown result type (might be due to invalid IL or missing references)
		//IL_87ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_87c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_862f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8652: Unknown result type (might be due to invalid IL or missing references)
		//IL_8658: Unknown result type (might be due to invalid IL or missing references)
		//IL_ceef: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf15: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf43: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf49: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf81: Unknown result type (might be due to invalid IL or missing references)
		//IL_cfb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_cfb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce88: Unknown result type (might be due to invalid IL or missing references)
		//IL_cea8: Unknown result type (might be due to invalid IL or missing references)
		//IL_ceae: Unknown result type (might be due to invalid IL or missing references)
		//IL_d47b: Unknown result type (might be due to invalid IL or missing references)
		//IL_d4a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_d4a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_d4cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_d4d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_d507: Unknown result type (might be due to invalid IL or missing references)
		//IL_d50d: Unknown result type (might be due to invalid IL or missing references)
		//IL_d53f: Unknown result type (might be due to invalid IL or missing references)
		//IL_d545: Unknown result type (might be due to invalid IL or missing references)
		//IL_d414: Unknown result type (might be due to invalid IL or missing references)
		//IL_d434: Unknown result type (might be due to invalid IL or missing references)
		//IL_d43a: Unknown result type (might be due to invalid IL or missing references)
		//IL_44a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_44c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_44ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_44db: Unknown result type (might be due to invalid IL or missing references)
		//IL_44dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_450e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4518: Unknown result type (might be due to invalid IL or missing references)
		//IL_451d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4528: Unknown result type (might be due to invalid IL or missing references)
		//IL_454b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4551: Unknown result type (might be due to invalid IL or missing references)
		//IL_4562: Unknown result type (might be due to invalid IL or missing references)
		//IL_4564: Unknown result type (might be due to invalid IL or missing references)
		//IL_4595: Unknown result type (might be due to invalid IL or missing references)
		//IL_459f: Unknown result type (might be due to invalid IL or missing references)
		//IL_45a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4363: Unknown result type (might be due to invalid IL or missing references)
		//IL_4386: Unknown result type (might be due to invalid IL or missing references)
		//IL_438c: Unknown result type (might be due to invalid IL or missing references)
		//IL_439d: Unknown result type (might be due to invalid IL or missing references)
		//IL_439f: Unknown result type (might be due to invalid IL or missing references)
		//IL_43d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_43da: Unknown result type (might be due to invalid IL or missing references)
		//IL_43df: Unknown result type (might be due to invalid IL or missing references)
		//IL_43ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_440d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4413: Unknown result type (might be due to invalid IL or missing references)
		//IL_4424: Unknown result type (might be due to invalid IL or missing references)
		//IL_4426: Unknown result type (might be due to invalid IL or missing references)
		//IL_4457: Unknown result type (might be due to invalid IL or missing references)
		//IL_4461: Unknown result type (might be due to invalid IL or missing references)
		//IL_4466: Unknown result type (might be due to invalid IL or missing references)
		//IL_911f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9129: Unknown result type (might be due to invalid IL or missing references)
		//IL_912e: Unknown result type (might be due to invalid IL or missing references)
		//IL_9133: Unknown result type (might be due to invalid IL or missing references)
		//IL_88b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_88d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_88df: Unknown result type (might be due to invalid IL or missing references)
		//IL_8916: Unknown result type (might be due to invalid IL or missing references)
		//IL_8920: Unknown result type (might be due to invalid IL or missing references)
		//IL_8925: Unknown result type (might be due to invalid IL or missing references)
		//IL_8880: Unknown result type (might be due to invalid IL or missing references)
		//IL_889d: Unknown result type (might be due to invalid IL or missing references)
		//IL_88a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_87ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_880d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8813: Unknown result type (might be due to invalid IL or missing references)
		//IL_d642: Unknown result type (might be due to invalid IL or missing references)
		//IL_d668: Unknown result type (might be due to invalid IL or missing references)
		//IL_d66e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d6b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_d6b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_d589: Unknown result type (might be due to invalid IL or missing references)
		//IL_d5ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_d5b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_d5db: Unknown result type (might be due to invalid IL or missing references)
		//IL_d5e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_d5eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_d5f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_82d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_82e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_82fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_8300: Unknown result type (might be due to invalid IL or missing references)
		//IL_830d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8319: Unknown result type (might be due to invalid IL or missing references)
		//IL_835f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8365: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f58: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f75: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9001: Unknown result type (might be due to invalid IL or missing references)
		//IL_9007: Unknown result type (might be due to invalid IL or missing references)
		//IL_9039: Unknown result type (might be due to invalid IL or missing references)
		//IL_903f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9071: Unknown result type (might be due to invalid IL or missing references)
		//IL_9077: Unknown result type (might be due to invalid IL or missing references)
		//IL_90a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_90af: Unknown result type (might be due to invalid IL or missing references)
		//IL_90e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_90e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_8e8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ea9: Unknown result type (might be due to invalid IL or missing references)
		//IL_8eaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c79: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ca2: Unknown result type (might be due to invalid IL or missing references)
		//IL_8cd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ce3: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ce8: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c43: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c60: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c66: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a66: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a81: Unknown result type (might be due to invalid IL or missing references)
		//IL_d85d: Unknown result type (might be due to invalid IL or missing references)
		//IL_d883: Unknown result type (might be due to invalid IL or missing references)
		//IL_d889: Unknown result type (might be due to invalid IL or missing references)
		//IL_d8cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_d8d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_d806: Unknown result type (might be due to invalid IL or missing references)
		//IL_d80b: Unknown result type (might be due to invalid IL or missing references)
		//IL_d715: Unknown result type (might be due to invalid IL or missing references)
		//IL_d724: Unknown result type (might be due to invalid IL or missing references)
		//IL_d729: Unknown result type (might be due to invalid IL or missing references)
		//IL_d72e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d746: Unknown result type (might be due to invalid IL or missing references)
		//IL_d755: Unknown result type (might be due to invalid IL or missing references)
		//IL_d75a: Unknown result type (might be due to invalid IL or missing references)
		//IL_d75f: Unknown result type (might be due to invalid IL or missing references)
		//IL_d6d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_d6d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_45c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_45e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_45e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4607: Unknown result type (might be due to invalid IL or missing references)
		//IL_4611: Unknown result type (might be due to invalid IL or missing references)
		//IL_4616: Unknown result type (might be due to invalid IL or missing references)
		//IL_4638: Unknown result type (might be due to invalid IL or missing references)
		//IL_463e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4670: Unknown result type (might be due to invalid IL or missing references)
		//IL_4676: Unknown result type (might be due to invalid IL or missing references)
		//IL_46a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_46ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_914c: Unknown result type (might be due to invalid IL or missing references)
		//IL_915a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9160: Unknown result type (might be due to invalid IL or missing references)
		//IL_9162: Unknown result type (might be due to invalid IL or missing references)
		//IL_9167: Unknown result type (might be due to invalid IL or missing references)
		//IL_916d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9173: Unknown result type (might be due to invalid IL or missing references)
		//IL_9182: Unknown result type (might be due to invalid IL or missing references)
		//IL_9187: Unknown result type (might be due to invalid IL or missing references)
		//IL_918d: Unknown result type (might be due to invalid IL or missing references)
		//IL_91a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_91a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_91b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_91bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_91c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ecf: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ef2: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ef8: Unknown result type (might be due to invalid IL or missing references)
		//IL_8aa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ac7: Unknown result type (might be due to invalid IL or missing references)
		//IL_8acd: Unknown result type (might be due to invalid IL or missing references)
		//IL_da20: Unknown result type (might be due to invalid IL or missing references)
		//IL_da46: Unknown result type (might be due to invalid IL or missing references)
		//IL_da4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_da74: Unknown result type (might be due to invalid IL or missing references)
		//IL_da79: Unknown result type (might be due to invalid IL or missing references)
		//IL_da85: Unknown result type (might be due to invalid IL or missing references)
		//IL_da8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_da94: Unknown result type (might be due to invalid IL or missing references)
		//IL_da9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_dab1: Unknown result type (might be due to invalid IL or missing references)
		//IL_dab6: Unknown result type (might be due to invalid IL or missing references)
		//IL_dac2: Unknown result type (might be due to invalid IL or missing references)
		//IL_dacc: Unknown result type (might be due to invalid IL or missing references)
		//IL_dad1: Unknown result type (might be due to invalid IL or missing references)
		//IL_dad7: Unknown result type (might be due to invalid IL or missing references)
		//IL_db09: Unknown result type (might be due to invalid IL or missing references)
		//IL_db0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9df: Unknown result type (might be due to invalid IL or missing references)
		//IL_d930: Unknown result type (might be due to invalid IL or missing references)
		//IL_d93f: Unknown result type (might be due to invalid IL or missing references)
		//IL_d944: Unknown result type (might be due to invalid IL or missing references)
		//IL_d949: Unknown result type (might be due to invalid IL or missing references)
		//IL_d961: Unknown result type (might be due to invalid IL or missing references)
		//IL_d970: Unknown result type (might be due to invalid IL or missing references)
		//IL_d975: Unknown result type (might be due to invalid IL or missing references)
		//IL_d97a: Unknown result type (might be due to invalid IL or missing references)
		//IL_d8ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_d8f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_d6fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_d709: Unknown result type (might be due to invalid IL or missing references)
		//IL_d70e: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b64: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b85: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9bbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_9bc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_9bca: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d31: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d36: Unknown result type (might be due to invalid IL or missing references)
		//IL_dc35: Unknown result type (might be due to invalid IL or missing references)
		//IL_dc5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_dc61: Unknown result type (might be due to invalid IL or missing references)
		//IL_dca4: Unknown result type (might be due to invalid IL or missing references)
		//IL_dca9: Unknown result type (might be due to invalid IL or missing references)
		//IL_db75: Unknown result type (might be due to invalid IL or missing references)
		//IL_db97: Unknown result type (might be due to invalid IL or missing references)
		//IL_db9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_dbc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_dbcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_dbd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_dbdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_d919: Unknown result type (might be due to invalid IL or missing references)
		//IL_d924: Unknown result type (might be due to invalid IL or missing references)
		//IL_d929: Unknown result type (might be due to invalid IL or missing references)
		//IL_91e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_91eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_920c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9211: Unknown result type (might be due to invalid IL or missing references)
		//IL_9217: Unknown result type (might be due to invalid IL or missing references)
		//IL_922d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9233: Unknown result type (might be due to invalid IL or missing references)
		//IL_9254: Unknown result type (might be due to invalid IL or missing references)
		//IL_9259: Unknown result type (might be due to invalid IL or missing references)
		//IL_925f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9275: Unknown result type (might be due to invalid IL or missing references)
		//IL_927b: Unknown result type (might be due to invalid IL or missing references)
		//IL_929c: Unknown result type (might be due to invalid IL or missing references)
		//IL_92a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_92a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_dcbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_dccf: Unknown result type (might be due to invalid IL or missing references)
		//IL_dcd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_dcda: Unknown result type (might be due to invalid IL or missing references)
		//IL_dcf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd00: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd05: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd21: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd31: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd36: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd52: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd62: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd67: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd83: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd93: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd98: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_ddb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_ddc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_ddc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_ddcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c11: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c55: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c74: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c79: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b14: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b19: Unknown result type (might be due to invalid IL or missing references)
		//IL_ddf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_ddf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_a340: Unknown result type (might be due to invalid IL or missing references)
		//IL_a367: Unknown result type (might be due to invalid IL or missing references)
		//IL_a36d: Unknown result type (might be due to invalid IL or missing references)
		//IL_a395: Unknown result type (might be due to invalid IL or missing references)
		//IL_a39b: Unknown result type (might be due to invalid IL or missing references)
		//IL_a3b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_a3b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_a3cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_a3d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_a3e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_a3ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_a405: Unknown result type (might be due to invalid IL or missing references)
		//IL_a40b: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_92e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_92eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_92fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_9303: Unknown result type (might be due to invalid IL or missing references)
		//IL_9312: Unknown result type (might be due to invalid IL or missing references)
		//IL_9317: Unknown result type (might be due to invalid IL or missing references)
		//IL_932b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9330: Unknown result type (might be due to invalid IL or missing references)
		//IL_9336: Unknown result type (might be due to invalid IL or missing references)
		//IL_9362: Unknown result type (might be due to invalid IL or missing references)
		//IL_9368: Unknown result type (might be due to invalid IL or missing references)
		//IL_937b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9380: Unknown result type (might be due to invalid IL or missing references)
		//IL_938f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9394: Unknown result type (might be due to invalid IL or missing references)
		//IL_93a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_93ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_93b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_93df: Unknown result type (might be due to invalid IL or missing references)
		//IL_93e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_93f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_93fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_940c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9411: Unknown result type (might be due to invalid IL or missing references)
		//IL_9425: Unknown result type (might be due to invalid IL or missing references)
		//IL_942a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9430: Unknown result type (might be due to invalid IL or missing references)
		//IL_945c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9462: Unknown result type (might be due to invalid IL or missing references)
		//IL_9475: Unknown result type (might be due to invalid IL or missing references)
		//IL_947a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9489: Unknown result type (might be due to invalid IL or missing references)
		//IL_948e: Unknown result type (might be due to invalid IL or missing references)
		//IL_94a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_94a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_94ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_94d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_94df: Unknown result type (might be due to invalid IL or missing references)
		//IL_94f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_94f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_9506: Unknown result type (might be due to invalid IL or missing references)
		//IL_950b: Unknown result type (might be due to invalid IL or missing references)
		//IL_951f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9524: Unknown result type (might be due to invalid IL or missing references)
		//IL_952a: Unknown result type (might be due to invalid IL or missing references)
		//IL_de1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_de26: Unknown result type (might be due to invalid IL or missing references)
		//IL_a188: Unknown result type (might be due to invalid IL or missing references)
		//IL_a1a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_a1af: Unknown result type (might be due to invalid IL or missing references)
		//IL_a1d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_a1dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_a210: Unknown result type (might be due to invalid IL or missing references)
		//IL_a216: Unknown result type (might be due to invalid IL or missing references)
		//IL_a248: Unknown result type (might be due to invalid IL or missing references)
		//IL_a24e: Unknown result type (might be due to invalid IL or missing references)
		//IL_a280: Unknown result type (might be due to invalid IL or missing references)
		//IL_a286: Unknown result type (might be due to invalid IL or missing references)
		//IL_a119: Unknown result type (might be due to invalid IL or missing references)
		//IL_a13a: Unknown result type (might be due to invalid IL or missing references)
		//IL_a140: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e85: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ea6: Unknown result type (might be due to invalid IL or missing references)
		//IL_9eac: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f94: Unknown result type (might be due to invalid IL or missing references)
		//IL_9fac: Unknown result type (might be due to invalid IL or missing references)
		//IL_9fb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_9fe7: Unknown result type (might be due to invalid IL or missing references)
		//IL_9fed: Unknown result type (might be due to invalid IL or missing references)
		//IL_a022: Unknown result type (might be due to invalid IL or missing references)
		//IL_a028: Unknown result type (might be due to invalid IL or missing references)
		//IL_a05d: Unknown result type (might be due to invalid IL or missing references)
		//IL_a063: Unknown result type (might be due to invalid IL or missing references)
		//IL_a098: Unknown result type (might be due to invalid IL or missing references)
		//IL_a09e: Unknown result type (might be due to invalid IL or missing references)
		//IL_9d59: Unknown result type (might be due to invalid IL or missing references)
		//IL_9d7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9d80: Unknown result type (might be due to invalid IL or missing references)
		//IL_8dab: Unknown result type (might be due to invalid IL or missing references)
		//IL_8dce: Unknown result type (might be due to invalid IL or missing references)
		//IL_8dd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_8e0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8e15: Unknown result type (might be due to invalid IL or missing references)
		//IL_8e1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d87: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b41: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ded8: Unknown result type (might be due to invalid IL or missing references)
		//IL_defe: Unknown result type (might be due to invalid IL or missing references)
		//IL_df04: Unknown result type (might be due to invalid IL or missing references)
		//IL_de71: Unknown result type (might be due to invalid IL or missing references)
		//IL_de91: Unknown result type (might be due to invalid IL or missing references)
		//IL_de97: Unknown result type (might be due to invalid IL or missing references)
		//IL_a4b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_a4d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_a4dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_a504: Unknown result type (might be due to invalid IL or missing references)
		//IL_a50a: Unknown result type (might be due to invalid IL or missing references)
		//IL_a520: Unknown result type (might be due to invalid IL or missing references)
		//IL_a526: Unknown result type (might be due to invalid IL or missing references)
		//IL_a53c: Unknown result type (might be due to invalid IL or missing references)
		//IL_a542: Unknown result type (might be due to invalid IL or missing references)
		//IL_a558: Unknown result type (might be due to invalid IL or missing references)
		//IL_a55e: Unknown result type (might be due to invalid IL or missing references)
		//IL_a448: Unknown result type (might be due to invalid IL or missing references)
		//IL_a465: Unknown result type (might be due to invalid IL or missing references)
		//IL_a46b: Unknown result type (might be due to invalid IL or missing references)
		//IL_957e: Unknown result type (might be due to invalid IL or missing references)
		//IL_9584: Unknown result type (might be due to invalid IL or missing references)
		//IL_9597: Unknown result type (might be due to invalid IL or missing references)
		//IL_959c: Unknown result type (might be due to invalid IL or missing references)
		//IL_95b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_95bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_95c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_95d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_95dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_95f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_95f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_960f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9614: Unknown result type (might be due to invalid IL or missing references)
		//IL_961a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8bad: Unknown result type (might be due to invalid IL or missing references)
		//IL_8bb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_df51: Unknown result type (might be due to invalid IL or missing references)
		//IL_df57: Unknown result type (might be due to invalid IL or missing references)
		//IL_df89: Unknown result type (might be due to invalid IL or missing references)
		//IL_df8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_dfc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_dfc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_dff9: Unknown result type (might be due to invalid IL or missing references)
		//IL_dfff: Unknown result type (might be due to invalid IL or missing references)
		//IL_a65f: Unknown result type (might be due to invalid IL or missing references)
		//IL_a680: Unknown result type (might be due to invalid IL or missing references)
		//IL_a686: Unknown result type (might be due to invalid IL or missing references)
		//IL_a6b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_a6c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_a6c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_a5a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_a5c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_a5c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_a5f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_a602: Unknown result type (might be due to invalid IL or missing references)
		//IL_a607: Unknown result type (might be due to invalid IL or missing references)
		//IL_9edb: Unknown result type (might be due to invalid IL or missing references)
		//IL_9eff: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f05: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f66: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9daf: Unknown result type (might be due to invalid IL or missing references)
		//IL_9dd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_9dd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e30: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_e2af: Unknown result type (might be due to invalid IL or missing references)
		//IL_e2e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_e2e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_e247: Unknown result type (might be due to invalid IL or missing references)
		//IL_e276: Unknown result type (might be due to invalid IL or missing references)
		//IL_e27c: Unknown result type (might be due to invalid IL or missing references)
		//IL_e0a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_e0c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_e0c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_e105: Unknown result type (might be due to invalid IL or missing references)
		//IL_e10b: Unknown result type (might be due to invalid IL or missing references)
		//IL_e13d: Unknown result type (might be due to invalid IL or missing references)
		//IL_e143: Unknown result type (might be due to invalid IL or missing references)
		//IL_e175: Unknown result type (might be due to invalid IL or missing references)
		//IL_e17b: Unknown result type (might be due to invalid IL or missing references)
		//IL_e1ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_e1b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_e03d: Unknown result type (might be due to invalid IL or missing references)
		//IL_e059: Unknown result type (might be due to invalid IL or missing references)
		//IL_e05f: Unknown result type (might be due to invalid IL or missing references)
		//IL_a7a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_a7c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_a7c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_a7f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_a7f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_a829: Unknown result type (might be due to invalid IL or missing references)
		//IL_a82f: Unknown result type (might be due to invalid IL or missing references)
		//IL_a861: Unknown result type (might be due to invalid IL or missing references)
		//IL_a867: Unknown result type (might be due to invalid IL or missing references)
		//IL_a899: Unknown result type (might be due to invalid IL or missing references)
		//IL_a89f: Unknown result type (might be due to invalid IL or missing references)
		//IL_a8d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_a8d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_a737: Unknown result type (might be due to invalid IL or missing references)
		//IL_a753: Unknown result type (might be due to invalid IL or missing references)
		//IL_a759: Unknown result type (might be due to invalid IL or missing references)
		//IL_9658: Unknown result type (might be due to invalid IL or missing references)
		//IL_965e: Unknown result type (might be due to invalid IL or missing references)
		//IL_967f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9684: Unknown result type (might be due to invalid IL or missing references)
		//IL_969b: Unknown result type (might be due to invalid IL or missing references)
		//IL_96a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_96a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_96bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_96c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_96e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_96e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_96ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_9704: Unknown result type (might be due to invalid IL or missing references)
		//IL_970a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9720: Unknown result type (might be due to invalid IL or missing references)
		//IL_9726: Unknown result type (might be due to invalid IL or missing references)
		//IL_9747: Unknown result type (might be due to invalid IL or missing references)
		//IL_974c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9763: Unknown result type (might be due to invalid IL or missing references)
		//IL_9768: Unknown result type (might be due to invalid IL or missing references)
		//IL_976e: Unknown result type (might be due to invalid IL or missing references)
		//IL_a983: Unknown result type (might be due to invalid IL or missing references)
		//IL_a9a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_a9af: Unknown result type (might be due to invalid IL or missing references)
		//IL_a9d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_a9dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_a9f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_a9fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa11: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa17: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa34: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa51: Unknown result type (might be due to invalid IL or missing references)
		//IL_a915: Unknown result type (might be due to invalid IL or missing references)
		//IL_a935: Unknown result type (might be due to invalid IL or missing references)
		//IL_a93b: Unknown result type (might be due to invalid IL or missing references)
		//IL_e41e: Unknown result type (might be due to invalid IL or missing references)
		//IL_e423: Unknown result type (might be due to invalid IL or missing references)
		//IL_aafd: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab23: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab29: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab51: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab57: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab74: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab91: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_aaaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_aab5: Unknown result type (might be due to invalid IL or missing references)
		//IL_97c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_97d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_97d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_97db: Unknown result type (might be due to invalid IL or missing references)
		//IL_981f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9839: Unknown result type (might be due to invalid IL or missing references)
		//IL_983e: Unknown result type (might be due to invalid IL or missing references)
		//IL_9843: Unknown result type (might be due to invalid IL or missing references)
		//IL_98ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_98b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_ac42: Unknown result type (might be due to invalid IL or missing references)
		//IL_ac74: Unknown result type (might be due to invalid IL or missing references)
		//IL_ac7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_aca2: Unknown result type (might be due to invalid IL or missing references)
		//IL_aca8: Unknown result type (might be due to invalid IL or missing references)
		//IL_acbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_acc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_acdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_ace2: Unknown result type (might be due to invalid IL or missing references)
		//IL_acf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_acff: Unknown result type (might be due to invalid IL or missing references)
		//IL_abcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_abef: Unknown result type (might be due to invalid IL or missing references)
		//IL_abf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_e336: Unknown result type (might be due to invalid IL or missing references)
		//IL_e358: Unknown result type (might be due to invalid IL or missing references)
		//IL_e35e: Unknown result type (might be due to invalid IL or missing references)
		//IL_adb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_add5: Unknown result type (might be due to invalid IL or missing references)
		//IL_addb: Unknown result type (might be due to invalid IL or missing references)
		//IL_ae03: Unknown result type (might be due to invalid IL or missing references)
		//IL_ae09: Unknown result type (might be due to invalid IL or missing references)
		//IL_ae3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_ae41: Unknown result type (might be due to invalid IL or missing references)
		//IL_ae73: Unknown result type (might be due to invalid IL or missing references)
		//IL_ae79: Unknown result type (might be due to invalid IL or missing references)
		//IL_aeab: Unknown result type (might be due to invalid IL or missing references)
		//IL_aeb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_aee3: Unknown result type (might be due to invalid IL or missing references)
		//IL_aee9: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad49: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad65: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_98f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_9914: Unknown result type (might be due to invalid IL or missing references)
		//IL_991a: Unknown result type (might be due to invalid IL or missing references)
		//IL_995c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9966: Unknown result type (might be due to invalid IL or missing references)
		//IL_996b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9986: Unknown result type (might be due to invalid IL or missing references)
		//IL_99a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_99ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_99dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_99e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_99eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_af91: Unknown result type (might be due to invalid IL or missing references)
		//IL_afb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_afb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_afe1: Unknown result type (might be due to invalid IL or missing references)
		//IL_afe7: Unknown result type (might be due to invalid IL or missing references)
		//IL_b019: Unknown result type (might be due to invalid IL or missing references)
		//IL_b01f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b051: Unknown result type (might be due to invalid IL or missing references)
		//IL_b057: Unknown result type (might be due to invalid IL or missing references)
		//IL_b089: Unknown result type (might be due to invalid IL or missing references)
		//IL_b08f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_af27: Unknown result type (might be due to invalid IL or missing references)
		//IL_af43: Unknown result type (might be due to invalid IL or missing references)
		//IL_af49: Unknown result type (might be due to invalid IL or missing references)
		//IL_b16f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b191: Unknown result type (might be due to invalid IL or missing references)
		//IL_b197: Unknown result type (might be due to invalid IL or missing references)
		//IL_b1bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_b1c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_b1f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_b1fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_b22f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b235: Unknown result type (might be due to invalid IL or missing references)
		//IL_b267: Unknown result type (might be due to invalid IL or missing references)
		//IL_b26d: Unknown result type (might be due to invalid IL or missing references)
		//IL_b29f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b2a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_b105: Unknown result type (might be due to invalid IL or missing references)
		//IL_b121: Unknown result type (might be due to invalid IL or missing references)
		//IL_b127: Unknown result type (might be due to invalid IL or missing references)
		//IL_b34d: Unknown result type (might be due to invalid IL or missing references)
		//IL_b36f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b375: Unknown result type (might be due to invalid IL or missing references)
		//IL_b39d: Unknown result type (might be due to invalid IL or missing references)
		//IL_b3a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_b3d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_b3db: Unknown result type (might be due to invalid IL or missing references)
		//IL_b40d: Unknown result type (might be due to invalid IL or missing references)
		//IL_b413: Unknown result type (might be due to invalid IL or missing references)
		//IL_b445: Unknown result type (might be due to invalid IL or missing references)
		//IL_b44b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b47d: Unknown result type (might be due to invalid IL or missing references)
		//IL_b483: Unknown result type (might be due to invalid IL or missing references)
		//IL_b2e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_b2ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_b305: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a83: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a91: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a97: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a99: Unknown result type (might be due to invalid IL or missing references)
		//IL_9aa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_9aa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ab5: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ac0: Unknown result type (might be due to invalid IL or missing references)
		//IL_9aca: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ad5: Unknown result type (might be due to invalid IL or missing references)
		//IL_b52b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b54d: Unknown result type (might be due to invalid IL or missing references)
		//IL_b553: Unknown result type (might be due to invalid IL or missing references)
		//IL_b57b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b581: Unknown result type (might be due to invalid IL or missing references)
		//IL_b5b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_b5b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_b5eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_b5f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_b623: Unknown result type (might be due to invalid IL or missing references)
		//IL_b629: Unknown result type (might be due to invalid IL or missing references)
		//IL_b65b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b661: Unknown result type (might be due to invalid IL or missing references)
		//IL_b4c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_b4dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_b4e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_e540: Unknown result type (might be due to invalid IL or missing references)
		//IL_e560: Unknown result type (might be due to invalid IL or missing references)
		//IL_e4d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_e4f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_e616: Unknown result type (might be due to invalid IL or missing references)
		//IL_e635: Unknown result type (might be due to invalid IL or missing references)
		//IL_e63b: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_b709: Unknown result type (might be due to invalid IL or missing references)
		//IL_b72b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b731: Unknown result type (might be due to invalid IL or missing references)
		//IL_b759: Unknown result type (might be due to invalid IL or missing references)
		//IL_b75f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b791: Unknown result type (might be due to invalid IL or missing references)
		//IL_b797: Unknown result type (might be due to invalid IL or missing references)
		//IL_b7c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_b7cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_b801: Unknown result type (might be due to invalid IL or missing references)
		//IL_b807: Unknown result type (might be due to invalid IL or missing references)
		//IL_b839: Unknown result type (might be due to invalid IL or missing references)
		//IL_b83f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b69f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b6bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_b6c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_e71a: Unknown result type (might be due to invalid IL or missing references)
		//IL_e73c: Unknown result type (might be due to invalid IL or missing references)
		//IL_e6af: Unknown result type (might be due to invalid IL or missing references)
		//IL_e6cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_b8ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_b90f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b915: Unknown result type (might be due to invalid IL or missing references)
		//IL_b93d: Unknown result type (might be due to invalid IL or missing references)
		//IL_b943: Unknown result type (might be due to invalid IL or missing references)
		//IL_b975: Unknown result type (might be due to invalid IL or missing references)
		//IL_b97b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_b88a: Unknown result type (might be due to invalid IL or missing references)
		//IL_b8a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_b8ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_bab0: Unknown result type (might be due to invalid IL or missing references)
		//IL_bad2: Unknown result type (might be due to invalid IL or missing references)
		//IL_bad8: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba16: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba56: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd85: Unknown result type (might be due to invalid IL or missing references)
		//IL_bdb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_bdbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_bdc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb32: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb62: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb71: Unknown result type (might be due to invalid IL or missing references)
		//IL_ea03: Unknown result type (might be due to invalid IL or missing references)
		//IL_ea22: Unknown result type (might be due to invalid IL or missing references)
		//IL_ea28: Unknown result type (might be due to invalid IL or missing references)
		//IL_e984: Unknown result type (might be due to invalid IL or missing references)
		//IL_e9a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_e9a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_bfba: Unknown result type (might be due to invalid IL or missing references)
		//IL_bfda: Unknown result type (might be due to invalid IL or missing references)
		//IL_bfe0: Unknown result type (might be due to invalid IL or missing references)
		//IL_c010: Unknown result type (might be due to invalid IL or missing references)
		//IL_c01a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c01f: Unknown result type (might be due to invalid IL or missing references)
		//IL_befd: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf23: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf53: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf62: Unknown result type (might be due to invalid IL or missing references)
		//IL_be3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_be48: Unknown result type (might be due to invalid IL or missing references)
		//IL_be8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_be94: Unknown result type (might be due to invalid IL or missing references)
		//IL_be99: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbe9: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc37: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc41: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc46: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc73: Unknown result type (might be due to invalid IL or missing references)
		//IL_bca5: Unknown result type (might be due to invalid IL or missing references)
		//IL_bcab: Unknown result type (might be due to invalid IL or missing references)
		//IL_bcdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_bce3: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd15: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef13: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef19: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef23: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef55: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef91: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_efc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_efcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_efd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_f003: Unknown result type (might be due to invalid IL or missing references)
		//IL_f009: Unknown result type (might be due to invalid IL or missing references)
		//IL_f013: Unknown result type (might be due to invalid IL or missing references)
		//IL_ece4: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed06: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec76: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec96: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb07: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb29: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb57: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb95: Unknown result type (might be due to invalid IL or missing references)
		//IL_ebc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_ebcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_ebff: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec05: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec37: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_ea99: Unknown result type (might be due to invalid IL or missing references)
		//IL_eab9: Unknown result type (might be due to invalid IL or missing references)
		//IL_eabf: Unknown result type (might be due to invalid IL or missing references)
		//IL_c097: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee53: Unknown result type (might be due to invalid IL or missing references)
		//IL_edbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_eddd: Unknown result type (might be due to invalid IL or missing references)
		//IL_ede3: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed56: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed66: Unknown result type (might be due to invalid IL or missing references)
		//IL_f0ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_f0dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_f0e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_f04c: Unknown result type (might be due to invalid IL or missing references)
		//IL_f06c: Unknown result type (might be due to invalid IL or missing references)
		//IL_f072: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_eea3: Unknown result type (might be due to invalid IL or missing references)
		//IL_eead: Unknown result type (might be due to invalid IL or missing references)
		//IL_f265: Unknown result type (might be due to invalid IL or missing references)
		//IL_f287: Unknown result type (might be due to invalid IL or missing references)
		//IL_f28d: Unknown result type (might be due to invalid IL or missing references)
		//IL_f1fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_f21a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f220: Unknown result type (might be due to invalid IL or missing references)
		//IL_f342: Unknown result type (might be due to invalid IL or missing references)
		//IL_f364: Unknown result type (might be due to invalid IL or missing references)
		//IL_f36a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f2d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_f2f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_f2fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_f12c: Unknown result type (might be due to invalid IL or missing references)
		//IL_f132: Unknown result type (might be due to invalid IL or missing references)
		//IL_f13c: Unknown result type (might be due to invalid IL or missing references)
		//IL_f423: Unknown result type (might be due to invalid IL or missing references)
		//IL_f44c: Unknown result type (might be due to invalid IL or missing references)
		//IL_f477: Unknown result type (might be due to invalid IL or missing references)
		//IL_f47d: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3db: Unknown result type (might be due to invalid IL or missing references)
		//IL_f193: Unknown result type (might be due to invalid IL or missing references)
		//IL_f199: Unknown result type (might be due to invalid IL or missing references)
		//IL_f1a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb14: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb43: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb49: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb79: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb83: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb88: Unknown result type (might be due to invalid IL or missing references)
		//IL_f549: Unknown result type (might be due to invalid IL or missing references)
		//IL_f4c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_f4e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_f4ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_fc64: Unknown result type (might be due to invalid IL or missing references)
		//IL_fc8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_fbf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_fc1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_f5a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_f5c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_f5c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_fd47: Unknown result type (might be due to invalid IL or missing references)
		//IL_fd6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_fd99: Unknown result type (might be due to invalid IL or missing references)
		//IL_fd9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_fcda: Unknown result type (might be due to invalid IL or missing references)
		//IL_fcff: Unknown result type (might be due to invalid IL or missing references)
		//IL_f639: Unknown result type (might be due to invalid IL or missing references)
		//IL_f63f: Unknown result type (might be due to invalid IL or missing references)
		//IL_f68f: Unknown result type (might be due to invalid IL or missing references)
		//IL_f695: Unknown result type (might be due to invalid IL or missing references)
		//IL_f6e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_f6eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_f73b: Unknown result type (might be due to invalid IL or missing references)
		//IL_f741: Unknown result type (might be due to invalid IL or missing references)
		//IL_f791: Unknown result type (might be due to invalid IL or missing references)
		//IL_f797: Unknown result type (might be due to invalid IL or missing references)
		//IL_f7e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_f7ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_f804: Unknown result type (might be due to invalid IL or missing references)
		//IL_f80a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f821: Unknown result type (might be due to invalid IL or missing references)
		//IL_f827: Unknown result type (might be due to invalid IL or missing references)
		//IL_f83e: Unknown result type (might be due to invalid IL or missing references)
		//IL_f844: Unknown result type (might be due to invalid IL or missing references)
		//IL_f85b: Unknown result type (might be due to invalid IL or missing references)
		//IL_f861: Unknown result type (might be due to invalid IL or missing references)
		//IL_f878: Unknown result type (might be due to invalid IL or missing references)
		//IL_f87e: Unknown result type (might be due to invalid IL or missing references)
		//IL_f895: Unknown result type (might be due to invalid IL or missing references)
		//IL_f89b: Unknown result type (might be due to invalid IL or missing references)
		//IL_f8b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_f8b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe43: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe65: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe96: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_fdd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_fdf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_fdfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa95: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_fab2: Unknown result type (might be due to invalid IL or missing references)
		//IL_fab8: Unknown result type (might be due to invalid IL or missing references)
		//IL_facf: Unknown result type (might be due to invalid IL or missing references)
		//IL_fad5: Unknown result type (might be due to invalid IL or missing references)
		//IL_f91d: Unknown result type (might be due to invalid IL or missing references)
		//IL_f923: Unknown result type (might be due to invalid IL or missing references)
		//IL_f973: Unknown result type (might be due to invalid IL or missing references)
		//IL_f979: Unknown result type (might be due to invalid IL or missing references)
		//IL_f9c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_f9cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa25: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa42: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa59: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa76: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_fee8: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff10: Unknown result type (might be due to invalid IL or missing references)
		//IL_100b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_100b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_100c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_100c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffce: Unknown result type (might be due to invalid IL or missing references)
		//IL_fff0: Unknown result type (might be due to invalid IL or missing references)
		//IL_fff6: Unknown result type (might be due to invalid IL or missing references)
		//IL_100f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_10118: Unknown result type (might be due to invalid IL or missing references)
		//IL_1011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_101d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_101f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_101f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_102fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1031e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10324: Unknown result type (might be due to invalid IL or missing references)
		//IL_1028f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10295: Unknown result type (might be due to invalid IL or missing references)
		//IL_10428: Unknown result type (might be due to invalid IL or missing references)
		//IL_1044a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10450: Unknown result type (might be due to invalid IL or missing references)
		//IL_103bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_103c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_102b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_102be: Unknown result type (might be due to invalid IL or missing references)
		//IL_103e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_103ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_105f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1061b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10621: Unknown result type (might be due to invalid IL or missing references)
		//IL_10512: Unknown result type (might be due to invalid IL or missing references)
		//IL_10541: Unknown result type (might be due to invalid IL or missing references)
		//IL_10547: Unknown result type (might be due to invalid IL or missing references)
		//IL_106d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_106f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_106f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_10882: Unknown result type (might be due to invalid IL or missing references)
		//IL_108a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_108ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_108dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_108e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_108eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_107aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_107c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_107cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_109f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_109ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a16: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b13: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b30: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c21: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c27: Unknown result type (might be due to invalid IL or missing references)
		//IL_10947: Unknown result type (might be due to invalid IL or missing references)
		//IL_10969: Unknown result type (might be due to invalid IL or missing references)
		//IL_1096f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a83: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b91: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b97: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d87: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10dcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_10dd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_10dde: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e01: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e07: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ca8: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cae: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cff: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f15: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f32: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f38: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f86: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e53: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e70: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e76: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ec4: Unknown result type (might be due to invalid IL or missing references)
		//IL_11078: Unknown result type (might be due to invalid IL or missing references)
		//IL_11095: Unknown result type (might be due to invalid IL or missing references)
		//IL_1109b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ff3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11010: Unknown result type (might be due to invalid IL or missing references)
		//IL_11016: Unknown result type (might be due to invalid IL or missing references)
		//IL_1123f: Unknown result type (might be due to invalid IL or missing references)
		//IL_11260: Unknown result type (might be due to invalid IL or missing references)
		//IL_11266: Unknown result type (might be due to invalid IL or missing references)
		//IL_111a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_111d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1112d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1115b: Unknown result type (might be due to invalid IL or missing references)
		//IL_112d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_112dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_112e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_113ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_113cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_11402: Unknown result type (might be due to invalid IL or missing references)
		//IL_1140c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11411: Unknown result type (might be due to invalid IL or missing references)
		//IL_11339: Unknown result type (might be due to invalid IL or missing references)
		//IL_11360: Unknown result type (might be due to invalid IL or missing references)
		//IL_114cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_114ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_11520: Unknown result type (might be due to invalid IL or missing references)
		//IL_1152a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1152f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1145d: Unknown result type (might be due to invalid IL or missing references)
		//IL_11481: Unknown result type (might be due to invalid IL or missing references)
		//IL_11628: Unknown result type (might be due to invalid IL or missing references)
		//IL_1162e: Unknown result type (might be due to invalid IL or missing references)
		//IL_11953: Unknown result type (might be due to invalid IL or missing references)
		//IL_11974: Unknown result type (might be due to invalid IL or missing references)
		//IL_1197a: Unknown result type (might be due to invalid IL or missing references)
		//IL_119aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_119b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_119b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_118a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_118cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_118d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_11901: Unknown result type (might be due to invalid IL or missing references)
		//IL_1190b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11910: Unknown result type (might be due to invalid IL or missing references)
		//IL_11aaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_11acb: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ad1: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b01: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b10: Unknown result type (might be due to invalid IL or missing references)
		//IL_119fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a22: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a28: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a58: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a62: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a67: Unknown result type (might be due to invalid IL or missing references)
		//IL_11bc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_11be0: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c13: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c22: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b52: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b75: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d36: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d52: Unknown result type (might be due to invalid IL or missing references)
		//IL_11cd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_11cee: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e75: Unknown result type (might be due to invalid IL or missing references)
		//IL_11db8: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ddb: Unknown result type (might be due to invalid IL or missing references)
		//IL_11de1: Unknown result type (might be due to invalid IL or missing references)
		//IL_121da: Unknown result type (might be due to invalid IL or missing references)
		//IL_12204: Unknown result type (might be due to invalid IL or missing references)
		//IL_12232: Unknown result type (might be due to invalid IL or missing references)
		//IL_12246: Unknown result type (might be due to invalid IL or missing references)
		//IL_1224b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12251: Unknown result type (might be due to invalid IL or missing references)
		//IL_1216b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12193: Unknown result type (might be due to invalid IL or missing references)
		//IL_11eed: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f05: Unknown result type (might be due to invalid IL or missing references)
		//IL_124b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_124d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_124d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_124ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_12505: Unknown result type (might be due to invalid IL or missing references)
		//IL_1251b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12521: Unknown result type (might be due to invalid IL or missing references)
		//IL_12537: Unknown result type (might be due to invalid IL or missing references)
		//IL_1253d: Unknown result type (might be due to invalid IL or missing references)
		//IL_12553: Unknown result type (might be due to invalid IL or missing references)
		//IL_12559: Unknown result type (might be due to invalid IL or missing references)
		//IL_1244d: Unknown result type (might be due to invalid IL or missing references)
		//IL_12469: Unknown result type (might be due to invalid IL or missing references)
		//IL_1246f: Unknown result type (might be due to invalid IL or missing references)
		//IL_125f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12616: Unknown result type (might be due to invalid IL or missing references)
		//IL_1261c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12644: Unknown result type (might be due to invalid IL or missing references)
		//IL_1264a: Unknown result type (might be due to invalid IL or missing references)
		//IL_12660: Unknown result type (might be due to invalid IL or missing references)
		//IL_12666: Unknown result type (might be due to invalid IL or missing references)
		//IL_1267c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12682: Unknown result type (might be due to invalid IL or missing references)
		//IL_12698: Unknown result type (might be due to invalid IL or missing references)
		//IL_1269e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12592: Unknown result type (might be due to invalid IL or missing references)
		//IL_125ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_125b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1274d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1276b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12771: Unknown result type (might be due to invalid IL or missing references)
		//IL_127ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_127b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_127d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_127d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_126e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_12703: Unknown result type (might be due to invalid IL or missing references)
		//IL_12709: Unknown result type (might be due to invalid IL or missing references)
		//IL_1288c: Unknown result type (might be due to invalid IL or missing references)
		//IL_128aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_128b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_128ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_128f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_12826: Unknown result type (might be due to invalid IL or missing references)
		//IL_12842: Unknown result type (might be due to invalid IL or missing references)
		//IL_12848: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b64: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b82: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b88: Unknown result type (might be due to invalid IL or missing references)
		//IL_12afe: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b20: Unknown result type (might be due to invalid IL or missing references)
		//IL_129a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_129c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_129ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a04: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a42: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a48: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a80: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a86: Unknown result type (might be due to invalid IL or missing references)
		//IL_12940: Unknown result type (might be due to invalid IL or missing references)
		//IL_1295c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12962: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bba: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bde: Unknown result type (might be due to invalid IL or missing references)
		//IL_12be4: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c05: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c21: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c27: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c51: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c67: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c83: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c89: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d24: Unknown result type (might be due to invalid IL or missing references)
		//IL_12cad: Unknown result type (might be due to invalid IL or missing references)
		//IL_12cb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_12cc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ccf: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ce5: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ceb: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d01: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d07: Unknown result type (might be due to invalid IL or missing references)
		//IL_12dc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_12dde: Unknown result type (might be due to invalid IL or missing references)
		//IL_12de4: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e12: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e28: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e44: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d76: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ee9: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f07: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f35: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f51: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f57: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f73: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f89: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e83: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ea5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1302e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1304c: Unknown result type (might be due to invalid IL or missing references)
		//IL_13052: Unknown result type (might be due to invalid IL or missing references)
		//IL_1307a: Unknown result type (might be due to invalid IL or missing references)
		//IL_13080: Unknown result type (might be due to invalid IL or missing references)
		//IL_13096: Unknown result type (might be due to invalid IL or missing references)
		//IL_1309c: Unknown result type (might be due to invalid IL or missing references)
		//IL_130b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_130b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_130ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_130d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fe4: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fea: Unknown result type (might be due to invalid IL or missing references)
		//IL_135c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_135e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_135e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1355e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1357a: Unknown result type (might be due to invalid IL or missing references)
		//IL_13580: Unknown result type (might be due to invalid IL or missing references)
		//IL_131b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_131d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_131de: Unknown result type (might be due to invalid IL or missing references)
		//IL_1321a: Unknown result type (might be due to invalid IL or missing references)
		//IL_13220: Unknown result type (might be due to invalid IL or missing references)
		//IL_1323d: Unknown result type (might be due to invalid IL or missing references)
		//IL_13243: Unknown result type (might be due to invalid IL or missing references)
		//IL_1314a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1316b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13171: Unknown result type (might be due to invalid IL or missing references)
		//IL_13644: Unknown result type (might be due to invalid IL or missing references)
		//IL_1364a: Unknown result type (might be due to invalid IL or missing references)
		//IL_13672: Unknown result type (might be due to invalid IL or missing references)
		//IL_13678: Unknown result type (might be due to invalid IL or missing references)
		//IL_1332b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1334e: Unknown result type (might be due to invalid IL or missing references)
		//IL_13354: Unknown result type (might be due to invalid IL or missing references)
		//IL_1337c: Unknown result type (might be due to invalid IL or missing references)
		//IL_13382: Unknown result type (might be due to invalid IL or missing references)
		//IL_132c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_132e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_132e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_13701: Unknown result type (might be due to invalid IL or missing references)
		//IL_13707: Unknown result type (might be due to invalid IL or missing references)
		//IL_136a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_136c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_136c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_13728: Unknown result type (might be due to invalid IL or missing references)
		//IL_1372e: Unknown result type (might be due to invalid IL or missing references)
		//IL_13741: Unknown result type (might be due to invalid IL or missing references)
		//IL_13747: Unknown result type (might be due to invalid IL or missing references)
		//IL_1375a: Unknown result type (might be due to invalid IL or missing references)
		//IL_13760: Unknown result type (might be due to invalid IL or missing references)
		//IL_1378b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13791: Unknown result type (might be due to invalid IL or missing references)
		//IL_137a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_137ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_137d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_137d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_137ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_137f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_13809: Unknown result type (might be due to invalid IL or missing references)
		//IL_1380f: Unknown result type (might be due to invalid IL or missing references)
		//IL_13825: Unknown result type (might be due to invalid IL or missing references)
		//IL_1382b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1384c: Unknown result type (might be due to invalid IL or missing references)
		//IL_13852: Unknown result type (might be due to invalid IL or missing references)
		//IL_13873: Unknown result type (might be due to invalid IL or missing references)
		//IL_13879: Unknown result type (might be due to invalid IL or missing references)
		//IL_1389d: Unknown result type (might be due to invalid IL or missing references)
		//IL_138a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_138c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_138cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_138e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_138f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_138f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_138fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_13913: Unknown result type (might be due to invalid IL or missing references)
		//IL_13922: Unknown result type (might be due to invalid IL or missing references)
		//IL_13927: Unknown result type (might be due to invalid IL or missing references)
		//IL_1392d: Unknown result type (might be due to invalid IL or missing references)
		//IL_13951: Unknown result type (might be due to invalid IL or missing references)
		//IL_13957: Unknown result type (might be due to invalid IL or missing references)
		//IL_1396d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1397c: Unknown result type (might be due to invalid IL or missing references)
		//IL_13981: Unknown result type (might be due to invalid IL or missing references)
		//IL_13987: Unknown result type (might be due to invalid IL or missing references)
		//IL_1399d: Unknown result type (might be due to invalid IL or missing references)
		//IL_139ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_139b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_139b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_139db: Unknown result type (might be due to invalid IL or missing references)
		//IL_139e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_139f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a06: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a11: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a27: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a36: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a41: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a65: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a81: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a90: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a95: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ab1: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ac0: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ac5: Unknown result type (might be due to invalid IL or missing references)
		//IL_13acb: Unknown result type (might be due to invalid IL or missing references)
		//IL_13aef: Unknown result type (might be due to invalid IL or missing references)
		//IL_13af5: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b25: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b55: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b79: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ba3: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ba9: Unknown result type (might be due to invalid IL or missing references)
		//IL_13bcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_13bd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_13bf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_13bfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c21: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c27: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c48: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c75: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c91: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d57: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d73: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d79: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d95: Unknown result type (might be due to invalid IL or missing references)
		//IL_13dab: Unknown result type (might be due to invalid IL or missing references)
		//IL_13db1: Unknown result type (might be due to invalid IL or missing references)
		//IL_13dd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ddb: Unknown result type (might be due to invalid IL or missing references)
		//IL_13df1: Unknown result type (might be due to invalid IL or missing references)
		//IL_13df7: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e13: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e29: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_13cc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ce3: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ce9: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d11: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d17: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d33: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e56: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e72: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e78: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e94: Unknown result type (might be due to invalid IL or missing references)
		//IL_13eaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_13eb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f76: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f94: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f10: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f32: Unknown result type (might be due to invalid IL or missing references)
		//IL_13fcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_13fd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_14000: Unknown result type (might be due to invalid IL or missing references)
		//IL_14006: Unknown result type (might be due to invalid IL or missing references)
		//IL_1402a: Unknown result type (might be due to invalid IL or missing references)
		//IL_14030: Unknown result type (might be due to invalid IL or missing references)
		//IL_1405b: Unknown result type (might be due to invalid IL or missing references)
		//IL_14061: Unknown result type (might be due to invalid IL or missing references)
		//IL_14085: Unknown result type (might be due to invalid IL or missing references)
		//IL_1408b: Unknown result type (might be due to invalid IL or missing references)
		//IL_140b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_140bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_142da: Unknown result type (might be due to invalid IL or missing references)
		//IL_142e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_142e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_142ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_142f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_140e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_140e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_140ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_14105: Unknown result type (might be due to invalid IL or missing references)
		//IL_1411b: Unknown result type (might be due to invalid IL or missing references)
		//IL_14121: Unknown result type (might be due to invalid IL or missing references)
		//IL_14380: Unknown result type (might be due to invalid IL or missing references)
		//IL_1438a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1438f: Unknown result type (might be due to invalid IL or missing references)
		//IL_14394: Unknown result type (might be due to invalid IL or missing references)
		//IL_1439a: Unknown result type (might be due to invalid IL or missing references)
		//IL_141c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_141de: Unknown result type (might be due to invalid IL or missing references)
		//IL_141e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1420c: Unknown result type (might be due to invalid IL or missing references)
		//IL_14212: Unknown result type (might be due to invalid IL or missing references)
		//IL_1423d: Unknown result type (might be due to invalid IL or missing references)
		//IL_14243: Unknown result type (might be due to invalid IL or missing references)
		//IL_1415a: Unknown result type (might be due to invalid IL or missing references)
		//IL_14176: Unknown result type (might be due to invalid IL or missing references)
		//IL_1417c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1427c: Unknown result type (might be due to invalid IL or missing references)
		//IL_14299: Unknown result type (might be due to invalid IL or missing references)
		//IL_1429f: Unknown result type (might be due to invalid IL or missing references)
		//IL_14323: Unknown result type (might be due to invalid IL or missing references)
		//IL_1433f: Unknown result type (might be due to invalid IL or missing references)
		//IL_14345: Unknown result type (might be due to invalid IL or missing references)
		//IL_14430: Unknown result type (might be due to invalid IL or missing references)
		//IL_1444e: Unknown result type (might be due to invalid IL or missing references)
		//IL_14454: Unknown result type (might be due to invalid IL or missing references)
		//IL_1447c: Unknown result type (might be due to invalid IL or missing references)
		//IL_14482: Unknown result type (might be due to invalid IL or missing references)
		//IL_144ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_144b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_143c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_143e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_143ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_14563: Unknown result type (might be due to invalid IL or missing references)
		//IL_14585: Unknown result type (might be due to invalid IL or missing references)
		//IL_1458b: Unknown result type (might be due to invalid IL or missing references)
		//IL_144f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_14519: Unknown result type (might be due to invalid IL or missing references)
		//IL_1451f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1463f: Unknown result type (might be due to invalid IL or missing references)
		//IL_14645: Unknown result type (might be due to invalid IL or missing references)
		//IL_14670: Unknown result type (might be due to invalid IL or missing references)
		//IL_14676: Unknown result type (might be due to invalid IL or missing references)
		//IL_146a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_146a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_145c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_145c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_145f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_145f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_14622: Unknown result type (might be due to invalid IL or missing references)
		//IL_14628: Unknown result type (might be due to invalid IL or missing references)
		//IL_1494f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1496d: Unknown result type (might be due to invalid IL or missing references)
		//IL_14973: Unknown result type (might be due to invalid IL or missing references)
		//IL_148e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_14905: Unknown result type (might be due to invalid IL or missing references)
		//IL_1490b: Unknown result type (might be due to invalid IL or missing references)
		//IL_14756: Unknown result type (might be due to invalid IL or missing references)
		//IL_14774: Unknown result type (might be due to invalid IL or missing references)
		//IL_1477a: Unknown result type (might be due to invalid IL or missing references)
		//IL_146f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1470c: Unknown result type (might be due to invalid IL or missing references)
		//IL_14712: Unknown result type (might be due to invalid IL or missing references)
		//IL_149cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_149d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_149fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a04: Unknown result type (might be due to invalid IL or missing references)
		//IL_147bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_147c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_147ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_147f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1481e: Unknown result type (might be due to invalid IL or missing references)
		//IL_14824: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ab0: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ace: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ad4: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a66: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1483b: Unknown result type (might be due to invalid IL or missing references)
		//IL_14841: Unknown result type (might be due to invalid IL or missing references)
		//IL_1486c: Unknown result type (might be due to invalid IL or missing references)
		//IL_14872: Unknown result type (might be due to invalid IL or missing references)
		//IL_1489d: Unknown result type (might be due to invalid IL or missing references)
		//IL_148a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b34: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b65: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b90: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b96: Unknown result type (might be due to invalid IL or missing references)
		//IL_14c42: Unknown result type (might be due to invalid IL or missing references)
		//IL_14c60: Unknown result type (might be due to invalid IL or missing references)
		//IL_14c66: Unknown result type (might be due to invalid IL or missing references)
		//IL_14c8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_14c94: Unknown result type (might be due to invalid IL or missing references)
		//IL_14caa: Unknown result type (might be due to invalid IL or missing references)
		//IL_14cb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_14cc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ccc: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ce2: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ce8: Unknown result type (might be due to invalid IL or missing references)
		//IL_14cfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_14d04: Unknown result type (might be due to invalid IL or missing references)
		//IL_14bdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_14bf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_14bfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_14da3: Unknown result type (might be due to invalid IL or missing references)
		//IL_14dc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_14dc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_14def: Unknown result type (might be due to invalid IL or missing references)
		//IL_14df5: Unknown result type (might be due to invalid IL or missing references)
		//IL_14e0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_14e11: Unknown result type (might be due to invalid IL or missing references)
		//IL_14e27: Unknown result type (might be due to invalid IL or missing references)
		//IL_14e2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_14e43: Unknown result type (might be due to invalid IL or missing references)
		//IL_14e49: Unknown result type (might be due to invalid IL or missing references)
		//IL_14e5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_14e65: Unknown result type (might be due to invalid IL or missing references)
		//IL_14d3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_14d59: Unknown result type (might be due to invalid IL or missing references)
		//IL_14d5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_14f04: Unknown result type (might be due to invalid IL or missing references)
		//IL_14f22: Unknown result type (might be due to invalid IL or missing references)
		//IL_14f28: Unknown result type (might be due to invalid IL or missing references)
		//IL_14f50: Unknown result type (might be due to invalid IL or missing references)
		//IL_14f56: Unknown result type (might be due to invalid IL or missing references)
		//IL_14f6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_14f72: Unknown result type (might be due to invalid IL or missing references)
		//IL_14f88: Unknown result type (might be due to invalid IL or missing references)
		//IL_14f8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_14fa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_14faa: Unknown result type (might be due to invalid IL or missing references)
		//IL_14e9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_14eba: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ec0: Unknown result type (might be due to invalid IL or missing references)
		//IL_15074: Unknown result type (might be due to invalid IL or missing references)
		//IL_15092: Unknown result type (might be due to invalid IL or missing references)
		//IL_15098: Unknown result type (might be due to invalid IL or missing references)
		//IL_1500e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1502a: Unknown result type (might be due to invalid IL or missing references)
		//IL_15030: Unknown result type (might be due to invalid IL or missing references)
		//IL_150df: Unknown result type (might be due to invalid IL or missing references)
		//IL_150e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_15118: Unknown result type (might be due to invalid IL or missing references)
		//IL_1511e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1513f: Unknown result type (might be due to invalid IL or missing references)
		//IL_15145: Unknown result type (might be due to invalid IL or missing references)
		//IL_1515b: Unknown result type (might be due to invalid IL or missing references)
		//IL_15161: Unknown result type (might be due to invalid IL or missing references)
		//IL_151be: Unknown result type (might be due to invalid IL or missing references)
		//IL_151c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_151ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_151f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_15185: Unknown result type (might be due to invalid IL or missing references)
		//IL_1518b: Unknown result type (might be due to invalid IL or missing references)
		//IL_151a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_151a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_152c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_152ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_152f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1525c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1527d: Unknown result type (might be due to invalid IL or missing references)
		//IL_15283: Unknown result type (might be due to invalid IL or missing references)
		//IL_15325: Unknown result type (might be due to invalid IL or missing references)
		//IL_1532b: Unknown result type (might be due to invalid IL or missing references)
		//IL_15341: Unknown result type (might be due to invalid IL or missing references)
		//IL_15347: Unknown result type (might be due to invalid IL or missing references)
		//IL_1536b: Unknown result type (might be due to invalid IL or missing references)
		//IL_15371: Unknown result type (might be due to invalid IL or missing references)
		//IL_15387: Unknown result type (might be due to invalid IL or missing references)
		//IL_1538d: Unknown result type (might be due to invalid IL or missing references)
		//IL_153b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_153b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_153db: Unknown result type (might be due to invalid IL or missing references)
		//IL_153e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_153f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_153fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_15424: Unknown result type (might be due to invalid IL or missing references)
		//IL_1542a: Unknown result type (might be due to invalid IL or missing references)
		//IL_15440: Unknown result type (might be due to invalid IL or missing references)
		//IL_15446: Unknown result type (might be due to invalid IL or missing references)
		//IL_1545c: Unknown result type (might be due to invalid IL or missing references)
		//IL_15462: Unknown result type (might be due to invalid IL or missing references)
		//IL_15558: Unknown result type (might be due to invalid IL or missing references)
		//IL_15576: Unknown result type (might be due to invalid IL or missing references)
		//IL_1557c: Unknown result type (might be due to invalid IL or missing references)
		//IL_154f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1550e: Unknown result type (might be due to invalid IL or missing references)
		//IL_15514: Unknown result type (might be due to invalid IL or missing references)
		//IL_155b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_155b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_155e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_155ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_15610: Unknown result type (might be due to invalid IL or missing references)
		//IL_15616: Unknown result type (might be due to invalid IL or missing references)
		//IL_15648: Unknown result type (might be due to invalid IL or missing references)
		//IL_1564e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1566f: Unknown result type (might be due to invalid IL or missing references)
		//IL_15675: Unknown result type (might be due to invalid IL or missing references)
		//IL_156a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_156ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_156ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_156d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_15706: Unknown result type (might be due to invalid IL or missing references)
		//IL_1570c: Unknown result type (might be due to invalid IL or missing references)
		//IL_15731: Unknown result type (might be due to invalid IL or missing references)
		//IL_15737: Unknown result type (might be due to invalid IL or missing references)
		//IL_15769: Unknown result type (might be due to invalid IL or missing references)
		//IL_1576f: Unknown result type (might be due to invalid IL or missing references)
		//IL_15794: Unknown result type (might be due to invalid IL or missing references)
		//IL_1579a: Unknown result type (might be due to invalid IL or missing references)
		//IL_157cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_157d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1584d: Unknown result type (might be due to invalid IL or missing references)
		//IL_15853: Unknown result type (might be due to invalid IL or missing references)
		//IL_15881: Unknown result type (might be due to invalid IL or missing references)
		//IL_15887: Unknown result type (might be due to invalid IL or missing references)
		//IL_157f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_157fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1582f: Unknown result type (might be due to invalid IL or missing references)
		//IL_15835: Unknown result type (might be due to invalid IL or missing references)
		//IL_15923: Unknown result type (might be due to invalid IL or missing references)
		//IL_15941: Unknown result type (might be due to invalid IL or missing references)
		//IL_15947: Unknown result type (might be due to invalid IL or missing references)
		//IL_1596f: Unknown result type (might be due to invalid IL or missing references)
		//IL_15975: Unknown result type (might be due to invalid IL or missing references)
		//IL_159a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_159ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_158bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_158d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_158df: Unknown result type (might be due to invalid IL or missing references)
		//IL_15a9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_15abc: Unknown result type (might be due to invalid IL or missing references)
		//IL_15ac2: Unknown result type (might be due to invalid IL or missing references)
		//IL_15aea: Unknown result type (might be due to invalid IL or missing references)
		//IL_15af0: Unknown result type (might be due to invalid IL or missing references)
		//IL_15b21: Unknown result type (might be due to invalid IL or missing references)
		//IL_15b27: Unknown result type (might be due to invalid IL or missing references)
		//IL_159e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_15a04: Unknown result type (might be due to invalid IL or missing references)
		//IL_15a0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c61: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c67: Unknown result type (might be due to invalid IL or missing references)
		//IL_15bd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_15bf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_15bfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_15a7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_15a82: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_15ca4: Unknown result type (might be due to invalid IL or missing references)
		//IL_15cb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_15cbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_15cde: Unknown result type (might be due to invalid IL or missing references)
		//IL_15ce4: Unknown result type (might be due to invalid IL or missing references)
		//IL_15cfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d00: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d16: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d32: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d38: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d65: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d81: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d97: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_15db3: Unknown result type (might be due to invalid IL or missing references)
		//IL_15db9: Unknown result type (might be due to invalid IL or missing references)
		//IL_15dcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_15dd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_15df9: Unknown result type (might be due to invalid IL or missing references)
		//IL_15dff: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e15: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e31: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e37: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e53: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e80: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e96: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_15eb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_15eb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_15ece: Unknown result type (might be due to invalid IL or missing references)
		//IL_15ed4: Unknown result type (might be due to invalid IL or missing references)
		//IL_15eea: Unknown result type (might be due to invalid IL or missing references)
		//IL_15ef0: Unknown result type (might be due to invalid IL or missing references)
		//IL_15fd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_15ff3: Unknown result type (might be due to invalid IL or missing references)
		//IL_15ff9: Unknown result type (might be due to invalid IL or missing references)
		//IL_16021: Unknown result type (might be due to invalid IL or missing references)
		//IL_16027: Unknown result type (might be due to invalid IL or missing references)
		//IL_16055: Unknown result type (might be due to invalid IL or missing references)
		//IL_1605b: Unknown result type (might be due to invalid IL or missing references)
		//IL_16089: Unknown result type (might be due to invalid IL or missing references)
		//IL_1608f: Unknown result type (might be due to invalid IL or missing references)
		//IL_15f6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_15f8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_15f91: Unknown result type (might be due to invalid IL or missing references)
		//IL_15f17: Unknown result type (might be due to invalid IL or missing references)
		//IL_15f1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_15f33: Unknown result type (might be due to invalid IL or missing references)
		//IL_15f39: Unknown result type (might be due to invalid IL or missing references)
		//IL_1612b: Unknown result type (might be due to invalid IL or missing references)
		//IL_16149: Unknown result type (might be due to invalid IL or missing references)
		//IL_1614f: Unknown result type (might be due to invalid IL or missing references)
		//IL_16177: Unknown result type (might be due to invalid IL or missing references)
		//IL_1617d: Unknown result type (might be due to invalid IL or missing references)
		//IL_161ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_161b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_160c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_160e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_160e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_16253: Unknown result type (might be due to invalid IL or missing references)
		//IL_16271: Unknown result type (might be due to invalid IL or missing references)
		//IL_16277: Unknown result type (might be due to invalid IL or missing references)
		//IL_1629f: Unknown result type (might be due to invalid IL or missing references)
		//IL_162a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_162bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_162c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_161ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_16209: Unknown result type (might be due to invalid IL or missing references)
		//IL_1620f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1636d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1638f: Unknown result type (might be due to invalid IL or missing references)
		//IL_16395: Unknown result type (might be due to invalid IL or missing references)
		//IL_16307: Unknown result type (might be due to invalid IL or missing references)
		//IL_16323: Unknown result type (might be due to invalid IL or missing references)
		//IL_16329: Unknown result type (might be due to invalid IL or missing references)
		//IL_163cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_163d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_16405: Unknown result type (might be due to invalid IL or missing references)
		//IL_1640b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1643d: Unknown result type (might be due to invalid IL or missing references)
		//IL_16443: Unknown result type (might be due to invalid IL or missing references)
		//IL_16475: Unknown result type (might be due to invalid IL or missing references)
		//IL_1647b: Unknown result type (might be due to invalid IL or missing references)
		//IL_164ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_164b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_164da: Unknown result type (might be due to invalid IL or missing references)
		//IL_164e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_16512: Unknown result type (might be due to invalid IL or missing references)
		//IL_16518: Unknown result type (might be due to invalid IL or missing references)
		//IL_1654a: Unknown result type (might be due to invalid IL or missing references)
		//IL_16550: Unknown result type (might be due to invalid IL or missing references)
		//IL_16582: Unknown result type (might be due to invalid IL or missing references)
		//IL_16588: Unknown result type (might be due to invalid IL or missing references)
		//IL_165ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_165c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_16660: Unknown result type (might be due to invalid IL or missing references)
		//IL_16682: Unknown result type (might be due to invalid IL or missing references)
		//IL_16688: Unknown result type (might be due to invalid IL or missing references)
		//IL_166b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_166b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_166e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_166ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_16720: Unknown result type (might be due to invalid IL or missing references)
		//IL_16726: Unknown result type (might be due to invalid IL or missing references)
		//IL_16758: Unknown result type (might be due to invalid IL or missing references)
		//IL_1675e: Unknown result type (might be due to invalid IL or missing references)
		//IL_16790: Unknown result type (might be due to invalid IL or missing references)
		//IL_16796: Unknown result type (might be due to invalid IL or missing references)
		//IL_165fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_16616: Unknown result type (might be due to invalid IL or missing references)
		//IL_1661c: Unknown result type (might be due to invalid IL or missing references)
		//IL_16836: Unknown result type (might be due to invalid IL or missing references)
		//IL_16858: Unknown result type (might be due to invalid IL or missing references)
		//IL_1685e: Unknown result type (might be due to invalid IL or missing references)
		//IL_16886: Unknown result type (might be due to invalid IL or missing references)
		//IL_1688c: Unknown result type (might be due to invalid IL or missing references)
		//IL_168a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_168a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_168c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_168c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_168dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_168e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_16906: Unknown result type (might be due to invalid IL or missing references)
		//IL_1690c: Unknown result type (might be due to invalid IL or missing references)
		//IL_167d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_167ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_167f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_169d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_169f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_169f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1696c: Unknown result type (might be due to invalid IL or missing references)
		//IL_16988: Unknown result type (might be due to invalid IL or missing references)
		//IL_1698e: Unknown result type (might be due to invalid IL or missing references)
		//IL_16a2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_16a31: Unknown result type (might be due to invalid IL or missing references)
		//IL_16a3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_16a69: Unknown result type (might be due to invalid IL or missing references)
		//IL_16a6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_16a79: Unknown result type (might be due to invalid IL or missing references)
		//IL_16aa7: Unknown result type (might be due to invalid IL or missing references)
		//IL_16aad: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ab7: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ae5: Unknown result type (might be due to invalid IL or missing references)
		//IL_16aeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_16af5: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b18: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b28: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b59: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b69: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ba0: Unknown result type (might be due to invalid IL or missing references)
		//IL_16baa: Unknown result type (might be due to invalid IL or missing references)
		//IL_16bdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_16be1: Unknown result type (might be due to invalid IL or missing references)
		//IL_16beb: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f82: Unknown result type (might be due to invalid IL or missing references)
		//IL_16fa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_16fa6: Unknown result type (might be due to invalid IL or missing references)
		//IL_16fce: Unknown result type (might be due to invalid IL or missing references)
		//IL_16fd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_17006: Unknown result type (might be due to invalid IL or missing references)
		//IL_1700c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1703e: Unknown result type (might be due to invalid IL or missing references)
		//IL_17044: Unknown result type (might be due to invalid IL or missing references)
		//IL_17076: Unknown result type (might be due to invalid IL or missing references)
		//IL_1707c: Unknown result type (might be due to invalid IL or missing references)
		//IL_170ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_170b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f38: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_16c11: Unknown result type (might be due to invalid IL or missing references)
		//IL_16c17: Unknown result type (might be due to invalid IL or missing references)
		//IL_16c21: Unknown result type (might be due to invalid IL or missing references)
		//IL_16c52: Unknown result type (might be due to invalid IL or missing references)
		//IL_16c58: Unknown result type (might be due to invalid IL or missing references)
		//IL_16c62: Unknown result type (might be due to invalid IL or missing references)
		//IL_16c93: Unknown result type (might be due to invalid IL or missing references)
		//IL_16c99: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ca3: Unknown result type (might be due to invalid IL or missing references)
		//IL_16cd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_16cda: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ce4: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d10: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d51: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d92: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_16dcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_16dd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ddd: Unknown result type (might be due to invalid IL or missing references)
		//IL_17161: Unknown result type (might be due to invalid IL or missing references)
		//IL_1717f: Unknown result type (might be due to invalid IL or missing references)
		//IL_17185: Unknown result type (might be due to invalid IL or missing references)
		//IL_171ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_171b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_171e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_171eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1721d: Unknown result type (might be due to invalid IL or missing references)
		//IL_17223: Unknown result type (might be due to invalid IL or missing references)
		//IL_17255: Unknown result type (might be due to invalid IL or missing references)
		//IL_1725b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1728d: Unknown result type (might be due to invalid IL or missing references)
		//IL_17293: Unknown result type (might be due to invalid IL or missing references)
		//IL_172c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_172cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_170fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_17117: Unknown result type (might be due to invalid IL or missing references)
		//IL_1711d: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e03: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e09: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e13: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e44: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e54: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e85: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e95: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ec6: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ecc: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ed6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1736f: Unknown result type (might be due to invalid IL or missing references)
		//IL_17391: Unknown result type (might be due to invalid IL or missing references)
		//IL_17397: Unknown result type (might be due to invalid IL or missing references)
		//IL_173bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_173c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_173f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_173fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1742f: Unknown result type (might be due to invalid IL or missing references)
		//IL_17435: Unknown result type (might be due to invalid IL or missing references)
		//IL_17467: Unknown result type (might be due to invalid IL or missing references)
		//IL_1746d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1749f: Unknown result type (might be due to invalid IL or missing references)
		//IL_174a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_17305: Unknown result type (might be due to invalid IL or missing references)
		//IL_17325: Unknown result type (might be due to invalid IL or missing references)
		//IL_1732b: Unknown result type (might be due to invalid IL or missing references)
		//IL_17545: Unknown result type (might be due to invalid IL or missing references)
		//IL_17567: Unknown result type (might be due to invalid IL or missing references)
		//IL_1756d: Unknown result type (might be due to invalid IL or missing references)
		//IL_17595: Unknown result type (might be due to invalid IL or missing references)
		//IL_1759b: Unknown result type (might be due to invalid IL or missing references)
		//IL_175cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_175d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_17605: Unknown result type (might be due to invalid IL or missing references)
		//IL_1760b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1763d: Unknown result type (might be due to invalid IL or missing references)
		//IL_17643: Unknown result type (might be due to invalid IL or missing references)
		//IL_17675: Unknown result type (might be due to invalid IL or missing references)
		//IL_1767b: Unknown result type (might be due to invalid IL or missing references)
		//IL_174df: Unknown result type (might be due to invalid IL or missing references)
		//IL_174fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_17501: Unknown result type (might be due to invalid IL or missing references)
		//IL_1792a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1794c: Unknown result type (might be due to invalid IL or missing references)
		//IL_17952: Unknown result type (might be due to invalid IL or missing references)
		//IL_1797a: Unknown result type (might be due to invalid IL or missing references)
		//IL_17980: Unknown result type (might be due to invalid IL or missing references)
		//IL_179b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_179b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_179ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_179f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a22: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a28: Unknown result type (might be due to invalid IL or missing references)
		//IL_178c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_178e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_178e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1772b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1774d: Unknown result type (might be due to invalid IL or missing references)
		//IL_17753: Unknown result type (might be due to invalid IL or missing references)
		//IL_176c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_176e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_176e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_17788: Unknown result type (might be due to invalid IL or missing references)
		//IL_1778e: Unknown result type (might be due to invalid IL or missing references)
		//IL_17d83: Unknown result type (might be due to invalid IL or missing references)
		//IL_17da5: Unknown result type (might be due to invalid IL or missing references)
		//IL_17dab: Unknown result type (might be due to invalid IL or missing references)
		//IL_17bc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_17be3: Unknown result type (might be due to invalid IL or missing references)
		//IL_17be9: Unknown result type (might be due to invalid IL or missing references)
		//IL_177b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_177b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_17814: Unknown result type (might be due to invalid IL or missing references)
		//IL_1781a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1784c: Unknown result type (might be due to invalid IL or missing references)
		//IL_17852: Unknown result type (might be due to invalid IL or missing references)
		//IL_17884: Unknown result type (might be due to invalid IL or missing references)
		//IL_1788a: Unknown result type (might be due to invalid IL or missing references)
		//IL_177dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_177e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_17c3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_17c43: Unknown result type (might be due to invalid IL or missing references)
		//IL_17df6: Unknown result type (might be due to invalid IL or missing references)
		//IL_17e17: Unknown result type (might be due to invalid IL or missing references)
		//IL_17e4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_17e55: Unknown result type (might be due to invalid IL or missing references)
		//IL_17e84: Unknown result type (might be due to invalid IL or missing references)
		//IL_17e8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_17eb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_17ebf: Unknown result type (might be due to invalid IL or missing references)
		//IL_17eee: Unknown result type (might be due to invalid IL or missing references)
		//IL_17ef4: Unknown result type (might be due to invalid IL or missing references)
		//IL_17f23: Unknown result type (might be due to invalid IL or missing references)
		//IL_17f29: Unknown result type (might be due to invalid IL or missing references)
		//IL_17c73: Unknown result type (might be due to invalid IL or missing references)
		//IL_17c79: Unknown result type (might be due to invalid IL or missing references)
		//IL_17f4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_17f54: Unknown result type (might be due to invalid IL or missing references)
		//IL_17f86: Unknown result type (might be due to invalid IL or missing references)
		//IL_17f8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_17fbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_17fc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_17ff6: Unknown result type (might be due to invalid IL or missing references)
		//IL_17ffc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1802e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18034: Unknown result type (might be due to invalid IL or missing references)
		//IL_18180: Unknown result type (might be due to invalid IL or missing references)
		//IL_18186: Unknown result type (might be due to invalid IL or missing references)
		//IL_181b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_181be: Unknown result type (might be due to invalid IL or missing references)
		//IL_181f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_181f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_18228: Unknown result type (might be due to invalid IL or missing references)
		//IL_1822e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18260: Unknown result type (might be due to invalid IL or missing references)
		//IL_18266: Unknown result type (might be due to invalid IL or missing references)
		//IL_17ca5: Unknown result type (might be due to invalid IL or missing references)
		//IL_17cc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1828e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18294: Unknown result type (might be due to invalid IL or missing references)
		//IL_182c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_182cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_182fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_18304: Unknown result type (might be due to invalid IL or missing references)
		//IL_18336: Unknown result type (might be due to invalid IL or missing references)
		//IL_1833c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1836e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18374: Unknown result type (might be due to invalid IL or missing references)
		//IL_18399: Unknown result type (might be due to invalid IL or missing references)
		//IL_1839f: Unknown result type (might be due to invalid IL or missing references)
		//IL_183ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_183d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_18403: Unknown result type (might be due to invalid IL or missing references)
		//IL_18409: Unknown result type (might be due to invalid IL or missing references)
		//IL_18438: Unknown result type (might be due to invalid IL or missing references)
		//IL_1843e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1846d: Unknown result type (might be due to invalid IL or missing references)
		//IL_18473: Unknown result type (might be due to invalid IL or missing references)
		//IL_184a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_184a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_18130: Unknown result type (might be due to invalid IL or missing references)
		//IL_18136: Unknown result type (might be due to invalid IL or missing references)
		//IL_17d2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_17d4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_184da: Unknown result type (might be due to invalid IL or missing references)
		//IL_184e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_18512: Unknown result type (might be due to invalid IL or missing references)
		//IL_18518: Unknown result type (might be due to invalid IL or missing references)
		//IL_1854a: Unknown result type (might be due to invalid IL or missing references)
		//IL_18550: Unknown result type (might be due to invalid IL or missing references)
		//IL_18582: Unknown result type (might be due to invalid IL or missing references)
		//IL_18588: Unknown result type (might be due to invalid IL or missing references)
		//IL_185ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_185c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_185e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_185ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_18620: Unknown result type (might be due to invalid IL or missing references)
		//IL_18626: Unknown result type (might be due to invalid IL or missing references)
		//IL_18658: Unknown result type (might be due to invalid IL or missing references)
		//IL_1865e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18690: Unknown result type (might be due to invalid IL or missing references)
		//IL_18696: Unknown result type (might be due to invalid IL or missing references)
		//IL_186c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_186ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_18703: Unknown result type (might be due to invalid IL or missing references)
		//IL_18709: Unknown result type (might be due to invalid IL or missing references)
		//IL_1873b: Unknown result type (might be due to invalid IL or missing references)
		//IL_18741: Unknown result type (might be due to invalid IL or missing references)
		//IL_18773: Unknown result type (might be due to invalid IL or missing references)
		//IL_18779: Unknown result type (might be due to invalid IL or missing references)
		//IL_187ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_187b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_187e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_187e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1881e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18824: Unknown result type (might be due to invalid IL or missing references)
		//IL_18856: Unknown result type (might be due to invalid IL or missing references)
		//IL_1885c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1888e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18894: Unknown result type (might be due to invalid IL or missing references)
		//IL_188c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_188cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_188fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_18904: Unknown result type (might be due to invalid IL or missing references)
		//IL_1892c: Unknown result type (might be due to invalid IL or missing references)
		//IL_18932: Unknown result type (might be due to invalid IL or missing references)
		//IL_18964: Unknown result type (might be due to invalid IL or missing references)
		//IL_1896a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1899c: Unknown result type (might be due to invalid IL or missing references)
		//IL_189a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_189d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_189da: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a12: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a40: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a72: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a78: Unknown result type (might be due to invalid IL or missing references)
		//IL_18aaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ab0: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ae2: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ae8: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b10: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b16: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b48: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b80: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b86: Unknown result type (might be due to invalid IL or missing references)
		//IL_18bb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_18bbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_18bf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_18bf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c24: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c56: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c94: Unknown result type (might be due to invalid IL or missing references)
		//IL_18cc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ccc: Unknown result type (might be due to invalid IL or missing references)
		//IL_18cfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d04: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d29: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d64: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e35: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e68: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ea1: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ece: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ed4: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f00: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f06: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_18da5: Unknown result type (might be due to invalid IL or missing references)
		//IL_18dca: Unknown result type (might be due to invalid IL or missing references)
		//IL_18dd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f49: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_19023: Unknown result type (might be due to invalid IL or missing references)
		//IL_19043: Unknown result type (might be due to invalid IL or missing references)
		//IL_19049: Unknown result type (might be due to invalid IL or missing references)
		//IL_19079: Unknown result type (might be due to invalid IL or missing references)
		//IL_19083: Unknown result type (might be due to invalid IL or missing references)
		//IL_19088: Unknown result type (might be due to invalid IL or missing references)
		//IL_190e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_19103: Unknown result type (might be due to invalid IL or missing references)
		//IL_19139: Unknown result type (might be due to invalid IL or missing references)
		//IL_19143: Unknown result type (might be due to invalid IL or missing references)
		//IL_19148: Unknown result type (might be due to invalid IL or missing references)
		//IL_19173: Unknown result type (might be due to invalid IL or missing references)
		//IL_19194: Unknown result type (might be due to invalid IL or missing references)
		//IL_191ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_191d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_191d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_19204: Unknown result type (might be due to invalid IL or missing references)
		//IL_19225: Unknown result type (might be due to invalid IL or missing references)
		//IL_1925b: Unknown result type (might be due to invalid IL or missing references)
		//IL_19265: Unknown result type (might be due to invalid IL or missing references)
		//IL_1926a: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_18fbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_18fc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e02: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e08: Unknown result type (might be due to invalid IL or missing references)
		//IL_19428: Unknown result type (might be due to invalid IL or missing references)
		//IL_1944a: Unknown result type (might be due to invalid IL or missing references)
		//IL_19450: Unknown result type (might be due to invalid IL or missing references)
		//IL_194c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_194cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1951d: Unknown result type (might be due to invalid IL or missing references)
		//IL_19523: Unknown result type (might be due to invalid IL or missing references)
		//IL_19573: Unknown result type (might be due to invalid IL or missing references)
		//IL_19579: Unknown result type (might be due to invalid IL or missing references)
		//IL_195c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_195cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1961f: Unknown result type (might be due to invalid IL or missing references)
		//IL_19625: Unknown result type (might be due to invalid IL or missing references)
		//IL_19675: Unknown result type (might be due to invalid IL or missing references)
		//IL_1967b: Unknown result type (might be due to invalid IL or missing references)
		//IL_196cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_196d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_19721: Unknown result type (might be due to invalid IL or missing references)
		//IL_19727: Unknown result type (might be due to invalid IL or missing references)
		//IL_19777: Unknown result type (might be due to invalid IL or missing references)
		//IL_1977d: Unknown result type (might be due to invalid IL or missing references)
		//IL_193f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_19412: Unknown result type (might be due to invalid IL or missing references)
		//IL_19418: Unknown result type (might be due to invalid IL or missing references)
		//IL_197dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_197e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_19833: Unknown result type (might be due to invalid IL or missing references)
		//IL_19839: Unknown result type (might be due to invalid IL or missing references)
		//IL_19366: Unknown result type (might be due to invalid IL or missing references)
		//IL_19386: Unknown result type (might be due to invalid IL or missing references)
		//IL_1938c: Unknown result type (might be due to invalid IL or missing references)
		//IL_19899: Unknown result type (might be due to invalid IL or missing references)
		//IL_1989f: Unknown result type (might be due to invalid IL or missing references)
		//IL_198ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_198f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_19330: Unknown result type (might be due to invalid IL or missing references)
		//IL_19350: Unknown result type (might be due to invalid IL or missing references)
		//IL_19356: Unknown result type (might be due to invalid IL or missing references)
		//IL_192dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_192fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_19303: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a50: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a74: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ace: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ae4: Unknown result type (might be due to invalid IL or missing references)
		//IL_19b13: Unknown result type (might be due to invalid IL or missing references)
		//IL_19b29: Unknown result type (might be due to invalid IL or missing references)
		//IL_19b58: Unknown result type (might be due to invalid IL or missing references)
		//IL_19b6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_19b9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_19bb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_19be2: Unknown result type (might be due to invalid IL or missing references)
		//IL_19bf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_19c27: Unknown result type (might be due to invalid IL or missing references)
		//IL_199ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a06: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_19976: Unknown result type (might be due to invalid IL or missing references)
		//IL_19996: Unknown result type (might be due to invalid IL or missing references)
		//IL_1999c: Unknown result type (might be due to invalid IL or missing references)
		//IL_19940: Unknown result type (might be due to invalid IL or missing references)
		//IL_19960: Unknown result type (might be due to invalid IL or missing references)
		//IL_19966: Unknown result type (might be due to invalid IL or missing references)
		//IL_19cc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ce4: Unknown result type (might be due to invalid IL or missing references)
		//IL_19cea: Unknown result type (might be due to invalid IL or missing references)
		//IL_19d12: Unknown result type (might be due to invalid IL or missing references)
		//IL_19d18: Unknown result type (might be due to invalid IL or missing references)
		//IL_19c60: Unknown result type (might be due to invalid IL or missing references)
		//IL_19c7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_19c82: Unknown result type (might be due to invalid IL or missing references)
		//IL_19dc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_19de5: Unknown result type (might be due to invalid IL or missing references)
		//IL_19deb: Unknown result type (might be due to invalid IL or missing references)
		//IL_19d61: Unknown result type (might be due to invalid IL or missing references)
		//IL_19d7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_19d83: Unknown result type (might be due to invalid IL or missing references)
		//IL_19e22: Unknown result type (might be due to invalid IL or missing references)
		//IL_19e51: Unknown result type (might be due to invalid IL or missing references)
		//IL_19e63: Unknown result type (might be due to invalid IL or missing references)
		//IL_19e92: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ea4: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ed3: Unknown result type (might be due to invalid IL or missing references)
		//IL_19eef: Unknown result type (might be due to invalid IL or missing references)
		//IL_19f1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a591: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a5af: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a5b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a5dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a5e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a5f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a5fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a52b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a547: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a54d: Unknown result type (might be due to invalid IL or missing references)
		//IL_19f6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_19f9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a68b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a6a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a6af: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a637: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a653: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a659: Unknown result type (might be due to invalid IL or missing references)
		//IL_19fbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_19feb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a055: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a076: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a07c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a0ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a0b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a0bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a7ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a7f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a826: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a82c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a862: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a868: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a8a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a8ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a6f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a6ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a735: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a73b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a771: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a777: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a7b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a7bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aabd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aad9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aadf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a0ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a11f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a125: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a167: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a171: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a176: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a191: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a1b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a1b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a1e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a1f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a1f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a22d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a234: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a23a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a278: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a282: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a287: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a2ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a2f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a2f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a335: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a33f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a344: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a3a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a3ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a3b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a3f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a3fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a401: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a464: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a46b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a471: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a4af: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a4b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a4be: Unknown result type (might be due to invalid IL or missing references)
		//IL_1abce: Unknown result type (might be due to invalid IL or missing references)
		//IL_1abea: Unknown result type (might be due to invalid IL or missing references)
		//IL_1abf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac18: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac35: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab96: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ade9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ad80: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ada1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1acd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1acee: Unknown result type (might be due to invalid IL or missing references)
		//IL_1acf4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ad1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ad22: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aca1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae43: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae49: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae65: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae94: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aeb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aebc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a981: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a9b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a9be: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa23: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa28: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aee8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aeee: Unknown result type (might be due to invalid IL or missing references)
		//IL_1af96: Unknown result type (might be due to invalid IL or missing references)
		//IL_1afb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1affe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b004: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b036: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b03c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b068: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b06e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b0a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b0a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b0d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b0de: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b110: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b116: Unknown result type (might be due to invalid IL or missing references)
		//IL_1af2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1af4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b1cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b1ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b163: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b184: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b223: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b229: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b242: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b248: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b261: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b267: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b280: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b286: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b314: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b31a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b34a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b350: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b2ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b2b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b2cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b2d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b2f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b2f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b409: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b42a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b456: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b45c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b475: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b47b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b494: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b49a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b4b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b4b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b3a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b3c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b56d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b58e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b5ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b5c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b504: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b525: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b695: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b6b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b6e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b6e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b62c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b64d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b7b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b7d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b7d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b801: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b807: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b74b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b767: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b76d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b8bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b8df: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b8e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b90d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b913: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b857: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b873: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b879: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b9cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b9ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b964: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b985: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba24: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba43: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba94: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1baad: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bab3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba61: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba67: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba80: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb74: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bae6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb02: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb08: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd61: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd83: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd89: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bdb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bdb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bcfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd17: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bbe7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bbed: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bba4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bbaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bfa2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bfca: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bfd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bfe3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bfe9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bffc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c002: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c015: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c01b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c02e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c034: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c047: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c04d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c060: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c066: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf14: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf30: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf36: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c102: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c124: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c12a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c152: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c158: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c16e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c174: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c18a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c190: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c09c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c0b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c0be: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bdf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bdfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc30: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c22f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c251: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c257: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c27f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c285: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c29b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c2a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c2b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c2bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c1c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c1e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c1eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c36a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c38d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c393: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c3bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c3c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c3d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c3dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c3f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c3f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c40f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c415: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c42b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c431: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c303: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c320: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c326: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be43: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc73: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c4de: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c501: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c507: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c52f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c535: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c54b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c551: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c567: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c56d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c583: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c589: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c59f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c5a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c477: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c494: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c49a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be83: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be89: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bcb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bcb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c651: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c673: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c679: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c6a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c6a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c6bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c6c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c6d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c6df: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c6f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c6fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c711: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c717: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c5eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c607: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c60d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bec9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1becf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c7c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c7e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c7ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c815: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c81b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c831: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c837: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c84d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c853: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c869: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c86f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c885: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c88b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c75d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c77a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c780: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c92a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c94c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c952: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c97a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c980: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c996: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c99c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c8c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c8e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c8e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca63: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca91: Unknown result type (might be due to invalid IL or missing references)
		//IL_1caa7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1caad: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cac3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cac9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cadf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cae5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cafb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb01: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c9d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c9f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c9f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cf28: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cf4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cf50: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cf78: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cf7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cec2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cede: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cee4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cbaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cbcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cbd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb44: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb60: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb66: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc11: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc17: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cfbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cfc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d141: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d163: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d169: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d191: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d197: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d0db: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d0f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d0fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d34e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d370: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d376: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d3b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d3bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d2e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d304: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d30a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc54: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd58: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d004: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d00a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d59e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d5c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d5c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d538: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d554: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d55a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d1d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d1da: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cda1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d657: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d65d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d611: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d617: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d3ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d405: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc97: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d04a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d050: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d80b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d811: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d783: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d79f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d217: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d21d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cde1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cde7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d6a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d6a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1daba: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dadc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dae2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1da54: Unknown result type (might be due to invalid IL or missing references)
		//IL_1da70: Unknown result type (might be due to invalid IL or missing references)
		//IL_1da76: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d44b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d451: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ccda: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cce0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d090: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d096: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dcbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dcdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dce2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dd12: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dd1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dd21: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dda4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ddab: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ddb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1de65: Unknown result type (might be due to invalid IL or missing references)
		//IL_1de6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1de72: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df26: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df33: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dfe7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dfee: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dff4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1db58: Unknown result type (might be due to invalid IL or missing references)
		//IL_1db5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1db12: Unknown result type (might be due to invalid IL or missing references)
		//IL_1db18: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d8c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d8cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d8fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d904: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d93c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d942: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d974: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d97a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d25a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d260: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ce27: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ce2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d6e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d6ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d491: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d497: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd23: Unknown result type (might be due to invalid IL or missing references)
		//IL_1db9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dba4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d9ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d9c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d29d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d2a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ce6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ce73: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d735: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d73b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e11e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e124: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e096: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dbe4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dbea: Unknown result type (might be due to invalid IL or missing references)
		//IL_1da06: Unknown result type (might be due to invalid IL or missing references)
		//IL_1da0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e320: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e342: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e348: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e370: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e376: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e2ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e2d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e2dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e19a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e1a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e154: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e15a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e4d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e4f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e4f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dc2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dc30: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e7ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e80e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e814: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e786: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e7a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e7a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e613: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e635: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e63b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e54a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e579: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e57f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e5af: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e5b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e5be: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e3b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e3bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e1e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e1e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea10: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea32: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea38: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e88a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e890: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e844: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e84a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e6a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e6a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e6d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e6df: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e710: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e716: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e747: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e74d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e66b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e671: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ebfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ec1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ec23: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eb95: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ebb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ebb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eaae: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eab4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea68: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e3fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e402: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e226: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e22c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ec53: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ec59: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e8d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e8d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ecbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ecc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ec86: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ec8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ee40: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ee62: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ee68: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ee90: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ee96: Unknown result type (might be due to invalid IL or missing references)
		//IL_1edda: Unknown result type (might be due to invalid IL or missing references)
		//IL_1edf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1edfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eaf4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eafa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e442: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e448: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e26c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e272: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f04a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f06c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f072: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f09a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f0a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1efe4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f000: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f006: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e916: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e91c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ed03: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ed09: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f258: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f27b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f281: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f2a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f2af: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f1f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f20e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f214: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eed3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eed9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eb3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eb40: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e488: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e48e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f472: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f494: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f49a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f40c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f428: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f42e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f0dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f0e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e95c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e962: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ed49: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ed4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f684: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f6a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f6ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f6d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f6da: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f61e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f63a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f640: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f50d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f513: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f4ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f4d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f2ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f2f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ef16: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ef1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f88e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f8b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f8b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f828: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f844: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f84a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f120: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f126: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ed8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ed95: Unknown result type (might be due to invalid IL or missing references)
		//IL_1faa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fac2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fac8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1faf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1faf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fa3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fa56: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fa5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f929: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f92f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f8e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f8ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f717: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f71d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f550: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f556: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f335: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f33b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ef59: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ef5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fcad: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fccf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fcd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fc47: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fc63: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fc69: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f163: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f169: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fed1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fef3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fef9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff21: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff27: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe87: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd51: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd05: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb33: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb39: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f96c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f972: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f75a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f760: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f593: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f599: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f37b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f381: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ef9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1efa2: Unknown result type (might be due to invalid IL or missing references)
		//IL_200ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_2010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_20115: Unknown result type (might be due to invalid IL or missing references)
		//IL_20087: Unknown result type (might be due to invalid IL or missing references)
		//IL_200a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_200a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f1a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f1ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_201c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_201e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_201ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_20216: Unknown result type (might be due to invalid IL or missing references)
		//IL_2021c: Unknown result type (might be due to invalid IL or missing references)
		//IL_20160: Unknown result type (might be due to invalid IL or missing references)
		//IL_2017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_20182: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff67: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd91: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd97: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb76: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f9af: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f9b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f79d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f7a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f5d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f5dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f3c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f3c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a08: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a34: Unknown result type (might be due to invalid IL or missing references)
		//IL_2099e: Unknown result type (might be due to invalid IL or missing references)
		//IL_209be: Unknown result type (might be due to invalid IL or missing references)
		//IL_209c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_203f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_20414: Unknown result type (might be due to invalid IL or missing references)
		//IL_2041a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2038c: Unknown result type (might be due to invalid IL or missing references)
		//IL_203a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_203ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_2025c: Unknown result type (might be due to invalid IL or missing references)
		//IL_20262: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ffad: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ffb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fdd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fddd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fbb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fbbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f9f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f9f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f7e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f7e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_20aa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_20aaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a69: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a86: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_20452: Unknown result type (might be due to invalid IL or missing references)
		//IL_20458: Unknown result type (might be due to invalid IL or missing references)
		//IL_20489: Unknown result type (might be due to invalid IL or missing references)
		//IL_2048f: Unknown result type (might be due to invalid IL or missing references)
		//IL_204c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_204c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_204f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_204fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2052e: Unknown result type (might be due to invalid IL or missing references)
		//IL_20534: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_20cb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_20cb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c27: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c44: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2055b: Unknown result type (might be due to invalid IL or missing references)
		//IL_20561: Unknown result type (might be due to invalid IL or missing references)
		//IL_20592: Unknown result type (might be due to invalid IL or missing references)
		//IL_20598: Unknown result type (might be due to invalid IL or missing references)
		//IL_205c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_205cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_20600: Unknown result type (might be due to invalid IL or missing references)
		//IL_20606: Unknown result type (might be due to invalid IL or missing references)
		//IL_20637: Unknown result type (might be due to invalid IL or missing references)
		//IL_2063d: Unknown result type (might be due to invalid IL or missing references)
		//IL_202a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_202a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fff3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fff9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe23: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fbfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fc02: Unknown result type (might be due to invalid IL or missing references)
		//IL_20cef: Unknown result type (might be due to invalid IL or missing references)
		//IL_20cf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d12: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d44: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d79: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_20dae: Unknown result type (might be due to invalid IL or missing references)
		//IL_20db4: Unknown result type (might be due to invalid IL or missing references)
		//IL_20de6: Unknown result type (might be due to invalid IL or missing references)
		//IL_20dec: Unknown result type (might be due to invalid IL or missing references)
		//IL_20664: Unknown result type (might be due to invalid IL or missing references)
		//IL_2066a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2069b: Unknown result type (might be due to invalid IL or missing references)
		//IL_206a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_206d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_206d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_20709: Unknown result type (might be due to invalid IL or missing references)
		//IL_2070f: Unknown result type (might be due to invalid IL or missing references)
		//IL_20740: Unknown result type (might be due to invalid IL or missing references)
		//IL_20746: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e14: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e52: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e81: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e87: Unknown result type (might be due to invalid IL or missing references)
		//IL_20eb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_20ebc: Unknown result type (might be due to invalid IL or missing references)
		//IL_20eee: Unknown result type (might be due to invalid IL or missing references)
		//IL_20ef4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2076d: Unknown result type (might be due to invalid IL or missing references)
		//IL_20773: Unknown result type (might be due to invalid IL or missing references)
		//IL_207a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_207aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_207db: Unknown result type (might be due to invalid IL or missing references)
		//IL_207e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_20812: Unknown result type (might be due to invalid IL or missing references)
		//IL_20818: Unknown result type (might be due to invalid IL or missing references)
		//IL_20849: Unknown result type (might be due to invalid IL or missing references)
		//IL_2084f: Unknown result type (might be due to invalid IL or missing references)
		//IL_202e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_202ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_20039: Unknown result type (might be due to invalid IL or missing references)
		//IL_2003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f22: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f54: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f92: Unknown result type (might be due to invalid IL or missing references)
		//IL_20fc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_20fca: Unknown result type (might be due to invalid IL or missing references)
		//IL_20ffc: Unknown result type (might be due to invalid IL or missing references)
		//IL_21002: Unknown result type (might be due to invalid IL or missing references)
		//IL_20876: Unknown result type (might be due to invalid IL or missing references)
		//IL_2087c: Unknown result type (might be due to invalid IL or missing references)
		//IL_208ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_208b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_208e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_208ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_2091b: Unknown result type (might be due to invalid IL or missing references)
		//IL_20921: Unknown result type (might be due to invalid IL or missing references)
		//IL_20952: Unknown result type (might be due to invalid IL or missing references)
		//IL_20958: Unknown result type (might be due to invalid IL or missing references)
		//IL_21037: Unknown result type (might be due to invalid IL or missing references)
		//IL_2103d: Unknown result type (might be due to invalid IL or missing references)
		//IL_21054: Unknown result type (might be due to invalid IL or missing references)
		//IL_2105a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2108c: Unknown result type (might be due to invalid IL or missing references)
		//IL_21092: Unknown result type (might be due to invalid IL or missing references)
		//IL_210c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_210c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_210f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_210fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2112b: Unknown result type (might be due to invalid IL or missing references)
		//IL_21131: Unknown result type (might be due to invalid IL or missing references)
		//IL_2032e: Unknown result type (might be due to invalid IL or missing references)
		//IL_20334: Unknown result type (might be due to invalid IL or missing references)
		//IL_21163: Unknown result type (might be due to invalid IL or missing references)
		//IL_21169: Unknown result type (might be due to invalid IL or missing references)
		//IL_2119b: Unknown result type (might be due to invalid IL or missing references)
		//IL_211a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_211d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_211d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_21205: Unknown result type (might be due to invalid IL or missing references)
		//IL_2120b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2123a: Unknown result type (might be due to invalid IL or missing references)
		//IL_21240: Unknown result type (might be due to invalid IL or missing references)
		//IL_21272: Unknown result type (might be due to invalid IL or missing references)
		//IL_21278: Unknown result type (might be due to invalid IL or missing references)
		//IL_212aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_212b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_212df: Unknown result type (might be due to invalid IL or missing references)
		//IL_212e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_21314: Unknown result type (might be due to invalid IL or missing references)
		//IL_2131a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2134c: Unknown result type (might be due to invalid IL or missing references)
		//IL_21352: Unknown result type (might be due to invalid IL or missing references)
		//IL_2137a: Unknown result type (might be due to invalid IL or missing references)
		//IL_21380: Unknown result type (might be due to invalid IL or missing references)
		//IL_213b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_213b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_213ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_213f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_21422: Unknown result type (might be due to invalid IL or missing references)
		//IL_21428: Unknown result type (might be due to invalid IL or missing references)
		//IL_2145a: Unknown result type (might be due to invalid IL or missing references)
		//IL_21460: Unknown result type (might be due to invalid IL or missing references)
		//IL_21488: Unknown result type (might be due to invalid IL or missing references)
		//IL_2148e: Unknown result type (might be due to invalid IL or missing references)
		//IL_214c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_214c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_214f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_214fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_21530: Unknown result type (might be due to invalid IL or missing references)
		//IL_21536: Unknown result type (might be due to invalid IL or missing references)
		//IL_2165c: Unknown result type (might be due to invalid IL or missing references)
		//IL_21662: Unknown result type (might be due to invalid IL or missing references)
		//IL_2155e: Unknown result type (might be due to invalid IL or missing references)
		//IL_21564: Unknown result type (might be due to invalid IL or missing references)
		//IL_21596: Unknown result type (might be due to invalid IL or missing references)
		//IL_2159c: Unknown result type (might be due to invalid IL or missing references)
		//IL_215ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_215d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_21606: Unknown result type (might be due to invalid IL or missing references)
		//IL_2160c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2163e: Unknown result type (might be due to invalid IL or missing references)
		//IL_21644: Unknown result type (might be due to invalid IL or missing references)
		//IL_21680: Unknown result type (might be due to invalid IL or missing references)
		//IL_21686: Unknown result type (might be due to invalid IL or missing references)
		//IL_216dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_216e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_21711: Unknown result type (might be due to invalid IL or missing references)
		//IL_21717: Unknown result type (might be due to invalid IL or missing references)
		//IL_216a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_216aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_21788: Unknown result type (might be due to invalid IL or missing references)
		//IL_2178e: Unknown result type (might be due to invalid IL or missing references)
		//IL_217bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_217c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_21750: Unknown result type (might be due to invalid IL or missing references)
		//IL_21756: Unknown result type (might be due to invalid IL or missing references)
		//IL_21861: Unknown result type (might be due to invalid IL or missing references)
		//IL_21884: Unknown result type (might be due to invalid IL or missing references)
		//IL_2188a: Unknown result type (might be due to invalid IL or missing references)
		//IL_217fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_21817: Unknown result type (might be due to invalid IL or missing references)
		//IL_2181d: Unknown result type (might be due to invalid IL or missing references)
		//IL_21901: Unknown result type (might be due to invalid IL or missing references)
		//IL_21907: Unknown result type (might be due to invalid IL or missing references)
		//IL_218ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_218c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ab6: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ad9: Unknown result type (might be due to invalid IL or missing references)
		//IL_21adf: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b07: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b42: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b71: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b77: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ba6: Unknown result type (might be due to invalid IL or missing references)
		//IL_21bac: Unknown result type (might be due to invalid IL or missing references)
		//IL_21bdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_21be1: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a72: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c23: Unknown result type (might be due to invalid IL or missing references)
		//IL_21948: Unknown result type (might be due to invalid IL or missing references)
		//IL_2194e: Unknown result type (might be due to invalid IL or missing references)
		//IL_21f83: Unknown result type (might be due to invalid IL or missing references)
		//IL_21fa7: Unknown result type (might be due to invalid IL or missing references)
		//IL_21fad: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ff0: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ffc: Unknown result type (might be due to invalid IL or missing references)
		//IL_22032: Unknown result type (might be due to invalid IL or missing references)
		//IL_2203c: Unknown result type (might be due to invalid IL or missing references)
		//IL_22041: Unknown result type (might be due to invalid IL or missing references)
		//IL_2206c: Unknown result type (might be due to invalid IL or missing references)
		//IL_22078: Unknown result type (might be due to invalid IL or missing references)
		//IL_220ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_220b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_220bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_220e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_220f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_22128: Unknown result type (might be due to invalid IL or missing references)
		//IL_22132: Unknown result type (might be due to invalid IL or missing references)
		//IL_22137: Unknown result type (might be due to invalid IL or missing references)
		//IL_21f15: Unknown result type (might be due to invalid IL or missing references)
		//IL_21f39: Unknown result type (might be due to invalid IL or missing references)
		//IL_21f3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e31: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e57: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e97: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d94: Unknown result type (might be due to invalid IL or missing references)
		//IL_21db4: Unknown result type (might be due to invalid IL or missing references)
		//IL_21dba: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c62: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c68: Unknown result type (might be due to invalid IL or missing references)
		//IL_21cb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_21cba: Unknown result type (might be due to invalid IL or missing references)
		//IL_2198f: Unknown result type (might be due to invalid IL or missing references)
		//IL_21995: Unknown result type (might be due to invalid IL or missing references)
		//IL_2220d: Unknown result type (might be due to invalid IL or missing references)
		//IL_22231: Unknown result type (might be due to invalid IL or missing references)
		//IL_22237: Unknown result type (might be due to invalid IL or missing references)
		//IL_2227a: Unknown result type (might be due to invalid IL or missing references)
		//IL_22286: Unknown result type (might be due to invalid IL or missing references)
		//IL_222bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_222c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_222cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_222f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_22302: Unknown result type (might be due to invalid IL or missing references)
		//IL_22338: Unknown result type (might be due to invalid IL or missing references)
		//IL_22342: Unknown result type (might be due to invalid IL or missing references)
		//IL_22347: Unknown result type (might be due to invalid IL or missing references)
		//IL_22370: Unknown result type (might be due to invalid IL or missing references)
		//IL_2237c: Unknown result type (might be due to invalid IL or missing references)
		//IL_223b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_223bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_223c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2219f: Unknown result type (might be due to invalid IL or missing references)
		//IL_221c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_221c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_22487: Unknown result type (might be due to invalid IL or missing references)
		//IL_224ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_224b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_224d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_224e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2251b: Unknown result type (might be due to invalid IL or missing references)
		//IL_22525: Unknown result type (might be due to invalid IL or missing references)
		//IL_2252a: Unknown result type (might be due to invalid IL or missing references)
		//IL_22530: Unknown result type (might be due to invalid IL or missing references)
		//IL_2253c: Unknown result type (might be due to invalid IL or missing references)
		//IL_22572: Unknown result type (might be due to invalid IL or missing references)
		//IL_2257c: Unknown result type (might be due to invalid IL or missing references)
		//IL_22581: Unknown result type (might be due to invalid IL or missing references)
		//IL_22587: Unknown result type (might be due to invalid IL or missing references)
		//IL_22593: Unknown result type (might be due to invalid IL or missing references)
		//IL_225c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_225d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_225d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_22419: Unknown result type (might be due to invalid IL or missing references)
		//IL_2243d: Unknown result type (might be due to invalid IL or missing references)
		//IL_22443: Unknown result type (might be due to invalid IL or missing references)
		//IL_21cf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_21cff: Unknown result type (might be due to invalid IL or missing references)
		//IL_219d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_219dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d41: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d47: Unknown result type (might be due to invalid IL or missing references)
		//IL_226c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_226e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_226e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2272c: Unknown result type (might be due to invalid IL or missing references)
		//IL_22736: Unknown result type (might be due to invalid IL or missing references)
		//IL_2273b: Unknown result type (might be due to invalid IL or missing references)
		//IL_22607: Unknown result type (might be due to invalid IL or missing references)
		//IL_22627: Unknown result type (might be due to invalid IL or missing references)
		//IL_2262d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2265d: Unknown result type (might be due to invalid IL or missing references)
		//IL_22667: Unknown result type (might be due to invalid IL or missing references)
		//IL_2266c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2285f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2287f: Unknown result type (might be due to invalid IL or missing references)
		//IL_22885: Unknown result type (might be due to invalid IL or missing references)
		//IL_228b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_228bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_228c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_227a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_227c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_227cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_227fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_22806: Unknown result type (might be due to invalid IL or missing references)
		//IL_2280b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2292a: Unknown result type (might be due to invalid IL or missing references)
		//IL_22936: Unknown result type (might be due to invalid IL or missing references)
		//IL_2296c: Unknown result type (might be due to invalid IL or missing references)
		//IL_22976: Unknown result type (might be due to invalid IL or missing references)
		//IL_2297b: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_22aa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ad5: Unknown result type (might be due to invalid IL or missing references)
		//IL_22adf: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ae4: Unknown result type (might be due to invalid IL or missing references)
		//IL_229c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_229e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_229ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a26: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_22c17: Unknown result type (might be due to invalid IL or missing references)
		//IL_22c37: Unknown result type (might be due to invalid IL or missing references)
		//IL_22c3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_22c6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_22c77: Unknown result type (might be due to invalid IL or missing references)
		//IL_22c7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_22cc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ccd: Unknown result type (might be due to invalid IL or missing references)
		//IL_22cd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d12: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d21: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d42: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d49: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d98: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_22dbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_22dc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_22dcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e14: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e19: Unknown result type (might be due to invalid IL or missing references)
		//IL_2316c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2318c: Unknown result type (might be due to invalid IL or missing references)
		//IL_23192: Unknown result type (might be due to invalid IL or missing references)
		//IL_231c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_231cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_231d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_23221: Unknown result type (might be due to invalid IL or missing references)
		//IL_2322d: Unknown result type (might be due to invalid IL or missing references)
		//IL_23263: Unknown result type (might be due to invalid IL or missing references)
		//IL_2326d: Unknown result type (might be due to invalid IL or missing references)
		//IL_23272: Unknown result type (might be due to invalid IL or missing references)
		//IL_2329d: Unknown result type (might be due to invalid IL or missing references)
		//IL_232a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_232df: Unknown result type (might be due to invalid IL or missing references)
		//IL_232e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_232ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_23317: Unknown result type (might be due to invalid IL or missing references)
		//IL_23323: Unknown result type (might be due to invalid IL or missing references)
		//IL_23359: Unknown result type (might be due to invalid IL or missing references)
		//IL_23363: Unknown result type (might be due to invalid IL or missing references)
		//IL_23368: Unknown result type (might be due to invalid IL or missing references)
		//IL_230b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_230d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_230d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_23109: Unknown result type (might be due to invalid IL or missing references)
		//IL_23113: Unknown result type (might be due to invalid IL or missing references)
		//IL_23118: Unknown result type (might be due to invalid IL or missing references)
		//IL_22f0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_22f2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_22f31: Unknown result type (might be due to invalid IL or missing references)
		//IL_22f61: Unknown result type (might be due to invalid IL or missing references)
		//IL_22f6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_22f70: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e52: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e72: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e78: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ea8: Unknown result type (might be due to invalid IL or missing references)
		//IL_22eb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_22eb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_22b77: Unknown result type (might be due to invalid IL or missing references)
		//IL_22b83: Unknown result type (might be due to invalid IL or missing references)
		//IL_22bbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_22bc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_22bcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_22fe8: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ff4: Unknown result type (might be due to invalid IL or missing references)
		//IL_23036: Unknown result type (might be due to invalid IL or missing references)
		//IL_23040: Unknown result type (might be due to invalid IL or missing references)
		//IL_23045: Unknown result type (might be due to invalid IL or missing references)
		//IL_23482: Unknown result type (might be due to invalid IL or missing references)
		//IL_234a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_234a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_234d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_234e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_234e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_23538: Unknown result type (might be due to invalid IL or missing references)
		//IL_23544: Unknown result type (might be due to invalid IL or missing references)
		//IL_2357a: Unknown result type (might be due to invalid IL or missing references)
		//IL_23584: Unknown result type (might be due to invalid IL or missing references)
		//IL_23589: Unknown result type (might be due to invalid IL or missing references)
		//IL_235b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_235c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_235f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_23600: Unknown result type (might be due to invalid IL or missing references)
		//IL_23605: Unknown result type (might be due to invalid IL or missing references)
		//IL_2362e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2363a: Unknown result type (might be due to invalid IL or missing references)
		//IL_23670: Unknown result type (might be due to invalid IL or missing references)
		//IL_2367a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2367f: Unknown result type (might be due to invalid IL or missing references)
		//IL_233c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_233e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_233ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_2341f: Unknown result type (might be due to invalid IL or missing references)
		//IL_23429: Unknown result type (might be due to invalid IL or missing references)
		//IL_2342e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2373d: Unknown result type (might be due to invalid IL or missing references)
		//IL_23766: Unknown result type (might be due to invalid IL or missing references)
		//IL_236b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_236df: Unknown result type (might be due to invalid IL or missing references)
		//IL_238af: Unknown result type (might be due to invalid IL or missing references)
		//IL_238de: Unknown result type (might be due to invalid IL or missing references)
		//IL_238e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_23914: Unknown result type (might be due to invalid IL or missing references)
		//IL_2391e: Unknown result type (might be due to invalid IL or missing references)
		//IL_23923: Unknown result type (might be due to invalid IL or missing references)
		//IL_237d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_23800: Unknown result type (might be due to invalid IL or missing references)
		//IL_23806: Unknown result type (might be due to invalid IL or missing references)
		//IL_23836: Unknown result type (might be due to invalid IL or missing references)
		//IL_23840: Unknown result type (might be due to invalid IL or missing references)
		//IL_23845: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a51: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a72: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a78: Unknown result type (might be due to invalid IL or missing references)
		//IL_23aa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ab2: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ab7: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b07: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b13: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b49: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b53: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b58: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b83: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_23bc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_23bcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_23bd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_23bfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c09: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c49: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c69: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c75: Unknown result type (might be due to invalid IL or missing references)
		//IL_23cae: Unknown result type (might be due to invalid IL or missing references)
		//IL_23cb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_23cbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_23997: Unknown result type (might be due to invalid IL or missing references)
		//IL_239b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_239be: Unknown result type (might be due to invalid IL or missing references)
		//IL_239ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_239f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_239fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e42: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e48: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e78: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e82: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e87: Unknown result type (might be due to invalid IL or missing references)
		//IL_23d61: Unknown result type (might be due to invalid IL or missing references)
		//IL_23d85: Unknown result type (might be due to invalid IL or missing references)
		//IL_23d8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_23dbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_23dc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_23dca: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ee7: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ef3: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f36: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f66: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f72: Unknown result type (might be due to invalid IL or missing references)
		//IL_23fab: Unknown result type (might be due to invalid IL or missing references)
		//IL_23fb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_23fba: Unknown result type (might be due to invalid IL or missing references)
		//IL_23fe3: Unknown result type (might be due to invalid IL or missing references)
		//IL_23fef: Unknown result type (might be due to invalid IL or missing references)
		//IL_24028: Unknown result type (might be due to invalid IL or missing references)
		//IL_24032: Unknown result type (might be due to invalid IL or missing references)
		//IL_24037: Unknown result type (might be due to invalid IL or missing references)
		//IL_24066: Unknown result type (might be due to invalid IL or missing references)
		//IL_24087: Unknown result type (might be due to invalid IL or missing references)
		//IL_2408d: Unknown result type (might be due to invalid IL or missing references)
		//IL_240bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_240c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_240cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2411c: Unknown result type (might be due to invalid IL or missing references)
		//IL_24128: Unknown result type (might be due to invalid IL or missing references)
		//IL_2415e: Unknown result type (might be due to invalid IL or missing references)
		//IL_24168: Unknown result type (might be due to invalid IL or missing references)
		//IL_2416d: Unknown result type (might be due to invalid IL or missing references)
		//IL_24198: Unknown result type (might be due to invalid IL or missing references)
		//IL_241a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_241da: Unknown result type (might be due to invalid IL or missing references)
		//IL_241e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_241e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_24212: Unknown result type (might be due to invalid IL or missing references)
		//IL_2421e: Unknown result type (might be due to invalid IL or missing references)
		//IL_24254: Unknown result type (might be due to invalid IL or missing references)
		//IL_2425e: Unknown result type (might be due to invalid IL or missing references)
		//IL_24263: Unknown result type (might be due to invalid IL or missing references)
		//IL_24304: Unknown result type (might be due to invalid IL or missing references)
		//IL_24327: Unknown result type (might be due to invalid IL or missing references)
		//IL_2432d: Unknown result type (might be due to invalid IL or missing references)
		//IL_24355: Unknown result type (might be due to invalid IL or missing references)
		//IL_2435b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2429d: Unknown result type (might be due to invalid IL or missing references)
		//IL_242ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_242c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2456e: Unknown result type (might be due to invalid IL or missing references)
		//IL_245b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_245b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2460d: Unknown result type (might be due to invalid IL or missing references)
		//IL_24617: Unknown result type (might be due to invalid IL or missing references)
		//IL_2461c: Unknown result type (might be due to invalid IL or missing references)
		//IL_24637: Unknown result type (might be due to invalid IL or missing references)
		//IL_2467b: Unknown result type (might be due to invalid IL or missing references)
		//IL_24681: Unknown result type (might be due to invalid IL or missing references)
		//IL_246c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_246cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_246d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_243b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_243f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_243fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_24452: Unknown result type (might be due to invalid IL or missing references)
		//IL_2445c: Unknown result type (might be due to invalid IL or missing references)
		//IL_24461: Unknown result type (might be due to invalid IL or missing references)
		//IL_2447c: Unknown result type (might be due to invalid IL or missing references)
		//IL_244c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_244c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_24508: Unknown result type (might be due to invalid IL or missing references)
		//IL_24512: Unknown result type (might be due to invalid IL or missing references)
		//IL_24517: Unknown result type (might be due to invalid IL or missing references)
		//IL_2483b: Unknown result type (might be due to invalid IL or missing references)
		//IL_24883: Unknown result type (might be due to invalid IL or missing references)
		//IL_24889: Unknown result type (might be due to invalid IL or missing references)
		//IL_248dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_248e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_248ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_24733: Unknown result type (might be due to invalid IL or missing references)
		//IL_2477b: Unknown result type (might be due to invalid IL or missing references)
		//IL_24781: Unknown result type (might be due to invalid IL or missing references)
		//IL_247d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_247df: Unknown result type (might be due to invalid IL or missing references)
		//IL_247e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_249a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_249c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_249c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_24939: Unknown result type (might be due to invalid IL or missing references)
		//IL_24956: Unknown result type (might be due to invalid IL or missing references)
		//IL_2495c: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a31: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a37: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a50: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a63: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a69: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a82: Unknown result type (might be due to invalid IL or missing references)
		//IL_249fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a04: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a17: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_24ad3: Unknown result type (might be due to invalid IL or missing references)
		//IL_24af4: Unknown result type (might be due to invalid IL or missing references)
		//IL_24afa: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b34: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b39: Unknown result type (might be due to invalid IL or missing references)
		//IL_25818: Unknown result type (might be due to invalid IL or missing references)
		//IL_2581e: Unknown result type (might be due to invalid IL or missing references)
		//IL_25834: Unknown result type (might be due to invalid IL or missing references)
		//IL_2583a: Unknown result type (might be due to invalid IL or missing references)
		//IL_25850: Unknown result type (might be due to invalid IL or missing references)
		//IL_25856: Unknown result type (might be due to invalid IL or missing references)
		//IL_2586c: Unknown result type (might be due to invalid IL or missing references)
		//IL_25872: Unknown result type (might be due to invalid IL or missing references)
		//IL_24fc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_24fe9: Unknown result type (might be due to invalid IL or missing references)
		//IL_24fef: Unknown result type (might be due to invalid IL or missing references)
		//IL_2501f: Unknown result type (might be due to invalid IL or missing references)
		//IL_25029: Unknown result type (might be due to invalid IL or missing references)
		//IL_2502e: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c02: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c08: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c24: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c40: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c56: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c72: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c78: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c94: Unknown result type (might be due to invalid IL or missing references)
		//IL_252f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_252fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_24ba3: Unknown result type (might be due to invalid IL or missing references)
		//IL_24be5: Unknown result type (might be due to invalid IL or missing references)
		//IL_24bef: Unknown result type (might be due to invalid IL or missing references)
		//IL_24bf4: Unknown result type (might be due to invalid IL or missing references)
		//IL_24c0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_24c2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_24c35: Unknown result type (might be due to invalid IL or missing references)
		//IL_24c65: Unknown result type (might be due to invalid IL or missing references)
		//IL_24c6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_24c74: Unknown result type (might be due to invalid IL or missing references)
		//IL_24cab: Unknown result type (might be due to invalid IL or missing references)
		//IL_24cb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_24cb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_24cf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d00: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d05: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d68: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d75: Unknown result type (might be due to invalid IL or missing references)
		//IL_24db3: Unknown result type (might be due to invalid IL or missing references)
		//IL_24dbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_24dc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e25: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e32: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e70: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_24ee2: Unknown result type (might be due to invalid IL or missing references)
		//IL_24ee9: Unknown result type (might be due to invalid IL or missing references)
		//IL_24eef: Unknown result type (might be due to invalid IL or missing references)
		//IL_24f2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_24f37: Unknown result type (might be due to invalid IL or missing references)
		//IL_24f3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2619c: Unknown result type (might be due to invalid IL or missing references)
		//IL_261a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_261b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_261be: Unknown result type (might be due to invalid IL or missing references)
		//IL_258a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_258ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_258d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_25900: Unknown result type (might be due to invalid IL or missing references)
		//IL_2590a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2590f: Unknown result type (might be due to invalid IL or missing references)
		//IL_25071: Unknown result type (might be due to invalid IL or missing references)
		//IL_25091: Unknown result type (might be due to invalid IL or missing references)
		//IL_25097: Unknown result type (might be due to invalid IL or missing references)
		//IL_250d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_250e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_250e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_25103: Unknown result type (might be due to invalid IL or missing references)
		//IL_25123: Unknown result type (might be due to invalid IL or missing references)
		//IL_25129: Unknown result type (might be due to invalid IL or missing references)
		//IL_25159: Unknown result type (might be due to invalid IL or missing references)
		//IL_25163: Unknown result type (might be due to invalid IL or missing references)
		//IL_25168: Unknown result type (might be due to invalid IL or missing references)
		//IL_2518a: Unknown result type (might be due to invalid IL or missing references)
		//IL_25190: Unknown result type (might be due to invalid IL or missing references)
		//IL_251a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_251ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_25ccb: Unknown result type (might be due to invalid IL or missing references)
		//IL_25cec: Unknown result type (might be due to invalid IL or missing references)
		//IL_25cf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d22: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d31: Unknown result type (might be due to invalid IL or missing references)
		//IL_266d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_266df: Unknown result type (might be due to invalid IL or missing references)
		//IL_266f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_266fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_261f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_26216: Unknown result type (might be due to invalid IL or missing references)
		//IL_2621c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2624c: Unknown result type (might be due to invalid IL or missing references)
		//IL_26256: Unknown result type (might be due to invalid IL or missing references)
		//IL_2625b: Unknown result type (might be due to invalid IL or missing references)
		//IL_25952: Unknown result type (might be due to invalid IL or missing references)
		//IL_25972: Unknown result type (might be due to invalid IL or missing references)
		//IL_25978: Unknown result type (might be due to invalid IL or missing references)
		//IL_259ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_259c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_259c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_259e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a04: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a44: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a49: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a80: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a87: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_25acb: Unknown result type (might be due to invalid IL or missing references)
		//IL_25ad5: Unknown result type (might be due to invalid IL or missing references)
		//IL_25ada: Unknown result type (might be due to invalid IL or missing references)
		//IL_25b3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_25b44: Unknown result type (might be due to invalid IL or missing references)
		//IL_25b4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_25b88: Unknown result type (might be due to invalid IL or missing references)
		//IL_25b92: Unknown result type (might be due to invalid IL or missing references)
		//IL_25b97: Unknown result type (might be due to invalid IL or missing references)
		//IL_25344: Unknown result type (might be due to invalid IL or missing references)
		//IL_25365: Unknown result type (might be due to invalid IL or missing references)
		//IL_2536b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2539b: Unknown result type (might be due to invalid IL or missing references)
		//IL_253a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_253aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_270d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d75: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d95: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_25ddd: Unknown result type (might be due to invalid IL or missing references)
		//IL_25de7: Unknown result type (might be due to invalid IL or missing references)
		//IL_25dec: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e07: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e27: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e67: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_25ea3: Unknown result type (might be due to invalid IL or missing references)
		//IL_25eaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_25eb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_25eee: Unknown result type (might be due to invalid IL or missing references)
		//IL_25ef8: Unknown result type (might be due to invalid IL or missing references)
		//IL_25efd: Unknown result type (might be due to invalid IL or missing references)
		//IL_25f60: Unknown result type (might be due to invalid IL or missing references)
		//IL_25f67: Unknown result type (might be due to invalid IL or missing references)
		//IL_25f6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_25fab: Unknown result type (might be due to invalid IL or missing references)
		//IL_25fb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_25fba: Unknown result type (might be due to invalid IL or missing references)
		//IL_2601d: Unknown result type (might be due to invalid IL or missing references)
		//IL_26024: Unknown result type (might be due to invalid IL or missing references)
		//IL_2602a: Unknown result type (might be due to invalid IL or missing references)
		//IL_26068: Unknown result type (might be due to invalid IL or missing references)
		//IL_26072: Unknown result type (might be due to invalid IL or missing references)
		//IL_26077: Unknown result type (might be due to invalid IL or missing references)
		//IL_260da: Unknown result type (might be due to invalid IL or missing references)
		//IL_260e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_260e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_26125: Unknown result type (might be due to invalid IL or missing references)
		//IL_2612f: Unknown result type (might be due to invalid IL or missing references)
		//IL_26134: Unknown result type (might be due to invalid IL or missing references)
		//IL_2727b: Unknown result type (might be due to invalid IL or missing references)
		//IL_26732: Unknown result type (might be due to invalid IL or missing references)
		//IL_26753: Unknown result type (might be due to invalid IL or missing references)
		//IL_26759: Unknown result type (might be due to invalid IL or missing references)
		//IL_26789: Unknown result type (might be due to invalid IL or missing references)
		//IL_26793: Unknown result type (might be due to invalid IL or missing references)
		//IL_26798: Unknown result type (might be due to invalid IL or missing references)
		//IL_2629f: Unknown result type (might be due to invalid IL or missing references)
		//IL_262bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_262c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_26307: Unknown result type (might be due to invalid IL or missing references)
		//IL_26311: Unknown result type (might be due to invalid IL or missing references)
		//IL_26316: Unknown result type (might be due to invalid IL or missing references)
		//IL_26331: Unknown result type (might be due to invalid IL or missing references)
		//IL_26351: Unknown result type (might be due to invalid IL or missing references)
		//IL_26357: Unknown result type (might be due to invalid IL or missing references)
		//IL_26387: Unknown result type (might be due to invalid IL or missing references)
		//IL_26391: Unknown result type (might be due to invalid IL or missing references)
		//IL_26396: Unknown result type (might be due to invalid IL or missing references)
		//IL_263cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_263d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_263da: Unknown result type (might be due to invalid IL or missing references)
		//IL_26418: Unknown result type (might be due to invalid IL or missing references)
		//IL_26422: Unknown result type (might be due to invalid IL or missing references)
		//IL_26427: Unknown result type (might be due to invalid IL or missing references)
		//IL_2648a: Unknown result type (might be due to invalid IL or missing references)
		//IL_26491: Unknown result type (might be due to invalid IL or missing references)
		//IL_26497: Unknown result type (might be due to invalid IL or missing references)
		//IL_264d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_264df: Unknown result type (might be due to invalid IL or missing references)
		//IL_264e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_26547: Unknown result type (might be due to invalid IL or missing references)
		//IL_2654e: Unknown result type (might be due to invalid IL or missing references)
		//IL_26554: Unknown result type (might be due to invalid IL or missing references)
		//IL_26592: Unknown result type (might be due to invalid IL or missing references)
		//IL_2659c: Unknown result type (might be due to invalid IL or missing references)
		//IL_265a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_26604: Unknown result type (might be due to invalid IL or missing references)
		//IL_2660b: Unknown result type (might be due to invalid IL or missing references)
		//IL_26611: Unknown result type (might be due to invalid IL or missing references)
		//IL_2664f: Unknown result type (might be due to invalid IL or missing references)
		//IL_26659: Unknown result type (might be due to invalid IL or missing references)
		//IL_2665e: Unknown result type (might be due to invalid IL or missing references)
		//IL_253ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_2540e: Unknown result type (might be due to invalid IL or missing references)
		//IL_25414: Unknown result type (might be due to invalid IL or missing references)
		//IL_25456: Unknown result type (might be due to invalid IL or missing references)
		//IL_25460: Unknown result type (might be due to invalid IL or missing references)
		//IL_25465: Unknown result type (might be due to invalid IL or missing references)
		//IL_25480: Unknown result type (might be due to invalid IL or missing references)
		//IL_254a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_254a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_254d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_254e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_254e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2551c: Unknown result type (might be due to invalid IL or missing references)
		//IL_25523: Unknown result type (might be due to invalid IL or missing references)
		//IL_25529: Unknown result type (might be due to invalid IL or missing references)
		//IL_25567: Unknown result type (might be due to invalid IL or missing references)
		//IL_25571: Unknown result type (might be due to invalid IL or missing references)
		//IL_25576: Unknown result type (might be due to invalid IL or missing references)
		//IL_255d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_255e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_255e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_25624: Unknown result type (might be due to invalid IL or missing references)
		//IL_2562e: Unknown result type (might be due to invalid IL or missing references)
		//IL_25633: Unknown result type (might be due to invalid IL or missing references)
		//IL_25696: Unknown result type (might be due to invalid IL or missing references)
		//IL_2569d: Unknown result type (might be due to invalid IL or missing references)
		//IL_256a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_256e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_256eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_256f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_25753: Unknown result type (might be due to invalid IL or missing references)
		//IL_2575a: Unknown result type (might be due to invalid IL or missing references)
		//IL_25760: Unknown result type (might be due to invalid IL or missing references)
		//IL_2579e: Unknown result type (might be due to invalid IL or missing references)
		//IL_257a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_257ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_27106: Unknown result type (might be due to invalid IL or missing references)
		//IL_2714a: Unknown result type (might be due to invalid IL or missing references)
		//IL_27150: Unknown result type (might be due to invalid IL or missing references)
		//IL_27192: Unknown result type (might be due to invalid IL or missing references)
		//IL_2719c: Unknown result type (might be due to invalid IL or missing references)
		//IL_271a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_271bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_27200: Unknown result type (might be due to invalid IL or missing references)
		//IL_27206: Unknown result type (might be due to invalid IL or missing references)
		//IL_27236: Unknown result type (might be due to invalid IL or missing references)
		//IL_27240: Unknown result type (might be due to invalid IL or missing references)
		//IL_27245: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f31: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f63: Unknown result type (might be due to invalid IL or missing references)
		//IL_26fa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_26faf: Unknown result type (might be due to invalid IL or missing references)
		//IL_26fb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_26fd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_26fdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2700b: Unknown result type (might be due to invalid IL or missing references)
		//IL_27011: Unknown result type (might be due to invalid IL or missing references)
		//IL_2703f: Unknown result type (might be due to invalid IL or missing references)
		//IL_27045: Unknown result type (might be due to invalid IL or missing references)
		//IL_27073: Unknown result type (might be due to invalid IL or missing references)
		//IL_27079: Unknown result type (might be due to invalid IL or missing references)
		//IL_270a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_270ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e89: Unknown result type (might be due to invalid IL or missing references)
		//IL_26eb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ebb: Unknown result type (might be due to invalid IL or missing references)
		//IL_26d2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_26d50: Unknown result type (might be due to invalid IL or missing references)
		//IL_26d56: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c52: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c75: Unknown result type (might be due to invalid IL or missing references)
		//IL_26cad: Unknown result type (might be due to invalid IL or missing references)
		//IL_26cb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_272ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_272f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_272fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2733e: Unknown result type (might be due to invalid IL or missing references)
		//IL_27348: Unknown result type (might be due to invalid IL or missing references)
		//IL_2734d: Unknown result type (might be due to invalid IL or missing references)
		//IL_27368: Unknown result type (might be due to invalid IL or missing references)
		//IL_273b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_273b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_273e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_273f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_273f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_26d9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_26dd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ddd: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e17: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_267dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_267fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_26802: Unknown result type (might be due to invalid IL or missing references)
		//IL_26844: Unknown result type (might be due to invalid IL or missing references)
		//IL_2684e: Unknown result type (might be due to invalid IL or missing references)
		//IL_26853: Unknown result type (might be due to invalid IL or missing references)
		//IL_2686e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2688e: Unknown result type (might be due to invalid IL or missing references)
		//IL_26894: Unknown result type (might be due to invalid IL or missing references)
		//IL_268c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_268ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_268d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2690a: Unknown result type (might be due to invalid IL or missing references)
		//IL_26911: Unknown result type (might be due to invalid IL or missing references)
		//IL_26917: Unknown result type (might be due to invalid IL or missing references)
		//IL_26955: Unknown result type (might be due to invalid IL or missing references)
		//IL_2695f: Unknown result type (might be due to invalid IL or missing references)
		//IL_26964: Unknown result type (might be due to invalid IL or missing references)
		//IL_269c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_269ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_269d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_26a12: Unknown result type (might be due to invalid IL or missing references)
		//IL_26a1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_26a21: Unknown result type (might be due to invalid IL or missing references)
		//IL_26a84: Unknown result type (might be due to invalid IL or missing references)
		//IL_26a8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_26a91: Unknown result type (might be due to invalid IL or missing references)
		//IL_26acf: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ad9: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ade: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b41: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b48: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b96: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_274d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_274f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_274f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2746a: Unknown result type (might be due to invalid IL or missing references)
		//IL_27486: Unknown result type (might be due to invalid IL or missing references)
		//IL_2748c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2761d: Unknown result type (might be due to invalid IL or missing references)
		//IL_27623: Unknown result type (might be due to invalid IL or missing references)
		//IL_27656: Unknown result type (might be due to invalid IL or missing references)
		//IL_2765c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2768f: Unknown result type (might be due to invalid IL or missing references)
		//IL_27695: Unknown result type (might be due to invalid IL or missing references)
		//IL_2770a: Unknown result type (might be due to invalid IL or missing references)
		//IL_27710: Unknown result type (might be due to invalid IL or missing references)
		//IL_27743: Unknown result type (might be due to invalid IL or missing references)
		//IL_27749: Unknown result type (might be due to invalid IL or missing references)
		//IL_276d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_276d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_277ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_2780c: Unknown result type (might be due to invalid IL or missing references)
		//IL_27812: Unknown result type (might be due to invalid IL or missing references)
		//IL_2783a: Unknown result type (might be due to invalid IL or missing references)
		//IL_27840: Unknown result type (might be due to invalid IL or missing references)
		//IL_27872: Unknown result type (might be due to invalid IL or missing references)
		//IL_27878: Unknown result type (might be due to invalid IL or missing references)
		//IL_278aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_278b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_278e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_278e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2791a: Unknown result type (might be due to invalid IL or missing references)
		//IL_27920: Unknown result type (might be due to invalid IL or missing references)
		//IL_27784: Unknown result type (might be due to invalid IL or missing references)
		//IL_277a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_277a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_27dad: Unknown result type (might be due to invalid IL or missing references)
		//IL_279fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_27a1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_27a25: Unknown result type (might be due to invalid IL or missing references)
		//IL_27a87: Unknown result type (might be due to invalid IL or missing references)
		//IL_27a8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_27aa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_27aaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2795d: Unknown result type (might be due to invalid IL or missing references)
		//IL_27979: Unknown result type (might be due to invalid IL or missing references)
		//IL_2797f: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b72: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ba0: Unknown result type (might be due to invalid IL or missing references)
		//IL_27bd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_27bd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c10: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c42: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c48: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c80: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ae4: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b00: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b06: Unknown result type (might be due to invalid IL or missing references)
		//IL_27de0: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e25: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e77: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e97: Unknown result type (might be due to invalid IL or missing references)
		//IL_27edc: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ee2: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f12: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f21: Unknown result type (might be due to invalid IL or missing references)
		//IL_27d20: Unknown result type (might be due to invalid IL or missing references)
		//IL_27d42: Unknown result type (might be due to invalid IL or missing references)
		//IL_27d48: Unknown result type (might be due to invalid IL or missing references)
		//IL_27d70: Unknown result type (might be due to invalid IL or missing references)
		//IL_27d76: Unknown result type (might be due to invalid IL or missing references)
		//IL_27cba: Unknown result type (might be due to invalid IL or missing references)
		//IL_27cd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_27cdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_28004: Unknown result type (might be due to invalid IL or missing references)
		//IL_28025: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_27fbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2805e: Unknown result type (might be due to invalid IL or missing references)
		//IL_28064: Unknown result type (might be due to invalid IL or missing references)
		//IL_2807b: Unknown result type (might be due to invalid IL or missing references)
		//IL_28081: Unknown result type (might be due to invalid IL or missing references)
		//IL_28098: Unknown result type (might be due to invalid IL or missing references)
		//IL_2809e: Unknown result type (might be due to invalid IL or missing references)
		//IL_280b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_280bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2811b: Unknown result type (might be due to invalid IL or missing references)
		//IL_28121: Unknown result type (might be due to invalid IL or missing references)
		//IL_28135: Unknown result type (might be due to invalid IL or missing references)
		//IL_2813b: Unknown result type (might be due to invalid IL or missing references)
		//IL_280e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_280e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_280fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_28103: Unknown result type (might be due to invalid IL or missing references)
		//IL_281e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_28202: Unknown result type (might be due to invalid IL or missing references)
		//IL_2822d: Unknown result type (might be due to invalid IL or missing references)
		//IL_28233: Unknown result type (might be due to invalid IL or missing references)
		//IL_28246: Unknown result type (might be due to invalid IL or missing references)
		//IL_2824c: Unknown result type (might be due to invalid IL or missing references)
		//IL_28179: Unknown result type (might be due to invalid IL or missing references)
		//IL_2819a: Unknown result type (might be due to invalid IL or missing references)
		//IL_282ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_2830b: Unknown result type (might be due to invalid IL or missing references)
		//IL_28336: Unknown result type (might be due to invalid IL or missing references)
		//IL_2833c: Unknown result type (might be due to invalid IL or missing references)
		//IL_28352: Unknown result type (might be due to invalid IL or missing references)
		//IL_28358: Unknown result type (might be due to invalid IL or missing references)
		//IL_28282: Unknown result type (might be due to invalid IL or missing references)
		//IL_282a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_283f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_28412: Unknown result type (might be due to invalid IL or missing references)
		//IL_28418: Unknown result type (might be due to invalid IL or missing references)
		//IL_28440: Unknown result type (might be due to invalid IL or missing references)
		//IL_28446: Unknown result type (might be due to invalid IL or missing references)
		//IL_28459: Unknown result type (might be due to invalid IL or missing references)
		//IL_2845f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2838e: Unknown result type (might be due to invalid IL or missing references)
		//IL_283aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_283b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_28502: Unknown result type (might be due to invalid IL or missing references)
		//IL_28520: Unknown result type (might be due to invalid IL or missing references)
		//IL_28526: Unknown result type (might be due to invalid IL or missing references)
		//IL_2854e: Unknown result type (might be due to invalid IL or missing references)
		//IL_28554: Unknown result type (might be due to invalid IL or missing references)
		//IL_28567: Unknown result type (might be due to invalid IL or missing references)
		//IL_2856d: Unknown result type (might be due to invalid IL or missing references)
		//IL_28580: Unknown result type (might be due to invalid IL or missing references)
		//IL_28586: Unknown result type (might be due to invalid IL or missing references)
		//IL_2849c: Unknown result type (might be due to invalid IL or missing references)
		//IL_284b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_284be: Unknown result type (might be due to invalid IL or missing references)
		//IL_28620: Unknown result type (might be due to invalid IL or missing references)
		//IL_2863e: Unknown result type (might be due to invalid IL or missing references)
		//IL_28644: Unknown result type (might be due to invalid IL or missing references)
		//IL_2866c: Unknown result type (might be due to invalid IL or missing references)
		//IL_28672: Unknown result type (might be due to invalid IL or missing references)
		//IL_28688: Unknown result type (might be due to invalid IL or missing references)
		//IL_2868e: Unknown result type (might be due to invalid IL or missing references)
		//IL_286a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_286aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_285ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_285d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_285dc: Unknown result type (might be due to invalid IL or missing references)
		if (!active)
		{
			return;
		}
		if (townNPC && life <= 0 && UsesPartyHat())
		{
			bool isShimmerVariant = IsShimmerVariant;
			bool flag = true;
			switch (type)
			{
			case 38:
				Gore.NewGore(position, velocity, IsShimmerVariant ? 1298 : 927);
				break;
			case 207:
				Gore.NewGore(position, velocity, IsShimmerVariant ? 1305 : 928);
				break;
			case 17:
				Gore.NewGore(position, velocity, IsShimmerVariant ? 1321 : 929);
				break;
			case 18:
				Gore.NewGore(position, velocity, IsShimmerVariant ? 1325 : 930);
				break;
			case 227:
				Gore.NewGore(position, velocity, IsShimmerVariant ? 1331 : 931);
				break;
			case 229:
				if (!IsShimmerVariant)
				{
					Gore.NewGore(position, velocity, 932);
				}
				break;
			case 142:
				Gore.NewGore(position, velocity, IsShimmerVariant ? 1339 : 933);
				break;
			case 453:
				Gore.NewGore(position, velocity, IsShimmerVariant ? 1343 : 934);
				break;
			case 178:
				Gore.NewGore(position, velocity, IsShimmerVariant ? 1348 : 935);
				break;
			case 353:
				Gore.NewGore(position, velocity, IsShimmerVariant ? 1351 : 936);
				break;
			case 368:
				Gore.NewGore(position, velocity, IsShimmerVariant ? 1363 : 937);
				break;
			case 108:
				Gore.NewGore(position, velocity, IsShimmerVariant ? 1373 : 938);
				break;
			case 588:
				Gore.NewGore(position, velocity, IsShimmerVariant ? 1311 : 1112);
				break;
			default:
				flag = false;
				break;
			}
			if (flag)
			{
				int num = GetPartyHatGore();
				Gore.NewGore(position, velocity, num);
			}
		}
		if (daybreak && life <= 0)
		{
			Rectangle hitbox = base.Hitbox;
			for (int i = 0; i < 20; i++)
			{
				int num112 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
				int num223 = Dust.NewDust(hitbox.TopLeft(), width, height, num112, 0f, -2.5f);
				Main.dust[num223].alpha = 200;
				Dust dust = Main.dust[num223];
				Dust dust190 = dust;
				dust190.velocity *= 1.4f;
				dust = Main.dust[num223];
				dust190 = dust;
				dust190.scale += Main.rand.NextFloat();
			}
			if (Main.netMode != 1)
			{
				for (int j = 0; j < 200; j++)
				{
					NPC nPC = Main.npc[j];
					if (nPC.active && !nPC.buffImmune[189] && Distance(nPC.Center) < 100f && !nPC.dontTakeDamage && nPC.lifeMax > 5 && !nPC.friendly && !nPC.townNPC)
					{
						nPC.AddBuff(189, 300);
					}
				}
			}
		}
		Vector2 center3 = default(Vector2);
		if (type == 686 && life <= 0)
		{
			short num334 = 1143;
			Vector2 bottom = base.Bottom;
			Vector2 spinningpoint2 = -Vector2.UnitY * 50f;
			double radians = rotation;
			center3 = default(Vector2);
			Vector2 vector = bottom + spinningpoint2.RotatedBy(radians, center3);
			for (int k = 0; k < 3; k++)
			{
				Vector2 vector12 = vector + Main.rand.NextVector2Circular(15f, 15f);
				Gore gore = Gore.NewGorePerfect(vector12, Main.rand.NextVector2Circular(2f, 2f), num334 + Main.rand.Next(3));
				gore.velocity.Y -= Main.rand.NextFloat();
				Gore gore2 = gore;
				Gore gore32 = gore2;
				gore32.velocity *= 4f;
			}
			for (int l = 0; l < 1; l++)
			{
				Vector2 bottom2 = base.Bottom;
				Vector2 spinningpoint3 = -Vector2.UnitY * 50f;
				double radians2 = rotation;
				center3 = default(Vector2);
				Vector2 vector23 = bottom2 + spinningpoint3.RotatedBy(radians2, center3) + Main.rand.NextVector2Circular(5f, 5f);
				Gore gore29 = Gore.NewGorePerfect(vector23, Main.rand.NextVector2Circular(2f, 2f), 1146);
				gore29.velocity.Y -= Main.rand.NextFloat();
				Gore gore3 = gore29;
				Gore gore32 = gore3;
				gore32.velocity *= 4f;
			}
			if (Main.netMode != 1)
			{
				Vector2 vector25 = base.Bottom + new Vector2(0f, 48f);
				Vector2 vector26 = velocity;
				Transform(680);
				position = vector25;
				velocity = vector26;
				netUpdate = true;
				if (!unlockedSlimePurpleSpawn)
				{
					unlockedSlimePurpleSpawn = true;
					if (Main.netMode == 2)
					{
						NetMessage.SendData(7);
					}
				}
			}
		}
		if (type == 594 && life <= 0)
		{
			int num445 = 1125;
			num445 += (int)(ai[2] - 1f) * 3;
			Vector2 bottom3 = base.Bottom;
			Vector2 spinningpoint4 = -Vector2.UnitY * 50f;
			double radians3 = rotation;
			center3 = default(Vector2);
			Vector2 vector27 = bottom3 + spinningpoint4.RotatedBy(radians3, center3);
			for (int m = 0; m < 3; m++)
			{
				Vector2 vector28 = vector27 + Main.rand.NextVector2Circular(15f, 15f);
				Gore gore30 = Gore.NewGorePerfect(vector28, Main.rand.NextVector2Circular(2f, 2f), num445 + Main.rand.Next(3));
				gore30.velocity.Y -= Main.rand.NextFloat();
				Gore gore4 = gore30;
				Gore gore32 = gore4;
				gore32.velocity *= 4f;
			}
			for (int n = 0; n < 1; n++)
			{
				Vector2 bottom4 = base.Bottom;
				Vector2 spinningpoint5 = -Vector2.UnitY * 50f;
				double radians4 = rotation;
				center3 = default(Vector2);
				Vector2 vector29 = bottom4 + spinningpoint5.RotatedBy(radians4, center3) + Main.rand.NextVector2Circular(5f, 5f);
				Gore gore31 = Gore.NewGorePerfect(vector29, Main.rand.NextVector2Circular(2f, 2f), 1146);
				gore31.velocity.Y -= Main.rand.NextFloat();
				Gore gore5 = gore31;
				Gore gore32 = gore5;
				gore32.velocity *= 4f;
			}
			NPC nPC2 = AI_113_WindyBalloon_GetSlaveNPC();
			if (nPC2 != null)
			{
				nPC2.ai[0] = 0f;
				nPC2.position.Y -= 10f;
				nPC2.netUpdate = true;
			}
		}
		if (type == 661)
		{
			if (life > 0)
			{
				for (int num560 = 0; (double)num560 < dmg / (double)lifeMax * 100.0; num560++)
				{
					if (Main.rand.Next(5) == 0)
					{
						int num671 = 1;
						Color newColor = Main.hslToRgb((float)num560 / 100f % 1f, 1f, 0.5f) * 0.5f;
						int num782 = Dust.NewDust(position, width, height, 267, 0f, 0f, 0, newColor);
						Main.dust[num782].position = base.Center + Main.rand.NextVector2Circular(width, height);
						Main.dust[num782].velocity = Main.dust[num782].position - base.Center;
						Main.dust[num782].noGravity = true;
						Main.dust[num782].fadeIn = 0.6f + Main.rand.NextFloat() * 0.7f * (float)num671;
						Main.dust[num782].scale = 0.35f;
						if (num782 != 6000)
						{
							Dust dust140 = Dust.CloneDust(num782);
							Dust dust3 = dust140;
							Dust dust190 = dust3;
							dust190.scale /= 2f;
							dust3 = dust140;
							dust190 = dust3;
							dust190.fadeIn *= 0.85f;
							dust140.color = new Color(255, 255, 255, 255) * 0.5f;
						}
					}
				}
			}
			else
			{
				for (int num845 = 0; (float)num845 < 100f; num845++)
				{
					if (Main.rand.Next(5) == 0)
					{
						int num2 = 1;
						Color newColor2 = Main.hslToRgb((float)num845 / 100f % 1f, 1f, 0.5f) * 0.5f;
						int num13 = Dust.NewDust(position, width, height, 267, 0f, 0f, 0, newColor2);
						Main.dust[num13].position = base.Center + Main.rand.NextVector2Circular(width, height);
						Main.dust[num13].velocity = (Main.dust[num13].position - base.Center) * 0.6f;
						Main.dust[num13].noGravity = true;
						Main.dust[num13].fadeIn = 0.7f + Main.rand.NextFloat() * 1.1f * (float)num2;
						Main.dust[num13].scale = 0.35f;
						if (num13 != 6000)
						{
							Dust dust151 = Dust.CloneDust(num13);
							Dust dust2 = dust151;
							Dust dust190 = dust2;
							dust190.scale /= 2f;
							dust2 = dust151;
							dust190 = dust2;
							dust190.fadeIn *= 0.85f;
							dust151.color = new Color(255, 255, 255, 255) * 0.5f;
						}
					}
				}
			}
		}
		if (type == 521)
		{
			if (life > 0)
			{
				for (int num24 = 0; (double)num24 < dmg / (double)lifeMax * 200.0; num24++)
				{
					Dust dust162 = Dust.NewDustDirect(position, width, height, 228, 6 * hitDirection, velocity.Y, 0, Color.Transparent, 3f);
					dust162.noGravity = true;
					Dust dust5 = dust162;
					Dust dust190 = dust5;
					dust190.velocity *= 5f;
				}
			}
			else
			{
				for (int num35 = 0; (float)num35 < 200f; num35++)
				{
					Dust dust173 = Dust.NewDustDirect(position, width, height, 228, 6 * hitDirection, velocity.Y, 0, Color.Transparent, 3f);
					dust173.noGravity = true;
					Dust dust4 = dust173;
					Dust dust190 = dust4;
					dust190.velocity *= 5f;
				}
			}
		}
		if (type == 668)
		{
			if (life > 0)
			{
				for (int num46 = 0; (double)num46 < dmg / (double)lifeMax * 100.0; num46++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f, 0, default(Color), 1.2f);
				}
			}
			else
			{
				int num57 = 15;
				Vector2 vector30 = position - new Vector2((float)num57, (float)num57);
				for (int num68 = 0; num68 < 120; num68++)
				{
					int num79 = Dust.NewDust(vector30, width + num57 * 2, height + num57 * 2, 5, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num79].velocity = Main.rand.NextVector2Circular(4f, 4f);
				}
				Vector2 vector2 = velocity * 0.6f;
				Gore.NewGore(base.Bottom + new Vector2(-10f, 0f), vector2, 1274, scale);
				Gore.NewGore(base.Bottom + new Vector2(10f, 0f), vector2, 1274, scale);
				Gore.NewGore(base.Center, vector2, 1272, scale);
				Gore.NewGore(base.Center + new Vector2(-10f, 0f), vector2, 1273, scale);
				Gore.NewGore(base.Center + new Vector2(10f, 0f), vector2, 1273, scale);
				Gore.NewGore(base.Top, vector2, 1270, scale);
				Gore.NewGore(base.Top, vector2, 1271, scale);
			}
		}
		if (type == 636)
		{
			if (life > 0)
			{
				for (int num90 = 0; (double)num90 < dmg / (double)lifeMax * 100.0; num90++)
				{
					if (Main.rand.Next(2) == 0)
					{
						Dust.NewDust(position, width, height, 67, hitDirection, -1f);
					}
					else
					{
						Dust.NewDust(position, width, height, 69, hitDirection, -1f);
					}
				}
			}
			else
			{
				for (int num101 = 0; num101 < 50; num101++)
				{
					if (Main.rand.Next(2) == 0)
					{
						Dust.NewDust(position, width, height, 67, hitDirection, -1f);
					}
					else
					{
						Dust.NewDust(position, width, height, 69, 2 * hitDirection, -1f);
					}
				}
				Vector2 vector3 = velocity * 0.6f;
				Gore.NewGore(position + new Vector2(10f, -20f), vector3, 1262, scale);
				Gore.NewGore(position + new Vector2(10f, 40f), vector3, 1263, scale);
				Gore.NewGore(position + new Vector2(50f, 20f), vector3, 1264, scale);
				Gore.NewGore(position + new Vector2(-10f, -20f), vector3, 1265, scale);
				Gore.NewGore(position, vector3, 1266, scale);
				Gore.NewGore(position + new Vector2(-20f, -20f), vector3, 1267, scale);
				Gore.NewGore(position + new Vector2(-20f, 10f), vector3, 1268, scale);
				Gore.NewGore(position + new Vector2(60f, -20f), vector3, 1267, scale);
				Gore.NewGore(position + new Vector2(60f, 10f), vector3, 1268, scale);
			}
		}
		if (type == 657)
		{
			if (life <= 0)
			{
				Gore.NewGore(position, velocity, 1259, 0.8f);
				Gore.NewGore(position + base.Size * 0.5f, velocity, 1259, 0.8f);
				Gore.NewGore(position, velocity, 1258, scale);
				int num113 = 10;
				for (int num124 = 0; num124 < 150; num124++)
				{
					Color newColor3 = AI_121_QueenSlime_GetDustColor();
					((Color)(ref newColor3)).A = 200;
					int num135 = Dust.NewDust(position - new Vector2((float)num113, (float)num113), width + num113 * 2, height + num113 * 2, 4, 8f * Main.rand.NextFloatDirection(), -2f + 6f * Main.rand.NextFloatDirection(), 50, newColor3, 1f + Main.rand.NextFloat() * 0.5f);
					Dust dust7 = Main.dust[num135];
					Dust dust190 = dust7;
					dust190.velocity *= 0.65f;
					dust7 = Main.dust[num135];
					dust190 = dust7;
					dust190.velocity += velocity * 0.5f;
					if (Main.rand.Next(5) == 0)
					{
						Main.dust[num135].noGravity = true;
						dust7 = Main.dust[num135];
						dust190 = dust7;
						dust190.scale *= 1.2f;
					}
				}
			}
			else
			{
				for (int num146 = 0; num146 < 12; num146++)
				{
					Color newColor4 = AI_121_QueenSlime_GetDustColor();
					((Color)(ref newColor4)).A = 150;
					int num157 = Dust.NewDust(position, width, height, 4, 2 * hitDirection, -1f, 50, newColor4);
					Dust dust6 = Main.dust[num157];
					Dust dust190 = dust6;
					dust190.velocity *= 0.3f;
					dust6 = Main.dust[num157];
					dust190 = dust6;
					dust190.velocity += velocity * 0.3f;
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num157].noGravity = true;
						dust6 = Main.dust[num157];
						dust190 = dust6;
						dust190.scale *= 1.2f;
					}
				}
			}
		}
		if (type >= 658 && type <= 660)
		{
			int num168 = 7;
			float num179 = 1f;
			int num190 = 4;
			Color newColor5 = default(Color);
			((Color)(ref newColor5))._002Ector(78, 136, 255, 150);
			if (type == 659)
			{
				num190 = 243;
				newColor5 = default(Color);
			}
			if (type == 660)
			{
				((Color)(ref newColor5))._002Ector(150, 100, 200, 150);
			}
			if (life <= 0)
			{
				num179 = 1.5f;
				num168 = 40;
				if (type == 660)
				{
					Gore.NewGore(position, velocity, 1260, scale);
					Gore.NewGore(position, velocity, 1260, scale);
				}
			}
			for (int num201 = 0; num201 < num168; num201++)
			{
				int num212 = Dust.NewDust(position, width, height, num190, 2 * hitDirection, -1f, 80, newColor5, num179);
				if (Main.rand.Next(3) != 0)
				{
					Main.dust[num212].noGravity = true;
				}
			}
		}
		if (type == 667)
		{
			int num224 = 7;
			float num235 = 1.1f;
			int num246 = 10;
			Color newColor6 = default(Color);
			if (life <= 0)
			{
				num235 = 1.5f;
				num224 = 40;
				for (int num257 = 0; num257 < 8; num257++)
				{
					int num268 = Gore.NewGore(new Vector2(position.X, base.Center.Y - 10f), Vector2.Zero, 1218);
					Main.gore[num268].velocity = new Vector2((float)Main.rand.Next(1, 10) * 0.3f * 2.5f * (float)hitDirection, 0f - (3f + (float)Main.rand.Next(4) * 0.3f));
				}
			}
			else
			{
				for (int num279 = 0; num279 < 3; num279++)
				{
					int num290 = Gore.NewGore(new Vector2(position.X, base.Center.Y - 10f), Vector2.Zero, 1218);
					Main.gore[num290].velocity = new Vector2((float)Main.rand.Next(1, 10) * 0.3f * 2f * (float)hitDirection, 0f - (2.5f + (float)Main.rand.Next(4) * 0.3f));
				}
			}
			for (int num301 = 0; num301 < num224; num301++)
			{
				int num312 = Dust.NewDust(position, width, height, num246, 2 * hitDirection, -1f, 80, newColor6, num235);
				if (Main.rand.Next(3) != 0)
				{
					Main.dust[num312].noGravity = true;
				}
			}
		}
		if (type == 676)
		{
			int num323 = 8;
			float num335 = 1.1f;
			short num346 = 310;
			if (life <= 0)
			{
				num335 = 1.5f;
				num323 = 40;
			}
			for (int num357 = 0; num357 < num323; num357++)
			{
				Dust dust184 = Main.dust[Dust.NewDust(position, width, height, num346, 2 * hitDirection, -1f, 80, default(Color), num335)];
				if (Main.rand.Next(3) != 0)
				{
					dust184.noGravity = true;
				}
				Dust dust8 = dust184;
				Dust dust190 = dust8;
				dust190.velocity *= 1.5f;
				dust8 = dust184;
				dust190 = dust8;
				dust190.velocity += velocity * 0.1f;
			}
		}
		if (type == 552 || type == 553 || type == 554)
		{
			if (life > 0)
			{
				for (int num368 = 0; (double)num368 < dmg / (double)lifeMax * 20.0; num368++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
			}
			else
			{
				for (int num379 = 0; (float)num379 < 20f; num379++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
				int num390 = 983;
				if (type == 553)
				{
					num390 = 1067;
				}
				else if (type == 554)
				{
					num390 = 1071;
				}
				Gore.NewGore(position, velocity, num390, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num390 + 3, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num390 + 2, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, num390 + 1, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, num390 + 1, scale);
			}
		}
		else if (type == 561 || type == 562 || type == 563)
		{
			if (life > 0)
			{
				for (int num401 = 0; (double)num401 < dmg / (double)lifeMax * 20.0; num401++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
			}
			else
			{
				for (int num412 = 0; (float)num412 < 20f; num412++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
				int num423 = 987;
				if (type == 562)
				{
					num423 = 1055;
				}
				else if (type == 563)
				{
					num423 = 1061;
				}
				Gore.NewGore(position, velocity, num423 + 3, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num423, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num423 + 4, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num423 + 5, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num423 + 2, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, num423 + 1, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, num423 + 1, scale);
			}
		}
		else if (type == 555 || type == 556 || type == 557)
		{
			if (life > 0)
			{
				for (int num434 = 0; (double)num434 < dmg / (double)lifeMax * 20.0; num434++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
			}
			else
			{
				int num446 = 1031;
				if (type == 556)
				{
					num446 = 1034;
				}
				if (type == 557)
				{
					num446 = 1037;
				}
				for (int num457 = 0; (float)num457 < 20f; num457++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
				Gore.NewGore(new Vector2(position.X, position.Y), velocity, num446, scale);
				Gore.NewGore(new Vector2(position.X + 10f, position.Y + 20f), velocity, num446 + 1, scale);
				Gore.NewGore(new Vector2(position.X + 10f, position.Y + 30f), velocity, num446 + 2, scale);
			}
		}
		else if (type == 551)
		{
			int num468 = (int)((float)life / (float)lifeMax * 100f);
			int num479 = (int)(((double)life + dmg) / (double)(float)lifeMax * 100.0);
			if (num468 != num479 && life > 0 && Main.netMode != 1)
			{
				DD2Event.CheckProgress(type);
			}
			if (life > 0)
			{
				for (int num490 = 0; (double)num490 < dmg / (double)lifeMax * 20.0; num490++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
			}
			else
			{
				for (int num501 = 0; (float)num501 < 20f; num501++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
				if (spriteDirection != -1)
				{
					Gore.NewGore(position + new Vector2(0f, 54f), velocity, 1079, scale);
					Gore.NewGore(position + new Vector2(72f, 90f), velocity, 1080, scale);
					Gore.NewGore(position + new Vector2(102f, 94f), velocity, 1080, scale);
					Gore.NewGore(position + new Vector2(178f, 0f), velocity, 1081, scale);
					Gore.NewGore(position + new Vector2(136f, 12f), velocity, 1082, scale);
					Gore.NewGore(position + new Vector2(82f, 18f), velocity, 1083, scale);
					Gore.NewGore(position + new Vector2(100f, 26f), velocity, 1084, scale);
					Gore.NewGore(position + new Vector2(170f, 16f), velocity, 1085, scale);
					Gore.NewGore(position + new Vector2(190f, 10f), velocity, 1085, scale);
					Gore.NewGore(position + new Vector2(100f, 36f), velocity, 1086, scale);
				}
				else
				{
					Gore.NewGore(position + new Vector2(176f, 54f), velocity, 1079, scale);
					Gore.NewGore(position + new Vector2(158f, 90f), velocity, 1080, scale);
					Gore.NewGore(position + new Vector2(128f, 94f), velocity, 1080, scale);
					Gore.NewGore(position + new Vector2(0f, 0f), velocity, 1081, scale);
					Gore.NewGore(position + new Vector2(60f, 12f), velocity, 1082, scale);
					Gore.NewGore(position + new Vector2(88f, 18f), velocity, 1083, scale);
					Gore.NewGore(position + new Vector2(86f, 26f), velocity, 1084, scale);
					Gore.NewGore(position + new Vector2(40f, 16f), velocity, 1085, scale);
					Gore.NewGore(position + new Vector2(20f, 10f), velocity, 1085, scale);
					Gore.NewGore(position + new Vector2(142f, 36f), velocity, 1086, scale);
				}
			}
		}
		else if (type == 572 || type == 573)
		{
			if (life > 0)
			{
				for (int num512 = 0; (double)num512 < dmg / (double)lifeMax * 20.0; num512++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
			}
			else
			{
				SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[0]))?.Stop();
				SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]))?.Stop();
				for (int num523 = 0; (float)num523 < 20f; num523++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
				Vector2 vector4 = base.Center - new Vector2(10f, 10f);
				Gore.NewGore(vector4, velocity, 993, scale);
				Gore.NewGore(new Vector2(vector4.X, vector4.Y + 20f), velocity, 996, scale);
				Gore.NewGore(new Vector2(vector4.X, vector4.Y + 20f), velocity, 995, scale);
				Gore.NewGore(new Vector2(vector4.X, vector4.Y + 34f), velocity, 994, scale);
				Gore.NewGore(new Vector2(vector4.X, vector4.Y + 34f), velocity, 994, scale);
			}
		}
		else if (type == 574 || type == 575)
		{
			if (life > 0)
			{
				for (int num536 = 0; (double)num536 < dmg / (double)lifeMax * 20.0; num536++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
			}
			else
			{
				SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[2]))?.Stop();
				for (int num549 = 0; (float)num549 < 20f; num549++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
				int num561 = 1050;
				Vector2 vector5 = base.Center - new Vector2(30f, 10f);
				Gore.NewGore(new Vector2(vector5.X, vector5.Y + 10f), velocity, num561, scale);
				Gore.NewGore(new Vector2(vector5.X, vector5.Y + 30f), velocity, num561 + 1, scale);
				Gore.NewGore(new Vector2(vector5.X, vector5.Y + 30f), velocity, num561 + 2, scale);
				Gore.NewGore(new Vector2(vector5.X, vector5.Y + 0f), velocity, num561 + 3, scale);
				Gore.NewGore(new Vector2(vector5.X, vector5.Y + 0f), velocity, num561 + 4, scale);
			}
		}
		else if (type == 570 || type == 571)
		{
			if (life > 0)
			{
				for (int num572 = 0; (double)num572 < dmg / (double)lifeMax * 20.0; num572++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
			}
			else
			{
				for (int num583 = 0; (float)num583 < 20f; num583++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
				int num594 = ((type == 570) ? 1075 : 979);
				Gore.NewGore(position, velocity, num594, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num594 + 2, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num594 + 2, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num594 + 3, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, num594 + 1, scale);
			}
		}
		else if (type == 568 || type == 569)
		{
			if (life > 0)
			{
				for (int num605 = 0; (double)num605 < dmg / (double)lifeMax * 20.0; num605++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
			}
			else
			{
				for (int num616 = 0; (float)num616 < 20f; num616++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
				Gore.NewGore(position, velocity, 1020, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 1021, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 1023, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 1022, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 1022, scale);
			}
		}
		else if (type == 558 || type == 559 || type == 560)
		{
			if (life > 0)
			{
				for (int num627 = 0; (double)num627 < dmg / (double)lifeMax * 20.0; num627++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
			}
			else
			{
				for (int num638 = 0; (float)num638 < 20f; num638++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
				int num649 = 974;
				if (type == 559)
				{
					num649 = 1040;
				}
				if (type == 560)
				{
					num649 = 1045;
				}
				Gore.NewGore(position, velocity, num649 + 2, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 10f), velocity, num649, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 10f), velocity, num649, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 10f), velocity, num649 + 4, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 24f), velocity, num649 + 1, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 24f), velocity, num649 + 3, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 24f), velocity, num649 + 3, scale);
			}
		}
		else if (type == 566 || type == 567)
		{
			if (life > 0)
			{
				for (int num660 = 0; (double)num660 < dmg / (double)lifeMax * 20.0; num660++)
				{
					Dust.NewDust(position, width, height, 236, hitDirection, -1f);
				}
			}
			else
			{
				for (int num672 = 0; (float)num672 < 20f; num672++)
				{
					Dust.NewDust(position, width, height, 236, hitDirection, -1f);
				}
				Gore.NewGore(position, velocity, 970, scale);
				if (Main.rand.Next(2) == 0)
				{
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 972, scale);
				}
				if (Main.rand.Next(2) == 0)
				{
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 972, scale);
				}
				if (Main.rand.Next(2) == 0)
				{
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 973, scale);
				}
				if (Main.rand.Next(2) == 0)
				{
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 973, scale);
				}
				if (Main.rand.Next(2) == 0)
				{
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 971, scale);
				}
				if (Main.rand.Next(2) == 0)
				{
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 971, scale);
				}
			}
		}
		else if (type == 576 || type == 577)
		{
			if (life > 0)
			{
				for (int num683 = 0; (double)num683 < dmg / (double)lifeMax * 20.0; num683++)
				{
					Dust.NewDust(position, width, height, 273, hitDirection, -1f);
				}
			}
			else
			{
				for (int num694 = 0; (float)num694 < 20f; num694++)
				{
					Dust.NewDust(position, width, height, 273, hitDirection, -1f);
				}
				if (spriteDirection == -1)
				{
					Gore.NewGore(position + new Vector2(0f, 0f), velocity, 1005 + ((Main.rand.Next(5) == 0) ? 1 : 0), scale);
					Gore.NewGore(position + new Vector2(18f, 28f), velocity, 1000, scale);
					int num705 = Gore.NewGore(position + new Vector2(-40f, 70f), velocity, 1001, scale);
					Main.gore[num705].rotation = (float)Math.PI;
					num705 = Gore.NewGore(position + new Vector2(4f, 28f), velocity, 1002, scale);
					Main.gore[num705].rotation = (float)Math.PI;
					Gore.NewGore(position + new Vector2(36f, 90f), velocity, 1003, scale);
					Gore.NewGore(position + new Vector2(32f, 90f), velocity, 1004, scale);
				}
				else
				{
					Gore.NewGore(position + new Vector2(48f, 0f), velocity, 1005 + ((Main.rand.Next(5) == 0) ? 1 : 0), scale);
					Gore.NewGore(position + new Vector2(22f, 28f), velocity, 1000, scale);
					Gore.NewGore(position + new Vector2(48f, 70f), velocity, 1001, scale);
					Gore.NewGore(position + new Vector2(4f, 28f), velocity, 1002, scale);
					Gore.NewGore(position + new Vector2(36f, 90f), velocity, 1003, scale);
					Gore.NewGore(position + new Vector2(32f, 90f), velocity, 1004, scale);
				}
			}
		}
		else if (type == 564 || type == 565)
		{
			if (life > 0)
			{
				for (int num716 = 0; (double)num716 < dmg / (double)lifeMax * 20.0; num716++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
			}
			else
			{
				for (int num727 = 0; (float)num727 < 20f; num727++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
				int num738 = 1009;
				Gore.NewGore(new Vector2(position.X, position.Y), velocity, num738, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 15f), velocity, num738 + 1, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 15f), velocity, num738 + 2, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 15f), velocity, num738 + 3, scale);
				Gore.NewGore(new Vector2(position.X - 20f, position.Y + 35f), velocity, num738 + 4, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 35f), velocity, num738 + 5, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 35f), velocity, num738 + 6, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 35f), velocity, num738 + 10, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 25f), velocity, num738 + 7, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 25f), velocity, num738 + 8, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 25f), velocity, num738 + 9, scale);
			}
		}
		else if (type == 578)
		{
			if (life > 0)
			{
				for (int num749 = 0; (double)num749 < dmg / (double)lifeMax * 20.0; num749++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
			}
			else
			{
				for (int num760 = 0; (float)num760 < 20f; num760++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
				Gore.NewGore(position, velocity, 999, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 10f), velocity, 998, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 10f), velocity, 998, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 10f), velocity, 997, scale);
			}
		}
		else if (type == 620)
		{
			if (life > 0)
			{
				for (int num771 = 0; (double)num771 < dmg / (double)lifeMax * 150.0; num771++)
				{
					Dust dust187 = Dust.NewDustDirect(position, width, height, 5, hitDirection, -1f);
					Dust dust19 = dust187;
					Dust dust190 = dust19;
					dust190.velocity *= 2.5f;
					dust187.scale = 1.7f;
				}
			}
			else
			{
				for (int num783 = 0; (float)num783 < 150f; num783++)
				{
					Dust dust188 = Dust.NewDustDirect(position, width, height, 5, hitDirection, -1f);
					Dust dust18 = dust188;
					Dust dust190 = dust18;
					dust190.velocity *= 2.5f;
					dust188.scale = 1.7f;
				}
				int num794 = 1183;
				Gore.NewGore(position, velocity, num794, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num794 + 2, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num794 + 3, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, num794 + 1, scale);
			}
		}
		else if (type == 619)
		{
			if (life > 0)
			{
				for (int num805 = 0; (double)num805 < dmg / (double)lifeMax * 150.0; num805++)
				{
					Dust dust189 = Dust.NewDustDirect(position, width, height, 5, hitDirection, -1f);
					Dust dust17 = dust189;
					Dust dust190 = dust17;
					dust190.velocity *= 2.5f;
					dust189.fadeIn = 1.7f;
				}
			}
			else
			{
				for (int num816 = 0; (float)num816 < 150f; num816++)
				{
					Dust dust130 = Dust.NewDustDirect(position, width, height, 5, hitDirection, -1f);
					Dust dust16 = dust130;
					Dust dust190 = dust16;
					dust190.velocity *= 2.5f;
					dust130.fadeIn = 1.7f;
				}
				int num827 = 1179;
				Gore.NewGore(position, velocity, num827, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num827 + 2, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num827 + 3, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, num827 + 1, scale);
			}
		}
		else if (type == 618)
		{
			if (life > 0)
			{
				for (int num838 = 0; (double)num838 < dmg / (double)lifeMax * 200.0; num838++)
				{
					Dust dust131 = Dust.NewDustDirect(position, width, height, 5, hitDirection, -1f);
					Dust dust15 = dust131;
					Dust dust190 = dust15;
					dust190.velocity *= 2.5f;
					dust131.scale = 2f;
				}
			}
			else
			{
				for (int num841 = 0; (float)num841 < 200f; num841++)
				{
					Dust dust132 = Dust.NewDustDirect(position, width, height, 5, hitDirection, -1f);
					Dust dust14 = dust132;
					Dust dust190 = dust14;
					dust190.velocity *= 2.5f;
					dust132.scale = 2.5f;
				}
				int num842 = 1172;
				Gore.NewGore(new Vector2(base.Right.X - 30f, position.Y), velocity, num842, scale);
				Gore.NewGore(position, velocity, num842, scale);
				Gore.NewGore(new Vector2(base.Right.X - 30f, position.Y), velocity, num842 + 1, scale);
				Gore.NewGore(position, velocity, num842 + 1, scale);
				Gore.NewGore(position, velocity, num842 + 2, scale);
				Gore.NewGore(position, velocity, num842 + 3, scale);
				Gore.NewGore(position, velocity, num842 + 4, scale);
				Gore.NewGore(position, velocity, num842 + 4, scale);
				Gore.NewGore(position, velocity, num842 + 5, scale);
				Gore.NewGore(position, velocity, num842 + 5, scale);
				Gore.NewGore(position, velocity, num842 + 6, scale);
				Gore.NewGore(position, velocity, num842 + 6, scale);
			}
		}
		else if (type == 541)
		{
			Color color = new Color(222, 108, 48) * 0.7f;
			if (life > 0)
			{
				for (int num843 = 0; (double)num843 < dmg / (double)lifeMax * 200.0; num843++)
				{
					Dust dust133 = Main.dust[Dust.NewDust(position, width, height, 268)];
					dust133.color = color;
					dust133.noGravity = true;
					dust133.scale = 1.5f;
					dust133.fadeIn = 0.7f;
					Dust dust13 = dust133;
					Dust dust190 = dust13;
					dust190.velocity *= 3f;
					dust133 = Main.dust[Dust.NewDust(position, width, height, 268)];
					dust133.color = color;
					dust133.noGravity = true;
					dust133.scale = 1.5f;
					dust133.fadeIn = 0.7f;
					dust13 = dust133;
					dust190 = dust13;
					dust190.velocity *= 3f;
				}
			}
			else
			{
				for (int num844 = 0; num844 < 30; num844++)
				{
					Dust dust134 = Main.dust[Dust.NewDust(position, width, height, 268)];
					dust134.color = color;
					dust134.noGravity = true;
					dust134.scale = 1.5f;
					dust134.fadeIn = 0.7f;
					Dust dust12 = dust134;
					Dust dust190 = dust12;
					dust190.velocity *= 3f;
					dust134 = Main.dust[Dust.NewDust(position, width, height, 268)];
					dust134.color = color;
					dust134.noGravity = true;
					dust134.scale = 1.5f;
					dust134.fadeIn = 0.7f;
					dust12 = dust134;
					dust190 = dust12;
					dust190.velocity *= 3f;
				}
				Gore.NewGore(position, velocity, 960, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 961, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 963, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 40f), velocity, 962, scale);
			}
		}
		else if (type == 546)
		{
			Color color2 = new Color(150, 108, 78) * 0.7f;
			if (life > 0)
			{
				for (int num846 = 0; (double)num846 < dmg / (double)lifeMax * 50.0; num846++)
				{
					Dust dust135 = Main.dust[Dust.NewDust(position, width, height, 268)];
					dust135.color = color2;
					dust135.noGravity = true;
					dust135.scale = 1.5f;
					dust135.fadeIn = 0.7f;
					Dust dust11 = dust135;
					Dust dust190 = dust11;
					dust190.velocity *= 3f;
					dust135 = Main.dust[Dust.NewDust(position, width, height, 268)];
					dust135.color = color2;
					dust135.noGravity = true;
					dust135.scale = 1.5f;
					dust135.fadeIn = 0.7f;
					dust11 = dust135;
					dust190 = dust11;
					dust190.velocity *= 3f;
				}
			}
			else
			{
				for (int num847 = 0; num847 < 20; num847++)
				{
					Dust dust136 = Main.dust[Dust.NewDust(position, width, height, 268)];
					dust136.color = color2;
					dust136.noGravity = true;
					dust136.scale = 1.5f;
					dust136.fadeIn = 0.7f;
					Dust dust9 = dust136;
					Dust dust190 = dust9;
					dust190.velocity *= 3f;
					dust136 = Main.dust[Dust.NewDust(position, width, height, 268)];
					dust136.color = color2;
					dust136.noGravity = true;
					dust136.scale = 1.5f;
					dust136.fadeIn = 0.7f;
					dust9 = dust136;
					dust190 = dust9;
					dust190.velocity *= 3f;
				}
				for (int num848 = 0; num848 < 20; num848++)
				{
					int num849 = Dust.NewDust(position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
					Dust dust10 = Main.dust[num849];
					Dust dust190 = dust10;
					dust190.velocity *= 2f;
					Main.dust[num849].noGravity = true;
				}
				Gore.NewGore(position, velocity, 964, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 965, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 966, scale);
			}
		}
		if (type == 378)
		{
			if (life > 0)
			{
				for (int num850 = 0; (double)num850 < dmg / (double)lifeMax * 50.0; num850++)
				{
					Dust.NewDust(position, width, height, 7);
				}
			}
			else
			{
				for (int num851 = 0; num851 < 20; num851++)
				{
					Dust.NewDust(position, width, height, 7);
				}
			}
		}
		if (type == 437 && instantKill)
		{
			for (int num852 = 0; num852 < 6; num852++)
			{
				int num853 = Gore.NewGore(base.Center - new Vector2(10f), Vector2.UnitY.RotatedByRandom(6.2831854820251465) * 5f, 728 + num852);
			}
		}
		if (type == 398 && dmg == 1337.0 && Main.netMode != 2)
		{
			MoonlordDeathDrama.ThrowPieces(base.Center, Main.rand.Next(100));
		}
		if (type == 488)
		{
			localAI[0] = (int)dmg;
			if (localAI[0] < 20f)
			{
				localAI[0] = 20f;
			}
			if (localAI[0] > 120f)
			{
				localAI[0] = 120f;
			}
			localAI[1] = hitDirection;
		}
		if (type == 583 || type == 584 || type == 585)
		{
			Color value = Color.HotPink;
			Color value2 = Color.LightPink;
			int num854 = 4;
			if (type == 584)
			{
				value = Color.LimeGreen;
				value2 = Color.LightSeaGreen;
			}
			if (type == 585)
			{
				value = Color.RoyalBlue;
				value2 = Color.LightBlue;
			}
			if (life > 0)
			{
				for (int num855 = 0; (double)num855 < dmg / (double)lifeMax * 50.0; num855++)
				{
					Dust dust137 = Dust.NewDustDirect(base.Center - new Vector2((float)num854) * 0.5f, num854 + 4, num854 + 4, 278, 0f, 0f, 200, Color.Lerp(value, value2, Main.rand.NextFloat()), 0.65f);
					dust137.noGravity = true;
				}
			}
			else
			{
				for (int num3 = 0; num3 < 20; num3++)
				{
					Dust dust138 = Dust.NewDustDirect(base.Center - new Vector2((float)num854) * 0.5f, num854 + 4, num854 + 4, 278, 0f, 0f, 200, Color.Lerp(value, value2, Main.rand.NextFloat()), 0.65f);
					Dust dust33 = dust138;
					Dust dust190 = dust33;
					dust190.velocity *= 1.5f;
					dust138.noGravity = true;
				}
			}
		}
		else if (type >= 513 && type <= 515)
		{
			if (life > 0)
			{
				for (int num4 = 0; (double)num4 < dmg / (double)lifeMax * 100.0; num4++)
				{
					Dust.NewDust(position, width, height, 250, hitDirection, -1f, alpha, this.color, scale);
				}
			}
			else
			{
				for (int num5 = 0; num5 < 50; num5++)
				{
					Dust.NewDust(position, width, height, 250, hitDirection, -2f, alpha, this.color, scale);
				}
				int num6 = Gore.NewGore(position, velocity, type - 513 + 822);
				Main.gore[num6].alpha = alpha;
			}
		}
		else if (type >= 510 && type <= 512)
		{
			if (life > 0)
			{
				for (int num7 = 0; (double)num7 < dmg / (double)lifeMax * 100.0; num7++)
				{
					Dust.NewDust(position, width, height, 250, hitDirection, -1f, alpha, this.color, scale);
				}
			}
			else
			{
				for (int num8 = 0; num8 < 50; num8++)
				{
					Dust.NewDust(position, width, height, 250, hitDirection, -2f, alpha, this.color, scale);
				}
				int num9 = Gore.NewGore(position, velocity, type - 510 + 819);
				Main.gore[num9].alpha = alpha;
			}
		}
		else if (type >= 621 && type <= 623)
		{
			if (life > 0)
			{
				for (int num10 = 0; (double)num10 < dmg / (double)lifeMax * 100.0; num10++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f, alpha, this.color, scale);
				}
			}
			else
			{
				for (int num11 = 0; num11 < 50; num11++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -2f, alpha, this.color, scale);
				}
				int num12 = Gore.NewGore(position, velocity, type - 621 + 1187);
				Main.gore[num12].alpha = alpha;
			}
		}
		else if (type == 518 || type == 416)
		{
			if (life > 0)
			{
				for (int num14 = 0; (double)num14 < dmg / (double)lifeMax * 20.0; num14++)
				{
					Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					if (Main.rand.Next(4) == 0)
					{
						Dust dust139 = Main.dust[Dust.NewDust(position, width, height, 6)];
						dust139.noGravity = true;
						dust139.scale = 1.5f;
						dust139.fadeIn = 1f;
						Dust dust32 = dust139;
						Dust dust190 = dust32;
						dust190.velocity *= 3f;
					}
				}
			}
			else
			{
				for (int num15 = 0; num15 < 20; num15++)
				{
					Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					if (Main.rand.Next(3) == 0)
					{
						Dust dust141 = Main.dust[Dust.NewDust(position, width, height, 6)];
						dust141.noGravity = true;
						dust141.scale = 1.5f;
						dust141.fadeIn = 1f;
						Dust dust31 = dust141;
						Dust dust190 = dust31;
						dust190.velocity *= 3f;
					}
				}
				Gore.NewGore(position, velocity, 844, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 845, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 847, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 835, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 836, scale);
			}
		}
		else if (type == 419)
		{
			if (life > 0)
			{
				for (int num16 = 0; (double)num16 < dmg / (double)lifeMax * 20.0; num16++)
				{
					Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					if (Main.rand.Next(4) == 0)
					{
						Dust dust142 = Main.dust[Dust.NewDust(position, width, height, 6)];
						dust142.noGravity = true;
						dust142.scale = 1.5f;
						dust142.fadeIn = 1f;
						Dust dust30 = dust142;
						Dust dust190 = dust30;
						dust190.velocity *= 3f;
					}
				}
			}
			else
			{
				for (int num17 = 0; num17 < 20; num17++)
				{
					Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					if (Main.rand.Next(3) == 0)
					{
						Dust dust143 = Main.dust[Dust.NewDust(position, width, height, 6)];
						dust143.noGravity = true;
						dust143.scale = 1.5f;
						dust143.fadeIn = 1f;
						Dust dust29 = dust143;
						Dust dust190 = dust29;
						dust190.velocity *= 3f;
					}
				}
				Gore.NewGore(position, velocity, 844, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 845, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 846, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 846, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 847, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 847, scale);
			}
		}
		else if (type == 412 || type == 413 || type == 414)
		{
			if (life > 0)
			{
				for (int num18 = 0; (double)num18 < dmg / (double)lifeMax * 50.0; num18++)
				{
					Dust.NewDust(position, width, height, 241, hitDirection, -1f);
				}
			}
			else
			{
				for (int num19 = 0; num19 < 6; num19++)
				{
					Dust.NewDust(position, width, height, 241, 2.5f * (float)hitDirection, -2.5f);
				}
				for (int num20 = 0; num20 < 2; num20++)
				{
					Dust.NewDust(position, width, height, 6, 2.5f * (float)hitDirection, -2.5f, 100, Color.Transparent, 2f);
				}
				Gore.NewGore(position, velocity, type - 412 + 828);
			}
		}
		else if (type == 415)
		{
			if (life > 0)
			{
				for (int num21 = 0; (double)num21 < dmg / (double)lifeMax * 20.0; num21++)
				{
					Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					if (Main.rand.Next(4) == 0)
					{
						Dust dust144 = Main.dust[Dust.NewDust(position, width, height, 6)];
						dust144.noGravity = true;
						dust144.scale = 1.5f;
						dust144.fadeIn = 1f;
						Dust dust28 = dust144;
						Dust dust190 = dust28;
						dust190.velocity *= 3f;
					}
				}
			}
			else
			{
				for (int num22 = 0; num22 < 40; num22++)
				{
					Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					Dust dust145 = Main.dust[Dust.NewDust(position, width, height, 6)];
					dust145.noGravity = true;
					dust145.scale = 1.5f;
					dust145.fadeIn = 1f;
					Dust dust27 = dust145;
					Dust dust190 = dust27;
					dust190.velocity *= 3f;
				}
				Gore.NewGore(base.Center, velocity * 0.8f, 831);
				Gore.NewGore(base.Center, velocity * 0.8f, 832);
				Gore.NewGore(base.Center, velocity * 0.9f, 833);
				Gore.NewGore(base.Center, velocity * 0.9f, 834);
			}
		}
		else if (type == 417)
		{
			if (life > 0)
			{
				for (int num23 = 0; (double)num23 < dmg / (double)lifeMax * 20.0; num23++)
				{
					Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					if (Main.rand.Next(4) == 0)
					{
						Dust dust146 = Main.dust[Dust.NewDust(position, width, height, 6)];
						dust146.noGravity = true;
						dust146.scale = 1.5f;
						dust146.fadeIn = 1f;
						Dust dust26 = dust146;
						Dust dust190 = dust26;
						dust190.velocity *= 3f;
					}
				}
			}
			else
			{
				for (int num25 = 0; num25 < 30; num25++)
				{
					Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					if (Main.rand.Next(2) == 0)
					{
						Dust dust147 = Main.dust[Dust.NewDust(position, width, height, 6)];
						dust147.noGravity = true;
						dust147.scale = 1.5f;
						dust147.fadeIn = 1f;
						Dust dust25 = dust147;
						Dust dust190 = dust25;
						dust190.velocity *= 3f;
					}
				}
				Gore.NewGore(position, velocity, 837, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 838, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 838, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 838, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 839, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 839, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 38f), velocity, 840, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 38f), velocity, 840, scale);
			}
		}
		else if (type == 418)
		{
			if (life > 0)
			{
				for (int num26 = 0; (double)num26 < dmg / (double)lifeMax * 20.0; num26++)
				{
					Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					if (Main.rand.Next(2) == 0)
					{
						Dust dust148 = Main.dust[Dust.NewDust(position, width, height, 6)];
						dust148.noGravity = true;
						dust148.scale = 1.5f;
						dust148.fadeIn = 1f;
						Dust dust24 = dust148;
						Dust dust190 = dust24;
						dust190.velocity *= 3f;
					}
				}
			}
			else
			{
				for (int num27 = 0; num27 < 20; num27++)
				{
					Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					Dust dust149 = Main.dust[Dust.NewDust(position, width, height, 6)];
					dust149.noGravity = true;
					dust149.scale = 1.5f;
					dust149.fadeIn = 1f;
					Dust dust22 = dust149;
					Dust dust190 = dust22;
					dust190.velocity *= 3f;
				}
				Gore.NewGore(base.Center, velocity * 0.8f, 841);
				Gore.NewGore(base.Center, velocity * 0.8f, 842);
				Gore.NewGore(base.Center, velocity * 0.8f, 842);
				Gore.NewGore(base.Center, velocity * 0.9f, 843);
				Gore.NewGore(base.Center, velocity * 0.9f, 843);
			}
		}
		if (type == 516)
		{
			for (int num28 = 0; num28 < 20; num28++)
			{
				int num29 = Dust.NewDust(position, width, height, 6, 2.5f * (float)hitDirection, -2.5f);
				Dust dust34 = Main.dust[num29];
				Dust dust190 = dust34;
				dust190.velocity *= 3f;
				dust34 = Main.dust[num29];
				dust190 = dust34;
				dust190.scale += Main.rand.NextFloat();
				if (Main.rand.Next(2) == 0)
				{
					num29 = Dust.NewDust(position, width, height, 259, 2.5f * (float)hitDirection, -2.5f);
					Main.dust[num29].noGravity = true;
				}
			}
		}
		if (type == 519)
		{
			Rectangle hitbox2 = base.Hitbox;
			for (int num30 = 0; num30 < oldPos.Length; num30 += 3)
			{
				hitbox2.X = (int)oldPos[num30].X;
				hitbox2.Y = (int)oldPos[num30].Y;
				for (int num31 = 0; num31 < 5; num31++)
				{
					int num32 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
					int num33 = Dust.NewDust(hitbox2.TopLeft(), width, height, num32, 2.5f * (float)hitDirection, -2.5f);
					Main.dust[num33].alpha = 200;
					Dust dust35 = Main.dust[num33];
					Dust dust190 = dust35;
					dust190.velocity *= 2.4f;
					dust35 = Main.dust[num33];
					dust190 = dust35;
					dust190.scale += Main.rand.NextFloat();
				}
			}
		}
		if (type == 522)
		{
			Vector2 spinningpoint = Utils.RotatedByRandom(new Vector2(0f, -3f), 3.1415927410125732);
			float num34 = 24f;
			Vector2 vector6 = default(Vector2);
			((Vector2)(ref vector6))._002Ector(1.05f, 1f);
			for (float num36 = 0f; num36 < num34; num36++)
			{
				int num37 = Dust.NewDust(base.Center, 0, 0, 66, 0f, 0f, 0, Color.Transparent);
				Main.dust[num37].position = base.Center;
				Dust obj = Main.dust[num37];
				double radians5 = (float)Math.PI * 2f * num36 / num34;
				center3 = default(Vector2);
				obj.velocity = spinningpoint.RotatedBy(radians5, center3) * vector6 * (0.8f + Main.rand.NextFloat() * 0.4f) * 2f;
				Main.dust[num37].color = Color.SkyBlue;
				Main.dust[num37].noGravity = true;
				Dust dust99 = Main.dust[num37];
				Dust dust190 = dust99;
				dust190.scale += 0.5f + Main.rand.NextFloat();
			}
		}
		else if (type == 426)
		{
			if (life > 0)
			{
				for (int num38 = 0; (double)num38 < dmg / (double)lifeMax * 50.0; num38++)
				{
					Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					if (Main.rand.Next(4) == 0)
					{
						Dust dust150 = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust150.noGravity = true;
						dust150.scale = 1.5f;
						dust150.fadeIn = 1f;
						Dust dust98 = dust150;
						Dust dust190 = dust98;
						dust190.velocity *= 3f;
					}
				}
			}
			else
			{
				for (int num39 = 0; num39 < 20; num39++)
				{
					Dust.NewDust(position, width, height, 241, hitDirection, -1f);
				}
				for (int num40 = 0; num40 < 30; num40++)
				{
					int num41 = Utils.SelectRandom<int>(Main.rand, 229, 240, 161);
					Dust dust152 = Main.dust[Dust.NewDust(position, width, height, num41)];
					dust152.noGravity = true;
					dust152.scale = 1.25f + Main.rand.NextFloat();
					dust152.fadeIn = 0.25f;
					Dust dust97 = dust152;
					Dust dust190 = dust97;
					dust190.velocity *= 2f;
					dust152.noLight = true;
				}
				Gore.NewGore(base.Top, velocity * 0.7f, 799);
				Gore.NewGore(base.Center, velocity * 0.8f, 800);
				Gore.NewGore(base.Center, velocity * 0.9f, 801);
				if (Main.netMode != 1)
				{
					int num42 = CountNPCS(428) + CountNPCS(427) + CountNPCS(426) * 3;
					int num43 = 20;
					if (num42 < num43)
					{
						for (int num44 = 0; num44 < 3; num44++)
						{
							int num45 = NewNPC(GetSpawnSource_NPCHurt(), (int)base.Center.X, (int)base.Center.Y, 428, whoAmI);
							Main.npc[num45].velocity = -Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (float)Main.rand.Next(3, 6) - Vector2.UnitY * 2f;
							Main.npc[num45].netUpdate = true;
						}
					}
				}
			}
		}
		else if (type == 427)
		{
			if (life > 0)
			{
				for (int num47 = 0; (double)num47 < dmg / (double)lifeMax * 20.0; num47++)
				{
					Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					if (Main.rand.Next(2) == 0)
					{
						Dust dust153 = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust153.noGravity = true;
						dust153.scale = 1.5f;
						dust153.fadeIn = 1f;
						Dust dust96 = dust153;
						Dust dust190 = dust96;
						dust190.velocity *= 3f;
					}
				}
			}
			else
			{
				for (int num48 = 0; num48 < 10; num48++)
				{
					Dust.NewDust(position, width, height, 241, hitDirection, -1f);
				}
				for (int num49 = 0; num49 < 20; num49++)
				{
					int num50 = Utils.SelectRandom<int>(Main.rand, 229, 229, 240);
					Dust dust154 = Main.dust[Dust.NewDust(position, width, height, num50)];
					dust154.noGravity = true;
					dust154.scale = 1.25f + Main.rand.NextFloat();
					dust154.fadeIn = 0.25f;
					Dust dust93 = dust154;
					Dust dust190 = dust93;
					dust190.velocity *= 3f;
					dust154.noLight = true;
				}
				Gore.NewGore(base.Center, velocity * 0.8f, 802);
				Gore.NewGore(base.Center, velocity * 0.9f, 803);
				Gore.NewGore(base.Center, velocity * 0.9f, 804);
				Gore.NewGore(base.Center, velocity * 0.8f, 805);
			}
		}
		else if (type == 429)
		{
			if (life > 0)
			{
				for (int num51 = 0; (double)num51 < dmg / (double)lifeMax * 20.0; num51++)
				{
					Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					if (Main.rand.Next(4) == 0)
					{
						Dust dust155 = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust155.noGravity = true;
						dust155.scale = 1.5f;
						dust155.fadeIn = 1f;
						Dust dust90 = dust155;
						Dust dust190 = dust90;
						dust190.velocity *= 3f;
					}
				}
			}
			else
			{
				for (int num52 = 0; num52 < 20; num52++)
				{
					Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					if (Main.rand.Next(3) == 0)
					{
						Dust dust156 = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust156.noGravity = true;
						dust156.scale = 1.5f;
						dust156.fadeIn = 1f;
						Dust dust87 = dust156;
						Dust dust190 = dust87;
						dust190.velocity *= 3f;
					}
				}
				Gore.NewGore(position, velocity, 808, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 809, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 809, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 810, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 810, scale);
				if (Main.netMode != 1)
				{
					Point point = base.Center.ToTileCoordinates();
					Point point2 = Main.player[target].Center.ToTileCoordinates();
					Vector2 vector7 = Main.player[target].Center - base.Center;
					int num53 = 20;
					int num54 = 3;
					int num55 = 7;
					int num56 = 2;
					int num58 = 0;
					bool flag2 = false;
					if (((Vector2)(ref vector7)).Length() > 2000f)
					{
						flag2 = true;
					}
					while (!flag2 && num58 < 100)
					{
						num58++;
						int num59 = Main.rand.Next(point2.X - num53, point2.X + num53 + 1);
						int num60 = Main.rand.Next(point2.Y - num53, point2.Y - Math.Abs(num59 - point2.X) + 1);
						if ((num60 < point2.Y - num55 || num60 > point2.Y + num55 || num59 < point2.X - num55 || num59 > point2.X + num55) && (num60 < point.Y - num54 || num60 > point.Y + num54 || num59 < point.X - num54 || num59 > point.X + num54) && !Main.tile[num59, num60].nactive())
						{
							bool flag3 = true;
							if (flag3 && Main.tile[num59, num60].lava())
							{
								flag3 = false;
							}
							if (flag3 && Collision.SolidTiles(num59 - num56, num59 + num56, num60 - num56, num60 + num56))
							{
								flag3 = false;
							}
							if (flag3 && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
							{
								flag3 = false;
							}
							if (flag3)
							{
								Projectile.NewProjectile(GetSpawnSource_ForProjectile(), num59 * 16 + 8, num60 * 16 + 8, 0f, 0f, 578, 0, 1f, Main.myPlayer);
								flag2 = true;
								break;
							}
						}
					}
				}
			}
		}
		else if (type == 425)
		{
			if (life > 0)
			{
				for (int num61 = 0; (double)num61 < dmg / (double)lifeMax * 20.0; num61++)
				{
					Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					if (Main.rand.Next(4) == 0)
					{
						Dust dust157 = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust157.noGravity = true;
						dust157.scale = 1.5f;
						dust157.fadeIn = 1f;
						Dust dust85 = dust157;
						Dust dust190 = dust85;
						dust190.velocity *= 3f;
					}
				}
			}
			else
			{
				for (int num62 = 0; num62 < 20; num62++)
				{
					Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					if (Main.rand.Next(3) == 0)
					{
						Dust dust158 = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust158.noGravity = true;
						dust158.scale = 1.5f;
						dust158.fadeIn = 1f;
						Dust dust83 = dust158;
						Dust dust190 = dust83;
						dust190.velocity *= 3f;
					}
				}
				Gore.NewGore(position, velocity, 796, scale);
				Gore.NewGore(base.Center, velocity, 797, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 798, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 809, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 809, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 810, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 810, scale);
			}
		}
		else if (type == 428)
		{
			if (life > 0)
			{
				for (int num63 = 0; (double)num63 < dmg / (double)lifeMax * 20.0; num63++)
				{
					Dust.NewDust(position, width, height, 241, hitDirection, -1f);
				}
			}
			else
			{
				for (int num64 = 0; num64 < 10; num64++)
				{
					Dust.NewDust(position, width, height, 241, hitDirection, -1f);
					if (Main.rand.Next(2) == 0)
					{
						Dust.NewDust(position, width, height, 229);
					}
					else
					{
						Dust.NewDust(position, width, height, 240);
					}
				}
				Gore.NewGore(position, velocity * 0.8f, 806);
				Gore.NewGore(position, velocity * 0.8f, 807);
			}
		}
		else if (type == 424)
		{
			if (life > 0)
			{
				for (int num65 = 0; (double)num65 < dmg / (double)lifeMax * 20.0; num65++)
				{
					Dust.NewDust(position, width, height, 249, hitDirection, -1f);
					if (Main.rand.Next(4) == 0)
					{
						Dust dust159 = Main.dust[Dust.NewDust(position, width, height, 242)];
						dust159.noGravity = true;
						dust159.scale = 1.5f;
						dust159.fadeIn = 1f;
						Dust dust80 = dust159;
						Dust dust190 = dust80;
						dust190.velocity *= 3f;
					}
				}
			}
			else
			{
				for (int num66 = 0; num66 < 20; num66++)
				{
					Dust.NewDust(position, width, height, 249, hitDirection, -1f);
					if (Main.rand.Next(3) == 0)
					{
						Dust dust160 = Main.dust[Dust.NewDust(position, width, height, 242)];
						dust160.noGravity = true;
						dust160.scale = 1.5f;
						dust160.fadeIn = 1f;
						Dust dust77 = dust160;
						Dust dust190 = dust77;
						dust190.velocity *= 3f;
					}
				}
				Gore.NewGore(position, velocity, 793, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 794, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 794, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 795, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 795, scale);
			}
		}
		else if (type == 423)
		{
			if (life > 0)
			{
				for (int num67 = 0; (double)num67 < dmg / (double)lifeMax * 50.0; num67++)
				{
					Dust.NewDust(position, width, height, 249, hitDirection, -1f);
					if (Main.rand.Next(4) == 0)
					{
						Dust dust161 = Main.dust[Dust.NewDust(position, width, height, 242)];
						dust161.noGravity = true;
						dust161.scale = 1.5f;
						dust161.fadeIn = 1f;
						Dust dust74 = dust161;
						Dust dust190 = dust74;
						dust190.velocity *= 3f;
					}
				}
			}
			else
			{
				for (int num69 = 0; num69 < 20; num69++)
				{
					Dust.NewDust(position, width, height, 249, hitDirection, -1f);
					Dust dust163 = Main.dust[Dust.NewDust(position, width, height, 242)];
					dust163.noGravity = true;
					dust163.scale = 1.5f;
					dust163.fadeIn = 1f;
					Dust dust72 = dust163;
					Dust dust190 = dust72;
					dust190.velocity *= 3f;
				}
				Gore.NewGore(base.Center, velocity * 0.8f, 790);
				Gore.NewGore(base.Center, velocity * 0.8f, 791);
				Gore.NewGore(base.Center, velocity * 0.9f, 792);
			}
		}
		else if (type == 421)
		{
			if (life > 0)
			{
				for (int num70 = 0; (double)num70 < dmg / (double)lifeMax * 20.0; num70++)
				{
					Dust.NewDust(position, width, height, 249, hitDirection, -1f);
					if (Main.rand.Next(2) == 0)
					{
						Dust dust164 = Main.dust[Dust.NewDust(position, width, height, 242)];
						dust164.noGravity = true;
						dust164.scale = 1.5f;
						dust164.fadeIn = 1f;
						Dust dust69 = dust164;
						Dust dust190 = dust69;
						dust190.velocity *= 3f;
					}
				}
			}
			else
			{
				for (int num71 = 0; num71 < 10; num71++)
				{
					Dust.NewDust(position, width, height, 249, hitDirection, -1f);
					Dust dust165 = Main.dust[Dust.NewDust(position, width, height, 242)];
					dust165.noGravity = true;
					dust165.scale = 1.5f;
					dust165.fadeIn = 1f;
					Dust dust66 = dust165;
					Dust dust190 = dust66;
					dust190.velocity *= 3f;
				}
				Gore.NewGore(base.Center, velocity * 0.8f, 785);
				Gore.NewGore(base.Center, velocity * 0.8f, 786);
				Gore.NewGore(base.Center, velocity * 0.9f, 787);
			}
		}
		else if (type == 420)
		{
			if (life > 0)
			{
				for (int num72 = 0; (double)num72 < dmg / (double)lifeMax * 20.0; num72++)
				{
					Dust.NewDust(position, width, height, 249, hitDirection, -1f);
					if (Main.rand.Next(2) == 0)
					{
						Dust dust166 = Main.dust[Dust.NewDust(position, width, height, 242)];
						dust166.noGravity = true;
						dust166.scale = 1.5f;
						dust166.fadeIn = 1f;
						Dust dust63 = dust166;
						Dust dust190 = dust63;
						dust190.velocity *= 3f;
					}
				}
			}
			else
			{
				for (int num73 = 0; num73 < 10; num73++)
				{
					Dust.NewDust(position, width, height, 249, hitDirection, -1f);
					Dust dust167 = Main.dust[Dust.NewDust(position, width, height, 242)];
					dust167.noGravity = true;
					dust167.scale = 1.5f;
					dust167.fadeIn = 1f;
					Dust dust60 = dust167;
					Dust dust190 = dust60;
					dust190.velocity *= 3f;
				}
				Gore.NewGore(base.Center, velocity * 0.8f, 782);
				Gore.NewGore(base.Center, velocity * 0.8f, 783);
				Gore.NewGore(base.Center, velocity * 0.9f, 784);
			}
		}
		else if (type == 406 || type == 405)
		{
			if (life > 0)
			{
				for (int num74 = 0; (double)num74 < 10.0 + dmg / 10.0; num74++)
				{
					int num75 = width / 4;
					Vector2 vector8 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (float)Main.rand.Next(24, 41) / 8f;
					int num76 = Dust.NewDust(base.Center - Vector2.One * (float)num75, num75 * 2, num75 * 2, 229);
					Dust dust168 = Main.dust[num76];
					Vector2 vector9 = Vector2.Normalize(dust168.position - base.Center);
					dust168.position = base.Center + vector9 * (float)num75 * scale - new Vector2(4f);
					if (num74 < 30)
					{
						dust168.velocity = vector9 * ((Vector2)(ref dust168.velocity)).Length() * 2f;
					}
					else
					{
						dust168.velocity = 2f * vector9 * (float)Main.rand.Next(45, 91) / 10f;
					}
					dust168.noGravity = true;
					dust168.scale = 0.7f + Main.rand.NextFloat();
				}
			}
			else
			{
				for (int num77 = 0; num77 < 60; num77++)
				{
					int num78 = width / 4;
					Vector2 vector10 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (float)Main.rand.Next(24, 41) / 8f;
					int num80 = Dust.NewDust(base.Center - Vector2.One * (float)num78, num78 * 2, num78 * 2, 229);
					Dust dust169 = Main.dust[num80];
					Vector2 vector11 = Vector2.Normalize(dust169.position - base.Center);
					dust169.position = base.Center + vector11 * (float)num78 * scale - new Vector2(4f);
					if (num77 < 30)
					{
						dust169.velocity = vector11 * ((Vector2)(ref dust169.velocity)).Length() * 2f;
					}
					else
					{
						dust169.velocity = 2f * vector11 * (float)Main.rand.Next(45, 91) / 10f;
					}
					dust169.noGravity = true;
					dust169.scale = 0.7f;
				}
				if (type == 405)
				{
					int num81 = CountNPCS(406) + CountNPCS(405);
					int num82 = 4;
					if (num81 >= 4)
					{
						num82 = 3;
					}
					if (num81 >= 7)
					{
						num82 = 2;
					}
					if (num81 >= 10)
					{
						num82 = 1;
					}
					for (int num83 = 0; num83 < num82; num83++)
					{
						Vector2 vector13 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (3f + Main.rand.NextFloat() * 4f);
						int num84 = NewNPC(GetSpawnSource_NPCHurt(), (int)base.Center.X, (int)base.Bottom.Y, 406, whoAmI);
						Main.npc[num84].velocity = vector13;
					}
				}
			}
		}
		else if (type == 409)
		{
			if (life > 0)
			{
				for (int num85 = 0; (double)num85 < dmg / (double)lifeMax * 50.0; num85++)
				{
					Dust.NewDust(position, width, height, 17, hitDirection, -1f);
					if (Main.rand.Next(4) == 0)
					{
						Dust dust170 = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust170.noGravity = true;
					}
				}
			}
			else
			{
				for (int num86 = 0; num86 < 20; num86++)
				{
					Dust.NewDust(position, width, height, 17, hitDirection, -1f);
					Dust dust171 = Main.dust[Dust.NewDust(position, width, height, 229)];
					dust171.noGravity = true;
					Dust dust54 = dust171;
					Dust dust190 = dust54;
					dust190.velocity *= 3f;
				}
				Gore.NewGore(base.Center, velocity * 0.8f, 775);
				Gore.NewGore(base.Center, velocity * 0.8f, 776);
				Gore.NewGore(base.Center, velocity * 0.9f, 777);
			}
		}
		else if (type == 410)
		{
			if (life > 0)
			{
				for (int num87 = 0; (double)num87 < dmg / (double)lifeMax * 10.0; num87++)
				{
					Dust.NewDust(position, width, height, 17, hitDirection, -1f);
					if (Main.rand.Next(4) == 0)
					{
						Dust dust172 = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust172.noGravity = true;
					}
				}
			}
			else
			{
				for (int num88 = 0; num88 < 5; num88++)
				{
					Dust.NewDust(position, width, height, 17, hitDirection, -1f);
					Dust dust174 = Main.dust[Dust.NewDust(position, width, height, 229)];
					dust174.noGravity = true;
					Dust dust52 = dust174;
					Dust dust190 = dust52;
					dust190.velocity *= 3f;
				}
			}
		}
		else if (type == 407)
		{
			if (life > 0)
			{
				for (int num89 = 0; (double)num89 < dmg / (double)lifeMax * 50.0; num89++)
				{
					Dust.NewDust(position, width, height, 17, hitDirection, -1f, 0, Color.Transparent, 0.75f);
					if (Main.rand.Next(2) == 0)
					{
						Dust dust175 = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust175.noGravity = true;
					}
				}
			}
			else
			{
				for (int num91 = 0; num91 < 20; num91++)
				{
					if (Main.rand.Next(3) != 0)
					{
						Dust.NewDust(position, width, height, 17, hitDirection, -1f);
					}
					Dust dust176 = Main.dust[Dust.NewDust(position, width, height, 229)];
					dust176.noGravity = true;
					Dust dust51 = dust176;
					Dust dust190 = dust51;
					dust190.velocity *= 3f;
				}
				Gore.NewGore(base.Top, velocity * 0.8f, 778);
				Gore.NewGore(base.Top, velocity * 0.8f, 779);
				Gore.NewGore(base.Center, velocity * 0.9f, 780);
				Gore.NewGore(base.Center, velocity * 0.9f, 781);
				Gore.NewGore(base.Center, velocity * 0.9f, 780);
				Gore.NewGore(base.Center, velocity * 0.9f, 781);
			}
		}
		else if (type == 402)
		{
			if (life > 0)
			{
				for (int num92 = 0; (double)num92 < dmg / (double)lifeMax * 3.0; num92++)
				{
					if (Main.rand.Next(3) == 0)
					{
						Dust.NewDust(position, width, height, 17, hitDirection, -1f, 0, Color.Transparent, 0.75f);
					}
					if (Main.rand.Next(2) == 0)
					{
						Dust dust177 = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust177.noGravity = true;
					}
					for (int num93 = 0; num93 < oldPos.Length; num93++)
					{
						if (Main.rand.Next(4) == 0)
						{
							if (oldPos[num93] == Vector2.Zero)
							{
								break;
							}
							if (Main.rand.Next(3) == 0)
							{
								Dust.NewDust(oldPos[num93], width, height, 17, hitDirection, -1f, 0, Color.Transparent, 0.75f);
							}
							if (Main.rand.Next(2) == 0)
							{
								Dust dust178 = Main.dust[Dust.NewDust(oldPos[num93], width, height, 229)];
								dust178.noGravity = true;
							}
						}
					}
				}
			}
			else
			{
				for (int num94 = 0; num94 < 5; num94++)
				{
					if (Main.rand.Next(3) == 0)
					{
						Dust.NewDust(position, width, height, 17, hitDirection, -1f);
					}
					Dust dust179 = Main.dust[Dust.NewDust(position, width, height, 229)];
					dust179.noGravity = true;
					Dust dust49 = dust179;
					Dust dust190 = dust49;
					dust190.velocity *= 3f;
				}
				for (int num95 = 0; num95 < oldPos.Length; num95++)
				{
					if (Main.rand.Next(4) != 0)
					{
						continue;
					}
					if (oldPos[num95] == Vector2.Zero)
					{
						break;
					}
					for (int num96 = 0; num96 < 2; num96++)
					{
						if (Main.rand.Next(3) == 0)
						{
							Dust.NewDust(oldPos[num95], width, height, 17, hitDirection, -1f);
						}
						Dust dust180 = Main.dust[Dust.NewDust(oldPos[num95], width, height, 229)];
						dust180.noGravity = true;
						Dust dust50 = dust180;
						Dust dust190 = dust50;
						dust190.velocity *= 3f;
					}
				}
			}
		}
		else if (type == 411)
		{
			if (life > 0)
			{
				for (int num97 = 0; (double)num97 < dmg / (double)lifeMax * 20.0; num97++)
				{
					Dust.NewDust(position, width, height, 17, hitDirection, -1f);
					if (Main.rand.Next(4) == 0)
					{
						Dust dust181 = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust181.noGravity = true;
					}
				}
			}
			else
			{
				for (int num98 = 0; num98 < 20; num98++)
				{
					Dust.NewDust(position, width, height, 17, hitDirection, -1f);
					if (Main.rand.Next(2) == 0)
					{
						Dust dust182 = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust182.noGravity = true;
					}
				}
				Gore.NewGore(position, velocity, 772, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 773, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 773, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 774, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 774, scale);
			}
		}
		else if (type == 491)
		{
			if (life <= 0)
			{
				Vector2 vector14 = base.Center - new Vector2(60f);
				Vector2 spinningpoint6 = new Vector2((float)((spriteDirection != 1) ? 1 : (-1)), 0f);
				double radians6 = rotation;
				center3 = default(Vector2);
				Vector2 vector15 = Utils.RotatedBy(spinningpoint6, radians6, center3);
				Gore.NewGore(vector14 + vector15 * (float)(width / 2), velocity, 858, scale);
				Gore.NewGore(vector14 + vector15 * (float)(width / 3), velocity, 857, scale);
				for (int num99 = -1; num99 < 2; num99++)
				{
					Gore.NewGore(vector14 + vector15 * ((float)width * (0.45f + (float)num99 * 0.1f)), velocity, 859, scale);
					Gore.NewGore(vector14 + vector15 * ((float)width * (0.4f + (float)num99 * 0.1f)), velocity, 859, scale);
					Gore.NewGore(vector14 + vector15 * ((float)width * (0.35f + (float)num99 * 0.1f)), velocity, 859, scale);
				}
				for (int num100 = -1; num100 < 2; num100++)
				{
					Gore.NewGore(vector14 + vector15 * ((float)width * 0.35f) - new Vector2(0f, 200f) + Utils.RandomVector2(Main.rand, -40f, 40f), velocity, Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
					Gore.NewGore(vector14 + vector15 * ((float)width * 0.15f) - new Vector2(0f, 200f) + Utils.RandomVector2(Main.rand, -40f, 40f), velocity, Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
					Gore.NewGore(vector14 + vector15 * ((float)width * -0.35f) - new Vector2(0f, 200f) + Utils.RandomVector2(Main.rand, -40f, 40f), velocity, Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
					Gore.NewGore(vector14 + vector15 * ((float)width * -0.15f) - new Vector2(0f, 300f) + Utils.RandomVector2(Main.rand, -40f, 40f), velocity, Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
					Gore.NewGore(vector14 + vector15 * ((float)width * -0.15f) - new Vector2(0f, 300f) + Utils.RandomVector2(Main.rand, -40f, 40f), velocity, Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
				}
				for (int num102 = 0; num102 < 2; num102++)
				{
					Gore.NewGore(vector14 + vector15 * ((float)width * 0.15f) - new Vector2(0f, (float)(160 + 60 * num102)), velocity, 855, scale);
					Gore.NewGore(vector14 + vector15 * ((float)width * -0.15f) - new Vector2(0f, (float)(160 + 60 * num102)), velocity, 855, scale);
				}
				for (int num103 = -1; num103 < 2; num103++)
				{
					Gore.NewGore(vector14 + vector15 * ((float)width * (0.25f + (float)num103 * 0.1f)) - new Vector2(0f, (float)(20 + 40 * num103)), velocity, 854, scale);
					Gore.NewGore(vector14 + vector15 * ((float)width * (-0.45f + (float)num103 * 0.1f)) - new Vector2(0f, (float)(20 + 40 * num103)), velocity, 853, scale);
					Gore.NewGore(vector14 + vector15 * ((float)width * (0.05f + (float)num103 * 0.1f)) - new Vector2(0f, (float)(20 + 40 * num103)), velocity, 856, scale);
				}
				for (int num104 = 0; num104 < 30; num104++)
				{
					int num105 = Main.rand.Next(861, 863);
					int num106 = Gore.NewGore(base.Center - new Vector2(60f), Vector2.Zero, num105);
					Main.gore[num106].alpha = 100;
					Main.gore[num106].velocity = Vector2.Transform(new Vector2(4f, 0f), Matrix.CreateRotationZ((float)(Main.rand.NextDouble() * 6.2831854820251465)));
					Main.gore[num106].position = new Vector2(position.X - 20f + ((float)width + 40f) * Main.rand.NextFloat(), position.Y - 240f + (float)(height + 240 - 20) * Main.rand.NextFloat());
				}
				for (int num107 = 0; num107 < 120; num107++)
				{
					int num108 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
					Main.dust[num108].noGravity = true;
					Dust dust48 = Main.dust[num108];
					Dust dust190 = dust48;
					dust190.velocity *= 5f;
					num108 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust48 = Main.dust[num108];
					dust190 = dust48;
					dust190.velocity *= 4f;
					Main.dust[num108].noGravity = true;
				}
				if (Main.netMode != 1)
				{
					for (int num109 = 0; num109 < 4; num109++)
					{
						float num110 = (float)(num109 < 2).ToDirectionInt() * ((float)Math.PI / 8f + (float)Math.PI / 4f * Main.rand.NextFloat());
						Vector2 spinningpoint7 = new Vector2(0f, (0f - Main.rand.NextFloat()) * 0.5f - 0.5f);
						double radians7 = num110;
						center3 = default(Vector2);
						Vector2 vector16 = Utils.RotatedBy(spinningpoint7, radians7, center3) * 6f;
						Projectile.NewProjectile(GetSpawnSource_ForProjectile(), base.Center.X, base.Center.Y, vector16.X, vector16.Y, 594, 0, 0f, Main.myPlayer);
					}
				}
			}
		}
		else if (type == 492)
		{
			if (life <= 0)
			{
				for (int num111 = 0; num111 < 7; num111++)
				{
					int num114 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust47 = Main.dust[num114];
					Dust dust190 = dust47;
					dust190.velocity *= 1.4f;
				}
				for (int num115 = 0; num115 < 10; num115++)
				{
					int num116 = Main.rand.Next(61, 64);
					int num117 = Gore.NewGore(position, Vector2.Zero, num116);
					Main.gore[num117].alpha = 100;
					Main.gore[num117].velocity = Vector2.Transform(new Vector2(1f, 0f), Matrix.CreateRotationZ((float)(Main.rand.NextDouble() * 6.2831854820251465)));
				}
			}
		}
		else if (type >= 524 && type <= 527)
		{
			int num118 = 0;
			int num119 = 5;
			int num120 = 863;
			if (type == 525)
			{
				num118 = 75;
				num120 = 867;
			}
			else if (type == 526)
			{
				num118 = 170;
				num120 = 871;
			}
			else if (type == 527)
			{
				num118 = 67;
				num120 = 879;
			}
			if (life > 0)
			{
				for (int num121 = 0; (double)num121 < dmg / (double)lifeMax * 20.0; num121++)
				{
					Dust.NewDust(position, width, height, num119, hitDirection, -1f);
					if (Main.rand.Next(4) == 0 && num118 > 0)
					{
						Dust dust183 = Main.dust[Dust.NewDust(position, width, height, num118)];
						dust183.noGravity = true;
						dust183.scale = 1.5f;
						dust183.fadeIn = 1f;
						Dust dust46 = dust183;
						Dust dust190 = dust46;
						dust190.velocity *= 3f;
					}
				}
			}
			else
			{
				for (int num122 = 0; num122 < 20; num122++)
				{
					Dust.NewDust(position, width, height, num119, hitDirection, -1f);
					if (Main.rand.Next(3) == 0 && num118 > 0)
					{
						Dust dust185 = Main.dust[Dust.NewDust(position, width, height, num118)];
						dust185.noGravity = true;
						dust185.scale = 1.5f;
						dust185.fadeIn = 1f;
						Dust dust45 = dust185;
						Dust dust190 = dust45;
						dust190.velocity *= 3f;
					}
				}
				Gore.NewGore(position, velocity, num120, scale);
				Gore.NewGore(position, velocity, num120 + 1, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num120 + 2, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num120 + 2, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, num120 + 3, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, num120 + 3, scale);
			}
		}
		else if (type >= 528 && type <= 529)
		{
			int num123 = 5;
			int num125 = 875;
			if (type == 529)
			{
				num125 = 876;
			}
			if (life > 0)
			{
				for (int num126 = 0; (double)num126 < dmg / (double)lifeMax * 20.0; num126++)
				{
					Dust.NewDust(position, width, height, num123, hitDirection, -1f);
				}
			}
			else
			{
				for (int num127 = 0; num127 < 20; num127++)
				{
					Dust.NewDust(position, width, height, num123, hitDirection, -1f);
				}
				Gore.NewGore(position, velocity, num125, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 877, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 877, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 878, scale);
			}
		}
		else if (type == 530 || type == 531)
		{
			if (life > 0)
			{
				for (int num128 = 0; (double)num128 < dmg / (double)lifeMax * 30.0; num128++)
				{
					Dust.NewDust(position, width, height, 250, hitDirection, -1f, 100);
				}
			}
			else
			{
				for (int num129 = 0; num129 < 20; num129++)
				{
					Dust.NewDust(position, width, height, 250, 2.5f * (float)hitDirection, -2.5f, 100);
				}
				Gore.NewGore(position, velocity, 883);
				Gore.NewGore(position, velocity, 884);
				Gore.NewGore(position, velocity, 885);
				Gore.NewGore(position, velocity, 886);
				Gore.NewGore(position, velocity, 887);
			}
		}
		else if (type == 532)
		{
			if (life > 0)
			{
				for (int num130 = 0; (double)num130 < dmg / (double)lifeMax * 50.0; num130++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f, 100);
				}
			}
			else
			{
				for (int num131 = 0; num131 < 50; num131++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f, 100);
				}
				Gore.NewGore(position, velocity, 888);
				Gore.NewGore(position, velocity, 889);
				Gore.NewGore(position, velocity, 890);
				Gore.NewGore(position, velocity, 891);
			}
		}
		else if (type == 533)
		{
			if (life > 0)
			{
				for (int num132 = 0; (double)num132 < dmg / (double)lifeMax * 50.0; num132++)
				{
					int num133 = Dust.NewDust(position, width, height, 27, 0f, 0f, 50, default(Color), 1.5f);
					Dust dust44 = Main.dust[num133];
					Dust dust190 = dust44;
					dust190.velocity *= 2f;
					Main.dust[num133].noGravity = true;
				}
			}
			else
			{
				for (int num134 = 0; num134 < 40; num134++)
				{
					int num136 = Dust.NewDust(position, width, height, 27, 0f, 0f, 50, default(Color), 1.5f);
					Dust dust43 = Main.dust[num136];
					Dust dust190 = dust43;
					dust190.velocity *= 2f;
					Main.dust[num136].noGravity = true;
					Main.dust[num136].fadeIn = 1f;
				}
			}
		}
		else if (type == 460)
		{
			if (life > 0)
			{
				for (int num137 = 0; (double)num137 < dmg / (double)lifeMax * 100.0; num137++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
			}
			else
			{
				for (int num138 = 0; num138 < 50; num138++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 643, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 645, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 644, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 646, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 646, scale);
			}
		}
		else if (type == 477)
		{
			if (life > 0)
			{
				for (int num139 = 0; (double)num139 < dmg / (double)lifeMax * 100.0; num139++)
				{
					Dust.NewDust(position, width, height, 237, hitDirection, -1f);
				}
			}
			else
			{
				for (int num140 = 0; num140 < 50; num140++)
				{
					Dust.NewDust(position, width, height, 237, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 687, scale);
				Gore.NewGore(position, velocity, 688, scale);
				Gore.NewGore(position, velocity, 689, scale);
				Gore.NewGore(position, velocity, 690, scale);
				Gore.NewGore(position, velocity, 691, scale);
			}
		}
		else if (type == 479)
		{
			if (life > 0)
			{
				for (int num141 = 0; (double)num141 < dmg / (double)lifeMax * 100.0; num141++)
				{
					Dust.NewDust(position, width, height, 237, hitDirection, -1f);
				}
			}
			else
			{
				for (int num142 = 0; num142 < 50; num142++)
				{
					Dust.NewDust(position, width, height, 237, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 681, scale);
				Gore.NewGore(position, velocity, 682, scale);
				Gore.NewGore(position, velocity, 683, scale);
			}
		}
		else if (type == 478)
		{
			if (life > 0)
			{
				for (int num143 = 0; num143 < 10; num143++)
				{
					int num144 = Dust.NewDust(position, width, height, 238, hitDirection, -1f);
					Main.dust[num144].noGravity = true;
				}
			}
			else
			{
				for (int num145 = 0; num145 < 50; num145++)
				{
					Dust.NewDust(position, width, height, 237 + Main.rand.Next(2), 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 684, scale);
				Gore.NewGore(position, velocity, 685, scale);
				Gore.NewGore(position, velocity, 686, scale);
				Gore.NewGore(position, velocity, 684 + Main.rand.Next(3), scale);
			}
		}
		else if (type == 466)
		{
			if (life > 0)
			{
				for (int num147 = 0; (double)num147 < dmg / (double)lifeMax * 100.0; num147++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
			}
			else
			{
				for (int num148 = 0; num148 < 50; num148++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 656, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 657, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 659, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 658, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 658, scale);
			}
		}
		else if (type == 468)
		{
			if (life > 0)
			{
				for (int num149 = 0; (double)num149 < dmg / (double)lifeMax * 100.0; num149++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
			}
			else
			{
				for (int num150 = 0; num150 < 50; num150++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 662, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 663, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 663, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 664, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 664, scale);
			}
		}
		else if (type == 469)
		{
			if (life > 0)
			{
				for (int num151 = 0; (double)num151 < dmg / (double)lifeMax * 100.0; num151++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
			}
			else
			{
				for (int num152 = 0; num152 < 50; num152++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 665, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 666, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 666, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 667, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 667, scale);
			}
		}
		else if (type == 463)
		{
			if (life > 0)
			{
				for (int num153 = 0; (double)num153 < dmg / (double)lifeMax * 100.0; num153++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
			}
			else
			{
				for (int num154 = 0; num154 < 50; num154++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 653, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 654, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 654, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 655, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 655, scale);
			}
		}
		else if (type == 461)
		{
			if (life > 0)
			{
				for (int num155 = 0; (double)num155 < dmg / (double)lifeMax * 100.0; num155++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
			}
			else
			{
				for (int num156 = 0; num156 < 50; num156++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 647, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 648, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 648, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 649, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 649, scale);
			}
		}
		else if (type == 462)
		{
			if (life > 0)
			{
				for (int num158 = 0; (double)num158 < dmg / (double)lifeMax * 100.0; num158++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
			}
			else
			{
				for (int num159 = 0; num159 < 50; num159++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 650, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 651, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 651, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 652, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 652, scale);
			}
		}
		else if (type == 379 || type == 438)
		{
			if (life > 0)
			{
				for (int num160 = 0; (double)num160 < dmg / (double)(lifeMax * 50); num160++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
			}
			else
			{
				for (int num161 = 0; num161 < 30; num161++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 900, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 901, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 901, scale);
			}
		}
		else if (type == 439)
		{
			if (life > 0)
			{
				for (int num162 = 0; (double)num162 < dmg / (double)lifeMax * 100.0; num162++)
				{
					int num163 = Dust.NewDust(position, width, height, 5, 0f, 0f, 0, default(Color), 1.5f);
					Dust dust40 = Main.dust[num163];
					Dust dust190 = dust40;
					dust190.velocity *= 1.5f;
					Main.dust[num163].noGravity = true;
				}
			}
			else
			{
				for (int num164 = 0; num164 < 30; num164++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				for (int num165 = 0; num165 < 10; num165++)
				{
					int num166 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
					Dust dust39 = Main.dust[num166];
					Dust dust190 = dust39;
					dust190.velocity *= 2f;
					Main.dust[num166].noGravity = true;
				}
				int num167 = Main.rand.Next(1, 4);
				for (int num169 = 0; num169 < num167; num169++)
				{
					int num170 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2((float)hitDirection, 0f), Main.rand.Next(11, 14), scale);
					Gore gore10 = Main.gore[num170];
					Gore gore32 = gore10;
					gore32.velocity *= 0.8f;
				}
				Gore.NewGore(position, velocity, 902, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 10f), velocity, 903, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 901, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 901, scale);
			}
		}
		else if (type == 440)
		{
			if (life <= 0)
			{
				for (int num171 = 0; num171 < 10; num171++)
				{
					int num172 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
					Dust dust38 = Main.dust[num172];
					Dust dust190 = dust38;
					dust190.velocity *= 2f;
					Main.dust[num172].noGravity = true;
				}
				int num173 = Main.rand.Next(1, 4);
				for (int num174 = 0; num174 < num173; num174++)
				{
					int num175 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2((float)hitDirection, 0f), Main.rand.Next(11, 14), scale);
					Gore gore9 = Main.gore[num175];
					Gore gore32 = gore9;
					gore32.velocity *= 0.8f;
				}
			}
		}
		else if (type >= 454 && type <= 459)
		{
			if (life > 0)
			{
				for (int num176 = 0; (double)num176 < dmg / (double)lifeMax * 50.0; num176++)
				{
					int num177 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
					Dust dust37 = Main.dust[num177];
					Dust dust190 = dust37;
					dust190.velocity *= 1.5f;
					Main.dust[num177].noGravity = true;
				}
			}
			else
			{
				for (int num178 = 0; num178 < 10; num178++)
				{
					int num180 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
					Dust dust36 = Main.dust[num180];
					Dust dust190 = dust36;
					dust190.velocity *= 2f;
					Main.dust[num180].noGravity = true;
				}
				int num181 = Main.rand.Next(1, 4);
				for (int num182 = 0; num182 < num181; num182++)
				{
					int num183 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2((float)hitDirection, 0f), Main.rand.Next(11, 14), scale);
					Gore gore8 = Main.gore[num183];
					Gore gore32 = gore8;
					gore32.velocity *= 0.8f;
				}
			}
		}
		if (type == 372 || type == 373)
		{
			if (life > 0)
			{
				for (int num184 = 0; (double)num184 < dmg / (double)lifeMax * 100.0; num184++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
			}
			else
			{
				for (int num185 = 0; num185 < 75; num185++)
				{
					int num186 = Dust.NewDust(base.Center - Vector2.One * 25f, 50, 50, 5, 2 * hitDirection, -2f);
					Dust dust100 = Main.dust[num186];
					Dust dust190 = dust100;
					dust190.velocity /= 2f;
				}
				Gore.NewGore(base.Center, velocity * 0.8f, 583);
				Gore.NewGore(base.Center, velocity * 0.8f, 577);
				Gore.NewGore(base.Center, velocity * 0.9f, 578);
				Gore.NewGore(base.Center, velocity, 579);
			}
		}
		if (type == 371)
		{
			SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 3);
			if (life <= 0)
			{
				Vector2 center = base.Center;
				for (int num187 = 0; num187 < 60; num187++)
				{
					int num188 = 25;
					Vector2 vector17 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (float)Main.rand.Next(24, 41) / 8f;
					int num189 = Dust.NewDust(base.Center - Vector2.One * (float)num188, num188 * 2, num188 * 2, 212);
					Dust dust186 = Main.dust[num189];
					Vector2 vector18 = Vector2.Normalize(dust186.position - base.Center);
					dust186.position = base.Center + vector18 * 25f * scale;
					if (num187 < 30)
					{
						dust186.velocity = vector18 * ((Vector2)(ref dust186.velocity)).Length();
					}
					else
					{
						dust186.velocity = vector18 * (float)Main.rand.Next(45, 91) / 10f;
					}
					dust186.color = Main.hslToRgb((float)(0.4000000059604645 + Main.rand.NextDouble() * 0.20000000298023224), 0.9f, 0.5f);
					dust186.color = Color.Lerp(dust186.color, Color.White, 0.3f);
					dust186.noGravity = true;
					dust186.scale = 0.7f;
				}
			}
		}
		if (type == 370)
		{
			if (life > 0)
			{
				for (int num191 = 0; (double)num191 < dmg / (double)lifeMax * 100.0; num191++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
			}
			else
			{
				for (int num192 = 0; num192 < 150; num192++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.Center - Vector2.UnitX * 20f * (float)direction, velocity, 576, scale);
				Gore.NewGore(base.Center - Vector2.UnitY * 30f, velocity, 574, scale);
				Gore.NewGore(base.Center, velocity, 575, scale);
				Gore.NewGore(base.Center + Vector2.UnitX * 20f * (float)direction, velocity, 573, scale);
				Gore.NewGore(base.Center - Vector2.UnitY * 30f, velocity, 574, scale);
				Gore.NewGore(base.Center, velocity, 575, scale);
			}
		}
		else if (type == 381)
		{
			if (life > 0)
			{
				for (int num193 = 0; (double)num193 < dmg / (double)(lifeMax * 50); num193++)
				{
					Dust.NewDust(position, width, height, 227, hitDirection, -1f);
				}
			}
			else
			{
				for (int num194 = 0; num194 < 30; num194++)
				{
					Dust.NewDust(position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 587, scale);
				Gore.NewGore(position, velocity, 590, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 588, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 589, scale);
			}
		}
		else if (type == 382 || type == 390)
		{
			if (life > 0)
			{
				for (int num195 = 0; (double)num195 < dmg / (double)(lifeMax * 50); num195++)
				{
					Dust.NewDust(position, width, height, 227, hitDirection, -1f);
				}
			}
			else
			{
				for (int num196 = 0; num196 < 30; num196++)
				{
					Dust.NewDust(position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 591, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 592, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 593, scale);
			}
		}
		else if (type == 383)
		{
			if (life > 0)
			{
				for (int num197 = 0; (double)num197 < dmg / (double)(lifeMax * 50); num197++)
				{
					Dust.NewDust(position, width, height, 227, hitDirection, -1f);
				}
			}
			else
			{
				for (int num198 = 0; num198 < 30; num198++)
				{
					Dust.NewDust(position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 594, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 595, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 596, scale);
			}
		}
		else if (type == 384)
		{
			if (life > 0)
			{
				for (int num199 = 0; (double)num199 < dmg / (double)lifeMax * 50.0; num199++)
				{
					int num200 = Dust.NewDust(position, width, height, 226, -1 * hitDirection, -1f);
					Main.dust[num200].position = Vector2.Lerp(Main.dust[num200].position, base.Center, 0.25f);
					Main.dust[num200].scale = 0.5f;
				}
			}
			else
			{
				for (int num202 = 0; num202 < 70; num202++)
				{
					int num203 = Dust.NewDust(position, width, height, 226, -2.5f * (float)hitDirection, -2.5f);
					Main.dust[num203].scale = 0.5f;
				}
			}
		}
		else if (type == 385)
		{
			if (life > 0)
			{
				for (int num204 = 0; (double)num204 < dmg / (double)(lifeMax * 50); num204++)
				{
					Dust.NewDust(position, width, height, 227, hitDirection, -1f);
				}
			}
			else
			{
				for (int num205 = 0; num205 < 30; num205++)
				{
					Dust.NewDust(position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 597, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 598, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 599, scale);
			}
		}
		else if (type == 386)
		{
			if (life > 0)
			{
				for (int num206 = 0; (double)num206 < dmg / (double)(lifeMax * 50); num206++)
				{
					Dust.NewDust(position, width, height, 227, hitDirection, -1f);
				}
			}
			else
			{
				for (int num207 = 0; num207 < 30; num207++)
				{
					Dust.NewDust(position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 600, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 601, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 602, scale);
			}
		}
		if (type == 387)
		{
			if (life > 0)
			{
				for (int num208 = 0; (double)num208 < dmg / (double)lifeMax * 20.0; num208++)
				{
					int num209 = Dust.NewDust(position, width, height, 226, -1 * hitDirection, -1f);
					Main.dust[num209].position = Vector2.Lerp(Main.dust[num209].position, base.Center, 0.25f);
					Main.dust[num209].scale = 0.5f;
				}
			}
			else
			{
				for (int num210 = 0; num210 < 30; num210++)
				{
					int num211 = Dust.NewDust(position, width, height, 226, -1.5f * (float)hitDirection, -1.5f);
					Main.dust[num211].scale = 0.5f;
				}
				Gore.NewGore(position, velocity, 603, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 603, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 604, scale);
			}
		}
		if (type == 520)
		{
			if (life > 0)
			{
				for (int num213 = 0; (double)num213 < dmg / (double)lifeMax * 20.0; num213++)
				{
					int num214 = Dust.NewDust(position, width, height, 226, -1 * hitDirection, -1f);
					Main.dust[num214].position = Vector2.Lerp(Main.dust[num214].position, base.Center, 0.25f);
					Main.dust[num214].scale = 0.5f;
				}
			}
			else
			{
				for (int num215 = 0; num215 < 30; num215++)
				{
					int num216 = Dust.NewDust(position, width, height, 226, -1.5f * (float)hitDirection, -1.5f);
					Main.dust[num216].scale = 0.5f;
				}
				Gore.NewGore(position, velocity, 851, scale);
				Gore.NewGore(position, velocity, 852, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 80f), velocity, 848, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 80f), velocity, 849, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 80f), velocity, 850, scale);
			}
		}
		else if (type == 389)
		{
			if (life > 0)
			{
				for (int num217 = 0; (double)num217 < dmg / (double)(lifeMax * 50); num217++)
				{
					Dust.NewDust(position, width, height, 227, hitDirection, -1f);
				}
			}
			else
			{
				for (int num218 = 0; num218 < 30; num218++)
				{
					Dust.NewDust(position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 904, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 905, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 906, scale);
			}
		}
		else if (type == 388)
		{
			if (life > 0)
			{
				for (int num219 = 0; (double)num219 < dmg / (double)(lifeMax * 50); num219++)
				{
					int num220 = Dust.NewDust(position, width, height, 226, -1 * hitDirection, -1f);
					Main.dust[num220].position = Vector2.Lerp(Main.dust[num220].position, base.Center, 0.25f);
					Main.dust[num220].scale = 0.5f;
				}
			}
			else
			{
				for (int num221 = 0; num221 < 10; num221++)
				{
					int num222 = Dust.NewDust(position, width, height, 226, -2.5f * (float)hitDirection, -2.5f);
					Main.dust[num222].scale = 0.5f;
				}
				Vector2 vector19 = velocity;
				if (ai[0] == 3f)
				{
					vector19 = rotation.ToRotationVector2();
					if (spriteDirection == 1)
					{
						vector19.X *= -1f;
					}
					vector19 *= 5f;
				}
				Gore.NewGore(base.Center - new Vector2(10f, 10f), vector19, 605, scale);
				Gore.NewGore(base.Center - new Vector2(10f, 10f), vector19, 606, scale);
			}
		}
		else if (type == 399)
		{
			if (life > 0)
			{
				for (int num225 = 0; (double)num225 < dmg / (double)(lifeMax * 50); num225++)
				{
					int num226 = Dust.NewDust(position, width, height, 226, -1 * hitDirection, -1f);
					Main.dust[num226].position = Vector2.Lerp(Main.dust[num226].position, base.Center, 0.25f);
					Main.dust[num226].scale = 0.5f;
				}
			}
			else
			{
				for (int num227 = 0; num227 < 10; num227++)
				{
					int num228 = Dust.NewDust(position, width, height, 226, -2.5f * (float)hitDirection, -2.5f);
					Main.dust[num228].scale = 0.5f;
				}
				Vector2 vector20 = velocity;
				if (ai[0] == 3f)
				{
					vector20 = rotation.ToRotationVector2();
					if (spriteDirection == 1)
					{
						vector20.X *= -1f;
					}
					vector20 *= 5f;
				}
				Gore.NewGore(base.Center - new Vector2(10f, 10f), vector20, 898, scale);
				Gore.NewGore(base.Center - new Vector2(10f, 10f), vector20, 899, scale);
			}
		}
		else if (type == 391)
		{
			if (life > 0)
			{
				for (int num229 = 0; (double)num229 < dmg / (double)(lifeMax * 50); num229++)
				{
					Dust.NewDust(position, width, height, 227, hitDirection, -1f);
				}
			}
			else
			{
				for (int num230 = 0; num230 < 30; num230++)
				{
					Dust.NewDust(position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position + Vector2.UnitX * (float)width / 2f, velocity, 607, scale);
				Gore.NewGore(position + Vector2.UnitX * (float)width / 2f, velocity, 608, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 609, scale);
			}
		}
		if (type == 392 || type == 394 || type == 393 || type == 395)
		{
			if (life > 0)
			{
				for (int num231 = 0; (double)num231 < dmg / (double)lifeMax * 20.0; num231++)
				{
					int num232 = Dust.NewDust(position, width, height, 228, -1 * hitDirection, -1f);
					Main.dust[num232].position = Vector2.Lerp(Main.dust[num232].position, base.Center, 0.25f);
					Main.dust[num232].scale = 0.5f;
				}
			}
			else
			{
				for (int num233 = 0; num233 < 30; num233++)
				{
					int num234 = Dust.NewDust(position, width, height, 228, -1.5f * (float)hitDirection, -1.5f);
					Main.dust[num234].scale = 0.5f;
				}
				Vector2 center2 = base.Center;
				if (type == 395)
				{
					Gore.NewGore(center2 + new Vector2(-20f, -10f), velocity, 610, scale);
					Gore.NewGore(center2 + new Vector2(20f, -10f), velocity, 611, scale);
					Gore.NewGore(center2 + new Vector2(-50f, 0f), velocity, 612, scale);
					Gore.NewGore(center2 + new Vector2(50f, 0f), velocity, 613, scale);
					Gore.NewGore(center2 + new Vector2(-60f, 10f), velocity, 614, scale);
					Gore.NewGore(center2 + new Vector2(0f, 30f), velocity, 615, scale);
				}
				if (type == 393)
				{
					Gore.NewGore(center2, velocity, 616, scale);
				}
				if (type == 394)
				{
					Gore.NewGore(center2, velocity, 617, scale);
				}
			}
		}
		else if (type == 482 || type == 483)
		{
			if (life > 0)
			{
				for (int num236 = 0; (double)num236 < dmg / (double)(lifeMax * 50); num236++)
				{
					Dust.NewDust(position, width, height, 240, hitDirection, -1f);
				}
			}
			else
			{
				for (int num237 = 0; num237 < 30; num237++)
				{
					Dust.NewDust(position, width, height, 240, 2.5f * (float)hitDirection, -2.5f);
				}
				if (type == 482)
				{
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 718, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 10f), velocity, 719, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 720, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 40f), velocity, 721, scale);
				}
			}
		}
		else if (type == 631)
		{
			if (life > 0)
			{
				for (int num238 = 0; (double)num238 < dmg / (double)(lifeMax * 50); num238++)
				{
					Dust.NewDust(position, width, height, 1, hitDirection, -1f);
				}
			}
			else
			{
				for (int num239 = 0; num239 < 30; num239++)
				{
					Dust.NewDust(position, width, height, 1, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(new Vector2(position.X, position.Y), velocity, 1210, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 10f), velocity, 1211, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 1212, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 40f), velocity, 1213, scale);
			}
		}
		if ((type >= 442 && type <= 448) || type == 539 || type == 592 || type == 593 || type == 601 || type == 605 || type == 627)
		{
			if (life > 0)
			{
				for (int num240 = 0; num240 < 10; num240++)
				{
					Dust.NewDust(position, width, height, Main.rand.Next(232, 234), hitDirection, -1f);
				}
			}
			else
			{
				for (int num241 = 0; num241 < 20; num241++)
				{
					Dust.NewDust(position, width, height, Main.rand.Next(232, 234), 2 * hitDirection, -2f);
				}
			}
		}
		if (type == 653 && life <= 0)
		{
			for (int num242 = 0; num242 < 6; num242++)
			{
				int num243 = Dust.NewDust(position, width, height, 174, 2 * hitDirection, -2f);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num243].noGravity = true;
					Main.dust[num243].scale = 1.5f * scale;
				}
				else
				{
					Main.dust[num243].scale = 0.8f * scale;
				}
			}
		}
		if (type == 333 || type == 334 || type == 335 || type == 336)
		{
			Color newColor7 = Color.White;
			if (type == 333)
			{
				((Color)(ref newColor7))._002Ector(73, 147, 221, 200);
			}
			if (type == 334)
			{
				((Color)(ref newColor7))._002Ector(24, 146, 79, 200);
			}
			if (type == 335)
			{
				((Color)(ref newColor7))._002Ector(194, 46, 50, 200);
			}
			if (type == 336)
			{
				((Color)(ref newColor7))._002Ector(228, 200, 1, 200);
			}
			if (life > 0)
			{
				for (int num244 = 0; (double)num244 < dmg / (double)lifeMax * 100.0; num244++)
				{
					Dust.NewDust(position, width, height, 4, hitDirection, -1f, 150, newColor7);
				}
			}
			else
			{
				for (int num245 = 0; num245 < 50; num245++)
				{
					Dust.NewDust(position, width, height, 4, 2 * hitDirection, -2f, 150, newColor7);
				}
			}
		}
		if (type == 537)
		{
			if (life > 0)
			{
				for (int num247 = 0; (double)num247 < dmg / (double)lifeMax * 100.0; num247++)
				{
					Dust.NewDust(position, width, height, 32, hitDirection, -1f);
				}
			}
			else
			{
				for (int num248 = 0; num248 < 50; num248++)
				{
					Dust.NewDust(position, width, height, 32, 2 * hitDirection, -2f);
				}
			}
		}
		if (type == 1 || type == 16 || type == 71 || type == 244 || type == 535)
		{
			if (life > 0)
			{
				for (int num249 = 0; (double)num249 < dmg / (double)lifeMax * 100.0; num249++)
				{
					Dust.NewDust(position, width, height, 4, hitDirection, -1f, alpha, this.color);
				}
			}
			else
			{
				for (int num250 = 0; num250 < 50; num250++)
				{
					Dust.NewDust(position, width, height, 4, 2 * hitDirection, -2f, alpha, this.color);
				}
				if (Main.netMode != 1 && type == 16)
				{
					int num251 = Main.rand.Next(2) + 2;
					for (int num252 = 0; num252 < num251; num252++)
					{
						int num253 = NewNPC(GetSpawnSource_NPCHurt(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), 1);
						Main.npc[num253].SetDefaults(-5);
						Main.npc[num253].velocity.X = velocity.X * 2f;
						Main.npc[num253].velocity.Y = velocity.Y;
						Main.npc[num253].velocity.X += (float)Main.rand.Next(-20, 20) * 0.1f + (float)(num252 * direction) * 0.3f;
						Main.npc[num253].velocity.Y -= (float)Main.rand.Next(0, 10) * 0.1f + (float)num252;
						Main.npc[num253].ai[0] = -1000 * Main.rand.Next(3);
						if (Main.netMode == 2 && num253 < 200)
						{
							NetMessage.SendData(23, -1, -1, null, num253);
						}
					}
				}
			}
		}
		if (type == 352)
		{
			if (life > 0)
			{
				for (int num254 = 0; (double)num254 < dmg / (double)lifeMax * 100.0; num254++)
				{
					int num255 = Dust.NewDust(position, width, height, 67, hitDirection, -1f);
					Main.dust[num255].noGravity = true;
				}
			}
			else
			{
				for (int num256 = 0; num256 < 60; num256++)
				{
					int num258 = Dust.NewDust(position, width, height, 67, 2 * hitDirection, -2f);
					Main.dust[num258].noGravity = true;
				}
			}
		}
		if (type >= 305 && type <= 314)
		{
			if (life > 0)
			{
				for (int num259 = 0; (double)num259 < dmg / (double)lifeMax * 100.0; num259++)
				{
					Dust.NewDust(position, width, height, 194, hitDirection, -1f, 0, default(Color), 1.1f);
				}
			}
			else
			{
				for (int num260 = 0; num260 < 60; num260++)
				{
					Dust.NewDust(position, width, height, 194, 2 * hitDirection, -2f, 0, default(Color), 1.1f);
				}
				Gore.NewGore(position, velocity, 441, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 442, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 443, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 444, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 445, scale);
			}
		}
		if (type == 327)
		{
			if (life > 0)
			{
				for (int num261 = 0; (double)num261 < dmg / (double)lifeMax * 100.0; num261++)
				{
					Dust.NewDust(position, width, height, 189, hitDirection, -1f, 0, default(Color), 1.1f);
				}
			}
			else
			{
				for (int num262 = 0; num262 < 60; num262++)
				{
					Dust.NewDust(position, width, height, 189, 2 * hitDirection, -2f, 0, default(Color), 1.1f);
				}
				for (int num263 = 476; num263 <= 484; num263++)
				{
					Gore.NewGore(new Vector2(position.X, position.Y), velocity * 0f, num263, scale);
				}
			}
		}
		if (type == 325)
		{
			if (life > 0)
			{
				for (int num264 = 0; (double)num264 < dmg / (double)lifeMax * 100.0; num264++)
				{
					Dust.NewDust(position, width, height, 191, hitDirection, -1f, 0, default(Color), 1.1f);
				}
			}
			else
			{
				for (int num265 = 0; num265 < 60; num265++)
				{
					Dust.NewDust(position, width, height, 191, 2 * hitDirection, -2f, 0, default(Color), 1.1f);
				}
				for (int num266 = 469; num266 <= 475; num266++)
				{
					Gore.NewGore(new Vector2(position.X, position.Y), velocity * 0f, num266, scale);
				}
			}
		}
		if (type == 345 && life <= 0)
		{
			Gore.NewGore(new Vector2(position.X, position.Y), velocity * 0f, 513, scale);
			Gore.NewGore(new Vector2(position.X, position.Y), velocity * 0f, 514, scale);
			Gore.NewGore(new Vector2(position.X, position.Y), velocity * 0f, 514, scale);
			Gore.NewGore(new Vector2(position.X, position.Y), velocity * 0f, 515, scale);
			Gore.NewGore(new Vector2(position.X, position.Y), velocity * 0f, 516, scale);
		}
		if (type == 344)
		{
			if (life > 0)
			{
				for (int num267 = 0; (double)num267 < dmg / (double)lifeMax * 100.0; num267++)
				{
					Dust.NewDust(position, width, height, 196, hitDirection, -1f);
				}
			}
			else
			{
				for (int num269 = 0; num269 < 60; num269++)
				{
					Dust.NewDust(position, width, height, 196, 2 * hitDirection, -2f);
				}
				for (int num270 = 508; num270 <= 512; num270++)
				{
					Gore.NewGore(new Vector2(position.X, position.Y), velocity * 0f, num270, scale);
				}
				for (int num271 = 509; num271 <= 512; num271++)
				{
					Gore.NewGore(new Vector2(position.X, position.Y), velocity * 0f, num271, scale);
				}
			}
		}
		if (type == 326)
		{
			if (life > 0)
			{
				for (int num272 = 0; (double)num272 < dmg / (double)lifeMax * 100.0; num272++)
				{
					Dust.NewDust(position, width, height, 191, hitDirection, -1f, 0, default(Color), 1.1f);
				}
			}
			else
			{
				for (int num273 = 0; num273 < 60; num273++)
				{
					Dust.NewDust(position, width, height, 191, 2 * hitDirection, -2f, 0, default(Color), 1.1f);
				}
			}
		}
		if (type == 304)
		{
			if (life > 0)
			{
				for (int num274 = 0; (double)num274 < dmg / (double)lifeMax * 100.0; num274++)
				{
					Dust.NewDust(position, width, height, 189, hitDirection, -1f, 0, default(Color), 1.3f);
				}
			}
			else
			{
				for (int num275 = 0; num275 < 60; num275++)
				{
					Dust.NewDust(position, width, height, 189, 2 * hitDirection, -2f, 0, default(Color), 1.3f);
				}
			}
		}
		if (type == 302)
		{
			if (life > 0)
			{
				for (int num276 = 0; (double)num276 < dmg / (double)lifeMax * 100.0; num276++)
				{
					Dust.NewDust(position, width, height, 192, hitDirection, -1f, 100, new Color(100, 100, 100, 100));
				}
			}
			else
			{
				for (int num277 = 0; num277 < 50; num277++)
				{
					Dust.NewDust(position, width, height, 192, 2 * hitDirection, -2f, 100, new Color(100, 100, 100, 100));
				}
				Gore.NewGore(position, velocity, 440, scale);
			}
		}
		if (type >= 245 && type <= 249)
		{
			if (life > 0)
			{
				for (int num278 = 0; (double)num278 < dmg / (double)lifeMax * 100.0; num278++)
				{
					Dust.NewDust(position, width, height, 148, hitDirection, -1f);
				}
			}
			else if (type == 246)
			{
				if (Main.netMode != 1)
				{
					NewNPC(GetSpawnSource_NPCHurt(), (int)base.Center.X, (int)position.Y + height, 249, whoAmI);
				}
			}
			else
			{
				for (int num280 = 0; num280 < 50; num280++)
				{
					Dust.NewDust(position, width, height, 148, 2 * hitDirection, -2f);
				}
				if (type == 245)
				{
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 368, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 370, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 368, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 370, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 368, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 370, scale);
					Gore.NewGore(position, velocity, 360, scale);
					Gore.NewGore(position, velocity, 361, scale);
					Gore.NewGore(position, velocity, 362, scale);
					Gore.NewGore(position, velocity, 363, scale);
					Gore.NewGore(position, velocity, 364, scale);
					Gore.NewGore(position, velocity, 367, scale);
					Gore.NewGore(position, velocity, 366, scale);
				}
				else if (type == 249)
				{
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 368, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 370, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 368, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 370, scale);
					Gore.NewGore(position, velocity, 365, scale);
					Gore.NewGore(position, velocity, 363, scale);
					Gore.NewGore(position, velocity, 362, scale);
				}
				else
				{
					Gore.NewGore(position, velocity, 369, scale);
					Gore.NewGore(position, velocity, 371, scale);
					Gore.NewGore(position, velocity, 370, scale);
				}
			}
		}
		if (type == 288 && life <= 0)
		{
			for (int num281 = 0; num281 < 50; num281++)
			{
				int num282 = Dust.NewDust(position, width, height, 180, velocity.X, velocity.Y);
				Dust dust104 = Main.dust[num282];
				Dust dust190 = dust104;
				dust190.velocity *= 2f;
				Main.dust[num282].noGravity = true;
				Main.dust[num282].scale = 1.4f;
			}
		}
		if (type == 204)
		{
			if (life > 0)
			{
				for (int num283 = 0; (double)num283 < dmg / (double)lifeMax * 100.0; num283++)
				{
					Dust.NewDust(position, width, height, 4, hitDirection, -1f, 100, new Color(149, 208, 104));
				}
			}
			else
			{
				for (int num284 = 0; num284 < 50; num284++)
				{
					Dust.NewDust(position, width, height, 4, 2 * hitDirection, -2f, 100, new Color(149, 208, 104));
				}
			}
		}
		if (type == 225)
		{
			if (life > 0)
			{
				for (int num285 = 0; (double)num285 < dmg / (double)lifeMax * 100.0; num285++)
				{
					Dust.NewDust(position, width, height, 4, hitDirection, -1f, 100, new Color(0, 80, 255, 100));
				}
			}
			else
			{
				for (int num286 = 0; num286 < 50; num286++)
				{
					Dust.NewDust(position, width, height, 4, 2 * hitDirection, -2f, 100, new Color(0, 80, 255, 100));
				}
				Gore.NewGore(position, velocity, 314, scale);
			}
		}
		if (type == 243)
		{
			if (life > 0)
			{
				for (int num287 = 0; (double)num287 < dmg / (double)lifeMax * 150.0; num287++)
				{
					Dust.NewDust(position, width, height, 161, hitDirection, -1f);
				}
			}
			else
			{
				for (int num288 = 0; num288 < 200; num288++)
				{
					Dust.NewDust(position, width, height, 161, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, velocity, 359, scale);
			}
		}
		if ((type == 210 || type == 211) && life <= 0)
		{
			for (int num289 = 0; num289 < 6; num289++)
			{
				int num291 = Dust.NewDust(position, width, height, 150, 2 * hitDirection, -2f);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num291].noGravity = true;
					Main.dust[num291].scale = 1.5f;
				}
				else
				{
					Main.dust[num291].scale = 0.8f;
				}
			}
		}
		if ((type == 355 || type == 358 || type == 654) && life <= 0)
		{
			for (int num292 = 0; num292 < 6; num292++)
			{
				int num293 = Dust.NewDust(position, width, height, 198, 2 * hitDirection, -2f);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num293].noGravity = true;
					Main.dust[num293].scale = 1.5f * scale;
				}
				else
				{
					Main.dust[num293].scale = 0.8f * scale;
				}
			}
		}
		if (type == 677 && life <= 0)
		{
			ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.ShimmerArrow, new ParticleOrchestraSettings
			{
				PositionInWorld = base.Center,
				MovementVector = velocity
			});
			for (int num294 = 0; num294 < 6; num294++)
			{
				int num295 = Dust.NewDust(position, width, height, 310, 2 * hitDirection, -2f);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num295].noGravity = true;
					Main.dust[num295].scale = 1.5f * scale;
				}
				else
				{
					Main.dust[num295].scale = 0.8f * scale;
				}
			}
		}
		if (type == 604 && life <= 0)
		{
			for (int num296 = 0; num296 < 6; num296++)
			{
				int num297 = Dust.NewDust(position, width, height, 198, 2 * hitDirection, -2f);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num297].noGravity = true;
					Main.dust[num297].scale = 1.5f * scale;
				}
				else
				{
					Main.dust[num297].scale = 0.8f * scale;
				}
			}
			if (Main.rand.Next(2) == 0)
			{
				Gore.NewGore(position, velocity, 1148);
			}
			if (Main.rand.Next(2) == 0)
			{
				Gore.NewGore(position, velocity, 1149);
			}
		}
		if (type == 669 && life <= 0)
		{
			for (int num298 = 0; num298 < 6; num298++)
			{
				int num299 = Dust.NewDust(position, width, height, 198, 2 * hitDirection, -2f);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num299].noGravity = true;
					Main.dust[num299].scale = 1.5f * scale;
				}
				else
				{
					Main.dust[num299].scale = 0.8f * scale;
				}
			}
			if (Main.rand.Next(2) == 0)
			{
				Gore.NewGore(position, velocity, 1275);
			}
			if (Main.rand.Next(2) == 0)
			{
				Gore.NewGore(position, velocity, 1276);
			}
		}
		if (type == 356 && life <= 0)
		{
			for (int num300 = 0; num300 < 6; num300++)
			{
				int num302 = Dust.NewDust(position, width, height, 199, 2 * hitDirection, -2f);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num302].noGravity = true;
					Main.dust[num302].scale = 1.5f * scale;
				}
				else
				{
					Main.dust[num302].scale = 0.8f * scale;
				}
			}
		}
		if (type >= 484 && type <= 487 && life <= 0)
		{
			for (int num303 = 0; num303 < 6; num303++)
			{
				int num304 = Dust.NewDust(position, width, height, 248 + type - 484, 2 * hitDirection, -2f);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num304].noGravity = true;
					Main.dust[num304].scale = 1.2f * scale;
				}
				else
				{
					Main.dust[num304].scale = 0.7f * scale;
				}
			}
		}
		if (type == 357 && life <= 0)
		{
			for (int num305 = 0; num305 < 6; num305++)
			{
				int num306 = Dust.NewDust(position, width, height, 200, 2 * hitDirection, -2f);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num306].noGravity = true;
					Main.dust[num306].scale = 1.2f * scale;
				}
				else
				{
					Main.dust[num306].scale = 0.7f * scale;
				}
			}
		}
		if (type == 606 && life <= 0)
		{
			for (int num307 = 0; num307 < 6; num307++)
			{
				int num308 = Dust.NewDust(position, width, height, 124, 2 * hitDirection, -2f);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num308].noGravity = true;
					Main.dust[num308].scale = 1.2f * scale;
				}
				else
				{
					Main.dust[num308].scale = 0.7f * scale;
				}
			}
		}
		if (type == 377 && life <= 0)
		{
			for (int num309 = 0; num309 < 6; num309++)
			{
				int num310 = Dust.NewDust(position, width, height, 40, 2 * hitDirection, -2f);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num310].noGravity = true;
					Main.dust[num310].scale = 1.2f * scale;
				}
				else
				{
					Main.dust[num310].scale = 0.7f * scale;
				}
			}
		}
		if (type == 374 || type == 375)
		{
			for (int num311 = 0; num311 < 6; num311++)
			{
				int num313 = Dust.NewDust(position, width, height, 165, 0f, 0f, 50, default(Color), 1.5f);
				Dust dust106 = Main.dust[num313];
				Dust dust190 = dust106;
				dust190.velocity *= 2f;
				Main.dust[num313].noGravity = true;
			}
		}
		if (type == 359)
		{
			if (life <= 0)
			{
				for (int num314 = 0; num314 < 6; num314++)
				{
					int num315 = Dust.NewDust(position, width, height, 201, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num315].noGravity = true;
						Main.dust[num315].scale = 1.2f * scale;
					}
					else
					{
						Main.dust[num315].scale = 0.7f * scale;
					}
				}
			}
			Gore.NewGore(position, velocity, 547, scale);
			Gore.NewGore(position, velocity, 548, scale);
		}
		if (type == 360)
		{
			if (life <= 0)
			{
				for (int num316 = 0; num316 < 6; num316++)
				{
					int num317 = Dust.NewDust(position, width, height, 202, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num317].noGravity = true;
						Main.dust[num317].scale = 1.2f * scale;
					}
					else
					{
						Main.dust[num317].scale = 0.7f * scale;
					}
				}
			}
			Gore.NewGore(position, velocity, 549, scale);
			Gore.NewGore(position, velocity, 550, scale);
		}
		if (type == 655)
		{
			if (life <= 0)
			{
				for (int num318 = 0; num318 < 6; num318++)
				{
					int num319 = Dust.NewDust(position, width, height, 174, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num319].noGravity = true;
						Main.dust[num319].scale = 1.2f * scale;
					}
					else
					{
						Main.dust[num319].scale = 0.7f * scale;
					}
				}
			}
			Gore.NewGore(position, velocity, 1256, scale);
		}
		if (type == 154)
		{
			if (life > 0)
			{
				for (int num320 = 0; (double)num320 < dmg / (double)lifeMax * 50.0; num320++)
				{
					int num321 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 67, velocity.X, velocity.Y, 90, default(Color), 1.5f);
					Main.dust[num321].noGravity = true;
					Dust dust108 = Main.dust[num321];
					Dust dust190 = dust108;
					dust190.velocity *= 0.2f;
				}
			}
			else
			{
				for (int num322 = 0; num322 < 50; num322++)
				{
					int num324 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 67, velocity.X, velocity.Y, 90, default(Color), 1.5f);
					Main.dust[num324].noGravity = true;
					Dust dust107 = Main.dust[num324];
					Dust dust190 = dust107;
					dust190.velocity *= 0.2f;
				}
				Gore.NewGore(position, velocity, 180, scale);
			}
		}
		if (type == 147 || type == 184)
		{
			if (life > 0)
			{
				for (int num325 = 0; (double)num325 < dmg / (double)lifeMax * 50.0; num325++)
				{
					int num326 = Dust.NewDust(position, width, height, 76, hitDirection, -1f);
					Main.dust[num326].noGravity = true;
					Dust.NewDust(position, width, height, 4, hitDirection, -1f, 100, new Color(97, 200, 255, 100));
				}
			}
			else
			{
				for (int num327 = 0; num327 < 30; num327++)
				{
					int num328 = Dust.NewDust(position, width, height, 76, hitDirection, -2f);
					Main.dust[num328].noGravity = true;
					Dust.NewDust(position, width, height, 4, hitDirection, -2f, 100, new Color(97, 200, 255, 100));
				}
			}
		}
		if (type == 143 || type == 144 || type == 145)
		{
			if (life > 0)
			{
				for (int num329 = 0; (double)num329 < dmg / (double)lifeMax * 100.0; num329++)
				{
					int num330 = Dust.NewDust(position, width, height, 76, hitDirection, -1f);
					Main.dust[num330].noGravity = true;
				}
			}
			else
			{
				for (int num331 = 0; num331 < 50; num331++)
				{
					int num332 = Dust.NewDust(position, width, height, 76, hitDirection, -1f);
					Main.dust[num332].noGravity = true;
					Dust dust109 = Main.dust[num332];
					Dust dust190 = dust109;
					dust190.scale *= 1.2f;
				}
			}
		}
		if (type == 141)
		{
			if (life > 0)
			{
				for (int num333 = 0; (double)num333 < dmg / (double)lifeMax * 100.0; num333++)
				{
					Dust.NewDust(position, width, height, 4, hitDirection, -1f, alpha, new Color(210, 230, 140));
				}
			}
			else
			{
				for (int num336 = 0; num336 < 50; num336++)
				{
					Dust.NewDust(position, width, height, 4, 2 * hitDirection, -2f, alpha, new Color(210, 230, 140));
				}
			}
		}
		if (type == 112 || type == 666)
		{
			for (int num337 = 0; num337 < 20; num337++)
			{
				int num338 = Dust.NewDust(new Vector2(position.X, position.Y + 2f), width, height, 18, 0f, 0f, 100, default(Color), 2f);
				if (Main.rand.Next(2) == 0)
				{
					Dust dust111 = Main.dust[num338];
					Dust dust190 = dust111;
					dust190.scale *= 0.6f;
				}
				else
				{
					Dust dust110 = Main.dust[num338];
					Dust dust190 = dust110;
					dust190.velocity *= 1.4f;
					Main.dust[num338].noGravity = true;
				}
			}
		}
		if (type == 183)
		{
			if (life > 0)
			{
				for (int num339 = 0; (double)num339 < dmg / (double)lifeMax * 100.0; num339++)
				{
					Dust.NewDust(position, width, height, 136, 0f, 0f, alpha, this.color);
				}
			}
			else
			{
				for (int num340 = 0; num340 < 50; num340++)
				{
					int num341 = Dust.NewDust(position, width, height, 136, hitDirection, 0f, alpha, this.color);
					Dust dust112 = Main.dust[num341];
					Dust dust190 = dust112;
					dust190.velocity *= 2f;
				}
			}
		}
		if (type == 81 || type == 121)
		{
			if (life > 0)
			{
				for (int num342 = 0; (double)num342 < dmg / (double)lifeMax * 100.0; num342++)
				{
					Dust.NewDust(position, width, height, 14, 0f, 0f, alpha, this.color);
				}
			}
			else
			{
				for (int num343 = 0; num343 < 50; num343++)
				{
					int num344 = Dust.NewDust(position, width, height, 14, hitDirection, 0f, alpha, this.color);
					Dust dust113 = Main.dust[num344];
					Dust dust190 = dust113;
					dust190.velocity *= 2f;
				}
				if (Main.netMode != 1)
				{
					if (type == 121)
					{
						int num345 = NewNPC(GetSpawnSource_NPCHurt(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), 81);
						Main.npc[num345].SetDefaults(-2);
						Main.npc[num345].velocity.X = velocity.X;
						Main.npc[num345].velocity.Y = velocity.Y;
						Gore.NewGore(position, velocity, 94, scale);
						if (Main.netMode == 2 && num345 < 200)
						{
							NetMessage.SendData(23, -1, -1, null, num345);
						}
					}
					else if (scale >= 1f)
					{
						int num347 = Main.rand.Next(2) + 2;
						for (int num348 = 0; num348 < num347; num348++)
						{
							int num349 = NewNPC(GetSpawnSource_NPCHurt(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), 1);
							Main.npc[num349].SetDefaults(-1);
							Main.npc[num349].velocity.X = velocity.X * 3f;
							Main.npc[num349].velocity.Y = velocity.Y;
							Main.npc[num349].velocity.X += (float)Main.rand.Next(-10, 10) * 0.1f + (float)(num348 * direction) * 0.3f;
							Main.npc[num349].velocity.Y -= (float)Main.rand.Next(0, 10) * 0.1f + (float)num348;
							Main.npc[num349].ai[1] = num348;
							if (Main.netMode == 2 && num349 < 200)
							{
								NetMessage.SendData(23, -1, -1, null, num349);
							}
						}
					}
				}
			}
		}
		if (type == 120 || type == 137 || type == 138)
		{
			if (life > 0)
			{
				for (int num350 = 0; (double)num350 < dmg / (double)lifeMax * 50.0; num350++)
				{
					int num351 = Dust.NewDust(position, width, height, 71, 0f, 0f, 200);
					Dust dust117 = Main.dust[num351];
					Dust dust190 = dust117;
					dust190.velocity *= 1.5f;
				}
			}
			else
			{
				for (int num352 = 0; num352 < 50; num352++)
				{
					int num353 = Dust.NewDust(position, width, height, 71, hitDirection, 0f, 200);
					Dust dust114 = Main.dust[num353];
					Dust dust190 = dust114;
					dust190.velocity *= 1.5f;
				}
			}
		}
		if (type == 122)
		{
			if (life > 0)
			{
				for (int num354 = 0; (double)num354 < dmg / (double)lifeMax * 50.0; num354++)
				{
					int num355 = Dust.NewDust(position, width, height, 72, 0f, 0f, 200);
					Dust dust119 = Main.dust[num355];
					Dust dust190 = dust119;
					dust190.velocity *= 1.5f;
				}
			}
			else
			{
				for (int num356 = 0; num356 < 50; num356++)
				{
					int num358 = Dust.NewDust(position, width, height, 72, hitDirection, 0f, 200);
					Dust dust118 = Main.dust[num358];
					Dust dust190 = dust118;
					dust190.velocity *= 1.5f;
				}
			}
		}
		if (type == 75)
		{
			if (life > 0)
			{
				for (int num359 = 0; (double)num359 < dmg / (double)lifeMax * 50.0; num359++)
				{
					Dust.NewDust(position, width, height, 55, 0f, 0f, 200, this.color);
				}
			}
			else
			{
				for (int num360 = 0; num360 < 50; num360++)
				{
					int num361 = Dust.NewDust(position, width, height, 55, hitDirection, 0f, 200, this.color);
					Dust dust120 = Main.dust[num361];
					Dust dust190 = dust120;
					dust190.velocity *= 2f;
				}
			}
		}
		if (type == 63 || type == 64 || type == 103)
		{
			Color newColor8 = default(Color);
			((Color)(ref newColor8))._002Ector(50, 120, 255, 100);
			if (type == 64)
			{
				((Color)(ref newColor8))._002Ector(225, 70, 140, 100);
			}
			if (type == 103)
			{
				((Color)(ref newColor8))._002Ector(70, 225, 140, 100);
			}
			if (life > 0)
			{
				for (int num362 = 0; (double)num362 < dmg / (double)lifeMax * 50.0; num362++)
				{
					Dust.NewDust(position, width, height, 4, hitDirection, -1f, 0, newColor8);
				}
			}
			else
			{
				for (int num363 = 0; num363 < 25; num363++)
				{
					Dust.NewDust(position, width, height, 4, 2 * hitDirection, -2f, 0, newColor8);
				}
			}
		}
		else
		{
			if (type == 59 || type == 60 || type == 151)
			{
				if (life > 0)
				{
					for (int num364 = 0; (double)num364 < dmg / (double)lifeMax * 80.0; num364++)
					{
						int num365 = Dust.NewDust(position, width, height, 6, hitDirection * 2, -1f, alpha, default(Color), 1.5f);
						if (Main.rand.Next(8) != 0)
						{
							Main.dust[num365].noGravity = true;
						}
					}
					return;
				}
				for (int num366 = 0; num366 < 40; num366++)
				{
					int num367 = Dust.NewDust(position, width, height, 6, hitDirection * 2, -1f, alpha, default(Color), 1.5f);
					if (Main.rand.Next(8) != 0)
					{
						Main.dust[num367].noGravity = true;
					}
				}
				if (Main.expertMode && type == 59 && Main.netMode != 1 && !Main.remixWorld)
				{
					try
					{
						int num369 = (int)(base.Center.X / 16f);
						int num370 = (int)(base.Center.Y / 16f);
						if (!WorldGen.SolidTile(num369, num370) && Main.tile[num369, num370].liquid == 0)
						{
							Main.tile[num369, num370].liquid = (byte)Main.rand.Next(50, 150);
							Main.tile[num369, num370].lava(lava: true);
							Main.tile[num369, num370].honey(honey: false);
							WorldGen.SquareTileFrame(num369, num370);
						}
					}
					catch
					{
					}
				}
				if ((type != 151 && type != 60) || Main.netMode == 1 || !Main.remixWorld || !Main.getGoodWorld)
				{
					return;
				}
				try
				{
					int num371 = (int)(base.Center.X / 16f);
					int num372 = (int)(base.Center.Y / 16f);
					if (!WorldGen.SolidTile(num371, num372) && Main.tile[num371, num372].liquid == 0)
					{
						Main.tile[num371, num372].liquid = (byte)Main.rand.Next(50, 150);
						Main.tile[num371, num372].lava(lava: true);
						Main.tile[num371, num372].honey(honey: false);
						WorldGen.SquareTileFrame(num371, num372);
					}
					return;
				}
				catch
				{
					return;
				}
			}
			if (type == 50)
			{
				if (life > 0)
				{
					for (int num373 = 0; (double)num373 < dmg / (double)lifeMax * 300.0; num373++)
					{
						Dust.NewDust(position, width, height, 4, hitDirection, -1f, 175, new Color(0, 80, 255, 100));
					}
					return;
				}
				for (int num374 = 0; num374 < 200; num374++)
				{
					Dust.NewDust(position, width, height, 4, 2 * hitDirection, -2f, 175, new Color(0, 80, 255, 100));
				}
				Gore.NewGore(base.Center + new Vector2(-40f, (float)(-height / 2)), velocity, 734);
				if (Main.netMode == 1)
				{
					return;
				}
				int num375 = Main.rand.Next(4) + 4;
				for (int num376 = 0; num376 < num375; num376++)
				{
					int x = (int)(position.X + (float)Main.rand.Next(width - 32));
					int y = (int)(position.Y + (float)Main.rand.Next(height - 32));
					int num377 = NewNPC(GetSpawnSource_NPCHurt(), x, y, 1, whoAmI + 1);
					Main.npc[num377].SetDefaults(1);
					Main.npc[num377].velocity.X = (float)Main.rand.Next(-15, 16) * 0.1f;
					Main.npc[num377].velocity.Y = (float)Main.rand.Next(-30, 1) * 0.1f;
					Main.npc[num377].ai[0] = -1000 * Main.rand.Next(3);
					Main.npc[num377].ai[1] = 0f;
					if (Main.netMode == 2 && num377 < 200)
					{
						NetMessage.SendData(23, -1, -1, null, num377);
					}
				}
			}
			else if (type == 153)
			{
				if (life > 0)
				{
					for (int num378 = 0; (double)num378 < dmg / (double)lifeMax * 30.0; num378++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num380 = 0; num380 < 15; num380++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, velocity, 177);
				Gore.NewGore(position, velocity, 178);
				Gore.NewGore(position, velocity, 179);
				Gore.NewGore(position, velocity, 179);
			}
			else if (type == 177)
			{
				if (life > 0)
				{
					for (int num381 = 0; (double)num381 < dmg / (double)lifeMax * 30.0; num381++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num382 = 0; num382 < 15; num382++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, velocity, 234);
				Gore.NewGore(position, velocity, 235);
				Gore.NewGore(position, velocity, 236);
				Gore.NewGore(position, velocity, 236);
			}
			else if (type >= 494 && type <= 495)
			{
				if (life > 0)
				{
					for (int num383 = 0; (double)num383 < dmg / (double)lifeMax * 30.0; num383++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num384 = 0; num384 < 15; num384++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				int num385 = (type - 494) * 2;
				Gore.NewGore(position, velocity, 736 + num385);
				Gore.NewGore(position, velocity, 735 + num385);
			}
			else if (type >= 496 && type <= 497)
			{
				if (life > 0)
				{
					for (int num386 = 0; (double)num386 < dmg / (double)lifeMax * 30.0; num386++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num387 = 0; num387 < 15; num387++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				int num388 = type - 496;
				Gore.NewGore(position, velocity, 739 + num388);
			}
			else if (type >= 498 && type <= 506)
			{
				if (life > 0)
				{
					for (int num389 = 0; (double)num389 < dmg / (double)lifeMax * 30.0; num389++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num391 = 0; num391 < 15; num391++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				int num392 = type - 498;
				Gore.NewGore(position, velocity, 750 + num392);
				Gore.NewGore(new Vector2(position.X, position.Y + 16f), velocity, 741 + num392);
				Gore.NewGore(new Vector2(position.X, position.Y + 18f), velocity, 759 + num392);
			}
			else if (type == 49 || type == 51 || type == 93 || type == 150 || type == 152 || type == 226)
			{
				if (life > 0)
				{
					for (int num393 = 0; (double)num393 < dmg / (double)lifeMax * 30.0; num393++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num394 = 0; num394 < 15; num394++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				if (type == 51)
				{
					Gore.NewGore(position, velocity, 83);
				}
				else if (type == 93)
				{
					Gore.NewGore(position, velocity, 107);
				}
				else if (type == 150)
				{
					Gore.NewGore(position, velocity, 164);
					Gore.NewGore(position, velocity, 165);
				}
				else if (type == 152)
				{
					Gore.NewGore(position, velocity, 175);
					Gore.NewGore(position, velocity, 176);
					Gore.NewGore(position, velocity, 176);
				}
				else if (type == 226)
				{
					Gore.NewGore(position, velocity, 317);
					Gore.NewGore(position, velocity, 318);
					Gore.NewGore(position, velocity, 318);
					Gore.NewGore(position, velocity, 319);
				}
				else
				{
					Gore.NewGore(position, velocity, 82);
				}
			}
			else if (type == 611)
			{
				if (life > 0)
				{
					for (int num395 = 0; (double)num395 < dmg / (double)lifeMax * 30.0; num395++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num396 = 0; num396 < 15; num396++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, velocity, 1164);
				Gore.NewGore(position, velocity, 1164);
				Gore.NewGore(position, velocity, 1165);
			}
			else if (type == 624)
			{
				if (life > 0)
				{
					for (int num397 = 0; (double)num397 < dmg / (double)lifeMax * 20.0; num397++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num398 = 0; num398 < 10; num398++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, velocity, 1190);
				Gore.NewGore(position, velocity, 1191);
				Gore.NewGore(position, velocity, 1192);
				Gore.NewGore(position, velocity, 1193);
			}
			else if (type == 628)
			{
				if (life > 0)
				{
					for (int num399 = 0; (double)num399 < dmg / (double)lifeMax * 20.0; num399++)
					{
						Dust.NewDust(position, width, height, 3, hitDirection, -1f);
					}
					return;
				}
				for (int num400 = 0; num400 < 10; num400++)
				{
					Dust.NewDust(position, width, height, 3, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, velocity, 1205);
				Gore.NewGore(position, velocity, 1206);
				Gore.NewGore(position, velocity, 1206);
				Gore.NewGore(position, velocity, 1207);
			}
			else if (type >= 646 && type <= 652)
			{
				int num402 = 138;
				if (type < 652)
				{
					num402 = 86 + (type - 646);
				}
				if (life > 0)
				{
					for (int num403 = 0; (double)num403 < dmg / (double)lifeMax * 20.0; num403++)
					{
						Dust.NewDust(position, width, height, num402, hitDirection, -1f);
					}
					return;
				}
				for (int num404 = 0; num404 < 10; num404++)
				{
					Dust.NewDust(position, width, height, num402, 2 * hitDirection, -2f);
				}
				int num405 = (type - 646) * 2;
				Gore.NewGore(position, velocity, 1234 + num405);
				Gore.NewGore(position, velocity, 1235 + num405);
			}
			else if (type >= 639 && type <= 645)
			{
				int num406 = 138;
				if (type < 645)
				{
					num406 = 86 + (type - 639);
				}
				if (life > 0)
				{
					for (int num407 = 0; (double)num407 < dmg / (double)lifeMax * 20.0; num407++)
					{
						Dust.NewDust(position, width, height, num406, hitDirection, -1f);
					}
					return;
				}
				for (int num408 = 0; num408 < 10; num408++)
				{
					Dust.NewDust(position, width, height, num406, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, velocity, 1227 + (type - 639));
			}
			else if (type == 46 || type == 55 || type == 67 || type == 74 || type == 102 || type == 224 || type == 230 || type == 297 || type == 298 || type == 299 || type == 300 || type == 303 || type == 337 || type == 538 || type == 540 || type == 587 || type == 610 || type == 614 || type == 616 || type == 617 || type == 625 || type == 626 || type == 627 || type == 615 || type == 671 || type == 672 || type == 673 || type == 674 || type == 675)
			{
				if (life > 0)
				{
					for (int num409 = 0; (double)num409 < dmg / (double)lifeMax * 20.0; num409++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num410 = 0; num410 < 10; num410++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				if (type == 46 || type == 303 || type == 337 || type == 540)
				{
					Gore.NewGore(position, velocity, 76);
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 77);
					if (type == 303)
					{
						for (int num411 = 0; num411 < 10; num411++)
						{
							Dust.NewDust(position, width, height, 193, 2 * hitDirection, -2f);
						}
					}
					if (type == 540)
					{
						Gore.NewGore(position, velocity, 926);
					}
				}
				else if (type == 67)
				{
					Gore.NewGore(position, velocity, 95);
					Gore.NewGore(position, velocity, 95);
					Gore.NewGore(position, velocity, 96);
				}
				else if (type == 55 || type == 230)
				{
					Gore.NewGore(position, velocity, 553);
					Gore.NewGore(position, velocity, 554);
				}
				else if (type == 615)
				{
					Gore.NewGore(position, velocity, 1198);
					Gore.NewGore(position, velocity, 1199);
					Gore.NewGore(position, velocity, 1200);
					Gore.NewGore(position, velocity, 1200);
				}
				else if (type == 74)
				{
					Gore.NewGore(position, velocity, 100);
				}
				else if (type == 297)
				{
					Gore.NewGore(position, velocity, 431);
				}
				else if (type == 298)
				{
					Gore.NewGore(position, velocity, 432);
				}
				else if (type == 671)
				{
					Gore.NewGore(position, velocity, 1277);
					Gore.NewGore(base.Center + new Vector2(4f, 0f), velocity, 1279);
					Gore.NewGore(base.Center + new Vector2(-4f, 0f), velocity, 1279);
				}
				else if (type == 672)
				{
					Gore.NewGore(position, velocity, 1280);
					Gore.NewGore(base.Center + new Vector2(4f, 0f), velocity, 1281);
					Gore.NewGore(base.Center + new Vector2(-4f, 0f), velocity, 1281);
				}
				else if (type == 673)
				{
					Gore.NewGore(position, velocity, 1282);
					Gore.NewGore(base.Center + new Vector2(4f, 0f), velocity, 1283);
					Gore.NewGore(base.Center + new Vector2(-4f, 0f), velocity, 1283);
				}
				else if (type == 674)
				{
					Gore.NewGore(position, velocity, 1284);
					Gore.NewGore(base.Center + new Vector2(4f, 0f), velocity, 1285);
					Gore.NewGore(base.Center + new Vector2(-4f, 0f), velocity, 1285);
				}
				else if (type == 675)
				{
					Gore.NewGore(position, velocity, 1286);
					Gore.NewGore(base.Center + new Vector2(4f, 0f), velocity, 1287);
					Gore.NewGore(base.Center + new Vector2(-4f, 0f), velocity, 1287);
				}
				else if (type == 299)
				{
					Gore.NewGore(position, velocity, 433);
				}
				else if (type == 538)
				{
					Gore.NewGore(position, velocity, 897);
				}
				else if (type == 300)
				{
					Gore.NewGore(position, velocity, 434);
				}
				else if (type == 610)
				{
					Gore.NewGore(position, velocity, 1163);
				}
				else if (type == 626)
				{
					Gore.NewGore(position, velocity, 1197);
				}
				else if (type == 102)
				{
					Gore.NewGore(position, velocity, 116);
				}
				else if (type == 224)
				{
					Gore.NewGore(position, velocity, 312);
					Gore.NewGore(position, velocity, 313);
				}
				else if (type == 587)
				{
					for (int num413 = 0; num413 < 50; num413++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(position, velocity, 1104);
					Gore.NewGore(position, velocity, 1105);
				}
				else if (type == 616)
				{
					Gore.NewGore(position, velocity, 1166);
					Gore.NewGore(position, velocity, 1167);
					Gore.NewGore(position, velocity, 1168);
					Gore.NewGore(position, velocity, 1168);
				}
				else if (type == 617)
				{
					Gore.NewGore(position, velocity, 1169);
					Gore.NewGore(position, velocity, 1170);
					Gore.NewGore(position, velocity, 1171);
					Gore.NewGore(position, velocity, 1171);
				}
				else if (type == 625)
				{
					Gore.NewGore(position, velocity, 1194);
					Gore.NewGore(position, velocity, 1195);
					Gore.NewGore(position, velocity, 1196);
					Gore.NewGore(position, velocity, 1196);
				}
			}
			else if (type == 148 || type == 149 || type == 168 || type == 470)
			{
				if (life > 0)
				{
					for (int num414 = 0; (double)num414 < dmg / (double)lifeMax * 20.0; num414++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num415 = 0; num415 < 10; num415++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				if (type == 148)
				{
					Gore.NewGore(position, velocity, 160);
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 161);
				}
				else if (type == 149)
				{
					Gore.NewGore(position, velocity, 162);
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 163);
				}
				else if (type == 168)
				{
					Gore.NewGore(position, velocity, 215);
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 216);
				}
				else if (type == 470)
				{
					Gore.NewGore(position, velocity, 673);
					Gore.NewGore(position, velocity, 672);
					Gore.NewGore(position, velocity, 674);
				}
			}
			else if (type == 361)
			{
				if (life > 0)
				{
					for (int num416 = 0; (double)num416 < dmg / (double)lifeMax * 20.0; num416++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num417 = 0; num417 < 10; num417++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, velocity, 551);
				Gore.NewGore(new Vector2(position.X, position.Y), velocity, 552);
			}
			else if (type == 687)
			{
				if (life > 0)
				{
					for (int num418 = 0; (double)num418 < dmg / (double)lifeMax * 20.0; num418++)
					{
						Dust.NewDust(position, width, height, 16, hitDirection, -1f);
					}
				}
				else
				{
					Vector2 vector21 = base.Center - new Vector2(20f);
					Utils.PoofOfSmoke(vector21);
				}
			}
			else if (type == 685)
			{
				if (life > 0)
				{
					for (int num419 = 0; (double)num419 < dmg / (double)lifeMax * 20.0; num419++)
					{
						Dust.NewDust(position, width, height, 0, hitDirection, -1f);
					}
				}
				else
				{
					Vector2 vector22 = base.Center - new Vector2(20f);
					Utils.PoofOfSmoke(vector22);
				}
			}
			else if (type == 607)
			{
				if (life > 0)
				{
					for (int num420 = 0; (double)num420 < dmg / (double)lifeMax * 20.0; num420++)
					{
						Dust.NewDust(position, width, height, 45, hitDirection, -1f);
					}
					return;
				}
				for (int num421 = 0; num421 < 10; num421++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, velocity, 1152);
				Gore.NewGore(new Vector2(position.X, position.Y), velocity, 1153);
			}
			else if (type == 366 || type == 367)
			{
				if (life > 0)
				{
					for (int num422 = 0; (double)num422 < dmg / (double)lifeMax * 20.0; num422++)
					{
						Dust.NewDust(position, width, height, 203, hitDirection, -1f);
					}
					return;
				}
				for (int num424 = 0; num424 < 10; num424++)
				{
					Dust.NewDust(position, width, height, 203, 2 * hitDirection, -2f);
				}
				if (type == 366)
				{
					Gore.NewGore(position, velocity, 561);
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 562);
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 563);
				}
				else
				{
					Gore.NewGore(position, velocity, 564);
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 565);
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 566);
				}
			}
			else if (type >= 362 && type <= 365)
			{
				if (life > 0)
				{
					for (int num425 = 0; (double)num425 < dmg / (double)lifeMax * 20.0; num425++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num426 = 0; num426 < 10; num426++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				if (type == 362 || type == 363)
				{
					Gore.NewGore(position, velocity, 555);
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 556);
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 557);
				}
				else
				{
					Gore.NewGore(position, velocity, 558);
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 559);
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 560);
				}
			}
			else if (type == 602 || type == 603)
			{
				if (life > 0)
				{
					for (int num427 = 0; (double)num427 < dmg / (double)lifeMax * 20.0; num427++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num428 = 0; num428 < 10; num428++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				if (type == 602 || type == 603)
				{
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 1150);
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 1151);
				}
			}
			else if (type == 608 || type == 609)
			{
				if (life > 0)
				{
					for (int num429 = 0; (double)num429 < dmg / (double)lifeMax * 20.0; num429++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num430 = 0; num430 < 10; num430++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				if (type == 608 || type == 609)
				{
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 1154);
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 1155);
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 1156);
				}
			}
			else if (type == 348 || type == 349)
			{
				if (life > 0)
				{
					for (int num431 = 0; (double)num431 < dmg / (double)lifeMax * 20.0; num431++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num432 = 0; num432 < 10; num432++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, velocity, 528);
				Gore.NewGore(position, velocity, 529);
				Gore.NewGore(position, velocity, 530);
				Gore.NewGore(position, velocity, 531);
				Gore.NewGore(position, velocity, 532);
			}
			else if (type == 351)
			{
				if (life > 0)
				{
					for (int num433 = 0; (double)num433 < dmg / (double)lifeMax * 20.0; num433++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num435 = 0; num435 < 10; num435++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, velocity, 538);
				Gore.NewGore(position, velocity, 539);
				Gore.NewGore(position, velocity, 540);
				Gore.NewGore(position, velocity, 541);
				Gore.NewGore(position, velocity, 542);
			}
			else if (type == 350)
			{
				if (life > 0)
				{
					for (int num436 = 0; (double)num436 < dmg / (double)lifeMax * 20.0; num436++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num437 = 0; num437 < 10; num437++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, velocity, 533);
				Gore.NewGore(position, velocity, 534);
				Gore.NewGore(position, velocity, 535);
				Gore.NewGore(position, velocity, 536);
			}
			else if (type == 47 || type == 57 || type == 58 || type == 464 || type == 465)
			{
				if (life > 0)
				{
					for (int num438 = 0; (double)num438 < dmg / (double)lifeMax * 20.0; num438++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num439 = 0; num439 < 10; num439++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				if (type == 57)
				{
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 84);
				}
				else if (type == 58)
				{
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 85);
				}
				else if (type == 464)
				{
					Gore.NewGore(position, velocity, 668);
					Gore.NewGore(position, velocity, 669);
				}
				else if (type == 465)
				{
					Gore.NewGore(position, velocity, 670);
					Gore.NewGore(position, velocity, 671);
				}
				else
				{
					Gore.NewGore(position, velocity, 78);
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 79);
				}
			}
			else if (type == 173 || type == 174 || type == 181 || type == 182 || type == 268)
			{
				if (life > 0)
				{
					for (int num440 = 0; (double)num440 < dmg / (double)lifeMax * 100.0; num440++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f, alpha);
					}
					return;
				}
				for (int num441 = 0; num441 < 50; num441++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f, alpha);
				}
				if (type == 173)
				{
					Gore.NewGore(position, velocity, 223);
					Gore.NewGore(position, velocity, 224);
				}
				else if (type == 174)
				{
					Gore.NewGore(position, velocity, 225);
					Gore.NewGore(position, velocity, 226);
				}
				else if (type == 181)
				{
					Gore.NewGore(position, velocity, 237);
				}
				else if (type == 182)
				{
					Gore.NewGore(position, velocity, 238);
					Gore.NewGore(position, velocity, 239);
				}
				else if (type == 268)
				{
					Gore.NewGore(position, velocity, 403);
					Gore.NewGore(position, velocity, 404);
					Gore.NewGore(position, velocity, 405);
				}
			}
			else if (type == 2 || type == 190 || type == 191 || type == 192 || type == 193 || type == 194 || type == 317 || type == 318)
			{
				if (life > 0)
				{
					for (int num442 = 0; (double)num442 < dmg / (double)lifeMax * 100.0; num442++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num443 = 0; num443 < 50; num443++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				if (type == 190)
				{
					Gore.NewGore(position, velocity, 249, scale);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity, 2, scale);
				}
				else if (type == 191)
				{
					Gore.NewGore(position, velocity, 248, scale);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity, 2, scale);
				}
				else if (type == 192)
				{
					Gore.NewGore(position, velocity, 247, scale);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity, 2, scale);
				}
				else if (type == 193)
				{
					Gore.NewGore(position, velocity, 252, scale);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity, 253, scale);
				}
				else if (type == 194)
				{
					Gore.NewGore(position, velocity, 250, scale);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity, 251, scale);
				}
				else if (type == 317)
				{
					Gore.NewGore(position, velocity, 447, scale);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity, 448, scale);
				}
				else if (type == 318)
				{
					Gore.NewGore(position, velocity, 449, scale);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity, 450, scale);
				}
				else
				{
					Gore.NewGore(position, velocity, 1, scale);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity, 2, scale);
				}
			}
			else if (type == 157)
			{
				if (life > 0)
				{
					for (int num444 = 0; (double)num444 < dmg / (double)lifeMax * 100.0; num444++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num447 = 0; num447 < 50; num447++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, velocity, 186);
				Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity, 187);
			}
			else if (type == 133)
			{
				if (life > 0)
				{
					for (int num448 = 0; (double)num448 < dmg / (double)lifeMax * 100.0; num448++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					if ((float)life < (float)lifeMax * 0.5f && localAI[0] == 0f)
					{
						localAI[0] = 1f;
						Gore.NewGore(position, velocity, 1);
					}
				}
				else
				{
					for (int num449 = 0; num449 < 50; num449++)
					{
						Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(position, velocity, 155);
					Gore.NewGore(new Vector2(position.X, position.Y + 14f), velocity, 155);
				}
			}
			else if (type == 69 || type == 581 || type == 580 || type == 508 || type == 509 || type == 582)
			{
				float num450 = 100f;
				float num451 = 50f;
				if (type == 582)
				{
					num450 = 30f;
					num451 = 10f;
				}
				if (life > 0)
				{
					for (int num452 = 0; (double)num452 < dmg / (double)lifeMax * (double)num450; num452++)
					{
						Dust.NewDust(position, width, height, 250, hitDirection, -1f);
					}
					return;
				}
				for (int num453 = 0; (float)num453 < num451; num453++)
				{
					Dust.NewDust(position, width, height, 250, 2 * hitDirection, -2f);
				}
				if (type == 69)
				{
					Gore.NewGore(position, velocity, 97);
					Gore.NewGore(position, velocity, 98);
				}
				else if (type == 580)
				{
					Gore.NewGore(position, velocity, 1094);
					Gore.NewGore(position, velocity, 1095);
					Gore.NewGore(position, velocity, 1096);
					Gore.NewGore(position, velocity, 1097);
				}
				else if (type == 581)
				{
					Gore.NewGore(position, velocity, 1098);
					Gore.NewGore(position, velocity, 1099);
					Gore.NewGore(position, velocity, 1100);
					Gore.NewGore(position, velocity, 1101);
					Gore.NewGore(position, velocity, 1101);
				}
				else if (type == 508)
				{
					Gore.NewGore(position, velocity, 811);
					Gore.NewGore(position, velocity, 812);
					Gore.NewGore(position, velocity, 813);
					Gore.NewGore(position, velocity, 814);
				}
				else if (type == 509)
				{
					Gore.NewGore(position, velocity, 815);
					Gore.NewGore(position, velocity, 816);
					Gore.NewGore(position, velocity, 817);
					Gore.NewGore(position, velocity, 818);
					Gore.NewGore(position, velocity, 818);
				}
				else if (type == 582)
				{
					Gore.NewGore(position, velocity, 1102);
					Gore.NewGore(position, velocity, 1103);
				}
			}
			else if (type == 61)
			{
				if (life > 0)
				{
					for (int num454 = 0; (double)num454 < dmg / (double)lifeMax * 100.0; num454++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num455 = 0; num455 < 50; num455++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, velocity, 86);
				Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity, 87);
				Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity, 88);
			}
			else if (type == 301)
			{
				if (life > 0)
				{
					for (int num456 = 0; (double)num456 < dmg / (double)lifeMax * 100.0; num456++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num458 = 0; num458 < 50; num458++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, velocity, 438);
				Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity, 439);
			}
			else if (type == 252)
			{
				if (life > 0)
				{
					for (int num459 = 0; (double)num459 < dmg / (double)lifeMax * 100.0; num459++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num460 = 0; num460 < 50; num460++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, velocity, 373);
				Gore.NewGore(position, velocity, 374);
			}
			else if (type == 489 || type == 586)
			{
				if (life > 0)
				{
					for (int num461 = 0; (double)num461 < dmg / (double)lifeMax * 100.0; num461++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num462 = 0; num462 < 50; num462++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (type == 489)
				{
					Gore.NewGore(position, velocity, 722, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 723, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 723, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 724, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 724, scale);
				}
				if (type == 586)
				{
					Gore.NewGore(position, velocity, 1106, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 1107, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 1107, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 1108, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 1108, scale);
				}
			}
			else if (type == 534)
			{
				if (life > 0)
				{
					for (int num463 = 0; (double)num463 < dmg / (double)lifeMax * 100.0; num463++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num464 = 0; num464 < 50; num464++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 894, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 895, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 895, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 896, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 896, scale);
			}
			else if (type == 490)
			{
				if (life > 0)
				{
					for (int num465 = 0; (double)num465 < dmg / (double)lifeMax * 100.0; num465++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num466 = 0; num466 < 50; num466++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 725, scale);
				Gore.NewGore(position, velocity, 726, scale);
				Gore.NewGore(position, velocity, 727, scale);
				Gore.NewGore(position, velocity, 725 + Main.rand.Next(3), scale);
				Gore.NewGore(position, velocity, 725 + Main.rand.Next(3), scale);
			}
			else if (type == 65 || (type >= 542 && type <= 545))
			{
				if (life > 0)
				{
					for (int num467 = 0; (double)num467 < dmg / (double)lifeMax * 150.0; num467++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num469 = 0; num469 < 75; num469++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				if (type == 65)
				{
					Gore.NewGore(position, velocity * 0.8f, 89);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 90);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 91);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 92);
				}
				if (type == 542)
				{
					Gore.NewGore(position, velocity * 0.8f, 944);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 945);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 946);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 947);
				}
				if (type == 543)
				{
					Gore.NewGore(position, velocity * 0.8f, 948);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 949);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 950);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 951);
				}
				if (type == 544)
				{
					Gore.NewGore(position, velocity * 0.8f, 952);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 953);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 954);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 955);
				}
				if (type == 545)
				{
					Gore.NewGore(position, velocity * 0.8f, 956);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 957);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 958);
					Gore.NewGore(new Vector2(position.X + 14f, position.Y), velocity * 0.8f, 959);
				}
			}
			else if (type == 195 || type == 196)
			{
				if (life > 0)
				{
					for (int num470 = 0; (double)num470 < dmg / (double)lifeMax * 150.0; num470++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num471 = 0; num471 < 75; num471++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, velocity, 254, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 255, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 255, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 256, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 256, scale);
			}
			else if (type == 198 || type == 199)
			{
				if (life > 0)
				{
					for (int num472 = 0; (double)num472 < dmg / (double)lifeMax * 150.0; num472++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num473 = 0; num473 < 75; num473++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, velocity, 258, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 259, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 259, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 260, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 260, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 261, scale);
			}
			else if (type == 206)
			{
				if (life > 0)
				{
					for (int num474 = 0; (double)num474 < dmg / (double)lifeMax * 150.0; num474++)
					{
						Dust.NewDust(position, width, height, 137, hitDirection, -1f);
					}
					return;
				}
				for (int num475 = 0; num475 < 75; num475++)
				{
					Dust.NewDust(position, width, height, 137, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, velocity, 273, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 274, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 274, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 275, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 275, scale);
			}
			else if (type == 342)
			{
				if (life > 0)
				{
					for (int num476 = 0; (double)num476 < dmg / (double)lifeMax * 100.0; num476++)
					{
						Dust.NewDust(position, width, height, 0, hitDirection, -1f);
					}
					return;
				}
				for (int num477 = 0; num477 < 50; num477++)
				{
					Dust.NewDust(position, width, height, 0, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 500, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 501, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 501, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 502, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 502, scale);
			}
			else if (type >= 338 && type <= 340)
			{
				if (life > 0)
				{
					for (int num478 = 0; (double)num478 < dmg / (double)lifeMax * 100.0; num478++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num480 = 0; num480 < 50; num480++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (type == 338)
				{
					Gore.NewGore(position, velocity, 494, scale);
				}
				if (type == 339)
				{
					Gore.NewGore(position, velocity, 495, scale);
				}
				if (type == 340)
				{
					Gore.NewGore(position, velocity, 496, scale);
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 497, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 498, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 499, scale);
			}
			else if (type == 343)
			{
				if (life > 0)
				{
					for (int num481 = 0; (double)num481 < dmg / (double)lifeMax * 100.0; num481++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num482 = 0; num482 < 50; num482++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 503, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 504, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 505, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 506, scale);
			}
			else if ((type >= 430 && type <= 436) || type == 590 || type == 591 || type == 3 || type == 52 || type == 53 || type == 536 || type == 104 || type == 109 || type == 331 || type == 332 || type == 132 || type == 161 || type == 162 || type == 186 || type == 187 || type == 188 || type == 189 || type == 200 || type == 223 || type == 251 || type == 319 || type == 320 || type == 321 || type == 632)
			{
				if (life > 0)
				{
					for (int num483 = 0; (double)num483 < dmg / (double)lifeMax * 100.0; num483++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					if (type == 186 && Main.rand.Next(5) == 0)
					{
						Gore.NewGore(position, velocity, 242);
					}
					if (type == 632 && Main.rand.Next(5) == 0)
					{
						Gore.NewGore(position, velocity, 1217);
					}
					if (type == 187)
					{
						for (int num484 = 0; (double)num484 < dmg / (double)lifeMax * 200.0; num484++)
						{
							Dust.NewDust(position, width, 24, 4, hitDirection, -1f, 125, new Color(0, 80, 255, 100));
						}
					}
					if ((type == 590 || type == 591) && !wet)
					{
						for (int num485 = 0; num485 < 3; num485++)
						{
							Dust.NewDust(position, width, 24, 6, hitDirection, -1f, 125, new Color(0, 80, 255, 100));
						}
					}
					return;
				}
				for (int num486 = 0; num486 < 50; num486++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (type == 187 || type == 433)
				{
					for (int num487 = 0; num487 < 25; num487++)
					{
						Dust.NewDust(position, width, 24, 4, hitDirection, -1f, 125, new Color(0, 80, 255, 100));
					}
				}
				if (type == 104)
				{
					Gore.NewGore(position, velocity, 117, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 118, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 118, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 119, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 119, scale);
					return;
				}
				if (type == 632)
				{
					Gore.NewGore(position, velocity, 1214, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 1215, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 1215, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 1216, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 1216, scale);
					if (Main.netMode != 1)
					{
						int num488 = Main.rand.Next(2) + 2;
						Vector2 vector24 = default(Vector2);
						for (int num489 = 0; num489 < num488; num489++)
						{
							((Vector2)(ref vector24))._002Ector((float)Main.rand.Next(-10, 10) * 0.2f, -3.5f - (float)Main.rand.Next(5, 10) * 0.3f - (float)num489 * 0.5f);
							int num491 = NewNPC(GetSpawnSource_NPCHurt(), (int)(position.X + (float)(width / 2)), (int)position.Y + Main.rand.Next(height / 2) + 10, 606);
							Main.npc[num491].velocity = vector24;
							Main.npc[num491].netUpdate = true;
						}
					}
					return;
				}
				if (type == 331)
				{
					Gore.NewGore(position, velocity, 488, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 489, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 489, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 490, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 490, scale);
					return;
				}
				if (type == 332)
				{
					Gore.NewGore(position, velocity, 491, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 492, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 492, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 493, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 493, scale);
					return;
				}
				if (type == 109)
				{
					Gore.NewGore(position, velocity, 121, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 122, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 122, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 123, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 123, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 46f), velocity, 120, scale);
					return;
				}
				if (type == 161 || type == 431)
				{
					Gore.NewGore(position, velocity, 191, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 192, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 192, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 193, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 193, scale);
					return;
				}
				if (type == 162)
				{
					Gore.NewGore(position, velocity, 194, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 195, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 195, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 196, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 196, scale);
					return;
				}
				if (type == 188 || type == 434)
				{
					Gore.NewGore(position, velocity, 243, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 244, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 244, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 245, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 245, scale);
					return;
				}
				if (type == 200 || type == 436)
				{
					Gore.NewGore(position, velocity, 262, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 263, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 263, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 264, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 264, scale);
					return;
				}
				if (type == 319)
				{
					Gore.NewGore(position, velocity, 451, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 453, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 453, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 452, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 452, scale);
					return;
				}
				if (type == 320)
				{
					Gore.NewGore(position, velocity, 454, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 455, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 456, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 456, scale);
					return;
				}
				if (type == 321)
				{
					Gore.NewGore(position, velocity, 457, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 458, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 458, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 459, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 459, scale);
					return;
				}
				if (type == 223)
				{
					Gore.NewGore(position, velocity, 309, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 310, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 310, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 311, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 311, scale);
					return;
				}
				if (type == 132)
				{
					Gore.NewGore(position, velocity, 154);
				}
				else if (type == 186 || type == 432)
				{
					Gore.NewGore(position, velocity, 241);
				}
				else if (type == 189 || type == 435)
				{
					Gore.NewGore(position, velocity, 246);
				}
				else if (type == 251)
				{
					Gore.NewGore(position, velocity, 372);
				}
				else if (type != 187 && type != 433)
				{
					Gore.NewGore(position, velocity, 3);
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 4);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 4);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 5);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 5);
				if (type == 186 || type == 432)
				{
					Gore.NewGore(position, velocity, 242);
				}
				if ((type == 186 || type == 432) && Main.rand.Next(2) == 0)
				{
					Gore.NewGore(position, velocity, 242);
				}
			}
			else if (type == 83 || type == 84 || type == 179)
			{
				if (life > 0)
				{
					for (int num492 = 0; (double)num492 < dmg / (double)lifeMax * 50.0; num492++)
					{
						int num493 = Dust.NewDust(position, width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num493].noGravity = true;
					}
					return;
				}
				for (int num494 = 0; num494 < 20; num494++)
				{
					int num495 = Dust.NewDust(position, width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Dust dust20 = Main.dust[num495];
					Dust dust190 = dust20;
					dust190.velocity *= 2f;
					Main.dust[num495].noGravity = true;
				}
				int num496 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2((float)Main.rand.Next(-2, 3), (float)Main.rand.Next(-2, 3)), 61, scale);
				Gore gore6 = Main.gore[num496];
				Gore gore32 = gore6;
				gore32.velocity *= 0.5f;
				num496 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2((float)Main.rand.Next(-2, 3), (float)Main.rand.Next(-2, 3)), 61, scale);
				gore6 = Main.gore[num496];
				gore32 = gore6;
				gore32.velocity *= 0.5f;
				num496 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2((float)Main.rand.Next(-2, 3), (float)Main.rand.Next(-2, 3)), 61, scale);
				gore6 = Main.gore[num496];
				gore32 = gore6;
				gore32.velocity *= 0.5f;
			}
			else if (type == 262 || type == 263 || type == 264)
			{
				if (life > 0)
				{
					for (int num497 = 0; (double)num497 < dmg / (double)lifeMax * 100.0; num497++)
					{
						if (type == 262 && life > lifeMax / 2 && Main.rand.Next(3) != 0)
						{
							Dust.NewDust(position, width, height, 166, hitDirection, -1f);
						}
						else if (type == 265 && Main.rand.Next(3) != 0)
						{
							Dust.NewDust(position, width, height, 166, hitDirection, -1f);
						}
						else
						{
							Dust.NewDust(position, width, height, 167, hitDirection, -1f);
						}
					}
					return;
				}
				for (int num498 = 0; num498 < 150; num498++)
				{
					if (type == 265 && Main.rand.Next(3) != 0)
					{
						Dust.NewDust(position, width, height, 166, 2 * hitDirection, -2f);
					}
					else
					{
						Dust.NewDust(position, width, height, 167, 2 * hitDirection, -2f);
					}
				}
				if (type == 262)
				{
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 381, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 382, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 383, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 384, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 385, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 386, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 386, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 387, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 387, scale);
				}
				if (type == 263)
				{
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 390, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 391, scale);
				}
				if (type == 264)
				{
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 388, scale);
					Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), velocity, 389, scale);
				}
			}
			else if (type == 265)
			{
				if (life >= 0)
				{
					return;
				}
				for (int num499 = 0; num499 < 15; num499++)
				{
					if (Main.rand.Next(3) != 0)
					{
						Dust.NewDust(position, width, height, 166, hitDirection, -1f);
					}
					else
					{
						Dust.NewDust(position, width, height, 167, hitDirection, -1f);
					}
				}
			}
			else if (type == 266)
			{
				if (life > 0)
				{
					for (int num500 = 0; (double)num500 < dmg / (double)lifeMax * 100.0; num500++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num502 = 0; num502 < 150; num502++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 396);
				Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 397);
				Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 398);
				Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 399);
				Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 400);
				Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 401);
			}
			else if (type == 267)
			{
				if (life > 0)
				{
					for (int num503 = 0; (double)num503 < dmg / (double)lifeMax * 50.0; num503++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num504 = 0; num504 < 20; num504++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, velocity, 402);
			}
			else if (type == 4 || type == 126 || type == 125)
			{
				if (life > 0)
				{
					for (int num505 = 0; (double)num505 < dmg / (double)lifeMax * 100.0; num505++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num506 = 0; num506 < 150; num506++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				for (int num507 = 0; num507 < 2; num507++)
				{
					Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 2);
					Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 7);
					Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 9);
					if (type == 4)
					{
						Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 10);
						SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
					}
					else if (type == 125)
					{
						Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 146);
					}
					else if (type == 126)
					{
						Gore.NewGore(position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 145);
					}
				}
				if (type == 125 || type == 126)
				{
					for (int num508 = 0; num508 < 10; num508++)
					{
						int num509 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust23 = Main.dust[num509];
						Dust dust190 = dust23;
						dust190.velocity *= 1.4f;
					}
					for (int num510 = 0; num510 < 5; num510++)
					{
						int num511 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num511].noGravity = true;
						Dust dust21 = Main.dust[num511];
						Dust dust190 = dust21;
						dust190.velocity *= 5f;
						num511 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust21 = Main.dust[num511];
						dust190 = dust21;
						dust190.velocity *= 3f;
					}
					Vector2 val = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					int num513 = Gore.NewGore(val, center3, Main.rand.Next(61, 64));
					Gore gore7 = Main.gore[num513];
					Gore gore32 = gore7;
					gore32.velocity *= 0.4f;
					Main.gore[num513].velocity.X += 1f;
					Main.gore[num513].velocity.Y += 1f;
					Vector2 val2 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					num513 = Gore.NewGore(val2, center3, Main.rand.Next(61, 64));
					gore7 = Main.gore[num513];
					gore32 = gore7;
					gore32.velocity *= 0.4f;
					Main.gore[num513].velocity.X -= 1f;
					Main.gore[num513].velocity.Y += 1f;
					Vector2 val3 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					num513 = Gore.NewGore(val3, center3, Main.rand.Next(61, 64));
					gore7 = Main.gore[num513];
					gore32 = gore7;
					gore32.velocity *= 0.4f;
					Main.gore[num513].velocity.X += 1f;
					Main.gore[num513].velocity.Y -= 1f;
					Vector2 val4 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					num513 = Gore.NewGore(val4, center3, Main.rand.Next(61, 64));
					gore7 = Main.gore[num513];
					gore32 = gore7;
					gore32.velocity *= 0.4f;
					Main.gore[num513].velocity.X -= 1f;
					Main.gore[num513].velocity.Y -= 1f;
				}
			}
			else if (type == 5)
			{
				if (life > 0)
				{
					for (int num514 = 0; (double)num514 < dmg / (double)lifeMax * 50.0; num514++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num515 = 0; num515 < 20; num515++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, velocity, 6);
				Gore.NewGore(position, velocity, 7);
			}
			else if (type == 113 || type == 114)
			{
				if (life > 0)
				{
					for (int num516 = 0; num516 < 20; num516++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num517 = 0; num517 < 50; num517++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -1f);
				}
				if (type == 114)
				{
					Gore.NewGore(new Vector2(position.X, position.Y), velocity, 137, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2)), velocity, 139, scale);
					Gore.NewGore(new Vector2(position.X + (float)(width / 2), position.Y), velocity, 139, scale);
					Gore.NewGore(new Vector2(position.X + (float)(width / 2), position.Y + (float)(height / 2)), velocity, 137, scale);
					return;
				}
				Gore.NewGore(new Vector2(position.X, position.Y), velocity, 137, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2)), velocity, 138, scale);
				Gore.NewGore(new Vector2(position.X + (float)(width / 2), position.Y), velocity, 138, scale);
				Gore.NewGore(new Vector2(position.X + (float)(width / 2), position.Y + (float)(height / 2)), velocity, 137, scale);
				if (!(Main.player[Main.myPlayer].position.Y / 16f > (float)(Main.maxTilesY - 250)))
				{
					return;
				}
				int num518 = (int)Main.screenPosition.Y;
				int num519 = num518 + Main.screenWidth;
				int num520 = (int)position.X;
				if (direction > 0)
				{
					num520 -= 80;
				}
				int num521 = num520 + 140;
				int num522 = num520;
				for (int num524 = num518; num524 < num519; num524 += 50)
				{
					for (; num522 < num521; num522 += 46)
					{
						for (int num525 = 0; num525 < 5; num525++)
						{
							Dust.NewDust(new Vector2((float)num522, (float)num524), 32, 32, 5, (float)Main.rand.Next(-60, 61) * 0.1f, (float)Main.rand.Next(-60, 61) * 0.1f);
						}
						((Vector2)(ref center3))._002Ector((float)Main.rand.Next(-80, 81) * 0.1f, (float)Main.rand.Next(-60, 21) * 0.1f);
						Gore.NewGore(new Vector2((float)num522, (float)num524), center3, Main.rand.Next(140, 143));
					}
					num522 = num520;
				}
			}
			else if (type == 115 || type == 116)
			{
				if (life > 0)
				{
					for (int num526 = 0; num526 < 5; num526++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				if (type == 115 && Main.netMode != 1)
				{
					NewNPC(GetSpawnSource_NPCHurt(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), 116);
					for (int num527 = 0; num527 < 10; num527++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num528 = 0; num528 < 20; num528++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
				Gore.NewGore(position, velocity, 132, scale);
				Gore.NewGore(position, velocity, 133, scale);
			}
			else if (type >= 117 && type <= 119)
			{
				if (life > 0)
				{
					for (int num529 = 0; num529 < 5; num529++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num530 = 0; num530 < 10; num530++)
				{
					Dust.NewDust(position, width, height, 5, hitDirection, -1f);
				}
				Gore.NewGore(position, velocity, 134 + type - 117, scale);
			}
			else if (type == 217 || type == 218 || type == 219)
			{
				if (life > 0)
				{
					for (int num531 = 0; (double)num531 < dmg / (double)lifeMax * 100.0; num531++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -1f, alpha, this.color, scale);
					}
					return;
				}
				for (int num532 = 0; num532 < 50; num532++)
				{
					Dust.NewDust(position, width, height, 18, hitDirection, -2f, alpha, this.color, scale);
				}
				if (type == 217)
				{
					int num535 = Gore.NewGore(position, velocity, 292, scale);
					num535 = Gore.NewGore(position, velocity, 293, scale);
				}
				if (type == 218)
				{
					int num534 = Gore.NewGore(position, velocity, 295, scale);
					num534 = Gore.NewGore(position, velocity, 296, scale);
				}
				if (type == 219)
				{
					int num533 = Gore.NewGore(position, velocity, 294, scale);
				}
			}
			else if (type == 222)
			{
				if (life > 0)
				{
					for (int num537 = 0; (double)num537 < dmg / (double)lifeMax * 100.0; num537++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -1f, alpha, this.color, scale);
					}
					return;
				}
				for (int num538 = 0; num538 < 50; num538++)
				{
					Dust.NewDust(position, width, height, 18, hitDirection, -2f, alpha, this.color, scale);
				}
				Gore.NewGore(new Vector2(position.X, position.Y - 35f), velocity, 303, scale);
				Gore.NewGore(new Vector2(position.X, position.Y - 45f), velocity, 304, scale);
				Gore.NewGore(new Vector2(position.X, position.Y), velocity, 305, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 306, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 10f), velocity, 307, scale);
				Gore.NewGore(new Vector2(position.X, position.Y - 10f), velocity, 308, scale);
			}
			else if (type == 6 || type == 94 || type == 166)
			{
				if (life > 0)
				{
					for (int num539 = 0; (double)num539 < dmg / (double)lifeMax * 100.0; num539++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -1f, alpha, this.color, scale);
					}
					return;
				}
				for (int num540 = 0; num540 < 50; num540++)
				{
					Dust.NewDust(position, width, height, 18, hitDirection, -2f, alpha, this.color, scale);
				}
				if (type == 94)
				{
					int num541 = Gore.NewGore(position, velocity, 108, scale);
					num541 = Gore.NewGore(position, velocity, 108, scale);
					num541 = Gore.NewGore(position, velocity, 109, scale);
					num541 = Gore.NewGore(position, velocity, 110, scale);
				}
				else if (type == 166)
				{
					int num542 = Gore.NewGore(position, velocity, 209, scale);
					num542 = Gore.NewGore(position, velocity, 210, scale);
					num542 = Gore.NewGore(position, velocity, 211, scale);
				}
				else
				{
					int num543 = Gore.NewGore(position, velocity, 14, scale);
					Main.gore[num543].alpha = alpha;
					num543 = Gore.NewGore(position, velocity, 15, scale);
					Main.gore[num543].alpha = alpha;
				}
			}
			else if (type == 101)
			{
				if (life > 0)
				{
					for (int num544 = 0; (double)num544 < dmg / (double)lifeMax * 100.0; num544++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -1f, alpha, this.color, scale);
					}
					return;
				}
				for (int num545 = 0; num545 < 50; num545++)
				{
					Dust.NewDust(position, width, height, 18, hitDirection, -2f, alpha, this.color, scale);
				}
				int num546 = Gore.NewGore(position, velocity, 110, scale);
				num546 = Gore.NewGore(position, velocity, 114, scale);
				num546 = Gore.NewGore(position, velocity, 114, scale);
				num546 = Gore.NewGore(position, velocity, 115, scale);
			}
			else if (type == 7 || type == 8 || type == 9)
			{
				if (life > 0)
				{
					for (int num547 = 0; (double)num547 < dmg / (double)lifeMax * 100.0; num547++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -1f, alpha, this.color, scale);
					}
					return;
				}
				for (int num548 = 0; num548 < 50; num548++)
				{
					Dust.NewDust(position, width, height, 18, hitDirection, -2f, alpha, this.color, scale);
				}
				int num550 = Gore.NewGore(position, velocity, type - 7 + 18);
				Main.gore[num550].alpha = alpha;
			}
			else if (type == 98 || type == 99 || type == 100)
			{
				if (life > 0)
				{
					for (int num551 = 0; (double)num551 < dmg / (double)lifeMax * 100.0; num551++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -1f, alpha, this.color, scale);
					}
					return;
				}
				for (int num552 = 0; num552 < 50; num552++)
				{
					Dust.NewDust(position, width, height, 18, hitDirection, -2f, alpha, this.color, scale);
				}
				int num553 = Gore.NewGore(position, velocity, 110);
				Main.gore[num553].alpha = alpha;
			}
			else if (type == 10 || type == 11 || type == 12)
			{
				if (life > 0)
				{
					for (int num554 = 0; (double)num554 < dmg / (double)lifeMax * 50.0; num554++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num555 = 0; num555 < 10; num555++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, type - 7 + 18);
			}
			else if (type == 95 || type == 96 || type == 97)
			{
				if (life > 0)
				{
					for (int num556 = 0; (double)num556 < dmg / (double)lifeMax * 50.0; num556++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num557 = 0; num557 < 10; num557++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, type - 95 + 111);
			}
			else if (type == 13 || type == 14 || type == 15)
			{
				if (life > 0)
				{
					for (int num558 = 0; (double)num558 < dmg / (double)lifeMax * 100.0; num558++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -1f, alpha, this.color, scale);
					}
					return;
				}
				for (int num559 = 0; num559 < 50; num559++)
				{
					Dust.NewDust(position, width, height, 18, hitDirection, -2f, alpha, this.color, scale);
				}
				if (type == 13)
				{
					Gore.NewGore(position, velocity, 24);
					Gore.NewGore(position, velocity, 25);
				}
				else if (type == 14)
				{
					Gore.NewGore(position, velocity, 26);
					Gore.NewGore(position, velocity, 27);
				}
				else
				{
					Gore.NewGore(position, velocity, 28);
					Gore.NewGore(position, velocity, 29);
				}
			}
			else if (type == 17)
			{
				if (life > 0)
				{
					for (int num562 = 0; (double)num562 < dmg / (double)lifeMax * 100.0; num562++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num563 = 0; num563 < 50; num563++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (altTexture == 0)
				{
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1320 : 30);
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1322 : 31);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1322 : 31);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1323 : 32);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1323 : 32);
			}
			else if (type == 441)
			{
				if (life > 0)
				{
					for (int num564 = 0; (double)num564 < dmg / (double)lifeMax * 100.0; num564++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num565 = 0; num565 < 50; num565++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, IsShimmerVariant ? 1358 : 768);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1359 : 769);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1361 : 770);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1360 : 771);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1360 : 771);
			}
			else if (type == 86)
			{
				if (life > 0)
				{
					for (int num566 = 0; (double)num566 < dmg / (double)lifeMax * 100.0; num566++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num567 = 0; num567 < 50; num567++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 101);
				Gore.NewGore(position, velocity, 102);
				Gore.NewGore(position, velocity, 103);
				Gore.NewGore(position, velocity, 103);
				Gore.NewGore(position, velocity, 104);
				Gore.NewGore(position, velocity, 104);
				Gore.NewGore(position, velocity, 105);
			}
			else if (type == 155)
			{
				if (life > 0)
				{
					for (int num568 = 0; (double)num568 < dmg / (double)lifeMax * 100.0; num568++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num569 = 0; num569 < 50; num569++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 181);
				Gore.NewGore(position, velocity, 182);
				Gore.NewGore(position, velocity, 183);
			}
			else if (type == 329)
			{
				if (life > 0)
				{
					for (int num570 = 0; (double)num570 < dmg / (double)lifeMax * 100.0; num570++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num571 = 0; num571 < 50; num571++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 485);
				Gore.NewGore(position, velocity, 486);
				Gore.NewGore(position, velocity, 487);
			}
			else if (type == 163 || type == 238)
			{
				if (life > 0)
				{
					for (int num573 = 0; (double)num573 < dmg / (double)lifeMax * 100.0; num573++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -1f);
					}
					return;
				}
				for (int num574 = 0; num574 < 50; num574++)
				{
					Dust.NewDust(position, width, height, 18, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 205);
				Gore.NewGore(position, velocity, 206);
				Gore.NewGore(position, velocity, 206);
				Gore.NewGore(position, velocity, 206);
				Gore.NewGore(position, velocity, 206);
			}
			else if (type == 164 || type == 165)
			{
				if (life > 0)
				{
					for (int num575 = 0; (double)num575 < dmg / (double)lifeMax * 100.0; num575++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -1f);
					}
					return;
				}
				for (int num576 = 0; num576 < 50; num576++)
				{
					Dust.NewDust(position, width, height, 18, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 207);
				Gore.NewGore(position, velocity, 208);
				Gore.NewGore(position, velocity, 208);
				Gore.NewGore(position, velocity, 208);
				Gore.NewGore(position, velocity, 208);
			}
			else if (type == 239 || type == 240)
			{
				if (life > 0)
				{
					for (int num577 = 0; (double)num577 < dmg / (double)lifeMax * 100.0; num577++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num578 = 0; num578 < 50; num578++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 351);
				Gore.NewGore(position, velocity, 352);
				Gore.NewGore(position, velocity, 352);
				Gore.NewGore(position, velocity, 353);
				Gore.NewGore(position, velocity, 353);
			}
			else if (type == 236 || type == 237)
			{
				if (life > 0)
				{
					for (int num579 = 0; (double)num579 < dmg / (double)lifeMax * 100.0; num579++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -1f);
					}
					return;
				}
				for (int num580 = 0; num580 < 50; num580++)
				{
					Dust.NewDust(position, width, height, 18, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 332);
				Gore.NewGore(position, velocity, 333);
				Gore.NewGore(position, velocity, 334);
				Gore.NewGore(position, velocity, 335);
				Gore.NewGore(position, velocity, 335);
			}
			else if (type == 241)
			{
				if (life > 0)
				{
					for (int num581 = 0; (double)num581 < dmg / (double)lifeMax * 100.0; num581++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num582 = 0; num582 < 50; num582++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 354);
				Gore.NewGore(position, velocity, 355);
			}
			else if (type == 242)
			{
				if (life > 0)
				{
					for (int num584 = 0; (double)num584 < dmg / (double)lifeMax * 100.0; num584++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num585 = 0; num585 < 50; num585++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 356);
				Gore.NewGore(position, velocity, 357);
				Gore.NewGore(position, velocity, 357);
				Gore.NewGore(position, velocity, 358);
				Gore.NewGore(position, velocity, 358);
			}
			else if (type >= 105 && type <= 108)
			{
				if (life > 0)
				{
					for (int num586 = 0; (double)num586 < dmg / (double)lifeMax * 100.0; num586++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num587 = 0; num587 < 50; num587++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (type == 105 || type == 107)
				{
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1308 : 124);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1309 : 125);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1309 : 125);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1310 : 126);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1310 : 126);
					return;
				}
				if (altTexture == 0 || type == 106)
				{
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1373 : 127);
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1374 : 128);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1375 : 128);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1376 : 129);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1376 : 129);
			}
			else if (type == 123 || type == 124)
			{
				if (life > 0)
				{
					for (int num588 = 0; (double)num588 < dmg / (double)lifeMax * 100.0; num588++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num589 = 0; num589 < 50; num589++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, IsShimmerVariant ? 1317 : 151);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1318 : 152);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1318 : 152);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1319 : 153);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1319 : 153);
			}
			else if (type == 22)
			{
				if (life > 0)
				{
					for (int num590 = 0; (double)num590 < dmg / (double)lifeMax * 100.0; num590++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num591 = 0; num591 < 50; num591++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, IsShimmerVariant ? 1314 : 73);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1315 : 74);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1315 : 74);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1316 : 75);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1316 : 75);
			}
			else if (type == 550)
			{
				if (life > 0)
				{
					for (int num592 = 0; (double)num592 < dmg / (double)lifeMax * 100.0; num592++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num593 = 0; num593 < 50; num593++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 0f), velocity, IsShimmerVariant ? 1355 : 967);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1356 : 968);
				Gore.NewGore(new Vector2(position.X + 8f, position.Y + 20f), velocity, IsShimmerVariant ? 1356 : 968);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1357 : 969);
				Gore.NewGore(new Vector2(position.X + 8f, position.Y + 34f), velocity, IsShimmerVariant ? 1357 : 969);
			}
			else if (type == 588 || type == 589)
			{
				if (life > 0)
				{
					for (int num595 = 0; (double)num595 < dmg / (double)lifeMax * 100.0; num595++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num596 = 0; num596 < 50; num596++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (altTexture == 0)
				{
					Gore.NewGore(new Vector2(position.X, position.Y + 0f), velocity, IsShimmerVariant ? 1311 : 1109);
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1312 : 1110);
				Gore.NewGore(new Vector2(position.X + 8f, position.Y + 20f), velocity, IsShimmerVariant ? 1312 : 1110);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1313 : 1111);
				Gore.NewGore(new Vector2(position.X + 8f, position.Y + 34f), velocity, IsShimmerVariant ? 1313 : 1111);
			}
			else if (type == 633)
			{
				if (life > 0)
				{
					for (int num597 = 0; (double)num597 < dmg / (double)lifeMax * 100.0; num597++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num598 = 0; num598 < 50; num598++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				int num599 = 1219;
				int num600 = 1220;
				if (altTexture == 2)
				{
					num599 = 1223;
					num600 = 1224;
				}
				if (IsShimmerVariant)
				{
					num599 = 1377;
					num600 = 1379;
					if (altTexture == 2)
					{
						num599 = 1378;
						num600 = 1380;
					}
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 0f), velocity, num599);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num600);
				Gore.NewGore(new Vector2(position.X + 8f, position.Y + 20f), velocity, num600);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1382 : 1221);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1381 : 1222);
				Gore.NewGore(new Vector2(position.X + 8f, position.Y + 34f), velocity, IsShimmerVariant ? 1381 : 1222);
			}
			else if (type == 368)
			{
				if (life > 0)
				{
					for (int num601 = 0; (double)num601 < dmg / (double)lifeMax * 100.0; num601++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num602 = 0; num602 < 50; num602++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (altTexture == 0)
				{
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1362 : 567);
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1364 : 568);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1364 : 568);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1365 : 569);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1365 : 569);
			}
			else if (type == 369 || type == 376 || type == 663 || NPCID.Sets.IsTownPet[type])
			{
				if (life <= 0)
				{
					for (int num603 = 0; num603 < 25; num603++)
					{
						int num604 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 2f);
						Dust dust41 = Main.dust[num604];
						Dust dust190 = dust41;
						dust190.velocity *= 1.4f;
						Main.dust[num604].noLight = true;
						Main.dust[num604].noGravity = true;
					}
					int num606 = 0;
					Vector2 val5 = new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f);
					center3 = default(Vector2);
					num606 = Gore.NewGore(val5, center3, Main.rand.Next(61, 64));
					Main.gore[num606].scale = 1f;
					Main.gore[num606].velocity.X += 1f;
					Main.gore[num606].velocity.Y += 1f;
					Vector2 val6 = new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f);
					center3 = default(Vector2);
					num606 = Gore.NewGore(val6, center3, Main.rand.Next(61, 64));
					Main.gore[num606].scale = 1f;
					Main.gore[num606].velocity.X -= 1f;
					Main.gore[num606].velocity.Y += 1f;
					Vector2 val7 = new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f);
					center3 = default(Vector2);
					num606 = Gore.NewGore(val7, center3, Main.rand.Next(61, 64));
					Main.gore[num606].scale = 1f;
					Main.gore[num606].velocity.X += 1f;
					Main.gore[num606].velocity.Y -= 1f;
					Vector2 val8 = new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f);
					center3 = default(Vector2);
					num606 = Gore.NewGore(val8, center3, Main.rand.Next(61, 64));
					Main.gore[num606].scale = 1f;
					Main.gore[num606].velocity.X -= 1f;
					Main.gore[num606].velocity.Y -= 1f;
				}
			}
			else if (type == 227)
			{
				if (life > 0)
				{
					for (int num607 = 0; (double)num607 < dmg / (double)lifeMax * 100.0; num607++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num608 = 0; num608 < 50; num608++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (altTexture == 0)
				{
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1331 : 320);
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1334 : 321);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1333 : 322);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1332 : 323);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1332 : 323);
			}
			else if (type == 228)
			{
				if (life > 0)
				{
					for (int num609 = 0; (double)num609 < dmg / (double)lifeMax * 100.0; num609++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num610 = 0; num610 < 50; num610++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, IsShimmerVariant ? 1369 : 324);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1370 : 325);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1372 : 326);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1371 : 327);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1371 : 327);
			}
			else if (type == 229)
			{
				if (life > 0)
				{
					for (int num611 = 0; (double)num611 < dmg / (double)lifeMax * 100.0; num611++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				if (IsShimmerVariant)
				{
					for (int num612 = 0; num612 < 50; num612++)
					{
						int num613 = Dust.NewDust(position, width, height, 180, velocity.X, velocity.Y);
						Dust dust42 = Main.dust[num613];
						Dust dust190 = dust42;
						dust190.velocity *= 2f;
						Main.dust[num613].noGravity = true;
						Main.dust[num613].scale = 1.4f;
					}
					return;
				}
				for (int num614 = 0; num614 < 50; num614++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (altTexture == 0)
				{
					Gore.NewGore(position, velocity, 328);
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 329);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 329);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 330);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 330);
			}
			else if (type == 142)
			{
				if (life > 0)
				{
					for (int num615 = 0; (double)num615 < dmg / (double)lifeMax * 100.0; num615++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num617 = 0; num617 < 50; num617++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (altTexture == 0)
				{
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1338 : 157);
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1340 : 158);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1340 : 158);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1341 : 159);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1341 : 159);
			}
			else if (type == 178)
			{
				if (life > 0)
				{
					for (int num618 = 0; (double)num618 < dmg / (double)lifeMax * 100.0; num618++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num619 = 0; num619 < 50; num619++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (altTexture == 0)
				{
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1348 : 231);
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1349 : 232);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1349 : 232);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1350 : 233);
			}
			else if (type == 353 || type == 354)
			{
				if (life > 0)
				{
					for (int num620 = 0; (double)num620 < dmg / (double)lifeMax * 100.0; num620++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num621 = 0; num621 < 50; num621++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (altTexture == 0)
				{
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1353 : 544);
				}
				if (!IsShimmerVariant)
				{
					Gore.NewGore(position, velocity, 543);
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1353 : 546);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1353 : 546);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1354 : 545);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1354 : 545);
			}
			else if (type == 37)
			{
				if (life > 0)
				{
					for (int num622 = 0; (double)num622 < dmg / (double)lifeMax * 100.0; num622++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num623 = 0; num623 < 50; num623++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, IsShimmerVariant ? 1328 : 58);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1329 : 59);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1329 : 59);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1330 : 60);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1330 : 60);
			}
			else if (type == 54)
			{
				if (life > 0)
				{
					for (int num624 = 0; (double)num624 < dmg / (double)lifeMax * 100.0; num624++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num625 = 0; num625 < 50; num625++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, IsShimmerVariant ? 1291 : 58);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1292 : 59);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1292 : 59);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1293 : 60);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1293 : 60);
			}
			else if (type == 160)
			{
				if (life > 0)
				{
					for (int num626 = 0; (double)num626 < dmg / (double)lifeMax * 100.0; num626++)
					{
						Dust.NewDust(position, width, height, 26, hitDirection, -1f);
					}
					return;
				}
				for (int num628 = 0; num628 < 50; num628++)
				{
					Dust.NewDust(position, width, height, 26, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, IsShimmerVariant ? 1366 : 188);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1367 : 189);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1367 : 189);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1368 : 190);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1368 : 190);
			}
			else if (type == 18)
			{
				if (life > 0)
				{
					for (int num629 = 0; (double)num629 < dmg / (double)lifeMax * 100.0; num629++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num630 = 0; num630 < 50; num630++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (altTexture == 0)
				{
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1324 : 33);
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1326 : 34);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1326 : 34);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1327 : 35);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1327 : 35);
			}
			else if (type == 19)
			{
				if (life > 0)
				{
					for (int num631 = 0; (double)num631 < dmg / (double)lifeMax * 100.0; num631++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num632 = 0; num632 < 50; num632++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, IsShimmerVariant ? 1288 : 36);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1289 : 37);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1289 : 37);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1290 : 38);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1290 : 38);
			}
			else if (type == 38)
			{
				if (life > 0)
				{
					for (int num633 = 0; (double)num633 < dmg / (double)lifeMax * 100.0; num633++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num634 = 0; num634 < 50; num634++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (altTexture == 0)
				{
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1297 : 64);
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1299 : 65);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1299 : 65);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1300 : 66);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1300 : 66);
			}
			else if (type == 20)
			{
				if (life > 0)
				{
					for (int num635 = 0; (double)num635 < dmg / (double)lifeMax * 100.0; num635++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num636 = 0; num636 < 50; num636++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, IsShimmerVariant ? 1301 : 39);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1302 : 40);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1302 : 40);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1303 : 41);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1303 : 41);
			}
			else if (type == 207)
			{
				if (life > 0)
				{
					for (int num637 = 0; (double)num637 < dmg / (double)lifeMax * 100.0; num637++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num639 = 0; num639 < 50; num639++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (altTexture == 0)
				{
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1304 : 283);
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1306 : 284);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1306 : 284);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1307 : 285);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1307 : 285);
			}
			else if (type == 208)
			{
				if (life > 0)
				{
					for (int num640 = 0; (double)num640 < dmg / (double)lifeMax * 100.0; num640++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num641 = 0; num641 < 50; num641++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, IsShimmerVariant ? 1335 : 286);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1336 : 287);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1336 : 287);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1337 : 288);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1337 : 288);
			}
			else if (type == 663)
			{
				if (life > 0)
				{
					for (int num642 = 0; (double)num642 < dmg / (double)lifeMax * 100.0; num642++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num643 = 0; num643 < 50; num643++)
					{
						Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
				}
			}
			else if (type == 209)
			{
				if (life > 0)
				{
					for (int num644 = 0; (double)num644 < dmg / (double)lifeMax * 100.0; num644++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num645 = 0; num645 < 50; num645++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, IsShimmerVariant ? 1294 : 289);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1295 : 290);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1295 : 290);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1296 : 291);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1296 : 291);
			}
			else if (type >= 212 && type <= 216)
			{
				if (life > 0)
				{
					for (int num646 = 0; (double)num646 < dmg / (double)lifeMax * 100.0; num646++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num647 = 0; num647 < 50; num647++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (type == 212)
				{
					Gore.NewGore(position, velocity, 336);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 337);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 337);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 338);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 338);
				}
				else if (type == 213)
				{
					Gore.NewGore(position, velocity, 339);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 340);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 340);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 341);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 341);
				}
				else if (type == 214)
				{
					Gore.NewGore(position, velocity, 342);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 343);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 343);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 344);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 344);
				}
				else if (type == 215)
				{
					Gore.NewGore(position, velocity, 345);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 346);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 346);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 347);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 347);
				}
				else if (type == 216)
				{
					Gore.NewGore(position, velocity, 348);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 349);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 349);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 350);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 350);
				}
			}
			else if (type == 220 || type == 221)
			{
				if (life > 0)
				{
					for (int num648 = 0; (double)num648 < dmg / (double)lifeMax * 50.0; num648++)
					{
						Dust.NewDust(position, width, height, 151, hitDirection, -1f, 0, default(Color), 0.7f);
					}
					return;
				}
				for (int num650 = 0; num650 < 20; num650++)
				{
					Dust.NewDust(position, width, height, 151, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 0.7f);
				}
				if (type == 221)
				{
					Gore.NewGore(position, velocity, 298, scale);
					Gore.NewGore(position, velocity, 299, scale);
				}
				else
				{
					Gore.NewGore(position, velocity, 297, scale);
				}
			}
			else if (type == 21 || type == 31 || type == 294 || type == 295 || type == 296 || type == 32 || type == 44 || type == 45 || type == 77 || type == 110 || type == 167 || type == 197 || type == 201 || type == 202 || type == 203 || type == 287 || type == 291 || type == 292 || type == 293 || (type >= 322 && type <= 324) || type == 481 || (type >= 449 && type <= 452))
			{
				if (life > 0)
				{
					for (int num651 = 0; (double)num651 < dmg / (double)lifeMax * 50.0; num651++)
					{
						Dust.NewDust(position, width, height, 26, hitDirection, -1f);
					}
					return;
				}
				for (int num652 = 0; num652 < 20; num652++)
				{
					Dust.NewDust(position, width, height, 26, 2.5f * (float)hitDirection, -2.5f);
				}
				if (type == 167)
				{
					Gore.NewGore(position, velocity, 213, scale);
					Gore.NewGore(position, velocity, 214, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 212, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 212, scale);
					return;
				}
				if (type == 197)
				{
					Gore.NewGore(position, velocity, 257, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 212, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 212, scale);
					return;
				}
				if (type == 481)
				{
					Gore.NewGore(position, velocity, 695, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 696, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 696, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 697, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 697, scale);
					return;
				}
				if (type == 201 || type == 450)
				{
					Gore.NewGore(position, velocity, 265, scale);
					Gore.NewGore(position, velocity, 267, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 44, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 44, scale);
					return;
				}
				if (type == 202 || type == 451)
				{
					Gore.NewGore(position, velocity, 268, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 44, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 44, scale);
					return;
				}
				if (type == 203 || type == 452)
				{
					Gore.NewGore(position, velocity, 269, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 266, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 266, scale);
					return;
				}
				if (type == 322)
				{
					Gore.NewGore(position, velocity, 460, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 461, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 462, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 461, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 462, scale);
					return;
				}
				if (type == 323)
				{
					Gore.NewGore(position, velocity, 463, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 465, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 464, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 464, scale);
					return;
				}
				if (type == 324)
				{
					Gore.NewGore(position, velocity, 466, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 467, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 467, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 468, scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 468, scale);
					return;
				}
				Gore.NewGore(position, velocity, 42, scale);
				if (type == 77)
				{
					Gore.NewGore(position, velocity, 106, scale);
				}
				if (type == 110)
				{
					Gore.NewGore(position, velocity, 130, scale);
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
				if (type == 110)
				{
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 131, scale);
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 44, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 44, scale);
			}
			else if (type == 453)
			{
				if (life > 0)
				{
					for (int num653 = 0; (double)num653 < dmg / (double)lifeMax * 50.0; num653++)
					{
						Dust.NewDust(position, width, height, 26, hitDirection, -1f);
					}
					return;
				}
				for (int num654 = 0; num654 < 20; num654++)
				{
					Dust.NewDust(position, width, height, 26, 2.5f * (float)hitDirection, -2.5f);
				}
				if (altTexture == 0)
				{
					Gore.NewGore(position, velocity, IsShimmerVariant ? 1342 : 638, scale);
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1346 : 639, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, IsShimmerVariant ? 1345 : 640, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1344 : 641, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, IsShimmerVariant ? 1347 : 642, scale);
			}
			else if ((type >= 269 && type <= 276) || (type >= 281 && type <= 286))
			{
				if (life > 0)
				{
					for (int num655 = 0; (double)num655 < dmg / (double)lifeMax * 50.0; num655++)
					{
						Dust.NewDust(position, width, height, 26, hitDirection, -1f);
					}
					return;
				}
				for (int num656 = 0; num656 < 20; num656++)
				{
					Dust.NewDust(position, width, height, 26, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 42, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 43, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 44, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 44, scale);
				if (type == 269)
				{
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 406, scale);
				}
				if (type == 270)
				{
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 407, scale);
				}
				if (type == 271 || type == 272)
				{
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 408, scale);
				}
				if (type == 274)
				{
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 409, scale);
				}
				if (type == 276)
				{
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 410, scale);
				}
			}
			else if (type >= 277 && type <= 280)
			{
				if (life > 0)
				{
					for (int num657 = 0; (double)num657 < dmg / (double)lifeMax * 100.0; num657++)
					{
						int num658 = Dust.NewDust(position, width, height, 174, hitDirection, -1f);
						Main.dust[num658].scale = 1.1f;
						Main.dust[num658].noGravity = true;
					}
					return;
				}
				for (int num659 = 0; num659 < 75; num659++)
				{
					int num661 = Dust.NewDust(position, width, height, 174, 1.5f * (float)hitDirection, -0.5f);
					Dust dust53 = Main.dust[num661];
					Dust dust190 = dust53;
					dust190.velocity *= 2f;
					Main.dust[num661].scale = 1.4f;
					Main.dust[num661].noGravity = true;
				}
			}
			else if (type == 341)
			{
				int num662 = 196;
				if (life > 0)
				{
					for (int num663 = 0; (double)num663 < dmg / (double)lifeMax * 50.0; num663++)
					{
						Dust.NewDust(position, width, height, num662);
					}
					return;
				}
				for (int num664 = 0; num664 < 20; num664++)
				{
					Dust.NewDust(position, width, height, num662);
				}
				int num665 = Gore.NewGore(new Vector2(position.X, position.Y - 10f), new Vector2((float)hitDirection, 0f), 61, scale);
				Gore gore11 = Main.gore[num665];
				Gore gore32 = gore11;
				gore32.velocity *= 0.3f;
				num665 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2((float)hitDirection, 0f), 62, scale);
				gore11 = Main.gore[num665];
				gore32 = gore11;
				gore32.velocity *= 0.3f;
				num665 = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 10f), new Vector2((float)hitDirection, 0f), 63, scale);
				gore11 = Main.gore[num665];
				gore32 = gore11;
				gore32.velocity *= 0.3f;
			}
			else if (type == 85 || type == 629)
			{
				int num666 = 7;
				if (ai[3] == 2f)
				{
					num666 = 10;
				}
				if (ai[3] == 3f)
				{
					num666 = 37;
				}
				if (life > 0)
				{
					for (int num667 = 0; (double)num667 < dmg / (double)lifeMax * 50.0; num667++)
					{
						Dust.NewDust(position, width, height, num666);
					}
					return;
				}
				for (int num668 = 0; num668 < 20; num668++)
				{
					Dust.NewDust(position, width, height, num666);
				}
				int num669 = Gore.NewGore(new Vector2(position.X, position.Y - 10f), new Vector2((float)hitDirection, 0f), 61, scale);
				Gore gore12 = Main.gore[num669];
				Gore gore32 = gore12;
				gore32.velocity *= 0.3f;
				num669 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2((float)hitDirection, 0f), 62, scale);
				gore12 = Main.gore[num669];
				gore32 = gore12;
				gore32.velocity *= 0.3f;
				num669 = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 10f), new Vector2((float)hitDirection, 0f), 63, scale);
				gore12 = Main.gore[num669];
				gore32 = gore12;
				gore32.velocity *= 0.3f;
			}
			else if (type == 473 || type == 474 || type == 475 || type == 476)
			{
				int num670 = 31;
				if (life > 0)
				{
					for (int num673 = 0; (double)num673 < dmg / (double)lifeMax * 50.0; num673++)
					{
						Dust.NewDust(position, width, height, num670);
					}
					return;
				}
				for (int num674 = 0; num674 < 20; num674++)
				{
					Dust.NewDust(position, width, height, num670);
				}
				int num675 = Gore.NewGore(base.Center, new Vector2((float)hitDirection, 0f), 61, scale);
				Gore gore13 = Main.gore[num675];
				Gore gore32 = gore13;
				gore32.velocity *= 0.3f;
				num675 = Gore.NewGore(base.Center, new Vector2((float)hitDirection, 0f), 62, scale);
				gore13 = Main.gore[num675];
				gore32 = gore13;
				gore32.velocity *= 0.3f;
				num675 = Gore.NewGore(base.Center, new Vector2((float)hitDirection, 0f), 63, scale);
				gore13 = Main.gore[num675];
				gore32 = gore13;
				gore32.velocity *= 0.3f;
			}
			else if (type == 169)
			{
				if (life > 0)
				{
					for (int num676 = 0; (double)num676 < dmg / (double)lifeMax * 50.0; num676++)
					{
						int num677 = Dust.NewDust(position, width, height, 92, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust55 = Main.dust[num677];
						Dust dust190 = dust55;
						dust190.velocity *= 1.5f;
						Main.dust[num677].noGravity = true;
					}
					return;
				}
				for (int num678 = 0; num678 < 100; num678++)
				{
					int num679 = Dust.NewDust(position, width, height, 92, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num679].scale = 1.5f;
					Dust dust56 = Main.dust[num679];
					Dust dust190 = dust56;
					dust190.velocity *= 2f;
					Main.dust[num679].noGravity = true;
				}
			}
			else if (type == 170 || type == 180)
			{
				if (life > 0)
				{
					for (int num680 = 0; (double)num680 < dmg / (double)lifeMax * 50.0; num680++)
					{
						int num681 = Dust.NewDust(position, width, height, 54, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust57 = Main.dust[num681];
						Dust dust190 = dust57;
						dust190.velocity *= 1.5f;
						Main.dust[num681].noGravity = true;
					}
					return;
				}
				for (int num682 = 0; num682 < 10; num682++)
				{
					int num684 = Dust.NewDust(position, width, height, 54, 0f, 0f, 0, default(Color), 1.5f);
					Dust dust58 = Main.dust[num684];
					Dust dust190 = dust58;
					dust190.velocity *= 2f;
					Main.dust[num684].noGravity = true;
				}
				for (int num685 = 0; num685 < 4; num685++)
				{
					int num686 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2((float)hitDirection, 0f), 99, scale);
					Gore gore14 = Main.gore[num686];
					Gore gore32 = gore14;
					gore32.velocity *= 0.3f;
				}
			}
			else if (type == 171)
			{
				if (life > 0)
				{
					for (int num687 = 0; (double)num687 < dmg / (double)lifeMax * 50.0; num687++)
					{
						int num688 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust59 = Main.dust[num688];
						Dust dust190 = dust59;
						dust190.velocity *= 1.5f;
						Main.dust[num688].noGravity = true;
					}
					return;
				}
				for (int num689 = 0; num689 < 10; num689++)
				{
					int num690 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
					Dust dust61 = Main.dust[num690];
					Dust dust190 = dust61;
					dust190.velocity *= 2f;
					Main.dust[num690].noGravity = true;
				}
				for (int num691 = 0; num691 < 4; num691++)
				{
					int num692 = 11 + num691;
					if (num692 > 13)
					{
						num692 = Main.rand.Next(11, 14);
					}
					int num693 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2((float)hitDirection, 0f), num692, scale);
					Gore gore15 = Main.gore[num693];
					Gore gore32 = gore15;
					gore32.velocity *= 0.3f;
				}
			}
			else if (type == 290)
			{
				if (life <= 0)
				{
					for (int num695 = 0; num695 < 10; num695++)
					{
						int num696 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust62 = Main.dust[num696];
						Dust dust190 = dust62;
						dust190.velocity *= 2f;
						Main.dust[num696].noGravity = true;
					}
					Vector2 val9 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					int num697 = Gore.NewGore(val9, center3, Main.rand.Next(11, 14), scale);
					Gore gore16 = Main.gore[num697];
					Gore gore32 = gore16;
					gore32.velocity *= 0.5f;
					Vector2 val10 = new Vector2(position.X, position.Y + 20f);
					center3 = default(Vector2);
					num697 = Gore.NewGore(val10, center3, Main.rand.Next(11, 14), scale);
					gore16 = Main.gore[num697];
					gore32 = gore16;
					gore32.velocity *= 0.5f;
					Vector2 val11 = new Vector2(position.X, position.Y + 40f);
					center3 = default(Vector2);
					num697 = Gore.NewGore(val11, center3, Main.rand.Next(11, 14), scale);
					gore16 = Main.gore[num697];
					gore32 = gore16;
					gore32.velocity *= 0.5f;
				}
			}
			else if (type >= 87 && type <= 92)
			{
				if (life > 0)
				{
					for (int num698 = 0; (double)num698 < dmg / (double)lifeMax * 50.0; num698++)
					{
						int num699 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust64 = Main.dust[num699];
						Dust dust190 = dust64;
						dust190.velocity *= 1.5f;
						Main.dust[num699].noGravity = true;
					}
					return;
				}
				for (int num700 = 0; num700 < 10; num700++)
				{
					int num701 = Dust.NewDust(position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
					Dust dust65 = Main.dust[num701];
					Dust dust190 = dust65;
					dust190.velocity *= 2f;
					Main.dust[num701].noGravity = true;
				}
				int num702 = Main.rand.Next(1, 4);
				for (int num703 = 0; num703 < num702; num703++)
				{
					int num704 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2((float)hitDirection, 0f), Main.rand.Next(11, 14), scale);
					Gore gore17 = Main.gore[num704];
					Gore gore32 = gore17;
					gore32.velocity *= 0.8f;
				}
			}
			else if (type == 78 || type == 79 || type == 80 || type == 630)
			{
				if (life > 0)
				{
					for (int num706 = 0; (double)num706 < dmg / (double)lifeMax * 50.0; num706++)
					{
						int num707 = Dust.NewDust(position, width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust67 = Main.dust[num707];
						Dust dust190 = dust67;
						dust190.velocity *= 2f;
						Main.dust[num707].noGravity = true;
					}
					return;
				}
				for (int num708 = 0; num708 < 20; num708++)
				{
					int num709 = Dust.NewDust(position, width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Dust dust68 = Main.dust[num709];
					Dust dust190 = dust68;
					dust190.velocity *= 2f;
					Main.dust[num709].noGravity = true;
				}
				int num710 = Gore.NewGore(new Vector2(position.X, position.Y - 10f), new Vector2((float)hitDirection, 0f), 61, scale);
				Gore gore18 = Main.gore[num710];
				Gore gore32 = gore18;
				gore32.velocity *= 0.3f;
				num710 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), new Vector2((float)hitDirection, 0f), 62, scale);
				gore18 = Main.gore[num710];
				gore32 = gore18;
				gore32.velocity *= 0.3f;
				num710 = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 10f), new Vector2((float)hitDirection, 0f), 63, scale);
				gore18 = Main.gore[num710];
				gore32 = gore18;
				gore32.velocity *= 0.3f;
			}
			else if (type == 82 || type == 158 || type == 159 || type == 250 || type == 253)
			{
				if (life > 0)
				{
					for (int num711 = 0; (double)num711 < dmg / (double)lifeMax * 50.0; num711++)
					{
						int num712 = Dust.NewDust(position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
						Dust dust70 = Main.dust[num712];
						Dust dust190 = dust70;
						dust190.velocity *= 2f;
						Main.dust[num712].noGravity = true;
					}
					return;
				}
				for (int num713 = 0; num713 < 20; num713++)
				{
					int num714 = Dust.NewDust(position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
					Dust dust71 = Main.dust[num714];
					Dust dust190 = dust71;
					dust190.velocity *= 2f;
					Main.dust[num714].noGravity = true;
				}
				int num715 = Gore.NewGore(new Vector2(position.X, position.Y - 10f), new Vector2((float)hitDirection, 0f), 99, scale);
				Gore gore19 = Main.gore[num715];
				Gore gore32 = gore19;
				gore32.velocity *= 0.3f;
				num715 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 15f), new Vector2((float)hitDirection, 0f), 99, scale);
				gore19 = Main.gore[num715];
				gore32 = gore19;
				gore32.velocity *= 0.3f;
				num715 = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 20f), new Vector2((float)hitDirection, 0f), 99, scale);
				gore19 = Main.gore[num715];
				gore32 = gore19;
				gore32.velocity *= 0.3f;
			}
			else if (type == 316 || type == 330)
			{
				if (life > 0)
				{
					for (int num717 = 0; (double)num717 < dmg / (double)lifeMax * 100.0; num717++)
					{
						int num718 = Dust.NewDust(position, width, height, 192, hitDirection, -1f, 100, new Color(100, 100, 100, 100));
						Main.dust[num718].noGravity = true;
					}
				}
				else
				{
					for (int num719 = 0; num719 < 50; num719++)
					{
						int num720 = Dust.NewDust(position, width, height, 192, 2 * hitDirection, -2f, 100, new Color(100, 100, 100, 100));
						Main.dust[num720].noGravity = true;
					}
				}
			}
			else if (type == 662)
			{
				if (life > 0)
				{
					for (int num721 = 0; (double)num721 < dmg / (double)lifeMax * 100.0; num721++)
					{
						int num722 = Dust.NewDust(position, width, height, 180, velocity.X, velocity.Y);
						Dust dust73 = Main.dust[num722];
						Dust dust190 = dust73;
						dust190.velocity *= 2f;
						Main.dust[num722].noGravity = true;
						Main.dust[num722].scale = 1.4f;
					}
				}
				else
				{
					for (int num723 = 0; num723 < 50; num723++)
					{
						int num724 = Dust.NewDust(position, width, height, 180, velocity.X, velocity.Y);
						Dust dust75 = Main.dust[num724];
						Dust dust190 = dust75;
						dust190.velocity *= 2f;
						Main.dust[num724].noGravity = true;
						Main.dust[num724].scale = 1.4f;
					}
				}
			}
			else if (type == 315)
			{
				if (life > 0)
				{
					for (int num725 = 0; (double)num725 < dmg / (double)lifeMax * 50.0; num725++)
					{
						int num726 = Dust.NewDust(position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
						Dust dust76 = Main.dust[num726];
						Dust dust190 = dust76;
						dust190.velocity *= 2f;
						Main.dust[num726].noGravity = true;
					}
					return;
				}
				for (int num728 = 0; num728 < 20; num728++)
				{
					int num729 = Dust.NewDust(position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
					Dust dust78 = Main.dust[num729];
					Dust dust190 = dust78;
					dust190.velocity *= 2f;
					Main.dust[num729].noGravity = true;
				}
				int num730 = Gore.NewGore(new Vector2(position.X, position.Y - 10f), new Vector2((float)hitDirection, 0f), 99, scale);
				Gore gore20 = Main.gore[num730];
				Gore gore32 = gore20;
				gore32.velocity *= 0.3f;
				num730 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 15f), new Vector2((float)hitDirection, 0f), 99, scale);
				gore20 = Main.gore[num730];
				gore32 = gore20;
				gore32.velocity *= 0.3f;
				num730 = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 20f), new Vector2((float)hitDirection, 0f), 99, scale);
				gore20 = Main.gore[num730];
				gore32 = gore20;
				gore32.velocity *= 0.3f;
				num730 = Gore.NewGore(new Vector2(position.X, position.Y), new Vector2((float)hitDirection, 0f), 446, scale);
				gore20 = Main.gore[num730];
				gore32 = gore20;
				gore32.velocity *= 0.1f;
			}
			else if (type == 254 || type == 255 || type == 256 || type == 257 || type == 258 || type == 259 || type == 260 || type == 261 || type == 634 || type == 635)
			{
				if (life > 0)
				{
					for (int num731 = 0; (double)num731 < dmg / (double)lifeMax * 50.0; num731++)
					{
						int num732 = Dust.NewDust(position, width, height, 165, 0f, 0f, 50, default(Color), 1.5f);
						Dust dust79 = Main.dust[num732];
						Dust dust190 = dust79;
						dust190.velocity *= 2f;
						Main.dust[num732].noGravity = true;
					}
					return;
				}
				for (int num733 = 0; num733 < 20; num733++)
				{
					int num734 = Dust.NewDust(position, width, height, 165, 0f, 0f, 50, default(Color), 1.5f);
					Dust dust81 = Main.dust[num734];
					Dust dust190 = dust81;
					dust190.velocity *= 2f;
					Main.dust[num734].noGravity = true;
				}
				if (type != 261)
				{
					int num735 = Gore.NewGore(new Vector2(position.X, position.Y - 10f), new Vector2((float)hitDirection, 0f), 375, scale);
					Gore gore21 = Main.gore[num735];
					Gore gore32 = gore21;
					gore32.velocity *= 0.3f;
					num735 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 15f), new Vector2((float)hitDirection, 0f), 376, scale);
					gore21 = Main.gore[num735];
					gore32 = gore21;
					gore32.velocity *= 0.3f;
					num735 = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 20f), new Vector2((float)hitDirection, 0f), 377, scale);
					gore21 = Main.gore[num735];
					gore32 = gore21;
					gore32.velocity *= 0.3f;
				}
			}
			else if (type == 140)
			{
				if (life <= 0)
				{
					for (int num736 = 0; num736 < 20; num736++)
					{
						int num737 = Dust.NewDust(position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
						Dust dust82 = Main.dust[num737];
						Dust dust190 = dust82;
						dust190.velocity *= 2f;
						Main.dust[num737].noGravity = true;
					}
					int num739 = Gore.NewGore(new Vector2(position.X, position.Y - 10f), new Vector2((float)hitDirection, 0f), 99, scale);
					Gore gore22 = Main.gore[num739];
					Gore gore32 = gore22;
					gore32.velocity *= 0.3f;
					num739 = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 15f), new Vector2((float)hitDirection, 0f), 99, scale);
					gore22 = Main.gore[num739];
					gore32 = gore22;
					gore32.velocity *= 0.3f;
					num739 = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 20f), new Vector2((float)hitDirection, 0f), 99, scale);
					gore22 = Main.gore[num739];
					gore32 = gore22;
					gore32.velocity *= 0.3f;
				}
			}
			else if (type == 39 || type == 40 || type == 41)
			{
				if (life > 0)
				{
					for (int num740 = 0; (double)num740 < dmg / (double)lifeMax * 50.0; num740++)
					{
						Dust.NewDust(position, width, height, 26, hitDirection, -1f);
					}
					return;
				}
				for (int num741 = 0; num741 < 20; num741++)
				{
					Dust.NewDust(position, width, height, 26, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, type - 39 + 67);
			}
			else if (type == 34)
			{
				if (life > 0)
				{
					for (int num742 = 0; (double)num742 < dmg / (double)lifeMax * 30.0; num742++)
					{
						int num743 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 15, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 1.8f);
						Main.dust[num743].noLight = true;
						Main.dust[num743].noGravity = true;
						Dust dust84 = Main.dust[num743];
						Dust dust190 = dust84;
						dust190.velocity *= 1.3f;
						num743 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 26, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 0, default(Color), 0.9f);
						Main.dust[num743].noLight = true;
						dust84 = Main.dust[num743];
						dust190 = dust84;
						dust190.velocity *= 1.3f;
					}
				}
				else
				{
					for (int num744 = 0; num744 < 15; num744++)
					{
						int num745 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 15, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 1.8f);
						Main.dust[num745].noLight = true;
						Main.dust[num745].noGravity = true;
						Dust dust86 = Main.dust[num745];
						Dust dust190 = dust86;
						dust190.velocity *= 1.3f;
						num745 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 26, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 0, default(Color), 0.9f);
						Main.dust[num745].noLight = true;
						dust86 = Main.dust[num745];
						dust190 = dust86;
						dust190.velocity *= 1.3f;
					}
				}
			}
			else if (type == 289)
			{
				if (life > 0)
				{
					for (int num746 = 0; (double)num746 < dmg / (double)lifeMax * 30.0; num746++)
					{
						int num747 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 181, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 1.8f);
						Main.dust[num747].noLight = true;
						Main.dust[num747].noGravity = true;
						Dust dust88 = Main.dust[num747];
						Dust dust190 = dust88;
						dust190.velocity *= 1.3f;
					}
				}
				else
				{
					for (int num748 = 0; num748 < 50; num748++)
					{
						int num750 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 181, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 1.8f);
						Main.dust[num750].noLight = true;
						Main.dust[num750].noGravity = true;
						Dust dust89 = Main.dust[num750];
						Dust dust190 = dust89;
						dust190.velocity *= 1.3f;
					}
				}
			}
			else if (type == 35 || type == 36)
			{
				if (life > 0)
				{
					for (int num751 = 0; (double)num751 < dmg / (double)lifeMax * 100.0; num751++)
					{
						Dust.NewDust(position, width, height, 26, hitDirection, -1f);
					}
					return;
				}
				for (int num752 = 0; num752 < 150; num752++)
				{
					Dust.NewDust(position, width, height, 26, 2.5f * (float)hitDirection, -2.5f);
				}
				if (type == 35)
				{
					Gore.NewGore(position, velocity, 54);
					Gore.NewGore(position, velocity, 55);
					return;
				}
				Gore.NewGore(position, velocity, 56);
				Gore.NewGore(position, velocity, 57);
				Gore.NewGore(position, velocity, 57);
				Gore.NewGore(position, velocity, 57);
			}
			else if (type == 139)
			{
				if (life <= 0)
				{
					for (int num753 = 0; num753 < 10; num753++)
					{
						int num754 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust92 = Main.dust[num754];
						Dust dust190 = dust92;
						dust190.velocity *= 1.4f;
					}
					for (int num755 = 0; num755 < 5; num755++)
					{
						int num756 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num756].noGravity = true;
						Dust dust91 = Main.dust[num756];
						Dust dust190 = dust91;
						dust190.velocity *= 5f;
						num756 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust91 = Main.dust[num756];
						dust190 = dust91;
						dust190.velocity *= 3f;
					}
					Vector2 val12 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					int num757 = Gore.NewGore(val12, center3, Main.rand.Next(61, 64));
					Gore gore23 = Main.gore[num757];
					Gore gore32 = gore23;
					gore32.velocity *= 0.4f;
					Main.gore[num757].velocity.X += 1f;
					Main.gore[num757].velocity.Y += 1f;
					Vector2 val13 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					num757 = Gore.NewGore(val13, center3, Main.rand.Next(61, 64));
					gore23 = Main.gore[num757];
					gore32 = gore23;
					gore32.velocity *= 0.4f;
					Main.gore[num757].velocity.X -= 1f;
					Main.gore[num757].velocity.Y += 1f;
					Vector2 val14 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					num757 = Gore.NewGore(val14, center3, Main.rand.Next(61, 64));
					gore23 = Main.gore[num757];
					gore32 = gore23;
					gore32.velocity *= 0.4f;
					Main.gore[num757].velocity.X += 1f;
					Main.gore[num757].velocity.Y -= 1f;
					Vector2 val15 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					num757 = Gore.NewGore(val15, center3, Main.rand.Next(61, 64));
					gore23 = Main.gore[num757];
					gore32 = gore23;
					gore32.velocity *= 0.4f;
					Main.gore[num757].velocity.X -= 1f;
					Main.gore[num757].velocity.Y -= 1f;
				}
			}
			else if (type == 467)
			{
				if (life <= 0)
				{
					for (int num758 = 0; num758 < 7; num758++)
					{
						int num759 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust95 = Main.dust[num759];
						Dust dust190 = dust95;
						dust190.velocity *= 1.4f;
					}
					for (int num761 = 0; num761 < 3; num761++)
					{
						int num762 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num762].noGravity = true;
						Dust dust94 = Main.dust[num762];
						Dust dust190 = dust94;
						dust190.velocity *= 5f;
						num762 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust94 = Main.dust[num762];
						dust190 = dust94;
						dust190.velocity *= 3f;
					}
					Gore.NewGore(position, velocity, 660);
					Gore.NewGore(position, velocity, 660);
				}
			}
			else if (type >= 134 && type <= 136)
			{
				if (type == 135 && life > 0 && Main.netMode != 1)
				{
					int maxValue = 25;
					if (IsMechQueenUp)
					{
						maxValue = 50;
					}
					if (ai[2] == 0f && Main.rand.Next(maxValue) == 0)
					{
						ai[2] = 1f;
						int num763 = NewNPC(GetSpawnSource_NPCHurt(), (int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), 139);
						if (Main.netMode == 2 && num763 < 200)
						{
							NetMessage.SendData(23, -1, -1, null, num763);
						}
						netUpdate = true;
					}
				}
				if (life > 0)
				{
					return;
				}
				Gore.NewGore(position, velocity, 156);
				if (Main.rand.Next(2) == 0)
				{
					for (int num764 = 0; num764 < 10; num764++)
					{
						int num765 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust102 = Main.dust[num765];
						Dust dust190 = dust102;
						dust190.velocity *= 1.4f;
					}
					for (int num766 = 0; num766 < 5; num766++)
					{
						int num767 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num767].noGravity = true;
						Dust dust101 = Main.dust[num767];
						Dust dust190 = dust101;
						dust190.velocity *= 5f;
						num767 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust101 = Main.dust[num767];
						dust190 = dust101;
						dust190.velocity *= 3f;
					}
					Vector2 val16 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					int num768 = Gore.NewGore(val16, center3, Main.rand.Next(61, 64));
					Gore gore24 = Main.gore[num768];
					Gore gore32 = gore24;
					gore32.velocity *= 0.4f;
					Main.gore[num768].velocity.X += 1f;
					Main.gore[num768].velocity.Y += 1f;
					Vector2 val17 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					num768 = Gore.NewGore(val17, center3, Main.rand.Next(61, 64));
					gore24 = Main.gore[num768];
					gore32 = gore24;
					gore32.velocity *= 0.4f;
					Main.gore[num768].velocity.X -= 1f;
					Main.gore[num768].velocity.Y += 1f;
					Vector2 val18 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					num768 = Gore.NewGore(val18, center3, Main.rand.Next(61, 64));
					gore24 = Main.gore[num768];
					gore32 = gore24;
					gore32.velocity *= 0.4f;
					Main.gore[num768].velocity.X += 1f;
					Main.gore[num768].velocity.Y -= 1f;
					Vector2 val19 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					num768 = Gore.NewGore(val19, center3, Main.rand.Next(61, 64));
					gore24 = Main.gore[num768];
					gore32 = gore24;
					gore32.velocity *= 0.4f;
					Main.gore[num768].velocity.X -= 1f;
					Main.gore[num768].velocity.Y -= 1f;
				}
			}
			else if (type == 347)
			{
				if (life <= 0)
				{
					Gore.NewGore(position, velocity, 524);
					Gore.NewGore(position, velocity, 525);
					Gore.NewGore(position, velocity, 526);
					Gore.NewGore(position, velocity, 527);
					for (int num769 = 0; num769 < 7; num769++)
					{
						int num770 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust105 = Main.dust[num770];
						Dust dust190 = dust105;
						dust190.velocity *= 1.4f;
					}
					for (int num772 = 0; num772 < 4; num772++)
					{
						int num773 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num773].noGravity = true;
						Dust dust103 = Main.dust[num773];
						Dust dust190 = dust103;
						dust190.velocity *= 5f;
						num773 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust103 = Main.dust[num773];
						dust190 = dust103;
						dust190.velocity *= 3f;
					}
					Vector2 val20 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					int num774 = Gore.NewGore(val20, center3, Main.rand.Next(61, 64));
					Gore gore25 = Main.gore[num774];
					Gore gore32 = gore25;
					gore32.velocity *= 0.4f;
					Main.gore[num774].velocity.X += 1f;
					Main.gore[num774].velocity.Y += 1f;
					Vector2 val21 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					num774 = Gore.NewGore(val21, center3, Main.rand.Next(61, 64));
					gore25 = Main.gore[num774];
					gore32 = gore25;
					gore32.velocity *= 0.4f;
					Main.gore[num774].velocity.X -= 1f;
					Main.gore[num774].velocity.Y -= 1f;
				}
			}
			else if (type == 346)
			{
				if (life <= 0)
				{
					Gore.NewGore(position, velocity, 518);
					Gore.NewGore(position, velocity, 519);
					Gore.NewGore(position, velocity, 520);
					Gore.NewGore(position, velocity, 521);
					Gore.NewGore(position, velocity, 522);
					Gore.NewGore(position, velocity, 523);
					for (int num775 = 0; num775 < 10; num775++)
					{
						int num776 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust116 = Main.dust[num776];
						Dust dust190 = dust116;
						dust190.velocity *= 1.4f;
					}
					for (int num777 = 0; num777 < 5; num777++)
					{
						int num778 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num778].noGravity = true;
						Dust dust115 = Main.dust[num778];
						Dust dust190 = dust115;
						dust190.velocity *= 5f;
						num778 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust115 = Main.dust[num778];
						dust190 = dust115;
						dust190.velocity *= 3f;
					}
					Vector2 val22 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					int num779 = Gore.NewGore(val22, center3, Main.rand.Next(61, 64));
					Gore gore26 = Main.gore[num779];
					Gore gore32 = gore26;
					gore32.velocity *= 0.4f;
					Main.gore[num779].velocity.X += 1f;
					Main.gore[num779].velocity.Y += 1f;
					Vector2 val23 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					num779 = Gore.NewGore(val23, center3, Main.rand.Next(61, 64));
					gore26 = Main.gore[num779];
					gore32 = gore26;
					gore32.velocity *= 0.4f;
					Main.gore[num779].velocity.X -= 1f;
					Main.gore[num779].velocity.Y += 1f;
					Vector2 val24 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					num779 = Gore.NewGore(val24, center3, Main.rand.Next(61, 64));
					gore26 = Main.gore[num779];
					gore32 = gore26;
					gore32.velocity *= 0.4f;
					Main.gore[num779].velocity.X += 1f;
					Main.gore[num779].velocity.Y -= 1f;
					Vector2 val25 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					num779 = Gore.NewGore(val25, center3, Main.rand.Next(61, 64));
					gore26 = Main.gore[num779];
					gore32 = gore26;
					gore32.velocity *= 0.4f;
					Main.gore[num779].velocity.X -= 1f;
					Main.gore[num779].velocity.Y -= 1f;
				}
			}
			else if (type == 127)
			{
				if (life <= 0)
				{
					Gore.NewGore(position, velocity, 149);
					Gore.NewGore(position, velocity, 150);
					for (int num780 = 0; num780 < 10; num780++)
					{
						int num781 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust128 = Main.dust[num781];
						Dust dust190 = dust128;
						dust190.velocity *= 1.4f;
					}
					for (int num784 = 0; num784 < 5; num784++)
					{
						int num785 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num785].noGravity = true;
						Dust dust123 = Main.dust[num785];
						Dust dust190 = dust123;
						dust190.velocity *= 5f;
						num785 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust123 = Main.dust[num785];
						dust190 = dust123;
						dust190.velocity *= 3f;
					}
					Vector2 val26 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					int num786 = Gore.NewGore(val26, center3, Main.rand.Next(61, 64));
					Gore gore27 = Main.gore[num786];
					Gore gore32 = gore27;
					gore32.velocity *= 0.4f;
					Main.gore[num786].velocity.X += 1f;
					Main.gore[num786].velocity.Y += 1f;
					Vector2 val27 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					num786 = Gore.NewGore(val27, center3, Main.rand.Next(61, 64));
					gore27 = Main.gore[num786];
					gore32 = gore27;
					gore32.velocity *= 0.4f;
					Main.gore[num786].velocity.X -= 1f;
					Main.gore[num786].velocity.Y += 1f;
					Vector2 val28 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					num786 = Gore.NewGore(val28, center3, Main.rand.Next(61, 64));
					gore27 = Main.gore[num786];
					gore32 = gore27;
					gore32.velocity *= 0.4f;
					Main.gore[num786].velocity.X += 1f;
					Main.gore[num786].velocity.Y -= 1f;
					Vector2 val29 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					num786 = Gore.NewGore(val29, center3, Main.rand.Next(61, 64));
					gore27 = Main.gore[num786];
					gore32 = gore27;
					gore32.velocity *= 0.4f;
					Main.gore[num786].velocity.X -= 1f;
					Main.gore[num786].velocity.Y -= 1f;
				}
			}
			else if (type >= 128 && type <= 131)
			{
				if (life <= 0)
				{
					Gore.NewGore(position, velocity, 147);
					Gore.NewGore(position, velocity, 148);
					for (int num787 = 0; num787 < 10; num787++)
					{
						int num788 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust127 = Main.dust[num788];
						Dust dust190 = dust127;
						dust190.velocity *= 1.4f;
					}
					for (int num789 = 0; num789 < 5; num789++)
					{
						int num790 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num790].noGravity = true;
						Dust dust129 = Main.dust[num790];
						Dust dust190 = dust129;
						dust190.velocity *= 5f;
						num790 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust129 = Main.dust[num790];
						dust190 = dust129;
						dust190.velocity *= 3f;
					}
					Vector2 val30 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					int num791 = Gore.NewGore(val30, center3, Main.rand.Next(61, 64));
					Gore gore28 = Main.gore[num791];
					Gore gore32 = gore28;
					gore32.velocity *= 0.4f;
					Main.gore[num791].velocity.X += 1f;
					Main.gore[num791].velocity.Y += 1f;
					Vector2 val31 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					num791 = Gore.NewGore(val31, center3, Main.rand.Next(61, 64));
					gore28 = Main.gore[num791];
					gore32 = gore28;
					gore32.velocity *= 0.4f;
					Main.gore[num791].velocity.X -= 1f;
					Main.gore[num791].velocity.Y += 1f;
					Vector2 val32 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					num791 = Gore.NewGore(val32, center3, Main.rand.Next(61, 64));
					gore28 = Main.gore[num791];
					gore32 = gore28;
					gore32.velocity *= 0.4f;
					Main.gore[num791].velocity.X += 1f;
					Main.gore[num791].velocity.Y -= 1f;
					Vector2 val33 = new Vector2(position.X, position.Y);
					center3 = default(Vector2);
					num791 = Gore.NewGore(val33, center3, Main.rand.Next(61, 64));
					gore28 = Main.gore[num791];
					gore32 = gore28;
					gore32.velocity *= 0.4f;
					Main.gore[num791].velocity.X -= 1f;
					Main.gore[num791].velocity.Y -= 1f;
				}
			}
			else if (type == 23)
			{
				if (life > 0)
				{
					for (int num792 = 0; (double)num792 < dmg / (double)lifeMax * 100.0; num792++)
					{
						int num793 = 25;
						if (Main.rand.Next(2) == 0)
						{
							num793 = 6;
						}
						Dust.NewDust(position, width, height, num793, hitDirection, -1f);
						int num795 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num795].noGravity = true;
					}
					return;
				}
				for (int num796 = 0; num796 < 50; num796++)
				{
					int num797 = 25;
					if (Main.rand.Next(2) == 0)
					{
						num797 = 6;
					}
					Dust.NewDust(position, width, height, num797, 2 * hitDirection, -2f);
				}
				for (int num798 = 0; num798 < 50; num798++)
				{
					int num799 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2.5f);
					Dust dust126 = Main.dust[num799];
					Dust dust190 = dust126;
					dust190.velocity *= 6f;
					Main.dust[num799].noGravity = true;
				}
			}
			else if (type == 24)
			{
				if (life > 0)
				{
					for (int num800 = 0; (double)num800 < dmg / (double)lifeMax * 100.0; num800++)
					{
						int num801 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, velocity.X, velocity.Y, 100, default(Color), 2.5f);
						Main.dust[num801].noGravity = true;
					}
					return;
				}
				for (int num802 = 0; num802 < 50; num802++)
				{
					int num803 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, velocity.X, velocity.Y, 100, default(Color), 2.5f);
					Main.dust[num803].noGravity = true;
					Dust dust125 = Main.dust[num803];
					Dust dust190 = dust125;
					dust190.velocity *= 2f;
				}
				Gore.NewGore(position, velocity, 45);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 46);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 46);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 47);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 47);
			}
			else if (type == 25)
			{
				SoundEngine.PlaySound(in SoundID.Item10, position);
				for (int num804 = 0; num804 < 20; num804++)
				{
					int num806 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 2f);
					Main.dust[num806].noGravity = true;
					Dust dust124 = Main.dust[num806];
					Dust dust190 = dust124;
					dust190.velocity *= 2f;
					num806 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100);
					dust124 = Main.dust[num806];
					dust190 = dust124;
					dust190.velocity *= 2f;
				}
			}
			else if (type == 33)
			{
				SoundEngine.PlaySound(in SoundID.Item10, position);
				for (int num807 = 0; num807 < 20; num807++)
				{
					int num808 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 172, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 1.2f);
					Main.dust[num808].noGravity = true;
					Dust dust122 = Main.dust[num808];
					Dust dust190 = dust122;
					dust190.velocity *= 2f;
					num808 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 172, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 0.6f);
					dust122 = Main.dust[num808];
					dust190 = dust122;
					dust190.velocity *= 2f;
				}
			}
			else if (type == 26 || type == 27 || type == 28 || type == 29 || type == 73 || type == 111)
			{
				if (life > 0)
				{
					for (int num809 = 0; (double)num809 < dmg / (double)lifeMax * 100.0; num809++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num810 = 0; num810 < 50; num810++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				int num811 = 48;
				int num812 = 49;
				int num813 = 50;
				if (type == 111)
				{
					num811 = 623;
					num812 = 624;
					num813 = 625;
				}
				else if (type == 26)
				{
					num811 = 626;
					num812 = 627;
					num813 = 628;
				}
				else if (type == 73)
				{
					num811 = 629;
					num812 = 630;
					num813 = 631;
				}
				else if (type == 27)
				{
					num811 = 632;
					num812 = 633;
					num813 = 634;
				}
				else if (type == 28)
				{
					num811 = 635;
					num812 = 636;
					num813 = 637;
				}
				Gore.NewGore(position, velocity, num811, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num812, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, num812, scale);
				if (type == 111)
				{
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 131, scale);
				}
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, num813, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, num813, scale);
			}
			else if (type == 471)
			{
				if (life > 0)
				{
					for (int num814 = 0; (double)num814 < dmg / (double)lifeMax * 100.0; num814++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num815 = 0; num815 < 50; num815++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 675, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 676, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 677, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 678, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 678, scale);
			}
			else if (type == 472)
			{
				if (life > 0)
				{
					for (int num817 = 0; (double)num817 < dmg / (double)lifeMax * 100.0; num817++)
					{
						int num818 = Dust.NewDust(position, width, height, 5, hitDirection, -1f);
						if (Main.rand.Next(3) != 0)
						{
							Main.dust[num818].noGravity = true;
						}
						Main.dust[num818].alpha = 100;
					}
					return;
				}
				for (int num819 = 0; num819 < 50; num819++)
				{
					int num820 = Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					if (Main.rand.Next(3) != 0)
					{
						Main.dust[num820].noGravity = true;
					}
					Main.dust[num820].alpha = 100;
				}
				Gore.NewGore(position, velocity, 679, scale);
				Gore.NewGore(position, velocity, 680, scale);
			}
			else if (type == 480)
			{
				if (life > 0)
				{
					for (int num821 = 0; (double)num821 < dmg / (double)lifeMax * 100.0; num821++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num822 = 0; num822 < 50; num822++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 692, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 693, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 20f), velocity, 693, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 694, scale);
				Gore.NewGore(new Vector2(position.X, position.Y + 34f), velocity, 694, scale);
			}
			else if (type == 185)
			{
				if (life > 0)
				{
					for (int num823 = 0; (double)num823 < dmg / (double)lifeMax * 100.0; num823++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num824 = 0; num824 < 50; num824++)
				{
					Dust.NewDust(position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(position, velocity, 240, scale);
			}
			else if (type == 30 || type == 665)
			{
				SoundEngine.PlaySound(in SoundID.Item10, position);
				for (int num825 = 0; num825 < 20; num825++)
				{
					int num826 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 2f);
					Main.dust[num826].noGravity = true;
					Dust dust121 = Main.dust[num826];
					Dust dust190 = dust121;
					dust190.velocity *= 2f;
					num826 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100);
					dust121 = Main.dust[num826];
					dust190 = dust121;
					dust190.velocity *= 2f;
				}
			}
			else if (type == 42 || type == 176 || type == 205 || (type >= 231 && type <= 235))
			{
				if (life > 0)
				{
					for (int num828 = 0; (double)num828 < dmg / (double)lifeMax * 100.0; num828++)
					{
						Dust.NewDust(position, width, height, 18, hitDirection, -1f, alpha, this.color, scale);
					}
					return;
				}
				for (int num829 = 0; num829 < 50; num829++)
				{
					Dust.NewDust(position, width, height, 18, hitDirection, -2f, alpha, this.color, scale);
				}
				if (type == 205)
				{
					Gore.NewGore(position, velocity, 270, scale);
					Gore.NewGore(position, velocity, 271, scale);
					Gore.NewGore(position, velocity, 271, scale);
					Gore.NewGore(position, velocity, 272, scale);
				}
				else if (type == 176)
				{
					Gore.NewGore(position, velocity, 229, scale);
					Gore.NewGore(position, velocity, 230, scale);
				}
				else
				{
					Gore.NewGore(position, velocity, 70, scale);
					Gore.NewGore(position, velocity, 71, scale);
				}
			}
			else if (type == 43 || type == 56)
			{
				if (life > 0)
				{
					for (int num830 = 0; (double)num830 < dmg / (double)lifeMax * 100.0; num830++)
					{
						Dust.NewDust(position, width, height, 40, hitDirection, -1f, alpha, this.color, 1.2f);
					}
					return;
				}
				for (int num831 = 0; num831 < 50; num831++)
				{
					Dust.NewDust(position, width, height, 40, hitDirection, -2f, alpha, this.color, 1.2f);
				}
				Gore.NewGore(position, velocity, 72);
				Gore.NewGore(position, velocity, 72);
			}
			else if (type == 175)
			{
				if (life > 0)
				{
					for (int num832 = 0; (double)num832 < dmg / (double)lifeMax * 100.0; num832++)
					{
						Dust.NewDust(position, width, height, 40, hitDirection, -1f, alpha, this.color, 1.2f);
					}
					return;
				}
				for (int num833 = 0; num833 < 50; num833++)
				{
					Dust.NewDust(position, width, height, 40, hitDirection, -2f, alpha, this.color, 1.2f);
				}
				Gore.NewGore(position, velocity, 227);
				Gore.NewGore(position, velocity, 228);
			}
			else if (type == 48)
			{
				if (life > 0)
				{
					for (int num834 = 0; (double)num834 < dmg / (double)lifeMax * 100.0; num834++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num835 = 0; num835 < 50; num835++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, velocity, 80);
				Gore.NewGore(position, velocity, 81);
			}
			else if (type == 62 || type == 66)
			{
				if (life > 0)
				{
					for (int num836 = 0; (double)num836 < dmg / (double)lifeMax * 100.0; num836++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num837 = 0; num837 < 50; num837++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, velocity, 93);
				Gore.NewGore(position, velocity, 94);
				Gore.NewGore(position, velocity, 94);
			}
			else
			{
				if (type != 156)
				{
					return;
				}
				if (life > 0)
				{
					for (int num839 = 0; (double)num839 < dmg / (double)lifeMax * 100.0; num839++)
					{
						Dust.NewDust(position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num840 = 0; num840 < 50; num840++)
				{
					Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(position, velocity, 184);
				Gore.NewGore(position, velocity, 185);
				Gore.NewGore(position, velocity, 185);
			}
		}
	}

	/// <summary>
	/// Returns the number of active NPC in the world of the given NPC type (<see cref="F:Terraria.NPC.type" />).
	/// </summary>
	/// <param name="Type"></param>
	/// <returns></returns>
	public static int CountNPCS(int Type)
	{
		int num = 0;
		for (int i = 0; i < 200; i++)
		{
			if (Main.npc[i].active && Main.npc[i].type == Type)
			{
				num++;
			}
		}
		return num;
	}

	public static bool AnyHelpfulFairies()
	{
		for (int i = 0; i < 200; i++)
		{
			if (Main.npc[i].active && (Main.npc[i].type == 583 || Main.npc[i].type == 584 || Main.npc[i].type == 585) && Main.npc[i].ai[2] > 1f)
			{
				return true;
			}
		}
		return false;
	}

	/// <summary>
	/// Returns true if there are any active NPC in the world of the given NPC type (<see cref="F:Terraria.NPC.type" />).
	/// </summary>
	/// <param name="Type"></param>
	/// <returns></returns>
	public static bool AnyNPCs(int Type)
	{
		for (int i = 0; i < 200; i++)
		{
			if (Main.npc[i].active && Main.npc[i].type == Type)
			{
				return true;
			}
		}
		return false;
	}

	/// <summary>
	/// Returns the index within <see cref="F:Terraria.Main.npc" /> of the the first active NPC in the world of the given NPC type (<see cref="F:Terraria.NPC.type" />).
	/// </summary>
	/// <param name="Type"></param>
	/// <returns></returns>
	public static int FindFirstNPC(int Type)
	{
		for (int i = 0; i < 200; i++)
		{
			if (Main.npc[i].active && Main.npc[i].type == Type)
			{
				return i;
			}
		}
		return -1;
	}

	public static bool NearSpikeBall(int x, int y)
	{
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		Rectangle rectangle = default(Rectangle);
		((Rectangle)(ref rectangle))._002Ector(x * 16 - 300, y * 16 - 300, 600, 600);
		Rectangle rectangle2 = default(Rectangle);
		for (int i = 0; i < 200; i++)
		{
			if (Main.npc[i].active && Main.npc[i].aiStyle == 20)
			{
				((Rectangle)(ref rectangle2))._002Ector((int)Main.npc[i].ai[1], (int)Main.npc[i].ai[2], 20, 20);
				if (((Rectangle)(ref rectangle)).Intersects(rectangle2))
				{
					return true;
				}
			}
		}
		return false;
	}

	public int FindBuffIndex(int type)
	{
		if (buffImmune[type])
		{
			return -1;
		}
		for (int i = 0; i < maxBuffs; i++)
		{
			if (buffTime[i] >= 1 && buffType[i] == type)
			{
				return i;
			}
		}
		return -1;
	}

	/// <summary>
	/// Gives this NPC the provided buff. This accounts for if the NPC is immune to the buff.
	/// <br /> If the NPC already has the buff, the re-apply logic will happen. Vanilla buff types are found in <see cref="T:Terraria.ID.BuffID" /> and modded buffs are typically retrieved using <see cref="M:Terraria.ModLoader.ModContent.BuffType``1" />.
	/// <br /> The quiet parameter will determine if the network sync message should happen. This should always stay false.
	/// </summary>
	/// <param name="type">The buff type</param>
	/// <param name="time">The desired buff time in ticks. 60 ticks is 1 second</param>
	/// <param name="quiet">If true, the network sync message is skipped.</param>
	public void AddBuff(int type, int time, bool quiet = false)
	{
		if (buffImmune[type])
		{
			return;
		}
		if (!quiet)
		{
			if (Main.netMode == 1)
			{
				NetMessage.SendData(53, -1, -1, null, whoAmI, type, time);
			}
			else if (Main.netMode == 2)
			{
				NetMessage.SendData(54, -1, -1, null, whoAmI);
			}
		}
		int num = -1;
		for (int i = 0; i < maxBuffs; i++)
		{
			if (buffType[i] == type)
			{
				if (!BuffLoader.ReApply(type, this, time, i) && buffTime[i] < time)
				{
					buffTime[i] = time;
				}
				return;
			}
		}
		while (num == -1)
		{
			int num2 = -1;
			for (int j = 0; j < maxBuffs; j++)
			{
				if (!Main.debuff[buffType[j]])
				{
					num2 = j;
					break;
				}
			}
			if (num2 == -1)
			{
				return;
			}
			for (int k = num2; k < maxBuffs; k++)
			{
				if (buffType[k] == 0)
				{
					num = k;
					break;
				}
			}
			if (num == -1)
			{
				DelBuff(num2);
			}
		}
		buffType[num] = type;
		buffTime[num] = time;
	}

	/// <summary>
	/// Removes the buff type and shuffles the remaining buff indexes down to fill the gap. Note that only buffs contained in <see cref="F:Terraria.ID.BuffID.Sets.CanBeRemovedByNetMessage" /> can be removed with this method. The intention is that those specific buffs are "owned" by the player who inflicts them, so they can be freely removed by multiplayer clients.
	/// <br /><br />  In all other cases code running on the server or in single player is in charge of the NPC debuffs and <see cref="M:Terraria.NPC.DelBuff(System.Int32)" /> should be used directly.
	/// </summary>
	/// <param name="buffTypeToRemove">The buff type</param>
	public void RequestBuffRemoval(int buffTypeToRemove)
	{
		if (buffTypeToRemove < 0 || !BuffID.Sets.CanBeRemovedByNetMessage[buffTypeToRemove])
		{
			return;
		}
		int num = FindBuffIndex(buffTypeToRemove);
		if (num != -1)
		{
			DelBuff(num);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(137, -1, -1, null, whoAmI, buffTypeToRemove);
			}
		}
	}

	/// <summary>
	/// Removes the buff at the provided index and shuffles the remaining buff indexes down to fill the gap. The buff types and times will then be synced to clients. This method should only be called on the server or in single player. 
	/// </summary>
	/// <param name="buffIndex">The index of the buff to remove.</param>
	public void DelBuff(int buffIndex)
	{
		buffTime[buffIndex] = 0;
		buffType[buffIndex] = 0;
		for (int i = 0; i < maxBuffs - 1; i++)
		{
			if (buffTime[i] == 0 || buffType[i] == 0)
			{
				for (int j = i + 1; j < maxBuffs; j++)
				{
					buffTime[j - 1] = buffTime[j];
					buffType[j - 1] = buffType[j];
					buffTime[j] = 0;
					buffType[j] = 0;
				}
			}
		}
		if (Main.netMode == 2)
		{
			NetMessage.SendData(54, -1, -1, null, whoAmI);
		}
	}

	public Rectangle getRect()
	{
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		return new Rectangle((int)position.X, (int)position.Y, width, height);
	}

	public bool CanBeChasedBy(object attacker = null, bool ignoreDontTakeDamage = false)
	{
		if (active && chaseable && lifeMax > 5 && (!dontTakeDamage || ignoreDontTakeDamage) && !friendly)
		{
			return !immortal;
		}
		return false;
	}

	public bool HittableForOnHitRewards()
	{
		if (CountsAsACritter || immortal)
		{
			return false;
		}
		return true;
	}

	public void moneyPing(Vector2 pos)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		SoundEngine.PlaySound(38, pos);
		int num = 244;
		if (extraValue >= 1000000)
		{
			num = 247;
		}
		else if (extraValue >= 10000)
		{
			num = 246;
		}
		else if (extraValue >= 100)
		{
			num = 245;
		}
		for (int i = 0; i < 20; i++)
		{
			int num2 = Dust.NewDust(pos - new Vector2(1f, 2f), 10, 14, num, 0f, 0f, 254, default(Color), 0.25f);
			Dust obj = Main.dust[num2];
			obj.velocity *= 0.2f;
		}
	}

	public void IdleSounds()
	{
		if (!(shimmerTransparency > 0f))
		{
			if ((type == 239 || type == 240) && Main.rand.Next(900) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(24, 26));
			}
			else if ((type == 62 || type == 156) && Main.rand.Next(700) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(26, 30));
			}
			else if (type == 177 && Main.rand.Next(600) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(30, 32));
			}
			else if (type == 226 && Main.rand.Next(800) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 32);
			}
			else if (type == 153 && Main.rand.Next(1000) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 33);
			}
			else if (wet && (type == 63 || type == 64 || type == 103) && Main.rand.Next(1000) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(34, 36));
			}
			else if ((type == 198 || type == 199) && Main.rand.Next(1000) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(36, 38));
			}
			else if ((type == 170 || type == 180 || type == 171) && Main.rand.Next(600) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(38, 41));
			}
			else if (type == 250 && Main.rand.Next(700) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(41, 44));
			}
			else if (type == 580 && Main.rand.Next(800) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 44);
			}
			else if (type == 582 && Main.rand.Next(800) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 44);
			}
			else if (type == 581 && Main.rand.Next(800) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(44, 47));
			}
			else if (type == 508 && Main.rand.Next(800) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 44);
			}
			else if (type == 509 && Main.rand.Next(800) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(44, 47));
			}
			else if (type == 494 && Main.rand.Next(600) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 47);
			}
			else if (type == 467 && Main.rand.Next(700) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(48, 50));
			}
			else if (type == 468 && Main.rand.Next(700) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(50, 53));
			}
			else if (type == 288 && Main.rand.Next(400) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(53, 55));
			}
			else if ((type == 524 || type == 525 || type == 526 || type == 527) && Main.rand.Next(700) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(55, 57));
			}
			else if ((type == 496 || type == 497) && Main.rand.Next(600) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(57, 59));
			}
			else if (type == 389 && Main.rand.Next(800) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(59, 61));
			}
			else if (type == 471 && Main.rand.Next(600) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(61, 63));
			}
			else if (type == 482 && Main.rand.Next(600) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(63, 66));
			}
			else if (type == 388 && Main.rand.Next(700) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(66, 69));
			}
			else if (type == 520 && Main.rand.Next(800) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(69, 73));
			}
			else if (type == 477 && Main.rand.Next(600) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 73);
			}
			else if (type == 258 && Main.rand.Next(700) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(74, 78));
			}
			else if (type == 252 && Main.rand.Next(700) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 78);
			}
			else if (type == 469 && Main.rand.Next(700) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(79, 81));
			}
			else if ((type == 253 || type == 82) && Main.rand.Next(700) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(81, 84));
			}
			else if (type >= 498 && type <= 506 && Main.rand.Next(600) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(84, 86));
			}
			else if (type == 391 && Main.rand.Next(700) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(86, 87));
			}
		}
	}

	public void UpdateAltTexture()
	{
		if (townNPC)
		{
			int oldAltTexture = altTexture;
			bool flag = BirthdayParty.PartyIsUp || ForcePartyHatOn;
			if (type == 441 || type == 453 || type == 633)
			{
				flag = false;
			}
			altTexture = 0;
			if (flag)
			{
				altTexture = 1;
			}
			if (type == 633 && ShouldBestiaryGirlBeLycantrope())
			{
				altTexture = 2;
			}
			if (!ForcePartyHatOn)
			{
				MakeTransitionEffectsForTextureChanges(oldAltTexture, altTexture);
			}
		}
	}

	private void MakeTransitionEffectsForTextureChanges(int oldAltTexture, int currentAltTexture)
	{
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		if (oldAltTexture == 0 && currentAltTexture == 1)
		{
			for (int i = 0; i < 20; i++)
			{
				Dust.NewDust(position, width, height / 4, 139 + Main.rand.Next(4), 0f, -2f);
			}
		}
		if (oldAltTexture == 1 && currentAltTexture == 0)
		{
			Utils.PoofOfSmoke(position);
		}
		if (type != 633)
		{
			return;
		}
		int num = 2;
		if ((oldAltTexture == 0 && currentAltTexture == num) || (oldAltTexture == num && currentAltTexture == 0))
		{
			for (int j = 0; j < 20; j++)
			{
				Dust dust = Dust.NewDustDirect(position, width, height, 262, 0f, -2f);
				dust.noGravity = true;
				dust.scale = 2f;
			}
		}
	}

	public static void ResetNetOffsets()
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		offSetDelayTime = 180;
		for (int i = 0; i < 200; i++)
		{
			NPC obj = Main.npc[i];
			obj.netOffset *= 0f;
		}
	}

	public void UpdateNPC(int i)
	{
		whoAmI = i;
		if (!active)
		{
			return;
		}
		using (IEntitySource.PushFallback(thisEntitySourceCache))
		{
			UpdateNPC_Inner(i);
		}
	}

	private void UpdateNPC_Inner(int i)
	{
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0144: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_0155: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0160: Unknown result type (might be due to invalid IL or missing references)
		//IL_0165: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_017a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0184: Unknown result type (might be due to invalid IL or missing references)
		//IL_0189: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01db: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_0200: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_020f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0527: Unknown result type (might be due to invalid IL or missing references)
		//IL_052d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0532: Unknown result type (might be due to invalid IL or missing references)
		//IL_0537: Unknown result type (might be due to invalid IL or missing references)
		//IL_053d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0561: Unknown result type (might be due to invalid IL or missing references)
		//IL_0567: Unknown result type (might be due to invalid IL or missing references)
		//IL_057e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0588: Unknown result type (might be due to invalid IL or missing references)
		//IL_058d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0594: Unknown result type (might be due to invalid IL or missing references)
		//IL_059a: Unknown result type (might be due to invalid IL or missing references)
		//IL_059f: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_078a: Unknown result type (might be due to invalid IL or missing references)
		//IL_078f: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0834: Unknown result type (might be due to invalid IL or missing references)
		//IL_0846: Unknown result type (might be due to invalid IL or missing references)
		if (offSetDelayTime > 0)
		{
			netOffset *= 0f;
		}
		else if (Main.netMode == 2)
		{
			netOffset *= 0f;
		}
		else if (Main.multiplayerNPCSmoothingRange <= 0)
		{
			netOffset *= 0f;
		}
		else if (netOffset != new Vector2(0f, 0f))
		{
			if (NPCID.Sets.NoMultiplayerSmoothingByType[type])
			{
				netOffset *= 0f;
			}
			else if (aiStyle >= 0 && aiStyle < NPCLoader.NPCCount && NPCID.Sets.NoMultiplayerSmoothingByAI[aiStyle])
			{
				netOffset *= 0f;
			}
			else
			{
				float num = 2f;
				float num4 = Main.multiplayerNPCSmoothingRange;
				float num5 = ((Vector2)(ref netOffset)).Length();
				if (num5 > num4)
				{
					((Vector2)(ref netOffset)).Normalize();
					netOffset *= num4;
					num5 = ((Vector2)(ref netOffset)).Length();
				}
				num += num5 / num4 * num;
				Vector2 vector = netOffset;
				((Vector2)(ref vector)).Normalize();
				vector *= num;
				netOffset -= vector;
				if (((Vector2)(ref netOffset)).Length() < num)
				{
					netOffset *= 0f;
				}
				if (townNPC)
				{
					if (Vector2.Distance(position, new Vector2((float)(homeTileX * 16 + 8 - width / 2), (float)(homeTileY * 16 - height) - 0.1f)) < 1f)
					{
						netOffset *= 0f;
					}
					if (ai[0] == 25f)
					{
						netOffset *= 0f;
					}
				}
			}
		}
		UpdateAltTexture();
		if (type == 368)
		{
			travelNPC = true;
		}
		if (Main.netMode != 2)
		{
			UpdateNPC_CastLights();
		}
		UpdateNPC_TeleportVisuals();
		UpdateNPC_CritterSounds();
		TrySyncingUniqueTownNPCData(i);
		if (aiStyle == 7 && position.Y > Main.bottomWorld - 640f + (float)height && Main.netMode != 1 && !Main.xMas)
		{
			StrikeNPCNoInteraction(9999, 0f, 0);
			if (Main.netMode == 2)
			{
				NetMessage.SendData(28, -1, -1, null, whoAmI, 9999f);
			}
		}
		if (Main.netMode == 1)
		{
			int num6 = (int)(position.X + (float)(width / 2)) / 16;
			int num7 = (int)(position.Y + (float)(height / 2)) / 16;
			if (!Main.sectionManager.TilesLoaded(num6 - 3, num7 - 3, num6 + 3, num7 + 3))
			{
				return;
			}
		}
		UpdateNPC_BuffFlagsReset();
		NPCLoader.ResetEffects(this);
		UpdateNPC_UpdateGravity();
		UpdateNPC_BuffSetFlags();
		UpdateNPC_SoulDrainDebuff();
		UpdateNPC_BuffClearExpiredBuffs();
		UpdateNPC_BuffApplyDOTs();
		UpdateNPC_BuffApplyVFX();
		UpdateNPC_BloodMoonTransformations();
		if (soundDelay > 0)
		{
			soundDelay--;
		}
		if (life <= 0)
		{
			active = false;
			UpdateNetworkCode(i);
			netUpdate = false;
			justHit = false;
			return;
		}
		oldTarget = target;
		oldDirection = direction;
		oldDirectionY = directionY;
		float num8 = 1f + Math.Abs(velocity.X) / 3f;
		if (gfxOffY > 0f)
		{
			gfxOffY -= num8 * stepSpeed;
			if (gfxOffY < 0f)
			{
				gfxOffY = 0f;
			}
		}
		else if (gfxOffY < 0f)
		{
			gfxOffY += num8 * stepSpeed;
			if (gfxOffY > 0f)
			{
				gfxOffY = 0f;
			}
		}
		if (gfxOffY > 16f)
		{
			gfxOffY = 16f;
		}
		if (gfxOffY < -16f)
		{
			gfxOffY = -16f;
		}
		TryPortalJumping();
		IdleSounds();
		AI();
		SubAI_HandleTemporaryCatchableNPCPlayerInvulnerability();
		if (Main.netMode != 2 && extraValue > 0)
		{
			int num9 = 244;
			float num10 = 30f;
			if (extraValue >= 1000000)
			{
				num9 = 247;
				num10 *= 0.25f;
			}
			else if (extraValue >= 10000)
			{
				num9 = 246;
				num10 *= 0.5f;
			}
			else if (extraValue >= 100)
			{
				num9 = 245;
				num10 *= 0.75f;
			}
			if (Main.rand.Next((int)num10) == 0)
			{
				position += netOffset;
				int num11 = Dust.NewDust(position, width, height, num9, 0f, 0f, 254, default(Color), 0.25f);
				Dust obj = Main.dust[num11];
				obj.velocity *= 0.1f;
				position -= netOffset;
			}
		}
		for (int j = 0; j < 256; j++)
		{
			if (immune[j] > 0)
			{
				immune[j]--;
			}
		}
		if (!noGravity && !noTileCollide)
		{
			int num2 = (int)(position.X + (float)(width / 2)) / 16;
			int num3 = (int)(position.Y + (float)(height / 2)) / 16;
			if (WorldGen.InWorld(num2, num3) && Main.tile[num2, num3] == null)
			{
				gravity = 0f;
				velocity.X = 0f;
				velocity.Y = 0f;
			}
		}
		if (!noGravity)
		{
			velocity.Y += gravity;
			if (velocity.Y > maxFallSpeed)
			{
				velocity.Y = maxFallSpeed;
			}
		}
		if ((double)velocity.X < 0.005 && (double)velocity.X > -0.005)
		{
			velocity.X = 0f;
		}
		if (Main.netMode != 1 && type != 37 && (friendly || NPCID.Sets.TakesDamageFromHostilesWithoutBeingFriendly[type]))
		{
			if (townNPC)
			{
				CheckDrowning();
			}
			CheckLifeRegen();
			GetHurtByOtherNPCs(NPCID.Sets.AllNPCs);
		}
		if (Main.netMode != 1 && (npcsFoundForCheckActive[210] || npcsFoundForCheckActive[211]) && !NPCID.Sets.HurtingBees[type])
		{
			GetHurtByOtherNPCs(NPCID.Sets.HurtingBees);
		}
		if (!noTileCollide)
		{
			UpdateCollision();
		}
		else
		{
			oldPosition = position;
			oldDirection = direction;
			position += velocity;
			if (onFire && boss && Main.netMode != 1 && Collision.WetCollision(position, width, height))
			{
				for (int k = 0; k < maxBuffs; k++)
				{
					if (buffType[k] == 24)
					{
						DelBuff(k);
					}
				}
			}
		}
		if (Main.netMode != 1 && !noTileCollide && lifeMax > 1 && Collision.SwitchTiles(position, width, height, oldPosition, 2) && (type == 46 || type == 148 || type == 149 || type == 303 || type == 361 || type == 362 || type == 364 || type == 366 || type == 367 || (type >= 442 && type <= 448) || type == 602 || type == 608 || type == 614 || type == 687))
		{
			ai[0] = 1f;
			ai[1] = 400f;
			ai[2] = 0f;
		}
		FindFrame();
		UpdateNPC_UpdateTrails();
		UpdateNetworkCode(i);
		CheckActive();
		netUpdate = false;
		justHit = false;
	}

	private void SubAI_HandleTemporaryCatchableNPCPlayerInvulnerability()
	{
		if (type >= 0 && catchableNPCTempImmunityCounter > 0)
		{
			if (releaseOwner != 255 || SpawnedFromStatue)
			{
				catchableNPCTempImmunityCounter = 0;
			}
			bool num = friendly;
			catchableNPCTempImmunityCounter--;
			if (catchableNPCTempImmunityCounter > 0)
			{
				friendly = true;
			}
			else
			{
				friendly = catchableNPCOriginallyFriendly;
			}
			if (num != friendly)
			{
				netUpdate = true;
			}
		}
	}

	private void TrySyncingUniqueTownNPCData(int npcIndex)
	{
		if (Main.netMode == 1 && needsUniqueInfoUpdate && isLikeATownNPC)
		{
			needsUniqueInfoUpdate = false;
			NetMessage.SendData(56, -1, -1, null, npcIndex);
		}
	}

	private void UpdateNetworkCode(int i)
	{
		//IL_01e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e0: Unknown result type (might be due to invalid IL or missing references)
		if (!active)
		{
			netUpdate = true;
		}
		if (Main.netMode != 2)
		{
			return;
		}
		if (Main.npcStreamSpeed > 0 && !townNPC && NPCID.Sets.UsesMultiplayerProximitySyncing[type] && (double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) >= 0.5)
		{
			netStream++;
			if (netStream >= Main.npcStreamSpeed)
			{
				for (int j = 0; j < 255; j++)
				{
					if (Main.player[j].active)
					{
						netStream = 0;
						float num = Math.Abs(base.Center.X - Main.player[j].Center.X) + Math.Abs(base.Center.Y - Main.player[j].Center.Y);
						if (num < 250f)
						{
							streamPlayer[j] -= 8;
						}
						else if (num < 500f)
						{
							streamPlayer[j] -= 4;
						}
						else if (num < 1000f)
						{
							streamPlayer[j] -= 2;
						}
						else if (num < 1500f)
						{
							streamPlayer[j]--;
						}
						if (streamPlayer[j] <= 0)
						{
							streamPlayer[j] = 8;
							NetMessage.SendData(23, j, -1, null, i);
						}
					}
				}
			}
		}
		if (townNPC || aiStyle == 16)
		{
			netSpam = 0;
		}
		if (netUpdate2)
		{
			netUpdate = true;
		}
		if (!active)
		{
			netSpam = 0;
		}
		if (netUpdate)
		{
			if (boss)
			{
				_ = oldPosition - position;
				if (netSpam <= 15)
				{
					netSpam += 5;
					NetMessage.SendData(23, -1, -1, null, i);
					netUpdate2 = false;
				}
				else
				{
					netUpdate2 = true;
				}
			}
			else if (netSpam <= 90)
			{
				netSpam += 30;
				NetMessage.SendData(23, -1, -1, null, i);
				netUpdate2 = false;
			}
			else
			{
				netUpdate2 = true;
			}
		}
		if (netSpam > 0)
		{
			netSpam--;
		}
		if (active && townNPC && TypeToDefaultHeadIndex(type) > 0)
		{
			if (homeless != oldHomeless || homeTileX != oldHomeTileX || homeTileY != oldHomeTileY)
			{
				byte householdStatus = WorldGen.TownManager.GetHouseholdStatus(this);
				NetMessage.SendData(60, -1, -1, null, i, Main.npc[i].homeTileX, Main.npc[i].homeTileY, (int)householdStatus);
			}
			oldHomeless = homeless;
			oldHomeTileX = homeTileX;
			oldHomeTileY = homeTileY;
		}
	}

	internal static IEntitySource GetSpawnSource_NPCRelease(int whoReleasedIt)
	{
		return Main.player[whoReleasedIt].GetSource_ReleaseEntity();
	}

	internal static IEntitySource GetSpawnSource_NPCCatch(int whoCaughtIt, Entity caughtEntity)
	{
		return Main.player[whoCaughtIt].GetSource_CatchEntity(caughtEntity);
	}

	internal static IEntitySource GetSpawnSourceForNaturalSpawn()
	{
		return Entity.GetSource_NaturalSpawn();
	}

	internal static IEntitySource GetSpawnSourceForTownSpawn()
	{
		return Entity.GetSource_TownSpawn();
	}

	internal IEntitySource GetItemSource_Misc(int itemSourceId)
	{
		return GetSource_Misc(ItemSourceID.ToContextString(itemSourceId));
	}

	internal IEntitySource GetSpawnSource_NPCHurt()
	{
		return new EntitySource_Parent(this);
	}

	internal IEntitySource GetSpawnSource_ForProjectile()
	{
		return GetSource_FromAI();
	}

	internal IEntitySource GetSpawnSourceForProjectileNPC()
	{
		return GetSource_FromAI();
	}

	internal IEntitySource GetSpawnSourceForNPCFromNPCAI()
	{
		return GetSource_FromAI();
	}

	internal IEntitySource GetItemSource_Loot()
	{
		return GetSource_Loot();
	}

	private void UpdateNPC_UpdateTrails()
	{
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0217: Unknown result type (might be due to invalid IL or missing references)
		//IL_021d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0222: Unknown result type (might be due to invalid IL or missing references)
		//IL_0227: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_0157: Unknown result type (might be due to invalid IL or missing references)
		//IL_015d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_0273: Unknown result type (might be due to invalid IL or missing references)
		//IL_0278: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0315: Unknown result type (might be due to invalid IL or missing references)
		//IL_031b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0320: Unknown result type (might be due to invalid IL or missing references)
		//IL_0325: Unknown result type (might be due to invalid IL or missing references)
		//IL_034b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0350: Unknown result type (might be due to invalid IL or missing references)
		//IL_0368: Unknown result type (might be due to invalid IL or missing references)
		//IL_036e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0373: Unknown result type (might be due to invalid IL or missing references)
		//IL_0378: Unknown result type (might be due to invalid IL or missing references)
		//IL_039e: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03da: Unknown result type (might be due to invalid IL or missing references)
		//IL_03df: Unknown result type (might be due to invalid IL or missing references)
		//IL_0193: Unknown result type (might be due to invalid IL or missing references)
		//IL_0199: Unknown result type (might be due to invalid IL or missing references)
		//IL_019e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a3: Unknown result type (might be due to invalid IL or missing references)
		int num = NPCID.Sets.TrailingMode[type];
		if (num == 0)
		{
			if (localAI[3] <= 0f)
			{
				localAI[3] = 2f;
				for (int num3 = oldPos.Length - 1; num3 > 0; num3--)
				{
					oldPos[num3] = oldPos[num3 - 1];
				}
				oldPos[0] = position + netOffset;
			}
			localAI[3] -= 1f;
		}
		if (num == 1)
		{
			for (int num4 = oldPos.Length - 1; num4 > 0; num4--)
			{
				oldPos[num4] = oldPos[num4 - 1];
			}
			oldPos[0] = position + netOffset;
		}
		if (num == 2)
		{
			if ((int)ai[0] == 4 || ai[0] == 5f || ai[0] == 6f)
			{
				for (int num5 = oldPos.Length - 1; num5 > 0; num5--)
				{
					oldPos[num5] = oldPos[num5 - 1];
					oldRot[num5] = oldRot[num5 - 1];
				}
				oldPos[0] = position + netOffset;
				oldRot[0] = rotation;
			}
			else
			{
				for (int num6 = oldPos.Length - 1; num6 >= 0; num6--)
				{
					oldPos[num6] = position + netOffset;
					oldRot[num6] = rotation;
				}
			}
		}
		if (num == 3)
		{
			for (int num7 = oldPos.Length - 1; num7 > 0; num7--)
			{
				oldPos[num7] = oldPos[num7 - 1];
				oldRot[num7] = oldRot[num7 - 1];
			}
			oldPos[0] = position + netOffset;
			oldRot[0] = rotation;
		}
		switch (num)
		{
		case 4:
		{
			for (int num10 = oldPos.Length - 1; num10 > 0; num10--)
			{
				oldPos[num10] = oldPos[num10 - 1];
				Lighting.AddLight((int)position.X / 16, (int)position.Y / 16, 0.3f, 0f, 0.2f);
			}
			oldPos[0] = position + netOffset;
			break;
		}
		case 5:
		{
			for (int num9 = oldPos.Length - 1; num9 > 0; num9--)
			{
				oldPos[num9] = oldPos[num9 - 1];
			}
			oldPos[0] = position + netOffset;
			break;
		}
		case 6:
		{
			for (int num2 = oldPos.Length - 1; num2 > 0; num2--)
			{
				oldPos[num2] = oldPos[num2 - 1];
			}
			oldPos[0] = position + netOffset;
			break;
		}
		case 7:
		{
			for (int num8 = oldPos.Length - 1; num8 > 0; num8--)
			{
				oldPos[num8] = oldPos[num8 - 1];
				oldRot[num8] = oldRot[num8 - 1];
			}
			oldPos[0] = position + netOffset;
			oldRot[0] = rotation;
			break;
		}
		}
	}

	/// <summary>
	/// Updates <see cref="P:Terraria.NPC.maxFallSpeed" /> and <see cref="P:Terraria.NPC.gravity" /> in line with vanilla behavior and resets <see cref="F:Terraria.NPC.GravityMultiplier" />. Behavior can be modified with <see cref="F:Terraria.NPC.GravityIgnoresType" />, <see cref="F:Terraria.NPC.GravityIgnoresSpace" />, and <see cref="F:Terraria.NPC.GravityIgnoresLiquid" />.<br />
	/// Certain NPC type ids may also cap velocity, see <see cref="F:Terraria.NPC.GravityIgnoresType" />.
	/// </summary>
	private void UpdateNPC_UpdateGravity()
	{
		maxFallSpeed = 10f;
		gravity = 0.3f;
		if (!GravityIgnoresType)
		{
			if (type == 258)
			{
				gravity = 0.1f;
				if (velocity.Y > 3f)
				{
					velocity.Y = 3f;
				}
			}
			else if (type == 425 && ai[2] == 1f)
			{
				gravity = 0.1f;
			}
			else if ((type == 576 || type == 577) && ai[0] > 0f && ai[1] == 2f)
			{
				gravity = 0.45f;
				if (velocity.Y > 32f)
				{
					velocity.Y = 32f;
				}
			}
			else if (type == 427 && ai[2] == 1f)
			{
				gravity = 0.1f;
				if (velocity.Y > 4f)
				{
					velocity.Y = 4f;
				}
			}
			else if (type == 426)
			{
				gravity = 0.1f;
				if (velocity.Y > 3f)
				{
					velocity.Y = 3f;
				}
			}
			else if (type == 541)
			{
				gravity = 0f;
			}
			else if (aiStyle == 7 && ai[0] == 25f)
			{
				gravity = 0f;
			}
		}
		if (!GravityIgnoresSpace)
		{
			float num = (float)Main.maxTilesX / 4200f;
			num *= num;
			float num2 = (float)((double)(position.Y / 16f - (60f + 10f * num)) / (Main.worldSurface / 6.0));
			if ((double)num2 < 0.25)
			{
				num2 = 0.25f;
			}
			if (num2 > 1f)
			{
				num2 = 1f;
			}
			gravity *= num2;
		}
		if (!GravityIgnoresLiquid && wet)
		{
			if (shimmerWet)
			{
				gravity = 0.15f;
				maxFallSpeed = 5.5f;
			}
			else if (honeyWet)
			{
				gravity = 0.1f;
				maxFallSpeed = 4f;
			}
			else
			{
				gravity = 0.2f;
				maxFallSpeed = 7f;
			}
		}
	}

	private void UpdateNPC_SoulDrainDebuff()
	{
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0133: Unknown result type (might be due to invalid IL or missing references)
		//IL_014a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0154: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		if (!soulDrain)
		{
			return;
		}
		int num = 1100;
		for (int i = 0; i < 255; i++)
		{
			if (!Main.player[i].active || Main.player[i].dead)
			{
				continue;
			}
			Vector2 val = base.Center - Main.player[i].position;
			if (((Vector2)(ref val)).Length() < (float)num && Main.player[i].inventory[Main.player[i].selectedItem].type == 3006 && Main.player[i].itemAnimation > 0)
			{
				if (i == Main.myPlayer)
				{
					Main.player[i].soulDrain++;
				}
				if (Main.rand.Next(3) != 0)
				{
					Vector2 center = base.Center;
					center.X += (float)Main.rand.Next(-100, 100) * 0.05f;
					center.Y += (float)Main.rand.Next(-100, 100) * 0.05f;
					center += velocity;
					int num2 = Dust.NewDust(center, 1, 1, 235);
					Dust obj = Main.dust[num2];
					obj.velocity *= 0f;
					Main.dust[num2].scale = (float)Main.rand.Next(70, 85) * 0.01f;
					Main.dust[num2].fadeIn = i + 1;
				}
			}
		}
	}

	public static Color buffColor(Color newColor, float R, float G, float B, float A)
	{
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		((Color)(ref newColor)).R = (byte)((float)(int)((Color)(ref newColor)).R * R);
		((Color)(ref newColor)).G = (byte)((float)(int)((Color)(ref newColor)).G * G);
		((Color)(ref newColor)).B = (byte)((float)(int)((Color)(ref newColor)).B * B);
		((Color)(ref newColor)).A = (byte)((float)(int)((Color)(ref newColor)).A * A);
		return newColor;
	}

	public bool CanApplyHunterPotionEffects()
	{
		return Main.player[Main.myPlayer].detectCreature;
	}

	public Color GetNPCColorTintedByBuffs(Color npcColor)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_013e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0143: Unknown result type (might be due to invalid IL or missing references)
		//IL_0148: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fb: Unknown result type (might be due to invalid IL or missing references)
		if (!canDisplayBuffs)
		{
			return npcColor;
		}
		float num = 1f;
		float num2 = 1f;
		float num3 = 1f;
		float a = 1f;
		if (poisoned)
		{
			num *= 0.65f;
			num3 *= 0.75f;
			npcColor = buffColor(npcColor, num, num2, num3, a);
		}
		if (venom)
		{
			num2 *= 0.45f;
			num *= 0.75f;
			npcColor = buffColor(npcColor, num, num2, num3, a);
		}
		if (midas)
		{
			num3 *= 0.3f;
			num *= 0.85f;
			npcColor = buffColor(npcColor, num, num2, num3, a);
		}
		if (betsysCurse)
		{
			num *= 0.8f;
			num2 *= 0.6f;
			npcColor = buffColor(npcColor, num, num2, num3, a);
		}
		if (oiled)
		{
			num *= 0.4f;
			num2 *= 0.4f;
			num3 *= 0.4f;
			npcColor = buffColor(npcColor, num, num2, num3, a);
		}
		if (stinky)
		{
			num *= 0.7f;
			num3 *= 0.55f;
			npcColor = buffColor(npcColor, num, num2, num3, a);
		}
		if (drippingSlime)
		{
			num *= 0.8f;
			num2 *= 0.8f;
			npcColor = buffColor(npcColor, num, num2, num3, a);
		}
		if (drippingSparkleSlime)
		{
			num3 *= 0.85f;
			num2 *= 0.75f;
			npcColor = buffColor(npcColor, num, num2, num3, a);
		}
		if (ichor)
		{
			((Color)(ref npcColor))._002Ector(255, 255, 0, 255);
		}
		if (CanApplyHunterPotionEffects() && lifeMax > 1)
		{
			byte b;
			byte b2;
			byte b3;
			if (friendly || catchItem > 0 || (damage == 0 && lifeMax == 5))
			{
				b = 50;
				b2 = byte.MaxValue;
				b3 = 50;
			}
			else
			{
				b = byte.MaxValue;
				b2 = 50;
				b3 = 50;
			}
			if (((Color)(ref npcColor)).R < b)
			{
				((Color)(ref npcColor)).R = b;
			}
			if (((Color)(ref npcColor)).G < b2)
			{
				((Color)(ref npcColor)).G = b2;
			}
			if (((Color)(ref npcColor)).B < b3)
			{
				((Color)(ref npcColor)).B = b3;
			}
		}
		return npcColor;
	}

	private void UpdateNPC_BuffApplyVFX()
	{
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0175: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01da: Unknown result type (might be due to invalid IL or missing references)
		//IL_01df: Unknown result type (might be due to invalid IL or missing references)
		//IL_0270: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0397: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0400: Unknown result type (might be due to invalid IL or missing references)
		//IL_04cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_050b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0511: Unknown result type (might be due to invalid IL or missing references)
		//IL_0529: Unknown result type (might be due to invalid IL or missing references)
		//IL_0533: Unknown result type (might be due to invalid IL or missing references)
		//IL_0538: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0633: Unknown result type (might be due to invalid IL or missing references)
		//IL_0639: Unknown result type (might be due to invalid IL or missing references)
		//IL_064d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0657: Unknown result type (might be due to invalid IL or missing references)
		//IL_065c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0694: Unknown result type (might be due to invalid IL or missing references)
		//IL_0699: Unknown result type (might be due to invalid IL or missing references)
		//IL_069f: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_0723: Unknown result type (might be due to invalid IL or missing references)
		//IL_0728: Unknown result type (might be due to invalid IL or missing references)
		//IL_075a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0779: Unknown result type (might be due to invalid IL or missing references)
		//IL_090b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0949: Unknown result type (might be due to invalid IL or missing references)
		//IL_094f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0963: Unknown result type (might be due to invalid IL or missing references)
		//IL_0983: Unknown result type (might be due to invalid IL or missing references)
		//IL_0988: Unknown result type (might be due to invalid IL or missing references)
		//IL_098d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0867: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_08cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a20: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a25: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a34: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a85: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_07cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_07db: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_07fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0803: Unknown result type (might be due to invalid IL or missing references)
		//IL_0808: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b03: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b14: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b23: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b32: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b35: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b52: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b63: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b69: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b76: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b80: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b85: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dad: Unknown result type (might be due to invalid IL or missing references)
		//IL_0db2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cde: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c15: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eba: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ebf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0de4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e03: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fed: Unknown result type (might be due to invalid IL or missing references)
		//IL_102d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1033: Unknown result type (might be due to invalid IL or missing references)
		//IL_104b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1055: Unknown result type (might be due to invalid IL or missing references)
		//IL_105a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ef1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f16: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d38: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d42: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d47: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d64: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d74: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c77: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c99: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ca4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ca9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1118: Unknown result type (might be due to invalid IL or missing references)
		//IL_1158: Unknown result type (might be due to invalid IL or missing references)
		//IL_115e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1176: Unknown result type (might be due to invalid IL or missing references)
		//IL_1180: Unknown result type (might be due to invalid IL or missing references)
		//IL_1185: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e56: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e60: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e65: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e82: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e88: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e92: Unknown result type (might be due to invalid IL or missing references)
		//IL_1243: Unknown result type (might be due to invalid IL or missing references)
		//IL_1280: Unknown result type (might be due to invalid IL or missing references)
		//IL_1286: Unknown result type (might be due to invalid IL or missing references)
		//IL_129e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f78: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0faa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1400: Unknown result type (might be due to invalid IL or missing references)
		//IL_1406: Unknown result type (might be due to invalid IL or missing references)
		//IL_140b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1410: Unknown result type (might be due to invalid IL or missing references)
		if (!canDisplayBuffs)
		{
			return;
		}
		position += netOffset;
		if (markedByScytheWhip && Main.rand.Next(3) == 0)
		{
			ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.BlackLightningSmall, new ParticleOrchestraSettings
			{
				MovementVector = Main.rand.NextVector2Circular(1f, 1f),
				PositionInWorld = Main.rand.NextVector2FromRectangle(base.Hitbox)
			});
		}
		if (poisoned && Main.rand.Next(30) == 0)
		{
			Dust dust24 = Dust.NewDustDirect(position, width, height, 46, 0f, 0f, 120, default(Color), 0.2f);
			dust24.noGravity = true;
			dust24.fadeIn = 1.9f;
		}
		if (venom && Main.rand.Next(10) == 0)
		{
			Dust dust25 = Dust.NewDustDirect(position, width, height, 171, 0f, 0f, 100, default(Color), 0.5f);
			dust25.noGravity = true;
			dust25.fadeIn = 1.5f;
		}
		if (shadowFlame && Main.rand.Next(5) < 4)
		{
			Dust dust19 = Dust.NewDustDirect(new Vector2(position.X - 2f, position.Y - 2f), width + 4, height + 4, 27, velocity.X * 0.4f, velocity.Y * 0.4f, 180, default(Color), 1.95f);
			dust19.noGravity = true;
			dust19.velocity *= 0.75f;
			dust19.velocity.X *= 0.75f;
			dust19.velocity.Y -= 1f;
			if (Main.rand.Next(4) == 0)
			{
				dust19.noGravity = false;
				dust19.scale *= 0.5f;
			}
		}
		if (onFire)
		{
			if (Main.rand.Next(4) < 3)
			{
				Dust dust20 = Dust.NewDustDirect(new Vector2(position.X - 2f, position.Y - 2f), width + 4, height + 4, 6, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 3.5f);
				dust20.noGravity = true;
				dust20.velocity *= 1.8f;
				dust20.velocity.Y -= 0.5f;
				if (Main.rand.Next(4) == 0)
				{
					dust20.noGravity = false;
					dust20.scale *= 0.5f;
				}
			}
			Lighting.AddLight((int)(position.X / 16f), (int)(position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
		}
		if (onFire3)
		{
			if (Main.rand.Next(4) < 3)
			{
				Dust dust21 = Dust.NewDustDirect(new Vector2(position.X - 2f, position.Y - 2f), width + 4, height + 4, 6, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 3.5f);
				dust21.noGravity = true;
				dust21.velocity *= 1.8f;
				dust21.velocity.Y -= 0.5f;
				if (Main.rand.Next(4) == 0)
				{
					dust21.noGravity = false;
					dust21.scale *= 0.5f;
				}
				dust21.customData = 0;
			}
			Lighting.AddLight((int)(position.X / 16f), (int)(position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
		}
		if (daybreak)
		{
			if (Main.rand.Next(4) < 3)
			{
				Dust dust22 = Dust.NewDustDirect(new Vector2(position.X - 2f, position.Y - 2f), width + 4, height + 4, 158, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 3.5f);
				dust22.noGravity = true;
				dust22.velocity *= 2.8f;
				dust22.velocity.Y -= 0.5f;
				if (Main.rand.Next(4) == 0)
				{
					dust22.noGravity = false;
					dust22.scale *= 0.5f;
				}
			}
			Lighting.AddLight((int)(position.X / 16f), (int)(position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
		}
		if (betsysCurse)
		{
			if (Main.rand.Next(4) < 3)
			{
				Dust dust26 = Dust.NewDustDirect(new Vector2(position.X - 2f, position.Y - 2f), width + 4, height + 4, 55, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 3.5f);
				dust26.noGravity = true;
				dust26.velocity *= 2.8f;
				dust26.velocity.Y -= 1.5f;
				dust26.noGravity = false;
				dust26.scale = 0.9f;
				dust26.color = new Color(0, 0, 180, 255);
				dust26.velocity *= 0.2f;
			}
			Lighting.AddLight((int)(position.X / 16f), (int)(position.Y / 16f + 1f), 0.6f, 0.1f, 0.9f);
		}
		if (oiled && Main.rand.Next(3) != 0)
		{
			int num = 175;
			Color newColor = default(Color);
			((Color)(ref newColor))._002Ector(0, 0, 0, 250);
			Vector2 vector = position;
			vector.X -= 2f;
			vector.Y -= 2f;
			if (Main.rand.Next(2) == 0)
			{
				Dust dust23 = Dust.NewDustDirect(vector, width + 4, height + 2, 4, 0f, 0f, num, newColor, 1.4f);
				if (Main.rand.Next(2) == 0)
				{
					dust23.alpha += 25;
				}
				if (Main.rand.Next(2) == 0)
				{
					dust23.alpha += 25;
				}
				dust23.noLight = true;
				dust23.velocity *= 0.2f;
				dust23.velocity.Y += 0.2f;
				dust23.velocity += velocity;
			}
		}
		if (dryadWard && velocity.X != 0f && Main.rand.Next(4) == 0)
		{
			Dust dust27 = Dust.NewDustDirect(new Vector2(position.X - 2f, position.Y + (float)height - 2f), width + 4, 4, 163, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 1.5f);
			dust27.noGravity = true;
			dust27.noLight = true;
			dust27.velocity *= 0f;
		}
		if (dryadBane && Main.rand.Next(4) == 0)
		{
			Dust dust28 = Dust.NewDustDirect(new Vector2(position.X - 2f, position.Y), width + 4, height, 163, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 1.5f);
			dust28.noGravity = true;
			dust28.velocity *= new Vector2(Main.rand.NextFloat() * 4f - 2f, 0f);
			dust28.noLight = true;
		}
		if (loveStruck && Main.rand.Next(5) == 0)
		{
			Vector2 vector2 = default(Vector2);
			((Vector2)(ref vector2))._002Ector((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
			((Vector2)(ref vector2)).Normalize();
			vector2.X *= 0.66f;
			int num2 = Gore.NewGore(position + new Vector2((float)Main.rand.Next(width + 1), (float)Main.rand.Next(height + 1)), vector2 * (float)Main.rand.Next(3, 6) * 0.33f, 331, (float)Main.rand.Next(40, 121) * 0.01f);
			Main.gore[num2].sticky = false;
			Gore obj = Main.gore[num2];
			obj.velocity *= 0.4f;
			Main.gore[num2].velocity.Y -= 0.6f;
		}
		if (stinky && Main.rand.Next(5) == 0)
		{
			Vector2 vector3 = default(Vector2);
			((Vector2)(ref vector3))._002Ector((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
			((Vector2)(ref vector3)).Normalize();
			vector3.X *= 0.66f;
			vector3.Y = Math.Abs(vector3.Y);
			Vector2 vector4 = vector3 * (float)Main.rand.Next(3, 5) * 0.25f;
			Dust dust29 = Dust.NewDustDirect(position, width, height, 188, vector4.X, vector4.Y * 0.5f, 100, default(Color), 1.5f);
			dust29.velocity *= 0.1f;
			dust29.velocity.Y -= 0.5f;
		}
		if (dripping && Main.rand.Next(4) != 0)
		{
			Vector2 vector5 = position;
			vector5.X -= 2f;
			vector5.Y -= 2f;
			if (Main.rand.Next(2) == 0)
			{
				Dust dust12 = Dust.NewDustDirect(vector5, width + 4, height + 2, 211, 0f, 0f, 50, default(Color), 0.8f);
				if (Main.rand.Next(2) == 0)
				{
					dust12.alpha += 25;
				}
				if (Main.rand.Next(2) == 0)
				{
					dust12.alpha += 25;
				}
				dust12.noLight = true;
				dust12.velocity *= 0.2f;
				dust12.velocity.Y += 0.2f;
				dust12.velocity += velocity;
			}
			else
			{
				Dust dust13 = Dust.NewDustDirect(vector5, width + 8, height + 8, 211, 0f, 0f, 50, default(Color), 1.1f);
				if (Main.rand.Next(2) == 0)
				{
					dust13.alpha += 25;
				}
				if (Main.rand.Next(2) == 0)
				{
					dust13.alpha += 25;
				}
				dust13.noLight = true;
				dust13.noGravity = true;
				dust13.velocity *= 0.2f;
				dust13.velocity.Y += 1f;
				dust13.velocity += velocity;
			}
		}
		if (drippingSlime && Main.rand.Next(4) != 0)
		{
			int num3 = 175;
			Color newColor2 = default(Color);
			((Color)(ref newColor2))._002Ector(0, 80, 255, 100);
			Vector2 vector6 = position;
			vector6.X -= 2f;
			vector6.Y -= 2f;
			if (Main.rand.Next(2) == 0)
			{
				Dust dust14 = Dust.NewDustDirect(vector6, width + 4, height + 2, 4, 0f, 0f, num3, newColor2, 1.4f);
				if (Main.rand.Next(2) == 0)
				{
					dust14.alpha += 25;
				}
				if (Main.rand.Next(2) == 0)
				{
					dust14.alpha += 25;
				}
				dust14.noLight = true;
				dust14.velocity *= 0.2f;
				dust14.velocity.Y += 0.2f;
				dust14.velocity += velocity;
			}
		}
		if (drippingSparkleSlime && Main.rand.Next(4) != 0)
		{
			int num4 = 150;
			Vector2 vector7 = position;
			vector7.X -= 2f;
			vector7.Y -= 2f;
			if (Main.rand.Next(2) == 0)
			{
				Dust dust15 = Dust.NewDustDirect(vector7, width + 4, height + 2, 243, 0f, 0f, num4);
				if (Main.rand.Next(2) == 0)
				{
					dust15.alpha += 25;
				}
				if (Main.rand.Next(2) == 0)
				{
					dust15.alpha += 25;
				}
				dust15.noLight = true;
				dust15.velocity *= 0.2f;
				dust15.velocity.Y += 0.2f;
				dust15.velocity += velocity;
			}
		}
		if (onFrostBurn)
		{
			if (Main.rand.Next(4) < 3)
			{
				Dust dust16 = Dust.NewDustDirect(new Vector2(position.X - 2f, position.Y - 2f), width + 4, height + 4, 135, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 3.5f);
				dust16.noGravity = true;
				dust16.velocity *= 1.8f;
				dust16.velocity.Y -= 0.5f;
				if (Main.rand.Next(4) == 0)
				{
					dust16.noGravity = false;
					dust16.scale *= 0.5f;
				}
			}
			Lighting.AddLight((int)(position.X / 16f), (int)(position.Y / 16f + 1f), 0.1f, 0.6f, 1f);
		}
		if (onFrostBurn2)
		{
			if (Main.rand.Next(4) < 3)
			{
				Dust dust17 = Dust.NewDustDirect(new Vector2(position.X - 2f, position.Y - 2f), width + 4, height + 4, 135, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 3.5f);
				dust17.noGravity = true;
				dust17.velocity *= 1.8f;
				dust17.velocity.Y -= 0.5f;
				if (Main.rand.Next(4) == 0)
				{
					dust17.noGravity = false;
					dust17.scale *= 0.5f;
				}
			}
			Lighting.AddLight((int)(position.X / 16f), (int)(position.Y / 16f + 1f), 0.1f, 0.6f, 1f);
		}
		if (onFire2)
		{
			if (Main.rand.Next(4) < 3)
			{
				Dust dust18 = Dust.NewDustDirect(new Vector2(position.X - 2f, position.Y - 2f), width + 4, height + 4, 75, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 3.5f);
				dust18.noGravity = true;
				dust18.velocity *= 1.8f;
				dust18.velocity.Y -= 0.5f;
				if (Main.rand.Next(4) == 0)
				{
					dust18.noGravity = false;
					dust18.scale *= 0.5f;
				}
			}
			Lighting.AddLight((int)(position.X / 16f), (int)(position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
		}
		netShimmer = false;
		if (shimmering)
		{
			shimmerTransparency += 0.01f;
			if (Main.netMode != 1 && (double)shimmerTransparency > 0.9)
			{
				GetShimmered();
			}
			if (shimmerTransparency > 1f)
			{
				shimmerTransparency = 1f;
			}
		}
		else if (shimmerTransparency > 0f)
		{
			if (justHit)
			{
				shimmerTransparency -= 0.1f;
			}
			if (buffImmune[353])
			{
				shimmerTransparency -= 0.015f;
			}
			else
			{
				shimmerTransparency -= 0.001f;
			}
			if (shimmerTransparency < 0f)
			{
				shimmerTransparency = 0f;
			}
		}
		position -= netOffset;
	}

	private void GetShimmered()
	{
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_019e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0201: Unknown result type (might be due to invalid IL or missing references)
		//IL_020e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01eb: Unknown result type (might be due to invalid IL or missing references)
		if (SpawnedFromStatue)
		{
			if (Main.netMode == 0)
			{
				Item.ShimmerEffect(base.Center);
			}
			else
			{
				NetMessage.SendData(146, -1, -1, null, 0, (int)base.Center.X, (int)base.Center.Y);
			}
			noSpawnCycle = true;
			active = false;
			if (Main.netMode == 2)
			{
				netSkip = -1;
				life = 0;
				NetMessage.SendData(23, -1, -1, null, whoAmI);
			}
		}
		else if (NPCID.Sets.ShimmerTransformToNPC[type] >= 0)
		{
			Transform(NPCID.Sets.ShimmerTransformToNPC[type]);
			if (Main.netMode == 0)
			{
				Item.ShimmerEffect(base.Center);
			}
			else
			{
				NetMessage.SendData(146, -1, -1, null, 0, (int)base.Center.X, (int)base.Center.Y);
			}
		}
		else if (NPCID.Sets.ShimmerTransformToItem[type] >= 0)
		{
			int num = Item.NewItem(GetItemSource_Misc(8), (int)position.X, (int)position.Y, width, height, NPCID.Sets.ShimmerTransformToItem[type]);
			Main.item[num].stack = 1;
			Main.item[num].shimmerTime = 1f;
			Main.item[num].shimmered = true;
			Main.item[num].shimmerWet = true;
			Main.item[num].wet = true;
			Item obj = Main.item[num];
			obj.velocity *= 0.1f;
			Main.item[num].playerIndexTheItemIsReservedFor = Main.myPlayer;
			NetMessage.SendData(145, -1, -1, null, num, 1f);
			if (Main.netMode == 0)
			{
				Item.ShimmerEffect(base.Center);
			}
			else
			{
				NetMessage.SendData(146, -1, -1, null, 0, (int)base.Center.X, (int)base.Center.Y);
			}
			noSpawnCycle = true;
			active = false;
			if (Main.netMode == 2)
			{
				netSkip = -1;
				life = 0;
				NetMessage.SendData(23, -1, -1, null, whoAmI);
			}
		}
		else if (NPCID.Sets.ShimmerTownTransform[type])
		{
			ai[0] = 25f;
			ai[1] = 0f;
			ai[2] = 0f;
			ai[3] = 0f;
			netUpdate = true;
			shimmerTransparency = 0.89f;
			int num2 = FindBuffIndex(353);
			if (num2 != -1)
			{
				DelBuff(num2);
			}
		}
	}

	private void UpdateNPC_BuffApplyDOTs()
	{
		//IL_089a: Unknown result type (might be due to invalid IL or missing references)
		//IL_089f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0793: Unknown result type (might be due to invalid IL or missing references)
		//IL_0798: Unknown result type (might be due to invalid IL or missing references)
		if (dontTakeDamage)
		{
			return;
		}
		int num = lifeRegenExpectedLossPerSecond;
		if (poisoned)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			lifeRegen -= 12;
		}
		if (onFire)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			lifeRegen -= 8;
		}
		if (onFire3)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			lifeRegen -= 30;
			if (num < 5)
			{
				num = 5;
			}
		}
		if (onFrostBurn)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			lifeRegen -= 16;
			if (num < 2)
			{
				num = 2;
			}
		}
		if (onFrostBurn2)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			lifeRegen -= 50;
			if (num < 10)
			{
				num = 10;
			}
		}
		if (onFire2)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			lifeRegen -= 48;
			if (num < 10)
			{
				num = 10;
			}
		}
		if (venom)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			lifeRegen -= 60;
			if (num < 15)
			{
				num = 15;
			}
		}
		if (shadowFlame)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			lifeRegen -= 30;
			if (num < 5)
			{
				num = 5;
			}
		}
		if (oiled && (onFire || onFire2 || onFire3 || onFrostBurn || onFrostBurn2 || shadowFlame))
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			lifeRegen -= 50;
			if (num < 10)
			{
				num = 10;
			}
		}
		if (javelined)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			int num7 = 0;
			int num8 = 1;
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].active && Main.projectile[i].type == 598 && Main.projectile[i].ai[0] == 1f && Main.projectile[i].ai[1] == (float)whoAmI)
				{
					num7++;
				}
			}
			lifeRegen -= num7 * 2 * 3;
			if (num < num7 * 3 / num8)
			{
				num = num7 * 3 / num8;
			}
		}
		if (tentacleSpiked)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			int num9 = 0;
			int num10 = 1;
			for (int j = 0; j < 1000; j++)
			{
				if (Main.projectile[j].active && Main.projectile[j].type == 971 && Main.projectile[j].ai[0] == 1f && Main.projectile[j].ai[1] == (float)whoAmI)
				{
					num9++;
				}
			}
			lifeRegen -= num9 * 2 * 3;
			if (num < num9 * 3 / num10)
			{
				num = num9 * 3 / num10;
			}
		}
		if (bloodButchered)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			int num11 = 0;
			int num12 = 1;
			for (int k = 0; k < 1000; k++)
			{
				if (Main.projectile[k].active && Main.projectile[k].type == 975 && Main.projectile[k].ai[0] == 1f && Main.projectile[k].ai[1] == (float)whoAmI)
				{
					num11++;
				}
			}
			lifeRegen -= num11 * 2 * 4;
			if (num < num11 * 4 / num12)
			{
				num = num11 * 4 / num12;
			}
		}
		if (daybreak)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			int num13 = 0;
			int num14 = 4;
			for (int l = 0; l < 1000; l++)
			{
				if (Main.projectile[l].active && Main.projectile[l].type == 636 && Main.projectile[l].ai[0] == 1f && Main.projectile[l].ai[1] == (float)whoAmI)
				{
					num13++;
				}
			}
			if (num13 == 0)
			{
				num13 = 1;
			}
			lifeRegen -= num13 * 2 * 100;
			if (num < num13 * 100 / num14)
			{
				num = num13 * 100 / num14;
			}
		}
		if (celled)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			int num2 = 0;
			for (int m = 0; m < 1000; m++)
			{
				if (Main.projectile[m].active && Main.projectile[m].type == 614 && Main.projectile[m].ai[0] == 1f && Main.projectile[m].ai[1] == (float)whoAmI)
				{
					num2++;
				}
			}
			lifeRegen -= num2 * 2 * 20;
			if (num < num2 * 20)
			{
				num = num2 * 20 / 2;
			}
		}
		if (dryadBane)
		{
			int num3 = 4;
			float num4 = 1f;
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			if (downedBoss1)
			{
				num4 += 0.1f;
			}
			if (downedBoss2)
			{
				num4 += 0.1f;
			}
			if (downedBoss3)
			{
				num4 += 0.1f;
			}
			if (downedQueenBee)
			{
				num4 += 0.1f;
			}
			if (Main.hardMode)
			{
				num4 += 0.4f;
			}
			if (downedMechBoss1)
			{
				num4 += 0.15f;
			}
			if (downedMechBoss2)
			{
				num4 += 0.15f;
			}
			if (downedMechBoss3)
			{
				num4 += 0.15f;
			}
			if (downedPlantBoss)
			{
				num4 += 0.15f;
			}
			if (downedGolemBoss)
			{
				num4 += 0.15f;
			}
			if (downedAncientCultist)
			{
				num4 += 0.15f;
			}
			if (Main.expertMode)
			{
				num4 *= Main.GameModeInfo.TownNPCDamageMultiplier;
			}
			num3 = (int)((float)num3 * num4);
			lifeRegen -= 2 * num3;
			if (num < num3)
			{
				num = num3 / 3;
			}
		}
		if (soulDrain && realLife == -1)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			lifeRegen -= 50;
			if (num < 5)
			{
				num = 5;
			}
		}
		NPCLoader.UpdateLifeRegen(this, ref num);
		if (lifeRegen <= -240 && num < 2)
		{
			num = 2;
		}
		lifeRegenCount += lifeRegen;
		while (lifeRegenCount >= 120)
		{
			lifeRegenCount -= 120;
			if (!immortal)
			{
				if (life < lifeMax)
				{
					life++;
				}
				if (life > lifeMax)
				{
					life = lifeMax;
				}
			}
		}
		if (num > 0)
		{
			while (lifeRegenCount <= -120 * num)
			{
				lifeRegenCount += 120 * num;
				int num5 = whoAmI;
				if (realLife >= 0)
				{
					num5 = realLife;
				}
				if (!Main.npc[num5].immortal)
				{
					Main.npc[num5].life -= num;
				}
				CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), CombatText.LifeRegenNegative, num, dramatic: false, dot: true);
				if (Main.npc[num5].life > 0 || Main.npc[num5].immortal)
				{
					continue;
				}
				Main.npc[num5].life = 1;
				if (Main.netMode != 1)
				{
					Main.npc[num5].StrikeNPCNoInteraction(9999, 0f, 0);
					if (Main.netMode == 2)
					{
						NetMessage.SendData(28, -1, -1, null, num5, 9999f);
					}
				}
			}
			return;
		}
		while (lifeRegenCount <= -120)
		{
			lifeRegenCount += 120;
			int num6 = whoAmI;
			if (realLife >= 0)
			{
				num6 = realLife;
			}
			if (!Main.npc[num6].immortal)
			{
				Main.npc[num6].life--;
			}
			CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), CombatText.LifeRegenNegative, 1, dramatic: false, dot: true);
			if (Main.npc[num6].life > 0 || Main.npc[num6].immortal)
			{
				continue;
			}
			Main.npc[num6].life = 1;
			if (Main.netMode != 1)
			{
				Main.npc[num6].StrikeNPCNoInteraction(9999, 0f, 0);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(28, -1, -1, null, num6, 9999f);
				}
			}
		}
	}

	private void UpdateNPC_BuffClearExpiredBuffs()
	{
		if (Main.netMode == 1)
		{
			return;
		}
		for (int i = 0; i < maxBuffs; i++)
		{
			if (buffType[i] > 0 && buffTime[i] <= 0)
			{
				DelBuff(i);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(54, -1, -1, null, whoAmI);
				}
			}
		}
	}

	private void UpdateNPC_BloodMoonTransformations()
	{
		if (Main.netMode != 1 && Main.bloodMoon)
		{
			bool flag = false;
			if (value == 0f)
			{
				flag = true;
			}
			AttemptToConvertNPCToEvil(WorldGen.crimson);
			if (flag)
			{
				value = 0f;
			}
		}
	}

	public void AttemptToConvertNPCToEvil(bool crimson)
	{
		if (type == 46 || type == 303 || type == 337 || type == 443 || type == 540)
		{
			if (crimson)
			{
				Transform(464);
			}
			else
			{
				Transform(47);
			}
		}
		else if (type == 55 || type == 230 || type == 592 || type == 593)
		{
			if (crimson)
			{
				Transform(465);
			}
			else
			{
				Transform(57);
			}
		}
		else if (type == 148 || type == 149)
		{
			if (crimson)
			{
				Transform(470);
			}
			else
			{
				Transform(168);
			}
		}
	}

	public void UpdateNPC_BuffSetFlags(bool lowerBuffTime = true)
	{
		for (int i = 0; i < maxBuffs; i++)
		{
			if (buffType[i] <= 0 || buffTime[i] <= 0)
			{
				continue;
			}
			if (lowerBuffTime)
			{
				buffTime[i]--;
			}
			if (buffType[i] == 20)
			{
				poisoned = true;
			}
			if (buffType[i] == 70)
			{
				venom = true;
			}
			if (buffType[i] == 24)
			{
				onFire = true;
			}
			if (buffType[i] == 72)
			{
				midas = true;
			}
			if (buffType[i] == 69)
			{
				ichor = true;
			}
			if (buffType[i] == 31)
			{
				confused = true;
			}
			if (buffType[i] == 39)
			{
				onFire2 = true;
			}
			if (buffType[i] == 44)
			{
				onFrostBurn = true;
			}
			if (buffType[i] == 103)
			{
				dripping = true;
			}
			if (buffType[i] == 137)
			{
				drippingSlime = true;
			}
			if (buffType[i] == 320)
			{
				drippingSparkleSlime = true;
			}
			if (buffType[i] == 119)
			{
				loveStruck = true;
			}
			if (buffType[i] == 120)
			{
				stinky = true;
			}
			if (buffType[i] == 151)
			{
				soulDrain = true;
			}
			if (buffType[i] == 153)
			{
				shadowFlame = true;
			}
			if (buffType[i] == 165)
			{
				dryadWard = true;
			}
			if (buffType[i] == 169)
			{
				javelined = true;
			}
			if (buffType[i] == 337)
			{
				tentacleSpiked = true;
			}
			if (buffType[i] == 344)
			{
				bloodButchered = true;
			}
			if (buffType[i] == 183)
			{
				celled = true;
			}
			if (buffType[i] == 186)
			{
				dryadBane = true;
			}
			if (buffType[i] == 189)
			{
				daybreak = true;
			}
			if (buffType[i] == 203)
			{
				betsysCurse = true;
			}
			if (buffType[i] == 204)
			{
				oiled = true;
			}
			if (buffType[i] == 310)
			{
				markedByScytheWhip = true;
			}
			if (buffType[i] == 323)
			{
				onFire3 = true;
			}
			if (buffType[i] == 324)
			{
				onFrostBurn2 = true;
			}
			if (buffType[i] == 353)
			{
				if (buffImmune[353])
				{
					DelBuff(i);
				}
				else
				{
					shimmering = true;
				}
			}
			BuffLoader.Update(buffType[i], this, ref i);
		}
	}

	private void UpdateNPC_BuffFlagsReset()
	{
		lifeRegen = 0;
		soulDrain = false;
		poisoned = false;
		venom = false;
		shadowFlame = false;
		onFire = false;
		midas = false;
		ichor = false;
		onFrostBurn = false;
		onFrostBurn2 = false;
		onFire2 = false;
		onFire3 = false;
		confused = false;
		loveStruck = false;
		dryadWard = false;
		stinky = false;
		dripping = false;
		drippingSlime = false;
		drippingSparkleSlime = false;
		daybreak = false;
		javelined = false;
		tentacleSpiked = false;
		bloodButchered = false;
		celled = false;
		dryadBane = false;
		betsysCurse = false;
		oiled = false;
		markedByScytheWhip = false;
		shimmering = false;
		lifeRegenExpectedLossPerSecond = -1;
	}

	private void UpdateNPC_TeleportVisuals()
	{
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_0158: Unknown result type (might be due to invalid IL or missing references)
		//IL_015d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0224: Unknown result type (might be due to invalid IL or missing references)
		//IL_0229: Unknown result type (might be due to invalid IL or missing references)
		if (!(teleportTime > 0f))
		{
			return;
		}
		if (teleportStyle == 0)
		{
			if ((float)Main.rand.Next(100) <= 100f * teleportTime * 2f)
			{
				int num = Dust.NewDust(new Vector2((float)getRect().X, (float)getRect().Y), getRect().Width, getRect().Height, 159);
				Main.dust[num].scale = teleportTime * 1.5f;
				Main.dust[num].noGravity = true;
				Dust obj = Main.dust[num];
				obj.velocity *= 1.1f;
			}
		}
		else if (teleportStyle == 4)
		{
			teleportTime -= 0.02f;
			if ((float)Main.rand.Next(100) <= 100f * teleportTime)
			{
				Dust obj2 = Main.dust[Dust.NewDust(position, width, height, 263)];
				obj2.color = PortalHelper.GetPortalColor(lastPortalColorIndex);
				obj2.noLight = true;
				obj2.noGravity = true;
				obj2.scale = 1.2f;
				obj2.fadeIn = 0.4f;
			}
		}
		else if (teleportStyle == 12)
		{
			teleportTime -= 0.02f;
			if ((float)Main.rand.Next(100) <= 100f * teleportTime)
			{
				Dust obj3 = Main.dust[Dust.NewDust(position, width, height, 263)];
				obj3.color = Main.hslToRgb((float)(Main.timeForVisualEffects / 60.0) % 1f, 1f, 0.75f, 0);
				obj3.noLight = true;
				obj3.noGravity = true;
				obj3.scale = 1.2f;
				obj3.fadeIn = 0.4f;
			}
		}
		else if (teleportStyle == 13)
		{
			teleportTime = 0f;
		}
		teleportTime = Math.Max(0f, teleportTime - 0.005f);
	}

	private void UpdateNPC_CritterSounds()
	{
		if (Main.netMode == 2)
		{
			return;
		}
		if (type == 611 && !Main.dayTime && Main.rand.Next(700) == 0)
		{
			SoundEngine.PlaySound(46, (int)position.X, (int)position.Y);
		}
		if (type >= 602 && type <= 603 && Main.dayTime && Main.rand.Next(1200) == 0)
		{
			SoundEngine.PlaySound(44, (int)position.X, (int)position.Y);
		}
		if (type >= 362 && type <= 365)
		{
			if (Main.dayTime && Main.rand.Next(200) == 0)
			{
				SoundEngine.PlaySound(30, (int)position.X, (int)position.Y);
			}
		}
		else if (type == 361 || type == 445 || type == 687)
		{
			if ((double)Math.Abs(velocity.X) < 0.5 && (!Main.dayTime || (double)position.Y > Main.worldSurface * 16.0) && Main.rand.Next(200) == 0)
			{
				SoundEngine.PlaySound(31, (int)position.X, (int)position.Y);
			}
		}
		else if (type == 74 || type == 297 || type == 298 || type == 442 || type == 671 || type == 672 || type == 673 || type == 674 || type == 675)
		{
			if (!Main.dayTime || !(Main.time < 18000.0))
			{
				return;
			}
			int maxValue = 400;
			if (Main.rand.Next(maxValue) != 0)
			{
				return;
			}
			if (type == 74)
			{
				if (Main.rand.Next(3) != 0)
				{
					SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 14);
				}
				else
				{
					SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 18);
				}
			}
			if (type == 297)
			{
				SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 16);
			}
			if (type == 298)
			{
				if (Main.rand.Next(3) != 0)
				{
					SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 17);
				}
				else
				{
					SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 19);
				}
			}
			if (type == 674 || type == 675)
			{
				SoundEngine.PlaySound(67, (int)position.X, (int)position.Y);
			}
			if (type == 671 || type == 672)
			{
				SoundEngine.PlaySound(68, (int)position.X, (int)position.Y);
			}
			if (type == 673)
			{
				SoundEngine.PlaySound(69, (int)position.X, (int)position.Y);
			}
			if (type == 442)
			{
				switch (Main.rand.Next(5))
				{
				case 0:
					SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 16);
					break;
				case 1:
					SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 17);
					break;
				case 2:
					SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 19);
					break;
				case 3:
					SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 14);
					break;
				default:
					SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 18);
					break;
				}
			}
		}
		else if ((type == 300 || type == 447 || type == 610) && Main.rand.Next(1800) == 0)
		{
			SoundEngine.PlaySound(33, (int)position.X, (int)position.Y);
		}
	}

	private void UpdateNPC_CastLights()
	{
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0169: Unknown result type (might be due to invalid IL or missing references)
		//IL_016f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0174: Unknown result type (might be due to invalid IL or missing references)
		//IL_0179: Unknown result type (might be due to invalid IL or missing references)
		//IL_010e: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0153: Unknown result type (might be due to invalid IL or missing references)
		//IL_015d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		//IL_0206: Unknown result type (might be due to invalid IL or missing references)
		//IL_0215: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_038f: Unknown result type (might be due to invalid IL or missing references)
		//IL_039e: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c7: Unknown result type (might be due to invalid IL or missing references)
		if ((type >= 442 && type <= 448) || type == 539 || type == 592 || type == 593 || type == 601 || type == 605 || type == 627)
		{
			position += netOffset;
			Color color = Lighting.GetColor((int)base.Center.X / 16, (int)base.Center.Y / 16);
			if (((Color)(ref color)).R > 20 || ((Color)(ref color)).B > 20 || ((Color)(ref color)).G > 20)
			{
				int num = ((Color)(ref color)).R;
				if (((Color)(ref color)).G > num)
				{
					num = ((Color)(ref color)).G;
				}
				if (((Color)(ref color)).B > num)
				{
					num = ((Color)(ref color)).B;
				}
				num /= 30;
				if (Main.rand.Next(300) < num)
				{
					int num11 = Dust.NewDust(position, width, height, 43, 0f, 0f, 254, new Color(255, 255, 0), 0.5f);
					Dust obj = Main.dust[num11];
					obj.velocity *= 0f;
				}
			}
			position -= netOffset;
		}
		if (type == 160)
		{
			float num12 = (float)Main.rand.Next(28, 42) * 0.005f;
			num12 += (float)(270 - Main.mouseTextColor) / 500f;
			float num13 = 0.1f;
			float num14 = 0.3f + num12 / 2f;
			float num15 = 0.6f + num12;
			if (townNpcVariationIndex == 1)
			{
				float num18 = num13;
				num13 = num15;
				num15 = num18;
			}
			float num16 = 0.35f;
			num13 *= num16;
			num14 *= num16;
			num15 *= num16;
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, num13, num14, num15);
		}
		if ((type >= 254 && type <= 261) || type == 634 || type == 635)
		{
			float num17 = (float)Main.rand.Next(28, 42) * 0.005f;
			num17 += (float)(270 - Main.mouseTextColor) / 500f;
			float num2 = 0.1f;
			float num3 = 0.3f + num17 / 2f;
			float num4 = 0.6f + num17;
			float num5 = 0.35f;
			if (type == 634)
			{
				num5 = 0.65f;
			}
			num2 *= num5;
			num3 *= num5;
			num4 *= num5;
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, num2, num3, num4);
		}
		if (type == 209)
		{
			float num6 = (float)Main.rand.Next(28, 42) * 0.005f;
			num6 += (float)(270 - Main.mouseTextColor) / 500f;
			float num7 = 0.1f;
			float num8 = 0.3f + num6 / 2f;
			float num9 = 0.4f + num6 / 2f;
			float num10 = 0.35f;
			num7 *= num10;
			num8 *= num10;
			num9 *= num10;
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, num7, num8, num9);
			if (ai[0] == 12f)
			{
				Lighting.AddLight(base.Top, 0.3f, 0.1f, 0.1f);
			}
		}
		if (type == 44)
		{
			Lighting.AddLight((int)(position.X + (float)(width / 2)) / 16, (int)(position.Y + 4f) / 16, 0.9f, 0.75f, 0.5f);
		}
	}

	private void GetHurtByOtherNPCs(bool[] acceptableNPCIDs)
	{
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		if (dontTakeDamage || dontTakeDamageFromHostiles || immortal)
		{
			return;
		}
		int specialHitSetter = 1;
		float damageMultiplier = 1f;
		if (immune[255] != 0)
		{
			return;
		}
		Rectangle hitbox = base.Hitbox;
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = Main.npc[i];
			if (acceptableNPCIDs[nPC.type] && nPC.active && !nPC.friendly && nPC.damage > 0)
			{
				Rectangle npcRect = nPC.Hitbox;
				GetMeleeCollisionData(hitbox, i, ref specialHitSetter, ref damageMultiplier, ref npcRect);
				if (NPCLoader.CanHitNPC(nPC, this) && ((Rectangle)(ref hitbox)).Intersects(npcRect) && (type != 453 || !NPCID.Sets.Skeletons[nPC.type]) && nPC.type != 624)
				{
					BeHurtByOtherNPC(i, nPC);
					break;
				}
			}
		}
	}

	private void BeHurtByOtherNPC(int npcIndex, NPC thatNPC)
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		int num = 30;
		if (type == 548)
		{
			num = 20;
		}
		int num3 = 6;
		int num4 = ((!(thatNPC.Center.X > base.Center.X)) ? 1 : (-1));
		HitModifiers modifiers = GetIncomingStrikeModifiers(DamageClass.Default, num4);
		NPCLoader.ModifyHitNPC(thatNPC, this, ref modifiers);
		HitInfo strike = modifiers.ToHitInfo(thatNPC.damage, crit: false, num3, damageVariation: true);
		double num5 = StrikeNPC(strike, fromNet: false, noPlayerInteraction: true);
		if (Main.netMode != 0)
		{
			NetMessage.SendStrikeNPC(this, in strike);
		}
		netUpdate = true;
		immune[255] = num;
		NPCLoader.OnHitNPC(thatNPC, this, in strike);
		int num2 = strike.SourceDamage;
		if (dryadWard)
		{
			num2 = (int)num5 / 3;
			num3 = 6;
			num4 *= -1;
			thatNPC.StrikeNPCNoInteraction(num2, num3, num4);
			if (Main.netMode != 0)
			{
				NetMessage.SendData(28, -1, -1, null, npcIndex, num2, num3, num4);
			}
			thatNPC.netUpdate = true;
			thatNPC.immune[255] = num;
		}
		if (NPCID.Sets.HurtingBees[thatNPC.type])
		{
			num2 = damage;
			num3 = 6;
			num4 *= -1;
			thatNPC.StrikeNPCNoInteraction(num2, num3, num4);
			if (Main.netMode != 0)
			{
				NetMessage.SendData(28, -1, -1, null, npcIndex, num2, num3, num4);
			}
			thatNPC.netUpdate = true;
			thatNPC.immune[255] = num;
		}
	}

	private void CheckLifeRegen()
	{
		if (life < lifeMax)
		{
			friendlyRegen++;
			if (dryadWard)
			{
				friendlyRegen += 10;
			}
			if (friendlyRegen > 180)
			{
				friendlyRegen = 0;
				life++;
				netUpdate = true;
			}
		}
	}

	public void GetImmuneTime(int fromWho, int time)
	{
		if (fromWho == -1)
		{
			for (int i = 0; i < immune.Length; i++)
			{
				immune[i] = time;
			}
		}
		else if (fromWho >= 0 && fromWho < immune.Length)
		{
			immune[fromWho] = time;
		}
	}

	private void UpdateCollision()
	{
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		Collision_WalkDownSlopes();
		bool lava = Collision_LavaCollision();
		lava = Collision_WaterCollision(lava);
		if (!wet)
		{
			lavaWet = false;
			honeyWet = false;
			shimmerWet = false;
		}
		if (wetCount > 0)
		{
			wetCount--;
		}
		bool fall = Collision_DecideFallThroughPlatforms();
		oldVelocity = velocity;
		collideX = false;
		collideY = false;
		FishTransformationDuringRain();
		GetTileCollisionParameters(out var cPosition, out var cWidth, out var cHeight);
		Vector2 oldDryVelocity = velocity;
		ApplyTileCollision(fall, cPosition, cWidth, cHeight);
		if (wet)
		{
			if (shimmerWet)
			{
				Collision_MoveWhileWet(oldDryVelocity, shimmerMovementSpeed);
			}
			else if (honeyWet)
			{
				Collision_MoveWhileWet(oldDryVelocity, honeyMovementSpeed);
			}
			else if (lavaWet)
			{
				Collision_MoveWhileWet(oldDryVelocity, lavaMovementSpeed);
			}
			else
			{
				Collision_MoveWhileWet(oldDryVelocity, waterMovementSpeed);
			}
		}
		else
		{
			Collision_MoveWhileDry();
		}
		if (aiStyle == 67)
		{
			Collision_MoveSnailOnSlopes();
		}
		else if (type != 72 && type != 247 && type != 248 && (type < 542 || type > 545) && (!NPCID.Sets.BelongsToInvasionOldOnesArmy[type] || !noGravity))
		{
			Collision_MoveSlopesAndStairFall(fall);
			if (townNPC)
			{
				Collision.StepConveyorBelt(this, 1f);
			}
		}
	}

	private void Collision_MoveWhileDry()
	{
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		if (Collision.up)
		{
			velocity.Y = 0.01f;
		}
		if (oldVelocity.X != velocity.X)
		{
			collideX = true;
		}
		if (oldVelocity.Y != velocity.Y)
		{
			collideY = true;
		}
		oldPosition = position;
		oldDirection = direction;
		position += velocity;
	}

	private void ApplyTileCollision(bool fall, Vector2 cPosition, int cWidth, int cHeight)
	{
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		if (type == 72)
		{
			Collision_MoveBlazingWheel();
		}
		else if (type >= 542 && type <= 545)
		{
			Collision_MoveSandshark(fall, cPosition, cWidth, cHeight);
		}
		else if (type == 405 || type == 406)
		{
			Collision_MoveStardustCell(fall, cPosition, cWidth, cHeight);
		}
		else if (type == 417)
		{
			Collision_MoveSolarSroller(fall, cPosition, cWidth, cHeight);
		}
		else
		{
			Collision_MoveNormal(fall, cPosition, cWidth, cHeight);
		}
	}

	private void Collision_MoveSlopesAndStairFall(bool fall)
	{
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_0135: Unknown result type (might be due to invalid IL or missing references)
		//IL_0136: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_013c: Unknown result type (might be due to invalid IL or missing references)
		//IL_013e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0151: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01db: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_020d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0212: Unknown result type (might be due to invalid IL or missing references)
		//IL_0213: Unknown result type (might be due to invalid IL or missing references)
		//IL_0218: Unknown result type (might be due to invalid IL or missing references)
		//IL_0179: Unknown result type (might be due to invalid IL or missing references)
		//IL_019f: Unknown result type (might be due to invalid IL or missing references)
		if (fall)
		{
			stairFall = true;
		}
		if (aiStyle == 7)
		{
			int num = (int)base.Center.X / 16;
			int num2 = (int)position.Y / 16;
			if (WorldGen.InWorld(num, num2))
			{
				int num3 = 16;
				bool flag = false;
				if (Main.tile[num, num2] != null && Main.tile[num, num2].active() && Main.tileSolid[Main.tile[num, num2].type])
				{
					flag = true;
				}
				if (!townNPC)
				{
					flag = false;
				}
				if (!Main.dayTime || Main.eclipse)
				{
					flag = true;
				}
				else
				{
					int num4 = (int)(position.Y + (float)height) / 16;
					if (homeTileY - num4 > num3)
					{
						flag = true;
					}
				}
				if (flag)
				{
					if ((position.Y + (float)height - 8f) / 16f < (float)homeTileY)
					{
						stairFall = true;
					}
					else
					{
						stairFall = false;
					}
				}
			}
		}
		GetTileCollisionParameters(out var cPosition, out var cWidth, out var cHeight);
		Vector2 vector = position - cPosition;
		Vector4 vector2 = Collision.SlopeCollision(cPosition, velocity, cWidth, cHeight, gravity, stairFall);
		if (Collision.stairFall)
		{
			stairFall = true;
		}
		else if (!fall)
		{
			stairFall = false;
		}
		if (Collision.stair && Math.Abs(vector2.Y - position.Y) > 8f)
		{
			gfxOffY -= vector2.Y - position.Y;
			stepSpeed = 2f;
		}
		position.X = vector2.X;
		position.Y = vector2.Y;
		velocity.X = vector2.Z;
		velocity.Y = vector2.W;
		position += vector;
	}

	private void Collision_MoveSnailOnSlopes()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0108: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		Vector4 vector = Collision.SlopeCollision(position, velocity, width, height, gravity);
		if (position.X != vector.X || position.Y != vector.Y)
		{
			if (ai[2] == 0f && velocity.Y > 0f && ((direction < 0 && rotation == 1.57f && spriteDirection == 1) || (direction > 0 && rotation == 4.71f && spriteDirection == -1)))
			{
				direction *= -direction;
			}
			ai[2] = 2f;
			directionY = 1;
			rotation = 0f;
		}
		position.X = vector.X;
		position.Y = vector.Y;
		velocity.X = vector.Z;
		velocity.Y = vector.W;
	}

	private void Collision_MoveNormal(bool fall, Vector2 cPosition, int cWidth, int cHeight)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		velocity = Collision.TileCollision(cPosition, velocity, cWidth, cHeight, fall, fall);
	}

	private void Collision_MoveSandshark(bool fall, Vector2 cPosition, int cWidth, int cHeight)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		if (!Main.remixWorld)
		{
			velocity = Collision.AdvancedTileCollision(TileID.Sets.ForAdvancedCollision.ForSandshark, cPosition, velocity, cWidth, cHeight, fall, fall);
		}
	}

	private void Collision_MoveSolarSroller(bool fall, Vector2 cPosition, int cWidth, int cHeight)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		velocity = Collision.TileCollision(cPosition, velocity, cWidth, cHeight, fall, fall);
		if (ai[0] != 6f || !(velocity != oldVelocity))
		{
			return;
		}
		ai[2] -= 1f;
		ai[3] = 1f;
		if (ai[2] > 0f)
		{
			if (velocity.X != 0f && velocity.X != oldVelocity.X)
			{
				velocity.X = (0f - oldVelocity.X) * 0.9f;
				direction *= -1;
			}
			if (velocity.Y != 0f && velocity.Y != oldVelocity.Y)
			{
				velocity.Y = (0f - oldVelocity.Y) * 0.9f;
			}
		}
	}

	private void Collision_MoveStardustCell(bool fall, Vector2 cPosition, int cWidth, int cHeight)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		velocity = Collision.TileCollision(cPosition, velocity, cWidth, cHeight, fall, fall);
		if (velocity != oldVelocity)
		{
			if (velocity.X != 0f && velocity.X != oldVelocity.X)
			{
				velocity.X = (0f - oldVelocity.X) * 0.8f;
			}
			if (velocity.Y != 0f && velocity.Y != oldVelocity.Y)
			{
				velocity.Y = (0f - oldVelocity.Y) * 0.8f;
			}
		}
	}

	private void Collision_MoveBlazingWheel()
	{
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector(position.X + (float)(width / 2), position.Y + (float)(height / 2));
		int num = 12;
		int num2 = 12;
		vector.X -= num / 2;
		vector.Y -= num2 / 2;
		velocity = Collision.noSlopeCollision(vector, velocity, num, num2, fallThrough: true, fall2: true);
	}

	private void Collision_MoveWhileWet(Vector2 oldDryVelocity, float Slowdown = 0.5f)
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		if (Collision.up)
		{
			velocity.Y = 0.01f;
		}
		Vector2 vector = velocity * Slowdown;
		if (velocity.X != oldDryVelocity.X)
		{
			vector.X = velocity.X;
			collideX = true;
		}
		if (velocity.Y != oldDryVelocity.Y)
		{
			vector.Y = velocity.Y;
			collideY = true;
		}
		oldPosition = position;
		oldDirection = direction;
		position += vector;
	}

	public void GetTileCollisionParameters(out Vector2 cPosition, out int cWidth, out int cHeight)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		cPosition = position;
		cWidth = width;
		cHeight = height;
		if (type == 594)
		{
			int num = (int)(44f + 20f * ai[1]);
			cPosition.Y += num;
			cHeight += num;
			cPosition.X += cWidth / 2;
			cWidth = (int)(6f + 26f * ai[1]);
			cPosition.X -= cWidth / 2;
		}
		if (type == 686)
		{
			int num2 = 64;
			cPosition.Y += num2;
			cHeight += num2;
			cPosition.X += cWidth / 2;
			cWidth = 32;
			cPosition.X -= cWidth / 2;
		}
		if (type == 243)
		{
			cHeight = 90;
		}
		if (type == 290)
		{
			cHeight = 40;
		}
		if (type == 351)
		{
			cHeight = 40;
		}
		if (type == 482)
		{
			cHeight = 40;
		}
		if (type == 351 || type == 343 || type == 348 || type == 349)
		{
			cHeight = 40;
		}
		if (type == 391)
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == 390 && Main.npc[i].ai[0] == (float)whoAmI)
				{
					cHeight = 62;
					break;
				}
			}
		}
		if (type == 415)
		{
			for (int j = 0; j < 200; j++)
			{
				if (Main.npc[j].active && Main.npc[j].type == 416 && Main.npc[j].ai[0] == (float)whoAmI)
				{
					cHeight = 62;
					break;
				}
			}
		}
		if (type == 576 || type == 577)
		{
			cPosition.X += 32f;
			cWidth -= 64;
		}
		if (cHeight != height)
		{
			cPosition.Y += height - cHeight;
		}
	}

	private void FishTransformationDuringRain()
	{
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0170: Unknown result type (might be due to invalid IL or missing references)
		//IL_0175: Unknown result type (might be due to invalid IL or missing references)
		//IL_018b: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		if (Main.netMode == 1)
		{
			return;
		}
		if (type == 230 && wet)
		{
			int num = direction;
			Vector2 vector = velocity;
			Transform(55);
			direction = num;
			velocity = vector;
			wet = true;
			if (velocity.Y < 0f)
			{
				velocity.Y = 0f;
			}
		}
		else if (type == 55 && !wet && Main.raining)
		{
			int num2 = direction;
			Vector2 vector2 = velocity;
			Transform(230);
			direction = num2;
			velocity = vector2;
			UpdateHomeTileState(homeless, (int)(position.X / 16f) + 10 * direction, homeTileY);
		}
		else if (type == 593 && wet)
		{
			int num3 = direction;
			Vector2 vector3 = velocity;
			Transform(592);
			direction = num3;
			velocity = vector3;
			wet = true;
			if (velocity.Y < 0f)
			{
				velocity.Y = 0f;
			}
		}
		else if (type == 592 && !wet && Main.raining)
		{
			int num4 = direction;
			Vector2 vector4 = velocity;
			Transform(593);
			direction = num4;
			velocity = vector4;
			UpdateHomeTileState(homeless, (int)(position.X / 16f) + 10 * direction, homeTileY);
		}
	}

	private bool Collision_DecideFallThroughPlatforms()
	{
		//IL_01d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0201: Unknown result type (might be due to invalid IL or missing references)
		//IL_0218: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ef: Unknown result type (might be due to invalid IL or missing references)
		bool? flag2 = NPCLoader.CanFallThroughPlatforms(this);
		if (flag2.HasValue)
		{
			return flag2.GetValueOrDefault();
		}
		bool result = false;
		if (type == 2 || type == -43 || type == 190 || type == 191 || type == 192 || type == 193 || type == 194 || type == 317 || type == 318 || type == 133)
		{
			result = true;
		}
		if (aiStyle == 10)
		{
			result = true;
		}
		if (aiStyle == 5)
		{
			result = true;
		}
		if (aiStyle == 40)
		{
			result = true;
		}
		if (aiStyle == 44)
		{
			result = true;
		}
		if (type == 467)
		{
			result = true;
		}
		if (type == 477)
		{
			result = true;
		}
		if (aiStyle == 22)
		{
			result = true;
		}
		if (aiStyle == 49)
		{
			result = true;
		}
		if (aiStyle == 14)
		{
			result = true;
		}
		if (type == 173)
		{
			result = true;
		}
		if (type == 469 && ai[2] == 1f)
		{
			result = true;
		}
		if (aiStyle == 3 && directionY == 1)
		{
			result = true;
		}
		if (type == 210 || type == 211)
		{
			result = true;
		}
		if (type == 50 && target >= 0 && Main.player[target].position.Y > position.Y + (float)height)
		{
			result = true;
		}
		if (type == 657 && target >= 0 && Main.player[target].position.Y > base.Bottom.Y)
		{
			result = true;
		}
		if (aiStyle == 26 && target >= 0 && Main.player[target].Bottom.Y - velocity.Y > base.Bottom.Y)
		{
			result = true;
		}
		if (type == 247 || type == 248)
		{
			result = true;
		}
		if (type == 245 && target >= 0 && Main.player[target].position.Y > position.Y + (float)height)
		{
			result = true;
		}
		if (type >= 542 && type <= 545)
		{
			result = true;
		}
		if (aiStyle == 107 && directionY == 1)
		{
			result = true;
		}
		if (type == 418)
		{
			result = true;
		}
		if (aiStyle == 87 && Main.player[target].position.Y > position.Y + (float)height)
		{
			result = true;
		}
		if (type == 405 || type == 406)
		{
			result = true;
		}
		if (type == 490)
		{
			result = true;
		}
		if (type == 301)
		{
			result = true;
		}
		if (aiStyle == 7)
		{
			int num = 16;
			bool flag = false;
			if (townNPC && (!Main.dayTime || Main.invasionType > 0 || Main.eclipse))
			{
				flag = true;
			}
			else
			{
				int num2 = (int)(position.Y + (float)height) / 16;
				if (homeTileY - num2 > num)
				{
					result = true;
				}
			}
			if (flag && (position.Y + (float)height - 8f) / 16f < (float)(homeTileY - 1))
			{
				result = true;
			}
		}
		if (type == 620)
		{
			result = ((target >= 0 && Main.player[target].position.Y > base.Bottom.Y) ? true : false);
		}
		return result;
	}

	private bool Collision_WaterCollision(bool lava)
	{
		//IL_08ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_08fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f90: Unknown result type (might be due to invalid IL or missing references)
		//IL_0faf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0781: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c20: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c42: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c48: Unknown result type (might be due to invalid IL or missing references)
		//IL_0401: Unknown result type (might be due to invalid IL or missing references)
		//IL_0423: Unknown result type (might be due to invalid IL or missing references)
		//IL_0429: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_09cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0194: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dea: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a71: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a94: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0253: Unknown result type (might be due to invalid IL or missing references)
		//IL_0258: Unknown result type (might be due to invalid IL or missing references)
		//IL_0275: Unknown result type (might be due to invalid IL or missing references)
		//IL_027a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0297: Unknown result type (might be due to invalid IL or missing references)
		//IL_029c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ada: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02be: Unknown result type (might be due to invalid IL or missing references)
		bool flag = false;
		if (type == 72 || aiStyle == 21 || aiStyle == 67 || type == 376 || type == 579 || type == 541 || (aiStyle == 7 && ai[0] == 25f))
		{
			flag = false;
			wetCount = 0;
			lava = false;
		}
		else
		{
			flag = Collision.WetCollision(position, width, height);
			if (Collision.honey)
			{
				honeyWet = true;
			}
			if (Collision.shimmer)
			{
				shimmerWet = true;
				AddBuff(353, 100);
			}
		}
		if (aiStyle == 116)
		{
			wetCount = 10;
		}
		if (flag)
		{
			if (onFire && !lavaWet && Main.netMode != 1)
			{
				for (int i = 0; i < maxBuffs; i++)
				{
					if (buffType[i] == 24)
					{
						DelBuff(i);
					}
				}
			}
			if (!wet && wetCount == 0)
			{
				wetCount = 10;
				if (!lava)
				{
					if (shimmerWet)
					{
						if (type != 617 && type != 616 && type != 625)
						{
							for (int j = 0; j < 30; j++)
							{
								int num = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 308);
								Main.dust[num].velocity.Y -= 4f;
								Main.dust[num].velocity.X *= 2.5f;
								Main.dust[num].scale = 0.8f;
								Main.dust[num].noGravity = true;
								switch (Main.rand.Next(6))
								{
								case 0:
									Main.dust[num].color = new Color(255, 255, 210);
									break;
								case 1:
									Main.dust[num].color = new Color(190, 245, 255);
									break;
								case 2:
									Main.dust[num].color = new Color(255, 150, 255);
									break;
								default:
									Main.dust[num].color = new Color(190, 175, 255);
									break;
								}
							}
							if ((type != 376 && type != 579 && aiStyle != 1 && type != 1 && type != 16 && type != 147 && type != 59 && type != 300 && aiStyle != 39 && aiStyle != 68 && type != 362 && type != 364 && type != 361 && type != 445 && !noGravity) || type == 615)
							{
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y, 4);
							}
						}
					}
					else if (honeyWet)
					{
						for (int k = 0; k < 10; k++)
						{
							int num4 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 152);
							Main.dust[num4].velocity.Y -= 1f;
							Main.dust[num4].velocity.X *= 2.5f;
							Main.dust[num4].scale = 1.3f;
							Main.dust[num4].alpha = 100;
							Main.dust[num4].noGravity = true;
						}
						if (aiStyle != 1 && type != 1 && type != 16 && type != 147 && type != 59 && type != 300 && aiStyle != 39 && !noGravity)
						{
							SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
						}
					}
					else if (type != 617 && type != 616 && type != 625)
					{
						for (int l = 0; l < 30; l++)
						{
							int num5 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, Dust.dustWater());
							Main.dust[num5].velocity.Y -= 4f;
							Main.dust[num5].velocity.X *= 2.5f;
							Main.dust[num5].scale *= 0.8f;
							Main.dust[num5].alpha = 100;
							Main.dust[num5].noGravity = true;
						}
						if ((type != 376 && type != 579 && aiStyle != 1 && type != 1 && type != 16 && type != 147 && type != 59 && type != 300 && aiStyle != 39 && aiStyle != 68 && type != 362 && type != 364 && type != 361 && type != 445 && !noGravity) || type == 615)
						{
							SoundEngine.PlaySound(19, (int)position.X, (int)position.Y, 0);
						}
					}
				}
				else
				{
					for (int m = 0; m < 10; m++)
					{
						int num6 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 35);
						Main.dust[num6].velocity.Y -= 1.5f;
						Main.dust[num6].velocity.X *= 2.5f;
						Main.dust[num6].scale = 1.3f;
						Main.dust[num6].alpha = 100;
						Main.dust[num6].noGravity = true;
					}
					if (aiStyle != 1 && type != 1 && type != 16 && type != 147 && type != 59 && type != 300 && aiStyle != 39 && !noGravity)
					{
						SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
					}
				}
			}
			wet = true;
		}
		else if (wet)
		{
			velocity.X *= 0.5f;
			wet = false;
			if (type == 620 && GetTargetData().Center.Y < base.Center.Y)
			{
				velocity.Y -= 8f;
			}
			if (wetCount == 0)
			{
				wetCount = 10;
				if (!lavaWet)
				{
					if (shimmerWet)
					{
						if (type != 617 && type != 616 && type != 625)
						{
							for (int n = 0; n < 30; n++)
							{
								int num7 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 308);
								Main.dust[num7].velocity.Y -= 4f;
								Main.dust[num7].velocity.X *= 2.5f;
								Main.dust[num7].scale = 0.8f;
								Main.dust[num7].noGravity = true;
								switch (Main.rand.Next(6))
								{
								case 0:
									Main.dust[num7].color = new Color(255, 255, 210);
									break;
								case 1:
									Main.dust[num7].color = new Color(190, 245, 255);
									break;
								case 2:
									Main.dust[num7].color = new Color(255, 150, 255);
									break;
								default:
									Main.dust[num7].color = new Color(190, 175, 255);
									break;
								}
							}
							if ((type != 376 && type != 579 && aiStyle != 1 && type != 1 && type != 16 && type != 147 && type != 59 && type != 300 && aiStyle != 39 && aiStyle != 68 && type != 362 && type != 364 && type != 361 && type != 445 && !noGravity) || type == 615)
							{
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y, 5);
							}
						}
					}
					else if (honeyWet)
					{
						for (int num8 = 0; num8 < 10; num8++)
						{
							int num9 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 152);
							Main.dust[num9].velocity.Y -= 1f;
							Main.dust[num9].velocity.X *= 2.5f;
							Main.dust[num9].scale = 1.3f;
							Main.dust[num9].alpha = 100;
							Main.dust[num9].noGravity = true;
						}
						if (aiStyle != 1 && type != 1 && type != 16 && type != 147 && type != 300 && type != 59 && aiStyle != 39 && !noGravity)
						{
							SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
						}
					}
					else if (type != 617 && type != 616 && type != 625)
					{
						for (int num10 = 0; num10 < 30; num10++)
						{
							int num11 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, Dust.dustWater());
							Main.dust[num11].velocity.Y -= 4f;
							Main.dust[num11].velocity.X *= 2.5f;
							Main.dust[num11].scale *= 0.8f;
							Main.dust[num11].alpha = 100;
							Main.dust[num11].noGravity = true;
						}
						if ((type != 376 && type != 579 && aiStyle != 1 && type != 1 && type != 16 && type != 59 && type != 300 && aiStyle != 39 && aiStyle != 68 && type != 362 && type != 364 && type != 361 && type != 445 && !noGravity) || type == 615)
						{
							SoundEngine.PlaySound(19, (int)position.X, (int)position.Y, 0);
						}
					}
				}
				else
				{
					for (int num2 = 0; num2 < 10; num2++)
					{
						int num3 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 35);
						Main.dust[num3].velocity.Y -= 1.5f;
						Main.dust[num3].velocity.X *= 2.5f;
						Main.dust[num3].scale = 1.3f;
						Main.dust[num3].alpha = 100;
						Main.dust[num3].noGravity = true;
					}
					if (aiStyle != 1 && type != 1 && type != 16 && type != 59 && type != 300 && aiStyle != 39 && !noGravity)
					{
						SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
					}
				}
			}
		}
		return lava;
	}

	private bool Collision_LavaCollision()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		bool flag = Collision.LavaCollision(position, width, height);
		if (type == 441)
		{
			flag = false;
		}
		if (flag)
		{
			lavaWet = true;
			if (!lavaImmune && !dontTakeDamage && Main.netMode != 1 && immune[255] == 0)
			{
				immune[255] = 30;
				if (Main.remixWorld && !friendly)
				{
					AddBuff(24, 180);
				}
				else
				{
					AddBuff(24, 420);
					StrikeNPCNoInteraction(50, 0f, 0);
					if (Main.netMode == 2)
					{
						NetMessage.SendData(28, -1, -1, null, whoAmI, 50f);
					}
				}
			}
		}
		return flag;
	}

	private void Collision_WalkDownSlopes()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		_ = velocity;
		Vector4 vector = Collision.WalkDownSlope(position, velocity, width, height, gravity);
		position.X = vector.X;
		position.Y = vector.Y;
		velocity.X = vector.Z;
		velocity.Y = vector.W;
	}

	public static void setFireFlyChance()
	{
		if (Main.rand == null)
		{
			Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
		}
		if (WorldGen.genRand.Next(9) == 0)
		{
			fireFlyChance = Main.rand.Next(5, 10);
			fireFlyFriendly = Main.rand.Next(1, 4);
			fireFlyMultiple = Main.rand.Next(3, 8);
		}
		else if (WorldGen.genRand.Next(3) == 0)
		{
			fireFlyChance = 999999;
			fireFlyFriendly = 999999;
			fireFlyMultiple = 999999;
		}
		else
		{
			fireFlyChance = Main.rand.Next(10, 60);
			fireFlyFriendly = Main.rand.Next(2, 15);
			fireFlyMultiple = Main.rand.Next(6, 30);
		}
		if (Main.rand.Next(3) == 0)
		{
			butterflyChance = 999999;
			stinkBugChance = Main.rand.Next(1, 14);
			if (WorldGen.genRand.Next(5) == 0)
			{
				stinkBugChance = 999999;
			}
		}
		else
		{
			stinkBugChance = 999999;
			butterflyChance = Main.rand.Next(1, 21);
			if (WorldGen.genRand.Next(5) == 0)
			{
				butterflyChance = 999999;
			}
		}
		if (Main.tenthAnniversaryWorld)
		{
			fireFlyChance = Math.Max(1, (int)((float)fireFlyChance * 0.5f));
			butterflyChance = Math.Max(1, (int)((float)butterflyChance * 0.5f));
		}
	}

	public Color GetBestiaryEntryColor()
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		return Color.White;
	}

	public Color GetAlpha(Color newColor)
	{
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_0218: Unknown result type (might be due to invalid IL or missing references)
		//IL_0219: Unknown result type (might be due to invalid IL or missing references)
		//IL_0223: Unknown result type (might be due to invalid IL or missing references)
		//IL_022e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0241: Unknown result type (might be due to invalid IL or missing references)
		//IL_0246: Unknown result type (might be due to invalid IL or missing references)
		//IL_0250: Unknown result type (might be due to invalid IL or missing references)
		//IL_0255: Unknown result type (might be due to invalid IL or missing references)
		//IL_0267: Unknown result type (might be due to invalid IL or missing references)
		//IL_026f: Unknown result type (might be due to invalid IL or missing references)
		//IL_029c: Unknown result type (might be due to invalid IL or missing references)
		//IL_029d: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02da: Unknown result type (might be due to invalid IL or missing references)
		//IL_02db: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0358: Unknown result type (might be due to invalid IL or missing references)
		//IL_0359: Unknown result type (might be due to invalid IL or missing references)
		//IL_0363: Unknown result type (might be due to invalid IL or missing references)
		//IL_0368: Unknown result type (might be due to invalid IL or missing references)
		//IL_036a: Unknown result type (might be due to invalid IL or missing references)
		//IL_032b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0391: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0417: Unknown result type (might be due to invalid IL or missing references)
		//IL_0437: Unknown result type (might be due to invalid IL or missing references)
		//IL_0438: Unknown result type (might be due to invalid IL or missing references)
		//IL_0442: Unknown result type (might be due to invalid IL or missing references)
		//IL_0447: Unknown result type (might be due to invalid IL or missing references)
		//IL_0449: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_0521: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_057c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0643: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0667: Unknown result type (might be due to invalid IL or missing references)
		//IL_0843: Unknown result type (might be due to invalid IL or missing references)
		//IL_0705: Unknown result type (might be due to invalid IL or missing references)
		//IL_0706: Unknown result type (might be due to invalid IL or missing references)
		//IL_0710: Unknown result type (might be due to invalid IL or missing references)
		//IL_0715: Unknown result type (might be due to invalid IL or missing references)
		//IL_0717: Unknown result type (might be due to invalid IL or missing references)
		//IL_0721: Unknown result type (might be due to invalid IL or missing references)
		//IL_0726: Unknown result type (might be due to invalid IL or missing references)
		//IL_0728: Unknown result type (might be due to invalid IL or missing references)
		if (IsABestiaryIconDummy)
		{
			newColor = Color.White;
		}
		Color? val = NPCLoader.GetAlpha(this, newColor);
		if (val.HasValue)
		{
			return val.GetValueOrDefault();
		}
		float num = (float)(255 - alpha) / 255f;
		int num2 = (int)((float)(int)((Color)(ref newColor)).R * num);
		int num3 = (int)((float)(int)((Color)(ref newColor)).G * num);
		int num4 = (int)((float)(int)((Color)(ref newColor)).B * num);
		int num5 = ((Color)(ref newColor)).A - alpha;
		if (type == 402)
		{
			return new Color(255, 255, 255, 255);
		}
		if (type == 484)
		{
			return new Color(250, 250, 250, 200);
		}
		if (type >= 542 && type <= 545 && num2 + num3 + num4 > 10 && num2 + num3 + num4 >= 60)
		{
			num2 *= 2;
			num3 *= 2;
			num4 *= 2;
			if (num2 > 255)
			{
				num2 = 255;
			}
			if (num3 > 255)
			{
				num3 = 255;
			}
			if (num4 > 255)
			{
				num4 = 255;
			}
		}
		if (type == 681)
		{
			return Color.Lerp(newColor, Color.White, 0.4f) * Opacity;
		}
		if (type == 683 || type == 687)
		{
			float num6 = Utils.Remap(Utils.WrappedLerp(0.75f, 1f, (float)Main.timeForVisualEffects % 120f / 120f), 0f, 1f, 0.5f, 1f);
			Color result = Color.Lerp(newColor, new Color(255, 255, 100), 0.4f * num6) * Opacity;
			if (((Color)(ref result)).B < num4)
			{
				((Color)(ref result)).B = (byte)num4;
			}
			return result;
		}
		if (type == 658 || type == 659 || type == 660)
		{
			return Color.Lerp(newColor, Color.White, 0.4f) * Opacity;
		}
		if (type == 662)
		{
			Color color = Color.Lerp(Color.White, Color.Cyan, 0.5f);
			((Color)(ref color)).A = (byte)(((Color)(ref color)).A / 4);
			return color * Opacity;
		}
		if ((type >= 454 && type <= 459) || type == 521)
		{
			newColor = Color.Lerp(newColor, Color.White, 0.4f);
			((Color)(ref newColor)).A = 150;
			newColor *= (float)num5 / 255f;
			return newColor;
		}
		if (type == 636)
		{
			newColor = Color.Lerp(newColor, Color.White, 0.25f);
			return newColor * Opacity;
		}
		if (type == 440)
		{
			byte b = 180;
			if (Main.expertMode)
			{
				b = 210;
			}
			b = (byte)((float)(int)b * num);
			return new Color((int)b, (int)b, (int)b, (int)b);
		}
		if (type == 583 || type == 584 || type == 585)
		{
			newColor = Color.Lerp(newColor, Color.White, 0.5f);
			return newColor;
		}
		if (type == 516)
		{
			return new Color(alpha, alpha, alpha, alpha);
		}
		if (type == 522)
		{
			return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
		}
		if (type == 523)
		{
			return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
		}
		if (type == 395 || type == 519)
		{
			newColor = Color.Lerp(newColor, Color.White, 0.4f);
			return newColor;
		}
		if (type == 370 && ai[0] != -1f && ai[0] < 9f)
		{
			float num7 = MathHelper.Lerp(num, 1f, 0.25f);
			if (num7 > 1f)
			{
				num7 = 1f;
			}
			num4 = (int)((float)(int)((Color)(ref newColor)).B * num7);
		}
		if (type == 30 || type == 665)
		{
			return new Color(250, 250, 250, 100);
		}
		if (!IsABestiaryIconDummy && (type == 25 || type == 30 || type == 665 || type == 59 || type == 60))
		{
			return new Color(200, 200, 200, 0);
		}
		if (type == 360)
		{
			num2 = ((Color)(ref newColor)).R;
			num3 = ((Color)(ref newColor)).G;
			num4 = ((Color)(ref newColor)).B;
			if (num2 < 75)
			{
				num2 = 75;
			}
			if (num3 < 175)
			{
				num3 = 175;
			}
			if (num4 < 255)
			{
				num4 = 255;
			}
			return new Color(num2, num3, num4, 255);
		}
		if (type == 655)
		{
			num2 = ((Color)(ref newColor)).R;
			num3 = ((Color)(ref newColor)).G;
			num4 = ((Color)(ref newColor)).B;
			if (num2 < 255)
			{
				num2 = 255;
			}
			if (num3 < 100)
			{
				num3 = 100;
			}
			if (num4 < 50)
			{
				num4 = 50;
			}
			return new Color(num2, num3, num4, 255);
		}
		if (type == 352)
		{
			return new Color(255, 255, 255, 200);
		}
		if (type == 72)
		{
			num2 = ((Color)(ref newColor)).R;
			num3 = ((Color)(ref newColor)).G;
			num4 = ((Color)(ref newColor)).B;
		}
		else
		{
			if (type == 288)
			{
				return new Color(200, 200, 200, 0);
			}
			if (type == 289)
			{
				return new Color(250, 250, 250, 50);
			}
			if (type >= 254 && type <= 261)
			{
				num4 = 255;
				if (num2 < 100)
				{
					num2 = 100;
				}
				if (num3 < 150)
				{
					num3 = 150;
				}
			}
			else if (type == 374 || type == 634 || type == 635)
			{
				num4 = 255;
				if (num2 < 100)
				{
					num2 = 100;
				}
				if (num3 < 150)
				{
					num3 = 150;
				}
			}
			else
			{
				if (type == 549)
				{
					newColor = Color.Lerp(newColor, Color.White, 0.4f);
					newColor *= (float)num5 / 255f;
					return newColor;
				}
				if (type == 64 || type == 63 || type == 75 || type == 103 || type == 400)
				{
					num2 = (int)((double)(int)((Color)(ref newColor)).R * 1.5);
					num3 = (int)((double)(int)((Color)(ref newColor)).G * 1.5);
					num4 = (int)((double)(int)((Color)(ref newColor)).B * 1.5);
					if (num2 > 255)
					{
						num2 = 255;
					}
					if (num3 > 255)
					{
						num3 = 255;
					}
					if (num4 > 255)
					{
						num4 = 255;
					}
				}
			}
		}
		if (shimmerTransparency > 0f && !CanApplyHunterPotionEffects())
		{
			num2 = (byte)((float)num2 * (1f - shimmerTransparency));
			num3 = (byte)((float)num3 * (1f - shimmerTransparency));
			num4 = (byte)((float)num4 * (1f - shimmerTransparency));
			num5 = (byte)((float)num5 * (1f - shimmerTransparency));
		}
		if (num5 < 0)
		{
			num5 = 0;
		}
		if (num5 > 255)
		{
			num5 = 255;
		}
		return new Color(num2, num3, num4, num5);
	}

	public Color GetShimmerColor(Color newColor)
	{
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		if (shimmerTransparency > 0f && !CanApplyHunterPotionEffects())
		{
			((Color)(ref newColor)).R = (byte)((float)(int)((Color)(ref newColor)).R * (1f - shimmerTransparency));
			((Color)(ref newColor)).G = (byte)((float)(int)((Color)(ref newColor)).G * (1f - shimmerTransparency));
			((Color)(ref newColor)).B = (byte)((float)(int)((Color)(ref newColor)).B * (1f - shimmerTransparency));
			((Color)(ref newColor)).A = (byte)((float)(int)((Color)(ref newColor)).A * (1f - shimmerTransparency));
		}
		return newColor;
	}

	public Color GetColor(Color newColor)
	{
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		if (IsABestiaryIconDummy)
		{
			newColor = GetBestiaryEntryColor();
		}
		int num = ((Color)(ref color)).R - (255 - ((Color)(ref newColor)).R);
		int num2 = ((Color)(ref color)).G - (255 - ((Color)(ref newColor)).G);
		int num3 = ((Color)(ref color)).B - (255 - ((Color)(ref newColor)).B);
		int num4 = ((Color)(ref color)).A - (255 - ((Color)(ref newColor)).A);
		if (num < 0)
		{
			num = 0;
		}
		if (num > 255)
		{
			num = 255;
		}
		if (num2 < 0)
		{
			num2 = 0;
		}
		if (num2 > 255)
		{
			num2 = 255;
		}
		if (num3 < 0)
		{
			num3 = 0;
		}
		if (num3 > 255)
		{
			num3 = 255;
		}
		if (num4 < 0)
		{
			num4 = 0;
		}
		if (num4 > 255)
		{
			num4 = 255;
		}
		if (shimmerTransparency > 0f && !CanApplyHunterPotionEffects())
		{
			num = (byte)((float)num * (1f - shimmerTransparency));
			num2 = (byte)((float)num2 * (1f - shimmerTransparency));
			num3 = (byte)((float)num3 * (1f - shimmerTransparency));
			num4 = (byte)((float)num4 * (1f - shimmerTransparency));
		}
		return new Color(num, num2, num3, num4);
	}

	public bool ShouldBestiaryGirlBeLycantrope()
	{
		if (!Main.bloodMoon || Main.dayTime)
		{
			if (Main.moonPhase == 0)
			{
				return !Main.dayTime;
			}
			return false;
		}
		return true;
	}

	public string GetChat()
	{
		PreventJojaColaDialog = false;
		RerollDryadText = 0;
		Recipe.FindRecipes();
		bool flag = false;
		bool flag10 = false;
		bool flag11 = false;
		bool flag12 = false;
		bool flag13 = false;
		bool flag14 = false;
		bool flag15 = false;
		bool flag16 = false;
		bool flag17 = false;
		bool flag2 = false;
		bool flag3 = false;
		bool flag4 = false;
		bool flag5 = false;
		bool flag6 = false;
		bool flag7 = false;
		bool flag8 = false;
		bool flag9 = false;
		object obj = Lang.CreateDialogSubstitutionObject(this);
		for (int i = 0; i < 200; i++)
		{
			if (Main.npc[i].active)
			{
				if (Main.npc[i].type == 17)
				{
					flag = true;
				}
				else if (Main.npc[i].type == 18)
				{
					flag10 = true;
				}
				else if (Main.npc[i].type == 19)
				{
					flag11 = true;
				}
				else if (Main.npc[i].type == 20)
				{
					flag12 = true;
				}
				else if (Main.npc[i].type == 37)
				{
					flag13 = true;
				}
				else if (Main.npc[i].type == 38)
				{
					flag14 = true;
				}
				else if (Main.npc[i].type == 124)
				{
					flag15 = true;
				}
				else if (Main.npc[i].type == 107)
				{
					flag16 = true;
				}
				else if (Main.npc[i].type == 54)
				{
					flag17 = true;
				}
				else if (Main.npc[i].type == 160)
				{
					flag2 = true;
				}
				else if (Main.npc[i].type == 178)
				{
					flag3 = true;
				}
				else if (Main.npc[i].type == 229)
				{
					flag4 = true;
				}
				else if (Main.npc[i].type == 209)
				{
					flag5 = true;
				}
				else if (Main.npc[i].type == 208)
				{
					flag6 = true;
				}
				else if (Main.npc[i].type == 353)
				{
					flag7 = true;
				}
				else if (Main.npc[i].type == 22)
				{
					flag8 = true;
				}
				else if (Main.npc[i].type == 441)
				{
					flag9 = true;
				}
			}
		}
		string result = "";
		string specialEventText = "";
		if (type == 17)
		{
			result = (HasSpecialEventText("Merchant", out specialEventText) ? specialEventText : ((!downedBoss1 && Main.rand.Next(3) == 0) ? ((Main.player[Main.myPlayer].statLifeMax < 200) ? Lang.dialog(1) : (((int)Main.player[Main.myPlayer].statDefense > 10) ? Lang.dialog(3) : Lang.dialog(2))) : (Main.dayTime ? ((Main.time < 16200.0) ? (Main.rand.Next(3) switch
			{
				0 => Lang.dialog(4), 
				1 => Lang.dialog(5), 
				_ => Lang.dialog(6), 
			}) : ((Main.time > 37800.0) ? (Main.rand.Next(3) switch
			{
				0 => Lang.dialog(7), 
				1 => Lang.dialog(8), 
				_ => Lang.dialog(9), 
			}) : (Main.rand.Next(3) switch
			{
				0 => Lang.dialog(10), 
				1 => Lang.dialog(11), 
				_ => Lang.dialog(12), 
			}))) : (Main.bloodMoon ? ((flag10 && flag15 && Main.rand.Next(3) == 0) ? Lang.dialog(13) : (Main.rand.Next(4) switch
			{
				0 => Lang.dialog(14), 
				1 => Lang.dialog(15), 
				2 => Lang.dialog(16), 
				_ => Lang.dialog(17), 
			})) : ((Main.time < 9720.0) ? ((Main.rand.Next(2) != 0) ? Lang.dialog(19) : Lang.dialog(18)) : ((Main.time > 22680.0) ? ((Main.rand.Next(2) != 0) ? Lang.dialog(21) : Lang.dialog(20)) : (Main.rand.Next(3) switch
			{
				0 => Lang.dialog(22), 
				1 => Lang.dialog(23), 
				_ => Lang.dialog(24), 
			})))))));
		}
		else if (type == 18)
		{
			if (HasSpecialEventText("Nurse", out specialEventText))
			{
				result = specialEventText;
			}
			else if (Main.bloodMoon)
			{
				result = (((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax2 * 0.66) ? (Main.rand.Next(3) switch
				{
					0 => Lang.dialog(25), 
					1 => Lang.dialog(26), 
					_ => Lang.dialog(27), 
				}) : (Main.rand.Next(4) switch
				{
					0 => Lang.dialog(28), 
					1 => Lang.dialog(29), 
					2 => Lang.dialog(30), 
					_ => Lang.dialog(31), 
				}));
			}
			else if (Main.rand.Next(5) == 0 && Main.LocalPlayer.numberOfDeathsPVE > 1)
			{
				int numberOfDeathsPVE = Main.LocalPlayer.numberOfDeathsPVE;
				int num = 25;
				int num10 = 100;
				string text = "Low";
				if (numberOfDeathsPVE >= num10)
				{
					text = "High";
				}
				else if (numberOfDeathsPVE >= num)
				{
					text = "Medium";
				}
				result = Language.GetTextValueWith("NurseSpecialText.DeathCount" + text, obj);
			}
			else if (Main.rand.Next(3) == 0 && !downedBoss3)
			{
				result = Lang.dialog(32);
			}
			else if (flag14 && Main.rand.Next(4) == 0)
			{
				result = Lang.dialog(33);
			}
			else if (flag11 && Main.rand.Next(4) == 0)
			{
				result = Lang.dialog(34);
			}
			else if (flag8 && Main.rand.Next(4) == 0)
			{
				result = Lang.dialog(35);
			}
			else if ((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax2 * 0.33)
			{
				result = Main.rand.Next(5) switch
				{
					0 => Lang.dialog(36), 
					1 => Lang.dialog(37), 
					2 => Lang.dialog(38), 
					3 => Lang.dialog(39), 
					_ => Lang.dialog(40), 
				};
			}
			else if ((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax2 * 0.66)
			{
				result = Main.rand.Next(7) switch
				{
					0 => Lang.dialog(41), 
					1 => Lang.dialog(42), 
					2 => Lang.dialog(43), 
					3 => Lang.dialog(44), 
					4 => Lang.dialog(45), 
					5 => Lang.dialog(46), 
					_ => Lang.dialog(47), 
				};
			}
			else
			{
				LocalizedText[] array = Language.FindAll(Lang.CreateDialogFilter("NurseChatter.", obj));
				int num11 = Main.rand.Next(4 + array.Length);
				result = ((num11 >= 4) ? array[num11 - 4].FormatWith(obj) : (num11 switch
				{
					0 => Lang.dialog(48), 
					1 => Lang.dialog(49), 
					2 => Lang.dialog(50), 
					_ => Lang.dialog(51), 
				}));
			}
		}
		else if (type == 19)
		{
			result = (HasSpecialEventText("ArmsDealer", out specialEventText) ? specialEventText : ((flag8 && downedBoss3 && !Main.hardMode) ? Lang.dialog(58) : ((flag10 && Main.rand.Next(5) == 0) ? Lang.dialog(59) : ((flag10 && Main.rand.Next(5) == 0) ? Lang.dialog(60) : ((flag12 && Main.rand.Next(5) == 0) ? Lang.dialog(61) : ((flag14 && Main.rand.Next(5) == 0) ? Lang.dialog(62) : ((flag14 && Main.rand.Next(5) == 0) ? Lang.dialog(63) : (Main.bloodMoon ? ((Main.rand.Next(2) != 0) ? Lang.dialog(65) : Lang.dialog(64)) : (Main.rand.Next(3) switch
			{
				0 => Lang.dialog(66), 
				1 => Lang.dialog(67), 
				_ => Lang.dialog(68), 
			})))))))));
		}
		else if (type == 20)
		{
			result = (HasSpecialEventText("Dryad", out specialEventText) ? specialEventText : ((DD2Event.DownedInvasionT1 && Main.rand.Next(6) == 0) ? ((!DD2Event.DownedInvasionT2) ? Language.GetTextValueWith("DryadSpecialText.AfterDD2Tier1", obj) : Language.GetTextValueWith("DryadSpecialText.AfterDD2Tier2", obj)) : ((!downedBoss2 && Main.rand.Next(3) == 0) ? ((!WorldGen.crimson) ? Lang.dialog(69) : Lang.dialog(332)) : ((flag11 && Main.rand.Next(6) == 0) ? Lang.dialog(70) : ((flag && Main.rand.Next(6) == 0) ? Lang.dialog(71) : ((flag13 && Main.rand.Next(6) == 0) ? Lang.dialog(72) : ((flag2 && Main.rand.Next(6) == 0) ? Lang.dialog(238) : (Main.bloodMoon ? (Main.rand.Next(4) switch
			{
				0 => Lang.dialog(73), 
				1 => Lang.dialog(74), 
				2 => Lang.dialog(75), 
				_ => Lang.dialog(76), 
			}) : (Main.rand.Next(5) switch
			{
				0 => (!WorldGen.crimson) ? Lang.dialog(77) : Lang.dialog(333), 
				1 => Lang.dialog(78), 
				2 => Lang.dialog(79), 
				3 => Lang.dialog(80), 
				_ => Lang.dialog(81), 
			})))))))));
			if (Main.LocalPlayer.HasItem(5275))
			{
				result = Language.GetTextValue("StardewTalk.PlayerHasColaButIsNotHoldingIt");
			}
		}
		else if (type == 37)
		{
			result = ((!Main.dayTime || Main.remixWorld) ? ((Main.player[Main.myPlayer].ConsumedLifeCrystals < 10 || (int)Main.player[Main.myPlayer].statDefense < 10) ? (Main.rand.Next(4) switch
			{
				0 => Lang.dialog(85), 
				1 => Lang.dialog(86), 
				2 => Lang.dialog(87), 
				_ => Lang.dialog(88), 
			}) : (Main.rand.Next(4) switch
			{
				0 => Lang.dialog(89), 
				1 => Lang.dialog(90), 
				2 => Lang.dialog(91), 
				_ => Lang.dialog(92), 
			})) : (Main.rand.Next(3) switch
			{
				0 => Lang.dialog(82), 
				1 => Lang.dialog(83), 
				_ => Lang.dialog(84), 
			}));
		}
		else if (type == 38)
		{
			result = (HasSpecialEventText("Demolitionist", out specialEventText) ? specialEventText : ((!downedBoss2 && Main.rand.Next(3) == 0) ? Lang.dialog(93) : (Main.bloodMoon ? (Main.rand.Next(3) switch
			{
				0 => Lang.dialog(94), 
				1 => Lang.dialog(95), 
				_ => Lang.dialog(96), 
			}) : (((DD2Event.DownedInvasionT1 || DD2Event.Ongoing) && Main.rand.Next(5) == 0) ? Language.GetTextValueWith("DemolitionistSpecialText.AfterDD2Start", obj) : ((flag11 && Main.rand.Next(5) == 0) ? Lang.dialog(97) : ((flag11 && Main.rand.Next(5) == 0) ? Lang.dialog(98) : ((flag10 && Main.rand.Next(4) == 0) ? Lang.dialog(99) : ((flag12 && Main.rand.Next(4) == 0) ? Lang.dialog(100) : ((!Main.dayTime) ? (Main.rand.Next(4) switch
			{
				0 => Lang.dialog(101), 
				1 => Lang.dialog(102), 
				2 => Lang.dialog(103), 
				_ => Lang.dialog(104), 
			}) : (Main.rand.Next(5) switch
			{
				0 => Lang.dialog(105), 
				1 => Lang.dialog(106), 
				2 => Lang.dialog(107), 
				3 => Lang.dialog(108), 
				_ => Lang.dialog(109), 
			}))))))))));
		}
		else if (type == 54)
		{
			result = (HasSpecialEventText("Clothier", out specialEventText) ? specialEventText : ((!flag15 && Main.rand.Next(2) == 0) ? Lang.dialog(110) : ((flag2 && Main.rand.Next(6) == 0) ? Lang.dialog(237) : (Main.bloodMoon ? Lang.dialog(111) : ((flag10 && Main.rand.Next(4) == 0) ? Lang.dialog(112) : ((Main.player[Main.myPlayer].head == 24) ? Lang.dialog(113) : (Main.rand.Next(6) switch
			{
				0 => Lang.dialog(114), 
				1 => Lang.dialog(115), 
				2 => Lang.dialog(116), 
				3 => Lang.dialog(117), 
				4 => Lang.dialog(118), 
				_ => Lang.dialog(119), 
			})))))));
		}
		else if (type == 105)
		{
			result = Lang.dialog(120);
		}
		else if (type == 107)
		{
			if (homeless)
			{
				result = Main.rand.Next(5) switch
				{
					0 => Lang.dialog(121), 
					1 => Lang.dialog(122), 
					2 => Lang.dialog(123), 
					3 => Lang.dialog(124), 
					_ => Lang.dialog(125), 
				};
			}
			else if (HasSpecialEventText("GoblinTinkerer", out specialEventText))
			{
				result = specialEventText;
			}
			else if (flag15 && Main.rand.Next(5) == 0)
			{
				result = Lang.dialog(126);
			}
			else if (flag7 && Main.rand.Next(5) == 0)
			{
				result = Lang.dialog(309);
			}
			else
			{
				LocalizedText[] array2 = Language.FindAll(Lang.CreateDialogFilter("GoblinTinkererChatter.", obj));
				int num12 = Main.rand.Next(array2.Length + 5);
				result = ((num12 >= 5) ? array2[num12 - 5].FormatWith(obj) : ((!Main.dayTime) ? (num12 switch
				{
					0 => Lang.dialog(127), 
					1 => Lang.dialog(128), 
					2 => Lang.dialog(129), 
					3 => Lang.dialog(130), 
					_ => Lang.dialog(131), 
				}) : (num12 switch
				{
					0 => Lang.dialog(132), 
					1 => Lang.dialog(133), 
					2 => Lang.dialog(134), 
					3 => Lang.dialog(135), 
					_ => Lang.dialog(136), 
				})));
			}
		}
		else if (type == 106)
		{
			result = Lang.dialog(137);
		}
		else if (type == 108)
		{
			if (homeless)
			{
				int num13 = Main.rand.Next(3);
				if (num13 == 0)
				{
					result = Lang.dialog(138);
				}
				else if (num13 == 1 && !Main.player[Main.myPlayer].Male)
				{
					result = Lang.dialog(139);
				}
				else
				{
					switch (num13)
					{
					case 1:
						result = Lang.dialog(140);
						break;
					case 2:
						result = Lang.dialog(141);
						break;
					}
				}
			}
			else if (HasLuckTextForWizard(out specialEventText))
			{
				result = specialEventText;
			}
			else if (HasSpecialEventText("Wizard", out specialEventText))
			{
				result = specialEventText;
			}
			else if (DD2Event.DownedInvasionT1 && Main.rand.Next(6) == 0)
			{
				result = Language.GetTextValueWith("WizardSpecialText.AfterDD2Tier1", obj);
			}
			else if (Main.player[Main.myPlayer].Male && flag8 && Main.rand.Next(6) == 0)
			{
				result = Lang.dialog(142);
			}
			else if (Main.player[Main.myPlayer].Male && flag14 && Main.rand.Next(6) == 0)
			{
				result = Lang.dialog(143);
			}
			else if (Main.player[Main.myPlayer].Male && flag16 && Main.rand.Next(6) == 0)
			{
				result = Lang.dialog(144);
			}
			else if (!Main.player[Main.myPlayer].Male && flag10 && Main.rand.Next(6) == 0)
			{
				result = Lang.dialog(145);
			}
			else if (!Main.player[Main.myPlayer].Male && flag15 && Main.rand.Next(6) == 0)
			{
				result = Lang.dialog(146);
			}
			else if (!Main.player[Main.myPlayer].Male && flag12 && Main.rand.Next(6) == 0)
			{
				result = Lang.dialog(147);
			}
			else if (Main.dayTime)
			{
				result = Main.rand.Next(5) switch
				{
					0 => Lang.dialog(151), 
					1 => Lang.dialog(152), 
					2 => Lang.dialog(153), 
					3 => Lang.dialog(154), 
					_ => Lang.dialog(155), 
				};
			}
			else
			{
				switch (Main.rand.Next(3))
				{
				case 0:
					result = Lang.dialog(148);
					break;
				case 1:
					result = Lang.dialog(149);
					break;
				case 2:
					result = Lang.dialog(150);
					break;
				}
			}
		}
		else if (type == 123)
		{
			result = Lang.dialog(156);
		}
		else if (type == 124)
		{
			if (homeless)
			{
				result = Main.rand.Next(4) switch
				{
					0 => Lang.dialog(157), 
					1 => Lang.dialog(158), 
					2 => Lang.dialog(159), 
					_ => Lang.dialog(160), 
				};
			}
			else if (HasSpecialEventText("Mechanic", out specialEventText))
			{
				result = specialEventText;
			}
			else if (Main.bloodMoon)
			{
				result = Main.rand.Next(4) switch
				{
					0 => Lang.dialog(161), 
					1 => Lang.dialog(162), 
					2 => Lang.dialog(163), 
					_ => Lang.dialog(164), 
				};
			}
			else if (flag16 && Main.rand.Next(6) == 0)
			{
				result = Lang.dialog(165);
			}
			else if (flag11 && Main.rand.Next(6) == 0)
			{
				result = Lang.dialog(166);
			}
			else
			{
				LocalizedText[] array3 = Language.FindAll(Lang.CreateDialogFilter("MechanicChatter.", obj));
				int num14 = Main.rand.Next(3 + array3.Length);
				result = ((num14 >= 3) ? array3[num14 - 3].FormatWith(obj) : (num14 switch
				{
					0 => Lang.dialog(167), 
					1 => Lang.dialog(168), 
					_ => Lang.dialog(169), 
				}));
			}
		}
		else if (type == 22)
		{
			result = (HasSpecialEventText("Guide", out specialEventText) ? specialEventText : (Main.bloodMoon ? (Main.rand.Next(3) switch
			{
				0 => Lang.dialog(170), 
				1 => Lang.dialog(171), 
				_ => Lang.dialog(172), 
			}) : ((LanternNight.LanternsUp && !downedMoonlord) ? Language.GetTextValue("GuideSpecialText.Lantern1") : ((LanternNight.LanternsUp && downedMoonlord) ? Language.GetTextValue("GuideSpecialText.Lantern2") : (Main.eclipse ? Language.GetTextValue("GuideSpecialText.Eclipse") : (Main.slimeRain ? Language.GetTextValue("GuideSpecialText.SlimeRain") : ((!Main.dayTime) ? Lang.dialog(173) : ((Main.hardMode && flag9 && Main.rand.Next(8) == 0) ? Language.GetTextValueWith("GuideChatter.Chatter_1", obj) : ((Main.hardMode && Main.rand.Next(8) == 0) ? Language.GetTextValue("GuideChatter.Chatter_2") : (Main.rand.Next(3) switch
			{
				0 => Lang.dialog(174), 
				1 => Lang.dialog(175), 
				_ => Lang.dialog(176), 
			}))))))))));
		}
		else if (type == 142)
		{
			int num15 = Main.rand.Next(3);
			if (HasSpecialEventText("Santa", out specialEventText))
			{
				result = specialEventText;
			}
			else
			{
				switch (num15)
				{
				case 0:
					result = Lang.dialog(224);
					break;
				case 1:
					result = Lang.dialog(225);
					break;
				case 2:
					result = Lang.dialog(226);
					break;
				}
			}
		}
		else if (type == 160)
		{
			int num16 = Main.rand.Next(6);
			if (HasSpecialEventText("Truffle", out specialEventText))
			{
				result = specialEventText;
			}
			else if (flag12 && Main.rand.Next(6) == 0)
			{
				result = Lang.dialog(232);
			}
			else if (flag17 && Main.rand.Next(6) == 0)
			{
				result = Lang.dialog(236);
			}
			else
			{
				switch (num16)
				{
				case 0:
					result = Lang.dialog(231);
					break;
				case 1:
					result = Lang.dialog(233);
					break;
				case 2:
					result = Lang.dialog(234);
					break;
				case 3:
					result = Lang.dialog(235);
					break;
				case 4:
					result = Lang.dialog(240);
					break;
				case 5:
					result = Lang.dialog(241);
					break;
				}
			}
		}
		else if (type == 178)
		{
			int num17 = Main.rand.Next(5);
			if (HasSpecialEventText("Steampunker", out specialEventText))
			{
				result = specialEventText;
			}
			else if (Main.bloodMoon && Main.rand.Next(3) == 0)
			{
				result = Lang.dialog(245);
			}
			else if (flag5 && Main.rand.Next(6) == 0)
			{
				result = Lang.dialog(246);
			}
			else if (flag4 && Main.rand.Next(6) == 0)
			{
				result = Lang.dialog(247);
			}
			else
			{
				switch (num17)
				{
				case 0:
					result = Lang.dialog(242);
					break;
				case 1:
					result = Lang.dialog(243);
					break;
				case 2:
					result = Lang.dialog(244);
					break;
				case 3:
					result = Lang.dialog(248);
					break;
				case 4:
					result = Lang.dialog(249);
					break;
				}
			}
		}
		else if (type == 207)
		{
			int num2 = Main.rand.Next(3);
			if (HasSpecialEventText("DyeTrader", out specialEventText))
			{
				result = specialEventText;
			}
			else if (flag4 && Main.rand.Next(6) == 0)
			{
				result = Lang.dialog(260);
			}
			else
			{
				switch (num2)
				{
				case 0:
					result = Lang.dialog(257);
					break;
				case 1:
					result = Lang.dialog(258);
					break;
				case 2:
					result = Lang.dialog(259);
					break;
				}
			}
		}
		else if (type == 208)
		{
			if (freeCake)
			{
				result = Language.GetTextValueWith("PartyGirlSpecialText.Cake" + Main.rand.Next(1, 4), obj);
			}
			else
			{
				int num3 = Main.rand.Next(7);
				if (HasSpecialEventText("PartyGirl", out specialEventText))
				{
					result = specialEventText;
				}
				else if (DD2Event.DownedInvasionT1 && Main.rand.Next(5) == 0)
				{
					result = Language.GetTextValueWith("PartyGirlSpecialText.AfterDD2Tier1", obj);
				}
				else if (Main.player[Main.myPlayer].Male && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(268);
				}
				else if (flag7 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(310);
				}
				else
				{
					switch (num3)
					{
					case 0:
						result = Lang.dialog(265);
						break;
					case 1:
						result = Lang.dialog(266);
						break;
					case 2:
						result = Lang.dialog(267);
						break;
					case 3:
						result = Lang.dialog(269);
						break;
					case 4:
						result = Lang.dialog(270);
						break;
					case 5:
						result = Lang.dialog(271);
						break;
					case 6:
						result = Lang.dialog(272);
						break;
					}
				}
			}
		}
		else if (type == 209)
		{
			if (HasSpecialEventText("Cyborg", out specialEventText))
			{
				result = specialEventText;
			}
			else if (flag4 && Main.rand.Next(6) == 0)
			{
				result = Lang.dialog(284);
			}
			else if (flag3 && Main.rand.Next(6) == 0)
			{
				result = Lang.dialog(283);
			}
			else
			{
				LocalizedText[] array4 = Language.FindAll(Lang.CreateDialogFilter("CyborgChatter.", obj));
				int num4 = Main.rand.Next(5 + array4.Length);
				if (num4 >= 5)
				{
					result = array4[num4 - 5].FormatWith(obj);
				}
				else
				{
					switch (num4)
					{
					case 0:
						result = Lang.dialog(280);
						break;
					case 1:
						result = Lang.dialog(281);
						break;
					case 2:
						result = Lang.dialog(282);
						break;
					case 3:
						result = Lang.dialog(285);
						break;
					case 4:
						result = Lang.dialog(286);
						break;
					}
				}
			}
		}
		else if (type == 227)
		{
			int num5 = Main.rand.Next(5);
			if (HasSpecialEventText("Painter", out specialEventText))
			{
				result = specialEventText;
			}
			else if (Main.hardMode && Main.rand.Next(7) == 0)
			{
				result = Lang.dialog(250);
			}
			else if (flag6 && Main.rand.Next(6) == 0)
			{
				result = Lang.dialog(251);
			}
			else
			{
				switch (num5)
				{
				case 0:
					result = Lang.dialog(252);
					break;
				case 1:
					result = Lang.dialog(253);
					break;
				case 2:
					result = Lang.dialog(254);
					break;
				case 3:
					result = Lang.dialog(255);
					break;
				case 4:
					result = Lang.dialog(256);
					break;
				}
			}
		}
		else if (type == 228)
		{
			int num6 = Main.rand.Next(4);
			if (HasSpecialEventText("WitchDoctor", out specialEventText))
			{
				result = specialEventText;
			}
			else if (flag10 && Main.rand.Next(4) == 0)
			{
				result = Lang.dialog(263);
			}
			else
			{
				switch (num6)
				{
				case 0:
					result = Lang.dialog(261);
					break;
				case 1:
					result = Lang.dialog(262);
					break;
				case 2:
					result = Lang.dialog(264);
					break;
				case 3:
					result = Language.GetTextValueWith("WitchDoctorSpecialText.AfterDD2Tier1", obj);
					break;
				}
			}
		}
		else if (type == 229)
		{
			LocalizedText[] array5 = Language.FindAll(Lang.CreateDialogFilter("PirateChatter.", obj));
			int num7 = Main.rand.Next(6 + array5.Length);
			if (num7 >= 6)
			{
				result = array5[num7 - 6].FormatWith(obj);
			}
			else if (HasSpecialEventText("Pirate", out specialEventText))
			{
				result = specialEventText;
			}
			else if (!Main.player[Main.myPlayer].Male && Main.rand.Next(5) == 0)
			{
				result = Lang.dialog(276);
			}
			else
			{
				switch (num7)
				{
				case 0:
					result = Lang.dialog(273);
					break;
				case 1:
					result = Lang.dialog(274);
					break;
				case 2:
					result = Lang.dialog(275);
					break;
				case 3:
					result = Lang.dialog(277);
					break;
				case 4:
					result = Lang.dialog(278);
					break;
				case 5:
					result = Lang.dialog(279);
					break;
				}
			}
		}
		else if (type == 354)
		{
			result = Lang.dialog(Main.rand.Next(315, 319));
		}
		else if (type == 353)
		{
			if (HasSpecialEventText("Stylist", out specialEventText))
			{
				result = specialEventText;
			}
			else if (Main.bloodMoon)
			{
				switch (Main.rand.Next(3))
				{
				case 0:
					result = Lang.dialog(304);
					break;
				case 1:
					result = Lang.dialog(305);
					break;
				case 2:
					result = Lang.dialog(306);
					break;
				}
			}
			else if (Main.dayTime && Main.time < 16200.0 && Main.rand.Next(3) == 0)
			{
				result = Lang.dialog(311);
			}
			else if (Main.player[Main.myPlayer].Male && Main.rand.Next(3) == 0)
			{
				switch (Main.rand.Next(2))
				{
				case 0:
					result = Lang.dialog(293);
					break;
				case 1:
					result = Lang.dialog(300);
					break;
				}
			}
			else if (!Main.player[Main.myPlayer].Male && Main.rand.Next(3) == 0)
			{
				switch (Main.rand.Next(3))
				{
				case 0:
					result = Lang.dialog(291);
					break;
				case 1:
					result = Lang.dialog(292);
					break;
				case 2:
					result = Lang.dialog(312);
					break;
				}
			}
			else if (flag6 && flag15 && flag10 && flag11 && Main.rand.Next(5) == 0)
			{
				result = Lang.dialog(307);
			}
			else if (flag6 && Main.rand.Next(5) == 0)
			{
				result = Lang.dialog(302);
			}
			else if (flag14 && Main.rand.Next(5) == 0)
			{
				result = Lang.dialog(303);
			}
			else if (flag5 && Main.rand.Next(5) == 0)
			{
				result = Lang.dialog(308);
			}
			else
			{
				LocalizedText[] array6 = Language.FindAll(Lang.CreateDialogFilter("StylistChatter.", obj));
				int num8 = ((Main.moonPhase < 3) ? 5 : 4);
				int num9 = Main.rand.Next(num8 + array6.Length);
				if (num9 >= num8)
				{
					result = array6[num9 - num8].FormatWith(obj);
				}
				else if (Main.moonPhase < 3)
				{
					switch (num9)
					{
					case 0:
						result = Lang.dialog(287);
						break;
					case 1:
						result = Lang.dialog(288);
						break;
					case 2:
						result = Lang.dialog(289);
						break;
					case 3:
						result = Lang.dialog(290);
						break;
					case 4:
						result = Lang.dialog(294);
						break;
					}
				}
				else if (Main.moonPhase < 6)
				{
					switch (num9)
					{
					case 0:
						result = Lang.dialog(295);
						break;
					case 1:
						result = Lang.dialog(296);
						break;
					case 2:
						result = Lang.dialog(297);
						break;
					case 3:
						result = Lang.dialog(298);
						break;
					}
				}
				else
				{
					switch (num9)
					{
					case 0:
						result = Lang.dialog(299);
						break;
					case 1:
						result = Lang.dialog(301);
						break;
					case 2:
						result = Lang.dialog(313);
						break;
					case 3:
						result = Lang.dialog(314);
						break;
					}
				}
			}
		}
		else if (type == 368)
		{
			result = (HasSpecialEventText("TravellingMerchant", out specialEventText) ? specialEventText : ((flag8 && Main.rand.Next(5) == 0) ? Lang.dialog(319) : ((flag && Main.rand.Next(5) == 0) ? Lang.dialog(320) : ((!flag17 || Main.rand.Next(5) != 0) ? Lang.dialog(Main.rand.Next(322, 331)) : Lang.dialog(321)))));
		}
		else if (type == 376)
		{
			result = Lang.dialog(Main.rand.Next(353, 356));
		}
		else if (type == 369)
		{
			result = ((Main.rand.Next(5) == 0 && Main.LocalPlayer.anglerQuestsFinished > 1) ? Lang.AnglerQuestCountChat(this) : (HasSpecialEventText("Angler", out specialEventText) ? specialEventText : ((!Main.bloodMoon) ? ((!Main.anglerQuestFinished) ? Lang.dialog(Main.rand.Next(334, 338)) : ((!flag12 || Main.rand.Next(5) != 0) ? Language.SelectRandom(Lang.CreateDialogFilter("AnglerChatter.", obj)).FormatWith(obj) : Lang.dialog(347))) : ((Main.rand.Next(3) == 0) ? Language.SelectRandom(Lang.CreateDialogFilter("AnglerSpecialText.BloodMoonFishing")).FormatWith(obj) : (Main.anglerQuestFinished ? Lang.dialog(Main.rand.Next(350, 353)) : Lang.dialog(Main.rand.Next(348, 350)))))));
		}
		else if (type == 453)
		{
			result = ((!HasSpecialEventText("SkeletonMerchant", out specialEventText)) ? Lang.dialog(Main.rand.Next(356, 364)) : specialEventText);
		}
		else if (type == 441)
		{
			result = (HasSpecialEventText("TaxCollector", out specialEventText) ? specialEventText : ((Main.rand.Next(6) == 0 && flag12) ? Lang.dialog(371) : ((Main.rand.Next(6) == 0 && flag11) ? Lang.dialog(372) : ((Main.rand.Next(6) == 0 && flag14) ? Lang.dialog(373) : ((!(Main.rand.Next(6) == 0 && flag)) ? Lang.dialog(Main.rand.Next(364, 370)) : Lang.dialog(374))))));
		}
		else if (type == 579)
		{
			result = Language.GetTextValue("BartenderSpecialText.FirstMeeting");
		}
		else if (type == 550)
		{
			result = ((!HasSpecialEventText("Bartender", out specialEventText)) ? Lang.BartenderChat(this) : specialEventText);
		}
		else if (type == 589)
		{
			result = ((Main.rand.Next(2) != 0) ? Language.GetTextValue("GolferSpecialText.FirstMeeting2") : Language.GetTextValue("GolferSpecialText.FirstMeeting1"));
		}
		else if (type == 588)
		{
			result = ((Main.rand.Next(3) != 0 && HasSpecialEventText("Golfer", out specialEventText)) ? specialEventText : ((Main.rand.Next(3) != 0) ? Lang.GolferChat(this) : Language.SelectRandom(Lang.CreateDialogFilter(((Main.LocalPlayer.golferScoreAccumulated >= 2000) ? "GolferQuestsChatterMaster" : ((Main.LocalPlayer.golferScoreAccumulated >= 1000) ? "GolferQuestsChatterJourneyman" : ((Main.LocalPlayer.golferScoreAccumulated < 500) ? "GolferQuestsChatterBeginner" : "GolferQuestsChatterApprentice"))) + ".")).FormatWith(obj)));
		}
		else if (type == 633)
		{
			result = ((ShouldBestiaryGirlBeLycantrope() || !HasSpecialEventText("BestiaryGirl", out specialEventText)) ? Lang.BestiaryGirlChat(this) : specialEventText);
		}
		else if (type == 663)
		{
			result = ((!HasSpecialEventText("Princess", out specialEventText)) ? Lang.PrincessChat(this) : specialEventText);
		}
		else if (type == 637)
		{
			result = ((!HasSpecialEventText("Cat", out specialEventText)) ? Lang.CatChat(this) : specialEventText);
		}
		else if (type == 638)
		{
			result = ((!HasSpecialEventText("Dog", out specialEventText)) ? Lang.DogChat(this) : specialEventText);
		}
		else if (type == 656)
		{
			result = ((!HasSpecialEventText("Bunny", out specialEventText)) ? Lang.BunnyChat(this) : specialEventText);
		}
		else if (NPCID.Sets.IsTownSlime[type])
		{
			result = ((!HasSpecialEventText("Slime", out specialEventText)) ? Lang.SlimeChat(this) : specialEventText);
		}
		NPCLoader.GetChat(this, ref result);
		return result;
	}

	public object Clone()
	{
		return MemberwiseClone();
	}

	public bool HasLuckTextForWizard(out string specialEventText)
	{
		specialEventText = null;
		object obj = Lang.CreateDialogSubstitutionObject(this);
		if (Main.rand.Next(3) == 0)
		{
			float normalizedLuck = Main.player[Main.myPlayer].NormalizedLuck;
			if (normalizedLuck == 0f)
			{
				return false;
			}
			string text = null;
			text = ((normalizedLuck < -0.6f) ? "WizardSpecialText.LuckIsCursed" : ((normalizedLuck < -0.4f) ? "WizardSpecialText.LuckIsTerrible" : ((normalizedLuck < -0.2f) ? "WizardSpecialText.LuckIsPoor" : ((normalizedLuck < 0f) ? "WizardSpecialText.LuckIsBad" : ((normalizedLuck < 0.25f) ? "WizardSpecialText.LuckIsGood" : ((normalizedLuck < 0.5f) ? "WizardSpecialText.LuckIsGreat" : ((!(normalizedLuck < 0.75f)) ? "WizardSpecialText.LuckIsGodly" : "WizardSpecialText.LuckIsAmazing")))))));
			specialEventText = Language.SelectRandom(Lang.CreateDialogFilter(text)).FormatWith(obj);
			return true;
		}
		return false;
	}

	public bool HasSpecialEventText(string specialTextCategoryKey, out string specialEventText)
	{
		specialEventText = null;
		object substitutes = Lang.CreateDialogSubstitutionObject(this);
		if (Main.LocalPlayer.ZoneGraveyard && Main.rand.Next(3) == 0 && GetSpecialEventTextIfNotEmpty(specialTextCategoryKey + "SpecialText.Graveyard", substitutes, ref specialEventText))
		{
			return true;
		}
		if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0 && !NPCID.Sets.HasNoPartyText[type] && GetSpecialEventTextIfNotEmpty(specialTextCategoryKey + "SpecialText.Party", substitutes, ref specialEventText))
		{
			return true;
		}
		if (Main.raining && !Main.IsItStorming && Main.rand.Next(3) == 0 && GetSpecialEventTextIfNotEmpty(specialTextCategoryKey + "SpecialText.Rain", substitutes, ref specialEventText))
		{
			return true;
		}
		if (Main.IsItAHappyWindyDay && Main.rand.Next(3) == 0 && GetSpecialEventTextIfNotEmpty(specialTextCategoryKey + "SpecialText.Windy", substitutes, ref specialEventText))
		{
			return true;
		}
		if (Main.IsItStorming && Main.rand.Next(3) == 0 && GetSpecialEventTextIfNotEmpty(specialTextCategoryKey + "SpecialText.Storm", substitutes, ref specialEventText))
		{
			return true;
		}
		return false;
	}

	public bool GetSpecialEventTextIfNotEmpty(string specialTextKey, object substitutes, ref string specialEventText)
	{
		LocalizedText localizedText = Language.SelectRandom(Lang.CreateDialogFilter(specialTextKey));
		if (localizedText != LocalizedText.Empty)
		{
			specialEventText = localizedText.FormatWith(substitutes);
			return true;
		}
		return false;
	}

	public void CheckDrowning()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_017a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		//IL_019d: Unknown result type (might be due to invalid IL or missing references)
		bool flag = Collision.DrownCollision(position, width, height, 1f);
		if (Main.netMode != 1)
		{
			if (flag)
			{
				if (++breathCounter >= 7)
				{
					breathCounter = 0;
					breath--;
					if (breath <= 0)
					{
						friendlyRegen = 0;
						breath = 0;
						life -= 2;
						if (life % 24 < 2)
						{
							netUpdate = true;
						}
						if (life <= 0)
						{
							life = 1;
							StrikeNPCNoInteraction(2, 0f, 0);
							if (Main.netMode != 0)
							{
								NetMessage.SendData(28, -1, -1, null, whoAmI, 2f);
							}
						}
					}
				}
			}
			else
			{
				breath += 3;
				if (breath > 200)
				{
					breath = 200;
				}
				breathCounter = 0;
			}
		}
		if (flag && Main.rand.Next(20) == 0 && !lavaWet && !honeyWet && !shimmerWet)
		{
			int num = 0;
			int num2 = 0;
			if (type == 369)
			{
				num2 = 8;
			}
			Dust.NewDust(new Vector2(position.X + (float)((10 + num) * direction), position.Y + (float)num2 + 4f), width - 8, 8, 34, 0f, 0f, 0, default(Color), 1.2f);
		}
	}

	public void TryPortalJumping()
	{
		if (townNPC && Main.netMode != 1)
		{
			PortalHelper.TryGoingThroughPortals(this);
		}
	}

	public static void GetMeleeCollisionData(Rectangle victimHitbox, int enemyIndex, ref int specialHitSetter, ref float damageMultiplier, ref Rectangle npcRect)
	{
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0155: Unknown result type (might be due to invalid IL or missing references)
		//IL_012e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0202: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_024c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0224: Unknown result type (might be due to invalid IL or missing references)
		//IL_025a: Unknown result type (might be due to invalid IL or missing references)
		//IL_025c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0349: Unknown result type (might be due to invalid IL or missing references)
		//IL_0384: Unknown result type (might be due to invalid IL or missing references)
		//IL_038f: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0377: Unknown result type (might be due to invalid IL or missing references)
		//IL_041c: Unknown result type (might be due to invalid IL or missing references)
		//IL_03af: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0466: Unknown result type (might be due to invalid IL or missing references)
		//IL_043e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0474: Unknown result type (might be due to invalid IL or missing references)
		//IL_0476: Unknown result type (might be due to invalid IL or missing references)
		//IL_0506: Unknown result type (might be due to invalid IL or missing references)
		//IL_0541: Unknown result type (might be due to invalid IL or missing references)
		//IL_054c: Unknown result type (might be due to invalid IL or missing references)
		//IL_055e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0534: Unknown result type (might be due to invalid IL or missing references)
		//IL_0569: Unknown result type (might be due to invalid IL or missing references)
		//IL_056b: Unknown result type (might be due to invalid IL or missing references)
		NPC nPC = Main.npc[enemyIndex];
		if (!NPCLoader.ModifyCollisionData(nPC, victimHitbox, ref specialHitSetter, ref damageMultiplier, ref npcRect))
		{
			return;
		}
		if (((nPC.type >= 430 && nPC.type <= 436) || nPC.type == 591) && nPC.ai[2] > 5f)
		{
			int num = 34;
			if (nPC.spriteDirection < 0)
			{
				npcRect.X -= num;
				npcRect.Width += num;
			}
			else
			{
				npcRect.Width += num;
			}
			damageMultiplier *= 1.25f;
		}
		else if (nPC.type >= 494 && nPC.type <= 495 && nPC.ai[2] > 5f)
		{
			int num2 = 18;
			if (nPC.spriteDirection < 0)
			{
				npcRect.X -= num2;
				npcRect.Width += num2;
			}
			else
			{
				npcRect.Width += num2;
			}
			damageMultiplier *= 1.25f;
		}
		else if (nPC.type == 460)
		{
			Rectangle rectangle = default(Rectangle);
			((Rectangle)(ref rectangle))._002Ector(0, 0, 30, 14);
			rectangle.X = (int)nPC.Center.X;
			if (nPC.direction < 0)
			{
				rectangle.X -= rectangle.Width;
			}
			rectangle.Y = (int)nPC.position.Y + nPC.height - 20;
			if (((Rectangle)(ref victimHitbox)).Intersects(rectangle))
			{
				npcRect = rectangle;
				damageMultiplier *= 1.35f;
			}
		}
		else if (nPC.type == 417 && nPC.ai[0] == 6f && nPC.ai[3] > 0f && nPC.ai[3] < 4f)
		{
			Rectangle rectangle2 = Utils.CenteredRectangle(nPC.Center, new Vector2(100f));
			if (((Rectangle)(ref victimHitbox)).Intersects(rectangle2))
			{
				npcRect = rectangle2;
				damageMultiplier *= 1.35f;
			}
		}
		else if (nPC.type == 466)
		{
			Rectangle rectangle3 = default(Rectangle);
			((Rectangle)(ref rectangle3))._002Ector(0, 0, 30, 8);
			rectangle3.X = (int)nPC.Center.X;
			if (nPC.direction < 0)
			{
				rectangle3.X -= rectangle3.Width;
			}
			rectangle3.Y = (int)nPC.position.Y + nPC.height - 32;
			if (((Rectangle)(ref victimHitbox)).Intersects(rectangle3))
			{
				npcRect = rectangle3;
				damageMultiplier *= 1.75f;
			}
		}
		else if (nPC.type == 576 || nPC.type == 577)
		{
			NPC nPC2 = nPC;
			bool flag = true;
			int y = nPC2.frame.Y;
			int num3 = 0;
			int num4 = 0;
			Rectangle rectangle4 = default(Rectangle);
			((Rectangle)(ref rectangle4))._002Ector(0, 0, 30, 8);
			switch (y)
			{
			case 15:
				specialHitSetter = 2;
				rectangle4.Width = 120;
				rectangle4.Height = 30;
				num4 = 24;
				break;
			case 16:
				specialHitSetter = 2;
				rectangle4.Width = 120;
				rectangle4.Height = 60;
				num3 = 10;
				break;
			case 17:
				specialHitSetter = 2;
				rectangle4.Width = 100;
				rectangle4.Height = 90;
				num3 = 50;
				break;
			case 18:
				specialHitSetter = 2;
				rectangle4.Width = 100;
				rectangle4.Height = 50;
				num3 = 90;
				num4 = 10;
				break;
			default:
				flag = false;
				break;
			}
			if (flag)
			{
				rectangle4.X = (int)nPC2.Center.X - num3 * nPC2.direction;
				if (nPC2.direction < 0)
				{
					rectangle4.X -= rectangle4.Width;
				}
				rectangle4.Y = (int)nPC2.Center.Y - rectangle4.Height + num4;
				if (((Rectangle)(ref victimHitbox)).Intersects(rectangle4))
				{
					npcRect = rectangle4;
					damageMultiplier *= 1.75f;
				}
			}
		}
		else if ((nPC.type == 552 || nPC.type == 553 || nPC.type == 554) && nPC.ai[0] > 0f && nPC.ai[0] < 24f)
		{
			Rectangle rectangle5 = default(Rectangle);
			((Rectangle)(ref rectangle5))._002Ector(0, 0, 34, 14);
			rectangle5.X = (int)nPC.Center.X;
			if (nPC.direction < 0)
			{
				rectangle5.X -= rectangle5.Width;
			}
			rectangle5.Y = (int)nPC.position.Y + nPC.height - 20;
			if (((Rectangle)(ref victimHitbox)).Intersects(rectangle5))
			{
				npcRect = rectangle5;
				damageMultiplier *= 1.35f;
			}
		}
		else
		{
			if (nPC.type != 668)
			{
				return;
			}
			npcRect.Height -= 80;
			NPC nPC3 = nPC;
			bool flag2 = true;
			int y2 = nPC3.frame.Y;
			int num5 = 0;
			int num6 = 0;
			Rectangle rectangle6 = default(Rectangle);
			((Rectangle)(ref rectangle6))._002Ector(0, 0, 30, 8);
			if (y2 == 15)
			{
				rectangle6.Width = 64;
				rectangle6.Height = 180;
				num6 = 80;
				num5 = -42;
				if (nPC3.ai[0] == 4f)
				{
					flag2 = false;
				}
			}
			else
			{
				flag2 = false;
			}
			if (flag2)
			{
				rectangle6.X = (int)nPC3.Center.X - num5 * nPC3.direction;
				if (nPC3.direction < 0)
				{
					rectangle6.X -= rectangle6.Width;
				}
				rectangle6.Y = (int)nPC3.Center.Y - rectangle6.Height + num6;
				if (((Rectangle)(ref victimHitbox)).Intersects(rectangle6))
				{
					npcRect = rectangle6;
				}
			}
		}
	}

	public string GetBestiaryCreditId()
	{
		return ContentSamples.NpcBestiaryCreditIdsByNpcNetIds[netID];
	}

	public override string ToString()
	{
		return "name:" + TypeName + ", active:" + active + ", whoAmI:" + whoAmI;
	}

	/// <summary> Gets the instance of the specified GlobalNPC type. This will throw exceptions on failure. </summary>
	/// <exception cref="T:System.Collections.Generic.KeyNotFoundException" />
	/// <exception cref="T:System.IndexOutOfRangeException" />
	public T GetGlobalNPC<T>() where T : GlobalNPC
	{
		return GlobalType<GlobalNPC>.GetGlobal<T>(type, EntityGlobals);
	}

	/// <summary> Gets the local instance of the type of the specified GlobalNPC instance. This will throw exceptions on failure. </summary>
	/// <exception cref="T:System.Collections.Generic.KeyNotFoundException" />
	/// <exception cref="T:System.NullReferenceException" />
	public T GetGlobalNPC<T>(T baseInstance) where T : GlobalNPC
	{
		return GlobalType<GlobalNPC>.GetGlobal(type, EntityGlobals, baseInstance);
	}

	/// <summary> Gets the instance of the specified GlobalNPC type. </summary>
	public bool TryGetGlobalNPC<T>(out T result) where T : GlobalNPC
	{
		return GlobalType<GlobalNPC>.TryGetGlobal<T>(type, EntityGlobals, out result);
	}

	/// <summary> Safely attempts to get the local instance of the type of the specified GlobalNPC instance. </summary>
	/// <returns> Whether or not the requested instance has been found. </returns>
	public bool TryGetGlobalNPC<T>(T baseInstance, out T result) where T : GlobalNPC
	{
		return GlobalType<GlobalNPC>.TryGetGlobal(type, EntityGlobals, baseInstance, out result);
	}

	public NPC()
	{
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		thisEntitySourceCache = new EntitySource_Parent(this);
	}

	/// <summary> Returns whether or not this NPC currently has a (de)buff of the provided type. </summary>
	public bool HasBuff(int type)
	{
		return FindBuffIndex(type) != -1;
	}

	/// <inheritdoc cref="M:Terraria.NPC.HasBuff(System.Int32)" />
	public bool HasBuff<T>() where T : ModBuff
	{
		return HasBuff(ModContent.BuffType<T>());
	}

	/// <summary>
	/// <inheritdoc cref="M:Terraria.NPC.NewNPC(Terraria.DataStructures.IEntitySource,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32)" />
	/// <br /><br />This particular overload returns the actual NPC instance rather than the index of the spawned NPC within the <see cref="F:Terraria.Main.npc" /> array.
	/// <br /> A short-hand for <code> Main.npc[NPC.NewNPC(...)] </code>
	/// </summary>
	public static NPC NewNPCDirect(IEntitySource source, int x, int y, int type, int start = 0, float ai0 = 0f, float ai1 = 0f, float ai2 = 0f, float ai3 = 0f, int target = 255)
	{
		return Main.npc[NewNPC(source, x, y, type, start, ai0, ai1, ai2, ai3, target)];
	}

	/// <summary>
	/// <inheritdoc cref="M:Terraria.NPC.NewNPC(Terraria.DataStructures.IEntitySource,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32)" />
	/// <br /><br />This particular overload returns the actual NPC instance rather than the index of the spawned NPC within the <see cref="F:Terraria.Main.npc" /> array. It also uses a Vector2 for the spawn position instead of X and Y.
	/// <br /> A short-hand for <code> Main.npc[NPC.NewNPC(...)] </code>
	/// </summary>
	public static NPC NewNPCDirect(IEntitySource source, Vector2 position, int type, int start = 0, float ai0 = 0f, float ai1 = 0f, float ai2 = 0f, float ai3 = 0f, int target = 255)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		return NewNPCDirect(source, (int)position.X, (int)position.Y, type, start, ai0, ai1, ai2, ai3, target);
	}

	/// <summary>
	/// Helper method for getting the parameters for seating a town NPC. Assumes the tile at <paramref name="anchorTilePosition" /> is a valid tile for sitting
	/// </summary>
	public void SitDown(Point anchorTilePosition, out int direction, out Vector2 bottom)
	{
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		Tile tile = Main.tile[anchorTilePosition.X, anchorTilePosition.Y];
		if (tile.type < TileID.Count)
		{
			anchorTilePosition.Y--;
		}
		TileRestingInfo info = new TileRestingInfo(this, anchorTilePosition, Vector2.Zero, (tile.frameX != 0) ? 1 : (-1), 2);
		TileLoader.ModifySittingTargetInfo(anchorTilePosition.X, anchorTilePosition.Y, tile.type, ref info);
		int anchorX = info.AnchorTilePosition.X;
		int anchorY = info.AnchorTilePosition.Y;
		int directionOffset = info.DirectionOffset;
		direction = info.TargetDirection;
		Vector2 finalOffset = info.FinalOffset;
		bottom = Utils.ToWorldCoordinates(new Point(anchorX, anchorY), 8f, 16f);
		bottom.X += direction * directionOffset;
		bottom += finalOffset;
	}

	/// <summary>
	/// Runs most code related to the process of checking whether or not an NPC can be caught.<br></br>
	/// After that, <see cref="M:Terraria.ModLoader.CombinedHooks.OnCatchNPC(Terraria.Player,Terraria.NPC,Terraria.Item,System.Boolean)" /> is run, followed by the code responsible for catching the NPC if applicable.<br></br>
	/// You will need to call this manually if you want to make an NPC-catching tool which acts differently from vanilla's, such as one that uses a projectile instead of an item.<br></br>
	/// As a note, if calling this manually, you will need to check <c>npc.active &amp;&amp; npc.catchItem &gt; 0</c> yourself.
	/// </summary>
	/// <param name="npc">The NPC which can potentially be caught.</param>
	/// <param name="catchToolRectangle">The hitbox of the tool being used to catch the NPC --- be it an item, a projectile, or something else entirely.</param>
	/// <param name="item">The item to be used as a reference for the purposes of <see cref="M:Terraria.ModLoader.CombinedHooks.CanCatchNPC(Terraria.Player,Terraria.NPC,Terraria.Item)" /> and <see cref="M:Terraria.ModLoader.CombinedHooks.OnCatchNPC(Terraria.Player,Terraria.NPC,Terraria.Item,System.Boolean)" />.</param>
	/// <param name="player">The player that owns the referenced item.</param>
	/// <param name="lavaProofTool">Whether or not the tool is lavaproof for the purposes of catching vanilla's Underworld critters. Defaults to false.</param>
	/// <returns>Whether or not the NPC was successfully caught.</returns>
	public static bool CheckCatchNPC(NPC npc, Rectangle catchToolRectangle, Item item, Player player, bool lavaProofTool = false)
	{
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		Rectangle value = default(Rectangle);
		((Rectangle)(ref value))._002Ector((int)npc.position.X, (int)npc.position.Y, npc.width, npc.height);
		if (!((Rectangle)(ref catchToolRectangle)).Intersects(value))
		{
			return false;
		}
		bool? canCatch = CombinedHooks.CanCatchNPC(player, npc, item);
		if (canCatch.HasValue)
		{
			CombinedHooks.OnCatchNPC(player, npc, item, !canCatch.Value);
			if (canCatch.Value)
			{
				CatchNPC(npc.whoAmI, player.whoAmI);
			}
			return canCatch.Value;
		}
		if (!lavaProofTool && ItemID.Sets.IsLavaBait[npc.catchItem])
		{
			CombinedHooks.OnCatchNPC(player, npc, item, failed: true);
			if (Main.myPlayer == player.whoAmI && player.Hurt(PlayerDeathReason.ByNPC(npc.whoAmI), 1, (npc.Center.X < player.Center.X) ? 1 : (-1), pvp: false, quiet: false, 3) > 0.0 && !player.dead)
			{
				player.AddBuff(24, 300);
			}
			return false;
		}
		int num = npc.type;
		if (num == 585 || num == 583 || num == 584)
		{
			bool canCatchFairy = npc.ai[2] <= 1f;
			CombinedHooks.OnCatchNPC(player, npc, item, !canCatchFairy);
			if (canCatchFairy)
			{
				CatchNPC(npc.whoAmI, player.whoAmI);
			}
			return canCatchFairy;
		}
		CombinedHooks.OnCatchNPC(player, npc, item, failed: false);
		CatchNPC(npc.whoAmI, player.whoAmI);
		return true;
	}

	/// <summary>
	/// Returns the gore type of the party hat this NPC is currently wearing. If the NPC isn't wearing a party hat, 0 is returned.
	/// </summary>
	/// <returns></returns>
	public int GetPartyHatGore()
	{
		int num = 926;
		switch (GetPartyHatColor())
		{
		case PartyHatColor.Cyan:
			num = 940;
			break;
		case PartyHatColor.Pink:
			num = 939;
			break;
		case PartyHatColor.Purple:
			num = 941;
			break;
		case PartyHatColor.White:
			num = 942;
			break;
		case PartyHatColor.None:
			num = 0;
			break;
		}
		return num;
	}

	/// <summary>
	/// Adjusts <see cref="F:Terraria.NPC.buffImmune" /> to make this NPC immune to the provided buff as well as all other buffs that inherit the immunity of that buff (via <see cref="F:Terraria.ID.BuffID.Sets.GrantImmunityWith" />). This method can be followed by <see cref="M:Terraria.NPC.ClearImmuneToBuffs(System.Boolean@)" /> if the NPC should clear any buff it currently has that it is now immune to.
	/// </summary>
	/// <param name="buffType"></param>
	public void BecomeImmuneTo(int buffType)
	{
		buffImmune[buffType] = true;
		for (int i = 0; i < BuffID.Sets.GrantImmunityWith.Length; i++)
		{
			if (BuffID.Sets.GrantImmunityWith[i].Contains(buffType))
			{
				buffImmune[i] = true;
			}
		}
	}

	public void ClearImmuneToBuffs(out bool anyBuffsCleared)
	{
		anyBuffsCleared = false;
		for (int i = maxBuffs - 1; i >= 0; i--)
		{
			if (buffImmune[buffType[i]])
			{
				buffTime[i] = 0;
				buffType[i] = 0;
				anyBuffsCleared = true;
			}
			if (buffTime[i] == 0 || buffType[i] == 0)
			{
				for (int j = i + 1; j < maxBuffs; j++)
				{
					buffTime[j - 1] = buffTime[j];
					buffType[j - 1] = buffType[j];
					buffTime[j] = 0;
					buffType[j] = 0;
				}
			}
		}
		if (Main.netMode == 2)
		{
			NetMessage.SendData(54, -1, -1, null, whoAmI);
		}
	}

	public IEntitySource GetSource_Buff(int buffIndex)
	{
		int buffTypeId = buffType[buffIndex];
		return new EntitySource_Buff(this, buffTypeId, buffIndex);
	}
}
