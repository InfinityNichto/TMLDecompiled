using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using ReLogic.Utilities;
using Terraria.Audio;
using Terraria.Chat;
using Terraria.DataStructures;
using Terraria.Enums;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Drawing;
using Terraria.GameContent.Events;
using Terraria.GameContent.Golf;
using Terraria.GameContent.Shaders;
using Terraria.GameContent.UI;
using Terraria.Graphics;
using Terraria.Graphics.Effects;
using Terraria.Graphics.Shaders;
using Terraria.ID;
using Terraria.Localization;
using Terraria.ModLoader;
using Terraria.ModLoader.Core;
using Terraria.ObjectData;
using Terraria.Physics;
using Terraria.Utilities;
using Terraria.WorldBuilding;

namespace Terraria;

public class Projectile : Entity, IEntityWithGlobals<GlobalProjectile>
{
	private class NPCDistanceByIndexComparator : IComparer<Tuple<int, float>>
	{
		public int Compare(Tuple<int, float> npcIndex1, Tuple<int, float> npcIndex2)
		{
			return npcIndex1.Item2.CompareTo(npcIndex2.Item2);
		}
	}

	public struct HallowBossPelletStormInfo
	{
		public float StartAngle;

		public float AnglePerBullet;

		public int BulletsInStorm;

		public float BulletsProgressInStormStartNormalized;

		public float BulletsProgressInStormBonusByIndexNormalized;

		public float StormTotalRange;

		public Vector2 BulletSize;

		public float GetBulletProgress(int bulletIndex)
		{
			return BulletsProgressInStormStartNormalized + BulletsProgressInStormBonusByIndexNormalized * (float)bulletIndex;
		}

		public bool IsValid(int bulletIndex)
		{
			float bulletProgress = GetBulletProgress(bulletIndex);
			if (bulletProgress >= 0f)
			{
				return bulletProgress <= 1f;
			}
			return false;
		}

		public Vector2 GetBulletPosition(int bulletIndex, Vector2 centerPoint)
		{
			//IL_0000: Unknown result type (might be due to invalid IL or missing references)
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0020: Unknown result type (might be due to invalid IL or missing references)
			//IL_002b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_003c: Unknown result type (might be due to invalid IL or missing references)
			return centerPoint + Vector2.UnitX.RotatedBy(StartAngle + AnglePerBullet * (float)bulletIndex) * StormTotalRange * GetBulletProgress(bulletIndex);
		}

		public Rectangle GetBulletHitbox(int bulletIndex, Vector2 centerPoint)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0003: Unknown result type (might be due to invalid IL or missing references)
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			return Utils.CenteredRectangle(GetBulletPosition(bulletIndex, centerPoint), BulletSize);
		}
	}

	public static uint[][] perIDStaticNPCImmunity = new uint[ProjectileID.Count][];

	public const int SentryLifeTime = 36000;

	public const int ArrowLifeTime = 1200;

	public float ownerHitCheckDistance = 1000f;

	public bool arrow;

	public int numHits;

	public bool bobber;

	/// <summary>
	/// Indicates that this projectile will be synced to a joining player (by default, any projectiles active before the player joins (besides projectiles with type in <see cref="F:Terraria.Main.projPet" />) are not synced over). Example: glowsticks
	/// <br /> Defaults to <see langword="false" />.
	/// </summary>
	public bool netImportant;

	/// <summary>
	/// Set to true if you don't want this projectile to have a chance to recover the ammo item that shot this. For example, if you shoot the <see cref="F:Terraria.ID.ProjectileID.WoodenArrowFriendly" /> projectile, it will sometimes drop the <see cref="F:Terraria.ID.ItemID.WoodenArrow" />  item. If your weapon shoots multiple arrows for 1 ammo, you might want to consider setting this field to prevent infinite ammo glitches.
	/// <br /> In <see cref="M:Terraria.ModLoader.ModProjectile.OnKill(System.Int32)" />, check this and <see cref="F:Terraria.Projectile.owner" /> to decide if the item should drop: <code>if (Projectile.owner == Main.myPlayer &amp;&amp; !Projectile.noDropItem)</code> See <see href="https://github.com/tModLoader/tModLoader/blob/1.4.4/ExampleMod/Content/Projectiles/ExamplePaperAirplaneProjectile.cs#L142">ExamplePaperAirplaneProjectile</see> for an example of this logic.
	/// <br /> Set directly on the projectile instance returned from <see cref="M:Terraria.Projectile.NewProjectile(Terraria.DataStructures.IEntitySource,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Int32,System.Single,System.Single,System.Single)" />, not in <see cref="M:Terraria.ModLoader.ModProjectile.SetDefaults" />. This ensures that the weapon spawning the projectile decides if the ammo item will spawn, which is more compatible.
	/// <br /> Set automatically when shot from a weapon that counts as <see cref="P:Terraria.ModLoader.DamageClass.Throwing" /> and <see cref="P:Terraria.Player.AnyThrownCostReduction" /> is <see langword="true" />.
	/// <br /> Defaults to <see langword="false" />.
	/// </summary>
	public bool noDropItem;

	public static int maxAI = 3;

	public bool counterweight;

	/// <summary>
	/// Scales how large the projectile will be drawn. Will also affect the hitbox (<see cref="F:Terraria.Entity.width" />, <see cref="F:Terraria.Entity.height" />) if assigned in SetDefaults. If changed elsewhere it will not affect the hitbox, so that will have to be adjusted manually via code in that situation if needed. <para />
	/// Due to legacy code, scale does not affect the draw origin correctly, resulting in the projectile not rotating around the hitbox center correctly nor being drawn correctly centered on the hitbox. For small changes (0.8f to 1.2f) the effect is unnoticeable, but it is advised to avoid large values unless the projectile is manually drawn with the correct approach via <see cref="M:Terraria.ModLoader.ModProjectile.PreDraw(Microsoft.Xna.Framework.Color@)" />.<para />
	/// <br /> Defaults to 1f.
	/// </summary>
	public float scale = 1f;

	/// <summary>
	/// Rotation of the projectile. Radians not Degrees. Use <see cref="T:Microsoft.Xna.Framework.MathHelper" /> if you want to convert degrees to radians. 0 is facing right, <see cref="F:Microsoft.Xna.Framework.MathHelper.PiOver2" /> is facing down, and so on. Note that hitboxes do not rotate.
	/// <br /> The <see href="https://github.com/tModLoader/tModLoader/wiki/Basic-Projectile#rotation">Basic Projectile Guide</see> teaches more about projectile rotation.
	/// <br /> Defaults to 0f.
	/// </summary>
	public float rotation;

	/// <summary>
	/// The Projectile ID of this projectile. The Projectile ID is a unique number assigned to each Projectile loaded into the game. This will be equal to either an <see cref="T:Terraria.ID.ProjectileID" /> entry or <see cref="M:Terraria.ModLoader.ModContent.ProjectileType``1" />, for example <see cref="F:Terraria.ID.ProjectileID.WoodenArrowFriendly" /> or ModContent.ProjectileType&lt;MyModProjectile&gt;(). To check if a Projectile instance is a specific Projectile, check <c>Projectile.type == ProjectileID.VanillaProjectileHere</c> or <c>Projectile.type == ModContent.ProjectileType&lt;ModdedProjectileHere&gt;()</c> in an <see langword="if" /> statement.
	/// </summary>
	public int type;

	/// <summary>
	/// How transparent to draw this projectile. 0 to 255. 255 is completely transparent.
	/// <br /> <see href="https://github.com/tModLoader/tModLoader/blob/1.4.4/ExampleMod/Content/Projectiles/ExampleBullet.cs">ExampleBullet</see> sets this to 255, and the projectile aiStyle of <see cref="F:Terraria.ID.ProjAIStyleID.Arrow" /> automatically decreases alpha each tick, letting the projectile fade in quickly after being spawned. Useful for projectiles that look odd when initially spawned on the weapon because of texture overlap.
	/// <br /> The <see href="https://github.com/tModLoader/tModLoader/wiki/Basic-Projectile#fade-inout">Basic Projectile Guide</see> teaches more about projectile fade in and out.
	/// <br /> Defaults to 0.
	/// </summary>
	public int alpha;

	/// <summary>
	/// Indicates that this projectile is a sentry
	/// <br /> Defaults to <see langword="false" />.
	/// <br /> All sentries should set <see cref="F:Terraria.Projectile.timeLeft" /> to <see cref="F:Terraria.Projectile.SentryLifeTime" />.
	/// <br /> When a sentry is spawned, <see cref="M:Terraria.Player.UpdateMaxTurrets" /> should be called immediately after.
	/// </summary>
	public bool sentry;

	public short glowMask;

	/// <summary>
	/// The index of the player who owns this projectile. In Multiplayer, Clients "own" projectiles that they shoot, while the Server "owns" projectiles spawned by NPCs and the World.
	/// <br /> NPC <b>never</b> own projectiles, do not use owner to index into <see cref="F:Terraria.Main.npc" />. 
	/// <br /> It is very important to check <c>if (Projectile.owner == Main.myPlayer)</c> for things like dropping items or spawning projectiles in <see cref="M:Terraria.ModLoader.ModProjectile.AI" /> and some other methods because AI runs simultaneously on all Clients and the Server. This check gates some of the code that should only run on the owners computer. <see href="https://github.com/tModLoader/tModLoader/blob/1.4.4/ExampleMod/Content/Projectiles/ExamplePaperAirplaneProjectile.cs#L142">ExamplePaperAirplaneProjectile</see> checks owner for spawning the recovered ammo item. If you don't do this, you will run into desync bugs in your mod.
	/// <br /> Defaults to the owner parameter of Projectile.NewProjectile, which should always be set to <see cref="F:Terraria.Main.myPlayer" /> to correspond to the client that owns the projectile..
	/// </summary>
	public int owner = 255;

	/// <summary>
	/// An array with 3 slots used for any sort of data storage, which is occasionally synced to the server. Each vanilla <see cref="T:Terraria.ID.ProjAIStyleID" /> uses these slots for different purposes. Set <see cref="F:Terraria.Projectile.netUpdate" /> to true during AI methods to manually sync. The advantage of using these 3 floats is that they are synced automatically. Using fields in your <see cref="P:Terraria.Projectile.ModProjectile" /> class will work just the same, but they might need to be synced via <see cref="M:Terraria.ModLoader.ModProjectile.SendExtraAI(System.IO.BinaryWriter)" /> and <see cref="M:Terraria.ModLoader.ModProjectile.ReceiveExtraAI(System.IO.BinaryReader)" /> if necessary.
	/// <br /> Clever use of <see href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref#reference-return-values">Reference return values</see> as seen in <see href="https://github.com/tModLoader/tModLoader/blob/1.4.4/ExampleMod/Content/Pets/ExampleLightPet/ExampleLightPetProjectile.cs#L22">ExampleLightPetProjectile.cs</see> can be used to reuse the ai array entries with readable names.
	/// <br /> Defaults to the values passed into <see cref="M:Terraria.Projectile.NewProjectile(Terraria.DataStructures.IEntitySource,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Int32,System.Single,System.Single,System.Single)" />, usually [0, 0, 0].
	/// </summary>
	public float[] ai = new float[maxAI];

	/// <summary>
	/// Acts like <see cref="F:Terraria.Projectile.ai" />, but does not sync to the server. Many vanilla <see cref="T:Terraria.ID.ProjAIStyleID" /> use these slots for various purposes.
	/// <br /> Defaults to [0, 0, 0]
	/// </summary>
	public float[] localAI = new float[maxAI];

	/// <summary>
	/// An offset from the actual position of the projectile that will be added to the draw position. Used to offset some held projectiles to match the players <see cref="F:Terraria.Player.gfxOffY" />, thereby keeping the projectile visually in sync with the player. <see cref="F:Terraria.ID.ProjectileID.Sets.HeldProjDoesNotUsePlayerGfxOffY" /> can be used to ignore that usage.
	/// </summary>
	public float gfxOffY;

	/// <summary>
	/// Has nothing to do with the speed that this projectile travels, that is dictated by AI code adjusting <see cref="F:Terraria.Entity.velocity" />.
	/// </summary>
	public float stepSpeed = 1f;

	/// <summary>
	/// Selects which vanilla code to use for the AI method. Vanilla projectile AI styles are enumerated in the <see cref="T:Terraria.ID.ProjAIStyleID" /> class. Modders can use vanilla aiStyle and optionally <see cref="P:Terraria.ModLoader.ModProjectile.AIType" /> to mimic AI code already in the game. This is usually only useful as a prototyping tool since it is difficult to customize existing aiStyle code. See <see cref="P:Terraria.ModLoader.ModProjectile.AIType" /> and <see href="https://github.com/tModLoader/tModLoader/blob/1.4.4/ExampleMod/Content/Projectiles/ExampleCloneProjectile.cs">ExampleCloneProjectile</see> to see how to use vanilla ai. If you are using custom AI code, there is no need to set this field.
	/// <br /> The <see href="https://github.com/tModLoader/tModLoader/wiki/Basic-Projectile#what-is-ai">Basic Projectile Guide</see> teaches how to use an existing aiStyle.
	/// <br /> Customizing an existing aiStyle usually requires following the <see href="https://github.com/tModLoader/tModLoader/wiki/Advanced-Vanilla-Code-Adaption#example-projectile-or-npc-ai-code">Vanilla Code Adaption Guide</see>.
	/// <br /> Defaults to 0.
	/// </summary>
	public int aiStyle;

	/// <summary>
	/// Time in ticks before this projectile will naturally despawn.
	/// <br /> Each update timeLeft is decreased by 1. Once timeLeft hits 0, the Projectile will naturally despawn. The default value, 3600, is measured in ticks, which are usually 60 per seconds, so the default despawn time is about 60 seconds. Adjust this if you want the projectile to fizzle early rather than travel infinitely. Note that <see cref="F:Terraria.Projectile.extraUpdates" /> will cause it to decrease faster than normal time because Update is being called more often.
	/// <br /> Defaults to 3600.
	/// </summary>
	public int timeLeft;

	public int soundDelay;

	/// <summary>
	/// This will always be set in Projectile.NewProjectile based on the weapons damage and player stat modifiers. Modders should not set this in <see cref="M:Terraria.ModLoader.ModProjectile.SetDefaults" /> as it will be overwritten.
	/// </summary>
	public int damage;

	public int originalDamage;

	public int spriteDirection = 1;

	/// <summary>
	/// If True, this projectile will hurt players and friendly NPCs (<see cref="F:Terraria.NPC.friendly" />)
	/// <br /> Defaults to <see langword="false" />.
	/// </summary>
	public bool hostile;

	public bool reflected;

	/// <summary>
	/// This will always be set in Projectile.NewProjectile based on the weapons knockback and player stat modifiers. Modders should not set this in <see cref="M:Terraria.ModLoader.ModProjectile.SetDefaults" /> as it will be overwritten.
	/// </summary>
	public float knockBack;

	/// <summary>
	/// If True, this projectile will hurt enemies (!<see cref="F:Terraria.NPC.friendly" />)
	/// <br /> Defaults to <see langword="false" />.
	/// </summary>
	public bool friendly;

	/// <summary>
	/// The remaining number of npc can this projectile hit before dying. (Or tile bounces). Assign this field in SetDefaults and use it in ModProjectile logic if needed. A value of -1 means the projectile will penetrate infinitely. See <see href="https://github.com/tModLoader/tModLoader/blob/1.4.4/ExampleMod/Content/Projectiles/ExamplePiercingProjectile.cs">ExamplePiercingProjectile</see> for more information on how penetrate influences NPC immunity frames.
	/// <br /> Defaults to 1. Used to automatically assigned a value to <see cref="F:Terraria.Projectile.maxPenetrate" /> at the end of SetDefaults.
	/// </summary>
	public int penetrate = 1;

	public int[] localNPCImmunity = new int[200];

	/// <summary>
	/// If true, this projectile manages it's own immunity timers for each npc.<br />
	/// Use this rather than <see cref="F:Terraria.Projectile.usesIDStaticNPCImmunity" /> if you want multiple projectiles of the same type to have a chance to attack rapidly, but don't want a single projectile to hit rapidly.<br />
	/// <see cref="F:Terraria.Projectile.localNPCHitCooldown" /> controls the cooldown timing and must be assigned a suitable value to work properly.<br />
	/// </summary>
	public bool usesLocalNPCImmunity;

	/// <summary>
	/// If true, all projectiles of this type share an immunity cooldown for each npc.<br />
	/// Use this rather than <see cref="F:Terraria.Projectile.usesLocalNPCImmunity" /> if you want other projectile types a chance to attack the npc, but don't want projectile of the same projectile type to hit an npc rapidly.<br />
	/// <see cref="F:Terraria.Projectile.idStaticNPCHitCooldown" /> controls the cooldown timing and must be assigned a suitable value to work properly.<br />
	/// </summary>
	public bool usesIDStaticNPCImmunity;

	/// <summary>
	/// If true, this projectile will apply immunity to an npc despite having a <see cref="F:Terraria.Projectile.penetrate" /> value of 1. Used only for firework rockets in Terraria content.
	/// </summary>
	public bool appliesImmunityTimeOnSingleHits;

	/// <summary>
	/// How many npc can this projectile hit before dying. (Or tile bounces)
	/// <br /> Automatically set at the end of SetDefaults to the value of <see cref="F:Terraria.Projectile.penetrate" />.
	/// </summary>
	public int maxPenetrate = 1;

	/// <summary>
	/// The projectile's universal unique identifier, which is the same on all clients and the server. Usually used to find the same projectile on multiple clients and/or the server, e.g. <c>Projectile match = Main.projectile.FirstOrDefault(x =&gt; x.identity == identity);</c>
	/// <br /> Projectile.whoAmI indexes are not consistent between clients.
	/// </summary>
	public int identity;

	/// <summary>
	/// Set to a value above 0f to make this projectile emit a white light (higher number: more intensive light. 1f being stronger than a torch))
	/// <br /> The <see href="https://github.com/tModLoader/tModLoader/wiki/Basic-Projectile#lighting">Basic Projectile Guide</see> teaches more about lighting, including non-white lighting, dust light, and glow behavior.
	/// <br /> Defaults to 0.
	/// </summary>
	public float light;

	/// <summary>
	/// Set manually to true in <see cref="M:Terraria.ModLoader.ModProjectile.AI" /> once to make it sync its current <see cref="F:Terraria.Projectile.ai" />[] array to the server and other clients (depending on what the <see cref="F:Terraria.Main.netMode" /> is where this is set to true)
	/// </summary>
	public bool netUpdate;

	/// <summary>
	/// Used internally to check for projectiles that spam <see cref="F:Terraria.Projectile.netUpdate" />. Don't use it yourself manually
	/// </summary>
	public bool netUpdate2;

	public int netSpam;

	/// <summary>
	/// Holds the value of <see cref="F:Terraria.Entity.position" /> from previous updates from newest to oldest. Use for drawing trails. Must be used with <see cref="F:Terraria.ID.ProjectileID.Sets.TrailCacheLength" /> and <see cref="F:Terraria.ID.ProjectileID.Sets.TrailingMode" /> to be used properly.
	/// </summary>
	public Vector2[] oldPos = (Vector2[])(object)new Vector2[10];

	/// <summary>
	/// Holds the value of <see cref="F:Terraria.Projectile.rotation" /> from previous updates from newest to oldest. Use for drawing trails. Must be used with <see cref="F:Terraria.ID.ProjectileID.Sets.TrailCacheLength" /> and <see cref="F:Terraria.ID.ProjectileID.Sets.TrailingMode" /> to be used properly.
	/// </summary>
	public float[] oldRot = new float[10];

	/// <summary>
	/// Holds the value of <see cref="F:Terraria.Projectile.spriteDirection" /> from previous updates from newest to oldest. Use for drawing trails. Must be used with <see cref="F:Terraria.ID.ProjectileID.Sets.TrailCacheLength" /> and <see cref="F:Terraria.ID.ProjectileID.Sets.TrailingMode" /> to be used properly.
	/// </summary>
	public int[] oldSpriteDirection = new int[10];

	/// <summary>
	/// Indicates that this projectile is a minion
	/// <br /> Defaults to <see langword="false" />.
	/// </summary>
	public bool minion;

	/// <summary>
	/// Set to 1f on a minion to count it towards the minion limit of the summoning player (Optic Staff summons two minions at once with 0.5f each)
	/// <br /> Make sure to set <see cref="F:Terraria.ID.ItemID.Sets.StaffMinionSlotsRequired" /> for the minion summoning item to the sum of the minionSlots values of the minions that will be spawned.
	/// <br /> Defaults to 0f.
	/// </summary>
	public float minionSlots;

	/// <summary>
	/// A number indicating the order of minions. Minion AI code typically uses this value to determine a suitable idle position that results in minions lining up neatly in relation to the player without bunching up.
	/// </summary>
	public int minionPos;

	public int restrikeDelay;

	/// <summary>
	/// If true, the projectile will collide with tiles, usually bouncing or killing the tile depending on <see cref="M:Terraria.ModLoader.ModProjectile.OnTileCollide(Microsoft.Xna.Framework.Vector2)" />. <see href="https://github.com/tModLoader/tModLoader/blob/1.4.4/ExampleMod/Content/Projectiles/ExampleBullet.cs#L37">ExampleBullet</see> shows how to implement bounce.
	/// <br /> Defaults to <see langword="true" />.
	/// </summary>
	public bool tileCollide;

	/// <summary>
	/// Additional update steps per tick. Useful for really fast projectiles such as <see href="https://github.com/tModLoader/tModLoader/wiki/Advanced-Vanilla-Code-Adaption#example-item-and-projectile-shadowbeam-staff-clone">Shadowbeam Staff</see>. If your projectile is mistakenly occasionally traveling through tiles, you may need to increase this to prevent that.
	/// <br /> Defaults to 0.
	/// </summary>
	public int extraUpdates;

	public bool stopsDealingDamageAfterPenetrateHits;

	public int numUpdates;

	/// <summary>
	/// The projectile will not be affected by water.
	/// <br /> Defaults to <see langword="false" />.
	/// </summary>
	public bool ignoreWater;

	public bool isAPreviewDummy;

	/// <summary>
	/// Projectile is not drawn normally. Held projectiles (<see cref="F:Terraria.Player.heldProj" />) and projectiles specified to be drawn at specific layers (<see cref="M:Terraria.ModLoader.ModProjectile.DrawBehind(System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})" />)  use this.
	/// </summary>
	public bool hide;

	/// <summary>
	/// If <see langword="true" />, then this projectile will only deal damage if its owner has line of sight to the hit.
	/// <br /> Useful for melee projectiles, such as spears and shortswords.
	/// <br /> Defaults to <see langword="false" />.
	/// </summary>
	public bool ownerHitCheck;

	public bool usesOwnerMeleeHitCD;

	public int[] playerImmune = new int[255];

	public string miscText = "";

	public bool coldDamage;

	public bool noEnchantments;

	public bool noEnchantmentVisuals;

	/// <summary>
	/// If true, this projectile was spawned by a trap tile.
	/// </summary>
	public bool trap;

	/// <summary>
	/// If true, this projectile was spawned by a friendly Town NPC.
	/// </summary>
	public bool npcProj;

	public bool originatedFromActivableTile;

	/// <summary>
	/// Used as a timer to decide when to change <see cref="F:Terraria.Projectile.frame" />.
	/// <br /> Defaults to 0.
	/// </summary>
	public int frameCounter;

	/// <summary>
	/// The frame number in the spritesheet that this projectile will be drawn with. Assign in <see cref="M:Terraria.ModLoader.ModProjectile.AI" /> based on the state of the projectile and <see cref="F:Terraria.Projectile.frameCounter" />.
	/// <br /> <see cref="F:Terraria.Main.projFrames" /> must be set in ModProjectile.SetStaticDefaults as well.
	/// <br /> Example: projectile has 4 frames, then frame can have values between 0 and 3
	/// <br /> The <see href="https://github.com/tModLoader/tModLoader/wiki/Basic-Projectile#animationmultiple-frames">Basic Projectile Guide</see> teaches how to animate projectiles.
	/// <br /> Defaults to 0.
	/// </summary>
	public int frame;

	public bool manualDirectionChange;

	public int projUUID = -1;

	public bool decidesManualFallThrough;

	public bool shouldFallThrough;

	/// <summary>
	/// When used in conjunction with <see cref="F:Terraria.Projectile.usesLocalNPCImmunity" />, determines how many ticks must pass before this projectile can deal damage again to the same npc. A value of -1 indicates that it can only hit a specific npc once. The default value of -2 has no effect, so this must be assigned if usesLocalNPCImmunity is true.
	/// </summary>
	public int localNPCHitCooldown = -2;

	/// <summary>
	/// When used in conjunction with <see cref="F:Terraria.Projectile.usesIDStaticNPCImmunity" />, determines how many ticks must pass before any projectile of the same type can deal damage again to the same npc. This must be assigned a suitable value if usesIDStaticNPCImmunity is true.
	/// </summary>
	public int idStaticNPCHitCooldown = -1;

	public int bannerIdToRespondTo;

	private static Conditions.IsSolid _cachedConditions_solid = new Conditions.IsSolid();

	private static Conditions.NotNull _cachedConditions_notNull = new Conditions.NotNull();

	private static Point[] _javelinsMax6 = (Point[])(object)new Point[6];

	private static Point[] _javelinsMax8 = (Point[])(object)new Point[8];

	private static Point[] _javelinsMax10 = (Point[])(object)new Point[10];

	public List<Vector2> WhipPointsForCollision = new List<Vector2>();

	private static Rectangle _lanceHitboxBounds = new Rectangle(0, 0, 300, 300);

	private static List<Tuple<int, float>> _medusaHeadTargetList = new List<Tuple<int, float>>();

	private static NPCDistanceByIndexComparator _medusaTargetComparer = new NPCDistanceByIndexComparator();

	private static List<int> _ai164_blacklistedTargets = new List<int>();

	private static List<int> _ai158_blacklistedTargets = new List<int>();

	private static List<int> _ai156_blacklistedTargets = new List<int>();

	private static float[] _CompanionCubeScreamCooldown = new float[255];

	private string nameOverride;

	internal GlobalProjectile[] _globals;

	private DamageClass _damageClass = DamageClass.Default;

	private int _armorPenetration;

	private int _crit;

	public WhipSettings WhipSettings;

	internal bool melee
	{
		get
		{
			return CountsAsClass(DamageClass.Melee);
		}
		set
		{
			if (value)
			{
				DamageType = DamageClass.Melee;
			}
			else if (DamageType == DamageClass.Melee)
			{
				DamageType = DamageClass.Default;
			}
		}
	}

	internal bool ranged
	{
		get
		{
			return CountsAsClass(DamageClass.Ranged);
		}
		set
		{
			if (value)
			{
				DamageType = DamageClass.Ranged;
			}
			else if (DamageType == DamageClass.Ranged)
			{
				DamageType = DamageClass.Default;
			}
		}
	}

	internal bool magic
	{
		get
		{
			return CountsAsClass(DamageClass.Magic);
		}
		set
		{
			if (value)
			{
				DamageType = DamageClass.Magic;
			}
			else if (DamageType == DamageClass.Magic)
			{
				DamageType = DamageClass.Default;
			}
		}
	}

	public string Name
	{
		get
		{
			return nameOverride ?? Lang.GetProjectileName(type).Value;
		}
		set
		{
			nameOverride = value;
		}
	}

	public bool WipableTurret
	{
		get
		{
			if (owner == Main.myPlayer && sentry)
			{
				return !TurretShouldPersist();
			}
			return false;
		}
	}

	public float Opacity
	{
		get
		{
			return 1f - (float)alpha / 255f;
		}
		set
		{
			alpha = (int)MathHelper.Clamp((1f - value) * 255f, 0f, 255f);
		}
	}

	public int MaxUpdates
	{
		get
		{
			return extraUpdates + 1;
		}
		set
		{
			extraUpdates = value - 1;
		}
	}

	public NPC OwnerMinionAttackTargetNPC
	{
		get
		{
			if (Main.player[owner].MinionAttackTargetNPC < 0)
			{
				return null;
			}
			return Main.npc[Main.player[owner].MinionAttackTargetNPC];
		}
	}

	/// <summary>
	/// The ModProjectile instance that controls the behavior of this projectile. This property is null if this is not a modded projectile.
	/// </summary>
	public ModProjectile ModProjectile { get; internal set; }

	int IEntityWithGlobals<GlobalProjectile>.Type => type;

	public RefReadOnlyArray<GlobalProjectile> EntityGlobals => _globals;

	public EntityGlobalsEnumerator<GlobalProjectile> Globals => new EntityGlobalsEnumerator<GlobalProjectile>(this);

	/// <summary>
	/// The damage type assigned to this projectile, represented as a DamageClass.
	/// Leave blank or use DamageClass.Default to prevent damage type scaling of any kind for this projectile.
	/// Use DamageClass.Generic/Melee/Ranged/Magic/Summon/Throwing for vanilla damage types.
	/// Refer to ExampleMod for more information on how to create and use your own damage types.
	/// </summary>
	public DamageClass DamageType
	{
		get
		{
			return _damageClass;
		}
		set
		{
			_damageClass = value ?? throw new ArgumentException("Projectile.DamageType cannot be null.");
		}
	}

	/// <summary>
	/// The number of defense points that this projectile can ignore on its own. Cannot be set to negative values. Defaults to 0.
	/// On spawn, if this projectile was fired from a weapon, this value has the total armor penetration of the weapon that made the projectile added to itself.
	/// </summary>
	public int ArmorPenetration
	{
		get
		{
			return _armorPenetration;
		}
		set
		{
			_armorPenetration = Math.Max(0, value);
		}
	}

	/// <summary>
	/// The critical strike chance modifier of this projectile. Cannot be set to negative values. Defaults to 0.
	/// On spawn, if this projectile was fired from a weapon, this value has the total critical strike chance of the weapon that made the projectile added to itself.
	/// </summary>
	public int CritChance
	{
		get
		{
			return _crit;
		}
		set
		{
			_crit = Math.Max(0, value);
		}
	}

	/// <summary>
	/// The crit chance of this projectile, without any player bonuses, similar to <see cref="F:Terraria.Projectile.originalDamage" /><br />
	/// Used by <see cref="P:Terraria.Projectile.ContinuouslyUpdateDamageStats" /> to recalculate <see cref="P:Terraria.Projectile.CritChance" /> in combination with <see cref="M:Terraria.Player.GetTotalCritChance(Terraria.ModLoader.DamageClass)" />
	/// </summary>
	public int OriginalCritChance { get; set; }

	/// <summary>
	/// The crit chance of this projectile, without any player bonuses, similar to <see cref="F:Terraria.Projectile.originalDamage" /><br />
	/// Used by <see cref="P:Terraria.Projectile.ContinuouslyUpdateDamageStats" /> to recalculate <see cref="P:Terraria.Projectile.ArmorPenetration" /> in combination with <see cref="M:Terraria.Player.GetTotalArmorPenetration(Terraria.ModLoader.DamageClass)" />
	/// </summary>
	public int OriginalArmorPenetration { get; set; }

	/// <summary>
	/// If set <see cref="F:Terraria.Projectile.damage" /> will be recalculated based on <see cref="F:Terraria.Projectile.originalDamage" />, <see cref="P:Terraria.Projectile.DamageType" /> and the <see cref="F:Terraria.Projectile.owner" /> player, just like minions and sentries. <br />
	/// Similarly for <see cref="P:Terraria.Projectile.CritChance" /> and <see cref="P:Terraria.Projectile.ArmorPenetration" />.
	///
	/// No need to set this if <see cref="F:Terraria.Projectile.minion" /> or <see cref="F:Terraria.Projectile.sentry" /> is set.
	/// </summary>
	public bool ContinuouslyUpdateDamageStats { get; set; }

	[Obsolete("Use ContinuouslyUpdateDamageStats", true)]
	public bool ContinuouslyUpdateDamage
	{
		get
		{
			return ContinuouslyUpdateDamageStats;
		}
		set
		{
			ContinuouslyUpdateDamageStats = value;
		}
	}

	/// <summary>
	/// Checks if the projectile is a minion, sentry, minion shot, or sentry shot. <br />
	/// </summary>
	public bool IsMinionOrSentryRelated
	{
		get
		{
			if (!minion && !ProjectileID.Sets.MinionShot[type] && !sentry)
			{
				return ProjectileID.Sets.SentryShot[type];
			}
			return true;
		}
	}

	public static void InitializeStaticThings()
	{
		perIDStaticNPCImmunity = new uint[ProjectileID.Count][];
		for (int i = 0; i < perIDStaticNPCImmunity.Length; i++)
		{
			perIDStaticNPCImmunity[i] = new uint[200];
		}
		WorldGen.Hooks.OnWorldLoad += ResetImmunity;
	}

	public static void ResetImmunity()
	{
		for (int i = 0; i < perIDStaticNPCImmunity.Length; i++)
		{
			for (int j = 0; j < 200; j++)
			{
				perIDStaticNPCImmunity[i][j] = 0u;
			}
		}
	}

	public static bool IsNPCIndexImmuneToProjectileType(int projectileType, int npcIndex)
	{
		return perIDStaticNPCImmunity[projectileType][npcIndex] <= Main.GameUpdateCount;
	}

	public bool TurretShouldPersist()
	{
		switch (type)
		{
		case 663:
		case 665:
		case 667:
		case 677:
		case 678:
		case 679:
		case 688:
		case 689:
		case 690:
		case 691:
		case 692:
		case 693:
			return DD2Event.Ongoing;
		default:
			return false;
		}
	}

	public void CloneDefaults(int TypeToClone)
	{
		int originalType = type;
		ModProjectile originalModProjectile = ModProjectile;
		GlobalProjectile[] originalGlobals = _globals;
		SetDefaults(TypeToClone);
		type = originalType;
		ModProjectile = originalModProjectile;
		_globals = originalGlobals;
		int num = ProjectileID.Sets.TrailCacheLength[type];
		if (num != oldPos.Length)
		{
			Array.Resize(ref oldPos, num);
			Array.Resize(ref oldRot, num);
			Array.Resize(ref oldSpriteDirection, num);
		}
		for (int i = 0; i < oldPos.Length; i++)
		{
			oldPos[i].X = 0f;
			oldPos[i].Y = 0f;
			oldRot[i] = 0f;
			oldSpriteDirection[i] = 0;
		}
	}

	public void SetDefaults(int Type)
	{
		//IL_0251: Unknown result type (might be due to invalid IL or missing references)
		//IL_0256: Unknown result type (might be due to invalid IL or missing references)
		//IL_025c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0261: Unknown result type (might be due to invalid IL or missing references)
		ModProjectile = null;
		_globals = null;
		DamageType = DamageClass.Default;
		ArmorPenetration = 0;
		CritChance = 0;
		WhipSettings = default(WhipSettings);
		ContinuouslyUpdateDamageStats = false;
		nameOverride = null;
		ownerHitCheckDistance = 1000f;
		counterweight = false;
		sentry = false;
		arrow = false;
		bobber = false;
		numHits = 0;
		netImportant = false;
		manualDirectionChange = false;
		decidesManualFallThrough = false;
		shouldFallThrough = false;
		bannerIdToRespondTo = 0;
		stopsDealingDamageAfterPenetrateHits = false;
		localNPCHitCooldown = -2;
		idStaticNPCHitCooldown = -1;
		usesLocalNPCImmunity = false;
		usesIDStaticNPCImmunity = false;
		usesOwnerMeleeHitCD = false;
		appliesImmunityTimeOnSingleHits = false;
		int num = 10;
		if (Type >= 0)
		{
			num = ProjectileID.Sets.TrailCacheLength[Type];
		}
		if (num != oldPos.Length)
		{
			Array.Resize(ref oldPos, num);
			Array.Resize(ref oldRot, num);
			Array.Resize(ref oldSpriteDirection, num);
		}
		for (int i = 0; i < oldPos.Length; i++)
		{
			oldPos[i].X = 0f;
			oldPos[i].Y = 0f;
			oldRot[i] = 0f;
			oldSpriteDirection[i] = 0;
		}
		for (int j = 0; j < maxAI; j++)
		{
			ai[j] = 0f;
			localAI[j] = 0f;
		}
		for (int k = 0; k < 255; k++)
		{
			playerImmune[k] = 0;
		}
		ResetLocalNPCHitImmunity();
		noDropItem = false;
		minion = false;
		minionSlots = 0f;
		soundDelay = 0;
		spriteDirection = 1;
		ownerHitCheck = false;
		hide = false;
		lavaWet = false;
		wetCount = 0;
		wet = false;
		ignoreWater = false;
		isAPreviewDummy = false;
		hostile = false;
		reflected = false;
		netUpdate = false;
		netUpdate2 = false;
		netSpam = 0;
		numUpdates = 0;
		extraUpdates = 0;
		identity = 0;
		restrikeDelay = 0;
		light = 0f;
		penetrate = 1;
		tileCollide = true;
		position = Vector2.Zero;
		velocity = Vector2.Zero;
		aiStyle = 0;
		alpha = 0;
		glowMask = -1;
		type = Type;
		active = true;
		rotation = 0f;
		scale = 1f;
		owner = 255;
		timeLeft = 3600;
		friendly = false;
		damage = 0;
		originalDamage = 0;
		knockBack = 0f;
		miscText = "";
		coldDamage = false;
		noEnchantments = false;
		noEnchantmentVisuals = false;
		trap = false;
		npcProj = false;
		originatedFromActivableTile = false;
		projUUID = -1;
		frame = 0;
		frameCounter = 0;
		if (type == 1)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			timeLeft = 1200;
		}
		else if (type == 2)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			light = 1f;
			ranged = true;
			timeLeft = 1200;
		}
		else if (type == 3)
		{
			width = 22;
			height = 22;
			aiStyle = 2;
			friendly = true;
			penetrate = 4;
			ranged = true;
		}
		else if (type == 4)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			light = 0.35f;
			penetrate = 5;
			ranged = true;
			timeLeft = 1200;
		}
		else if (type == 5)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			light = 0.4f;
			penetrate = -1;
			alpha = 100;
			ignoreWater = true;
			ranged = true;
			extraUpdates = 1;
			timeLeft = 120;
		}
		else if (type == 6)
		{
			width = 22;
			height = 22;
			aiStyle = 3;
			friendly = true;
			penetrate = -1;
			melee = true;
			light = 0.4f;
		}
		else if (type == 7 || type == 8)
		{
			width = 28;
			height = 28;
			aiStyle = 4;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			alpha = 255;
			ignoreWater = true;
			magic = true;
		}
		else if (type == 9)
		{
			width = 24;
			height = 24;
			aiStyle = 5;
			friendly = true;
			penetrate = 2;
			scale = 0.8f;
			tileCollide = false;
			melee = true;
		}
		else if (type == 10)
		{
			width = 64;
			height = 64;
			aiStyle = 6;
			friendly = true;
			tileCollide = false;
			penetrate = -1;
			alpha = 255;
			ignoreWater = true;
		}
		else if (type == 11)
		{
			width = 48;
			height = 48;
			aiStyle = 6;
			friendly = true;
			tileCollide = false;
			penetrate = -1;
			alpha = 255;
			ignoreWater = true;
		}
		else if (type == 12)
		{
			width = 18;
			height = 18;
			aiStyle = 5;
			if (Main.remixWorld)
			{
				hostile = true;
			}
			friendly = true;
			penetrate = -1;
			alpha = 50;
			light = 1f;
		}
		else if (type == 13)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 14)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 255;
			scale = 1.2f;
			timeLeft = 600;
			ranged = true;
			extraUpdates = 1;
		}
		else if (type == 15)
		{
			width = 16;
			height = 16;
			aiStyle = 8;
			friendly = true;
			light = 0.8f;
			alpha = 100;
			magic = true;
		}
		else if (type == 16)
		{
			width = 32;
			height = 32;
			aiStyle = 9;
			friendly = true;
			light = 0.8f;
			alpha = 100;
			magic = true;
			ignoreWater = true;
		}
		else if (type == 17)
		{
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			ignoreWater = true;
		}
		else if (type == 18)
		{
			netImportant = true;
			width = 32;
			height = 32;
			aiStyle = 11;
			friendly = true;
			light = 0.9f;
			alpha = 150;
			tileCollide = false;
			penetrate = -1;
			timeLeft *= 5;
			ignoreWater = true;
			scale = 0.8f;
		}
		else if (type == 19)
		{
			width = 22;
			height = 22;
			aiStyle = 3;
			friendly = true;
			penetrate = -1;
			light = 1f;
			melee = true;
		}
		else if (type == 20)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 3;
			light = 0.75f;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.4f;
			timeLeft = 600;
			magic = true;
		}
		else if (type == 21)
		{
			width = 16;
			height = 16;
			aiStyle = 2;
			scale = 1.2f;
			friendly = true;
			ranged = true;
		}
		else if (type == 22)
		{
			width = 18;
			height = 18;
			aiStyle = 12;
			friendly = true;
			alpha = 255;
			penetrate = 5;
			extraUpdates = 2;
			ignoreWater = true;
			magic = true;
			if (Main.remixWorld)
			{
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 12;
			}
		}
		else if (type == 23)
		{
			width = 4;
			height = 4;
			aiStyle = 13;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			ranged = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 12;
		}
		else if (type == 24)
		{
			width = 14;
			height = 14;
			aiStyle = 14;
			friendly = true;
			penetrate = 7;
			ranged = true;
		}
		else if (type == 25)
		{
			netImportant = true;
			width = 22;
			height = 22;
			aiStyle = 15;
			friendly = true;
			penetrate = -1;
			melee = true;
			scale = 0.9f;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 26)
		{
			netImportant = true;
			width = 22;
			height = 22;
			aiStyle = 15;
			friendly = true;
			penetrate = -1;
			melee = true;
			scale = 0.8f;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 27)
		{
			width = 16;
			height = 16;
			aiStyle = 8;
			friendly = true;
			alpha = 255;
			timeLeft /= 2;
			penetrate = 10;
			magic = true;
		}
		else if (type == 28)
		{
			width = 22;
			height = 22;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
		}
		else if (type == 29)
		{
			width = 10;
			height = 10;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
		}
		else if (type == 30)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 31)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 32)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 33)
		{
			width = 38;
			height = 38;
			aiStyle = 3;
			friendly = true;
			scale = 0.9f;
			penetrate = -1;
			melee = true;
		}
		else if (type == 34)
		{
			width = 32;
			height = 32;
			aiStyle = 9;
			friendly = true;
			light = 0.8f;
			penetrate = 2;
			magic = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 12;
		}
		else if (type == 35)
		{
			netImportant = true;
			width = 22;
			height = 22;
			aiStyle = 15;
			friendly = true;
			penetrate = -1;
			melee = true;
			scale = 0.8f;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 36)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 2;
			light = 0.6f;
			alpha = 255;
			scale = 1.4f;
			timeLeft = 600;
			ranged = true;
			extraUpdates = 1;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 15;
		}
		else if (type == 37)
		{
			width = 22;
			height = 22;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
		}
		else if (type == 38)
		{
			width = 14;
			height = 14;
			aiStyle = 0;
			hostile = true;
			penetrate = -1;
			aiStyle = 1;
			tileCollide = true;
		}
		else if (type == 39)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 40)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 41)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			penetrate = -1;
			ranged = true;
			light = 0.3f;
		}
		else if (type == 42)
		{
			knockBack = 8f;
			width = 10;
			height = 10;
			aiStyle = 10;
			ranged = true;
			friendly = true;
			extraUpdates = 1;
		}
		else if (type == 43)
		{
			knockBack = 12f;
			width = 24;
			height = 24;
			aiStyle = 17;
			penetrate = -1;
			if (Main.getGoodWorld)
			{
				friendly = true;
				hostile = true;
			}
		}
		else if (type == 44)
		{
			width = 48;
			height = 48;
			alpha = 100;
			light = 0.2f;
			aiStyle = 18;
			hostile = true;
			penetrate = -1;
			tileCollide = true;
			scale = 0.9f;
		}
		else if (type == 45)
		{
			width = 48;
			height = 48;
			alpha = 100;
			light = 0.2f;
			aiStyle = 18;
			friendly = true;
			penetrate = 5;
			tileCollide = true;
			scale = 0.9f;
			magic = true;
		}
		else if (type == 46)
		{
			width = 20;
			height = 20;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.1f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 47)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.1f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 48)
		{
			width = 12;
			height = 12;
			aiStyle = 2;
			friendly = true;
			penetrate = 2;
			ranged = true;
		}
		else if (type == 49)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.2f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 50)
		{
			netImportant = true;
			width = 6;
			height = 6;
			aiStyle = 14;
			penetrate = -1;
			alpha = 75;
			light = 1f;
			timeLeft *= 5;
		}
		else if (type == 51)
		{
			width = 8;
			height = 8;
			aiStyle = 1;
			ranged = true;
			friendly = true;
		}
		else if (type == 52)
		{
			width = 22;
			height = 22;
			aiStyle = 3;
			friendly = true;
			penetrate = -1;
			melee = true;
		}
		else if (type == 53)
		{
			netImportant = true;
			width = 6;
			height = 6;
			aiStyle = 14;
			penetrate = -1;
			alpha = 75;
			light = 1f;
			timeLeft *= 5;
			tileCollide = false;
		}
		else if (type == 54)
		{
			width = 12;
			height = 12;
			aiStyle = 2;
			friendly = true;
			penetrate = 2;
			ranged = true;
		}
		else if (type == 55)
		{
			width = 10;
			height = 10;
			aiStyle = 0;
			hostile = true;
			penetrate = -1;
			aiStyle = 1;
			tileCollide = true;
		}
		else if (type == 56)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 57)
		{
			width = 18;
			height = 18;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 58)
		{
			width = 18;
			height = 18;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 1.08f;
		}
		else if (type == 59)
		{
			width = 22;
			height = 22;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 0.9f;
		}
		else if (type == 60)
		{
			width = 22;
			height = 22;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 0.9f;
		}
		else if (type == 61)
		{
			width = 18;
			height = 18;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 1.16f;
		}
		else if (type == 62)
		{
			width = 22;
			height = 22;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 0.9f;
		}
		else if (type == 63)
		{
			netImportant = true;
			width = 22;
			height = 22;
			aiStyle = 15;
			friendly = true;
			penetrate = -1;
			melee = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 64)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.25f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 65)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			ranged = true;
			penetrate = -1;
			extraUpdates = 1;
		}
		else if (type == 66)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.27f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 67)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 68)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			ranged = true;
			penetrate = -1;
			extraUpdates = 1;
		}
		else if (type == 69)
		{
			width = 14;
			height = 14;
			aiStyle = 2;
			friendly = true;
			penetrate = 1;
		}
		else if (type == 70)
		{
			width = 14;
			height = 14;
			aiStyle = 2;
			friendly = true;
			penetrate = 1;
		}
		else if (type == 621)
		{
			width = 14;
			height = 14;
			aiStyle = 2;
			friendly = true;
			penetrate = 1;
		}
		else if (type == 71)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 72)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 11;
			friendly = true;
			light = 0.9f;
			tileCollide = false;
			penetrate = -1;
			timeLeft *= 5;
			ignoreWater = true;
			scale = 0.8f;
		}
		else if (type == 73 || type == 74)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
			light = 0.4f;
		}
		else if (type == 75)
		{
			width = 22;
			height = 22;
			aiStyle = 16;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 76 || type == 77 || type == 78)
		{
			if (type == 76)
			{
				width = 10;
				height = 22;
			}
			else if (type == 77)
			{
				width = 18;
				height = 24;
			}
			else
			{
				width = 22;
				height = 24;
			}
			aiStyle = 21;
			friendly = true;
			alpha = 100;
			light = 0.3f;
			penetrate = -1;
			timeLeft = 180;
			magic = true;
		}
		else if (type == 79)
		{
			width = 32;
			height = 32;
			aiStyle = 9;
			friendly = true;
			light = 0.8f;
			magic = true;
			penetrate = 3;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 12;
			ignoreWater = true;
		}
		else if (type == 80)
		{
			width = 16;
			height = 16;
			aiStyle = 22;
			friendly = true;
			magic = true;
			tileCollide = false;
			light = 0.5f;
			coldDamage = true;
		}
		else if (type == 81)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			hostile = true;
		}
		else if (type == 82)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			hostile = true;
		}
		else if (type == 83)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			hostile = true;
			penetrate = 3;
			light = 0.75f;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.7f;
			timeLeft = 600;
			magic = true;
		}
		else if (type == 84)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			hostile = true;
			penetrate = 3;
			light = 0.75f;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.2f;
			timeLeft = 600;
			magic = true;
		}
		else if (type == 85)
		{
			ArmorPenetration = 15;
			width = 6;
			height = 6;
			aiStyle = 193;
			friendly = true;
			alpha = 255;
			penetrate = 4;
			extraUpdates = 2;
			ranged = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
		}
		else if (type == 86)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 11;
			friendly = true;
			light = 0.9f;
			tileCollide = false;
			penetrate = -1;
			timeLeft *= 5;
			ignoreWater = true;
			scale = 0.8f;
		}
		else if (type == 87)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 11;
			friendly = true;
			light = 0.9f;
			tileCollide = false;
			penetrate = -1;
			timeLeft *= 5;
			ignoreWater = true;
			scale = 0.8f;
		}
		else if (type == 88)
		{
			width = 6;
			height = 6;
			aiStyle = 1;
			friendly = true;
			penetrate = 3;
			light = 0.75f;
			alpha = 255;
			extraUpdates = 4;
			scale = 1.4f;
			timeLeft = 600;
			magic = true;
		}
		else if (type == 89)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 255;
			scale = 1.2f;
			timeLeft = 600;
			ranged = true;
			extraUpdates = 1;
		}
		else if (type == 90)
		{
			width = 6;
			height = 6;
			aiStyle = 24;
			friendly = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 50;
			scale = 1.2f;
			timeLeft = 600;
			ranged = true;
			tileCollide = false;
		}
		else if (type == 91)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			timeLeft = 1200;
		}
		else if (type == 92)
		{
			width = 24;
			height = 24;
			aiStyle = 5;
			friendly = true;
			penetrate = 1;
			alpha = 50;
			scale = 0.8f;
			tileCollide = false;
			ranged = true;
		}
		else if (type == 93)
		{
			light = 0.15f;
			width = 12;
			height = 12;
			aiStyle = 2;
			friendly = true;
			penetrate = 2;
			magic = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 20;
		}
		else if (type == 94)
		{
			ignoreWater = true;
			width = 8;
			height = 8;
			aiStyle = 24;
			friendly = true;
			light = 0.5f;
			alpha = 50;
			scale = 1.2f;
			timeLeft = 600;
			magic = true;
			tileCollide = true;
			penetrate = 1;
		}
		else if (type == 95)
		{
			width = 16;
			height = 16;
			aiStyle = 8;
			friendly = true;
			light = 0.8f;
			alpha = 100;
			magic = true;
			penetrate = 2;
		}
		else if (type == 96)
		{
			width = 16;
			height = 16;
			aiStyle = 8;
			hostile = true;
			light = 0.8f;
			alpha = 100;
			magic = true;
			penetrate = -1;
			scale = 0.9f;
			scale = 1.3f;
		}
		else if (type == 97)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.1f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 98)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			hostile = true;
			penetrate = -1;
			trap = true;
		}
		else if (type == 99 || type == 727 || type == 1013 || type == 1014)
		{
			width = 31;
			height = 31;
			aiStyle = 25;
			friendly = true;
			hostile = true;
			penetrate = -1;
			trap = true;
		}
		else if (type == 1005)
		{
			width = 15;
			height = 15;
			aiStyle = 25;
			friendly = true;
			hostile = true;
			penetrate = -1;
			trap = true;
		}
		else if (type == 1021)
		{
			width = 31;
			height = 31;
			aiStyle = 25;
			hostile = true;
			penetrate = -1;
			extraUpdates = 1;
			timeLeft *= 3;
		}
		else if (type == 100)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			hostile = true;
			penetrate = 3;
			light = 0.75f;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.8f;
			timeLeft = 2700;
			magic = true;
		}
		else if (type == 101)
		{
			width = 6;
			height = 6;
			aiStyle = 23;
			hostile = true;
			alpha = 255;
			penetrate = -1;
			extraUpdates = 3;
			magic = true;
		}
		else if (type == 102)
		{
			width = 22;
			height = 22;
			aiStyle = 16;
			hostile = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 103)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			light = 1f;
			ranged = true;
			timeLeft = 1200;
		}
		else if (type == 104)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 255;
			scale = 1.2f;
			timeLeft = 600;
			ranged = true;
			extraUpdates = 2;
		}
		else if (type == 105)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.3f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 106)
		{
			width = 32;
			height = 32;
			aiStyle = 3;
			friendly = true;
			penetrate = -1;
			melee = true;
			light = 0.4f;
		}
		else if (type == 107)
		{
			width = 22;
			height = 22;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 1.1f;
		}
		else if (type == 108)
		{
			width = 260;
			height = 260;
			aiStyle = 16;
			friendly = true;
			hostile = true;
			penetrate = -1;
			tileCollide = false;
			alpha = 255;
			timeLeft = 2;
			trap = true;
		}
		else if (type == 109)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			hostile = true;
			scale = 0.9f;
			penetrate = -1;
			coldDamage = true;
			ranged = true;
		}
		else if (type == 110)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
			light = 0.5f;
			alpha = 255;
			scale = 1.2f;
			timeLeft = 600;
			ranged = true;
			extraUpdates = 1;
		}
		else if (type == 111)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 112)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 113)
		{
			width = 22;
			height = 22;
			aiStyle = 3;
			friendly = true;
			penetrate = -1;
			melee = true;
			light = 0.4f;
			coldDamage = true;
		}
		else if (type == 114)
		{
			width = 16;
			height = 16;
			aiStyle = 27;
			magic = true;
			penetrate = 3;
			light = 0.5f;
			alpha = 255;
			friendly = true;
		}
		else if (type == 115)
		{
			width = 16;
			height = 16;
			aiStyle = 27;
			hostile = true;
			magic = true;
			penetrate = -1;
			light = 0.5f;
			alpha = 255;
		}
		else if (type == 116)
		{
			width = 16;
			height = 16;
			aiStyle = 27;
			melee = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 255;
			friendly = true;
		}
		else if (type == 117)
		{
			arrow = true;
			extraUpdates = 2;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			timeLeft = 1200;
		}
		else if (type == 118)
		{
			width = 10;
			height = 10;
			aiStyle = 28;
			alpha = 255;
			melee = true;
			penetrate = 1;
			friendly = true;
			coldDamage = true;
		}
		else if (type == 119)
		{
			width = 14;
			height = 14;
			aiStyle = 28;
			alpha = 255;
			melee = true;
			penetrate = 3;
			friendly = true;
			coldDamage = true;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type == 120)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			coldDamage = true;
			extraUpdates = 1;
			timeLeft = 1200;
		}
		else if (type == 121)
		{
			width = 10;
			height = 10;
			aiStyle = 29;
			alpha = 255;
			magic = true;
			penetrate = 1;
			friendly = true;
		}
		else if (type == 122)
		{
			width = 10;
			height = 10;
			aiStyle = 29;
			alpha = 255;
			magic = true;
			penetrate = 1;
			friendly = true;
		}
		else if (type == 123)
		{
			width = 10;
			height = 10;
			aiStyle = 29;
			alpha = 255;
			magic = true;
			penetrate = 1;
			friendly = true;
		}
		else if (type == 124)
		{
			width = 10;
			height = 10;
			aiStyle = 29;
			alpha = 255;
			magic = true;
			penetrate = 2;
			friendly = true;
		}
		else if (type == 125)
		{
			width = 10;
			height = 10;
			aiStyle = 29;
			alpha = 255;
			magic = true;
			penetrate = 2;
			friendly = true;
		}
		else if (type == 126)
		{
			width = 10;
			height = 10;
			aiStyle = 29;
			alpha = 255;
			magic = true;
			penetrate = 2;
			friendly = true;
		}
		else if (type == 127)
		{
			netImportant = true;
			width = 22;
			height = 22;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 128)
		{
			width = 14;
			height = 14;
			aiStyle = 28;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
			coldDamage = true;
		}
		else if (type == 129)
		{
			width = 14;
			height = 14;
			aiStyle = 28;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
			tileCollide = false;
		}
		else if (type == 130)
		{
			width = 22;
			height = 22;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.2f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 131)
		{
			width = 22;
			height = 22;
			aiStyle = 30;
			friendly = true;
			penetrate = 1;
			tileCollide = false;
			melee = true;
			light = 0.5f;
		}
		else if (type == 132)
		{
			width = 16;
			height = 16;
			aiStyle = 27;
			melee = true;
			penetrate = 3;
			light = 0.5f;
			alpha = 255;
			friendly = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 133)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
		}
		else if (type == 134)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 135)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 136)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
		}
		else if (type == 137)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 138)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 139)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
		}
		else if (type == 140)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 141)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 142)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
		}
		else if (type == 143)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 144)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 145)
		{
			width = 6;
			height = 6;
			aiStyle = 31;
			friendly = true;
			alpha = 255;
			penetrate = -1;
			extraUpdates = 2;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 146)
		{
			width = 6;
			height = 6;
			aiStyle = 31;
			friendly = true;
			alpha = 255;
			penetrate = -1;
			extraUpdates = 2;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 147)
		{
			width = 6;
			height = 6;
			aiStyle = 31;
			friendly = true;
			alpha = 255;
			penetrate = -1;
			extraUpdates = 2;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 148)
		{
			width = 6;
			height = 6;
			aiStyle = 31;
			friendly = true;
			alpha = 255;
			penetrate = -1;
			extraUpdates = 2;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 149)
		{
			width = 6;
			height = 6;
			aiStyle = 31;
			friendly = true;
			alpha = 255;
			penetrate = -1;
			extraUpdates = 2;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 150 || type == 151 || type == 152)
		{
			ArmorPenetration = 10;
			width = 28;
			height = 28;
			aiStyle = 4;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			alpha = 255;
			ignoreWater = true;
			magic = true;
		}
		else if (type == 153)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.1f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 154)
		{
			netImportant = true;
			width = 22;
			height = 22;
			aiStyle = 15;
			friendly = true;
			penetrate = -1;
			melee = true;
			scale = 0.8f;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 155)
		{
			netImportant = true;
			width = 44;
			height = 44;
			aiStyle = 32;
			friendly = true;
		}
		else if (type == 156)
		{
			width = 16;
			height = 16;
			aiStyle = 27;
			melee = true;
			penetrate = 2;
			light = 0.5f;
			alpha = 255;
			friendly = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 157)
		{
			width = 32;
			height = 32;
			aiStyle = 27;
			melee = true;
			light = 0.5f;
			alpha = 255;
			friendly = true;
			scale = 1.2f;
		}
		else if (type == 158)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			timeLeft = 600;
			ranged = true;
			extraUpdates = 1;
		}
		else if (type == 159)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			timeLeft = 600;
			ranged = true;
			extraUpdates = 1;
		}
		else if (type == 160)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			timeLeft = 600;
			ranged = true;
			extraUpdates = 1;
		}
		else if (type == 161)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			timeLeft = 600;
			ranged = true;
			extraUpdates = 1;
		}
		else if (type == 162)
		{
			width = 16;
			height = 16;
			aiStyle = 2;
			friendly = true;
			penetrate = 4;
			alpha = 255;
		}
		else if (type == 163)
		{
			netImportant = true;
			width = 6;
			height = 6;
			aiStyle = 33;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			timeLeft = 36000;
		}
		else if (type == 164)
		{
			width = 128;
			height = 128;
			aiStyle = 16;
			friendly = true;
			hostile = true;
			penetrate = -1;
			tileCollide = false;
			alpha = 255;
			timeLeft = 2;
		}
		else if (type == 165)
		{
			netImportant = true;
			width = 12;
			height = 12;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 166)
		{
			width = 14;
			height = 14;
			aiStyle = 2;
			friendly = true;
			ranged = true;
			coldDamage = true;
		}
		else if (type == 167 || type == 168 || type == 169 || type == 170)
		{
			width = 14;
			height = 14;
			aiStyle = 34;
			friendly = true;
			ranged = true;
			timeLeft = 45;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 1;
			appliesImmunityTimeOnSingleHits = true;
		}
		else if (type == 171 || type == 505 || type == 506)
		{
			width = 14;
			height = 14;
			aiStyle = 35;
			penetrate = -1;
			tileCollide = false;
			timeLeft = 400;
		}
		else if (type == 172)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			light = 1f;
			ranged = true;
			coldDamage = true;
			timeLeft = 1200;
		}
		else if (type == 173)
		{
			width = 16;
			height = 16;
			aiStyle = 27;
			melee = true;
			penetrate = 1;
			light = 0.2f;
			alpha = 255;
			friendly = true;
		}
		else if (type == 174)
		{
			alpha = 255;
			width = 6;
			height = 6;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
			coldDamage = true;
		}
		else if (type == 175)
		{
			width = 34;
			height = 34;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 176)
		{
			alpha = 255;
			width = 6;
			height = 6;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 177)
		{
			width = 10;
			height = 10;
			aiStyle = 28;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
			coldDamage = true;
		}
		else if (type == 178)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			alpha = 255;
			penetrate = -1;
			timeLeft = 2;
		}
		else if (type == 179)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 180)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
			light = 0.5f;
			alpha = 255;
			scale = 1.2f;
			timeLeft = 600;
			extraUpdates = 1;
		}
		else if (type == 181)
		{
			width = 8;
			height = 8;
			aiStyle = 36;
			friendly = true;
			penetrate = 3;
			alpha = 255;
			timeLeft = 600;
			extraUpdates = 3;
			noEnchantmentVisuals = true;
		}
		else if (type == 182)
		{
			light = 0.15f;
			width = 30;
			height = 30;
			aiStyle = 3;
			friendly = true;
			penetrate = 10;
			melee = true;
			extraUpdates = 1;
		}
		else if (type == 183)
		{
			width = 14;
			height = 22;
			aiStyle = 14;
			penetrate = 1;
			timeLeft = 180;
			ranged = true;
			friendly = true;
		}
		else if (type == 184)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			hostile = true;
			penetrate = -1;
			trap = true;
		}
		else if (type == 185)
		{
			width = 14;
			height = 14;
			aiStyle = 14;
			friendly = true;
			hostile = true;
			penetrate = -1;
			timeLeft = 900;
			trap = true;
		}
		else if (type == 186)
		{
			width = 10;
			height = 14;
			aiStyle = 37;
			friendly = true;
			tileCollide = false;
			ignoreWater = true;
			hostile = true;
			penetrate = -1;
			timeLeft = 300;
			trap = true;
		}
		else if (type == 187)
		{
			width = 6;
			height = 6;
			aiStyle = 38;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
			timeLeft = 60;
			trap = true;
		}
		else if (type == 188)
		{
			width = 6;
			height = 6;
			aiStyle = 23;
			friendly = true;
			hostile = true;
			alpha = 255;
			penetrate = -1;
			extraUpdates = 2;
			trap = true;
		}
		else if (type == 189)
		{
			ArmorPenetration = 10;
			width = 8;
			height = 8;
			aiStyle = 36;
			friendly = true;
			penetrate = 3;
			alpha = 255;
			timeLeft = 600;
			magic = true;
			extraUpdates = 3;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type == 190)
		{
			width = 22;
			height = 22;
			aiStyle = 39;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			ranged = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 14;
		}
		else if (type >= 191 && type <= 194)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 26;
			penetrate = -1;
			timeLeft *= 5;
			minion = true;
			minionSlots = 1f;
			if (type == 192)
			{
				scale = 1.025f;
			}
			if (type == 193)
			{
				scale = 1.05f;
			}
			if (type == 194)
			{
				scale = 1.075f;
			}
		}
		else if (type == 195)
		{
			tileCollide = false;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			extraUpdates = 1;
		}
		else if (type == 196)
		{
			width = 16;
			height = 16;
			aiStyle = 14;
			penetrate = -1;
			scale = 0.8f;
		}
		else if (type == 197)
		{
			netImportant = true;
			width = 42;
			height = 42;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 198)
		{
			netImportant = true;
			width = 26;
			height = 26;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 199)
		{
			netImportant = true;
			width = 28;
			height = 28;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
			ignoreWater = true;
		}
		else if (type == 200)
		{
			netImportant = true;
			width = 28;
			height = 28;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 201)
		{
			knockBack = 12f;
			width = 24;
			height = 24;
			aiStyle = 17;
			penetrate = -1;
			if (Main.getGoodWorld)
			{
				friendly = true;
				hostile = true;
			}
		}
		else if (type == 202)
		{
			knockBack = 12f;
			width = 24;
			height = 24;
			aiStyle = 17;
			penetrate = -1;
			if (Main.getGoodWorld)
			{
				friendly = true;
				hostile = true;
			}
		}
		else if (type == 203)
		{
			knockBack = 12f;
			width = 24;
			height = 24;
			aiStyle = 17;
			penetrate = -1;
			if (Main.getGoodWorld)
			{
				friendly = true;
				hostile = true;
			}
		}
		else if (type == 204)
		{
			knockBack = 12f;
			width = 24;
			height = 24;
			aiStyle = 17;
			penetrate = -1;
			if (Main.getGoodWorld)
			{
				friendly = true;
				hostile = true;
			}
		}
		else if (type == 205)
		{
			knockBack = 12f;
			width = 24;
			height = 24;
			aiStyle = 17;
			penetrate = -1;
			if (Main.getGoodWorld)
			{
				friendly = true;
				hostile = true;
			}
		}
		else if (type == 206)
		{
			width = 14;
			height = 14;
			aiStyle = 40;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			timeLeft = 600;
			magic = true;
		}
		else if (type == 207)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.2f;
			timeLeft = 600;
			ranged = true;
		}
		else if (type == 208)
		{
			netImportant = true;
			width = 18;
			height = 36;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 209)
		{
			width = 12;
			height = 32;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
			light = 0.5f;
		}
		else if (type == 210)
		{
			netImportant = true;
			width = 14;
			height = 30;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 211)
		{
			netImportant = true;
			width = 24;
			height = 24;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
			light = 1f;
			ignoreWater = true;
		}
		else if (type == 212)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.12f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 213)
		{
			width = 22;
			height = 22;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 0.92f;
		}
		else if (type == 214)
		{
			width = 18;
			height = 18;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 215)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.27f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 216)
		{
			width = 22;
			height = 22;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 0.93f;
		}
		else if (type == 217)
		{
			width = 18;
			height = 18;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 1.12f;
		}
		else if (type == 218)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.28f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 219)
		{
			width = 22;
			height = 22;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 0.95f;
		}
		else if (type == 220)
		{
			width = 18;
			height = 18;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 1.2f;
		}
		else if (type == 221)
		{
			width = 20;
			height = 20;
			aiStyle = 41;
			friendly = true;
			tileCollide = false;
			ignoreWater = true;
			timeLeft = 120;
			penetrate = -1;
			scale = 1f + (float)Main.rand.Next(30) * 0.01f;
			extraUpdates = 2;
		}
		else if (type == 222)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.3f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 223)
		{
			width = 22;
			height = 22;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 1f;
		}
		else if (type == 224)
		{
			width = 18;
			height = 18;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 1.1f;
		}
		else if (type == 225)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			extraUpdates = 1;
			timeLeft = 1200;
		}
		else if (type == 226)
		{
			netImportant = true;
			width = 22;
			height = 42;
			aiStyle = 42;
			friendly = true;
			tileCollide = false;
			penetrate = -1;
			timeLeft *= 5;
			light = 0.4f;
			ignoreWater = true;
		}
		else if (type == 227)
		{
			netImportant = true;
			tileCollide = false;
			width = 14;
			height = 14;
			aiStyle = 43;
			friendly = true;
			penetrate = 1;
			timeLeft = 180;
			extraUpdates = 180;
			hide = true;
		}
		else if (type == 228)
		{
			tileCollide = false;
			width = 30;
			height = 30;
			aiStyle = 44;
			friendly = true;
			melee = true;
			scale = 1.1f;
			penetrate = -1;
			noEnchantmentVisuals = true;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type == 229)
		{
			width = 30;
			height = 30;
			aiStyle = 44;
			friendly = true;
			melee = true;
			penetrate = -1;
			light = 0.2f;
			noEnchantmentVisuals = true;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type >= 230 && type <= 235)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 236)
		{
			netImportant = true;
			width = 34;
			height = 34;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 237)
		{
			netImportant = true;
			width = 28;
			height = 28;
			aiStyle = 45;
			penetrate = -1;
		}
		else if (type == 238)
		{
			netImportant = true;
			tileCollide = false;
			ignoreWater = true;
			width = 54;
			height = 28;
			aiStyle = 45;
			penetrate = -1;
			timeLeft = 18000;
		}
		else if (type == 239)
		{
			ignoreWater = true;
			width = 4;
			height = 40;
			aiStyle = 45;
			friendly = true;
			penetrate = 5;
			timeLeft = 300;
			scale = 1.1f;
			magic = true;
			extraUpdates = 1;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type == 240)
		{
			width = 16;
			height = 16;
			aiStyle = 2;
			hostile = true;
			penetrate = -1;
			alpha = 255;
		}
		else if (type == 241)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 242)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 3;
			light = 0.5f;
			alpha = 255;
			extraUpdates = 7;
			scale = 1.18f;
			timeLeft = 600;
			ranged = true;
			ignoreWater = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 15;
		}
		else if (type == 243)
		{
			netImportant = true;
			width = 28;
			height = 28;
			aiStyle = 45;
			penetrate = -1;
		}
		else if (type == 244)
		{
			netImportant = true;
			tileCollide = false;
			ignoreWater = true;
			width = 54;
			height = 28;
			aiStyle = 45;
			penetrate = -1;
			timeLeft = 18000;
		}
		else if (type == 245)
		{
			ignoreWater = true;
			width = 4;
			height = 40;
			aiStyle = 45;
			friendly = true;
			penetrate = 2;
			timeLeft = 300;
			scale = 1.1f;
			magic = true;
			extraUpdates = 1;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type == 246)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			alpha = 255;
			extraUpdates = 1;
		}
		else if (type == 247)
		{
			netImportant = true;
			width = 34;
			height = 34;
			aiStyle = 15;
			friendly = true;
			penetrate = -1;
			melee = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 248)
		{
			width = 18;
			height = 18;
			aiStyle = 1;
			friendly = true;
			melee = true;
		}
		else if (type == 249)
		{
			width = 12;
			height = 12;
			aiStyle = 2;
			friendly = true;
			ranged = true;
		}
		else if (type == 250)
		{
			width = 12;
			height = 12;
			aiStyle = 46;
			penetrate = -1;
			magic = true;
			alpha = 255;
			ignoreWater = true;
			scale = 1.25f;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type == 251)
		{
			width = 14;
			height = 14;
			aiStyle = 46;
			friendly = true;
			penetrate = -1;
			magic = true;
			alpha = 255;
			light = 0.3f;
			tileCollide = false;
			ignoreWater = true;
			scale = 1.25f;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type == 252)
		{
			width = 18;
			height = 18;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 1.1f;
		}
		else if (type == 253)
		{
			width = 16;
			height = 16;
			aiStyle = 8;
			friendly = true;
			light = 0.8f;
			alpha = 100;
			magic = true;
			coldDamage = true;
		}
		else if (type == 254)
		{
			width = 38;
			height = 38;
			aiStyle = 47;
			magic = true;
			timeLeft = 900;
			light = 0.5f;
		}
		else if (type == 255)
		{
			width = 8;
			height = 8;
			aiStyle = 48;
			friendly = true;
			magic = true;
			extraUpdates = 100;
			timeLeft = 100;
		}
		else if (type == 256)
		{
			netImportant = true;
			tileCollide = false;
			width = 6;
			height = 6;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			scale = 1f;
			timeLeft *= 10;
		}
		else if (type == 257)
		{
			ignoreWater = true;
			width = 4;
			height = 4;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
			light = 0.75f;
			alpha = 255;
			scale = 1.2f;
			timeLeft = 600;
			magic = true;
			coldDamage = true;
			extraUpdates = 1;
		}
		else if (type == 258)
		{
			width = 16;
			height = 16;
			aiStyle = 8;
			hostile = true;
			penetrate = -1;
			alpha = 100;
			timeLeft = 300;
		}
		else if (type == 259)
		{
			ignoreWater = true;
			tileCollide = false;
			width = 8;
			height = 8;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
			light = 0.3f;
			scale = 1.1f;
			magic = true;
			extraUpdates = 1;
		}
		else if (type == 260)
		{
			width = 8;
			height = 8;
			aiStyle = 48;
			friendly = true;
			magic = true;
			extraUpdates = 100;
			timeLeft = 200;
			penetrate = 1;
		}
		else if (type == 261)
		{
			width = 32;
			height = 34;
			aiStyle = 14;
			friendly = true;
			penetrate = 6;
			magic = true;
			ignoreWater = true;
			extraUpdates = 1;
		}
		else if (type == 262)
		{
			width = 30;
			height = 30;
			aiStyle = 13;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			melee = true;
			extraUpdates = 1;
		}
		else if (type == 263)
		{
			width = 34;
			height = 34;
			alpha = 100;
			light = 0.5f;
			aiStyle = 18;
			friendly = true;
			penetrate = 4;
			tileCollide = true;
			scale = 1f;
			melee = true;
			timeLeft = 180;
			coldDamage = true;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 8;
		}
		else if (type == 264)
		{
			ignoreWater = true;
			width = 4;
			height = 40;
			aiStyle = 45;
			hostile = true;
			penetrate = -1;
			timeLeft = 120;
			scale = 1.1f;
			extraUpdates = 1;
		}
		else if (type == 265)
		{
			width = 12;
			height = 12;
			aiStyle = 1;
			alpha = 255;
			friendly = true;
			magic = true;
			penetrate = 3;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
			timeLeft = 37;
		}
		else if (type == 266)
		{
			netImportant = true;
			alpha = 75;
			width = 24;
			height = 16;
			aiStyle = 26;
			penetrate = -1;
			timeLeft *= 5;
			minion = true;
			minionSlots = 1f;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 12;
		}
		else if (type == 267)
		{
			alpha = 255;
			width = 14;
			height = 14;
			aiStyle = 1;
			friendly = true;
			ranged = true;
		}
		else if (type == 268)
		{
			netImportant = true;
			width = 18;
			height = 32;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 269)
		{
			netImportant = true;
			width = 20;
			height = 26;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 270)
		{
			width = 26;
			height = 26;
			aiStyle = 1;
			alpha = 255;
			hostile = true;
			penetrate = 3;
		}
		else if (type == 271)
		{
			width = 20;
			height = 20;
			aiStyle = 13;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			melee = true;
			scale = 1.2f;
		}
		else if (type == 272)
		{
			width = 32;
			height = 32;
			aiStyle = 3;
			friendly = true;
			scale = 0.9f;
			penetrate = -1;
			melee = true;
		}
		else if (type == 273)
		{
			width = 26;
			height = 26;
			aiStyle = 13;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			melee = true;
		}
		else if (type == 274)
		{
			width = 42;
			height = 42;
			alpha = 100;
			light = 0.5f;
			aiStyle = 18;
			friendly = true;
			penetrate = 5;
			tileCollide = false;
			scale = 1.1f;
			melee = true;
			timeLeft = 180;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type == 275)
		{
			alpha = 255;
			width = 14;
			height = 14;
			aiStyle = 1;
			hostile = true;
		}
		else if (type == 276)
		{
			alpha = 255;
			width = 14;
			height = 14;
			aiStyle = 1;
			hostile = true;
		}
		else if (type == 277)
		{
			alpha = 255;
			width = 38;
			height = 38;
			aiStyle = 14;
			hostile = true;
		}
		else if (type == 278)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			light = 1f;
			ranged = true;
			extraUpdates = 1;
			timeLeft = 1200;
		}
		else if (type == 279)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.25f;
			timeLeft = 600;
			ranged = true;
		}
		else if (type == 280)
		{
			width = 32;
			height = 32;
			aiStyle = 12;
			friendly = true;
			alpha = 255;
			penetrate = 5;
			extraUpdates = 2;
			ignoreWater = true;
			magic = true;
		}
		else if (type == 281)
		{
			width = 28;
			height = 28;
			aiStyle = 49;
			friendly = true;
			alpha = 255;
			timeLeft = 600;
			idStaticNPCHitCooldown = 10;
			usesIDStaticNPCImmunity = true;
			penetrate = -1;
		}
		else if (type == 282)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			extraUpdates = 1;
			timeLeft = 1200;
		}
		else if (type == 283)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.25f;
			timeLeft = 600;
			ranged = true;
		}
		else if (type == 284)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.3f;
			timeLeft = 600;
			ranged = true;
		}
		else if (type == 285)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.3f;
			timeLeft = 600;
			ranged = true;
		}
		else if (type == 286)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.3f;
			timeLeft = 600;
			ranged = true;
		}
		else if (type == 287)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.3f;
			timeLeft = 600;
			ranged = true;
		}
		else if (type == 288)
		{
			width = 32;
			height = 32;
			aiStyle = 12;
			hostile = true;
			alpha = 255;
			penetrate = -1;
			extraUpdates = 2;
			ignoreWater = true;
			magic = true;
		}
		else if (type == 289)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			alpha = 255;
			penetrate = -1;
			timeLeft = 2;
		}
		else if (type == 290)
		{
			width = 4;
			height = 4;
			aiStyle = 48;
			hostile = true;
			magic = true;
			extraUpdates = 100;
			timeLeft = 100;
			penetrate = -1;
		}
		else if (type == 291)
		{
			width = 12;
			height = 12;
			aiStyle = 50;
			hostile = true;
			alpha = 255;
			magic = true;
			tileCollide = false;
			penetrate = -1;
		}
		else if (type == 292)
		{
			width = 130;
			height = 130;
			aiStyle = 50;
			hostile = true;
			alpha = 255;
			magic = true;
			tileCollide = false;
			penetrate = -1;
		}
		else if (type == 293)
		{
			width = 12;
			height = 12;
			aiStyle = 51;
			hostile = true;
			alpha = 255;
			magic = true;
			tileCollide = false;
			penetrate = -1;
			extraUpdates = 1;
		}
		else if (type == 294)
		{
			width = 4;
			height = 4;
			aiStyle = 48;
			friendly = true;
			magic = true;
			extraUpdates = 100;
			timeLeft = 300;
			penetrate = -1;
		}
		else if (type == 295)
		{
			width = 12;
			height = 12;
			aiStyle = 50;
			friendly = true;
			alpha = 255;
			magic = true;
			tileCollide = true;
		}
		else if (type == 296)
		{
			width = 150;
			height = 150;
			aiStyle = 50;
			friendly = true;
			alpha = 255;
			magic = true;
			tileCollide = false;
			penetrate = -1;
		}
		else if (type == 297)
		{
			width = 12;
			height = 12;
			aiStyle = 51;
			friendly = true;
			alpha = 255;
			magic = true;
			extraUpdates = 1;
			penetrate = 3;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type == 298)
		{
			width = 6;
			height = 6;
			aiStyle = 52;
			alpha = 255;
			magic = true;
			tileCollide = false;
			extraUpdates = 3;
		}
		else if (type == 299)
		{
			width = 6;
			height = 6;
			aiStyle = 1;
			hostile = true;
			alpha = 255;
			penetrate = -1;
			extraUpdates = 2;
			magic = true;
			ignoreWater = true;
			tileCollide = false;
		}
		else if (type == 300)
		{
			width = 38;
			height = 38;
			aiStyle = 2;
			hostile = true;
			penetrate = -1;
			ignoreWater = true;
			tileCollide = false;
		}
		else if (type == 301)
		{
			width = 38;
			height = 38;
			aiStyle = 3;
			friendly = true;
			penetrate = -1;
			melee = true;
			extraUpdates = 2;
		}
		else if (type == 302)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
			light = 0.3f;
			alpha = 255;
			extraUpdates = 7;
			scale = 1.18f;
			timeLeft = 300;
			ranged = true;
			ignoreWater = true;
		}
		else if (type == 303)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			hostile = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 304)
		{
			alpha = 255;
			width = 30;
			height = 30;
			aiStyle = 2;
			friendly = true;
			penetrate = 1;
			melee = true;
			light = 0.2f;
			ignoreWater = true;
			extraUpdates = 0;
		}
		else if (type == 305)
		{
			width = 6;
			height = 6;
			aiStyle = 52;
			alpha = 255;
			tileCollide = false;
			extraUpdates = 10;
		}
		else if (type == 306)
		{
			alpha = 255;
			width = 14;
			height = 14;
			aiStyle = 2;
			friendly = true;
			penetrate = 1;
			melee = true;
			ignoreWater = true;
			extraUpdates = 1;
		}
		else if (type == 307)
		{
			width = 16;
			height = 16;
			aiStyle = 36;
			penetrate = 1;
			alpha = 255;
			timeLeft = 600;
			melee = true;
			extraUpdates = 3;
		}
		else if (type == 308)
		{
			width = 80;
			height = 74;
			aiStyle = 53;
			timeLeft = 36000;
			light = 0.25f;
			ignoreWater = true;
			coldDamage = true;
			sentry = true;
			netImportant = true;
		}
		else if (type == 309)
		{
			width = 14;
			height = 14;
			aiStyle = 28;
			alpha = 255;
			penetrate = 3;
			friendly = true;
			extraUpdates = 3;
			coldDamage = true;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type == 310)
		{
			netImportant = true;
			width = 6;
			height = 6;
			aiStyle = 33;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			timeLeft = 36000;
		}
		else if (type == 311)
		{
			width = 10;
			height = 12;
			aiStyle = 1;
			friendly = true;
			penetrate = 3;
			alpha = 255;
			timeLeft = 600;
			ranged = true;
		}
		else if (type == 312)
		{
			alpha = 255;
			width = 32;
			height = 32;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			timeLeft = 300;
			glowMask = 257;
		}
		else if (type == 313)
		{
			netImportant = true;
			width = 30;
			height = 30;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 314)
		{
			netImportant = true;
			width = 24;
			height = 40;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 315)
		{
			netImportant = true;
			width = 14;
			height = 14;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 316)
		{
			alpha = 255;
			width = 16;
			height = 16;
			aiStyle = 36;
			friendly = true;
			penetrate = 1;
			timeLeft = 600;
			magic = true;
		}
		else if (type == 317)
		{
			netImportant = true;
			width = 28;
			height = 28;
			aiStyle = 54;
			penetrate = 1;
			timeLeft *= 5;
			minion = true;
			minionSlots = 1f;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 318)
		{
			width = 12;
			height = 14;
			aiStyle = 2;
			friendly = true;
			ranged = true;
		}
		else if (type == 319)
		{
			netImportant = true;
			width = 36;
			height = 30;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 320)
		{
			width = 34;
			height = 34;
			aiStyle = 3;
			friendly = true;
			penetrate = -1;
			melee = true;
		}
		else if (type == 321)
		{
			width = 30;
			height = 30;
			aiStyle = 55;
			friendly = true;
			melee = true;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 322)
		{
			netImportant = true;
			width = 14;
			height = 14;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 323)
		{
			penetrate = 10;
			extraUpdates = 3;
			width = 14;
			height = 14;
			aiStyle = 1;
			alpha = 255;
			friendly = true;
			ranged = true;
			scale = 0.8f;
		}
		else if (type == 324)
		{
			netImportant = true;
			width = 26;
			height = 38;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 325)
		{
			alpha = 255;
			penetrate = -1;
			width = 14;
			height = 14;
			aiStyle = 1;
			hostile = true;
			tileCollide = false;
			timeLeft = 420;
		}
		else if (type >= 326 && type <= 328)
		{
			if (type == 326)
			{
				width = 14;
				height = 16;
			}
			else if (type == 327)
			{
				width = 12;
				height = 14;
			}
			else
			{
				width = 6;
				height = 12;
			}
			aiStyle = 14;
			hostile = true;
			penetrate = -1;
			timeLeft = 360;
		}
		else if (type == 329)
		{
			width = 80;
			height = 80;
			light = 0.25f;
			aiStyle = 56;
			hostile = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft = 420;
		}
		else if (type == 330)
		{
			width = 22;
			height = 22;
			aiStyle = 2;
			friendly = true;
			penetrate = 6;
			ranged = true;
		}
		else if (type == 331)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 332)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
			light = 0.5f;
		}
		else if (type == 333)
		{
			width = 38;
			height = 38;
			aiStyle = 3;
			friendly = true;
			scale = 0.9f;
			penetrate = -1;
			melee = true;
		}
		else if (type == 334)
		{
			netImportant = true;
			width = 28;
			height = 28;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 335)
		{
			width = 22;
			height = 22;
			aiStyle = 30;
			friendly = true;
			penetrate = 1;
			melee = true;
		}
		else if (type == 336)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			magic = true;
			scale = 0.8f;
			extraUpdates = 1;
		}
		else if (type == 337)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			magic = true;
			tileCollide = false;
			coldDamage = true;
			extraUpdates = 1;
		}
		else if (type == 338 || type == 339 || type == 340 || type == 341)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			penetrate = -1;
			friendly = true;
			ranged = true;
			scale = 0.9f;
		}
		else if (type == 342)
		{
			width = 22;
			height = 2;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.1f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			coldDamage = true;
		}
		else if (type == 343)
		{
			alpha = 255;
			width = 10;
			height = 10;
			aiStyle = 57;
			friendly = true;
			melee = true;
			scale = 1.1f;
			penetrate = 3;
			coldDamage = true;
			timeLeft = 120;
		}
		else if (type == 344)
		{
			width = 26;
			height = 26;
			aiStyle = 1;
			friendly = true;
			scale = 0.9f;
			alpha = 255;
			melee = true;
			coldDamage = true;
			tileCollide = false;
			noEnchantmentVisuals = true;
			timeLeft = 240;
		}
		else if (type == 345)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			hostile = true;
			scale = 0.8f;
		}
		else if (type == 346)
		{
			width = 18;
			height = 18;
			aiStyle = 14;
			hostile = true;
			penetrate = -1;
			timeLeft = 300;
		}
		else if (type == 347)
		{
			width = 6;
			height = 6;
			aiStyle = 2;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 348)
		{
			aiStyle = 1;
			width = 48;
			height = 48;
			hostile = true;
			penetrate = -1;
			tileCollide = false;
			coldDamage = true;
			extraUpdates = 1;
			timeLeft = 900;
		}
		else if (type == 349)
		{
			aiStyle = 1;
			width = 12;
			height = 12;
			hostile = true;
			penetrate = -1;
			coldDamage = true;
			timeLeft = 900;
		}
		else if (type == 350)
		{
			alpha = 255;
			penetrate = -1;
			width = 14;
			height = 14;
			aiStyle = 1;
			hostile = true;
			tileCollide = false;
			timeLeft /= 2;
		}
		else if (type == 351)
		{
			alpha = 255;
			penetrate = -1;
			width = 24;
			height = 24;
			aiStyle = 58;
			hostile = true;
			tileCollide = false;
		}
		else if (type == 352)
		{
			width = 30;
			height = 30;
			aiStyle = 14;
			hostile = true;
			penetrate = -1;
			timeLeft /= 3;
		}
		else if (type == 353)
		{
			netImportant = true;
			width = 18;
			height = 28;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 354)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			ranged = true;
			penetrate = -1;
			extraUpdates = 1;
		}
		else if (type == 355)
		{
			width = 12;
			height = 12;
			aiStyle = 1;
			alpha = 255;
			friendly = true;
			magic = true;
			penetrate = 5;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
			timeLeft = 58;
		}
		else if (type == 356)
		{
			width = 6;
			height = 6;
			aiStyle = 59;
			alpha = 255;
			magic = true;
			tileCollide = false;
			extraUpdates = 3;
		}
		else if (type == 357)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 6;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.2f;
			timeLeft = 600;
			ranged = true;
		}
		else if (type == 358)
		{
			width = 18;
			height = 18;
			aiStyle = 60;
			alpha = 255;
			penetrate = -1;
			extraUpdates = 2;
			ignoreWater = true;
		}
		else if (type == 359)
		{
			width = 14;
			height = 14;
			aiStyle = 28;
			alpha = 255;
			magic = true;
			penetrate = 2;
			friendly = true;
			coldDamage = true;
		}
		else if ((type >= 360 && type <= 366) || type == 381 || type == 382 || type == 760 || type == 775)
		{
			width = 14;
			height = 14;
			aiStyle = 61;
			penetrate = -1;
			netImportant = true;
			bobber = true;
		}
		else if (type == 367)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.1f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 368)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 369)
		{
			width = 22;
			height = 22;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 370)
		{
			width = 14;
			height = 14;
			aiStyle = 2;
			friendly = true;
			penetrate = 1;
		}
		else if (type == 371)
		{
			width = 14;
			height = 14;
			aiStyle = 2;
			friendly = true;
			penetrate = 1;
		}
		else if (type == 372)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 373)
		{
			netImportant = true;
			width = 24;
			height = 26;
			aiStyle = 62;
			penetrate = -1;
			timeLeft *= 5;
			minion = true;
			minionSlots = 1f;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 374)
		{
			width = 10;
			height = 10;
			aiStyle = 0;
			friendly = true;
			penetrate = 1;
			aiStyle = 1;
			tileCollide = true;
			scale *= 0.9f;
		}
		else if (type == 375)
		{
			netImportant = true;
			width = 34;
			height = 26;
			aiStyle = 62;
			penetrate = -1;
			timeLeft *= 5;
			minion = true;
			minionSlots = 1f;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 376)
		{
			width = 12;
			height = 12;
			aiStyle = 0;
			friendly = true;
			penetrate = 5;
			aiStyle = 1;
			tileCollide = true;
			timeLeft = 100;
			alpha = 255;
			extraUpdates = 1;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 6;
		}
		else if (type == 377)
		{
			width = 66;
			height = 50;
			aiStyle = 53;
			timeLeft = 36000;
			ignoreWater = true;
			sentry = true;
			netImportant = true;
		}
		else if (type == 378)
		{
			width = 16;
			height = 16;
			aiStyle = 14;
			friendly = true;
			penetrate = -1;
			timeLeft = 60;
			scale = 0.9f;
		}
		else if (type == 379)
		{
			width = 14;
			height = 10;
			aiStyle = 63;
			friendly = true;
			timeLeft = 300;
			penetrate = 1;
		}
		else if (type == 380)
		{
			netImportant = true;
			width = 26;
			height = 26;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 383)
		{
			width = 34;
			height = 34;
			aiStyle = 3;
			friendly = true;
			penetrate = -1;
			melee = true;
		}
		else if (type == 384)
		{
			width = 150;
			height = 42;
			hostile = true;
			penetrate = -1;
			aiStyle = 64;
			tileCollide = false;
			ignoreWater = true;
			alpha = 255;
			timeLeft = 540;
		}
		else if (type == 385)
		{
			width = 30;
			height = 30;
			hostile = true;
			penetrate = -1;
			aiStyle = 65;
			alpha = 255;
			timeLeft = 300;
		}
		else if (type == 386)
		{
			width = 150;
			height = 42;
			hostile = true;
			penetrate = -1;
			aiStyle = 64;
			tileCollide = false;
			ignoreWater = true;
			alpha = 255;
			timeLeft = 840;
		}
		else if (type == 387)
		{
			netImportant = true;
			width = 40;
			height = 20;
			aiStyle = 66;
			penetrate = -1;
			timeLeft *= 5;
			minion = true;
			minionSlots = 0.5f;
			tileCollide = false;
			ignoreWater = true;
			friendly = true;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 16;
		}
		else if (type == 388)
		{
			netImportant = true;
			width = 40;
			height = 20;
			aiStyle = 66;
			penetrate = -1;
			timeLeft *= 5;
			minion = true;
			minionSlots = 0.5f;
			tileCollide = false;
			ignoreWater = true;
			friendly = true;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 12;
		}
		else if (type == 389)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			light = 0.75f;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.2f;
			timeLeft = 600;
		}
		else if (type == 390 || type == 391 || type == 392)
		{
			width = 18;
			height = 18;
			aiStyle = 26;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			minion = true;
			minionSlots = 1f;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 15;
		}
		else if (type == 393 || type == 394 || type == 395)
		{
			width = 20;
			height = 30;
			aiStyle = 67;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			minion = true;
			minionSlots = 1f;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 18;
			decidesManualFallThrough = true;
		}
		else if (type == 396)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
			alpha = 100;
		}
		else if (type == 397)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
			tileCollide = false;
		}
		else if (type == 398)
		{
			netImportant = true;
			width = 18;
			height = 38;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 399)
		{
			width = 14;
			height = 14;
			aiStyle = 68;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			ranged = true;
			noEnchantmentVisuals = true;
		}
		else if (type >= 400 && type <= 402)
		{
			if (type == 400)
			{
				width = 14;
				height = 16;
			}
			else if (type == 401)
			{
				width = 12;
				height = 14;
			}
			else
			{
				width = 6;
				height = 12;
			}
			penetrate = 3;
			aiStyle = 14;
			friendly = true;
			timeLeft = 360;
			ranged = true;
			noEnchantmentVisuals = true;
		}
		else if (type == 403)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 404)
		{
			width = 26;
			height = 26;
			aiStyle = 69;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			melee = true;
		}
		else if (type == 405)
		{
			width = 14;
			height = 14;
			aiStyle = 70;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			timeLeft = 120;
			melee = true;
			noEnchantments = true;
		}
		else if (type == 406)
		{
			width = 14;
			height = 14;
			aiStyle = 60;
			alpha = 255;
			penetrate = -1;
			extraUpdates = 2;
			ignoreWater = true;
		}
		else if (type == 407)
		{
			netImportant = true;
			width = 28;
			height = 40;
			aiStyle = 62;
			penetrate = -1;
			timeLeft *= 5;
			minion = true;
			friendly = true;
			minionSlots = 1f;
			tileCollide = false;
			ignoreWater = true;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type == 408)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			alpha = 255;
			ignoreWater = true;
		}
		else if (type == 409)
		{
			width = 30;
			height = 30;
			penetrate = -1;
			aiStyle = 71;
			alpha = 255;
			timeLeft = 300;
			friendly = true;
			tileCollide = true;
			extraUpdates = 2;
			magic = true;
			ignoreWater = true;
		}
		else if (type == 410)
		{
			if (Main.remixWorld)
			{
				ArmorPenetration = 20;
			}
			width = 14;
			height = 14;
			aiStyle = 72;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			timeLeft = 100;
			magic = true;
			ignoreWater = true;
		}
		else if (type >= 411 && type <= 414)
		{
			_ = type;
			width = 10;
			height = 10;
			aiStyle = 10;
		}
		else if (type == 415 || type == 416 || type == 417 || type == 418)
		{
			width = 14;
			height = 14;
			aiStyle = 34;
			friendly = true;
			ranged = true;
			timeLeft = 45;
		}
		else if (type >= 419 && type <= 422)
		{
			width = 4;
			height = 4;
			aiStyle = 73;
			friendly = true;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 3;
		}
		else if (type == 423)
		{
			netImportant = true;
			width = 28;
			height = 28;
			aiStyle = 62;
			penetrate = -1;
			timeLeft *= 5;
			minion = true;
			friendly = true;
			minionSlots = 1f;
			ignoreWater = true;
		}
		else if (type >= 424 && type <= 426)
		{
			width = 24;
			height = 24;
			aiStyle = 1;
			friendly = true;
			magic = true;
			tileCollide = false;
			extraUpdates = 2;
		}
		else if (type == 427)
		{
			width = 22;
			height = 56;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			glowMask = 2;
		}
		else if (type == 428)
		{
			width = 26;
			height = 54;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			glowMask = 3;
		}
		else if (type == 429)
		{
			width = 18;
			height = 56;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			glowMask = 7;
		}
		else if (type == 430)
		{
			width = 30;
			height = 54;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			glowMask = 8;
		}
		else if (type == 431)
		{
			width = 28;
			height = 64;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 432)
		{
			width = 30;
			height = 54;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 610)
		{
			width = 28;
			height = 64;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			glowMask = 179;
		}
		else if (type == 609)
		{
			width = 30;
			height = 54;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			glowMask = 180;
		}
		else if (type == 433)
		{
			width = 8;
			height = 8;
			aiStyle = 48;
			friendly = true;
			extraUpdates = 100;
			timeLeft = 100;
			ignoreWater = true;
		}
		else if (type == 434)
		{
			width = 1;
			height = 1;
			aiStyle = 74;
			friendly = true;
			extraUpdates = 100;
			penetrate = -1;
		}
		else if (type == 435)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			hostile = true;
			ignoreWater = true;
		}
		else if (type == 436)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			hostile = true;
			ignoreWater = true;
		}
		else if (type == 437)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			hostile = true;
			extraUpdates = 2;
			ignoreWater = true;
		}
		else if (type == 438)
		{
			width = 8;
			height = 8;
			aiStyle = 1;
			hostile = true;
			alpha = 255;
			extraUpdates = 3;
			ignoreWater = true;
		}
		else if (type == 439)
		{
			width = 22;
			height = 22;
			aiStyle = 75;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			magic = true;
			ignoreWater = true;
		}
		else if (type == 440)
		{
			width = 5;
			height = 5;
			aiStyle = 1;
			friendly = true;
			alpha = 255;
			extraUpdates = 2;
			scale = 1f;
			timeLeft = 600;
			magic = true;
			ignoreWater = true;
		}
		else if (type == 441)
		{
			width = 1;
			height = 1;
			aiStyle = 76;
			ignoreWater = true;
			tileCollide = false;
		}
		else if (type == 442)
		{
			width = 14;
			height = 14;
			aiStyle = 1;
			friendly = true;
			alpha = 255;
			scale = 1f;
			timeLeft = 600;
			ranged = true;
		}
		else if (type == 443)
		{
			width = 80;
			height = 80;
			aiStyle = 77;
			friendly = true;
			alpha = 255;
			scale = 1f;
			ranged = true;
			ignoreWater = true;
			tileCollide = false;
			penetrate = -1;
		}
		else if (type == 444)
		{
			width = 10;
			height = 10;
			aiStyle = 78;
			friendly = true;
			alpha = 255;
			scale = 1f;
			ranged = true;
			ignoreWater = true;
			extraUpdates = 1;
		}
		else if (type == 445)
		{
			width = 10;
			height = 10;
			aiStyle = 75;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			melee = true;
			ignoreWater = true;
			ownerHitCheck = true;
		}
		else if (type == 446)
		{
			netImportant = true;
			width = 14;
			height = 14;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
			light = 0.7f;
		}
		else if (type == 447)
		{
			width = 30;
			height = 30;
			aiStyle = 79;
			hostile = true;
			penetrate = -1;
			tileCollide = false;
			ignoreWater = true;
			timeLeft = 240;
		}
		else if (type == 448)
		{
			width = 14;
			height = 14;
			aiStyle = 80;
			hostile = true;
			penetrate = -1;
			tileCollide = false;
		}
		else if (type == 449)
		{
			width = 5;
			height = 5;
			aiStyle = 1;
			hostile = true;
			alpha = 255;
			extraUpdates = 1;
			scale = 1f;
			timeLeft = 600;
			ignoreWater = true;
		}
		else if (type == 450)
		{
			width = 14;
			height = 14;
			aiStyle = 14;
			hostile = true;
			penetrate = -1;
			timeLeft = 360;
		}
		else if (type == 451)
		{
			width = 16;
			height = 16;
			aiStyle = 81;
			melee = true;
			penetrate = 3;
			light = 0.2f;
			alpha = 255;
			friendly = true;
		}
		else if (type == 452)
		{
			width = 14;
			height = 14;
			aiStyle = 82;
			hostile = true;
			penetrate = -1;
			alpha = 255;
			timeLeft = 600;
		}
		else if (type == 453)
		{
			width = 1;
			height = 1;
			aiStyle = 76;
			ignoreWater = true;
			tileCollide = false;
		}
		else if (type == 454)
		{
			width = 40;
			height = 40;
			aiStyle = 83;
			hostile = true;
			penetrate = -1;
			alpha = 255;
			timeLeft = 600;
			tileCollide = false;
		}
		else if (type == 455)
		{
			width = 36;
			height = 36;
			aiStyle = 84;
			hostile = true;
			penetrate = -1;
			alpha = 255;
			timeLeft = 600;
			tileCollide = false;
		}
		else if (type == 456)
		{
			width = 16;
			height = 16;
			aiStyle = 85;
			hostile = true;
			penetrate = -1;
			alpha = 255;
			timeLeft = 600;
			tileCollide = false;
		}
		else if (type == 459)
		{
			width = 22;
			height = 22;
			aiStyle = 1;
			friendly = true;
			magic = true;
			alpha = 255;
			scale = 1f;
			ignoreWater = true;
			extraUpdates = 1;
		}
		else if (type == 460)
		{
			width = 14;
			height = 18;
			aiStyle = 75;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			magic = true;
			ignoreWater = true;
		}
		else if (type == 461)
		{
			width = 18;
			height = 18;
			aiStyle = 84;
			friendly = true;
			magic = true;
			penetrate = -1;
			alpha = 255;
			tileCollide = false;
			hide = true;
		}
		else if (type == 462)
		{
			width = 8;
			height = 8;
			aiStyle = 1;
			hostile = true;
			alpha = 255;
			extraUpdates = 3;
			ignoreWater = true;
			tileCollide = false;
		}
		else if (type == 463)
		{
			width = 48;
			height = 48;
			aiStyle = 6;
			friendly = true;
			tileCollide = false;
			penetrate = -1;
			alpha = 255;
			ignoreWater = true;
		}
		else if (type == 464)
		{
			width = 60;
			height = 60;
			aiStyle = 86;
			hostile = true;
			tileCollide = false;
			penetrate = -1;
			alpha = 255;
			ignoreWater = true;
		}
		else if (type == 467)
		{
			width = 40;
			height = 40;
			aiStyle = 1;
			hostile = true;
			alpha = 255;
			ignoreWater = true;
			extraUpdates = 1;
		}
		else if (type == 468)
		{
			width = 40;
			height = 40;
			aiStyle = 1;
			hostile = true;
			alpha = 255;
			ignoreWater = true;
			extraUpdates = 1;
		}
		else if (type == 465)
		{
			width = 80;
			height = 80;
			aiStyle = 88;
			hostile = true;
			alpha = 255;
			ignoreWater = true;
			tileCollide = false;
		}
		else if (type == 466)
		{
			width = 14;
			height = 14;
			aiStyle = 88;
			hostile = true;
			alpha = 255;
			ignoreWater = true;
			tileCollide = true;
			extraUpdates = 4;
			timeLeft = 120 * (extraUpdates + 1);
		}
		else if (type == 491)
		{
			width = 26;
			height = 26;
			aiStyle = 9;
			friendly = true;
			melee = true;
			penetrate = -1;
		}
		else if (type == 500)
		{
			width = 20;
			height = 20;
			aiStyle = 67;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			friendly = true;
			ignoreWater = true;
			scale = 0.8f;
		}
		else if (type == 499)
		{
			netImportant = true;
			width = 34;
			height = 34;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 469)
		{
			alpha = 255;
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			timeLeft = 1200;
		}
		else if (type == 470)
		{
			width = 10;
			height = 10;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
		}
		else if (type == 471)
		{
			width = 16;
			height = 16;
			aiStyle = 2;
			scale = 1.2f;
			hostile = true;
			ranged = true;
		}
		else if (type == 472)
		{
			width = 8;
			height = 8;
			aiStyle = 0;
			hostile = true;
			penetrate = -1;
			aiStyle = 1;
			tileCollide = true;
			timeLeft = 60;
		}
		else if (type == 474)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			timeLeft = 1200;
			penetrate = 2;
		}
		else if (type == 473)
		{
			netImportant = true;
			width = 8;
			height = 8;
			aiStyle = 14;
			penetrate = -1;
			alpha = 75;
			light = 1f;
			timeLeft *= 2;
		}
		else if (type == 475)
		{
			width = 14;
			height = 14;
			aiStyle = 35;
			penetrate = -1;
			tileCollide = false;
			timeLeft = 400;
		}
		else if (type == 476)
		{
			width = 200;
			height = 200;
			aiStyle = 185;
			friendly = true;
			tileCollide = false;
			penetrate = -1;
			alpha = 255;
			ignoreWater = true;
			timeLeft = 3;
			magic = true;
		}
		else if (type == 477)
		{
			alpha = 255;
			width = 14;
			height = 14;
			aiStyle = 1;
			friendly = true;
			penetrate = 7;
			extraUpdates = 1;
			ranged = true;
		}
		else if (type == 478)
		{
			alpha = 255;
			width = 14;
			height = 14;
			aiStyle = 1;
			friendly = true;
			timeLeft = 300;
			ranged = true;
		}
		else if (type == 479)
		{
			alpha = 255;
			width = 14;
			height = 14;
			aiStyle = 1;
			friendly = true;
			ranged = true;
		}
		else if (type == 480)
		{
			alpha = 255;
			width = 12;
			height = 12;
			penetrate = 3;
			aiStyle = 14;
			friendly = true;
			timeLeft = 120;
			ranged = true;
			noEnchantments = true;
		}
		else if (type == 481)
		{
			width = 22;
			height = 22;
			aiStyle = 13;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			melee = true;
			extraUpdates = 0;
		}
		else if (type == 482)
		{
			width = 16;
			height = 200;
			aiStyle = 87;
			friendly = true;
			tileCollide = false;
			penetrate = -1;
			alpha = 255;
			ignoreWater = true;
			timeLeft = 18000;
			magic = true;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type == 483)
		{
			width = 14;
			height = 14;
			aiStyle = 14;
			friendly = true;
			melee = true;
		}
		else if (type == 484)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			melee = true;
			extraUpdates = 1;
		}
		else if (type == 485)
		{
			arrow = true;
			width = 24;
			height = 24;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			penetrate = -1;
			timeLeft = 1200;
		}
		else if (type >= 486 && type <= 489)
		{
			if (type == 486)
			{
				width = 12;
				height = 12;
			}
			else if (type == 487)
			{
				width = 22;
				height = 22;
			}
			else if (type == 488)
			{
				width = 12;
				height = 12;
				light = 0.3f;
			}
			else if (type == 489)
			{
				width = 20;
				height = 16;
			}
			netImportant = true;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 492)
		{
			netImportant = true;
			width = 18;
			height = 32;
			aiStyle = 90;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 490)
		{
			width = 14;
			height = 14;
			aiStyle = 89;
			hostile = true;
			alpha = 255;
			ignoreWater = true;
			tileCollide = false;
			timeLeft = 600;
			netImportant = true;
		}
		else if (type == 493 || type == 494)
		{
			ArmorPenetration = 10;
			width = 32;
			height = 32;
			aiStyle = 4;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			alpha = 255;
			ignoreWater = true;
			magic = true;
			light = 0.2f;
		}
		else if (type == 495)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			penetrate = 3;
			timeLeft = 1200;
		}
		else if (type == 496)
		{
			alpha = 255;
			width = 40;
			height = 40;
			aiStyle = 91;
			friendly = true;
			magic = true;
			MaxUpdates = 3;
			penetrate = 3;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 497)
		{
			width = 30;
			height = 30;
			aiStyle = 2;
			friendly = true;
			penetrate = 3;
			melee = true;
		}
		else if (type == 498)
		{
			width = 6;
			height = 6;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
			timeLeft = 180;
		}
		else if (type == 501)
		{
			width = 14;
			height = 14;
			aiStyle = 2;
			scale = 1.1f;
			hostile = true;
			ranged = true;
		}
		else if (type == 502)
		{
			width = 16;
			height = 16;
			aiStyle = 8;
			friendly = true;
			melee = true;
			penetrate = 5;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 503)
		{
			width = 24;
			height = 24;
			aiStyle = 5;
			friendly = true;
			penetrate = 2;
			alpha = 255;
			tileCollide = false;
			melee = true;
			extraUpdates = 1;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 30;
		}
		else if (type == 504)
		{
			width = 10;
			height = 10;
			aiStyle = 2;
			friendly = true;
			melee = true;
			alpha = 255;
			penetrate = 2;
			noEnchantmentVisuals = true;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type == 507)
		{
			width = 16;
			height = 16;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			penetrate = 3;
		}
		else if (type == 508)
		{
			width = 16;
			height = 16;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 509)
		{
			width = 22;
			height = 22;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 1.2f;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type == 510)
		{
			width = 18;
			height = 18;
			aiStyle = 2;
			friendly = true;
			penetrate = 1;
			magic = true;
		}
		else if (type == 511)
		{
			width = 32;
			height = 32;
			aiStyle = 92;
			friendly = true;
			penetrate = -1;
			scale = 1.1f;
			magic = true;
		}
		else if (type == 512)
		{
			width = 40;
			height = 38;
			aiStyle = 92;
			friendly = true;
			penetrate = -1;
			scale = 1.1f;
			magic = true;
		}
		else if (type == 513)
		{
			width = 30;
			height = 28;
			aiStyle = 92;
			friendly = true;
			penetrate = -1;
			scale = 1.1f;
			magic = true;
		}
		else if (type == 514)
		{
			width = 10;
			height = 10;
			aiStyle = 93;
			friendly = true;
			penetrate = 3;
			alpha = 255;
			ranged = true;
		}
		else if (type == 515)
		{
			netImportant = true;
			width = 6;
			height = 6;
			aiStyle = 14;
			penetrate = -1;
			alpha = 75;
			light = 1f;
			timeLeft *= 5;
		}
		else if (type == 516)
		{
			width = 22;
			height = 22;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
		}
		else if (type == 517)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 518)
		{
			width = 32;
			height = 32;
			aiStyle = 94;
			friendly = true;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 519)
		{
			width = 24;
			height = 24;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
		}
		else if (type == 520)
		{
			width = 22;
			height = 22;
			aiStyle = 2;
			friendly = true;
			penetrate = 3;
			ranged = true;
			coldDamage = true;
		}
		else if (type == 521)
		{
			width = 14;
			height = 14;
			aiStyle = 29;
			alpha = 255;
			magic = true;
			penetrate = 1;
			friendly = true;
		}
		else if (type == 522)
		{
			width = 8;
			height = 8;
			aiStyle = 29;
			alpha = 255;
			magic = true;
			penetrate = 1;
			friendly = true;
		}
		else if (type == 523)
		{
			width = 32;
			height = 32;
			aiStyle = 95;
			alpha = 255;
			ranged = true;
			penetrate = 1;
			friendly = true;
		}
		else if (type == 524)
		{
			width = 10;
			height = 10;
			aiStyle = 96;
			friendly = true;
			alpha = 255;
			penetrate = 5;
			ignoreWater = true;
			melee = true;
			extraUpdates = 5;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type == 525)
		{
			width = 30;
			height = 24;
			aiStyle = 97;
			tileCollide = false;
			timeLeft = 10800;
			hide = true;
		}
		else if (type == 526)
		{
			width = 8;
			height = 8;
			aiStyle = 98;
			tileCollide = false;
			timeLeft = 120;
			alpha = 255;
		}
		else if (type >= 527 && type <= 531)
		{
			knockBack = 12f;
			width = 24;
			height = 24;
			aiStyle = 17;
			penetrate = -1;
			if (Main.getGoodWorld)
			{
				friendly = true;
				hostile = true;
			}
		}
		else if (type == 532)
		{
			ArmorPenetration = 25;
			width = 16;
			height = 16;
			aiStyle = 1;
			scale = 1f;
			friendly = true;
			penetrate = 3;
			extraUpdates = 1;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 533)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 66;
			penetrate = -1;
			timeLeft *= 5;
			minion = true;
			minionSlots = 1f;
			tileCollide = false;
			ignoreWater = true;
			friendly = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 12;
		}
		else if (type == 534)
		{
			extraUpdates = 0;
			width = 16;
			height = 16;
			aiStyle = 99;
			friendly = true;
			penetrate = -1;
			melee = true;
			scale = 1f;
		}
		else if (type >= 541 && type <= 555)
		{
			extraUpdates = 0;
			width = 16;
			height = 16;
			aiStyle = 99;
			friendly = true;
			penetrate = -1;
			melee = true;
			scale = 1f;
			if (type == 547)
			{
				scale = 1.1f;
			}
			if (type == 554)
			{
				scale = 1.2f;
			}
			if (type == 555)
			{
				scale = 1.15f;
			}
			if (type == 551 || type == 550)
			{
				scale = 1.1f;
			}
		}
		else if (type >= 562 && type <= 564)
		{
			extraUpdates = 0;
			width = 16;
			height = 16;
			aiStyle = 99;
			friendly = true;
			penetrate = -1;
			melee = true;
			scale = 1f;
			if (type == 563)
			{
				scale = 1.05f;
			}
			if (type == 564)
			{
				scale = 1.075f;
			}
		}
		else if (type == 603)
		{
			extraUpdates = 0;
			width = 16;
			height = 16;
			aiStyle = 99;
			friendly = true;
			penetrate = -1;
			melee = true;
			scale = 1.15f;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type == 604)
		{
			extraUpdates = 0;
			width = 14;
			height = 14;
			aiStyle = 115;
			friendly = true;
			penetrate = -1;
			melee = true;
			scale = 1.2f;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type >= 556 && type <= 561)
		{
			extraUpdates = 0;
			width = 10;
			height = 10;
			aiStyle = 99;
			friendly = true;
			penetrate = -1;
			melee = true;
			scale = 1f;
			counterweight = true;
		}
		else if (type == 535)
		{
			width = 18;
			height = 18;
			aiStyle = 100;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			magic = true;
			ignoreWater = true;
		}
		else if (type == 536)
		{
			width = 10;
			height = 10;
			aiStyle = 101;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			magic = true;
			ignoreWater = true;
		}
		else if (type == 537)
		{
			width = 22;
			height = 22;
			aiStyle = 84;
			hostile = true;
			penetrate = -1;
			alpha = 255;
			timeLeft = 240;
			tileCollide = false;
		}
		else if (type == 538)
		{
			width = 12;
			height = 12;
			aiStyle = 14;
			hostile = true;
			penetrate = -1;
			timeLeft = 120;
			extraUpdates = 1;
			alpha = 255;
		}
		else if (type == 539)
		{
			width = 18;
			height = 30;
			aiStyle = 102;
			hostile = true;
			penetrate = -1;
			timeLeft = 600;
		}
		else if (type == 540)
		{
			width = 20;
			height = 20;
			aiStyle = 103;
			hostile = true;
			penetrate = -1;
			timeLeft = 300;
			alpha = 255;
		}
		else if (type == 565)
		{
			width = 28;
			height = 28;
			aiStyle = 104;
			penetrate = -1;
			tileCollide = false;
			ignoreWater = true;
			alpha = 255;
			scale = 0.8f;
		}
		else if (type == 566)
		{
			width = 16;
			height = 16;
			aiStyle = 36;
			friendly = true;
			penetrate = 4;
			alpha = 255;
			timeLeft = 660;
			extraUpdates = 3;
			noEnchantmentVisuals = true;
		}
		else if (type == 567 || type == 568)
		{
			if (type == 567)
			{
				width = 14;
				height = 14;
			}
			else
			{
				width = 16;
				height = 16;
			}
			aiStyle = 105;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			timeLeft = 3600;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type >= 569 && type <= 571)
		{
			width = 32;
			height = 32;
			aiStyle = 106;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			timeLeft = 3600;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 575)
		{
			width = 24;
			height = 24;
			aiStyle = 107;
			hostile = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft = 420;
			alpha = 255;
		}
		else if (type == 573)
		{
			width = 18;
			height = 30;
			aiStyle = 102;
			hostile = true;
			penetrate = -1;
			timeLeft = 600;
		}
		else if (type == 574)
		{
			width = 18;
			height = 18;
			aiStyle = 102;
			hostile = true;
			timeLeft = 600;
			tileCollide = false;
		}
		else if (type == 572)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
		}
		else if (type == 576)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.2f;
			timeLeft = 600;
		}
		else if (type == 577)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.2f;
			timeLeft = 600;
		}
		else if (type == 578 || type == 579 || type == 813)
		{
			width = 32;
			height = 32;
			aiStyle = 108;
			friendly = true;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
			hostile = true;
			hide = true;
		}
		else if (type == 580)
		{
			width = 14;
			height = 14;
			aiStyle = 88;
			hostile = true;
			alpha = 255;
			ignoreWater = true;
			tileCollide = true;
			extraUpdates = 4;
			timeLeft = 600;
		}
		else if (type == 581)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
		}
		else if (type == 582)
		{
			width = 20;
			height = 20;
			aiStyle = 109;
			friendly = true;
			penetrate = -1;
			MaxUpdates = 2;
		}
		else if (type == 583)
		{
			width = 10;
			height = 10;
			aiStyle = 2;
			friendly = true;
			scale = 0.8f;
		}
		else if (type == 589)
		{
			width = 10;
			height = 10;
			aiStyle = 2;
			friendly = true;
		}
		else if (type == 584)
		{
			width = 10;
			height = 10;
			aiStyle = 110;
			friendly = true;
			scale = 0.8f;
			penetrate = 3;
		}
		else if (type == 585)
		{
			width = 26;
			height = 26;
			aiStyle = 1;
			alpha = 255;
			friendly = true;
			penetrate = 3;
		}
		else if (type == 586)
		{
			width = 26;
			height = 26;
			aiStyle = 111;
			alpha = 255;
			friendly = true;
			penetrate = -1;
		}
		else if (type == 587)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			alpha = 255;
			friendly = true;
			ranged = true;
		}
		else if (type == 588)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 590)
		{
			width = 14;
			height = 14;
			aiStyle = 112;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			timeLeft = 900;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 591)
		{
			width = 8;
			height = 8;
			aiStyle = 101;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ignoreWater = true;
		}
		else if (type == 592)
		{
			width = 8;
			height = 8;
			aiStyle = 1;
			hostile = true;
			alpha = 255;
			extraUpdates = 3;
			ignoreWater = true;
		}
		else if (type == 593)
		{
			width = 16;
			height = 16;
			aiStyle = 1;
			hostile = true;
			alpha = 255;
			extraUpdates = 1;
			ignoreWater = true;
		}
		else if (type == 594)
		{
			width = 40;
			height = 40;
			aiStyle = 1;
			alpha = 255;
			extraUpdates = 2;
		}
		else if (type == 595)
		{
			ArmorPenetration = 20;
			width = 68;
			height = 64;
			aiStyle = 75;
			friendly = true;
			tileCollide = false;
			melee = true;
			penetrate = -1;
			ownerHitCheck = true;
		}
		else if (type == 596)
		{
			width = 8;
			height = 8;
			aiStyle = 107;
			hostile = true;
			alpha = 255;
			ignoreWater = true;
			timeLeft = 180;
			tileCollide = false;
		}
		else if (type == 597)
		{
			width = 10;
			height = 10;
			aiStyle = 29;
			alpha = 255;
			magic = true;
			penetrate = 2;
			friendly = true;
		}
		else if (type == 598)
		{
			width = 16;
			height = 16;
			aiStyle = 113;
			friendly = true;
			ranged = true;
			penetrate = -1;
			alpha = 255;
			hide = true;
		}
		else if (type == 599)
		{
			width = 22;
			height = 22;
			aiStyle = 2;
			friendly = true;
			penetrate = 6;
			ranged = true;
		}
		else if (type == 600)
		{
			width = 14;
			height = 14;
			aiStyle = 75;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ignoreWater = true;
		}
		else if (type == 601)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			alpha = 255;
			friendly = true;
			extraUpdates = 30;
		}
		else if (type == 602)
		{
			width = 10;
			height = 10;
			aiStyle = 114;
			alpha = 255;
			friendly = true;
			tileCollide = false;
			netImportant = true;
		}
		else if (type == 605)
		{
			alpha = 255;
			width = 6;
			height = 6;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 606)
		{
			width = 5;
			height = 5;
			aiStyle = 1;
			friendly = true;
			alpha = 255;
			extraUpdates = 2;
			scale = 1f;
			timeLeft = 600;
			ignoreWater = true;
		}
		else if (type == 607)
		{
			width = 10;
			height = 10;
			aiStyle = 116;
			friendly = true;
			alpha = 255;
			timeLeft = 600;
			ignoreWater = true;
			tileCollide = false;
			penetrate = -1;
		}
		else if (type == 608)
		{
			width = 160;
			height = 160;
			aiStyle = 117;
			friendly = true;
			alpha = 255;
			timeLeft = 3;
			ignoreWater = true;
			tileCollide = false;
			penetrate = -1;
			hide = true;
		}
		else if (type == 611)
		{
			width = 16;
			height = 16;
			aiStyle = 75;
			friendly = true;
			melee = true;
			penetrate = -1;
			alpha = 255;
			hide = true;
			tileCollide = false;
			ignoreWater = true;
			usesLocalNPCImmunity = true;
			noEnchantmentVisuals = true;
		}
		else if (type == 612)
		{
			width = 8;
			height = 8;
			aiStyle = 117;
			friendly = true;
			alpha = 255;
			ignoreWater = true;
			timeLeft = 60;
			tileCollide = false;
			penetrate = -1;
			usesLocalNPCImmunity = true;
		}
		else if (type == 613)
		{
			netImportant = true;
			width = 24;
			height = 24;
			aiStyle = 62;
			penetrate = -1;
			timeLeft *= 5;
			minion = true;
			friendly = true;
			minionSlots = 1f;
			ignoreWater = true;
		}
		else if (type == 614)
		{
			width = 16;
			height = 16;
			aiStyle = 113;
			friendly = true;
			penetrate = -1;
			alpha = 255;
		}
		else if (type == 615)
		{
			width = 22;
			height = 22;
			aiStyle = 75;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ranged = true;
			ignoreWater = true;
		}
		else if (type == 616)
		{
			width = 14;
			height = 14;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			ranged = true;
			extraUpdates = 2;
			timeLeft = 90 * MaxUpdates;
		}
		else if (type == 617)
		{
			width = 32;
			height = 32;
			aiStyle = 118;
			friendly = true;
			alpha = 255;
			ignoreWater = true;
			hide = true;
			magic = true;
			penetrate = 3;
			usesLocalNPCImmunity = true;
		}
		else if (type == 618)
		{
			tileCollide = false;
			width = 18;
			height = 30;
			aiStyle = 119;
			penetrate = -1;
			timeLeft = 420;
			magic = true;
			friendly = true;
			usesLocalNPCImmunity = true;
		}
		else if (type == 619)
		{
			width = 14;
			height = 14;
			aiStyle = 29;
			alpha = 255;
			magic = true;
			penetrate = 1;
			friendly = true;
		}
		else if (type == 620)
		{
			width = 8;
			height = 8;
			aiStyle = 29;
			alpha = 255;
			magic = true;
			penetrate = 1;
			friendly = true;
		}
		else if (type == 622)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			alpha = 255;
			extraUpdates = 2;
		}
		else if (type == 623)
		{
			netImportant = true;
			width = 50;
			height = 80;
			aiStyle = 120;
			penetrate = -1;
			timeLeft *= 5;
			minion = true;
			friendly = true;
			minionSlots = 0f;
			ignoreWater = true;
			tileCollide = false;
			netImportant = true;
			manualDirectionChange = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 5;
		}
		else if (type == 624)
		{
			width = 8;
			height = 8;
			aiStyle = 117;
			friendly = true;
			alpha = 255;
			ignoreWater = true;
			timeLeft = 60;
			tileCollide = false;
			penetrate = -1;
		}
		else if (type >= 625 && type <= 628)
		{
			if (type == 625 || type == 628)
			{
				netImportant = true;
			}
			if (type == 626 || type == 627)
			{
				minionSlots = 0.5f;
			}
			width = 24;
			height = 24;
			aiStyle = 121;
			penetrate = -1;
			timeLeft *= 5;
			minion = true;
			friendly = true;
			ignoreWater = true;
			tileCollide = false;
			alpha = 255;
			hide = true;
			netImportant = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 7;
		}
		else if (type == 629)
		{
			width = 8;
			height = 8;
			aiStyle = 122;
			hostile = true;
			alpha = 255;
			ignoreWater = true;
			timeLeft = 3600;
			tileCollide = false;
			penetrate = -1;
			extraUpdates = 2;
		}
		else if (type == 630 || type == 705)
		{
			width = 22;
			height = 22;
			aiStyle = 75;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ranged = true;
			ignoreWater = true;
		}
		else if (type == 631)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 122;
			friendly = true;
			ranged = true;
			tileCollide = false;
			alpha = 255;
			ignoreWater = true;
			extraUpdates = 1;
			timeLeft = 1200;
		}
		else if (type == 633)
		{
			width = 14;
			height = 18;
			aiStyle = 75;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			magic = true;
			ignoreWater = true;
		}
		else if (type == 632)
		{
			width = 18;
			height = 18;
			aiStyle = 84;
			friendly = true;
			magic = true;
			penetrate = -1;
			alpha = 255;
			tileCollide = false;
		}
		else if (type == 634)
		{
			width = 40;
			height = 40;
			aiStyle = 1;
			friendly = true;
			alpha = 255;
			ignoreWater = true;
			extraUpdates = 2;
			magic = true;
		}
		else if (type == 635)
		{
			width = 40;
			height = 40;
			aiStyle = 1;
			friendly = true;
			alpha = 255;
			friendly = true;
			extraUpdates = 3;
			magic = true;
		}
		else if (type == 636)
		{
			width = 16;
			height = 16;
			aiStyle = 113;
			friendly = true;
			melee = true;
			penetrate = -1;
			alpha = 255;
			hide = true;
			MaxUpdates = 2;
		}
		else if (type == 637)
		{
			width = 10;
			height = 10;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
		}
		else if (type == 638)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			alpha = 255;
			extraUpdates = 5;
			timeLeft = 600;
			ranged = true;
			ignoreWater = true;
			usesLocalNPCImmunity = true;
			penetrate = -1;
		}
		else if (type == 639)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			MaxUpdates = 2;
			timeLeft = MaxUpdates * 45;
			ignoreWater = true;
			usesLocalNPCImmunity = true;
			alpha = 255;
			penetrate = 4;
		}
		else if (type == 640)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			MaxUpdates = 3;
			timeLeft = 90;
			ignoreWater = true;
			usesLocalNPCImmunity = true;
			alpha = 255;
			penetrate = 4;
		}
		else if (type == 642)
		{
			width = 18;
			height = 18;
			aiStyle = 84;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			tileCollide = false;
			usesLocalNPCImmunity = true;
		}
		else if (type == 641)
		{
			width = 32;
			height = 32;
			aiStyle = 123;
			timeLeft = 36000;
			ignoreWater = true;
			tileCollide = false;
			alpha = 255;
			hide = true;
			sentry = true;
			netImportant = true;
		}
		else if (type == 643)
		{
			width = 32;
			height = 32;
			aiStyle = 123;
			timeLeft = 36000;
			ignoreWater = true;
			tileCollide = false;
			alpha = 255;
			sentry = true;
			netImportant = true;
		}
		else if (type == 644)
		{
			width = 14;
			height = 14;
			aiStyle = 112;
			penetrate = 1;
			timeLeft = 900;
			tileCollide = false;
			ignoreWater = true;
			alpha = 255;
			usesIDStaticNPCImmunity = true;
		}
		else if (type == 645)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			magic = true;
			tileCollide = false;
			extraUpdates = 5;
			penetrate = -1;
			usesLocalNPCImmunity = true;
		}
		else if (type >= 646 && type <= 649)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 650)
		{
			width = 20;
			height = 20;
			aiStyle = 124;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			friendly = true;
			ignoreWater = true;
			tileCollide = false;
			manualDirectionChange = true;
		}
		else if (type == 651)
		{
			width = 10;
			height = 10;
			aiStyle = 125;
			friendly = true;
			ignoreWater = true;
			tileCollide = false;
			penetrate = -1;
		}
		else if (type == 652)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 653)
		{
			width = 30;
			height = 30;
			aiStyle = 67;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			friendly = true;
			ignoreWater = true;
			scale = 0.8f;
		}
		else if (type == 654)
		{
			width = 30;
			height = 30;
			aiStyle = 126;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
			timeLeft = 120;
			friendly = true;
			hostile = true;
			penetrate = -1;
			trap = true;
		}
		else if (type == 655)
		{
			width = 31;
			height = 31;
			aiStyle = 25;
			friendly = true;
			hostile = true;
			penetrate = -1;
			trap = true;
		}
		else if (type == 656)
		{
			width = 10;
			height = 10;
			aiStyle = 127;
			friendly = true;
			magic = true;
			tileCollide = false;
			penetrate = -1;
			usesLocalNPCImmunity = true;
			timeLeft = 1200;
		}
		else if (type == 657)
		{
			width = 10;
			height = 10;
			aiStyle = 127;
			hostile = true;
			tileCollide = false;
			penetrate = -1;
			timeLeft = 1200;
		}
		else if (type == 658)
		{
			width = 14;
			height = 14;
			aiStyle = 128;
			penetrate = 1;
			timeLeft = 900;
			tileCollide = false;
			ignoreWater = true;
			alpha = 255;
			hostile = true;
		}
		else if (type == 659)
		{
			width = 8;
			height = 8;
			aiStyle = 129;
			friendly = true;
			magic = true;
			alpha = 255;
			ignoreWater = true;
			timeLeft = 240;
			tileCollide = false;
			penetrate = -1;
		}
		else if (type == 660)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			alpha = 255;
			timeLeft = 600;
			magic = true;
			ignoreWater = true;
		}
		else if (type == 661)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			alpha = 255;
			timeLeft = 40;
			extraUpdates = 1;
			ranged = true;
			ignoreWater = true;
			usesLocalNPCImmunity = true;
		}
		else if (type == 662 || type == 685)
		{
			width = 16;
			height = 16;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 663 || type == 665 || type == 667)
		{
			width = 30;
			height = 54;
			aiStyle = 130;
			timeLeft = 36000;
			ignoreWater = true;
			tileCollide = false;
			manualDirectionChange = true;
			switch (type)
			{
			case 665:
				height = 58;
				width = 28;
				break;
			case 667:
				height = 60;
				width = 28;
				break;
			}
			sentry = true;
			netImportant = true;
		}
		else if (type == 664 || type == 666 || type == 668)
		{
			width = 16;
			height = 16;
			aiStyle = 131;
			friendly = true;
			alpha = 255;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
		}
		else if (type == 669)
		{
			width = 14;
			height = 14;
			aiStyle = 68;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			ranged = true;
			noEnchantmentVisuals = true;
		}
		else if (type == 670)
		{
			width = 30;
			height = 30;
			aiStyle = 126;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
			timeLeft = 120;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 671)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
		}
		else if (type == 672)
		{
			width = 10;
			height = 10;
			aiStyle = 132;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
			timeLeft = 900;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 674 || type == 673)
		{
			width = 10;
			height = 10;
			aiStyle = 133;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
			timeLeft = 900;
			hostile = true;
			penetrate = -1;
			hide = true;
		}
		else if (type == 675)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
		}
		else if (type == 676)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
		}
		else if (type == 677 || type == 678 || type == 679)
		{
			width = 26;
			height = 54;
			aiStyle = 134;
			timeLeft = 36000;
			ignoreWater = true;
			tileCollide = false;
			manualDirectionChange = true;
			sentry = true;
			netImportant = true;
		}
		else if (type == 680)
		{
			width = 16;
			height = 16;
			aiStyle = 1;
			friendly = true;
			penetrate = 4;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
		}
		else if (type == 681)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			hostile = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 682)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			hostile = true;
			ignoreWater = true;
			timeLeft = 30;
			scale = 1.2f;
		}
		else if (type == 683)
		{
			width = 30;
			height = 30;
			aiStyle = 135;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
			timeLeft = 120;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 684)
		{
			width = 16;
			height = 16;
			aiStyle = 1;
			melee = true;
			penetrate = 5;
			alpha = 255;
			friendly = true;
			tileCollide = false;
		}
		else if (type == 686)
		{
			width = 30;
			height = 30;
			aiStyle = 1;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
		}
		else if (type == 687)
		{
			width = 30;
			height = 30;
			aiStyle = 136;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
		}
		else if (type == 688 || type == 689 || type == 690)
		{
			width = 16;
			height = 16;
			aiStyle = 137;
			friendly = true;
			ignoreWater = true;
			usesLocalNPCImmunity = true;
			timeLeft = 36000;
			localNPCHitCooldown = 3;
			tileCollide = false;
			penetrate = -1;
			sentry = true;
			netImportant = true;
		}
		else if (type == 691 || type == 692 || type == 693)
		{
			width = 16;
			height = 16;
			aiStyle = 138;
			ignoreWater = true;
			friendly = true;
			timeLeft = 36000;
			tileCollide = false;
			penetrate = -1;
			hide = true;
			sentry = true;
			netImportant = true;
		}
		else if (type == 694 || type == 695 || type == 696)
		{
			aiStyle = 139;
			friendly = true;
			tileCollide = false;
			penetrate = -1;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 30;
			alpha = 255;
			width = 144;
			height = 144;
		}
		else if (type == 697)
		{
			width = 16;
			height = 16;
			aiStyle = 140;
			friendly = true;
			melee = true;
			scale = 1.35f;
			penetrate = -1;
			alpha = 255;
			hide = true;
			tileCollide = false;
			ignoreWater = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 12;
			ownerHitCheck = true;
		}
		else if (type == 698)
		{
			width = 50;
			height = 200;
			aiStyle = 141;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
			timeLeft = 120;
			friendly = true;
			penetrate = -1;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
			melee = true;
		}
		else if (type == 699)
		{
			width = 24;
			height = 24;
			aiStyle = 142;
			friendly = true;
			melee = true;
			penetrate = -1;
			alpha = 255;
			hide = true;
			tileCollide = false;
			ignoreWater = true;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
			ownerHitCheck = true;
		}
		else if (type == 700)
		{
			width = 40;
			height = 40;
			aiStyle = 143;
			alpha = 255;
			penetrate = -1;
			friendly = true;
			melee = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
			ignoreWater = true;
			tileCollide = false;
		}
		else if (type == 703 || type == 701 || type == 702)
		{
			width = 20;
			height = 20;
			aiStyle = 144;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			scale = 1f;
			friendly = true;
			ignoreWater = true;
			tileCollide = false;
			manualDirectionChange = true;
		}
		else if (type == 704)
		{
			width = 60;
			height = 210;
			aiStyle = 145;
			friendly = true;
			magic = true;
			tileCollide = false;
			penetrate = -1;
			usesLocalNPCImmunity = true;
			timeLeft = 600;
			localNPCHitCooldown = -1;
			ignoreWater = true;
		}
		else if (type == 706)
		{
			width = 66;
			height = 66;
			aiStyle = 1;
			friendly = true;
			alpha = 255;
			timeLeft = 300;
			ranged = true;
			usesLocalNPCImmunity = true;
			penetrate = -1;
			localNPCHitCooldown = 10;
		}
		else if (type == 707)
		{
			width = 16;
			height = 16;
			aiStyle = 140;
			friendly = true;
			melee = true;
			penetrate = -1;
			alpha = 255;
			hide = true;
			tileCollide = false;
			ignoreWater = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 6;
			ownerHitCheck = true;
		}
		else if (type == 708)
		{
			width = 24;
			height = 24;
			aiStyle = 142;
			friendly = true;
			melee = true;
			penetrate = -1;
			alpha = 255;
			hide = true;
			tileCollide = false;
			ignoreWater = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 6;
			ownerHitCheck = true;
		}
		else if (type == 709)
		{
			width = 12;
			height = 12;
			aiStyle = 1;
			friendly = true;
			melee = true;
			alpha = 255;
			ignoreWater = true;
			extraUpdates = 1;
			noEnchantmentVisuals = true;
			scale = 0.6f;
		}
		else if (type == 710)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			ignoreWater = true;
			extraUpdates = 1;
			timeLeft = extraUpdates * 60 * 5;
			usesLocalNPCImmunity = true;
			alpha = 255;
			localNPCHitCooldown = -1;
		}
		else if (type == 711)
		{
			width = 30;
			height = 30;
			aiStyle = 1;
			alpha = 255;
			friendly = true;
			magic = true;
			extraUpdates = 1;
			scale = 0.7f;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
		}
		else if (type == 712)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			alpha = 255;
			timeLeft = 600;
			magic = true;
			extraUpdates = 1;
		}
		else if (type == 713)
		{
			width = 10;
			height = 10;
			aiStyle = 146;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
			timeLeft = 900;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 714)
		{
			width = 22;
			height = 22;
			aiStyle = 75;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ranged = true;
			ignoreWater = true;
		}
		else if (type == 715 || type == 717)
		{
			width = 14;
			height = 14;
			aiStyle = 147;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			ranged = true;
			extraUpdates = 2;
			timeLeft = 360 * MaxUpdates;
		}
		else if (type == 716 || type == 718)
		{
			width = 14;
			height = 14;
			aiStyle = 147;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			ranged = true;
			extraUpdates = 2;
			timeLeft = 360 * MaxUpdates;
		}
		else if (type == 719)
		{
			width = 10;
			height = 10;
			hostile = true;
			penetrate = -1;
			aiStyle = 1;
			tileCollide = true;
		}
		else if (type == 720)
		{
			width = 16;
			height = 16;
			aiStyle = 148;
			tileCollide = false;
			penetrate = -1;
			alpha = 255;
		}
		else if (type == 721 || type == 739 || type == 740 || type == 741 || type == 742 || type == 743 || type == 744 || type == 745 || type == 746 || type == 747 || type == 748 || type == 749 || type == 750 || type == 751 || type == 752)
		{
			netImportant = true;
			width = 7;
			height = 7;
			friendly = true;
			penetrate = -1;
			aiStyle = 149;
			tileCollide = false;
		}
		else if (type == 722)
		{
			width = 2;
			height = 2;
			aiStyle = 150;
			tileCollide = false;
			ignoreWater = true;
			penetrate = -1;
			hide = true;
		}
		else if (type == 723 || type == 724 || type == 725 || type == 726)
		{
			ArmorPenetration = 25;
			width = 24;
			height = 24;
			aiStyle = 5;
			friendly = true;
			penetrate = 2;
			alpha = 50;
			tileCollide = false;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 728)
		{
			width = 24;
			height = 24;
			aiStyle = 151;
			alpha = 255;
			tileCollide = true;
			ranged = true;
			friendly = true;
			penetrate = -1;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
		}
		else if (type == 729)
		{
			width = 20;
			height = 20;
			aiStyle = 152;
			friendly = true;
			tileCollide = false;
			ignoreWater = true;
			ranged = true;
			penetrate = -1;
			scale = 1f + (float)Main.rand.Next(30) * 0.01f;
			extraUpdates = 2;
			timeLeft = 10 * MaxUpdates;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type == 730)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 731)
		{
			width = 10;
			height = 10;
			aiStyle = 29;
			alpha = 255;
			magic = true;
			friendly = true;
			extraUpdates = 1;
			timeLeft = 90;
		}
		else if (type == 732)
		{
			tileCollide = true;
			width = 15;
			height = 15;
			aiStyle = 44;
			friendly = true;
			penetrate = 1;
			melee = true;
			noEnchantmentVisuals = true;
		}
		else if (type == 733)
		{
			width = 2;
			height = 2;
			aiStyle = 153;
			tileCollide = false;
			ignoreWater = true;
			penetrate = -1;
			alpha = 255;
		}
		else if (type == 734)
		{
			width = 30;
			height = 24;
			aiStyle = 154;
			tileCollide = false;
			timeLeft = 10800;
			alpha = 255;
			hide = true;
		}
		else if (type == 735)
		{
			width = 68;
			height = 64;
			aiStyle = 75;
			friendly = true;
			tileCollide = false;
			melee = true;
			penetrate = -1;
			ownerHitCheck = true;
		}
		else if (type == 736 || type == 737 || type == 738)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			penetrate = -1;
		}
		else if (type == 753)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 754)
		{
			width = 16;
			height = 16;
			aiStyle = 155;
			tileCollide = false;
			ignoreWater = true;
			penetrate = -1;
			alpha = 255;
		}
		else if (type == 755)
		{
			netImportant = true;
			width = 10;
			height = 10;
			penetrate = -1;
			ignoreWater = true;
			tileCollide = false;
			friendly = true;
			minion = true;
			minionSlots = 1f;
			timeLeft *= 5;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
			aiStyle = 156;
		}
		else if (type == 756)
		{
			width = 32;
			height = 32;
			aiStyle = 157;
			friendly = true;
			alpha = 255;
			magic = true;
			tileCollide = false;
			ignoreWater = true;
			penetrate = 4;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 25;
		}
		else if (type == 757)
		{
			netImportant = true;
			width = 34;
			height = 34;
			aiStyle = 15;
			friendly = true;
			penetrate = -1;
			melee = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 758)
		{
			width = 20;
			height = 30;
			aiStyle = 67;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			minion = true;
			minionSlots = 1f;
			friendly = true;
			decidesManualFallThrough = true;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type == 759)
		{
			netImportant = true;
			width = 10;
			height = 10;
			penetrate = -1;
			ignoreWater = true;
			tileCollide = true;
			friendly = true;
			minion = true;
			minionSlots = 1f;
			timeLeft *= 5;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 15;
			aiStyle = 158;
			hide = true;
		}
		else if (type == 761 || type == 762)
		{
			width = 10;
			height = 10;
			aiStyle = 159;
			friendly = true;
			ranged = true;
			manualDirectionChange = true;
		}
		else if (type == 763)
		{
			width = 10;
			height = 10;
			hostile = true;
			friendly = true;
			penetrate = -1;
			aiStyle = 1;
			tileCollide = true;
			extraUpdates = 1;
		}
		else if (type == 764)
		{
			width = 20;
			height = 20;
			aiStyle = 144;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			friendly = true;
			ignoreWater = true;
			tileCollide = false;
			manualDirectionChange = true;
		}
		else if (type == 765)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if ((type >= 766 && type <= 770) || type == 771)
		{
			width = 4;
			height = 4;
			aiStyle = 160;
			penetrate = -1;
			extraUpdates = 60;
		}
		else if (type == 772)
		{
			width = 22;
			height = 22;
			friendly = true;
			aiStyle = 1;
			tileCollide = true;
			extraUpdates = 1;
		}
		else if (type == 773)
		{
			width = 22;
			height = 22;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
		}
		else if (type == 774)
		{
			netImportant = true;
			width = 26;
			height = 26;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 802)
		{
			width = 18;
			height = 18;
			aiStyle = 161;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1f;
			ownerHitCheck = true;
			melee = true;
			extraUpdates = 1;
			hide = true;
		}
		else if (type == 811 || type == 814)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
			if (type == 814)
			{
				tileCollide = false;
			}
		}
		else if ((type >= 776 && type <= 801) || (type >= 803 && type <= 810))
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
			if (type == 777 || type == 781 || type == 794 || type == 797 || type == 800 || type == 785 || type == 788 || type == 800)
			{
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
			}
		}
		else if (type == 812)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 815)
		{
			netImportant = true;
			width = 26;
			height = 26;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 816)
		{
			netImportant = true;
			width = 26;
			height = 32;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 817)
		{
			netImportant = true;
			width = 26;
			height = 26;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 819)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			alpha = 255;
			extraUpdates = 1;
			hide = true;
			friendly = true;
			ranged = true;
		}
		else if (type == 818)
		{
			width = 132;
			height = 132;
			aiStyle = 162;
			friendly = true;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
			penetrate = -1;
			extraUpdates = 3;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 820)
		{
			width = 12;
			height = 12;
			friendly = true;
			aiStyle = 163;
			tileCollide = true;
			netImportant = true;
			penetrate = -1;
			timeLeft = 86400;
		}
		else if (type == 821)
		{
			netImportant = true;
			width = 20;
			height = 36;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type >= 822 && type <= 824)
		{
			netImportant = true;
			width = 4;
			height = 4;
			aiStyle = 160;
			penetrate = -1;
			extraUpdates = 60;
		}
		else if (type == 825)
		{
			netImportant = true;
			width = 26;
			height = 32;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type >= 826 && type <= 830)
		{
			netImportant = true;
			width = 4;
			height = 4;
			aiStyle = 160;
			penetrate = -1;
			extraUpdates = 60;
		}
		else if (type == 836)
		{
			width = 4;
			height = 4;
			aiStyle = 112;
			hostile = true;
		}
		else if (type == 831)
		{
			netImportant = true;
			width = 10;
			height = 10;
			penetrate = -1;
			ignoreWater = true;
			tileCollide = false;
			friendly = true;
			minion = true;
			minionSlots = 1f;
			timeLeft = 60;
			aiStyle = 164;
			hide = true;
		}
		else if (type == 833)
		{
			width = 26;
			height = 20;
			aiStyle = 67;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			minion = true;
			minionSlots = 0f;
			decidesManualFallThrough = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 834)
		{
			width = 20;
			height = 30;
			aiStyle = 67;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			minion = true;
			minionSlots = 0f;
			decidesManualFallThrough = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 835)
		{
			width = 20;
			height = 30;
			aiStyle = 67;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			minion = true;
			minionSlots = 0f;
			decidesManualFallThrough = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 837)
		{
			width = 26;
			height = 26;
			aiStyle = 1;
			alpha = 255;
			friendly = true;
			magic = true;
			penetrate = 3;
		}
		else if (type >= 838 && type <= 840)
		{
			netImportant = true;
			width = 4;
			height = 4;
			aiStyle = 160;
			penetrate = -1;
			extraUpdates = 60;
		}
		else if (type == 841)
		{
			DefaultToWhip();
		}
		else if (type == 842)
		{
			width = 18;
			height = 18;
			aiStyle = 161;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1f;
			ownerHitCheck = true;
			melee = true;
			extraUpdates = 1;
			hide = true;
		}
		else if (type >= 843 && type <= 846)
		{
			netImportant = true;
			width = 4;
			height = 4;
			aiStyle = 160;
			penetrate = -1;
			extraUpdates = 60;
		}
		else if (type == 847)
		{
			DefaultToWhip();
			extraUpdates = 2;
		}
		else if (type == 848)
		{
			DefaultToWhip();
		}
		else if (type == 849)
		{
			DefaultToWhip();
			extraUpdates = 2;
		}
		else if (type == 850)
		{
			netImportant = true;
			width = 4;
			height = 4;
			aiStyle = 160;
			penetrate = -1;
			extraUpdates = 60;
		}
		else if (type == 851)
		{
			netImportant = true;
			width = 4;
			height = 4;
			aiStyle = 166;
			penetrate = -1;
			timeLeft = 300;
		}
		else if (type >= 852 && type <= 853)
		{
			netImportant = true;
			width = 4;
			height = 4;
			aiStyle = 160;
			penetrate = -1;
			extraUpdates = 60;
		}
		else if (type == 854)
		{
			netImportant = true;
			width = 26;
			height = 32;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 855)
		{
			netImportant = true;
			width = 12;
			height = 12;
			aiStyle = 166;
			penetrate = -1;
			timeLeft = 1000;
		}
		else if (type == 856)
		{
			width = 32;
			height = 32;
			aiStyle = 167;
			friendly = true;
			alpha = 255;
			magic = true;
			tileCollide = false;
			ignoreWater = true;
			extraUpdates = 2;
			usesLocalNPCImmunity = true;
		}
		else if (type == 857)
		{
			width = 32;
			height = 32;
			aiStyle = 168;
			friendly = true;
			alpha = 255;
			melee = true;
			tileCollide = false;
			ignoreWater = true;
			extraUpdates = 1;
			usesLocalNPCImmunity = true;
			manualDirectionChange = true;
			penetrate = -1;
			hide = true;
		}
		else if (type == 858)
		{
			netImportant = true;
			width = 26;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 859)
		{
			netImportant = true;
			width = 20;
			height = 32;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 860)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 861)
		{
			netImportant = true;
			width = 10;
			height = 10;
			aiStyle = 2;
			friendly = true;
		}
		else if (type == 862 || type == 863)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 864)
		{
			ArmorPenetration = 25;
			netImportant = true;
			width = 10;
			height = 10;
			penetrate = -1;
			usesLocalNPCImmunity = true;
			ignoreWater = true;
			tileCollide = false;
			friendly = true;
			minion = true;
			minionSlots = 1f;
			timeLeft = 60;
			aiStyle = 169;
			localNPCHitCooldown = 40;
		}
		else if (type == 865)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 866)
		{
			light = 0.15f;
			width = 30;
			height = 30;
			aiStyle = 3;
			friendly = true;
			penetrate = 5;
			melee = true;
			extraUpdates = 1;
			usesLocalNPCImmunity = true;
		}
		else if (type == 867)
		{
			width = 22;
			height = 22;
			aiStyle = 3;
			friendly = true;
			penetrate = -1;
			melee = true;
			light = 0.6f;
		}
		else if (type == 868 || type == 869)
		{
			width = 18;
			height = 18;
			aiStyle = 2;
			friendly = true;
			penetrate = 1;
		}
		else if (type == 870)
		{
			netImportant = true;
			width = 6;
			height = 6;
			aiStyle = 14;
			penetrate = -1;
			alpha = 75;
			light = 1f;
			timeLeft *= 5;
		}
		else if (type == 873)
		{
			width = 30;
			height = 30;
			aiStyle = 171;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
			timeLeft = 200;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 874)
		{
			width = 30;
			height = 30;
			aiStyle = 0;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
			timeLeft = 210;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 871)
		{
			width = 30;
			height = 30;
			aiStyle = 172;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
			timeLeft = 240;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 875)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 872)
		{
			width = 30;
			height = 30;
			aiStyle = 173;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
			timeLeft = 660;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 876)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 8;
			light = 0.75f;
			alpha = 255;
			extraUpdates = 3;
			scale = 1.4f;
			timeLeft = 3600;
			magic = true;
		}
		else if (type >= 877 && type <= 879)
		{
			netImportant = true;
			width = 25;
			height = 25;
			aiStyle = 19;
			alpha = 255;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 880)
		{
			width = 32;
			height = 32;
			aiStyle = 183;
			penetrate = -1;
			timeLeft = 18;
			ignoreWater = true;
			tileCollide = false;
			friendly = true;
			hostile = false;
			manualDirectionChange = true;
		}
		else if (type == 881)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 882)
		{
			width = 20;
			height = 20;
			aiStyle = 124;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			friendly = true;
			ignoreWater = true;
			tileCollide = false;
			manualDirectionChange = true;
		}
		else if (type == 883)
		{
			width = 20;
			height = 20;
			aiStyle = 174;
			penetrate = -1;
			timeLeft *= 5;
			friendly = true;
			ignoreWater = true;
			tileCollide = false;
			netImportant = true;
		}
		else if (type >= 884 && type <= 886)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 887)
		{
			width = 20;
			height = 20;
			aiStyle = 174;
			penetrate = -1;
			timeLeft *= 5;
			friendly = true;
			ignoreWater = true;
			tileCollide = false;
			netImportant = true;
		}
		else if (type == 888)
		{
			width = 20;
			height = 20;
			aiStyle = 124;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			friendly = true;
			ignoreWater = true;
			tileCollide = false;
			manualDirectionChange = true;
		}
		else if (type >= 889 && type <= 892)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 893)
		{
			width = 20;
			height = 20;
			aiStyle = 174;
			penetrate = -1;
			timeLeft *= 5;
			friendly = true;
			ignoreWater = true;
			tileCollide = false;
			netImportant = true;
		}
		else if (type == 894)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type >= 895 && type <= 896)
		{
			width = 20;
			height = 20;
			aiStyle = 124;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			friendly = true;
			ignoreWater = true;
			tileCollide = false;
			manualDirectionChange = true;
		}
		else if (type == 897)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 898)
		{
			width = 20;
			height = 20;
			aiStyle = 124;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			friendly = true;
			ignoreWater = true;
			tileCollide = false;
			manualDirectionChange = true;
		}
		else if (type >= 899 && type <= 901)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 902)
		{
			width = 20;
			height = 20;
			aiStyle = 3;
			friendly = true;
			penetrate = -1;
			melee = true;
			MaxUpdates = 2;
		}
		else if (type >= 903 && type <= 906)
		{
			width = 22;
			height = 22;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
		}
		else if (type == 907)
		{
			width = 22;
			height = 22;
			aiStyle = 30;
			friendly = true;
			penetrate = 2;
			melee = true;
		}
		else if (type == 908)
		{
			tileCollide = false;
			ignoreWater = true;
			width = 14;
			height = 14;
			aiStyle = 175;
			friendly = true;
			penetrate = 1;
			timeLeft = 3600;
			hide = true;
		}
		else if (type == 909)
		{
			width = 12;
			height = 12;
			aiStyle = 2;
			friendly = false;
			hostile = true;
			penetrate = 1;
		}
		else if (type == 910)
		{
			width = 22;
			height = 22;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
		}
		else if (type == 911)
		{
			width = 22;
			height = 22;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
		}
		else if (type >= 912 && type <= 915)
		{
			DefaultToWhip();
			if (type == 915)
			{
				extraUpdates = 2;
			}
			if (type == 912)
			{
				coldDamage = true;
			}
		}
		else if (type == 916)
		{
			ArmorPenetration = 50;
			width = 18;
			height = 18;
			aiStyle = 176;
			friendly = true;
			tileCollide = false;
			penetrate = 3;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
			extraUpdates = 2;
		}
		else if (type == 918)
		{
			aiStyle = 178;
			friendly = true;
			tileCollide = false;
			penetrate = -1;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
			alpha = 255;
			width = 96;
			height = 96;
		}
		else if (type == 917)
		{
			ArmorPenetration = 30;
			width = 30;
			height = 30;
			aiStyle = 177;
			friendly = true;
			tileCollide = false;
			penetrate = -1;
			usesLocalNPCImmunity = true;
			coldDamage = true;
			localNPCHitCooldown = 20;
		}
		else if (type == 919)
		{
			width = 8;
			height = 8;
			aiStyle = 179;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
			timeLeft = 240;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 920)
		{
			alpha = 255;
			width = 6;
			height = 6;
			aiStyle = 1;
			hostile = true;
			penetrate = 1;
		}
		else if (type == 921)
		{
			alpha = 255;
			width = 6;
			height = 6;
			aiStyle = 1;
			hostile = true;
			penetrate = 3;
		}
		else if (type == 922)
		{
			width = 30;
			height = 30;
			aiStyle = 135;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
			timeLeft = 120;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 923)
		{
			width = 30;
			height = 30;
			aiStyle = 180;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
			timeLeft = 180;
			tileCollide = false;
			ignoreWater = true;
			hide = true;
		}
		else if (type == 926)
		{
			alpha = 255;
			width = 12;
			height = 12;
			scale = 1f;
			aiStyle = 1;
			hostile = true;
			penetrate = 2;
		}
		else if (type == 927)
		{
			width = 40;
			height = 40;
			aiStyle = 75;
			friendly = true;
			tileCollide = false;
			melee = true;
			penetrate = -1;
			ownerHitCheck = true;
		}
		else if (type == 928)
		{
			netImportant = true;
			width = 34;
			height = 34;
			aiStyle = 14;
			friendly = true;
			penetrate = 2;
			melee = true;
			timeLeft = 250;
		}
		else if (type == 929)
		{
			width = 32;
			height = 32;
			aiStyle = 183;
			penetrate = -1;
			timeLeft = 18;
			ignoreWater = true;
			tileCollide = false;
			friendly = true;
			hostile = false;
			manualDirectionChange = true;
		}
		else if (type == 930)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 931)
		{
			width = 30;
			height = 30;
			aiStyle = 171;
			alpha = 255;
			penetrate = 3;
			friendly = true;
			timeLeft = 240;
			magic = true;
			tileCollide = true;
			ignoreWater = true;
			extraUpdates = 1;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 60;
		}
		else if (type == 932)
		{
			ranged = true;
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 181;
			penetrate = 5;
			friendly = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
			timeLeft = 120;
			alpha = 0;
			ignoreWater = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 60;
		}
		else if (type == 933)
		{
			width = 32;
			height = 32;
			aiStyle = 182;
			friendly = true;
			melee = true;
			tileCollide = false;
			ignoreWater = true;
			alpha = 255;
			extraUpdates = 1;
			usesLocalNPCImmunity = true;
			manualDirectionChange = true;
			localNPCHitCooldown = 15;
			penetrate = -1;
			noEnchantmentVisuals = true;
		}
		else if (type == 934)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 935)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
			extraUpdates = 3;
		}
		else if (type == 936)
		{
			width = 14;
			height = 14;
			aiStyle = 2;
			friendly = true;
			penetrate = 1;
			Opacity = 0.6f;
		}
		else if (type == 937)
		{
			alpha = 255;
			width = 10;
			height = 10;
			aiStyle = 1;
			hostile = false;
			friendly = true;
			penetrate = 3;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type >= 938 && type <= 945)
		{
			width = 18;
			height = 18;
			aiStyle = 161;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1f;
			ownerHitCheck = true;
			melee = true;
			extraUpdates = 1;
			timeLeft = 360;
			hide = true;
		}
		else if (type == 946)
		{
			netImportant = true;
			width = 10;
			height = 10;
			penetrate = -1;
			ignoreWater = true;
			tileCollide = false;
			friendly = true;
			minion = true;
			minionSlots = 1f;
			timeLeft *= 5;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
			aiStyle = 156;
			scale = 0.75f;
			manualDirectionChange = true;
			hide = true;
		}
		else if (type == 947 || type == 948)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 15;
			friendly = true;
			penetrate = -1;
			melee = true;
			scale = 1f;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 949)
		{
			width = 4;
			height = 4;
			aiStyle = 184;
			penetrate = -1;
			hostile = true;
			tileCollide = false;
		}
		else if (type == 950)
		{
			width = 104;
			height = 104;
			aiStyle = 186;
			friendly = true;
			magic = true;
			alpha = 255;
			ignoreWater = true;
			timeLeft = 180;
			tileCollide = false;
			penetrate = -1;
		}
		else if (type == 951)
		{
			width = 26;
			height = 26;
			aiStyle = 67;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			minion = true;
			minionSlots = 1f;
			friendly = true;
			decidesManualFallThrough = true;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type == 952)
		{
			DefaultToWhip();
		}
		else if (type == 953)
		{
			width = 8;
			height = 8;
			aiStyle = 117;
			friendly = true;
			alpha = 255;
			ignoreWater = true;
			timeLeft = 60;
			tileCollide = false;
			penetrate = -1;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 80;
		}
		else if (type == 954)
		{
			width = 10;
			height = 10;
			aiStyle = 2;
			friendly = true;
			magic = true;
			alpha = 255;
			penetrate = 2;
			noEnchantmentVisuals = true;
		}
		else if (type == 955)
		{
			width = 18;
			height = 18;
			aiStyle = 5;
			friendly = true;
			penetrate = -1;
			alpha = 50;
			light = 1f;
			ranged = true;
		}
		else if (type == 956)
		{
			netImportant = true;
			width = 20;
			height = 28;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 957)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 124;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
			ignoreWater = true;
			tileCollide = false;
			manualDirectionChange = true;
		}
		else if (type == 958)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 959)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 960)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
			hide = true;
		}
		else if (type == 961)
		{
			width = 32;
			height = 32;
			aiStyle = 157;
			hostile = true;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
			coldDamage = true;
		}
		else if (type == 962)
		{
			width = 32;
			height = 32;
			aiStyle = 1;
			hostile = true;
			tileCollide = false;
			ignoreWater = true;
			timeLeft = 220;
			coldDamage = true;
		}
		else if (type == 963)
		{
			netImportant = true;
			width = 30;
			height = 48;
			penetrate = -1;
			ignoreWater = true;
			tileCollide = false;
			friendly = true;
			minion = true;
			minionSlots = 0f;
			timeLeft *= 5;
			aiStyle = 62;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 20;
		}
		else if (type == 965)
		{
			width = 40;
			height = 40;
			aiStyle = 187;
			hostile = true;
			tileCollide = false;
			ignoreWater = true;
			timeLeft = 300;
			alpha = 255;
		}
		else if (type == 964)
		{
			ArmorPenetration = 20;
			width = 40;
			height = 40;
			aiStyle = 187;
			alpha = 255;
			penetrate = 3;
			friendly = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
			ignoreWater = true;
			tileCollide = false;
			extraUpdates = 1;
			scale = 0.7f;
		}
		else if (type == 966)
		{
			width = 18;
			height = 60;
			aiStyle = 53;
			timeLeft = 36000;
			ignoreWater = true;
			sentry = true;
			netImportant = true;
		}
		else if (type == 967)
		{
			width = 14;
			height = 14;
			aiStyle = 28;
			friendly = true;
		}
		else if (type == 968)
		{
			width = 14;
			height = 14;
			aiStyle = 2;
			friendly = true;
			ranged = true;
			alpha = 255;
		}
		else if (type == 969)
		{
			ArmorPenetration = 10;
			width = 56;
			height = 64;
			aiStyle = 177;
			friendly = true;
			magic = true;
			tileCollide = true;
			penetrate = 15;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 25;
		}
		else if (type == 970)
		{
			netImportant = true;
			width = 10;
			height = 10;
			penetrate = -1;
			ignoreWater = true;
			tileCollide = false;
			friendly = true;
			minion = true;
			minionSlots = 1f;
			timeLeft = 60;
			aiStyle = 164;
			hide = true;
		}
		else if (type == 971)
		{
			width = 16;
			height = 16;
			aiStyle = 113;
			friendly = true;
			melee = true;
			penetrate = -1;
			alpha = 255;
			hide = true;
		}
		else if (type == 977)
		{
			ArmorPenetration = 5;
			width = 20;
			height = 20;
			aiStyle = 152;
			friendly = true;
			tileCollide = false;
			ignoreWater = true;
			melee = true;
			penetrate = 1;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
			scale = 1f + (float)Main.rand.Next(30) * 0.01f;
			extraUpdates = 2;
			timeLeft = 10 * MaxUpdates;
		}
		else if (type == 979)
		{
			width = 10;
			height = 10;
			aiStyle = 2;
			friendly = true;
			magic = true;
			alpha = 255;
			penetrate = 2;
			noEnchantmentVisuals = true;
			coldDamage = true;
		}
		else if (type == 974)
		{
			ArmorPenetration = 5;
			width = 20;
			height = 20;
			aiStyle = 188;
			friendly = true;
			tileCollide = false;
			ignoreWater = true;
			melee = true;
			penetrate = 2;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
			timeLeft = 30;
			stopsDealingDamageAfterPenetrateHits = true;
		}
		else if (type == 978)
		{
			width = 160;
			height = 160;
			aiStyle = 189;
			friendly = true;
			alpha = 255;
			ignoreWater = true;
			timeLeft = 60;
			tileCollide = false;
			ownerHitCheck = true;
			penetrate = 3;
			usesLocalNPCImmunity = true;
			melee = true;
			timeLeft = 30;
		}
		else if (type == 976)
		{
			ArmorPenetration = 20;
			width = 20;
			height = 20;
			aiStyle = 152;
			friendly = true;
			tileCollide = false;
			ignoreWater = true;
			melee = true;
			penetrate = 2;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
			scale = 1f + (float)Main.rand.Next(30) * 0.01f;
			extraUpdates = 0;
			timeLeft = 60 * MaxUpdates;
		}
		else if (type == 975)
		{
			width = 16;
			height = 16;
			aiStyle = 113;
			friendly = true;
			melee = true;
			penetrate = -1;
			alpha = 0;
			hide = true;
		}
		else if (type == 972)
		{
			width = 16;
			height = 16;
			aiStyle = 190;
			friendly = true;
			melee = true;
			penetrate = 2;
			usesLocalNPCImmunity = true;
			tileCollide = false;
			ignoreWater = true;
			localNPCHitCooldown = -1;
			ownerHitCheck = true;
			ownerHitCheckDistance = 300f;
			usesOwnerMeleeHitCD = true;
			stopsDealingDamageAfterPenetrateHits = true;
		}
		else if (type == 973)
		{
			width = 30;
			height = 30;
			aiStyle = 191;
			friendly = true;
			melee = true;
			penetrate = 3;
			usesLocalNPCImmunity = true;
			tileCollide = false;
			ignoreWater = true;
			localNPCHitCooldown = 10;
			alpha = 255;
			timeLeft = 90;
		}
		else if (type == 980)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			hostile = true;
			penetrate = -1;
			trap = true;
		}
		else if (type == 981)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 255;
			scale = 1.2f;
			timeLeft = 600;
			ranged = true;
			extraUpdates = 1;
		}
		else if (type == 982)
		{
			width = 16;
			height = 16;
			aiStyle = 190;
			friendly = true;
			melee = true;
			penetrate = 3;
			usesLocalNPCImmunity = true;
			tileCollide = false;
			ignoreWater = true;
			localNPCHitCooldown = -1;
			ownerHitCheck = true;
			ownerHitCheckDistance = 300f;
			usesOwnerMeleeHitCD = true;
			stopsDealingDamageAfterPenetrateHits = true;
		}
		else if (type == 983)
		{
			width = 16;
			height = 16;
			aiStyle = 190;
			friendly = true;
			melee = true;
			penetrate = 6;
			usesLocalNPCImmunity = true;
			tileCollide = false;
			ignoreWater = true;
			localNPCHitCooldown = -1;
			ownerHitCheck = true;
			ownerHitCheckDistance = 300f;
			usesOwnerMeleeHitCD = true;
			stopsDealingDamageAfterPenetrateHits = true;
		}
		else if (type == 984)
		{
			width = 16;
			height = 16;
			aiStyle = 190;
			friendly = true;
			melee = true;
			penetrate = 3;
			usesLocalNPCImmunity = true;
			tileCollide = false;
			ignoreWater = true;
			localNPCHitCooldown = -1;
			ownerHitCheck = true;
			ownerHitCheckDistance = 300f;
			usesOwnerMeleeHitCD = true;
			stopsDealingDamageAfterPenetrateHits = true;
		}
		else if (type == 985)
		{
			width = 8;
			height = 8;
			aiStyle = 191;
			friendly = true;
			melee = true;
			penetrate = -1;
			usesLocalNPCImmunity = true;
			tileCollide = true;
			ignoreWater = true;
			localNPCHitCooldown = -1;
			alpha = 255;
			timeLeft = 90;
			ownerHitCheck = true;
			ownerHitCheckDistance = 300f;
		}
		else if (type >= 986 && type <= 993)
		{
			width = 14;
			height = 14;
			aiStyle = 61;
			penetrate = -1;
			netImportant = true;
			bobber = true;
			if (type >= 987 && type <= 993)
			{
				glowMask = (short)(318 + (type - 987));
				light = 1f;
			}
		}
		else if (type == 994)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 995)
		{
			netImportant = true;
			width = 240;
			height = 104;
			aiStyle = 192;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			ignoreWater = true;
			timeLeft *= 5;
		}
		else if (type == 996)
		{
			width = 18;
			height = 18;
			aiStyle = 2;
			friendly = true;
			penetrate = 1;
		}
		else if (type == 997)
		{
			width = 16;
			height = 16;
			aiStyle = 190;
			friendly = true;
			melee = true;
			penetrate = 3;
			usesLocalNPCImmunity = true;
			tileCollide = false;
			ignoreWater = true;
			localNPCHitCooldown = -1;
			ownerHitCheck = true;
			ownerHitCheckDistance = 300f;
			usesOwnerMeleeHitCD = true;
			stopsDealingDamageAfterPenetrateHits = true;
		}
		else if (type == 999)
		{
			extraUpdates = 0;
			width = 16;
			height = 16;
			aiStyle = 99;
			friendly = true;
			penetrate = -1;
			melee = true;
			scale = 1f;
		}
		else if (type == 1000)
		{
			width = 22;
			height = 22;
			aiStyle = 3;
			friendly = true;
			penetrate = -1;
			melee = true;
			light = 0.6f;
		}
		else if (type == 998)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 1001)
		{
			width = 26;
			height = 26;
			aiStyle = 194;
			hostile = true;
			tileCollide = false;
			ignoreWater = true;
			scale = 1f + (float)Main.rand.Next(51) * 0.01f;
			timeLeft = 360;
			alpha = 255;
		}
		else if (type == 1002)
		{
			width = 260;
			height = 260;
			aiStyle = 16;
			friendly = true;
			hostile = true;
			penetrate = -1;
			tileCollide = false;
			alpha = 255;
			timeLeft = 2;
			trap = true;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 15;
		}
		else if (type == 1003)
		{
			netImportant = true;
			width = 26;
			height = 26;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 1004)
		{
			netImportant = true;
			width = 26;
			height = 26;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 1007)
		{
			width = 50;
			height = 50;
			aiStyle = 92;
			hostile = true;
			friendly = true;
			penetrate = -1;
			scale = 1.1f;
			trap = true;
			hide = true;
		}
		else if (type == 1006)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			timeLeft = 1200;
		}
		else if (type == 1008)
		{
			netImportant = true;
			width = 6;
			height = 6;
			aiStyle = 33;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			timeLeft = 36000;
		}
		else if (type == 1009)
		{
			netImportant = true;
			width = 6;
			height = 6;
			aiStyle = 33;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			timeLeft = 36000;
		}
		else if (type == 1010)
		{
			netImportant = true;
			width = 6;
			height = 6;
			aiStyle = 33;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			timeLeft = 36000;
		}
		else if (type == 1011)
		{
			netImportant = true;
			width = 6;
			height = 6;
			aiStyle = 33;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			timeLeft = 36000;
		}
		else if (type == 1012)
		{
			width = 18;
			height = 18;
			aiStyle = 2;
			friendly = true;
			melee = true;
			penetrate = 1;
		}
		else if (type == 1015 || type == 1016 || type == 1017)
		{
			DefaultToSpray();
		}
		else if (type == 1018)
		{
			width = 16;
			height = 16;
			aiStyle = 67;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			friendly = true;
			ignoreWater = true;
		}
		else if (type == 1019)
		{
			width = 64;
			height = 64;
			aiStyle = 6;
			friendly = true;
			tileCollide = false;
			penetrate = -1;
			alpha = 255;
			ignoreWater = true;
		}
		else if (type == 1020)
		{
			width = 12;
			height = 12;
			aiStyle = 195;
			friendly = true;
			penetrate = -1;
		}
		if (type < ProjectileID.Count && (minion || sentry || ProjectileID.Sets.MinionShot[type] || ProjectileID.Sets.SentryShot[type]))
		{
			DamageType = DamageClass.Summon;
		}
		ProjectileLoader.SetDefaults(this);
		width = (int)((float)width * scale);
		height = (int)((float)height * scale);
		maxPenetrate = penetrate;
	}

	public void DefaultToSpray()
	{
		width = 6;
		height = 6;
		aiStyle = 31;
		friendly = true;
		alpha = 255;
		penetrate = -1;
		extraUpdates = 2;
		tileCollide = false;
		ignoreWater = true;
	}

	public void DefaultToWhip()
	{
		width = 18;
		height = 18;
		aiStyle = 165;
		friendly = true;
		penetrate = -1;
		tileCollide = false;
		scale = 1f;
		ownerHitCheck = true;
		extraUpdates = 1;
		usesLocalNPCImmunity = true;
		localNPCHitCooldown = -1;
		DamageType = DamageClass.SummonMeleeSpeed;
		VanillaWhipSettings(this, out WhipSettings.Segments, out WhipSettings.RangeMultiplier);
	}

	public static int GetNextSlot()
	{
		int result = 1000;
		for (int i = 0; i < 1000; i++)
		{
			if (!Main.projectile[i].active)
			{
				result = i;
				break;
			}
		}
		return result;
	}

	/// <summary>
	/// <inheritdoc cref="M:Terraria.Projectile.NewProjectile(Terraria.DataStructures.IEntitySource,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Int32,System.Single,System.Single,System.Single)" />
	/// <br /><br />This particular overload uses a Vector2 instead of X and Y to determine the actual spawn position and a Vector2 to dictate the initial velocity.
	/// </summary>
	public static int NewProjectile(IEntitySource spawnSource, Vector2 position, Vector2 velocity, int Type, int Damage, float KnockBack, int Owner = -1, float ai0 = 0f, float ai1 = 0f, float ai2 = 0f)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		return NewProjectile(spawnSource, position.X, position.Y, velocity.X, velocity.Y, Type, Damage, KnockBack, Owner, ai0, ai1, ai2);
	}

	public static int FindOldestProjectile()
	{
		int result = 1000;
		int num = 9999999;
		for (int i = 0; i < 1000; i++)
		{
			if (!Main.projectile[i].netImportant && Main.projectile[i].timeLeft < num)
			{
				result = i;
				num = Main.projectile[i].timeLeft;
			}
		}
		return result;
	}

	/// <summary>
	/// Spawns a projectile into the game world with the given type. The spawn position is given in world coordinates by the X and Y parameters. SpeedX and SpeedY dictate the initial velocity. Damage and KnockBack are self-explanatory. Owner is the player who spawned the projectile, almost always Main.myPlayer. ai0, ai1, and ai2 will initialize the Projectile.ai[] array with the supplied values. This can be used to pass in information to the Projectile. The Projectile AI code will have to be written to utilize those values. The return value is the index of the spawned Projectile within the <see cref="F:Terraria.Main.projectile" /> array.
	/// <br /> Make sure that this method is called only by the client in charge of the source causing this projectile to spawn. Failure to do this will result in the projectile spawning once for each player in the world. For example, if Player code uses this method, make sure to first check <code>if(Main.myPlayer == Player.whoAmI)</code> to ensure that only the local player spawns the projectile.
	/// <br /> Projectiles spawning other projectiles should check <code>if(Main.myPlayer == Projectile.owner)</code>
	/// <br /> If the source is an NPC or non-player owned projectile, checking <code>if (Main.netMode != NetmodeID.MultiplayerClient)</code> will ensure that clients don't attempt to spawn the projectile.
	/// </summary>
	/// <param name="spawnSource"></param>
	/// <param name="X"></param>
	/// <param name="Y"></param>
	/// <param name="SpeedX"></param>
	/// <param name="SpeedY"></param>
	/// <param name="Type">Either a <see cref="T:Terraria.ID.ProjectileID" /> entry or <see cref="M:Terraria.ModLoader.ModContent.ProjectileType``1" />, for example <see cref="F:Terraria.ID.ProjectileID.FireArrow" /> or ModContent.ProjectileType&lt;MyModProjectile&gt;()</param>
	/// <param name="Damage"></param>
	/// <param name="KnockBack"></param>
	/// <param name="Owner"></param>
	/// <param name="ai0"></param>
	/// <param name="ai1"></param>
	/// <param name="ai2"></param>
	/// <returns></returns>
	public static int NewProjectile(IEntitySource spawnSource, float X, float Y, float SpeedX, float SpeedY, int Type, int Damage, float KnockBack, int Owner = -1, float ai0 = 0f, float ai1 = 0f, float ai2 = 0f)
	{
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		if (Owner == -1)
		{
			Owner = Main.myPlayer;
		}
		int num = 1000;
		for (int i = 0; i < 1000; i++)
		{
			if (!Main.projectile[i].active)
			{
				num = i;
				break;
			}
		}
		if (num == 1000)
		{
			num = FindOldestProjectile();
		}
		Projectile projectile = Main.projectile[num];
		projectile.SetDefaults(Type);
		projectile.position.X = X - (float)projectile.width * 0.5f;
		projectile.position.Y = Y - (float)projectile.height * 0.5f;
		projectile.owner = Owner;
		projectile.velocity.X = SpeedX;
		projectile.velocity.Y = SpeedY;
		projectile.damage = Damage;
		projectile.knockBack = KnockBack;
		projectile.identity = num;
		projectile.gfxOffY = 0f;
		projectile.stepSpeed = 1f;
		projectile.wet = Collision.WetCollision(projectile.position, projectile.width, projectile.height);
		if (projectile.ignoreWater)
		{
			projectile.wet = false;
		}
		projectile.honeyWet = Collision.honey;
		projectile.shimmerWet = Collision.shimmer;
		Main.projectileIdentity[Owner, num] = num;
		FindBannerToAssociateTo(spawnSource, projectile);
		if (projectile.aiStyle == 1)
		{
			while (projectile.velocity.X >= 16f || projectile.velocity.X <= -16f || projectile.velocity.Y >= 16f || projectile.velocity.Y < -16f)
			{
				projectile.velocity.X *= 0.97f;
				projectile.velocity.Y *= 0.97f;
			}
		}
		if (Owner == Main.myPlayer)
		{
			switch (Type)
			{
			case 206:
				projectile.ai[0] = (float)Main.rand.Next(-100, 101) * 0.0005f;
				projectile.ai[1] = (float)Main.rand.Next(-100, 101) * 0.0005f;
				break;
			case 335:
				projectile.ai[1] = Main.rand.Next(4);
				break;
			case 358:
				projectile.ai[1] = (float)Main.rand.Next(10, 31) * 0.1f;
				break;
			case 406:
				projectile.ai[1] = (float)Main.rand.Next(10, 21) * 0.1f;
				break;
			default:
				projectile.ai[0] = ai0;
				projectile.ai[1] = ai1;
				projectile.ai[2] = ai2;
				break;
			}
		}
		if (Type == 434)
		{
			projectile.ai[0] = projectile.position.X;
			projectile.ai[1] = projectile.position.Y;
		}
		if (Type > 0)
		{
			if (ProjectileID.Sets.NeedsUUID[Type])
			{
				projectile.projUUID = projectile.identity;
			}
			if (ProjectileID.Sets.StardustDragon[Type])
			{
				int num2 = Main.projectile[(int)projectile.ai[0]].projUUID;
				if (num2 >= 0)
				{
					projectile.ai[0] = num2;
				}
			}
		}
		if (Owner == Main.myPlayer)
		{
			if (ProjectileID.Sets.IsAGolfBall[Type] && Damage <= 0)
			{
				int num3 = 0;
				int num4 = 0;
				int num5 = 99999999;
				for (int j = 0; j < 1000; j++)
				{
					if (Main.projectile[j].active && ProjectileID.Sets.IsAGolfBall[Main.projectile[j].type] && Main.projectile[j].owner == Owner && Main.projectile[j].damage <= 0)
					{
						num3++;
						if (num5 > Main.projectile[j].timeLeft)
						{
							num4 = j;
							num5 = Main.projectile[j].timeLeft;
						}
					}
				}
				if (num3 > 10)
				{
					Main.projectile[num4].Kill();
				}
			}
			if (Type == 28)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 516)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 519)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 29)
			{
				projectile.timeLeft = 300;
			}
			if (Type == 470)
			{
				projectile.timeLeft = 300;
			}
			if (Type == 637)
			{
				projectile.timeLeft = 300;
			}
			if (Type == 30)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 517)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 37)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 773)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 75)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 133)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 136)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 139)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 142)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 397)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 419)
			{
				projectile.timeLeft = 600;
			}
			if (Type == 420)
			{
				projectile.timeLeft = 600;
			}
			if (Type == 421)
			{
				projectile.timeLeft = 600;
			}
			if (Type == 422)
			{
				projectile.timeLeft = 600;
			}
			if (Type == 588)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 779)
			{
				projectile.timeLeft = 60;
			}
			if (Type == 783)
			{
				projectile.timeLeft = 60;
			}
			if (Type == 862 || Type == 863)
			{
				projectile.timeLeft = 60;
			}
			if (Type == 443)
			{
				projectile.timeLeft = 300;
			}
			if (Type == 681)
			{
				projectile.timeLeft = 600;
			}
			if (Type == 684)
			{
				projectile.timeLeft = 60;
			}
			if (Type == 706)
			{
				projectile.timeLeft = 120;
			}
			if (Type == 680 && Main.player[projectile.owner].setSquireT2)
			{
				projectile.penetrate = 7;
			}
			if (Type == 777 || Type == 781 || Type == 794 || Type == 797 || Type == 800 || Type == 785 || Type == 788 || Type == 791 || Type == 903 || Type == 904 || Type == 905 || Type == 906 || Type == 910 || Type == 911)
			{
				projectile.timeLeft = 180;
			}
			if (Main.netMode != 2)
			{
				Player throwingPlayer = Main.player[Owner];
				if (throwingPlayer.AnyThrownCostReduction && throwingPlayer.HeldItem.CountsAsClass(DamageClass.Throwing) && spawnSource is EntitySource_ItemUse_WithAmmo)
				{
					projectile.noDropItem = true;
				}
			}
		}
		if (Type == 249)
		{
			projectile.frame = Main.rand.Next(5);
		}
		if (Owner == Main.myPlayer)
		{
			Main.player[Owner].TryUpdateChannel(projectile);
		}
		projectile.ApplyStatsFromSource(spawnSource);
		ProjectileLoader.OnSpawn(projectile, spawnSource);
		if (Main.netMode != 0 && Owner == Main.myPlayer)
		{
			NetMessage.SendData(27, -1, -1, null, num);
		}
		return num;
	}

	private static void FindBannerToAssociateTo(IEntitySource spawnSource, Projectile next)
	{
		if (spawnSource is EntitySource_Parent entitySource_Parent)
		{
			if (entitySource_Parent.Entity is Projectile projectile)
			{
				next.bannerIdToRespondTo = projectile.bannerIdToRespondTo;
			}
			else if (entitySource_Parent.Entity is NPC nPC)
			{
				next.bannerIdToRespondTo = Item.NPCtoBanner(nPC.BannerID());
			}
		}
	}

	public static Color GetGolfTrailColor(Projectile proj)
	{
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_014b: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		return (Color)(proj.type switch
		{
			739 => new Color(50, 50, 50, 80), 
			740 => new Color(30, 50, 255, 40), 
			741 => new Color(150, 90, 60, 90), 
			742 => new Color(30, 255, 170, 30), 
			743 => new Color(30, 255, 30, 40), 
			744 => new Color(190, 255, 30, 50), 
			745 => new Color(255, 130, 30, 50), 
			746 => new Color(255, 50, 110, 50), 
			747 => new Color(130, 10, 200, 40), 
			748 => new Color(255, 30, 50, 50), 
			749 => new Color(100, 180, 255, 30), 
			750 => new Color(50, 240, 160, 30), 
			751 => new Color(220, 80, 220, 70), 
			752 => new Color(255, 180, 50, 30), 
			_ => new Color(160, 160, 255, 50), 
		});
	}

	public void StatusNPC(int i)
	{
		NPC nPC = Main.npc[i];
		if ((melee || ProjectileID.Sets.IsAWhip[type]) && Main.player[owner].meleeEnchant > 0 && !noEnchantments)
		{
			byte meleeEnchant = Main.player[owner].meleeEnchant;
			if (meleeEnchant == 1)
			{
				nPC.AddBuff(70, 60 * Main.rand.Next(5, 10));
			}
			if (meleeEnchant == 2)
			{
				nPC.AddBuff(39, 60 * Main.rand.Next(3, 7));
			}
			if (meleeEnchant == 3)
			{
				nPC.AddBuff(24, 60 * Main.rand.Next(3, 7));
			}
			if (meleeEnchant == 5)
			{
				nPC.AddBuff(69, 60 * Main.rand.Next(10, 20));
			}
			if (meleeEnchant == 6)
			{
				nPC.AddBuff(31, 60 * Main.rand.Next(1, 4));
			}
			if (meleeEnchant == 8)
			{
				nPC.AddBuff(20, 60 * Main.rand.Next(5, 10));
			}
			if (meleeEnchant == 4)
			{
				nPC.AddBuff(72, 120);
			}
		}
		if (type == 195)
		{
			nPC.AddBuff(70, 60 * Main.rand.Next(5, 11));
		}
		if (type == 119)
		{
			nPC.AddBuff(324, 240);
		}
		if (type == 309)
		{
			nPC.AddBuff(324, 300);
		}
		if (type == 359)
		{
			nPC.AddBuff(324, 420);
		}
		switch (type)
		{
		case 841:
			nPC.AddBuff(307, 240);
			break;
		case 952:
			nPC.AddBuff(326, 240);
			break;
		case 847:
			nPC.AddBuff(309, 240);
			break;
		case 849:
			nPC.AddBuff(310, 240);
			break;
		case 913:
			if (localAI[0] == 0f)
			{
				nPC.AddBuff(313, 240);
			}
			nPC.AddBuff(323, 240);
			break;
		case 912:
			nPC.AddBuff(340, 240);
			nPC.AddBuff(324, 240);
			break;
		case 914:
			nPC.AddBuff(315, 240);
			if (Main.rand.Next(5) == 0)
			{
				nPC.AddBuff(20, 180);
			}
			break;
		case 848:
			nPC.AddBuff(319, 240);
			break;
		case 915:
			nPC.AddBuff(316, 240);
			break;
		}
		if (type == 664 && Main.rand.Next(3) == 0)
		{
			nPC.AddBuff(24, 60 * Main.rand.Next(3, 6));
		}
		if (type == 666 && Main.rand.Next(2) == 0)
		{
			nPC.AddBuff(323, 60 * Main.rand.Next(3, 9));
		}
		if (type == 668 && Main.rand.Next(3) != 0)
		{
			nPC.AddBuff(323, 60 * Main.rand.Next(6, 9));
		}
		if (type == 567 || type == 568)
		{
			nPC.AddBuff(20, 60 * Main.rand.Next(5, 11));
		}
		if (type == 598 && ai[1] == (float)i)
		{
			nPC.AddBuff(169, 900);
		}
		if (type == 636 && ai[1] == (float)i)
		{
			nPC.AddBuff(189, 300);
		}
		if (type == 971 && ai[1] == (float)i)
		{
			nPC.AddBuff(337, 540);
		}
		if (type == 975 && ai[1] == (float)i)
		{
			nPC.AddBuff(344, 540);
		}
		if (type == 611)
		{
			nPC.AddBuff(189, 300);
		}
		if (type == 612)
		{
			nPC.AddBuff(189, 300);
		}
		if (type == 978)
		{
			nPC.AddBuff(24, 180);
		}
		if (type == 953)
		{
			nPC.AddBuff(189, 300);
		}
		if (type == 711)
		{
			nPC.AddBuff(203, 600);
		}
		if (type == 706)
		{
			nPC.AddBuff(323, 480);
		}
		if (type == 614 && ai[1] == (float)i)
		{
			nPC.AddBuff(183, 900);
		}
		if (type == 585)
		{
			nPC.AddBuff(153, 60 * Main.rand.Next(5, 11));
		}
		if (type == 583)
		{
			nPC.AddBuff(20, 60 * Main.rand.Next(3, 6));
		}
		if (type == 524)
		{
			nPC.AddBuff(69, 60 * Main.rand.Next(3, 8));
		}
		if (type == 954 && Main.rand.Next(2) == 0)
		{
			int num = 24;
			if (Main.remixWorld)
			{
				num = 323;
			}
			if (Main.rand.Next(3) == 0)
			{
				nPC.AddBuff(num, Main.rand.Next(60, 240));
			}
			else
			{
				nPC.AddBuff(num, Main.rand.Next(60, 120));
			}
		}
		if (type == 504 && Main.rand.Next(2) == 0)
		{
			if (Main.rand.Next(3) == 0)
			{
				nPC.AddBuff(323, Main.rand.Next(60, 240));
			}
			else
			{
				nPC.AddBuff(323, Main.rand.Next(60, 120));
			}
		}
		if (type == 979 && Main.rand.Next(2) == 0)
		{
			int num2 = 44;
			if (Main.remixWorld)
			{
				num2 = 324;
			}
			if (Main.rand.Next(3) == 0)
			{
				nPC.AddBuff(num2, Main.rand.Next(60, 240));
			}
			else
			{
				nPC.AddBuff(num2, Main.rand.Next(60, 120));
			}
		}
		if ((type == 694 || type == 695 || type == 696) && Main.player[owner].setHuntressT2)
		{
			nPC.AddBuff(204, Main.rand.Next(8, 18) * 30);
		}
		if (type == 545 && Main.rand.Next(3) == 0)
		{
			nPC.AddBuff(24, Main.rand.Next(60, 240));
		}
		if (type == 553)
		{
			nPC.AddBuff(323, Main.rand.Next(180, 480));
		}
		if (type == 552 && Main.rand.Next(3) != 0)
		{
			nPC.AddBuff(324, Main.rand.Next(120, 320));
		}
		if (type == 495)
		{
			nPC.AddBuff(153, Main.rand.Next(120, 300));
		}
		if (type == 497)
		{
			nPC.AddBuff(153, Main.rand.Next(60, 180));
		}
		if (type == 496)
		{
			nPC.AddBuff(153, Main.rand.Next(240, 480));
		}
		if (type == 46)
		{
			nPC.AddBuff(153, Main.rand.Next(240, 300));
		}
		if (type == 476)
		{
			nPC.AddBuff(151, 30);
		}
		if (type == 523)
		{
			nPC.AddBuff(20, 60 * Main.rand.Next(10, 30));
		}
		if (type == 478 || type == 480)
		{
			nPC.AddBuff(39, 60 * Main.rand.Next(3, 7));
		}
		if (type == 479)
		{
			nPC.AddBuff(69, 60 * Main.rand.Next(7, 15));
		}
		if (type == 379)
		{
			nPC.AddBuff(70, 60 * Main.rand.Next(2, 5));
		}
		if (type >= 390 && type <= 392)
		{
			nPC.AddBuff(70, 60 * Main.rand.Next(2, 5));
		}
		if (type == 374)
		{
			nPC.AddBuff(20, 60 * Main.rand.Next(4, 7));
		}
		if (type == 376)
		{
			nPC.AddBuff(24, 60 * Main.rand.Next(3, 7));
		}
		if (type >= 399 && type <= 402)
		{
			nPC.AddBuff(24, 60 * Main.rand.Next(3, 7));
		}
		if (type == 295 || type == 296)
		{
			nPC.AddBuff(323, 60 * Main.rand.Next(8, 16));
		}
		if ((melee || ranged) && !npcProj && Main.player[owner].frostBurn && !noEnchantments)
		{
			nPC.AddBuff(324, 60 * Main.rand.Next(5, 15));
		}
		if (melee && Main.player[owner].magmaStone && !noEnchantments)
		{
			if (Main.rand.Next(7) == 0)
			{
				nPC.AddBuff(323, 360);
			}
			else if (Main.rand.Next(3) == 0)
			{
				nPC.AddBuff(323, 120);
			}
			else
			{
				nPC.AddBuff(323, 60);
			}
		}
		if (type == 287)
		{
			nPC.AddBuff(72, 120);
		}
		if (type == 285)
		{
			if (Main.rand.Next(3) == 0)
			{
				nPC.AddBuff(31, 180);
			}
			else
			{
				nPC.AddBuff(31, 60);
			}
		}
		if (type == 2 && Main.rand.Next(3) == 0)
		{
			nPC.AddBuff(24, 180);
		}
		if (type == 172)
		{
			if (Main.rand.Next(3) == 0)
			{
				nPC.AddBuff(44, 180);
			}
		}
		else if (type == 15)
		{
			int num3 = 24;
			if (Main.remixWorld)
			{
				num3 = 323;
			}
			if (Main.rand.Next(2) == 0)
			{
				nPC.AddBuff(num3, 300);
			}
		}
		else if (type == 253)
		{
			nPC.AddBuff(324, 480);
		}
		else if (type == 19)
		{
			if (Main.rand.Next(2) == 0)
			{
				nPC.AddBuff(24, 360);
			}
		}
		else if (type == 113)
		{
			if (Main.rand.Next(2) == 0)
			{
				nPC.AddBuff(44, 180);
			}
		}
		else if (type == 33)
		{
			if (Main.rand.Next(2) == 0)
			{
				nPC.AddBuff(20, 420);
			}
		}
		else if (type == 976)
		{
			if (Main.rand.Next(4) == 0)
			{
				nPC.AddBuff(20, 420);
			}
		}
		else if (type == 34)
		{
			if (Main.rand.Next(2) == 0)
			{
				nPC.AddBuff(24, Main.rand.Next(240, 480));
			}
		}
		else if (type == 948)
		{
			if (Main.rand.Next(6) == 0)
			{
				nPC.AddBuff(24, 60 * Main.rand.Next(2, 4));
			}
		}
		else if (type == 35)
		{
			if (Main.rand.Next(2) == 0)
			{
				nPC.AddBuff(24, 300);
			}
		}
		else if (type == 54)
		{
			if (Main.rand.Next(2) == 0)
			{
				nPC.AddBuff(20, 600);
			}
		}
		else if (type == 267)
		{
			if (Main.rand.Next(3) == 0)
			{
				nPC.AddBuff(20, 3600);
			}
			else
			{
				nPC.AddBuff(20, 1800);
			}
		}
		else if (type == 63)
		{
			if (Main.rand.Next(5) != 0)
			{
				nPC.AddBuff(31, 60 * Main.rand.Next(2, 5));
			}
		}
		else if (type == 85)
		{
			int num4 = ((ai[0] == 1f) ? 324 : 323);
			nPC.AddBuff(num4, 1200);
		}
		else if (type == 188)
		{
			nPC.AddBuff(323, 1200);
		}
		else if (type == 95 || type == 103 || type == 104 || type == 482)
		{
			nPC.AddBuff(39, 420);
		}
		else if (type == 278 || type == 279 || type == 280)
		{
			nPC.AddBuff(69, 600);
		}
		else if (type == 282 || type == 283)
		{
			nPC.AddBuff(70, 600);
		}
		if (type == 163 || type == 310 || type == 1008 || type == 1010 || type == 1011)
		{
			if (Main.rand.Next(3) == 0)
			{
				nPC.AddBuff(24, 600);
			}
			else
			{
				nPC.AddBuff(24, 300);
			}
		}
		if (type == 1009)
		{
			nPC.AddBuff(39, 600);
		}
		else if (type == 98)
		{
			nPC.AddBuff(20, 600);
		}
		else if (type == 184)
		{
			nPC.AddBuff(20, 900);
		}
		else if (type == 980)
		{
			nPC.AddBuff(70, 300);
		}
		else if (type == 265)
		{
			nPC.AddBuff(20, 1800);
		}
		else if (type == 355)
		{
			nPC.AddBuff(70, 1800);
		}
	}

	public void StatusPvP(int i)
	{
		if ((melee || ProjectileID.Sets.IsAWhip[type]) && Main.player[owner].meleeEnchant > 0 && !noEnchantments)
		{
			byte meleeEnchant = Main.player[owner].meleeEnchant;
			if (meleeEnchant == 1)
			{
				Main.player[i].AddBuff(70, 60 * Main.rand.Next(5, 10), quiet: false);
			}
			if (meleeEnchant == 2)
			{
				Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7), quiet: false);
			}
			if (meleeEnchant == 3)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7), quiet: false);
			}
			if (meleeEnchant == 5)
			{
				Main.player[i].AddBuff(69, 60 * Main.rand.Next(10, 20), quiet: false);
			}
			if (meleeEnchant == 6)
			{
				Main.player[i].AddBuff(31, 60 * Main.rand.Next(1, 4), quiet: false);
			}
			if (meleeEnchant == 8)
			{
				Main.player[i].AddBuff(20, 60 * Main.rand.Next(5, 10), quiet: false);
			}
		}
		if (type == 978)
		{
			Main.player[i].AddBuff(24, 180);
		}
		if (type == 295 || type == 296)
		{
			Main.player[i].AddBuff(323, 60 * Main.rand.Next(8, 16), quiet: false);
		}
		if (type >= 399 && type <= 402)
		{
			Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7), quiet: false);
		}
		if (type == 478 || type == 480)
		{
			Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7), quiet: false);
		}
		if ((melee || ranged) && Main.player[owner].frostBurn && !noEnchantments)
		{
			Main.player[i].AddBuff(324, 60 * Main.rand.Next(1, 8), quiet: false);
		}
		if (melee && Main.player[owner].magmaStone && !noEnchantments)
		{
			if (Main.rand.Next(4) == 0)
			{
				Main.player[i].AddBuff(24, 360, quiet: false);
			}
			else if (Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(24, 240, quiet: false);
			}
			else
			{
				Main.player[i].AddBuff(24, 120, quiet: false);
			}
		}
		if (type == 2 && Main.rand.Next(3) == 0)
		{
			Main.player[i].AddBuff(24, 180, quiet: false);
		}
		if (type == 172)
		{
			if (Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(44, 240, quiet: false);
			}
		}
		else if (type == 15)
		{
			int num = 24;
			if (Main.remixWorld)
			{
				num = 323;
			}
			if (Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(num, 300, quiet: false);
			}
		}
		else if (type == 253)
		{
			if (Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(44, 480, quiet: false);
			}
		}
		else if (type == 19)
		{
			if (Main.rand.Next(5) == 0)
			{
				Main.player[i].AddBuff(24, 180, quiet: false);
			}
		}
		else if (type == 113)
		{
			if (Main.rand.Next(5) == 0)
			{
				Main.player[i].AddBuff(44, 180, quiet: false);
			}
		}
		else if (type == 33)
		{
			if (Main.rand.Next(5) == 0)
			{
				Main.player[i].AddBuff(20, 420, quiet: false);
			}
		}
		else if (type == 976)
		{
			if (Main.rand.Next(4) == 0)
			{
				Main.player[i].AddBuff(20, 420, quiet: false);
			}
		}
		else if (type == 34)
		{
			if (Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(24, 240, quiet: false);
			}
		}
		else if (type == 35)
		{
			if (Main.rand.Next(4) == 0)
			{
				Main.player[i].AddBuff(24, 180, quiet: false);
			}
		}
		else if (type == 54)
		{
			if (Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(20, 600, quiet: false);
			}
		}
		else if (type == 267)
		{
			if (Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(20, 3600, quiet: false);
			}
			else
			{
				Main.player[i].AddBuff(20, 1800, quiet: false);
			}
		}
		else if (type == 63)
		{
			if (Main.rand.Next(3) != 0)
			{
				Main.player[i].AddBuff(31, 120, quiet: false);
			}
		}
		else if (type == 85 || type == 188)
		{
			Main.player[i].AddBuff(24, 1200, quiet: false);
		}
		else if (type == 95 || type == 103 || type == 104 || type == 482)
		{
			Main.player[i].AddBuff(39, 420, quiet: false);
		}
		else if (type == 278 || type == 279 || type == 280)
		{
			Main.player[i].AddBuff(69, 900, quiet: false);
		}
		else if (type == 282 || type == 283)
		{
			Main.player[i].AddBuff(70, 600, quiet: false);
		}
		if (type == 163 || type == 310 || type == 1008 || type == 1010 || type == 1011)
		{
			if (Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(24, 600, quiet: false);
			}
			else
			{
				Main.player[i].AddBuff(24, 300, quiet: false);
			}
		}
		if (type == 1009)
		{
			Main.player[i].AddBuff(39, 300, quiet: false);
		}
		else if (type == 265)
		{
			Main.player[i].AddBuff(20, 1200, quiet: false);
		}
		else if (type == 355)
		{
			Main.player[i].AddBuff(70, 1800, quiet: false);
		}
	}

	public void ghostHurt(int dmg, Vector2 Position, Entity victim)
	{
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_0209: Unknown result type (might be due to invalid IL or missing references)
		//IL_020f: Unknown result type (might be due to invalid IL or missing references)
		if (!magic || damage <= 0)
		{
			return;
		}
		int num = damage;
		if (dmg <= 1)
		{
			return;
		}
		int num2 = -1;
		int num3 = 1500;
		if (Main.player[Main.myPlayer].ghostDmg > (float)num3)
		{
			return;
		}
		Main.player[Main.myPlayer].ghostDmg += num;
		int[] array = new int[200];
		int num4 = 0;
		_ = new int[200];
		int num5 = 0;
		for (int i = 0; i < 200; i++)
		{
			if (!Main.npc[i].CanBeChasedBy(this))
			{
				continue;
			}
			float num6 = Math.Abs(Main.npc[i].position.X + (float)(Main.npc[i].width / 2) - position.X + (float)(width / 2)) + Math.Abs(Main.npc[i].position.Y + (float)(Main.npc[i].height / 2) - position.Y + (float)(height / 2));
			if (num6 < 800f)
			{
				if (Collision.CanHit(position, 1, 1, Main.npc[i].position, Main.npc[i].width, Main.npc[i].height) && num6 > 50f)
				{
					array[num5] = i;
					num5++;
				}
				else if (num5 == 0)
				{
					array[num4] = i;
					num4++;
				}
			}
		}
		if (num4 != 0 || num5 != 0)
		{
			num2 = ((num5 <= 0) ? array[Main.rand.Next(num4)] : array[Main.rand.Next(num5)]);
			float num7 = Main.rand.Next(-100, 101);
			float num8 = Main.rand.Next(-100, 101);
			float num9 = (float)Math.Sqrt(num7 * num7 + num8 * num8);
			num9 = 4f / num9;
			num7 *= num9;
			num8 *= num9;
			NewProjectile(GetProjectileSource_OnHit(victim, 16), Position.X, Position.Y, num7, num8, 356, num, 0f, owner, num2);
		}
	}

	public void ghostHeal(int dmg, Vector2 Position, Entity victim)
	{
		//IL_013c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		float num = 0.2f;
		num -= (float)numHits * 0.05f;
		if (num <= 0f)
		{
			return;
		}
		float num2 = (float)dmg * num;
		if ((int)num2 <= 0 || Main.player[Main.myPlayer].lifeSteal <= 0f)
		{
			return;
		}
		Main.player[Main.myPlayer].lifeSteal -= num2;
		if (!magic)
		{
			return;
		}
		float num3 = 0f;
		int num4 = owner;
		for (int i = 0; i < 255; i++)
		{
			if (Main.player[i].active && !Main.player[i].dead && ((!Main.player[owner].hostile && !Main.player[i].hostile) || Main.player[owner].team == Main.player[i].team) && Distance(Main.player[i].Center) <= 3000f)
			{
				int num5 = Main.player[i].statLifeMax2 - Main.player[i].statLife;
				if ((float)num5 > num3)
				{
					num3 = num5;
					num4 = i;
				}
			}
		}
		NewProjectile(GetProjectileSource_OnHit(victim, 15), Position.X, Position.Y, 0f, 0f, 298, 0, 0f, owner, num4, num2);
	}

	public void vampireHeal(int dmg, Vector2 Position, Entity victim)
	{
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		float num = (float)dmg * 0.075f;
		if ((int)num != 0 && !(Main.player[Main.myPlayer].lifeSteal <= 0f))
		{
			Main.player[Main.myPlayer].lifeSteal -= num;
			int num2 = owner;
			NewProjectile(GetProjectileSource_OnHit(victim, 18), Position.X, Position.Y, 0f, 0f, 305, 0, 0f, owner, num2, num);
		}
	}

	public void StatusPlayer(int i)
	{
		if (Main.player[i].creativeGodMode)
		{
			return;
		}
		if (type == 119)
		{
			Main.player[i].AddBuff(324, 240);
		}
		if (type == 359)
		{
			Main.player[i].AddBuff(324, 420);
		}
		if (type == 472)
		{
			Main.player[i].AddBuff(149, Main.rand.Next(30, 150));
		}
		if (type == 961)
		{
			Main.player[i].AddBuff(47, 20);
		}
		if (type == 467)
		{
			Main.player[i].AddBuff(24, Main.rand.Next(30, 150));
		}
		if (type == 581)
		{
			if (Main.expertMode)
			{
				Main.player[i].AddBuff(164, Main.rand.Next(300, 540));
			}
			else if (Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(164, Main.rand.Next(360, 720));
			}
		}
		if (type == 687)
		{
			Main.player[i].AddBuff(24, 60 * Main.rand.Next(7, 11));
		}
		if (type == 258 && Main.rand.Next(2) == 0)
		{
			Main.player[i].AddBuff(24, 60 * Main.rand.Next(5, 8));
		}
		if (type == 572 && Main.rand.Next(3) != 0)
		{
			Main.player[i].AddBuff(20, Main.rand.Next(120, 240));
		}
		if (type == 276)
		{
			if (Main.expertMode)
			{
				Main.player[i].AddBuff(20, Main.rand.Next(120, 540));
			}
			else if (Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(20, Main.rand.Next(180, 420));
			}
		}
		if (type == 436 && Main.rand.Next(5) >= 2)
		{
			Main.player[i].AddBuff(31, 300);
		}
		if (type == 435 && Main.rand.Next(3) != 0)
		{
			Main.player[i].AddBuff(144, 300);
		}
		if (type == 682)
		{
			Main.player[i].AddBuff(196, 300);
		}
		if (type == 437)
		{
			Main.player[i].AddBuff(144, 60 * Main.rand.Next(4, 9));
		}
		if (type == 348)
		{
			if (Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(46, 600);
			}
			else
			{
				Main.player[i].AddBuff(46, 300);
			}
			if (Main.rand.Next(3) != 0)
			{
				if (Main.rand.Next(16) == 0)
				{
					Main.player[i].AddBuff(47, 60);
				}
				else if (Main.rand.Next(12) == 0)
				{
					Main.player[i].AddBuff(47, 40);
				}
				else if (Main.rand.Next(8) == 0)
				{
					Main.player[i].AddBuff(47, 20);
				}
			}
		}
		if (type == 349)
		{
			if (Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(46, 600);
			}
			else if (Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(46, 300);
			}
		}
		if (type >= 399 && type <= 402 && !hostile)
		{
			Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7));
		}
		if (type == 55 || type == 719)
		{
			if (Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(20, 600);
			}
			else if (Main.expertMode)
			{
				Main.player[i].AddBuff(20, Main.rand.Next(60, 300));
			}
		}
		if (type == 44 && Main.rand.Next(3) == 0)
		{
			Main.player[i].AddBuff(22, 900);
		}
		if (type == 293)
		{
			Main.player[i].AddBuff(80, 60 * Main.rand.Next(2, 7));
		}
		if (type == 299)
		{
			Main.player[i].AddBuff(23, 240);
		}
		if (type == 82 && Main.rand.Next(3) == 0)
		{
			Main.player[i].AddBuff(24, 420);
		}
		if (type == 285 && !hostile)
		{
			if (Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(31, 180);
			}
			else
			{
				Main.player[i].AddBuff(31, 60);
			}
		}
		if (type == 96 || type == 101)
		{
			if (Main.rand.Next(6) == 0)
			{
				Main.player[i].AddBuff(39, 180);
			}
			else if (Main.rand.Next(4) == 0)
			{
				Main.player[i].AddBuff(39, 180);
			}
			else if (Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(39, 120);
			}
		}
		else if (type == 288)
		{
			Main.player[i].AddBuff(69, 900);
		}
		else if (type == 253 && !hostile)
		{
			Main.player[i].AddBuff(324, 600);
		}
		if (type == 291 || type == 292)
		{
			Main.player[i].AddBuff(24, 60 * Main.rand.Next(8, 16));
		}
		if (type == 98)
		{
			Main.player[i].AddBuff(20, 600);
		}
		if (type == 184)
		{
			Main.player[i].AddBuff(20, 900);
		}
		if (type == 980)
		{
			Main.player[i].AddBuff(70, 300);
		}
		if (type == 290)
		{
			Main.player[i].AddBuff(32, 60 * Main.rand.Next(5, 16));
		}
		if (type == 174)
		{
			Main.player[i].AddBuff(46, 1200);
			if (!Main.player[i].frozen && Main.rand.Next(20) == 0)
			{
				Main.player[i].AddBuff(47, 90);
			}
			else if (!Main.player[i].frozen && Main.expertMode && Main.rand.Next(20) == 0)
			{
				Main.player[i].AddBuff(47, 60);
			}
		}
		if (type == 257)
		{
			Main.player[i].AddBuff(46, 2700);
			if (!Main.player[i].frozen && Main.rand.Next(5) == 0)
			{
				Main.player[i].AddBuff(47, 60);
			}
		}
		if (type == 177)
		{
			Main.player[i].AddBuff(46, 1500);
			if (!Main.player[i].frozen && Main.rand.Next(10) == 0)
			{
				Main.player[i].AddBuff(47, Main.rand.Next(30, 120));
			}
		}
		if (type == 128 && Main.rand.Next(3) == 0)
		{
			Main.player[i].AddBuff(44, 360);
		}
		if (type == 176)
		{
			if (Main.rand.Next(4) == 0)
			{
				Main.player[i].AddBuff(20, 1200);
			}
			else if (Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(20, 300);
			}
		}
	}

	public bool CanHitWithMeleeWeapon(Entity ent)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0160: Unknown result type (might be due to invalid IL or missing references)
		//IL_0165: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0187: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dc: Unknown result type (might be due to invalid IL or missing references)
		if (Distance(ent.Center) > ownerHitCheckDistance)
		{
			return false;
		}
		if (!Collision.CanHit(Main.player[owner].position, Main.player[owner].width, Main.player[owner].height, ent.position, ent.width, ent.height) && !Collision.CanHitLine(Main.player[owner].Center + new Vector2((float)(Main.player[owner].direction * Main.player[owner].width / 2), Main.player[owner].gravDir * (float)(-Main.player[owner].height) / 3f), 0, 0, ent.Center + new Vector2(0f, (float)(-ent.height / 3)), 0, 0) && !Collision.CanHitLine(Main.player[owner].Center + new Vector2((float)(Main.player[owner].direction * Main.player[owner].width / 2), Main.player[owner].gravDir * (float)(-Main.player[owner].height) / 3f), 0, 0, ent.Center, 0, 0))
		{
			return Collision.CanHitLine(Main.player[owner].Center + new Vector2((float)(Main.player[owner].direction * Main.player[owner].width / 2), 0f), 0, 0, ent.Center + new Vector2(0f, (float)(ent.height / 3)), 0, 0);
		}
		return true;
	}

	public bool CanHitWithOwnBody(Entity ent)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_0116: Unknown result type (might be due to invalid IL or missing references)
		//IL_0151: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_016e: Unknown result type (might be due to invalid IL or missing references)
		//IL_017f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0184: Unknown result type (might be due to invalid IL or missing references)
		//IL_0189: Unknown result type (might be due to invalid IL or missing references)
		//IL_0217: Unknown result type (might be due to invalid IL or missing references)
		//IL_021a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0192: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0203: Unknown result type (might be due to invalid IL or missing references)
		//IL_020f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0214: Unknown result type (might be due to invalid IL or missing references)
		if (Distance(ent.Center) > ownerHitCheckDistance)
		{
			return false;
		}
		bool flag = Collision.CanHit(base.position, width, height, ent.position, ent.width, ent.height) || Collision.CanHitLine(base.Center + new Vector2((float)(direction * width / 2), (float)(-height / 3)), 0, 0, ent.Center + new Vector2(0f, (float)(-ent.height / 3)), 0, 0) || Collision.CanHitLine(base.Center + new Vector2((float)(direction * width / 2), (float)(-height / 3)), 0, 0, ent.Center, 0, 0) || Collision.CanHitLine(base.Center + new Vector2((float)(direction * width / 2), 0f), 0, 0, ent.Center + new Vector2(0f, (float)(ent.height / 3)), 0, 0);
		float num = ProjectileID.Sets.ExtendedCanHitCheckRange[type];
		if (num != 0f)
		{
			if (flag)
			{
				return flag;
			}
			GenSearch genSearch = ProjectileID.Sets.ExtendedCanHitCheckSearch[type];
			Vector2 position = base.Top + new Vector2(0f, 0f - num);
			Vector2 position2 = ent.Top + new Vector2(0f, 0f - num);
			if (genSearch != null)
			{
				if (WorldUtils.Find(base.Top.ToTileCoordinates(), Searches.Chain(genSearch, _cachedConditions_notNull, _cachedConditions_solid), out var result))
				{
					position = result.ToWorldCoordinates();
				}
				if (WorldUtils.Find(ent.Top.ToTileCoordinates(), Searches.Chain(genSearch, _cachedConditions_notNull, _cachedConditions_solid), out result))
				{
					position2 = result.ToWorldCoordinates();
				}
			}
			flag |= Collision.CanHitLine(position, 0, 0, position2, 0, 0);
		}
		return flag;
	}

	public void Damage()
	{
		//IL_06c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_072c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0702: Unknown result type (might be due to invalid IL or missing references)
		//IL_4df2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c81: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ce2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ce7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ce9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d05: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f34: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fab: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4881: Unknown result type (might be due to invalid IL or missing references)
		//IL_4884: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0baa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0baf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ad3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4adf: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ae9: Unknown result type (might be due to invalid IL or missing references)
		//IL_477e: Unknown result type (might be due to invalid IL or missing references)
		//IL_478b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4790: Unknown result type (might be due to invalid IL or missing references)
		//IL_4795: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b27: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b33: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aa6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ab0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e50: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e59: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e00: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e05: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e43: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e44: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f28: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1350: Unknown result type (might be due to invalid IL or missing references)
		//IL_1318: Unknown result type (might be due to invalid IL or missing references)
		//IL_1325: Unknown result type (might be due to invalid IL or missing references)
		//IL_132a: Unknown result type (might be due to invalid IL or missing references)
		//IL_132f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1075: Unknown result type (might be due to invalid IL or missing references)
		//IL_107f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1084: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fe8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fed: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ff2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1000: Unknown result type (might be due to invalid IL or missing references)
		//IL_1019: Unknown result type (might be due to invalid IL or missing references)
		//IL_101b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1022: Unknown result type (might be due to invalid IL or missing references)
		//IL_1028: Unknown result type (might be due to invalid IL or missing references)
		//IL_103b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1040: Unknown result type (might be due to invalid IL or missing references)
		//IL_1045: Unknown result type (might be due to invalid IL or missing references)
		//IL_1053: Unknown result type (might be due to invalid IL or missing references)
		//IL_106c: Unknown result type (might be due to invalid IL or missing references)
		//IL_106e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1160: Unknown result type (might be due to invalid IL or missing references)
		//IL_1165: Unknown result type (might be due to invalid IL or missing references)
		//IL_11bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_118e: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1203: Unknown result type (might be due to invalid IL or missing references)
		//IL_1205: Unknown result type (might be due to invalid IL or missing references)
		//IL_125e: Unknown result type (might be due to invalid IL or missing references)
		//IL_127a: Unknown result type (might be due to invalid IL or missing references)
		//IL_127f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c06: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c10: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c91: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c96: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d72: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d77: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a34: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a39: Unknown result type (might be due to invalid IL or missing references)
		//IL_1af2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1af7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1efb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f01: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f06: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f10: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f15: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_22f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2303: Unknown result type (might be due to invalid IL or missing references)
		//IL_220e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2211: Unknown result type (might be due to invalid IL or missing references)
		//IL_221b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2220: Unknown result type (might be due to invalid IL or missing references)
		//IL_2225: Unknown result type (might be due to invalid IL or missing references)
		//IL_222e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2245: Unknown result type (might be due to invalid IL or missing references)
		//IL_224a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2267: Unknown result type (might be due to invalid IL or missing references)
		//IL_2272: Unknown result type (might be due to invalid IL or missing references)
		//IL_227c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2283: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e63: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e68: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e77: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e82: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e87: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e91: Unknown result type (might be due to invalid IL or missing references)
		//IL_237d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2383: Unknown result type (might be due to invalid IL or missing references)
		//IL_2388: Unknown result type (might be due to invalid IL or missing references)
		//IL_2392: Unknown result type (might be due to invalid IL or missing references)
		//IL_2397: Unknown result type (might be due to invalid IL or missing references)
		//IL_203f: Unknown result type (might be due to invalid IL or missing references)
		//IL_204a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2511: Unknown result type (might be due to invalid IL or missing references)
		//IL_2529: Unknown result type (might be due to invalid IL or missing references)
		//IL_253f: Unknown result type (might be due to invalid IL or missing references)
		//IL_265b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2678: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_26fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2702: Unknown result type (might be due to invalid IL or missing references)
		//IL_256e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2575: Unknown result type (might be due to invalid IL or missing references)
		//IL_257a: Unknown result type (might be due to invalid IL or missing references)
		//IL_257f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2591: Unknown result type (might be due to invalid IL or missing references)
		//IL_259b: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_25ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_25b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_25b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_25ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_25dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_25f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2953: Unknown result type (might be due to invalid IL or missing references)
		//IL_2959: Unknown result type (might be due to invalid IL or missing references)
		//IL_295e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2963: Unknown result type (might be due to invalid IL or missing references)
		//IL_296c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2970: Unknown result type (might be due to invalid IL or missing references)
		//IL_2975: Unknown result type (might be due to invalid IL or missing references)
		//IL_2978: Unknown result type (might be due to invalid IL or missing references)
		//IL_297a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2984: Unknown result type (might be due to invalid IL or missing references)
		//IL_2989: Unknown result type (might be due to invalid IL or missing references)
		//IL_304f: Unknown result type (might be due to invalid IL or missing references)
		//IL_305b: Unknown result type (might be due to invalid IL or missing references)
		//IL_30b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_30be: Unknown result type (might be due to invalid IL or missing references)
		//IL_30eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_30f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ea4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ea9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eae: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ec5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ec9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ece: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e17: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e21: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b10: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_34fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_3501: Unknown result type (might be due to invalid IL or missing references)
		//IL_3506: Unknown result type (might be due to invalid IL or missing references)
		//IL_350b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3510: Unknown result type (might be due to invalid IL or missing references)
		//IL_351a: Unknown result type (might be due to invalid IL or missing references)
		//IL_351f: Unknown result type (might be due to invalid IL or missing references)
		//IL_353a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3545: Unknown result type (might be due to invalid IL or missing references)
		//IL_354f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3556: Unknown result type (might be due to invalid IL or missing references)
		//IL_35cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_35d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_35e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3662: Unknown result type (might be due to invalid IL or missing references)
		//IL_366e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3678: Unknown result type (might be due to invalid IL or missing references)
		//IL_3628: Unknown result type (might be due to invalid IL or missing references)
		//IL_3634: Unknown result type (might be due to invalid IL or missing references)
		//IL_363e: Unknown result type (might be due to invalid IL or missing references)
		//IL_38b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_38ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_38de: Unknown result type (might be due to invalid IL or missing references)
		//IL_38e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_38e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_38ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_38f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_38f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_38fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_3902: Unknown result type (might be due to invalid IL or missing references)
		//IL_391a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3921: Unknown result type (might be due to invalid IL or missing references)
		//IL_3928: Unknown result type (might be due to invalid IL or missing references)
		//IL_392f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3961: Unknown result type (might be due to invalid IL or missing references)
		//IL_3968: Unknown result type (might be due to invalid IL or missing references)
		//IL_396f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3976: Unknown result type (might be due to invalid IL or missing references)
		//IL_39a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_39af: Unknown result type (might be due to invalid IL or missing references)
		//IL_39b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_39bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a90: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d17: Unknown result type (might be due to invalid IL or missing references)
		//IL_4271: Unknown result type (might be due to invalid IL or missing references)
		//IL_427e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4283: Unknown result type (might be due to invalid IL or missing references)
		//IL_4288: Unknown result type (might be due to invalid IL or missing references)
		//IL_4586: Unknown result type (might be due to invalid IL or missing references)
		//IL_4605: Unknown result type (might be due to invalid IL or missing references)
		//IL_460a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4612: Unknown result type (might be due to invalid IL or missing references)
		//IL_4617: Unknown result type (might be due to invalid IL or missing references)
		//IL_46b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_46c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_46c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_46cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_46d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_46ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_46f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_46f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4717: Unknown result type (might be due to invalid IL or missing references)
		//IL_4732: Unknown result type (might be due to invalid IL or missing references)
		//IL_4737: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fe8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ff5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ffa: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fff: Unknown result type (might be due to invalid IL or missing references)
		//IL_40fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_410b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4110: Unknown result type (might be due to invalid IL or missing references)
		//IL_4115: Unknown result type (might be due to invalid IL or missing references)
		//IL_417e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4183: Unknown result type (might be due to invalid IL or missing references)
		//IL_4188: Unknown result type (might be due to invalid IL or missing references)
		//IL_418d: Unknown result type (might be due to invalid IL or missing references)
		bool vanillaCanDamage = true;
		if (type == 18 || type == 72 || type == 86 || type == 87 || aiStyle == 31 || aiStyle == 32 || type == 226 || type == 378 || type == 613 || type == 650 || type == 882 || type == 888 || type == 895 || type == 896 || (type == 434 && localAI[0] != 0f) || type == 439 || type == 444 || (type == 451 && ((int)(ai[0] - 1f) / penetrate == 0 || ai[1] < 5f) && ai[0] != 0f) || type == 500 || type == 653 || type == 1018 || type == 460 || type == 633 || type == 600 || type == 601 || type == 602 || type == 535 || (type == 631 && localAI[1] == 0f) || (type == 537 && localAI[0] <= 30f) || type == 651 || (type == 188 && localAI[0] < 5f) || (aiStyle == 137 && ai[0] != 0f) || aiStyle == 138 || (type == 261 && ((Vector2)(ref velocity)).Length() < 1.5f) || (type == 818 && ai[0] < 1f) || type == 831 || type == 970 || (type == 833 && ai[0] == 4f) || (type == 834 && ai[0] == 4f) || (type == 835 && ai[0] == 4f) || (type == 281 && ai[0] == -3f) || ((type == 598 || type == 636 || type == 614 || type == 971 || type == 975) && ai[0] == 1f) || (type == 923 && localAI[0] <= 60f) || (type == 919 && localAI[0] <= 60f) || (aiStyle == 15 && ai[0] == 0f && localAI[1] <= 12f) || type == 861 || (type >= 511 && type <= 513 && ai[1] >= 1f) || type == 1007 || (aiStyle == 93 && ai[0] != 0f && ai[0] != 2f) || (aiStyle == 10 && localAI[1] == -1f) || (type == 85 && localAI[0] >= 54f) || (Main.projPet[type] && type != 266 && type != 407 && type != 317 && (type != 388 || ai[0] != 2f) && (type < 390 || type > 392) && (type < 393 || type > 395) && (type != 533 || !(ai[0] >= 6f) || !(ai[0] <= 8f)) && (type < 625 || type > 628) && (type != 755 || ai[0] == 0f) && (type != 946 || ai[0] == 0f) && type != 758 && type != 951 && type != 963 && (type != 759 || frame == Main.projFrames[type] - 1) && type != 833 && type != 834 && type != 835 && type != 864 && (type != 623 || ai[0] != 2f)))
		{
			vanillaCanDamage = false;
		}
		if (Main.projPet[type] && ProjectileLoader.MinionContactDamage(this))
		{
			vanillaCanDamage = true;
		}
		if (!(ProjectileLoader.CanDamage(this) ?? vanillaCanDamage))
		{
			return;
		}
		Rectangle rectangle = Damage_GetHitbox();
		if (friendly && Main.getGoodWorld && aiStyle == 16 && Main.netMode == 1 && owner != Main.myPlayer && !npcProj)
		{
			BombsHurtPlayers(rectangle, Main.myPlayer);
			return;
		}
		if (friendly && owner == Main.myPlayer && !npcProj)
		{
			BombsHurtPlayers(rectangle, owner);
			if (!minion)
			{
				CutTiles();
			}
		}
		if (owner == Main.myPlayer)
		{
			float num = 1f;
			if (ProjectileID.Sets.IsARocketThatDealsDoubleDamageToPrimaryEnemy[type] && timeLeft > 3)
			{
				num *= 2f;
			}
			if (ProjectileID.Sets.IsAMineThatDealsTripleDamageWhenStationary[type] && ((Vector2)(ref velocity)).Length() < 0.5f)
			{
				num *= 3f;
			}
			if (type == 34 && penetrate == 1)
			{
				num *= 1f;
			}
			if (aiStyle == 15 && ai[0] == 0f)
			{
				num *= 1.2f;
			}
			if (aiStyle == 15 && (ai[0] == 1f || ai[0] == 2f))
			{
				num *= 2f;
			}
			if (type == 877 || type == 879 || type == 878)
			{
				num = 0.1f + ((Vector2)(ref Main.player[owner].velocity)).Length() / 7f * 0.9f;
			}
			if (type == 968)
			{
				num = 1f;
				switch ((int)ai[1])
				{
				case 0:
					num = 1.5f;
					break;
				case 1:
					num = 1f;
					break;
				case 2:
					num = 1.5f;
					break;
				case 3:
					num = 0.1f;
					break;
				case 4:
					num = 1f;
					break;
				case 5:
					num = 1f;
					break;
				case 6:
					num = 1f;
					break;
				case 7:
					num = 0.25f;
					break;
				case 8:
					num = 1f;
					break;
				case 9:
					num = 0.75f;
					break;
				case 10:
					num = 0.5f;
					break;
				case 11:
					num = 0.5f;
					break;
				case 12:
					num = 0.5f;
					break;
				case 13:
					num = 0.5f;
					break;
				case 14:
					num = 0.5f;
					break;
				case 15:
					num = 0.5f;
					break;
				case 16:
					num = 0.5f;
					break;
				case 17:
					num = 1.5f;
					break;
				case 18:
					num = 1.6f;
					break;
				case 19:
					num = 1.8f;
					break;
				case 20:
					num = 1.9f;
					break;
				case 21:
					num = 1.7f;
					break;
				case 22:
					num = 2f;
					break;
				case 23:
					num = 1.9f;
					break;
				}
			}
			if (type == 533 && localAI[2] >= 40f)
			{
				num *= 0.5f;
			}
			bool flag = !npcProj && !trap;
			bool flag12 = usesOwnerMeleeHitCD && flag && owner < 255;
			bool flag22 = damage > 0;
			if (flag22)
			{
				int[] array = localNPCImmunity;
				if (type == 626 || type == 627 || type == 628)
				{
					Projectile projectile = FindStardustDragonHeadOfOwner();
					if (projectile != null)
					{
						array = projectile.localNPCImmunity;
					}
				}
				bool flag23 = true;
				Vector2 vector3 = default(Vector2);
				for (int i = 0; i < 200 && flag23; i++)
				{
					if (!Main.npc[i].active)
					{
						continue;
					}
					bool flag24 = (!usesLocalNPCImmunity && !usesIDStaticNPCImmunity) || (usesLocalNPCImmunity && array[i] == 0) || (usesIDStaticNPCImmunity && IsNPCIndexImmuneToProjectileType(type, i));
					if (flag12 && !Main.player[owner].CanHitNPCWithMeleeHit(i))
					{
						flag24 = false;
					}
					if (!((!Main.npc[i].dontTakeDamage || NPCID.Sets.ZappingJellyfish[Main.npc[i].type]) && flag24) || (Main.npc[i].aiStyle == 112 && Main.npc[i].ai[2] > 1f))
					{
						continue;
					}
					bool canHitFlag = false;
					bool? flag29 = CombinedHooks.CanHitNPCWithProj(this, Main.npc[i]);
					if (flag29.HasValue)
					{
						if (!flag29.GetValueOrDefault())
						{
							continue;
						}
						canHitFlag = true;
					}
					NPC obj = Main.npc[i];
					obj.position += Main.npc[i].netOffset;
					bool flag25 = !Main.npc[i].friendly;
					flag25 |= type == 318;
					flag25 |= Main.npc[i].type == 22 && owner < 255 && Main.player[owner].killGuide;
					flag25 |= Main.npc[i].type == 54 && owner < 255 && Main.player[owner].killClothier;
					if (owner < 255 && !Main.player[owner].CanNPCBeHitByPlayerOrPlayerProjectile(Main.npc[i], this))
					{
						flag25 = false;
					}
					bool flag26 = Main.npc[i].friendly && !Main.npc[i].dontTakeDamageFromHostiles;
					if (canHitFlag || (friendly && (flag25 || NPCID.Sets.ZappingJellyfish[Main.npc[i].type])) || (hostile && flag26))
					{
						bool flag27 = maxPenetrate == 1 && !usesLocalNPCImmunity && !usesIDStaticNPCImmunity;
						if (canHitFlag)
						{
							flag27 = true;
						}
						if (owner < 0 || Main.npc[i].immune[owner] == 0 || flag27)
						{
							bool flag28 = false;
							if (type == 11 && (Main.npc[i].type == 47 || Main.npc[i].type == 57))
							{
								flag28 = true;
							}
							else if (type == 31 && Main.npc[i].type == 69)
							{
								flag28 = true;
							}
							else if (Main.npc[i].trapImmune && trap)
							{
								flag28 = true;
							}
							else if (Main.npc[i].immortal && npcProj)
							{
								flag28 = true;
							}
							if (canHitFlag)
							{
								flag28 = false;
							}
							if (!flag28 && (Main.npc[i].noTileCollide || !ownerHitCheck || CanHitWithMeleeWeapon(Main.npc[i])))
							{
								bool flag2 = false;
								if (Main.npc[i].type == 414)
								{
									Rectangle rect = Main.npc[i].getRect();
									int num11 = 8;
									rect.X -= num11;
									rect.Y -= num11;
									rect.Width += num11 * 2;
									rect.Height += num11 * 2;
									flag2 = Colliding(rectangle, rect);
								}
								else
								{
									flag2 = Colliding(rectangle, Main.npc[i].getRect());
								}
								if (flag2)
								{
									NPC nPC = Main.npc[i];
									if (NPCID.Sets.ZappingJellyfish[nPC.type])
									{
										if ((nPC.dontTakeDamage || !Main.player[owner].CanNPCBeHitByPlayerOrPlayerProjectile(nPC, this)) && (aiStyle == 19 || aiStyle == 161 || aiStyle == 75 || aiStyle == 140 || ProjectileID.Sets.IsAWhip[type] || ProjectileID.Sets.AllowsContactDamageFromJellyfish[type]))
										{
											Main.player[owner].TakeDamageFromJellyfish(i);
										}
										if (nPC.dontTakeDamage || !flag25)
										{
											continue;
										}
									}
									if (type == 876)
									{
										Vector2 vector = position;
										if (Main.rand.Next(20) == 0)
										{
											tileCollide = false;
											position.X += Main.rand.Next(-256, 257);
										}
										if (Main.rand.Next(20) == 0)
										{
											tileCollide = false;
											position.Y += Main.rand.Next(-256, 257);
										}
										if (Main.rand.Next(2) == 0)
										{
											tileCollide = false;
										}
										if (Main.rand.Next(3) != 0)
										{
											vector = position;
											position -= velocity * (float)Main.rand.Next(0, 40);
											if (tileCollide && Collision.SolidTiles(position, width, height))
											{
												position = vector;
												position -= velocity * (float)Main.rand.Next(0, 40);
												if (tileCollide && Collision.SolidTiles(position, width, height))
												{
													position = vector;
												}
											}
										}
										velocity *= 0.6f;
										if (Main.rand.Next(7) == 0)
										{
											velocity.X += (float)Main.rand.Next(30, 31) * 0.01f;
										}
										if (Main.rand.Next(7) == 0)
										{
											velocity.Y += (float)Main.rand.Next(30, 31) * 0.01f;
										}
										damage = (int)((double)damage * 0.9);
										knockBack *= 0.9f;
										if (Main.rand.Next(20) == 0)
										{
											knockBack *= 10f;
										}
										if (Main.rand.Next(50) == 0)
										{
											damage *= 10;
										}
										if (Main.rand.Next(7) == 0)
										{
											vector = position;
											position.X += Main.rand.Next(-64, 65);
											if (tileCollide && Collision.SolidTiles(position, width, height))
											{
												position = vector;
											}
										}
										if (Main.rand.Next(7) == 0)
										{
											vector = position;
											position.Y += Main.rand.Next(-64, 65);
											if (tileCollide && Collision.SolidTiles(position, width, height))
											{
												position = vector;
											}
										}
										if (Main.rand.Next(14) == 0)
										{
											velocity.X *= -1f;
										}
										if (Main.rand.Next(14) == 0)
										{
											velocity.Y *= -1f;
										}
										if (Main.rand.Next(10) == 0)
										{
											velocity *= (float)Main.rand.Next(1, 201) * 0.0005f;
										}
										if (tileCollide)
										{
											ai[1] = 0f;
										}
										else
										{
											ai[1] = 1f;
										}
										netUpdate = true;
									}
									bool flag3 = nPC.reflectsProjectiles;
									if (Main.getGoodWorld && NPCID.Sets.ReflectStarShotsInForTheWorthy[Main.npc[i].type] && (type == 955 || type == 728))
									{
										flag3 = true;
									}
									if (flag3 && CanBeReflected() && nPC.CanReflectProjectile(this))
									{
										nPC.ReflectProjectile(this);
										NPC obj2 = Main.npc[i];
										obj2.position -= Main.npc[i].netOffset;
										return;
									}
									if (type == 604)
									{
										Main.player[owner].Counterweight(nPC.Center, damage, knockBack);
									}
									NPC.HitModifiers modifiers = nPC.GetIncomingStrikeModifiers(DamageType, direction);
									modifiers.ArmorPenetration += (float)ArmorPenetration;
									CombinedHooks.ModifyHitNPCWithProj(this, nPC, ref modifiers);
									float num21 = knockBack;
									bool flag4 = false;
									int num32 = (int)Main.player[owner].armorPenetration;
									float armorPenetrationPercent = 0f;
									bool flag5 = false;
									switch (type)
									{
									case 442:
										flag5 = true;
										break;
									case 410:
										if (Main.remixWorld)
										{
											num32 += 20;
										}
										break;
									case 864:
										num32 += 25;
										break;
									case 916:
										num32 += 50;
										break;
									case 917:
										num32 += 30;
										break;
									case 595:
										num32 += 20;
										break;
									case 493:
									case 494:
										num32 += 10;
										break;
									case 150:
									case 151:
									case 152:
										num32 += 10;
										break;
									case 189:
										num32 += 10;
										if (flag && Main.player[owner].strongBees)
										{
											modifiers.ArmorPenetration += 5f;
										}
										break;
									case 723:
									case 724:
									case 725:
									case 726:
										num32 += 25;
										break;
									case 532:
										num32 += 25;
										break;
									case 964:
										num32 += 20;
										break;
									case 969:
										num32 += 10;
										break;
									case 85:
										num32 += 15;
										break;
									case 877:
									case 878:
									case 879:
										num21 *= ((Vector2)(ref Main.player[owner].velocity)).Length() / 7f;
										break;
									case 963:
										num21 *= 0.25f;
										break;
									case 976:
										num32 += 20;
										break;
									case 974:
										num32 += 5;
										break;
									case 977:
										num32 += 5;
										break;
									}
									if (flag5)
									{
										Kill();
										return;
									}
									modifiers.SourceDamage *= num;
									float num43 = 1000f;
									int num46 = 0;
									if (type > 0 && ProjectileID.Sets.StardustDragon[type])
									{
										float value = (scale - 1f) * 100f;
										value = Utils.Clamp(value, 0f, 50f);
										num43 = (int)(num43 * (1f + value * 0.23f));
									}
									if (type > 0 && type < ProjectileID.Count && ProjectileID.Sets.StormTiger[type])
									{
										int num47 = Math.Max(0, Main.player[owner].ownedProjectileCounts[831] - 1);
										num43 = (int)(num43 * (1f + (float)num47 * 0.4f));
									}
									if (type == 818)
									{
										int num48 = Math.Max(0, Main.player[owner].ownedProjectileCounts[831] - 1);
										num43 = (int)(num43 * (1.5f + (float)num48 * 0.4f));
									}
									if (type == 963)
									{
										int num49 = Math.Max(0, Main.player[owner].ownedProjectileCounts[970] - 1);
										int num2 = 3 + num49 / 2;
										if (CountEnemiesWhoAreImmuneToMeRightNow(num2) >= num2)
										{
											return;
										}
										float num3 = 0.55f;
										if (Main.hardMode)
										{
											num3 = 1.3f;
										}
										num43 = (int)(num43 * (1f + (float)num49 * num3));
									}
									if (flag && type == 189 && Main.player[owner].strongBees)
									{
										modifiers.SourceDamage.Base += 5f;
									}
									if (flag)
									{
										if (DamageType.UseStandardCritCalcs && Main.rand.Next(100) < CritChance)
										{
											flag4 = true;
										}
										if ((uint)(type - 688) <= 2u)
										{
											if (Main.player[owner].setMonkT3)
											{
												if (Main.rand.Next(4) == 0)
												{
													flag4 = true;
												}
											}
											else if (Main.player[owner].setMonkT2 && Main.rand.Next(6) == 0)
											{
												flag4 = true;
											}
										}
									}
									modifiers.SourceDamage *= num43 / 1000f;
									num43 = modifiers.SourceDamage.ApplyTo(damage);
									float num4 = ProjectileID.Sets.SummonTagDamageMultiplier[type];
									if (flag && (minion || ProjectileID.Sets.MinionShot[type] || sentry || ProjectileID.Sets.SentryShot[type]))
									{
										bool flag6 = false;
										bool flag7 = false;
										bool flag8 = false;
										bool flag9 = false;
										bool flag10 = false;
										bool flag11 = false;
										bool flag13 = false;
										bool flag14 = false;
										bool flag15 = false;
										for (int j = 0; j < NPC.maxBuffs; j++)
										{
											if (nPC.buffTime[j] >= 1)
											{
												switch (nPC.buffType[j])
												{
												case 307:
													flag6 = true;
													break;
												case 309:
													flag7 = true;
													break;
												case 313:
													flag8 = true;
													break;
												case 310:
													flag9 = true;
													break;
												case 315:
													flag10 = true;
													break;
												case 326:
													flag11 = true;
													break;
												case 319:
													flag14 = true;
													break;
												case 316:
													flag15 = true;
													break;
												case 340:
													flag13 = true;
													break;
												}
											}
										}
										if (flag6)
										{
											num46 += 4;
										}
										if (flag10)
										{
											num46 += 6;
										}
										if (flag11)
										{
											num46 += 7;
										}
										if (flag13)
										{
											num46 += 6;
										}
										if (flag7)
										{
											num46 += 9;
										}
										if (flag14)
										{
											num46 += 8;
											if (Main.rand.Next(100) < 12)
											{
												flag4 = true;
											}
										}
										if (flag9)
										{
											int num5 = 10;
											num46 += num5;
											int num6 = NewProjectile(GetProjectileSource_FromThis(), nPC.Center, Vector2.Zero, 916, (int)((float)num5 * num4), 0f, owner);
											Main.projectile[num6].localNPCImmunity[i] = -1;
											EmitBlackLightningParticles(nPC);
										}
										if (flag15)
										{
											int num7 = 20;
											num46 += num7;
											if (Main.rand.Next(10) == 0)
											{
												flag4 = true;
											}
											ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.RainbowRodHit, new ParticleOrchestraSettings
											{
												PositionInWorld = base.Center
											});
										}
										if (flag8)
										{
											nPC.RequestBuffRemoval(313);
											int num8 = (int)(num43 * 1.75f);
											int num9 = NewProjectile(GetProjectileSource_FromThis(), nPC.Center, Vector2.Zero, 918, num8, 0f, owner);
											Main.projectile[num9].localNPCImmunity[i] = -1;
											modifiers.ScalingBonusDamage += 1.75f * num4;
										}
									}
									num46 = (int)((float)num46 * num4);
									modifiers.FlatBonusDamage += (float)num46;
									if (flag)
									{
										_ = Main.player[owner].luck;
									}
									float num10 = 1000f;
									if (type == 1002)
									{
										num10 /= 2f;
									}
									if (trap && NPCID.Sets.BelongsToInvasionOldOnesArmy[nPC.type])
									{
										num10 /= 2f;
									}
									if (type == 482 && (nPC.aiStyle == 6 || nPC.aiStyle == 37))
									{
										num10 /= 2f;
									}
									if (flag)
									{
										Vector2 positionInWorld = Main.rand.NextVector2FromRectangle(nPC.Hitbox);
										ParticleOrchestraSettings particleOrchestraSettings = default(ParticleOrchestraSettings);
										particleOrchestraSettings.PositionInWorld = positionInWorld;
										ParticleOrchestraSettings settings = particleOrchestraSettings;
										switch (type)
										{
										case 972:
											ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.NightsEdge, settings, owner);
											break;
										case 973:
											ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.TrueNightsEdge, settings, owner);
											break;
										case 984:
										case 985:
											settings.MovementVector = velocity;
											ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.TerraBlade, settings, owner);
											break;
										case 982:
											ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.Excalibur, settings, owner);
											break;
										case 983:
											ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.TrueExcalibur, settings, owner);
											break;
										}
									}
									if (type == 604)
									{
										friendly = false;
										ai[1] = 1000f;
									}
									if ((type == 400 || type == 401 || type == 402) && nPC.type >= 13 && nPC.type <= 15)
									{
										num10 = (int)((double)num10 * 0.65);
										if (penetrate > 1)
										{
											penetrate--;
										}
									}
									if (type == 710 && !WorldUtils.Find(base.Center.ToTileCoordinates(), Searches.Chain(new Searches.Down(12), _cachedConditions_notNull, _cachedConditions_solid), out var _))
									{
										num10 = (int)(num10 * 1.5f);
									}
									if (type == 504 || type == 954 || type == 979)
									{
										float num12 = (60f - ai[0]) / 2f;
										ai[0] += num12;
									}
									if (aiStyle == 3 && type != 301 && type != 866 && type != 902)
									{
										if (ai[0] == 0f)
										{
											if (type == 106)
											{
												LightDisc_Bounce(base.Center + velocity.SafeNormalize(Vector2.UnitX) * 8f, (-velocity).SafeNormalize(Vector2.UnitX));
											}
											velocity.X = 0f - velocity.X;
											velocity.Y = 0f - velocity.Y;
											netUpdate = true;
										}
										ai[0] = 1f;
									}
									else if (type == 951)
									{
										Vector2 vector2 = (nPC.Center - base.Center).SafeNormalize(Vector2.Zero);
										vector2.X += (-0.5f + Main.rand.NextFloat()) * 13f;
										vector2.Y = -5f;
										velocity.X = vector2.X;
										velocity.Y = vector2.Y;
										netUpdate = true;
									}
									else if (type == 582 || type == 902)
									{
										if (ai[0] != 0f)
										{
											direction *= -1;
										}
									}
									else if (type == 612 || type == 953 || type == 978)
									{
										direction = Main.player[owner].direction;
									}
									else if (type == 624)
									{
										float num13 = 1f;
										if (nPC.knockBackResist > 0f)
										{
											num13 = 1f / nPC.knockBackResist;
										}
										knockBack = 4f * num13;
										num21 = knockBack;
										if (nPC.Center.X < base.Center.X)
										{
											direction = 1;
										}
										else
										{
											direction = -1;
										}
									}
									else if (aiStyle == 16)
									{
										if (timeLeft > 3)
										{
											timeLeft = 3;
										}
										if (nPC.position.X + (float)(nPC.width / 2) < position.X + (float)(width / 2))
										{
											direction = -1;
										}
										else
										{
											direction = 1;
										}
									}
									else if (aiStyle == 68)
									{
										if (timeLeft > 3)
										{
											timeLeft = 3;
										}
										if (nPC.position.X + (float)(nPC.width / 2) < position.X + (float)(width / 2))
										{
											direction = -1;
										}
										else
										{
											direction = 1;
										}
									}
									else if (aiStyle == 50)
									{
										if (nPC.position.X + (float)(nPC.width / 2) < position.X + (float)(width / 2))
										{
											direction = -1;
										}
										else
										{
											direction = 1;
										}
									}
									else if (type == 908)
									{
										if (nPC.position.X + (float)(nPC.width / 2) < position.X + (float)(width / 2))
										{
											direction = -1;
										}
										else
										{
											direction = 1;
										}
									}
									if (type == 509)
									{
										int num14 = Main.rand.Next(2, 6);
										for (int k = 0; k < num14; k++)
										{
											((Vector2)(ref vector3))._002Ector((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
											vector3 += velocity * 3f;
											((Vector2)(ref vector3)).Normalize();
											vector3 *= (float)Main.rand.Next(35, 81) * 0.1f;
											int num15 = (int)((double)damage * 0.5);
											NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector3.X, vector3.Y, 504, num15, knockBack * 0.2f, owner);
										}
									}
									if ((type == 476 || type == 950) && !npcProj)
									{
										float x = Main.player[owner].Center.X;
										if (nPC.Center.X < x)
										{
											direction = -1;
										}
										else
										{
											direction = 1;
										}
									}
									if (type == 598 || type == 636 || type == 614 || type == 971 || type == 975)
									{
										ai[0] = 1f;
										ai[1] = i;
										velocity = (nPC.Center - base.Center) * 0.75f;
										netUpdate = true;
									}
									if (type >= 511 && type <= 513)
									{
										ai[1] += 1f;
										netUpdate = true;
									}
									if (type == 659)
									{
										timeLeft = 0;
									}
									if (type == 524)
									{
										netUpdate = true;
										ai[0] += 50f;
									}
									if ((type == 688 || type == 689 || type == 690) && nPC.type != 68 && nPC.defense < 999)
									{
										armorPenetrationPercent = 1f;
									}
									if (aiStyle == 39)
									{
										if (ai[1] == 0f)
										{
											ai[1] = i + 1;
											netUpdate = true;
										}
										if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) < position.X + (float)(width / 2))
										{
											direction = 1;
										}
										else
										{
											direction = -1;
										}
									}
									if (type == 41 && timeLeft > 1)
									{
										timeLeft = 1;
									}
									if (aiStyle == 99)
									{
										Main.player[owner].Counterweight(nPC.Center, damage, knockBack);
										if (nPC.Center.X < Main.player[owner].Center.X)
										{
											direction = -1;
										}
										else
										{
											direction = 1;
										}
										if (ai[0] >= 0f)
										{
											Vector2 vector4 = base.Center - nPC.Center;
											((Vector2)(ref vector4)).Normalize();
											float num16 = 16f;
											velocity *= -0.5f;
											velocity += vector4 * num16;
											netUpdate = true;
											localAI[0] += 20f;
											if (!Collision.CanHit(position, width, height, Main.player[owner].position, Main.player[owner].width, Main.player[owner].height))
											{
												localAI[0] += 40f;
												num10 = (int)((double)num10 * 0.75);
											}
										}
									}
									if (type == 856 && !Collision.CanHit(position, width, height, Main.player[owner].position, Main.player[owner].width, Main.player[owner].height))
									{
										num10 = (int)((double)num10 * 0.75);
									}
									if (aiStyle == 93)
									{
										if (ai[0] == 0f)
										{
											ai[1] = 0f;
											int num17 = -i - 1;
											ai[0] = num17;
											velocity = nPC.Center - base.Center;
										}
										num10 = ((ai[0] != 2f) ? ((int)((double)num10 * 0.15)) : ((int)((double)num10 * 1.35)));
									}
									if (flag)
									{
										int num18 = Item.NPCtoBanner(nPC.BannerID());
										if (num18 >= 0)
										{
											Main.player[Main.myPlayer].lastCreatureHit = num18;
										}
									}
									if (Main.netMode != 2 && flag)
									{
										Main.player[owner].ApplyBannerOffenseBuff(nPC, ref modifiers);
									}
									if (Main.expertMode)
									{
										if ((type == 30 || type == 397 || type == 517 || type == 28 || type == 37 || type == 516 || type == 29 || type == 470 || type == 637 || type == 108 || type == 281 || type == 588 || type == 519 || type == 773 || type == 183 || type == 181 || type == 566 || type == 1002) && nPC.type >= 13 && nPC.type <= 15)
										{
											num10 /= 5f;
										}
										if (type == 280 && ((nPC.type >= 134 && nPC.type <= 136) || nPC.type == 139))
										{
											num10 = (int)((double)num10 * 0.75);
										}
									}
									if (Main.netMode != 2 && nPC.type == 439 && type >= 0 && ProjectileID.Sets.CultistIsResistantTo[type])
									{
										num10 = (int)(num10 * 0.75f);
									}
									if (type == 497 && penetrate != 1)
									{
										ai[0] = 25f;
										float num19 = ((Vector2)(ref velocity)).Length();
										Vector2 vector5 = nPC.Center - base.Center;
										((Vector2)(ref vector5)).Normalize();
										vector5 *= num19;
										velocity = -vector5 * 0.9f;
										netUpdate = true;
									}
									if (type == 323 && (nPC.type == 159 || nPC.type == 158))
									{
										num10 *= 10f;
									}
									if (type == 981 && nPC.type == 104)
									{
										num10 *= 3f;
									}
									if (type == 261 && ((Vector2)(ref velocity)).Length() < 3.5f)
									{
										modifiers.SourceDamage /= 2f;
										num21 /= 2f;
									}
									if (flag && melee && Main.player[owner].parryDamageBuff && !ProjectileID.Sets.DontApplyParryDamageBuff[type])
									{
										modifiers.ScalingBonusDamage += 4f;
										Main.player[owner].parryDamageBuff = false;
										Main.player[owner].ClearBuff(198);
									}
									int? num26 = null;
									switch (type)
									{
									case 697:
									case 699:
									case 707:
									case 708:
									case 759:
										num26 = ((Main.player[owner].Center.X < nPC.Center.X) ? 1 : (-1));
										break;
									}
									if (aiStyle == 188 || aiStyle == 189 || aiStyle == 190 || aiStyle == 191)
									{
										num26 = ((Main.player[owner].Center.X < nPC.Center.X) ? 1 : (-1));
									}
									if (aiStyle == 15)
									{
										num26 = ((Main.player[owner].Center.X < nPC.Center.X) ? 1 : (-1));
										if (ai[0] == 0f)
										{
											num21 *= 0.35f;
										}
										if (ai[0] == 6f)
										{
											num21 *= 0.5f;
										}
									}
									modifiers.ScalingArmorPenetration += armorPenetrationPercent;
									modifiers.Knockback *= num21 / knockBack;
									modifiers.TargetDamageMultiplier *= num10 / 1000f;
									if (num26.HasValue)
									{
										modifiers.HitDirectionOverride = num26;
									}
									NPC.HitInfo strike = modifiers.ToHitInfo(damage, flag4, num21, damageVariation: true, flag ? Main.player[owner].luck : 0f);
									num26 = strike.HitDirection;
									if (type == 294)
									{
										damage = (int)((double)damage * 0.9);
									}
									if (type == 265)
									{
										damage = (int)((double)damage * 0.75);
									}
									if (type == 355)
									{
										damage = (int)((double)damage * 0.75);
									}
									if (type == 114)
									{
										damage = (int)((double)damage * 0.9);
									}
									if (type == 76 || type == 78 || type == 77)
									{
										damage = (int)((double)damage * 0.95);
									}
									if (type == 85)
									{
										damage = (int)((double)damage * 0.85);
									}
									if (type == 866)
									{
										damage = (int)((double)damage * 0.8);
									}
									if (type == 841)
									{
										damage = (int)((double)damage * 0.5);
									}
									if (type == 914)
									{
										damage = (int)((double)damage * 0.6);
									}
									if (type == 952)
									{
										damage = (int)((double)damage * 0.9);
									}
									if (type == 913)
									{
										damage = (int)((double)damage * 0.66);
									}
									if (type == 912)
									{
										damage = (int)((double)damage * 0.7);
									}
									if (type == 847)
									{
										damage = (int)((double)damage * 0.8);
									}
									if (type == 848)
									{
										damage = (int)((double)damage * 0.95);
									}
									if (type == 849)
									{
										damage = (int)((double)damage * 0.9);
									}
									if (type == 915)
									{
										damage = (int)((double)damage * 0.9);
									}
									if (type == 931)
									{
										damage = (int)((double)damage * 0.8);
									}
									if (type == 242)
									{
										damage = (int)((double)damage * 0.85);
									}
									if (type == 323)
									{
										damage = (int)((double)damage * 0.9);
									}
									if (type == 5)
									{
										damage = (int)((double)damage * 0.9);
									}
									if (type == 4)
									{
										damage = (int)((double)damage * 0.95);
									}
									if (type == 309)
									{
										damage = (int)((double)damage * 0.85);
									}
									if (type == 132)
									{
										damage = (int)((double)damage * 0.85);
									}
									if (type == 985)
									{
										damage = (int)((double)damage * 0.75);
									}
									if (type == 950)
									{
										damage = (int)((double)damage * 0.98);
									}
									if (type == 964)
									{
										damage = (int)((double)damage * 0.85);
									}
									if (type == 477 && penetrate > 1)
									{
										int[] array2 = new int[10];
										int num20 = 0;
										int num22 = 700;
										int num23 = 20;
										for (int l = 0; l < 200; l++)
										{
											if (l == i || !Main.npc[l].CanBeChasedBy(this))
											{
												continue;
											}
											Vector2 val = base.Center - Main.npc[l].Center;
											float num24 = ((Vector2)(ref val)).Length();
											if (num24 > (float)num23 && num24 < (float)num22 && Collision.CanHitLine(base.Center, 1, 1, Main.npc[l].Center, 1, 1))
											{
												array2[num20] = l;
												num20++;
												if (num20 >= 9)
												{
													break;
												}
											}
										}
										if (num20 > 0)
										{
											num20 = Main.rand.Next(num20);
											Vector2 vector6 = Main.npc[array2[num20]].Center - base.Center;
											float num25 = ((Vector2)(ref velocity)).Length();
											((Vector2)(ref vector6)).Normalize();
											velocity = vector6 * num25;
											netUpdate = true;
										}
									}
									StatusNPC(i);
									if (flag && nPC.life > 5)
									{
										TryDoingOnHitEffects(nPC);
									}
									if (ProjectileID.Sets.ImmediatelyUpdatesNPCBuffFlags[type])
									{
										nPC.UpdateNPC_BuffSetFlags(lowerBuffTime: false);
									}
									if (type == 317)
									{
										ai[1] = -1f;
										netUpdate = true;
									}
									NPCKillAttempt attempt = new NPCKillAttempt(nPC);
									int num27 = nPC.StrikeNPC(strike, fromNet: false, !flag);
									if (flag && attempt.DidNPCDie())
									{
										Main.player[owner].OnKillNPC(ref attempt, this);
									}
									if (flag && Main.player[owner].accDreamCatcher && !nPC.HideStrikeDamage)
									{
										Main.player[owner].addDPS(num27);
									}
									bool flag16 = !nPC.immortal;
									bool flag17 = num27 > 0 && nPC.lifeMax > 5 && friendly && !hostile && aiStyle != 59;
									bool flag18 = false;
									if (flag16 && active && timeLeft > 10 && nPC.active && nPC.type == 676 && CanBeReflected())
									{
										nPC.ReflectProjectile(this);
										penetrate++;
									}
									if (flag && flag16)
									{
										if (type == 997 && (!nPC.immortal || flag18) && !nPC.SpawnedFromStatue && !NPCID.Sets.CountsAsCritter[nPC.type])
										{
											Main.player[owner].HorsemansBlade_SpawnPumpkin(i, (int)((float)damage * 1f), knockBack);
										}
										if (type == 756 && penetrate == 1)
										{
											damage = 0;
											penetrate = -1;
											flag23 = false;
										}
										if ((flag18 || nPC.value > 0f) && Main.player[owner].hasLuckyCoin && Main.rand.Next(5) == 0)
										{
											int num28 = 71;
											if (Main.rand.Next(10) == 0)
											{
												num28 = 72;
											}
											if (Main.rand.Next(100) == 0)
											{
												num28 = 73;
											}
											int num29 = Item.NewItem(GetItemSource_OnHit(nPC, 2), (int)nPC.position.X, (int)nPC.position.Y, nPC.width, nPC.height, num28);
											Main.item[num29].stack = Main.rand.Next(1, 11);
											Main.item[num29].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
											Main.item[num29].velocity.X = (float)Main.rand.Next(10, 31) * 0.2f * (float)num26.Value;
											Main.item[num29].timeLeftInWhichTheItemCannotBeTakenByEnemies = 60;
											if (Main.netMode == 1)
											{
												NetMessage.SendData(148, -1, -1, null, num29);
											}
										}
										if (type == 999 && owner == Main.myPlayer && Main.rand.Next(3) == 0)
										{
											Player player = Main.player[owner];
											Vector2 vector7 = (base.Center - nPC.Center).SafeNormalize(Vector2.Zero) * 0.25f;
											int dmg = damage / 2;
											float kB = knockBack;
											int num30 = NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector7.X, vector7.Y, player.beeType(), player.beeDamage(dmg), player.beeKB(kB), owner);
											Main.projectile[num30].melee = true;
										}
										if (flag17)
										{
											if (type == 304 && !Main.player[owner].moonLeech)
											{
												vampireHeal(num27, new Vector2(nPC.Center.X, nPC.Center.Y), nPC);
											}
											if (nPC.canGhostHeal || flag18)
											{
												if (Main.player[owner].ghostHeal && !Main.player[owner].moonLeech)
												{
													ghostHeal(num27, new Vector2(nPC.Center.X, nPC.Center.Y), nPC);
												}
												if (Main.player[owner].ghostHurt)
												{
													ghostHurt(num27, new Vector2(nPC.Center.X, nPC.Center.Y), nPC);
												}
												if (magic && Main.player[owner].setNebula && Main.player[owner].nebulaCD == 0 && Main.rand.Next(3) == 0)
												{
													Main.player[owner].nebulaCD = 30;
													int num31 = Utils.SelectRandom<int>(Main.rand, 3453, 3454, 3455);
													int num33 = Item.NewItem(GetItemSource_OnHit(nPC, 1), (int)nPC.position.X, (int)nPC.position.Y, nPC.width, nPC.height, num31);
													Main.item[num33].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
													Main.item[num33].velocity.X = (float)Main.rand.Next(10, 31) * 0.2f * (float)num26.Value;
													if (Main.netMode == 1)
													{
														NetMessage.SendData(21, -1, -1, null, num33);
													}
												}
											}
											if (melee && Main.player[owner].beetleOffense && (!nPC.immortal || flag18))
											{
												if (Main.player[owner].beetleOrbs == 0)
												{
													Main.player[owner].beetleCounter += num27 * 3;
												}
												else if (Main.player[owner].beetleOrbs == 1)
												{
													Main.player[owner].beetleCounter += num27 * 2;
												}
												else
												{
													Main.player[owner].beetleCounter += num27;
												}
												Main.player[owner].beetleCountdown = 0;
											}
											if (arrow && type != 631 && Main.player[owner].phantasmTime > 0)
											{
												Vector2 source = Main.player[owner].position + Main.player[owner].Size * Utils.RandomVector2(Main.rand, 0f, 1f);
												Vector2 vector8 = nPC.DirectionFrom(source) * 6f;
												int num34 = (int)((float)damage * 0.3f);
												NewProjectile(GetProjectileSource_FromThis(), source.X, source.Y, vector8.X, vector8.Y, 631, num34, 0f, owner, i);
												NewProjectile(GetProjectileSource_FromThis(), source.X, source.Y, vector8.X, vector8.Y, 631, num34, 0f, owner, i, 15f);
												NewProjectile(GetProjectileSource_FromThis(), source.X, source.Y, vector8.X, vector8.Y, 631, num34, 0f, owner, i, 30f);
											}
											Player player2 = Main.player[owner];
											switch (type)
											{
											case 914:
												player2.AddBuff(314, 180);
												break;
											case 847:
												player2.AddBuff(308, 180);
												break;
											case 849:
												player2.AddBuff(311, 180);
												break;
											case 912:
											{
												int num35 = 15;
												if (!player2.coolWhipBuff)
												{
													NewProjectile(GetProjectileSource_FromThis(), nPC.Center, Vector2.Zero, 917, num35, 0f, owner);
													player2.coolWhipBuff = true;
												}
												player2.AddBuff(312, 180);
												break;
											}
											}
										}
									}
									if (flag && (melee || ProjectileID.Sets.IsAWhip[type]) && Main.player[owner].meleeEnchant == 7)
									{
										NewProjectile(GetProjectileSource_FromThis(), nPC.Center.X, nPC.Center.Y, nPC.velocity.X, nPC.velocity.Y, 289, 0, 0f, owner);
									}
									if (flag && type == 913)
									{
										localAI[0] = 1f;
									}
									if (Main.netMode != 0)
									{
										NetMessage.SendStrikeNPC(nPC, in strike);
									}
									if (type == 916)
									{
										EmitBlackLightningParticles(nPC);
									}
									if (type >= 390 && type <= 392)
									{
										localAI[1] = 20f;
									}
									if (usesIDStaticNPCImmunity)
									{
										if (penetrate != 1 || appliesImmunityTimeOnSingleHits)
										{
											nPC.immune[owner] = 0;
											perIDStaticNPCImmunity[type][i] = Main.GameUpdateCount + (uint)idStaticNPCHitCooldown;
										}
									}
									else if (type == 434)
									{
										numUpdates = 0;
									}
									else if (type == 598 || type == 636 || type == 614)
									{
										Point[] bufferForScan = _javelinsMax6;
										if (type == 636)
										{
											bufferForScan = _javelinsMax8;
										}
										if (type == 614)
										{
											bufferForScan = _javelinsMax10;
										}
										KillOldestJavelin(whoAmI, type, i, bufferForScan);
									}
									else if (type == 632)
									{
										nPC.immune[owner] = 5;
									}
									else if (type == 514)
									{
										nPC.immune[owner] = 1;
									}
									else if (type == 611)
									{
										if (localAI[1] <= 0f)
										{
											NewProjectile(GetProjectileSource_FromThis(), nPC.Center.X, nPC.Center.Y, 0f, 0f, 612, damage, 10f, owner, 0f, 0.85f + Main.rand.NextFloat() * 1.15f);
										}
										localAI[1] = 4f;
									}
									else if (type == 595 || type == 735)
									{
										nPC.immune[owner] = 5;
									}
									else if (type == 927)
									{
										nPC.immune[owner] = 4;
									}
									else if (type == 286)
									{
										nPC.immune[owner] = 5;
									}
									else if (type == 443)
									{
										nPC.immune[owner] = 8;
									}
									else if (type >= 424 && type <= 426)
									{
										nPC.immune[owner] = 5;
									}
									else if (type == 634 || type == 635)
									{
										nPC.immune[owner] = 5;
									}
									else if (type == 659)
									{
										nPC.immune[owner] = 5;
									}
									else if (type == 246)
									{
										nPC.immune[owner] = 7;
									}
									else if (type == 249)
									{
										nPC.immune[owner] = 7;
									}
									else if (type == 16)
									{
										nPC.immune[owner] = 8;
									}
									else if (type == 409)
									{
										nPC.immune[owner] = 6;
									}
									else if (type == 311)
									{
										nPC.immune[owner] = 7;
									}
									else if (type == 582 || type == 902)
									{
										nPC.immune[owner] = 7;
										if (ai[0] != 1f)
										{
											ai[0] = 1f;
											netUpdate = true;
										}
									}
									else
									{
										if (type == 451)
										{
											if (ai[0] == 0f)
											{
												ai[0] += penetrate;
											}
											else
											{
												ai[0] -= penetrate + 1;
											}
											ai[1] = 0f;
											netUpdate = true;
											NPC obj3 = Main.npc[i];
											obj3.position -= Main.npc[i].netOffset;
											break;
										}
										if (type == 864)
										{
											array[i] = 10;
											nPC.immune[owner] = 0;
											if (ai[0] > 0f)
											{
												ai[0] = -1f;
												ai[1] = 0f;
												netUpdate = true;
											}
										}
										else if (type == 661 || type == 856)
										{
											array[i] = 8;
											nPC.immune[owner] = 0;
										}
										else if (type == 866)
										{
											array[i] = -1;
											nPC.immune[owner] = 0;
											penetrate--;
											if (penetrate == 0)
											{
												penetrate = 1;
												damage = 0;
												ai[1] = -1f;
												netUpdate = true;
												NPC obj4 = Main.npc[i];
												obj4.position -= Main.npc[i].netOffset;
												break;
											}
											if (owner == Main.myPlayer)
											{
												int num36 = FindTargetWithLineOfSight();
												float num37 = ai[1];
												ai[1] = num36;
												if (ai[1] != num37)
												{
													netUpdate = true;
												}
												if (num36 != -1)
												{
													velocity = ((Vector2)(ref velocity)).Length() * DirectionTo(Main.npc[num36].Center);
												}
											}
										}
										else if (usesLocalNPCImmunity && localNPCHitCooldown != -2)
										{
											nPC.immune[owner] = 0;
											array[i] = localNPCHitCooldown;
										}
										else if (penetrate != 1 || appliesImmunityTimeOnSingleHits)
										{
											nPC.immune[owner] = 10;
										}
									}
									if (type == 710)
									{
										BetsySharpnel(i);
									}
									CombinedHooks.OnHitNPCWithProj(this, nPC, in strike, num27);
									if (penetrate > 0 && type != 317 && type != 866)
									{
										if (type == 357)
										{
											damage = (int)((double)damage * 0.8);
										}
										penetrate--;
										if (penetrate == 0)
										{
											NPC obj5 = Main.npc[i];
											obj5.position -= Main.npc[i].netOffset;
											if (stopsDealingDamageAfterPenetrateHits)
											{
												penetrate = -1;
												damage = 0;
											}
											flag23 = false;
										}
									}
									if (aiStyle == 7)
									{
										ai[0] = 1f;
										damage = 0;
										netUpdate = true;
									}
									else if (aiStyle == 13)
									{
										ai[0] = 1f;
										netUpdate = true;
									}
									else if (aiStyle == 69)
									{
										ai[0] = 1f;
										netUpdate = true;
									}
									else if (type == 607)
									{
										ai[0] = 1f;
										netUpdate = true;
										friendly = false;
									}
									else if (type == 638 || type == 639 || type == 640)
									{
										array[i] = -1;
										nPC.immune[owner] = 0;
										damage = (int)((double)damage * 0.96);
									}
									else if (type == 617)
									{
										array[i] = 8;
										nPC.immune[owner] = 0;
									}
									else if (type == 656)
									{
										array[i] = 8;
										nPC.immune[owner] = 0;
										localAI[0] += 1f;
									}
									else if (type == 618)
									{
										array[i] = 20;
										nPC.immune[owner] = 0;
									}
									else if (type == 642)
									{
										array[i] = 10;
										nPC.immune[owner] = 0;
									}
									else if (type == 857)
									{
										array[i] = 10;
										nPC.immune[owner] = 0;
									}
									else if (type == 611 || type == 612)
									{
										array[i] = 6;
										nPC.immune[owner] = 4;
									}
									else if (type == 645)
									{
										array[i] = -1;
										nPC.immune[owner] = 0;
										if (ai[1] != -1f)
										{
											ai[0] = 0f;
											ai[1] = -1f;
											netUpdate = true;
										}
									}
									numHits++;
									if (type == 697)
									{
										if (ai[0] >= 42f)
										{
											localAI[1] = 1f;
										}
									}
									else if (type == 699)
									{
										SummonMonkGhast();
									}
									else if (type == 706)
									{
										damage = (int)((float)damage * 0.95f);
									}
									else if (type == 728)
									{
										SummonSuperStarSlash(nPC.Center);
									}
									else if (type == 34)
									{
										if (ai[0] == -1f)
										{
											ai[1] = -1f;
											netUpdate = true;
										}
									}
									else if (type == 79)
									{
										if (ai[0] == -1f)
										{
											ai[1] = -1f;
											netUpdate = true;
										}
										ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.RainbowRodHit, new ParticleOrchestraSettings
										{
											PositionInWorld = nPC.Center,
											MovementVector = velocity
										});
									}
									else if (type == 931)
									{
										int num38 = FindTargetWithLineOfSight();
										if (num38 != -1)
										{
											ai[0] = num38;
											netUpdate = true;
										}
									}
									else if (aiStyle == 165)
									{
										if (nPC.active)
										{
											Main.player[owner].MinionAttackTargetNPC = i;
										}
									}
									else if (type == 623)
									{
										ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.StardustPunch, new ParticleOrchestraSettings
										{
											PositionInWorld = Vector2.Lerp(base.Center, nPC.Hitbox.ClosestPointInRect(base.Center), 0.5f) + new Vector2(0f, Main.rand.NextFloatDirection() * 10f),
											MovementVector = new Vector2((float)direction, Main.rand.NextFloatDirection() * 0.5f) * (3f + 3f * Main.rand.NextFloat())
										});
									}
									if (flag12)
									{
										Main.player[owner].SetMeleeHitCooldown(i, Main.player[owner].itemAnimation);
									}
								}
							}
						}
					}
					NPC obj6 = Main.npc[i];
					obj6.position -= Main.npc[i].netOffset;
				}
			}
			if (flag22 && Main.player[Main.myPlayer].hostile)
			{
				for (int m = 0; m < 255; m++)
				{
					if (m == owner)
					{
						continue;
					}
					Player player3 = Main.player[m];
					if (!player3.active || player3.dead || player3.immune || !player3.hostile || playerImmune[m] > 0 || (Main.player[Main.myPlayer].team != 0 && Main.player[Main.myPlayer].team == player3.team))
					{
						continue;
					}
					bool flag19 = !ownerHitCheck;
					if (ownerHitCheck)
					{
						flag19 |= CanHitWithMeleeWeapon(player3);
					}
					if (!flag19 || !Colliding(rectangle, player3.getRect()) || !CombinedHooks.CanHitPvpWithProj(this, player3))
					{
						continue;
					}
					if (aiStyle == 3)
					{
						if (ai[0] == 0f)
						{
							velocity.X = 0f - velocity.X;
							velocity.Y = 0f - velocity.Y;
							netUpdate = true;
						}
						ai[0] = 1f;
					}
					else if (aiStyle == 16)
					{
						if (timeLeft > 3)
						{
							timeLeft = 3;
						}
						if (player3.position.X + (float)(player3.width / 2) < position.X + (float)(width / 2))
						{
							direction = -1;
						}
						else
						{
							direction = 1;
						}
					}
					else if (aiStyle == 68)
					{
						if (timeLeft > 3)
						{
							timeLeft = 3;
						}
						if (player3.position.X + (float)(player3.width / 2) < position.X + (float)(width / 2))
						{
							direction = -1;
						}
						else
						{
							direction = 1;
						}
					}
					int playerIndex = owner;
					if (ProjectileID.Sets.IsAGravestone[type])
					{
						playerIndex = (int)ai[0];
					}
					PlayerDeathReason playerDeathReason = PlayerDeathReason.ByProjectile(playerIndex, whoAmI);
					if (type == 41 && timeLeft > 1)
					{
						timeLeft = 1;
					}
					bool flag20 = false;
					int num39 = Main.DamageVar((int)((float)damage * num), Main.player[owner].luck);
					bool dodgeable = IsDamageDodgable();
					if (!player3.immune)
					{
						StatusPvP(m);
					}
					TryDoingOnHitEffects(player3);
					int num40 = (int)player3.Hurt(playerDeathReason, num39, direction, pvp: true, quiet: false, flag20, -1, dodgeable);
					if (num40 > 0 && Main.player[owner].ghostHeal && friendly && !hostile)
					{
						ghostHeal(num40, new Vector2(player3.Center.X, player3.Center.Y), player3);
					}
					if (type == 304 && num40 > 0)
					{
						vampireHeal(num40, new Vector2(player3.Center.X, player3.Center.Y), player3);
					}
					if ((melee || ProjectileID.Sets.IsAWhip[type]) && Main.player[owner].meleeEnchant == 7)
					{
						NewProjectile(GetProjectileSource_FromThis(), player3.Center.X, player3.Center.Y, player3.velocity.X, player3.velocity.Y, 289, 0, 0f, owner);
					}
					if (Main.netMode != 0)
					{
						NetMessage.SendPlayerHurt(m, playerDeathReason, num39, direction, flag20, pvp: true, -1);
					}
					playerImmune[m] = 40;
					if (penetrate > 0)
					{
						penetrate--;
						if (penetrate == 0)
						{
							break;
						}
					}
					if (aiStyle == 7)
					{
						ai[0] = 1f;
						damage = 0;
						netUpdate = true;
					}
					else if (aiStyle == 13)
					{
						ai[0] = 1f;
						netUpdate = true;
					}
					else if (aiStyle == 69)
					{
						ai[0] = 1f;
						netUpdate = true;
					}
				}
			}
		}
		if (type == 10 && Main.netMode != 1)
		{
			for (int n = 0; n < 200; n++)
			{
				NPC nPC2 = Main.npc[n];
				if (!nPC2.active)
				{
					continue;
				}
				if (nPC2.type == 534)
				{
					if (((Rectangle)(ref rectangle)).Intersects(nPC2.Hitbox))
					{
						nPC2.Transform(441);
					}
				}
				else
				{
					if (nPC2.type != 687 || !((Rectangle)(ref rectangle)).Intersects(nPC2.Hitbox))
					{
						continue;
					}
					nPC2.Transform(683);
					Vector2 vector9 = nPC2.Center - new Vector2(20f);
					Utils.PoofOfSmoke(vector9);
					if (Main.netMode == 2)
					{
						NetMessage.SendData(106, -1, -1, null, (int)vector9.X, vector9.Y);
					}
					if (!NPC.unlockedSlimeYellowSpawn)
					{
						NPC.unlockedSlimeYellowSpawn = true;
						if (Main.netMode == 2)
						{
							NetMessage.SendData(7);
						}
					}
				}
			}
		}
		if ((type == 11 || type == 463) && Main.netMode != 1)
		{
			bool crimson = type == 463;
			Rectangle value2 = default(Rectangle);
			for (int num41 = 0; num41 < 200; num41++)
			{
				if (Main.npc[num41].active)
				{
					((Rectangle)(ref value2))._002Ector((int)Main.npc[num41].position.X, (int)Main.npc[num41].position.Y, Main.npc[num41].width, Main.npc[num41].height);
					if (((Rectangle)(ref rectangle)).Intersects(value2))
					{
						Main.npc[num41].AttemptToConvertNPCToEvil(crimson);
					}
				}
			}
		}
		if (Main.netMode == 2 || !hostile || Main.myPlayer >= 255 || damage <= 0)
		{
			return;
		}
		int num42 = -1;
		switch (type)
		{
		case 452:
		case 454:
		case 455:
		case 462:
			num42 = 1;
			break;
		case 871:
		case 872:
		case 873:
		case 874:
		case 919:
		case 923:
		case 924:
			num42 = 1;
			break;
		}
		int myPlayer = Main.myPlayer;
		bool flag21 = Main.player[myPlayer].active && !Main.player[myPlayer].dead && (!Main.player[myPlayer].immune || num42 != -1);
		if (flag21 && type == 281)
		{
			flag21 = ai[1] - 1f == (float)myPlayer;
		}
		if (Main.getGoodWorld && type == 281)
		{
			flag21 = true;
		}
		if (ModProjectile != null)
		{
			num42 = ModProjectile.CooldownSlot;
		}
		if (!flag21 || !Colliding(rectangle, Main.player[myPlayer].getRect()) || !CombinedHooks.CanBeHitByProjectile(Main.player[myPlayer], this))
		{
			return;
		}
		int num44 = direction;
		num44 = ((!(Main.player[myPlayer].position.X + (float)(Main.player[myPlayer].width / 2) < position.X + (float)(width / 2))) ? 1 : (-1));
		if (!Main.player[myPlayer].CanParryAgainst(Main.player[myPlayer].Hitbox, base.Hitbox, velocity))
		{
			int num45 = Main.DamageVar(damage, 0f - Main.player[owner].luck) * 2;
			if (type == 961)
			{
				if (penetrate == 1)
				{
					damage = 0;
					penetrate = -1;
				}
				else
				{
					damage = (int)((double)damage * 0.7);
				}
			}
			bool dodgeable2 = IsDamageDodgable();
			int playerIndex2 = -1;
			if (ProjectileID.Sets.IsAGravestone[type])
			{
				playerIndex2 = (int)ai[0];
			}
			if (Main.player[myPlayer].Hurt(PlayerDeathReason.ByProjectile(playerIndex2, whoAmI), num45, num44, pvp: false, quiet: false, Crit: false, num42, dodgeable2, ArmorPenetration) > 0.0 && !Main.player[myPlayer].dead)
			{
				StatusPlayer(myPlayer);
			}
			if (trap)
			{
				Main.player[myPlayer].trapDebuffSource = true;
				if (Main.player[myPlayer].dead)
				{
					AchievementsHelper.HandleSpecialEvent(Main.player[myPlayer], 4);
				}
			}
		}
		if (type == 435 || type == 682)
		{
			penetrate--;
		}
		if (type == 436)
		{
			penetrate--;
		}
		if (type == 681)
		{
			timeLeft = 0;
		}
		if (type == 437)
		{
			penetrate--;
		}
	}

	private Rectangle Damage_GetHitbox()
	{
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		Rectangle result = default(Rectangle);
		((Rectangle)(ref result))._002Ector((int)position.X, (int)position.Y, width, height);
		if (type == 101)
		{
			((Rectangle)(ref result)).Inflate(30, 30);
		}
		if (type == 85)
		{
			int num = (int)Utils.Remap(localAI[0], 0f, 72f, 10f, 40f);
			((Rectangle)(ref result)).Inflate(num, num);
		}
		if (type == 188)
		{
			((Rectangle)(ref result)).Inflate(20, 20);
		}
		if (aiStyle == 29)
		{
			((Rectangle)(ref result)).Inflate(4, 4);
		}
		if (type == 967)
		{
			((Rectangle)(ref result)).Inflate(10, 10);
		}
		ProjectileLoader.ModifyDamageHitbox(this, ref result);
		return result;
	}

	private void BombsHurtPlayers(Rectangle projRectangle, int j)
	{
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		if (aiStyle != 16 || ProjectileID.Sets.RocketsSkipDamageForPlayers[type] || (timeLeft > 1 && type != 108 && type != 164 && type != 1002) || !Main.player[j].active || Main.player[j].dead || Main.player[j].immune || (ownerHitCheck && !CanHitWithMeleeWeapon(Main.player[j])))
		{
			return;
		}
		Rectangle value = default(Rectangle);
		((Rectangle)(ref value))._002Ector((int)Main.player[j].position.X, (int)Main.player[j].position.Y, Main.player[j].width, Main.player[j].height);
		if (!((Rectangle)(ref projRectangle)).Intersects(value))
		{
			return;
		}
		if (Main.player[j].position.X + (float)(Main.player[j].width / 2) < position.X + (float)(width / 2))
		{
			direction = -1;
		}
		else
		{
			direction = 1;
		}
		int num = Main.DamageVar(damage, 0f - Main.player[j].luck);
		int playerIndex = owner;
		bool pvp = true;
		if (type == 108 || type == 1002)
		{
			playerIndex = -1;
			pvp = false;
		}
		if (ProjectileID.Sets.IsAGravestone[type])
		{
			playerIndex = (int)ai[0];
		}
		bool dodgeable = IsDamageDodgable();
		PlayerDeathReason damageSource = PlayerDeathReason.ByProjectile(playerIndex, whoAmI);
		if (Main.player[j].Hurt(damageSource, num, direction, pvp, quiet: false, Crit: false, -1, dodgeable, ArmorPenetration) > 0.0 && !Main.player[j].dead)
		{
			StatusPlayer(j);
		}
		if (trap)
		{
			Main.player[j].trapDebuffSource = true;
			if (Main.player[j].dead)
			{
				AchievementsHelper.HandleSpecialEvent(Main.player[j], 4);
			}
		}
	}

	public bool IsDamageDodgable()
	{
		int num = type;
		if (((uint)(num - 871) <= 3u || num == 919 || (uint)(num - 923) <= 1u) && damage == 9999)
		{
			return false;
		}
		return true;
	}

	public static void KillOldestJavelin(int protectedProjectileIndex, int projectileType, int targetNPCIndex, Point[] bufferForScan)
	{
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		int num = 0;
		for (int i = 0; i < 1000; i++)
		{
			if (i != protectedProjectileIndex && Main.projectile[i].active && Main.projectile[i].owner == Main.myPlayer && Main.projectile[i].type == projectileType && Main.projectile[i].ai[0] == 1f && Main.projectile[i].ai[1] == (float)targetNPCIndex)
			{
				bufferForScan[num++] = new Point(i, Main.projectile[i].timeLeft);
				if (num >= bufferForScan.Length)
				{
					break;
				}
			}
		}
		if (num < bufferForScan.Length)
		{
			return;
		}
		int num2 = 0;
		for (int j = 1; j < bufferForScan.Length; j++)
		{
			if (bufferForScan[j].Y < bufferForScan[num2].Y)
			{
				num2 = j;
			}
		}
		Main.projectile[bufferForScan[num2].X].Kill();
	}

	private int CountEnemiesWhoAreImmuneToMeRightNow(int cap)
	{
		int num = 0;
		for (int i = 0; i < localNPCImmunity.Length; i++)
		{
			if (localNPCImmunity[i] > 0)
			{
				num++;
				if (num >= cap)
				{
					break;
				}
			}
		}
		return num;
	}

	public static void EmitBlackLightningParticles(NPC targetNPC)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.BlackLightningHit, new ParticleOrchestraSettings
		{
			PositionInWorld = targetNPC.Center
		});
	}

	private void TryDoingOnHitEffects(Entity entity)
	{
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		switch (type)
		{
		case 221:
		case 227:
		case 614:
		case 729:
		case 908:
		case 977:
			return;
		}
		Main.player[owner].OnHit(entity.Center.X, entity.Center.Y, entity);
	}

	private void SummonSuperStarSlash(Vector2 target)
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		Vector2 v = Main.rand.NextVector2CircularEdge(200f, 200f);
		if (v.Y < 0f)
		{
			v.Y *= -1f;
		}
		v.Y += 100f;
		Vector2 vector = v.SafeNormalize(Vector2.UnitY) * 6f;
		NewProjectile(GetProjectileSource_FromThis(), target - vector * 20f, vector, 729, (int)((double)damage * 0.75), 0f, owner, 0f, target.Y);
	}

	private void SummonMonkGhast()
	{
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		//IL_0113: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_011d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		if (localAI[0] > 0f)
		{
			return;
		}
		localAI[0] = 1000f;
		List<NPC> list = new List<NPC>();
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = Main.npc[i];
			if (nPC.CanBeChasedBy(this) && Distance(nPC.Center) < 800f)
			{
				list.Add(nPC);
			}
		}
		Vector2 center = base.Center;
		Vector2 zero = Vector2.Zero;
		if (list.Count > 0)
		{
			NPC nPC2 = list[Main.rand.Next(list.Count)];
			center = nPC2.Center;
			zero = nPC2.velocity;
		}
		int num = Main.rand.Next(2) * 2 - 1;
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector((float)num * (4f + (float)Main.rand.Next(3)), 0f);
		Vector2 vector2 = center + new Vector2((float)(-num * 120), 0f);
		vector += (center + zero * 15f - vector2).SafeNormalize(Vector2.Zero) * 2f;
		NewProjectile(GetProjectileSource_FromThis(), vector2, vector, 700, damage, 0f, owner);
	}

	private void CutTiles()
	{
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_0176: Unknown result type (might be due to invalid IL or missing references)
		//IL_0180: Unknown result type (might be due to invalid IL or missing references)
		//IL_018b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0305: Unknown result type (might be due to invalid IL or missing references)
		//IL_030b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0311: Unknown result type (might be due to invalid IL or missing references)
		//IL_0316: Unknown result type (might be due to invalid IL or missing references)
		//IL_031c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0321: Unknown result type (might be due to invalid IL or missing references)
		//IL_0326: Unknown result type (might be due to invalid IL or missing references)
		//IL_0330: Unknown result type (might be due to invalid IL or missing references)
		//IL_0335: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03de: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_043f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0449: Unknown result type (might be due to invalid IL or missing references)
		//IL_0454: Unknown result type (might be due to invalid IL or missing references)
		//IL_0459: Unknown result type (might be due to invalid IL or missing references)
		//IL_0467: Unknown result type (might be due to invalid IL or missing references)
		//IL_0471: Unknown result type (might be due to invalid IL or missing references)
		//IL_047c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0481: Unknown result type (might be due to invalid IL or missing references)
		//IL_0492: Unknown result type (might be due to invalid IL or missing references)
		//IL_0497: Unknown result type (might be due to invalid IL or missing references)
		//IL_0499: Unknown result type (might be due to invalid IL or missing references)
		//IL_049f: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e2: Unknown result type (might be due to invalid IL or missing references)
		if (!CanCutTiles())
		{
			return;
		}
		AchievementsHelper.CurrentlyMining = true;
		bool flag = true;
		bool[] tileCutIgnorance = Main.player[owner].GetTileCutIgnorance(allowRegrowth: false, trap);
		DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
		DelegateMethods.tileCutIgnore = tileCutIgnorance;
		Rectangle extensionBox;
		if (type == 461 || type == 632 || type == 642)
		{
			Utils.PlotTileLine(base.Center, base.Center + velocity * localAI[1], (float)width * scale, DelegateMethods.CutTiles);
		}
		else if (ProjectileID.Sets.IsAWhip[type])
		{
			flag = false;
			WhipPointsForCollision.Clear();
			FillWhipControlPoints(this, WhipPointsForCollision);
			Vector2 vector = default(Vector2);
			((Vector2)(ref vector))._002Ector((float)width * scale / 2f, 0f);
			for (int i = 0; i < WhipPointsForCollision.Count; i++)
			{
				Utils.PlotTileLine(WhipPointsForCollision[i] - vector, WhipPointsForCollision[i] + vector, (float)height * scale, DelegateMethods.CutTiles);
			}
		}
		else if (type == 756)
		{
			Utils.PlotTileLine(base.Center, base.Center + velocity.SafeNormalize(-Vector2.UnitY) * 200f * scale, 22f * scale, DelegateMethods.CutTiles);
		}
		else if (type == 927)
		{
			Vector2 end = base.Center + velocity.SafeNormalize(Vector2.UnitX) * 220f * scale;
			Utils.PlotTileLine(base.Center, end, 80f * scale, DelegateMethods.CutTiles);
		}
		else if (type == 802 || type == 842 || type == 938 || type == 939 || type == 940 || type == 941 || type == 942 || type == 943 || type == 944 || type == 945)
		{
			Utils.PlotTileLine(base.Center, base.Center + velocity.SafeNormalize(-Vector2.UnitY) * 10f, 10f * scale, DelegateMethods.CutTiles);
		}
		else if (type == 611)
		{
			Utils.PlotTileLine(base.Center, base.Center + velocity + velocity.SafeNormalize(Vector2.Zero) * 48f, (float)width * scale, DelegateMethods.CutTiles);
		}
		else if (type == 697 || type == 707)
		{
			float num = 40f;
			if (type == 707)
			{
				num = 60f;
			}
			float f = rotation - (float)Math.PI / 4f * (float)Math.Sign(velocity.X);
			Utils.PlotTileLine(base.Center + f.ToRotationVector2() * (0f - num), base.Center + f.ToRotationVector2() * num, (float)width * scale, DelegateMethods.CutTiles);
		}
		else if (aiStyle == 190 || aiStyle == 191)
		{
			flag = false;
			Vector2 vector2 = (rotation - (float)Math.PI / 4f).ToRotationVector2() * 60f * scale;
			Vector2 vector3 = (rotation + (float)Math.PI / 4f).ToRotationVector2() * 60f * scale;
			float num2 = 60f * scale;
			Utils.PlotTileLine(base.Center + vector2, base.Center + vector3, num2, DelegateMethods.CutTiles);
		}
		else if (aiStyle == 19 && AI_019_Spears_GetExtensionHitbox(out extensionBox))
		{
			CutTilesAt(extensionBox.TopLeft(), extensionBox.Width, extensionBox.Height);
		}
		if (flag)
		{
			CutTilesAt(position, width, height);
		}
		AchievementsHelper.CurrentlyMining = false;
	}

	private void CutTilesAt(Vector2 boxPosition, int boxWidth, int boxHeight)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		int num = (int)(boxPosition.X / 16f);
		int num2 = (int)((boxPosition.X + (float)boxWidth) / 16f) + 1;
		int num3 = (int)(boxPosition.Y / 16f);
		int num4 = (int)((boxPosition.Y + (float)boxHeight) / 16f) + 1;
		if (num < 0)
		{
			num = 0;
		}
		if (num2 > Main.maxTilesX)
		{
			num2 = Main.maxTilesX;
		}
		if (num3 < 0)
		{
			num3 = 0;
		}
		if (num4 > Main.maxTilesY)
		{
			num4 = Main.maxTilesY;
		}
		bool[] tileCutIgnorance = Main.player[owner].GetTileCutIgnorance(allowRegrowth: false, trap);
		for (int i = num; i < num2; i++)
		{
			for (int j = num3; j < num4; j++)
			{
				if (Main.tile[i, j] != null && Main.tileCut[Main.tile[i, j].type] && !tileCutIgnorance[Main.tile[i, j].type] && WorldGen.CanCutTile(i, j, TileCuttingContext.AttackProjectile))
				{
					WorldGen.KillTile(i, j);
					if (Main.netMode != 0)
					{
						NetMessage.SendData(17, -1, -1, null, 0, i, j);
					}
				}
			}
		}
		ProjectileLoader.CutTiles(this);
	}

	private bool CanCutTiles()
	{
		bool? flag = ProjectileLoader.CanCutTiles(this);
		if (flag.HasValue)
		{
			return flag.GetValueOrDefault();
		}
		if (aiStyle != 45 && aiStyle != 137 && aiStyle != 92 && aiStyle != 105 && aiStyle != 106 && !ProjectileID.Sets.IsAGolfBall[type] && type != 463 && type != 69 && type != 70 && type != 621 && type != 10 && type != 11 && type != 379 && type != 407 && type != 476 && type != 623 && (type < 625 || type > 628) && type != 833 && type != 834 && type != 835 && type != 818 && type != 831 && type != 820 && type != 864 && type != 970 && type != 995 && type != 908)
		{
			return type != 1020;
		}
		return false;
	}

	public bool Colliding(Rectangle myRect, Rectangle targetRect)
	{
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d05: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_014e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0153: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d23: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d24: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d29: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d30: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d36: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d49: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0249: Unknown result type (might be due to invalid IL or missing references)
		//IL_025d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0262: Unknown result type (might be due to invalid IL or missing references)
		//IL_0271: Unknown result type (might be due to invalid IL or missing references)
		//IL_0276: Unknown result type (might be due to invalid IL or missing references)
		//IL_027b: Unknown result type (might be due to invalid IL or missing references)
		//IL_027f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0211: Unknown result type (might be due to invalid IL or missing references)
		//IL_0213: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ddf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0de0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0de5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0de6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e00: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e05: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e12: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e19: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_040f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ee8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ee9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eee: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ef5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0efb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f01: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f13: Unknown result type (might be due to invalid IL or missing references)
		//IL_0494: Unknown result type (might be due to invalid IL or missing references)
		//IL_0495: Unknown result type (might be due to invalid IL or missing references)
		//IL_0498: Unknown result type (might be due to invalid IL or missing references)
		//IL_049d: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0417: Unknown result type (might be due to invalid IL or missing references)
		//IL_0418: Unknown result type (might be due to invalid IL or missing references)
		//IL_041d: Unknown result type (might be due to invalid IL or missing references)
		//IL_041e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0424: Unknown result type (might be due to invalid IL or missing references)
		//IL_0429: Unknown result type (might be due to invalid IL or missing references)
		//IL_042d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0432: Unknown result type (might be due to invalid IL or missing references)
		//IL_0438: Unknown result type (might be due to invalid IL or missing references)
		//IL_043d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0441: Unknown result type (might be due to invalid IL or missing references)
		//IL_0446: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fba: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fe2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e90: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e91: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e96: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e97: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ea3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_030d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0312: Unknown result type (might be due to invalid IL or missing references)
		//IL_0319: Unknown result type (might be due to invalid IL or missing references)
		//IL_0338: Unknown result type (might be due to invalid IL or missing references)
		//IL_0357: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_05bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_05db: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0630: Unknown result type (might be due to invalid IL or missing references)
		//IL_0635: Unknown result type (might be due to invalid IL or missing references)
		//IL_0638: Unknown result type (might be due to invalid IL or missing references)
		//IL_063d: Unknown result type (might be due to invalid IL or missing references)
		//IL_064e: Unknown result type (might be due to invalid IL or missing references)
		//IL_035f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0360: Unknown result type (might be due to invalid IL or missing references)
		//IL_0365: Unknown result type (might be due to invalid IL or missing references)
		//IL_0366: Unknown result type (might be due to invalid IL or missing references)
		//IL_036b: Unknown result type (might be due to invalid IL or missing references)
		//IL_036d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0371: Unknown result type (might be due to invalid IL or missing references)
		//IL_0376: Unknown result type (might be due to invalid IL or missing references)
		//IL_037b: Unknown result type (might be due to invalid IL or missing references)
		//IL_037d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0381: Unknown result type (might be due to invalid IL or missing references)
		//IL_0386: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0723: Unknown result type (might be due to invalid IL or missing references)
		//IL_0656: Unknown result type (might be due to invalid IL or missing references)
		//IL_0657: Unknown result type (might be due to invalid IL or missing references)
		//IL_065c: Unknown result type (might be due to invalid IL or missing references)
		//IL_065d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0663: Unknown result type (might be due to invalid IL or missing references)
		//IL_0668: Unknown result type (might be due to invalid IL or missing references)
		//IL_066c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0671: Unknown result type (might be due to invalid IL or missing references)
		//IL_0677: Unknown result type (might be due to invalid IL or missing references)
		//IL_067c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0680: Unknown result type (might be due to invalid IL or missing references)
		//IL_0685: Unknown result type (might be due to invalid IL or missing references)
		//IL_072b: Unknown result type (might be due to invalid IL or missing references)
		//IL_072c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0731: Unknown result type (might be due to invalid IL or missing references)
		//IL_0732: Unknown result type (might be due to invalid IL or missing references)
		//IL_0738: Unknown result type (might be due to invalid IL or missing references)
		//IL_073d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0741: Unknown result type (might be due to invalid IL or missing references)
		//IL_0746: Unknown result type (might be due to invalid IL or missing references)
		//IL_074c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0751: Unknown result type (might be due to invalid IL or missing references)
		//IL_0755: Unknown result type (might be due to invalid IL or missing references)
		//IL_075a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0795: Unknown result type (might be due to invalid IL or missing references)
		//IL_0796: Unknown result type (might be due to invalid IL or missing references)
		//IL_079b: Unknown result type (might be due to invalid IL or missing references)
		//IL_079d: Unknown result type (might be due to invalid IL or missing references)
		//IL_079e: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_07aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_07bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_07bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0886: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_07fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0804: Unknown result type (might be due to invalid IL or missing references)
		//IL_0809: Unknown result type (might be due to invalid IL or missing references)
		//IL_0811: Unknown result type (might be due to invalid IL or missing references)
		//IL_081b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0820: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_088f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0838: Unknown result type (might be due to invalid IL or missing references)
		//IL_083a: Unknown result type (might be due to invalid IL or missing references)
		//IL_083d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0843: Unknown result type (might be due to invalid IL or missing references)
		//IL_0848: Unknown result type (might be due to invalid IL or missing references)
		//IL_0850: Unknown result type (might be due to invalid IL or missing references)
		//IL_085a: Unknown result type (might be due to invalid IL or missing references)
		//IL_085f: Unknown result type (might be due to invalid IL or missing references)
		//IL_089a: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_08dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a33: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0902: Unknown result type (might be due to invalid IL or missing references)
		//IL_0911: Unknown result type (might be due to invalid IL or missing references)
		//IL_1014: Unknown result type (might be due to invalid IL or missing references)
		//IL_1015: Unknown result type (might be due to invalid IL or missing references)
		//IL_101a: Unknown result type (might be due to invalid IL or missing references)
		//IL_101b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1021: Unknown result type (might be due to invalid IL or missing references)
		//IL_1027: Unknown result type (might be due to invalid IL or missing references)
		//IL_102d: Unknown result type (might be due to invalid IL or missing references)
		//IL_103a: Unknown result type (might be due to invalid IL or missing references)
		//IL_103f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_09cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_09e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_09e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a05: Unknown result type (might be due to invalid IL or missing references)
		//IL_1071: Unknown result type (might be due to invalid IL or missing references)
		//IL_1072: Unknown result type (might be due to invalid IL or missing references)
		//IL_1077: Unknown result type (might be due to invalid IL or missing references)
		//IL_1078: Unknown result type (might be due to invalid IL or missing references)
		//IL_107e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1084: Unknown result type (might be due to invalid IL or missing references)
		//IL_108a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1097: Unknown result type (might be due to invalid IL or missing references)
		//IL_109c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a47: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a50: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_10db: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1106: Unknown result type (might be due to invalid IL or missing references)
		//IL_110b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0adc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0962: Unknown result type (might be due to invalid IL or missing references)
		//IL_0967: Unknown result type (might be due to invalid IL or missing references)
		//IL_096c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0970: Unknown result type (might be due to invalid IL or missing references)
		//IL_1141: Unknown result type (might be due to invalid IL or missing references)
		//IL_1146: Unknown result type (might be due to invalid IL or missing references)
		//IL_114b: Unknown result type (might be due to invalid IL or missing references)
		//IL_115b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1161: Unknown result type (might be due to invalid IL or missing references)
		//IL_1163: Unknown result type (might be due to invalid IL or missing references)
		//IL_116e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1173: Unknown result type (might be due to invalid IL or missing references)
		//IL_1175: Unknown result type (might be due to invalid IL or missing references)
		//IL_1176: Unknown result type (might be due to invalid IL or missing references)
		//IL_117b: Unknown result type (might be due to invalid IL or missing references)
		//IL_117c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1182: Unknown result type (might be due to invalid IL or missing references)
		//IL_1187: Unknown result type (might be due to invalid IL or missing references)
		//IL_118e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1193: Unknown result type (might be due to invalid IL or missing references)
		//IL_1199: Unknown result type (might be due to invalid IL or missing references)
		//IL_119e: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_11aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b08: Unknown result type (might be due to invalid IL or missing references)
		//IL_11dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_11dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1202: Unknown result type (might be due to invalid IL or missing references)
		//IL_1207: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b83: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b13: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1246: Unknown result type (might be due to invalid IL or missing references)
		//IL_1247: Unknown result type (might be due to invalid IL or missing references)
		//IL_124c: Unknown result type (might be due to invalid IL or missing references)
		//IL_124d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1253: Unknown result type (might be due to invalid IL or missing references)
		//IL_1259: Unknown result type (might be due to invalid IL or missing references)
		//IL_125f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1264: Unknown result type (might be due to invalid IL or missing references)
		//IL_1269: Unknown result type (might be due to invalid IL or missing references)
		//IL_126e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1278: Unknown result type (might be due to invalid IL or missing references)
		//IL_1283: Unknown result type (might be due to invalid IL or missing references)
		//IL_1288: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ba2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ba7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c47: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c62: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c67: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c69: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c74: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c76: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c85: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c01: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c10: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c11: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c16: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c24: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c29: Unknown result type (might be due to invalid IL or missing references)
		//IL_1304: Unknown result type (might be due to invalid IL or missing references)
		//IL_130f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1319: Unknown result type (might be due to invalid IL or missing references)
		//IL_1320: Unknown result type (might be due to invalid IL or missing references)
		//IL_1325: Unknown result type (might be due to invalid IL or missing references)
		//IL_132a: Unknown result type (might be due to invalid IL or missing references)
		//IL_132d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1338: Unknown result type (might be due to invalid IL or missing references)
		//IL_1342: Unknown result type (might be due to invalid IL or missing references)
		//IL_1349: Unknown result type (might be due to invalid IL or missing references)
		//IL_134e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1353: Unknown result type (might be due to invalid IL or missing references)
		//IL_1355: Unknown result type (might be due to invalid IL or missing references)
		//IL_1356: Unknown result type (might be due to invalid IL or missing references)
		//IL_135b: Unknown result type (might be due to invalid IL or missing references)
		//IL_135c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1361: Unknown result type (might be due to invalid IL or missing references)
		//IL_1363: Unknown result type (might be due to invalid IL or missing references)
		//IL_0caa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cac: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cba: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1512: Unknown result type (might be due to invalid IL or missing references)
		//IL_1518: Unknown result type (might be due to invalid IL or missing references)
		//IL_1525: Unknown result type (might be due to invalid IL or missing references)
		//IL_152b: Unknown result type (might be due to invalid IL or missing references)
		//IL_152d: Unknown result type (might be due to invalid IL or missing references)
		//IL_154a: Unknown result type (might be due to invalid IL or missing references)
		//IL_154f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1568: Unknown result type (might be due to invalid IL or missing references)
		//IL_156d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1574: Unknown result type (might be due to invalid IL or missing references)
		//IL_157a: Unknown result type (might be due to invalid IL or missing references)
		//IL_157c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1581: Unknown result type (might be due to invalid IL or missing references)
		//IL_1590: Unknown result type (might be due to invalid IL or missing references)
		//IL_1595: Unknown result type (might be due to invalid IL or missing references)
		//IL_159a: Unknown result type (might be due to invalid IL or missing references)
		//IL_159e: Unknown result type (might be due to invalid IL or missing references)
		//IL_148d: Unknown result type (might be due to invalid IL or missing references)
		Rectangle val;
		if (aiStyle == 15)
		{
			if (ai[0] == 0f)
			{
				Vector2 mountedCenter = Main.player[owner].MountedCenter;
				Vector2 vector = targetRect.ClosestPointInRect(mountedCenter) - mountedCenter;
				vector.Y /= 0.8f;
				float num = 55f;
				return ((Vector2)(ref vector)).Length() <= num;
			}
		}
		else if (type == 973)
		{
			Vector2 v = targetRect.ClosestPointInRect(base.Center) - base.Center;
			v.SafeNormalize(Vector2.UnitX);
			float num12 = 100f * scale;
			if (((Vector2)(ref v)).Length() < num12 && Collision.CanHit(base.Center, 0, 0, ((Rectangle)(ref targetRect)).Center.ToVector2(), 0, 0))
			{
				return true;
			}
		}
		else
		{
			if (type == 85)
			{
				if (!((Rectangle)(ref myRect)).Intersects(targetRect))
				{
					return false;
				}
				return Collision.CanHit(base.Center, 0, 0, ((Rectangle)(ref targetRect)).Center.ToVector2(), 0, 0);
			}
			if (type == 985)
			{
				float coneLength = 90f * scale;
				float maximumAngle = (float)Math.PI / 4f;
				float coneRotation = rotation;
				if (targetRect.IntersectsConeFastInaccurate(base.Center, coneLength, coneRotation, maximumAngle) && Collision.CanHit(base.Center, 0, 0, ((Rectangle)(ref targetRect)).Center.ToVector2(), 0, 0))
				{
					return true;
				}
			}
			else
			{
				if (aiStyle == 190)
				{
					float coneLength2 = 94f * scale;
					float num21 = (float)Math.PI * 2f / 25f * ai[0];
					float maximumAngle2 = (float)Math.PI / 4f;
					float num22 = rotation + num21;
					if (targetRect.IntersectsConeSlowMoreAccurate(base.Center, coneLength2, num22, maximumAngle2))
					{
						return true;
					}
					float num23 = Utils.Remap(localAI[0], ai[1] * 0.3f, ai[1] * 0.5f, 1f, 0f);
					if (num23 > 0f)
					{
						float coneRotation2 = num22 - (float)Math.PI / 4f * ai[0] * num23;
						if (targetRect.IntersectsConeSlowMoreAccurate(base.Center, coneLength2, coneRotation2, maximumAngle2))
						{
							return true;
						}
					}
					return false;
				}
				if (type == 623)
				{
					if (ai[0] == 2f)
					{
						Rectangle value = Utils.CenteredRectangle(base.Center + new Vector2((float)(direction * 40), 0f), new Vector2(80f, 40f));
						if (((Rectangle)(ref targetRect)).Intersects(value))
						{
							return true;
						}
					}
				}
				else
				{
					if (type == 933)
					{
						float collisionPoint = 0f;
						float num24 = 40f;
						for (int i = 14; i < oldPos.Length; i += 15)
						{
							float num25 = localAI[0] - (float)i;
							if (!(num25 < 0f) && !(num25 > 60f))
							{
								Vector2 vector4 = oldPos[i] + base.Size / 2f;
								Vector2 vector5 = (oldRot[i] + (float)Math.PI / 2f).ToRotationVector2();
								_lanceHitboxBounds.X = (int)vector4.X - _lanceHitboxBounds.Width / 2;
								_lanceHitboxBounds.Y = (int)vector4.Y - _lanceHitboxBounds.Height / 2;
								if (((Rectangle)(ref _lanceHitboxBounds)).Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), vector4 - vector5 * num24, vector4 + vector5 * num24, 20f, ref collisionPoint))
								{
									return true;
								}
							}
						}
						Vector2 vector6 = (rotation + (float)Math.PI / 2f).ToRotationVector2();
						_lanceHitboxBounds.X = (int)position.X - _lanceHitboxBounds.Width / 2;
						_lanceHitboxBounds.Y = (int)position.Y - _lanceHitboxBounds.Height / 2;
						if (((Rectangle)(ref _lanceHitboxBounds)).Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center - vector6 * num24, base.Center + vector6 * num24, 20f, ref collisionPoint))
						{
							return true;
						}
						return false;
					}
					if (type == 927)
					{
						for (float num26 = 0f; num26 <= 1f; num26 += 0.05f)
						{
							float num27 = Utils.Remap(num26, 0f, 1f, 1f, 5f);
							Rectangle rectangle = myRect;
							Vector2 vector7 = velocity.SafeNormalize(Vector2.Zero) * (float)width * num27 * scale;
							((Rectangle)(ref rectangle)).Offset((int)vector7.X, (int)vector7.Y);
							if (((Rectangle)(ref rectangle)).Intersects(targetRect))
							{
								return true;
							}
						}
					}
					else
					{
						if (type == 877 || type == 878 || type == 879)
						{
							float f = rotation - (float)Math.PI / 4f - (float)Math.PI / 2f - ((spriteDirection == 1) ? ((float)Math.PI) : 0f);
							float collisionPoint10 = 0f;
							float num2 = 95f;
							_lanceHitboxBounds.X = (int)position.X - _lanceHitboxBounds.Width / 2;
							_lanceHitboxBounds.Y = (int)position.Y - _lanceHitboxBounds.Height / 2;
							if (((Rectangle)(ref _lanceHitboxBounds)).Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + f.ToRotationVector2() * num2, 23f * scale, ref collisionPoint10))
							{
								return true;
							}
							return false;
						}
						if (type == 974)
						{
							float f4 = rotation;
							float collisionPoint11 = 0f;
							float num3 = 46f * scale;
							float num4 = 8f;
							Vector2 vector8 = f4.ToRotationVector2();
							Rectangle hitbox = base.Hitbox;
							((Rectangle)(ref hitbox)).Inflate((int)num3, (int)num3);
							if (((Rectangle)(ref hitbox)).Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center - vector8 * num3, base.Center + vector8 * num3, num4 * scale, ref collisionPoint11))
							{
								return true;
							}
							return false;
						}
						if (type == 919 || type == 932)
						{
							float f5 = rotation;
							float collisionPoint12 = 0f;
							float num5 = 40f;
							Vector2 vector9 = f5.ToRotationVector2();
							_lanceHitboxBounds.X = (int)position.X - _lanceHitboxBounds.Width / 2;
							_lanceHitboxBounds.Y = (int)position.Y - _lanceHitboxBounds.Height / 2;
							if (((Rectangle)(ref _lanceHitboxBounds)).Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center - vector9 * num5, base.Center + vector9 * num5, 8f, ref collisionPoint12))
							{
								return true;
							}
							return false;
						}
						if (type == 923)
						{
							float collisionPoint13 = 0f;
							_ = scale;
							float f6 = rotation;
							Vector2 objectPosition = targetRect.TopLeft();
							Vector2 objectDimensions = targetRect.Size();
							Vector2 vector10 = f6.ToRotationVector2();
							float num6 = scale * 0.7f;
							if (Collision.CheckAABBvLineCollision(objectPosition, objectDimensions, base.Center, base.Center + vector10 * scale * 510f, num6 * 100f, ref collisionPoint13))
							{
								return true;
							}
							if (Collision.CheckAABBvLineCollision(objectPosition, objectDimensions, base.Center, base.Center + vector10 * scale * 660f, num6 * 60f, ref collisionPoint13))
							{
								return true;
							}
							if (Collision.CheckAABBvLineCollision(objectPosition, objectDimensions, base.Center, base.Center + vector10 * scale * 800f, num6 * 10f, ref collisionPoint13))
							{
								return true;
							}
							return false;
						}
						if (type == 598 && targetRect.Width > 8 && targetRect.Height > 8)
						{
							((Rectangle)(ref targetRect)).Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
						}
						else
						{
							if (type == 872)
							{
								Rectangle hitbox2 = base.Hitbox;
								int num7 = 80;
								for (int j = 0; j < num7; j += 2)
								{
									Vector2 vector11 = oldPos[j];
									if (!(vector11 == Vector2.Zero))
									{
										hitbox2.X = (int)vector11.X;
										hitbox2.Y = (int)vector11.Y;
										if (((Rectangle)(ref hitbox2)).Intersects(targetRect))
										{
											return true;
										}
									}
								}
								return false;
							}
							if (type == 871)
							{
								int num8 = AI_172_GetPelletStormsCount();
								for (int k = 0; k < num8; k++)
								{
									HallowBossPelletStormInfo hallowBossPelletStormInfo = AI_172_GetPelletStormInfo(k);
									for (int l = 0; l < hallowBossPelletStormInfo.BulletsInStorm; l++)
									{
										if (hallowBossPelletStormInfo.IsValid(l))
										{
											val = hallowBossPelletStormInfo.GetBulletHitbox(l, base.Center);
											if (((Rectangle)(ref val)).Intersects(targetRect))
											{
												return true;
											}
										}
									}
								}
								return false;
							}
							if (ProjectileID.Sets.IsAWhip[type])
							{
								WhipPointsForCollision.Clear();
								FillWhipControlPoints(this, WhipPointsForCollision);
								for (int m = 0; m < WhipPointsForCollision.Count; m++)
								{
									Point point = WhipPointsForCollision[m].ToPoint();
									((Rectangle)(ref myRect)).Location = new Point(point.X - myRect.Width / 2, point.Y - myRect.Height / 2);
									if (((Rectangle)(ref myRect)).Intersects(targetRect))
									{
										return true;
									}
								}
								return false;
							}
							if (type == 614 && targetRect.Width > 8 && targetRect.Height > 8)
							{
								((Rectangle)(ref targetRect)).Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
							}
							else if (type == 963 && ai[0] >= 2f)
							{
								((Rectangle)(ref targetRect)).Inflate(30, 30);
							}
							else if (type == 758)
							{
								if (ai[0] == 2f)
								{
									val = Utils.CenteredRectangle(base.Center + new Vector2((float)(spriteDirection * 30), 0f), new Vector2(50f, 20f));
									if (((Rectangle)(ref val)).Intersects(targetRect))
									{
										return true;
									}
								}
							}
							else if (type == 636 && targetRect.Width > 8 && targetRect.Height > 8)
							{
								((Rectangle)(ref targetRect)).Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
							}
							else if (type == 607)
							{
								myRect.X += (int)velocity.X;
								myRect.Y += (int)velocity.Y;
							}
							else if (type == 661)
							{
								if (Vector2.Distance(((Rectangle)(ref myRect)).Center.ToVector2(), ((Rectangle)(ref targetRect)).Center.ToVector2()) > 500f || !Collision.CanHitLine(((Rectangle)(ref myRect)).Center.ToVector2(), 0, 0, ((Rectangle)(ref targetRect)).Center.ToVector2(), 0, 0))
								{
									return false;
								}
							}
							else
							{
								if (aiStyle == 137)
								{
									if (((Rectangle)(ref myRect)).Intersects(targetRect) && targetRect.Distance(base.Center) < (float)(height / 2 - 20))
									{
										if (AI_137_CanHit(((Rectangle)(ref targetRect)).Center.ToVector2()))
										{
											return true;
										}
										if (AI_137_CanHit(targetRect.TopLeft() + new Vector2((float)(targetRect.Width / 2), 0f)))
										{
											return true;
										}
									}
									return false;
								}
								if (aiStyle == 19)
								{
									Vector2 center = base.Center;
									if (AI_019_Spears_GetExtensionHitbox(out var extensionBox))
									{
										Vector2 vector2 = ((Rectangle)(ref extensionBox)).Center.ToVector2();
										float num9 = Vector2.Distance(vector2, center);
										Vector2 size = extensionBox.Size();
										float num10 = MathHelper.Max((float)extensionBox.Width, (float)extensionBox.Height);
										if (num10 < 12f)
										{
											num10 = 12f;
										}
										for (float num11 = num10; num11 < num9; num11 += num10)
										{
											val = Utils.CenteredRectangle(Vector2.Lerp(center, vector2, num11 / num9), size);
											if (((Rectangle)(ref val)).Intersects(targetRect))
											{
												return true;
											}
										}
										if (((Rectangle)(ref extensionBox)).Intersects(targetRect))
										{
											return true;
										}
									}
								}
							}
						}
					}
				}
			}
		}
		bool? flag = ProjectileLoader.Colliding(this, myRect, targetRect);
		if (flag.HasValue)
		{
			return flag.GetValueOrDefault();
		}
		if (((Rectangle)(ref myRect)).Intersects(targetRect))
		{
			return true;
		}
		if (type == 461)
		{
			float collisionPoint14 = 0f;
			if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 22f * scale, ref collisionPoint14))
			{
				return true;
			}
			return false;
		}
		if (type == 697 || type == 707)
		{
			float f2 = rotation - (float)Math.PI / 4f * (float)Math.Sign(velocity.X);
			float collisionPoint15 = 0f;
			float num13 = 50f;
			if (type == 697)
			{
				num13 = 65f;
			}
			if (type == 707)
			{
				num13 = 110f;
			}
			if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center + f2.ToRotationVector2() * (0f - num13), base.Center + f2.ToRotationVector2() * num13, 23f * scale, ref collisionPoint15))
			{
				return true;
			}
			return false;
		}
		if (type == 699)
		{
			float f3 = rotation - (float)Math.PI / 4f * (float)Math.Sign(velocity.X) + ((spriteDirection == -1) ? ((float)Math.PI) : 0f);
			float collisionPoint16 = 0f;
			float num14 = -95f;
			if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + f3.ToRotationVector2() * num14, 23f * scale, ref collisionPoint16))
			{
				return true;
			}
			return false;
		}
		if (type == 642)
		{
			float collisionPoint17 = 0f;
			if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 30f * scale, ref collisionPoint17))
			{
				return true;
			}
			return false;
		}
		if (type == 802 || type == 842 || type == 938 || type == 939 || type == 940 || type == 941 || type == 942 || type == 943 || type == 944 || type == 945)
		{
			float collisionPoint2 = 0f;
			if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * 6f, 10f * scale, ref collisionPoint2))
			{
				return true;
			}
			return false;
		}
		if (type == 632)
		{
			float collisionPoint3 = 0f;
			if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 22f * scale, ref collisionPoint3))
			{
				return true;
			}
			return false;
		}
		if (type == 455)
		{
			float collisionPoint4 = 0f;
			if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 36f * scale, ref collisionPoint4))
			{
				return true;
			}
			return false;
		}
		if (type == 611)
		{
			float collisionPoint5 = 0f;
			if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity + velocity.SafeNormalize(Vector2.Zero) * 48f, 16f * scale, ref collisionPoint5))
			{
				return true;
			}
			return false;
		}
		if (type == 684)
		{
			float collisionPoint6 = 0f;
			Vector2 vector3 = velocity.SafeNormalize(Vector2.UnitY).RotatedBy(-1.5707963705062866) * scale;
			if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center - vector3 * 40f, base.Center + vector3 * 40f, 16f * scale, ref collisionPoint6))
			{
				return true;
			}
			return false;
		}
		if (type == 537)
		{
			float collisionPoint7 = 0f;
			if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 22f * scale, ref collisionPoint7))
			{
				return true;
			}
			return false;
		}
		if (type == 756 || type == 961)
		{
			float collisionPoint8 = 0f;
			if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity.SafeNormalize(-Vector2.UnitY) * 200f * scale, 22f * scale, ref collisionPoint8))
			{
				return true;
			}
			return false;
		}
		if (type == 687)
		{
			float collisionPoint9 = 0f;
			float num15 = ai[0] / 25f;
			if (num15 > 1f)
			{
				num15 = 1f;
			}
			float num16 = (ai[0] - 38f) / 40f;
			if (num16 < 0f)
			{
				num16 = 0f;
			}
			Vector2 lineStart = base.Center + rotation.ToRotationVector2() * 400f * num16;
			Vector2 lineEnd = base.Center + rotation.ToRotationVector2() * 400f * num15;
			if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), lineStart, lineEnd, 40f * scale, ref collisionPoint9))
			{
				return true;
			}
			return false;
		}
		if (type == 466 || type == 580 || type == 686)
		{
			for (int n = 0; n < oldPos.Length && (oldPos[n].X != 0f || oldPos[n].Y != 0f); n++)
			{
				myRect.X = (int)oldPos[n].X;
				myRect.Y = (int)oldPos[n].Y;
				if (((Rectangle)(ref myRect)).Intersects(targetRect))
				{
					return true;
				}
			}
			return false;
		}
		if (type == 711)
		{
			if (penetrate != -1)
			{
				for (int num17 = 0; num17 < oldPos.Length && (oldPos[num17].X != 0f || oldPos[num17].Y != 0f); num17++)
				{
					myRect.X = (int)oldPos[num17].X;
					myRect.Y = (int)oldPos[num17].Y;
					if (((Rectangle)(ref myRect)).Intersects(targetRect))
					{
						return true;
					}
				}
			}
		}
		else if (type == 464 && ai[1] != 1f)
		{
			Vector2 val2 = Utils.RotatedBy(new Vector2(0f, -720f), velocity.ToRotation());
			float num18 = ai[0] % 45f / 45f;
			Vector2 spinningpoint = val2 * num18;
			for (int num19 = 0; num19 < 6; num19++)
			{
				float num20 = (float)num19 * ((float)Math.PI * 2f) / 6f;
				val = Utils.CenteredRectangle(base.Center + spinningpoint.RotatedBy(num20), new Vector2(30f, 30f));
				if (((Rectangle)(ref val)).Intersects(targetRect))
				{
					return true;
				}
			}
		}
		return false;
	}

	public void ProjLight()
	{
		//IL_0db5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dba: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0de5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e06: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e0b: Unknown result type (might be due to invalid IL or missing references)
		if (!(light > 0f))
		{
			return;
		}
		float num = light;
		float num2 = light;
		float num3 = light;
		switch (type)
		{
		case 987:
			num *= 0.6f;
			num2 *= 0.5f;
			num3 *= 0.1f;
			break;
		case 988:
			num *= 0.8f;
			num2 *= 0.35f;
			num3 *= 0f;
			break;
		case 989:
			num *= 0f;
			num2 *= 0.65f;
			num3 *= 0f;
			break;
		case 990:
			num *= 0f;
			num2 *= 0.35f;
			num3 *= 0.7f;
			break;
		case 991:
			num *= 0.9f;
			num2 *= 0f;
			num3 *= 0.5f;
			break;
		case 992:
			num *= 0.75f;
			num2 *= 0f;
			num3 *= 0.75f;
			break;
		case 993:
			num *= (float)Main.DiscoR / 255f;
			num2 *= (float)Main.DiscoG / 255f;
			num3 *= (float)Main.DiscoB / 255f;
			break;
		}
		if (type == 446)
		{
			num *= 0f;
			num3 *= 0.8f;
		}
		else if (type == 493 || type == 494)
		{
			num2 *= 0.3f;
		}
		else if (type == 876)
		{
			num *= 0.1f;
			num2 *= 0.7f;
			num3 *= 1f;
		}
		else if (type == 867)
		{
			float num4 = (float)Main.rand.Next(28, 42) * 0.005f;
			num4 += (float)(270 - Main.mouseTextColor) / 500f;
			num = 0.1f;
			num2 = 0.3f + num4 / 2f;
			num3 = 0.6f + num4;
		}
		else if (type == 1000)
		{
			float num5 = (float)Main.rand.Next(28, 42) * 0.005f;
			num5 += (float)(270 - Main.mouseTextColor) / 500f;
			num = 0.3f + num5 * 0.25f;
			num2 = 0.35f + num5 * 0.75f;
			num3 = 0.5f + num5;
		}
		else if (type == 332)
		{
			num3 *= 0.1f;
			num2 *= 0.6f;
		}
		else if (type == 259)
		{
			num3 *= 0.1f;
			if (Main.getGoodWorld)
			{
				num = 0f;
				num2 = 0f;
				num3 = 0f;
			}
		}
		else if (type == 329)
		{
			num3 *= 0.1f;
			num2 *= 0.9f;
		}
		else if (type == 2 || type == 82)
		{
			num2 *= 0.75f;
			num3 *= 0.55f;
		}
		else if (type == 172)
		{
			num2 *= 0.55f;
			num *= 0.35f;
		}
		else if (type == 308)
		{
			num2 *= 0.7f;
			num *= 0.1f;
		}
		else if (type == 304)
		{
			num2 *= 0.2f;
			num3 *= 0.1f;
		}
		else if (type == 263)
		{
			num2 *= 0.7f;
			num *= 0.1f;
		}
		else if (type == 274)
		{
			num2 *= 0.1f;
			num *= 0.7f;
		}
		else if (type == 254)
		{
			num *= 0.1f;
		}
		else if (type == 94)
		{
			num *= 0.5f;
			num2 *= 0f;
		}
		else if (type == 95 || type == 96 || type == 103 || type == 104)
		{
			num *= 0.35f;
			num2 *= 1f;
			num3 *= 0f;
		}
		else if (type == 4)
		{
			num2 *= 0.1f;
			num *= 0.5f;
		}
		else if (type == 257)
		{
			num2 *= 0.9f;
			num *= 0.1f;
		}
		else if (type == 9)
		{
			num2 *= 0.1f;
			num3 *= 0.6f;
		}
		else if (type == 488)
		{
			num = 0.3f;
			num3 = 0.25f;
			num2 = 0f;
		}
		else if (type == 92)
		{
			num2 *= 0.6f;
			num *= 0.8f;
		}
		else if (type == 93)
		{
			num2 *= 1f;
			num *= 1f;
			num3 *= 0.01f;
		}
		else if (type == 12 || type == 955)
		{
			num *= 0.9f;
			num2 *= 0.8f;
			num3 *= 0.1f;
		}
		else if (type == 14 || type == 110 || type == 180 || type == 242 || type == 302)
		{
			num2 *= 0.7f;
			num3 *= 0.1f;
		}
		else if (type == 981)
		{
			num2 *= 0.7f;
			num3 *= 0.7f;
		}
		else if (type == 15)
		{
			num2 *= 0.4f;
			num3 *= 0.1f;
			num = 1f;
		}
		else if (type == 16)
		{
			num *= 0.1f;
			num2 *= 0.4f;
			num3 = 1f;
		}
		else if (type == 18)
		{
			num2 *= 0.1f;
			num *= 0.6f;
		}
		else if (type == 19)
		{
			num2 *= 0.5f;
			num3 *= 0.1f;
		}
		else if (type == 20)
		{
			num *= 0.1f;
			num3 *= 0.3f;
		}
		else if (type == 22)
		{
			num = 0f;
			num2 = 0f;
		}
		else if (type == 27)
		{
			num *= 0f;
			num2 *= 0.3f;
			num3 = 1f;
		}
		else if (type == 34)
		{
			num2 *= 0.1f;
			num3 *= 0.1f;
		}
		else if (type == 36)
		{
			num = 0.8f;
			num2 *= 0.2f;
			num3 *= 0.6f;
		}
		else if (type == 41)
		{
			num2 *= 0.8f;
			num3 *= 0.6f;
		}
		else if (type == 44 || type == 45)
		{
			num3 = 1f;
			num *= 0.6f;
			num2 *= 0.1f;
		}
		else if (type == 50)
		{
			num *= 0.7f;
			num3 *= 0.8f;
		}
		else if (type == 515)
		{
			num2 *= 0.6f;
			num3 *= 0.85f;
		}
		else if (type == 870)
		{
			num *= 0.9f;
			num2 = 0.35f;
		}
		else if (type == 53)
		{
			num *= 0.7f;
			num2 *= 0.8f;
		}
		else if (type == 473)
		{
			num *= 1.05f;
			num2 *= 0.95f;
			num3 *= 0.55f;
		}
		else if (type == 72)
		{
			num *= 0.45f;
			num2 *= 0.75f;
			num3 = 1f;
		}
		else if (type == 86)
		{
			num *= 1f;
			num2 *= 0.45f;
			num3 = 0.75f;
		}
		else if (type == 87)
		{
			num *= 0.45f;
			num2 = 1f;
			num3 *= 0.75f;
		}
		else if (type == 73)
		{
			num *= 0.4f;
			num2 *= 0.6f;
			num3 *= 1f;
		}
		else if (type == 74)
		{
			num *= 1f;
			num2 *= 0.4f;
			num3 *= 0.6f;
		}
		else if (type == 284)
		{
			num *= 1f;
			num2 *= 0.1f;
			num3 *= 0.8f;
		}
		else if (type == 285)
		{
			num *= 0.1f;
			num2 *= 0.5f;
			num3 *= 1f;
		}
		else if (type == 286)
		{
			num *= 1f;
			num2 *= 0.5f;
			num3 *= 0.1f;
		}
		else if (type == 287)
		{
			num *= 0.9f;
			num2 *= 1f;
			num3 *= 0.4f;
		}
		else if (type == 283)
		{
			num *= 0.8f;
			num2 *= 0.1f;
		}
		else if (type == 76 || type == 77 || type == 78)
		{
			num *= 1f;
			num2 *= 0.3f;
			num3 *= 0.6f;
		}
		else if (type == 79)
		{
			num = (float)Main.DiscoR / 255f;
			num2 = (float)Main.DiscoG / 255f;
			num3 = (float)Main.DiscoB / 255f;
		}
		else if (type == 80)
		{
			num *= 0f;
			num2 *= 0.8f;
			num3 *= 1f;
		}
		else if (type == 83 || type == 88)
		{
			num *= 0.7f;
			num2 *= 0f;
			num3 *= 1f;
		}
		else if (type == 100)
		{
			num *= 1f;
			num2 *= 0.5f;
			num3 *= 0f;
		}
		else if (type == 84 || type == 389)
		{
			num *= 0.8f;
			num2 *= 0f;
			num3 *= 0.5f;
		}
		else if (type == 89 || type == 90)
		{
			num2 *= 0.2f;
			num3 *= 1f;
			num *= 0.05f;
		}
		else if (type == 106)
		{
			num *= 0f;
			num2 *= 0.5f;
			num3 *= 1f;
		}
		else if (type == 113)
		{
			num *= 0.25f;
			num2 *= 0.75f;
			num3 *= 1f;
		}
		else if (type == 114 || type == 115)
		{
			num *= 0.5f;
			num2 *= 0.05f;
			num3 *= 1f;
		}
		else if (type == 116)
		{
			num3 *= 0.25f;
		}
		else if (type == 131)
		{
			num *= 0.1f;
			num2 *= 0.4f;
		}
		else if (type == 132 || type == 157)
		{
			num *= 0.2f;
			num3 *= 0.6f;
		}
		else if (type == 156)
		{
			num *= 1f;
			num3 *= 0.6f;
			num2 = 0f;
		}
		else if (type == 173)
		{
			num *= 0.3f;
			num3 *= 1f;
			num2 = 0.4f;
		}
		else if (type == 207)
		{
			num *= 0.4f;
			num3 *= 0.4f;
		}
		else if (type == 253)
		{
			num = 0f;
			num2 *= 0.4f;
		}
		else if (type == 211)
		{
			num *= 0.5f;
			num2 *= 0.9f;
			num3 *= 1f;
			if (localAI[0] == 0f)
			{
				light = 1.5f;
			}
			else
			{
				light = 1f;
			}
		}
		else if (type == 209)
		{
			float num6 = (255f - (float)alpha) / 255f;
			num *= 0.3f;
			num2 *= 0.4f;
			num3 *= 1.75f;
			num3 *= num6;
			num *= num6;
			num2 *= num6;
		}
		else if (type == 226 || ((type == 221) | (type == 229)))
		{
			num *= 0.25f;
			num2 *= 1f;
			num3 *= 0.5f;
		}
		else if (type == 251)
		{
			num = (float)Main.DiscoR / 255f;
			num2 = (float)Main.DiscoG / 255f;
			num3 = (float)Main.DiscoB / 255f;
			num = (num + 1f) / 2f;
			num2 = (num2 + 1f) / 2f;
			num3 = (num3 + 1f) / 2f;
			num *= light;
			num2 *= light;
			num3 *= light;
		}
		else if (type == 278 || type == 279)
		{
			num *= 1f;
			num2 *= 1f;
			num3 *= 0f;
		}
		if (type == 870)
		{
			Vector3 rgb = (DelegateMethods.v3_1 = new Vector3(num, num2, num3));
			Point p = base.Center.ToTileCoordinates();
			DelegateMethods.v2_1 = p.ToVector2();
			DelegateMethods.f_1 = 4.5f;
			Utils.PlotTileArea(p.X, p.Y, DelegateMethods.SpreadLightOpen_StopForSolids);
			Lighting.AddLight(base.Center, rgb);
		}
		else
		{
			Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), num, num2, num3);
		}
	}

	public Rectangle getRect()
	{
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		return new Rectangle((int)position.X, (int)position.Y, width, height);
	}

	public void Update(int i)
	{
		//IL_03f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0402: Unknown result type (might be due to invalid IL or missing references)
		//IL_04aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_04cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_04de: Unknown result type (might be due to invalid IL or missing references)
		//IL_0502: Unknown result type (might be due to invalid IL or missing references)
		//IL_0511: Unknown result type (might be due to invalid IL or missing references)
		//IL_0643: Unknown result type (might be due to invalid IL or missing references)
		//IL_065c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1205: Unknown result type (might be due to invalid IL or missing references)
		//IL_120a: Unknown result type (might be due to invalid IL or missing references)
		//IL_121c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_131e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1342: Unknown result type (might be due to invalid IL or missing references)
		//IL_1348: Unknown result type (might be due to invalid IL or missing references)
		//IL_137d: Unknown result type (might be due to invalid IL or missing references)
		//IL_139e: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1625: Unknown result type (might be due to invalid IL or missing references)
		//IL_1637: Unknown result type (might be due to invalid IL or missing references)
		//IL_15a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_15ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_1414: Unknown result type (might be due to invalid IL or missing references)
		//IL_1438: Unknown result type (might be due to invalid IL or missing references)
		//IL_143e: Unknown result type (might be due to invalid IL or missing references)
		//IL_16be: Unknown result type (might be due to invalid IL or missing references)
		//IL_16c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1671: Unknown result type (might be due to invalid IL or missing references)
		//IL_1676: Unknown result type (might be due to invalid IL or missing references)
		//IL_168e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1693: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_14db: Unknown result type (might be due to invalid IL or missing references)
		//IL_14e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b47: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b58: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b62: Unknown result type (might be due to invalid IL or missing references)
		//IL_192a: Unknown result type (might be due to invalid IL or missing references)
		//IL_192f: Unknown result type (might be due to invalid IL or missing references)
		//IL_196f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1974: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_170f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1714: Unknown result type (might be due to invalid IL or missing references)
		//IL_171a: Unknown result type (might be due to invalid IL or missing references)
		//IL_171f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1525: Unknown result type (might be due to invalid IL or missing references)
		//IL_1561: Unknown result type (might be due to invalid IL or missing references)
		//IL_1567: Unknown result type (might be due to invalid IL or missing references)
		//IL_19cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_19d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a11: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a16: Unknown result type (might be due to invalid IL or missing references)
		//IL_1807: Unknown result type (might be due to invalid IL or missing references)
		//IL_180c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_110d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1113: Unknown result type (might be due to invalid IL or missing references)
		//IL_0baf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bce: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b87: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c14: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d22: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d44: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_07dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0805: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c71: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bce: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fe0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1002: Unknown result type (might be due to invalid IL or missing references)
		//IL_1008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0efa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f00: Unknown result type (might be due to invalid IL or missing references)
		//IL_0de7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e32: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0993: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_09bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bed: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bef: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf4: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_17c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_17c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_17d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_17d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e50: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e55: Unknown result type (might be due to invalid IL or missing references)
		//IL_090b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0910: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a62: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a67: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_18bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aed: Unknown result type (might be due to invalid IL or missing references)
		//IL_1af2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1af7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1afc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aae: Unknown result type (might be due to invalid IL or missing references)
		//IL_1abd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac9: Unknown result type (might be due to invalid IL or missing references)
		if (!active)
		{
			return;
		}
		if (Main.netMode == 1 && (ProjectileID.Sets.IsAGolfBall[type] || type == 820))
		{
			int num = (int)(position.X + (float)(width / 2)) / 16;
			int num11 = (int)(position.Y + (float)(height / 2)) / 16;
			if (!Main.sectionManager.TileLoaded(num, num11))
			{
				return;
			}
		}
		numUpdates = extraUpdates;
		Vector2 vector = default(Vector2);
		Vector2 vector2 = default(Vector2);
		while (numUpdates >= 0)
		{
			numUpdates--;
			if (type == 640 && ai[1] > 0f)
			{
				ai[1] -= 1f;
				continue;
			}
			if (position.X <= Main.leftWorld || position.X + (float)width >= Main.rightWorld || position.Y <= Main.topWorld || position.Y + (float)height >= Main.bottomWorld)
			{
				active = false;
				return;
			}
			if (!noEnchantmentVisuals)
			{
				UpdateEnchantmentVisuals();
			}
			if (minion || sentry || ContinuouslyUpdateDamageStats)
			{
				Player player = Main.player[owner];
				damage = (int)player.GetTotalDamage(DamageType).ApplyTo(originalDamage);
				CritChance = (int)((float)OriginalCritChance + player.GetTotalCritChance(DamageType) + 5E-06f);
				ArmorPenetration = (int)((float)OriginalArmorPenetration + player.GetTotalArmorPenetration(DamageType) + 5E-06f);
			}
			if (minion && numUpdates == -1 && type != 625 && type != 628)
			{
				minionPos = Main.player[owner].numMinions;
				if (Main.player[owner].slotsMinions + minionSlots > (float)Main.player[owner].maxMinions && owner == Main.myPlayer)
				{
					if ((type == 627 || type == 626) && owner == Main.myPlayer)
					{
						int byUUID = GetByUUID(owner, ai[0]);
						if (byUUID != -1)
						{
							Projectile projectile = Main.projectile[byUUID];
							if (projectile.type != 625)
							{
								projectile.localAI[1] = localAI[1];
							}
							projectile = Main.projectile[(int)localAI[1]];
							projectile.ai[0] = ai[0];
							projectile.ai[1] = 1f;
							projectile.netUpdate = true;
						}
					}
					Kill();
				}
				else
				{
					Main.player[owner].numMinions++;
					Main.player[owner].slotsMinions += minionSlots;
				}
			}
			float num22 = 1f + Math.Abs(velocity.X) / 3f;
			if (gfxOffY > 0f)
			{
				gfxOffY -= num22 * stepSpeed;
				if (gfxOffY < 0f)
				{
					gfxOffY = 0f;
				}
			}
			else if (gfxOffY < 0f)
			{
				gfxOffY += num22 * stepSpeed;
				if (gfxOffY > 0f)
				{
					gfxOffY = 0f;
				}
			}
			if (gfxOffY > 16f)
			{
				gfxOffY = 16f;
			}
			if (gfxOffY < -16f)
			{
				gfxOffY = -16f;
			}
			Vector2 wetVelocity = velocity;
			oldVelocity = velocity;
			whoAmI = i;
			if (soundDelay > 0)
			{
				soundDelay--;
			}
			netUpdate = false;
			for (int j = 0; j < 255; j++)
			{
				if (playerImmune[j] > 0)
				{
					playerImmune[j]--;
				}
			}
			if (usesLocalNPCImmunity)
			{
				for (int k = 0; k < 200; k++)
				{
					if (localNPCImmunity[k] > 0)
					{
						localNPCImmunity[k]--;
					}
				}
			}
			AI();
			if (ShouldUseWindPhysics() && (double)base.Center.Y < Main.worldSurface * 16.0 && Main.tile[(int)base.Center.X / 16, (int)base.Center.Y / 16] != null && Main.tile[(int)base.Center.X / 16, (int)base.Center.Y / 16].wall == 0 && ((velocity.X > 0f && Main.windSpeedCurrent < 0f) || (velocity.X < 0f && Main.windSpeedCurrent > 0f) || Math.Abs(velocity.X) < Math.Abs(Main.windSpeedCurrent * Main.windPhysicsStrength) * 180f) && Math.Abs(velocity.X) < 16f)
			{
				velocity.X += Main.windSpeedCurrent * Main.windPhysicsStrength;
				MathHelper.Clamp(velocity.X, -16f, 16f);
			}
			if (owner < 255 && !Main.player[owner].active)
			{
				Kill();
			}
			if (type == 242 || type == 302 || type == 638)
			{
				wet = false;
			}
			int overrideWidth;
			if (!ignoreWater)
			{
				bool flag;
				bool flag2;
				try
				{
					flag = Collision.LavaCollision(position, width, height);
					flag2 = Collision.WetCollision(position, width, height);
					if (flag)
					{
						lavaWet = true;
					}
					if (Collision.honey)
					{
						honeyWet = true;
					}
					if (Collision.shimmer)
					{
						shimmerWet = true;
					}
				}
				catch
				{
					active = false;
					return;
				}
				if (wet && !lavaWet)
				{
					if (type == 85 || type == 15 || type == 188)
					{
						Kill();
					}
					if (type == 2)
					{
						type = 1;
						light = 0f;
					}
				}
				if (type == 34)
				{
					if (wet && !lavaWet)
					{
						Kill();
					}
					if (lavaWet)
					{
						flag2 = (wet = (lavaWet = false));
					}
				}
				if (type == 80)
				{
					flag2 = false;
					wet = false;
					if (flag && ai[0] >= 0f)
					{
						Kill();
					}
				}
				if (flag2)
				{
					if (type != 155 && wetCount == 0 && !wet)
					{
						if (!flag)
						{
							if (shimmerWet)
							{
								for (int l = 0; l < 10; l++)
								{
									int num28 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 308);
									Main.dust[num28].velocity.Y -= 4f;
									Main.dust[num28].velocity.X *= 2.5f;
									Main.dust[num28].scale = 1.3f;
									Main.dust[num28].noGravity = true;
									overrideWidth = Main.rand.Next(6);
									switch (overrideWidth)
									{
									case 0:
										Main.dust[num28].color = new Color(255, 255, 210);
										break;
									case 1:
										Main.dust[num28].color = new Color(190, 245, 255);
										break;
									case 2:
										Main.dust[num28].color = new Color(255, 150, 255);
										break;
									default:
										Main.dust[num28].color = new Color(190, 175, 255);
										break;
									}
									SoundEngine.PlaySound(19, (int)position.X, (int)position.Y, 4);
								}
							}
							else if (honeyWet)
							{
								for (int m = 0; m < 10; m++)
								{
									int num29 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 152);
									Main.dust[num29].velocity.Y -= 1f;
									Main.dust[num29].velocity.X *= 2.5f;
									Main.dust[num29].scale = 1.3f;
									Main.dust[num29].alpha = 100;
									Main.dust[num29].noGravity = true;
								}
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
							}
							else
							{
								for (int n = 0; n < 10; n++)
								{
									int num30 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, Dust.dustWater());
									Main.dust[num30].velocity.Y -= 4f;
									Main.dust[num30].velocity.X *= 2.5f;
									Main.dust[num30].scale = 1.3f;
									Main.dust[num30].alpha = 100;
									Main.dust[num30].noGravity = true;
								}
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
							}
						}
						else
						{
							for (int num31 = 0; num31 < 10; num31++)
							{
								int num32 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 35);
								Main.dust[num32].velocity.Y -= 1.5f;
								Main.dust[num32].velocity.X *= 2.5f;
								Main.dust[num32].scale = 1.3f;
								Main.dust[num32].alpha = 100;
								Main.dust[num32].noGravity = true;
							}
							SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
						}
					}
					wet = true;
				}
				else if (wet)
				{
					wet = false;
					if (type == 155)
					{
						velocity.Y *= 0.5f;
					}
					else if (wetCount == 0)
					{
						wetCount = 10;
						if (!lavaWet)
						{
							if (shimmerWet)
							{
								for (int num33 = 0; num33 < 10; num33++)
								{
									int num2 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 308);
									Main.dust[num2].velocity.Y -= 4f;
									Main.dust[num2].velocity.X *= 2.5f;
									Main.dust[num2].scale = 1.3f;
									Main.dust[num2].noGravity = true;
									overrideWidth = Main.rand.Next(6);
									switch (overrideWidth)
									{
									case 0:
										Main.dust[num2].color = new Color(255, 255, 210);
										break;
									case 1:
										Main.dust[num2].color = new Color(190, 245, 255);
										break;
									case 2:
										Main.dust[num2].color = new Color(255, 150, 255);
										break;
									default:
										Main.dust[num2].color = new Color(190, 175, 255);
										break;
									}
									SoundEngine.PlaySound(19, (int)position.X, (int)position.Y, 5);
								}
							}
							else if (honeyWet)
							{
								for (int num3 = 0; num3 < 10; num3++)
								{
									int num4 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 152);
									Main.dust[num4].velocity.Y -= 1f;
									Main.dust[num4].velocity.X *= 2.5f;
									Main.dust[num4].scale = 1.3f;
									Main.dust[num4].alpha = 100;
									Main.dust[num4].noGravity = true;
								}
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
							}
							else
							{
								for (int num5 = 0; num5 < 10; num5++)
								{
									int num6 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2)), width + 12, 24, Dust.dustWater());
									Main.dust[num6].velocity.Y -= 4f;
									Main.dust[num6].velocity.X *= 2.5f;
									Main.dust[num6].scale = 1.3f;
									Main.dust[num6].alpha = 100;
									Main.dust[num6].noGravity = true;
								}
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
							}
						}
						else
						{
							for (int num7 = 0; num7 < 10; num7++)
							{
								int num8 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 35);
								Main.dust[num8].velocity.Y -= 1.5f;
								Main.dust[num8].velocity.X *= 2.5f;
								Main.dust[num8].scale = 1.3f;
								Main.dust[num8].alpha = 100;
								Main.dust[num8].noGravity = true;
							}
							SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
						}
					}
				}
				if (!wet)
				{
					lavaWet = false;
					honeyWet = false;
					shimmerWet = false;
				}
				if (wetCount > 0)
				{
					wetCount--;
				}
			}
			if (shimmerWet)
			{
				Shimmer();
			}
			oldPosition = position;
			oldDirection = direction;
			HandleMovement(wetVelocity, out overrideWidth, out var overrideHeight);
			if (AutomaticallyChangesDirection())
			{
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
			}
			if (!active)
			{
				return;
			}
			ProjLight();
			if (!npcProj && friendly && Main.player[owner].magicQuiver && extraUpdates < 1 && arrow)
			{
				extraUpdates = 1;
			}
			if (type == 2 || type == 82)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100);
			}
			else if (type == 172)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 135, 0f, 0f, 100);
			}
			else if (type == 103)
			{
				int num9 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 75, 0f, 0f, 100);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num9].noGravity = true;
					Main.dust[num9].scale *= 2f;
				}
			}
			else if (type == 278)
			{
				int num10 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 169, 0f, 0f, 100);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num10].noGravity = true;
					Main.dust[num10].scale *= 1.5f;
				}
			}
			else if (type == 4)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 14, 0f, 0f, 150, default(Color), 1.1f);
				}
			}
			else if (type == 5)
			{
				overrideHeight = Main.rand.Next(3);
				Dust.NewDust(Type: overrideHeight switch
				{
					0 => 15, 
					1 => 57, 
					_ => 58, 
				}, Position: position, Width: width, Height: height, SpeedX: velocity.X * 0.5f, SpeedY: velocity.Y * 0.5f, Alpha: 150, newColor: default(Color), Scale: 1.2f);
			}
			Damage();
			if (type == 434 && localAI[0] == 0f && numUpdates == 0)
			{
				extraUpdates = 1;
				velocity = Vector2.Zero;
				localAI[0] = 1f;
				localAI[1] = 0.9999f;
				netUpdate = true;
			}
			if (Main.netMode != 1 && (type == 99 || type == 1013 || type == 655 || type == 727 || type == 1014 || type == 1021))
			{
				Collision.SwitchTiles(position, width, height, oldPosition, 3);
			}
			if (ProjectileID.Sets.TrailingMode[type] == 0)
			{
				for (int num12 = oldPos.Length - 1; num12 > 0; num12--)
				{
					oldPos[num12] = oldPos[num12 - 1];
				}
				oldPos[0] = position;
			}
			else if (ProjectileID.Sets.TrailingMode[type] == 1)
			{
				if (frameCounter == 0 || oldPos[0] == Vector2.Zero)
				{
					for (int num13 = oldPos.Length - 1; num13 > 0; num13--)
					{
						oldPos[num13] = oldPos[num13 - 1];
					}
					oldPos[0] = position;
					if (velocity == Vector2.Zero && type == 466)
					{
						float num14 = rotation + (float)Math.PI / 2f + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
						float num15 = (float)Main.rand.NextDouble() * 2f + 2f;
						((Vector2)(ref vector))._002Ector((float)Math.Cos(num14) * num15, (float)Math.Sin(num14) * num15);
						int num16 = Dust.NewDust(oldPos[oldPos.Length - 1], 0, 0, 229, vector.X, vector.Y);
						Main.dust[num16].noGravity = true;
						Main.dust[num16].scale = 1.7f;
					}
					if (velocity == Vector2.Zero && type == 580)
					{
						float num17 = rotation + (float)Math.PI / 2f + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
						float num18 = (float)Main.rand.NextDouble() * 2f + 2f;
						((Vector2)(ref vector2))._002Ector((float)Math.Cos(num17) * num18, (float)Math.Sin(num17) * num18);
						int num19 = Dust.NewDust(oldPos[oldPos.Length - 1], 0, 0, 229, vector2.X, vector2.Y);
						Main.dust[num19].noGravity = true;
						Main.dust[num19].scale = 1.7f;
					}
				}
			}
			else if (ProjectileID.Sets.TrailingMode[type] == 2)
			{
				for (int num20 = oldPos.Length - 1; num20 > 0; num20--)
				{
					oldPos[num20] = oldPos[num20 - 1];
					oldRot[num20] = oldRot[num20 - 1];
					oldSpriteDirection[num20] = oldSpriteDirection[num20 - 1];
				}
				oldPos[0] = position;
				oldRot[0] = rotation;
				oldSpriteDirection[0] = spriteDirection;
			}
			else if (ProjectileID.Sets.TrailingMode[type] == 3)
			{
				for (int num21 = oldPos.Length - 1; num21 > 0; num21--)
				{
					oldPos[num21] = oldPos[num21 - 1];
					oldRot[num21] = oldRot[num21 - 1];
					oldSpriteDirection[num21] = oldSpriteDirection[num21 - 1];
				}
				oldPos[0] = position;
				oldRot[0] = rotation;
				oldSpriteDirection[0] = spriteDirection;
				float amount = 0.65f;
				int num23 = 1;
				for (int num24 = 0; num24 < num23; num24++)
				{
					for (int num25 = oldPos.Length - 1; num25 > 0; num25--)
					{
						if (!(oldPos[num25] == Vector2.Zero))
						{
							if (oldPos[num25].Distance(oldPos[num25 - 1]) > 2f)
							{
								oldPos[num25] = Vector2.Lerp(oldPos[num25], oldPos[num25 - 1], amount);
							}
							oldRot[num25] = (oldPos[num25 - 1] - oldPos[num25]).SafeNormalize(Vector2.Zero).ToRotation();
						}
					}
				}
			}
			else if (ProjectileID.Sets.TrailingMode[type] == 4)
			{
				Vector2 vector3 = Main.player[owner].position - Main.player[owner].oldPosition;
				for (int num26 = oldPos.Length - 1; num26 > 0; num26--)
				{
					oldPos[num26] = oldPos[num26 - 1];
					oldRot[num26] = oldRot[num26 - 1];
					oldSpriteDirection[num26] = oldSpriteDirection[num26 - 1];
					if (numUpdates == 0 && oldPos[num26] != Vector2.Zero)
					{
						ref Vector2 reference = ref oldPos[num26];
						reference += vector3;
					}
				}
				oldPos[0] = position;
				oldRot[0] = rotation;
				oldSpriteDirection[0] = spriteDirection;
			}
			else if (ProjectileID.Sets.TrailingMode[type] == 5)
			{
				for (int num27 = oldPos.Length - 1; num27 > 0; num27--)
				{
					oldPos[num27] = oldPos[num27 - 1];
					oldRot[num27] = oldRot[num27 - 1];
					oldSpriteDirection[num27] = oldSpriteDirection[num27 - 1];
				}
				oldPos[0] = position;
				oldRot[0] = velocity.ToRotation();
				oldSpriteDirection[0] = spriteDirection;
			}
			if (ProjectileID.Sets.IsADD2Turret[type] && DD2Event.Ongoing)
			{
				timeLeft++;
			}
			timeLeft--;
			if (timeLeft <= 0)
			{
				Kill();
			}
			if (penetrate == 0)
			{
				Kill();
			}
			if (!active || owner != Main.myPlayer)
			{
				continue;
			}
			if (netUpdate2)
			{
				netUpdate = true;
			}
			if (!active)
			{
				netSpam = 0;
			}
			if (netUpdate)
			{
				if (netSpam < 60)
				{
					netSpam += 5;
					NetMessage.SendData(27, -1, -1, null, i);
					netUpdate2 = false;
				}
				else
				{
					netUpdate2 = true;
				}
			}
			if (netSpam > 0)
			{
				netSpam--;
			}
		}
		netUpdate = false;
	}

	private bool AutomaticallyChangesDirection()
	{
		if ((aiStyle != 3 || ai[0] != 1f) && (aiStyle != 7 || ai[0] != 1f) && (aiStyle != 13 || ai[0] != 1f) && aiStyle != 65 && aiStyle != 69 && aiStyle != 114 && aiStyle != 123 && aiStyle != 112 && !manualDirectionChange && aiStyle != 67 && aiStyle != 26 && aiStyle != 15)
		{
			return aiStyle != 150;
		}
		return false;
	}

	private void UpdateEnchantmentVisuals()
	{
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_013a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		if (npcProj)
		{
			return;
		}
		Vector2 boxPosition = position;
		int boxWidth = width;
		int boxHeight = height;
		if (aiStyle == 190 || aiStyle == 191)
		{
			for (float num = -(float)Math.PI / 4f; num <= (float)Math.PI / 4f; num += (float)Math.PI / 2f)
			{
				Rectangle r = Utils.CenteredRectangle(base.Center + (rotation + num).ToRotationVector2() * 70f * scale, new Vector2(60f * scale, 60f * scale));
				EmitEnchantmentVisualsAt(r.TopLeft(), r.Width, r.Height);
			}
		}
		else if (ProjectileID.Sets.IsAWhip[type])
		{
			WhipPointsForCollision.Clear();
			FillWhipControlPoints(this, WhipPointsForCollision);
			Vector2 vector = WhipPointsForCollision[WhipPointsForCollision.Count - 1];
			EmitEnchantmentVisualsAt(new Vector2(vector.X - (float)(width / 2), vector.Y - (float)(height / 2)), width, height);
		}
		else
		{
			EmitEnchantmentVisualsAt(boxPosition, boxWidth, boxHeight);
		}
	}

	public void EmitEnchantmentVisualsAt(Vector2 boxPosition, int boxWidth, int boxHeight)
	{
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0173: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_021c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0232: Unknown result type (might be due to invalid IL or missing references)
		//IL_0238: Unknown result type (might be due to invalid IL or missing references)
		//IL_026e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0278: Unknown result type (might be due to invalid IL or missing references)
		//IL_027d: Unknown result type (might be due to invalid IL or missing references)
		//IL_029b: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_031e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0353: Unknown result type (might be due to invalid IL or missing references)
		//IL_0359: Unknown result type (might be due to invalid IL or missing references)
		//IL_037d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0387: Unknown result type (might be due to invalid IL or missing references)
		//IL_038c: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0403: Unknown result type (might be due to invalid IL or missing references)
		//IL_0427: Unknown result type (might be due to invalid IL or missing references)
		//IL_0431: Unknown result type (might be due to invalid IL or missing references)
		//IL_0436: Unknown result type (might be due to invalid IL or missing references)
		//IL_0476: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_051f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0535: Unknown result type (might be due to invalid IL or missing references)
		//IL_053b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0628: Unknown result type (might be due to invalid IL or missing references)
		//IL_062d: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_063d: Unknown result type (might be due to invalid IL or missing references)
		//IL_064c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0651: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_08de: Unknown result type (might be due to invalid IL or missing references)
		//IL_0914: Unknown result type (might be due to invalid IL or missing references)
		//IL_091e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0923: Unknown result type (might be due to invalid IL or missing references)
		//IL_067a: Unknown result type (might be due to invalid IL or missing references)
		//IL_067f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0686: Unknown result type (might be due to invalid IL or missing references)
		//IL_0690: Unknown result type (might be due to invalid IL or missing references)
		//IL_0696: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b7: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[owner];
		if (player.frostBurn && (melee || ranged) && friendly && !hostile && !noEnchantments && Main.rand.Next(2 * (1 + extraUpdates)) == 0)
		{
			int num = Dust.NewDust(boxPosition, boxWidth, boxHeight, 135, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 2f);
			Main.dust[num].noGravity = true;
			Dust obj = Main.dust[num];
			obj.velocity *= 0.7f;
			Main.dust[num].velocity.Y -= 0.5f;
		}
		if (melee && player.magmaStone && !noEnchantments && Main.rand.Next(3) != 0)
		{
			int num7 = Dust.NewDust(new Vector2(boxPosition.X - 4f, boxPosition.Y - 4f), boxWidth + 8, boxHeight + 8, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
			if (Main.rand.Next(2) == 0)
			{
				Main.dust[num7].scale = 1.5f;
			}
			Main.dust[num7].noGravity = true;
			Main.dust[num7].velocity.X *= 2f;
			Main.dust[num7].velocity.Y *= 2f;
		}
		if ((!melee && !ProjectileID.Sets.IsAWhip[type]) || player.meleeEnchant <= 0 || noEnchantments)
		{
			return;
		}
		if (player.meleeEnchant == 1 && Main.rand.Next(3) == 0)
		{
			int num8 = Dust.NewDust(boxPosition, boxWidth, boxHeight, 171, 0f, 0f, 100);
			Main.dust[num8].noGravity = true;
			Main.dust[num8].fadeIn = 1.5f;
			Dust obj2 = Main.dust[num8];
			obj2.velocity *= 0.25f;
		}
		if (player.meleeEnchant == 1)
		{
			if (Main.rand.Next(3) == 0)
			{
				int num9 = Dust.NewDust(boxPosition, boxWidth, boxHeight, 171, 0f, 0f, 100);
				Main.dust[num9].noGravity = true;
				Main.dust[num9].fadeIn = 1.5f;
				Dust obj3 = Main.dust[num9];
				obj3.velocity *= 0.25f;
			}
		}
		else if (player.meleeEnchant == 2)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num10 = Dust.NewDust(boxPosition, boxWidth, boxHeight, 75, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 2.5f);
				Main.dust[num10].noGravity = true;
				Dust obj4 = Main.dust[num10];
				obj4.velocity *= 0.7f;
				Main.dust[num10].velocity.Y -= 0.5f;
			}
		}
		else if (player.meleeEnchant == 3)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num11 = Dust.NewDust(boxPosition, boxWidth, boxHeight, 6, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 2.5f);
				Main.dust[num11].noGravity = true;
				Dust obj5 = Main.dust[num11];
				obj5.velocity *= 0.7f;
				Main.dust[num11].velocity.Y -= 0.5f;
			}
		}
		else if (player.meleeEnchant == 4)
		{
			int num12 = 0;
			if (Main.rand.Next(2) == 0)
			{
				num12 = Dust.NewDust(boxPosition, boxWidth, boxHeight, 57, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 1.1f);
				Main.dust[num12].noGravity = true;
				Main.dust[num12].velocity.X /= 2f;
				Main.dust[num12].velocity.Y /= 2f;
			}
		}
		else if (player.meleeEnchant == 5)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num13 = Dust.NewDust(boxPosition, boxWidth, boxHeight, 169, 0f, 0f, 100);
				Main.dust[num13].velocity.X += direction;
				Main.dust[num13].velocity.Y += 0.2f;
				Main.dust[num13].noGravity = true;
			}
		}
		else if (player.meleeEnchant == 6)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num14 = Dust.NewDust(boxPosition, boxWidth, boxHeight, 135, 0f, 0f, 100);
				Main.dust[num14].velocity.X += direction;
				Main.dust[num14].velocity.Y += 0.2f;
				Main.dust[num14].noGravity = true;
			}
		}
		else if (player.meleeEnchant == 7)
		{
			Vector2 vector = velocity;
			if (((Vector2)(ref vector)).Length() > 4f)
			{
				vector *= 4f / ((Vector2)(ref vector)).Length();
			}
			if (Main.rand.Next(20) == 0)
			{
				int num2 = Main.rand.Next(139, 143);
				int num3 = Dust.NewDust(boxPosition, boxWidth, boxHeight, num2, vector.X, vector.Y, 0, default(Color), 1.2f);
				Main.dust[num3].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num3].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num3].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
				Main.dust[num3].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
				Main.dust[num3].scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
			}
			if (Main.rand.Next(40) == 0)
			{
				int num4 = Main.rand.Next(276, 283);
				int num5 = Gore.NewGore(position, vector, num4);
				Main.gore[num5].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.gore[num5].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.gore[num5].scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
				Main.gore[num5].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
				Main.gore[num5].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
			}
		}
		else if (player.meleeEnchant == 8 && Main.rand.Next(4) == 0)
		{
			int num6 = Dust.NewDust(boxPosition, boxWidth, boxHeight, 46, 0f, 0f, 100);
			Main.dust[num6].noGravity = true;
			Main.dust[num6].fadeIn = 1.5f;
			Dust obj6 = Main.dust[num6];
			obj6.velocity *= 0.25f;
		}
	}

	private void HandleMovement(Vector2 wetVelocity, out int overrideWidth, out int overrideHeight)
	{
		//IL_50ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5120: Unknown result type (might be due to invalid IL or missing references)
		//IL_5126: Unknown result type (might be due to invalid IL or missing references)
		//IL_5136: Unknown result type (might be due to invalid IL or missing references)
		//IL_513b: Unknown result type (might be due to invalid IL or missing references)
		//IL_513e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5143: Unknown result type (might be due to invalid IL or missing references)
		//IL_51eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_51f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0363: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_0402: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b22: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b19: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b27: Unknown result type (might be due to invalid IL or missing references)
		//IL_155d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1560: Unknown result type (might be due to invalid IL or missing references)
		//IL_194e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c08: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c12: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c17: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c22: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c27: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c29: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c33: Unknown result type (might be due to invalid IL or missing references)
		//IL_19fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a04: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a09: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a14: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a19: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c40: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c43: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c51: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c56: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ccd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cf4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c93: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ddb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dde: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e01: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e06: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e13: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d49: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d51: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d54: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d62: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d67: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d77: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d89: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1407: Unknown result type (might be due to invalid IL or missing references)
		//IL_140c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fe6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ffe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1003: Unknown result type (might be due to invalid IL or missing references)
		//IL_1008: Unknown result type (might be due to invalid IL or missing references)
		//IL_100d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e39: Unknown result type (might be due to invalid IL or missing references)
		//IL_0daf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1422: Unknown result type (might be due to invalid IL or missing references)
		//IL_1425: Unknown result type (might be due to invalid IL or missing references)
		//IL_1434: Unknown result type (might be due to invalid IL or missing references)
		//IL_1439: Unknown result type (might be due to invalid IL or missing references)
		//IL_143c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1441: Unknown result type (might be due to invalid IL or missing references)
		//IL_1443: Unknown result type (might be due to invalid IL or missing references)
		//IL_1448: Unknown result type (might be due to invalid IL or missing references)
		//IL_1027: Unknown result type (might be due to invalid IL or missing references)
		//IL_102c: Unknown result type (might be due to invalid IL or missing references)
		//IL_102e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1034: Unknown result type (might be due to invalid IL or missing references)
		//IL_103a: Unknown result type (might be due to invalid IL or missing references)
		//IL_103c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e65: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e68: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e77: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e84: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e86: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_14be: Unknown result type (might be due to invalid IL or missing references)
		//IL_14c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1457: Unknown result type (might be due to invalid IL or missing references)
		//IL_145e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f01: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f08: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ea1: Unknown result type (might be due to invalid IL or missing references)
		//IL_14d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_14d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1474: Unknown result type (might be due to invalid IL or missing references)
		//IL_123b: Unknown result type (might be due to invalid IL or missing references)
		//IL_123d: Unknown result type (might be due to invalid IL or missing references)
		//IL_124d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f13: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_1481: Unknown result type (might be due to invalid IL or missing references)
		//IL_1493: Unknown result type (might be due to invalid IL or missing references)
		//IL_149a: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_1058: Unknown result type (might be due to invalid IL or missing references)
		//IL_105a: Unknown result type (might be due to invalid IL or missing references)
		//IL_127e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1267: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f30: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ec4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0edd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ef0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1503: Unknown result type (might be due to invalid IL or missing references)
		//IL_1071: Unknown result type (might be due to invalid IL or missing references)
		//IL_1075: Unknown result type (might be due to invalid IL or missing references)
		//IL_107a: Unknown result type (might be due to invalid IL or missing references)
		//IL_107c: Unknown result type (might be due to invalid IL or missing references)
		//IL_107e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1089: Unknown result type (might be due to invalid IL or missing references)
		//IL_108e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1090: Unknown result type (might be due to invalid IL or missing references)
		//IL_1092: Unknown result type (might be due to invalid IL or missing references)
		//IL_1094: Unknown result type (might be due to invalid IL or missing references)
		//IL_1099: Unknown result type (might be due to invalid IL or missing references)
		//IL_109c: Unknown result type (might be due to invalid IL or missing references)
		//IL_109e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1298: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f46: Unknown result type (might be due to invalid IL or missing references)
		//IL_05af: Unknown result type (might be due to invalid IL or missing references)
		//IL_1510: Unknown result type (might be due to invalid IL or missing references)
		//IL_151e: Unknown result type (might be due to invalid IL or missing references)
		//IL_152b: Unknown result type (might be due to invalid IL or missing references)
		//IL_152d: Unknown result type (might be due to invalid IL or missing references)
		//IL_152f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1534: Unknown result type (might be due to invalid IL or missing references)
		//IL_153f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1551: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_10da: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_12cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_12cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_12db: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f53: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f61: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f70: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f72: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f77: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f82: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f94: Unknown result type (might be due to invalid IL or missing references)
		//IL_121c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1221: Unknown result type (might be due to invalid IL or missing references)
		//IL_1223: Unknown result type (might be due to invalid IL or missing references)
		//IL_1225: Unknown result type (might be due to invalid IL or missing references)
		//IL_1227: Unknown result type (might be due to invalid IL or missing references)
		//IL_122c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1200: Unknown result type (might be due to invalid IL or missing references)
		//IL_1150: Unknown result type (might be due to invalid IL or missing references)
		//IL_1157: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1351: Unknown result type (might be due to invalid IL or missing references)
		//IL_1358: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a32: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a38: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a42: Unknown result type (might be due to invalid IL or missing references)
		//IL_1162: Unknown result type (might be due to invalid IL or missing references)
		//IL_1169: Unknown result type (might be due to invalid IL or missing references)
		//IL_1106: Unknown result type (might be due to invalid IL or missing references)
		//IL_1363: Unknown result type (might be due to invalid IL or missing references)
		//IL_136a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1307: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_120c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1212: Unknown result type (might be due to invalid IL or missing references)
		//IL_117f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1113: Unknown result type (might be due to invalid IL or missing references)
		//IL_1125: Unknown result type (might be due to invalid IL or missing references)
		//IL_112c: Unknown result type (might be due to invalid IL or missing references)
		//IL_113f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1380: Unknown result type (might be due to invalid IL or missing references)
		//IL_1314: Unknown result type (might be due to invalid IL or missing references)
		//IL_1326: Unknown result type (might be due to invalid IL or missing references)
		//IL_132d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1340: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a77: Unknown result type (might be due to invalid IL or missing references)
		//IL_1195: Unknown result type (might be due to invalid IL or missing references)
		//IL_1396: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bab: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bce: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1abf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a95: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_11bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_11bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_13be: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c19: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c20: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c25: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b76: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b81: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b86: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b66: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b69: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b47: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c80: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d63: Unknown result type (might be due to invalid IL or missing references)
		//IL_1caf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e66: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d92: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d72: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e98: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e75: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cde: Unknown result type (might be due to invalid IL or missing references)
		//IL_2282: Unknown result type (might be due to invalid IL or missing references)
		//IL_2034: Unknown result type (might be due to invalid IL or missing references)
		//IL_200c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2012: Unknown result type (might be due to invalid IL or missing references)
		//IL_2017: Unknown result type (might be due to invalid IL or missing references)
		//IL_201c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_2296: Unknown result type (might be due to invalid IL or missing references)
		//IL_2060: Unknown result type (might be due to invalid IL or missing references)
		//IL_2048: Unknown result type (might be due to invalid IL or missing references)
		//IL_2094: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d21: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d28: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2331: Unknown result type (might be due to invalid IL or missing references)
		//IL_2313: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_22c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2074: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e04: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e10: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e24: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e29: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_23be: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2348: Unknown result type (might be due to invalid IL or missing references)
		//IL_20dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_210b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2110: Unknown result type (might be due to invalid IL or missing references)
		//IL_211d: Unknown result type (might be due to invalid IL or missing references)
		//IL_212d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2133: Unknown result type (might be due to invalid IL or missing references)
		//IL_2135: Unknown result type (might be due to invalid IL or missing references)
		//IL_213a: Unknown result type (might be due to invalid IL or missing references)
		//IL_213c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2157: Unknown result type (might be due to invalid IL or missing references)
		//IL_215c: Unknown result type (might be due to invalid IL or missing references)
		//IL_217d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2182: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f05: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f11: Unknown result type (might be due to invalid IL or missing references)
		//IL_21f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_21f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_221e: Unknown result type (might be due to invalid IL or missing references)
		//IL_223f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2244: Unknown result type (might be due to invalid IL or missing references)
		//IL_225b: Unknown result type (might be due to invalid IL or missing references)
		//IL_23d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_23dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f74: Unknown result type (might be due to invalid IL or missing references)
		//IL_2452: Unknown result type (might be due to invalid IL or missing references)
		//IL_2458: Unknown result type (might be due to invalid IL or missing references)
		//IL_245d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2462: Unknown result type (might be due to invalid IL or missing references)
		//IL_2468: Unknown result type (might be due to invalid IL or missing references)
		//IL_246d: Unknown result type (might be due to invalid IL or missing references)
		//IL_248f: Unknown result type (might be due to invalid IL or missing references)
		//IL_250b: Unknown result type (might be due to invalid IL or missing references)
		//IL_24c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_259a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2537: Unknown result type (might be due to invalid IL or missing references)
		//IL_251f: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_254e: Unknown result type (might be due to invalid IL or missing references)
		//IL_255b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2627: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2650: Unknown result type (might be due to invalid IL or missing references)
		//IL_2636: Unknown result type (might be due to invalid IL or missing references)
		//IL_2659: Unknown result type (might be due to invalid IL or missing references)
		//IL_2672: Unknown result type (might be due to invalid IL or missing references)
		//IL_28de: Unknown result type (might be due to invalid IL or missing references)
		//IL_294b: Unknown result type (might be due to invalid IL or missing references)
		//IL_290a: Unknown result type (might be due to invalid IL or missing references)
		//IL_28f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_27cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2977: Unknown result type (might be due to invalid IL or missing references)
		//IL_295a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2921: Unknown result type (might be due to invalid IL or missing references)
		//IL_27fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_27de: Unknown result type (might be due to invalid IL or missing references)
		//IL_29e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2983: Unknown result type (might be due to invalid IL or missing references)
		//IL_280d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a27: Unknown result type (might be due to invalid IL or missing references)
		//IL_29f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_299a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2832: Unknown result type (might be due to invalid IL or missing references)
		//IL_2838: Unknown result type (might be due to invalid IL or missing references)
		//IL_283d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2842: Unknown result type (might be due to invalid IL or missing references)
		//IL_284b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2858: Unknown result type (might be due to invalid IL or missing references)
		//IL_285d: Unknown result type (might be due to invalid IL or missing references)
		//IL_285f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2866: Unknown result type (might be due to invalid IL or missing references)
		//IL_286b: Unknown result type (might be due to invalid IL or missing references)
		//IL_286f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2879: Unknown result type (might be due to invalid IL or missing references)
		//IL_287e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2885: Unknown result type (might be due to invalid IL or missing references)
		//IL_288a: Unknown result type (might be due to invalid IL or missing references)
		//IL_288c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2891: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ada: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a33: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_28ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_28b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_28bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b57: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ae6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2abd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b96: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b70: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b02: Unknown result type (might be due to invalid IL or missing references)
		//IL_2baf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bef: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c11: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cca: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cad: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c56: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d37: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d49: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fde: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2de1: Unknown result type (might be due to invalid IL or missing references)
		//IL_300a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fed: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e10: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e21: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e59: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e64: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e69: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e70: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e75: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e94: Unknown result type (might be due to invalid IL or missing references)
		//IL_30ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_301c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_311a: Unknown result type (might be due to invalid IL or missing references)
		//IL_30fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f49: Unknown result type (might be due to invalid IL or missing references)
		//IL_3199: Unknown result type (might be due to invalid IL or missing references)
		//IL_319e: Unknown result type (might be due to invalid IL or missing references)
		//IL_31a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_31a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_317a: Unknown result type (might be due to invalid IL or missing references)
		//IL_317f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3186: Unknown result type (might be due to invalid IL or missing references)
		//IL_318b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3190: Unknown result type (might be due to invalid IL or missing references)
		//IL_3126: Unknown result type (might be due to invalid IL or missing references)
		//IL_30cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f91: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f96: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_31ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_31b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_31bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_313d: Unknown result type (might be due to invalid IL or missing references)
		//IL_321d: Unknown result type (might be due to invalid IL or missing references)
		//IL_33e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3231: Unknown result type (might be due to invalid IL or missing references)
		//IL_3453: Unknown result type (might be due to invalid IL or missing references)
		//IL_340f: Unknown result type (might be due to invalid IL or missing references)
		//IL_33f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3262: Unknown result type (might be due to invalid IL or missing references)
		//IL_3504: Unknown result type (might be due to invalid IL or missing references)
		//IL_349e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3426: Unknown result type (might be due to invalid IL or missing references)
		//IL_328e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3276: Unknown result type (might be due to invalid IL or missing references)
		//IL_35b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3545: Unknown result type (might be due to invalid IL or missing references)
		//IL_3518: Unknown result type (might be due to invalid IL or missing references)
		//IL_347e: Unknown result type (might be due to invalid IL or missing references)
		//IL_32a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3657: Unknown result type (might be due to invalid IL or missing references)
		//IL_35f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_35c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3559: Unknown result type (might be due to invalid IL or missing references)
		//IL_34cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3683: Unknown result type (might be due to invalid IL or missing references)
		//IL_366b: Unknown result type (might be due to invalid IL or missing references)
		//IL_360b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a23: Unknown result type (might be due to invalid IL or missing references)
		//IL_369a: Unknown result type (might be due to invalid IL or missing references)
		//IL_36d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_32f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3306: Unknown result type (might be due to invalid IL or missing references)
		//IL_330b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3310: Unknown result type (might be due to invalid IL or missing references)
		//IL_338d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3393: Unknown result type (might be due to invalid IL or missing references)
		//IL_3398: Unknown result type (might be due to invalid IL or missing references)
		//IL_339d: Unknown result type (might be due to invalid IL or missing references)
		//IL_33b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_33b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_33bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a52: Unknown result type (might be due to invalid IL or missing references)
		//IL_3739: Unknown result type (might be due to invalid IL or missing references)
		//IL_373e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3705: Unknown result type (might be due to invalid IL or missing references)
		//IL_36ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_3774: Unknown result type (might be due to invalid IL or missing references)
		//IL_377a: Unknown result type (might be due to invalid IL or missing references)
		//IL_377f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3784: Unknown result type (might be due to invalid IL or missing references)
		//IL_378a: Unknown result type (might be due to invalid IL or missing references)
		//IL_378c: Unknown result type (might be due to invalid IL or missing references)
		//IL_379e: Unknown result type (might be due to invalid IL or missing references)
		//IL_37a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_37ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_371c: Unknown result type (might be due to invalid IL or missing references)
		//IL_332a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3339: Unknown result type (might be due to invalid IL or missing references)
		//IL_3938: Unknown result type (might be due to invalid IL or missing references)
		//IL_397e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3966: Unknown result type (might be due to invalid IL or missing references)
		//IL_39af: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a42: Unknown result type (might be due to invalid IL or missing references)
		//IL_38af: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ad6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a56: Unknown result type (might be due to invalid IL or missing references)
		//IL_38e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_38c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3be4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b66: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b02: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aea: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a85: Unknown result type (might be due to invalid IL or missing references)
		//IL_38f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b75: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b19: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c16: Unknown result type (might be due to invalid IL or missing references)
		//IL_385f: Unknown result type (might be due to invalid IL or missing references)
		//IL_386b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d25: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d33: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c22: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f15: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c97: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c31: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c37: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c82: Unknown result type (might be due to invalid IL or missing references)
		//IL_4134: Unknown result type (might be due to invalid IL or missing references)
		//IL_4052: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f21: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cde: Unknown result type (might be due to invalid IL or missing references)
		//IL_41bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_413d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f33: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f39: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f84: Unknown result type (might be due to invalid IL or missing references)
		//IL_42ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_41ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_41f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_420e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4238: Unknown result type (might be due to invalid IL or missing references)
		//IL_414c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4152: Unknown result type (might be due to invalid IL or missing references)
		//IL_419d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4317: Unknown result type (might be due to invalid IL or missing references)
		//IL_42d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_42c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4264: Unknown result type (might be due to invalid IL or missing references)
		//IL_424c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dce: Unknown result type (might be due to invalid IL or missing references)
		//IL_4343: Unknown result type (might be due to invalid IL or missing references)
		//IL_4326: Unknown result type (might be due to invalid IL or missing references)
		//IL_42f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_427b: Unknown result type (might be due to invalid IL or missing references)
		//IL_40a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_40a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_40ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_40b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fe1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fe3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e13: Unknown result type (might be due to invalid IL or missing references)
		//IL_3def: Unknown result type (might be due to invalid IL or missing references)
		//IL_434f: Unknown result type (might be due to invalid IL or missing references)
		//IL_40d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_40d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_40be: Unknown result type (might be due to invalid IL or missing references)
		//IL_40c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_40ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_4006: Unknown result type (might be due to invalid IL or missing references)
		//IL_400b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ff1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ff8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ffd: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e64: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e34: Unknown result type (might be due to invalid IL or missing references)
		//IL_4457: Unknown result type (might be due to invalid IL or missing references)
		//IL_445d: Unknown result type (might be due to invalid IL or missing references)
		//IL_436b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4492: Unknown result type (might be due to invalid IL or missing references)
		//IL_4622: Unknown result type (might be due to invalid IL or missing references)
		//IL_4628: Unknown result type (might be due to invalid IL or missing references)
		//IL_4595: Unknown result type (might be due to invalid IL or missing references)
		//IL_459b: Unknown result type (might be due to invalid IL or missing references)
		//IL_45a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_45a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_45af: Unknown result type (might be due to invalid IL or missing references)
		//IL_45ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_45bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_45c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_45d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_44be: Unknown result type (might be due to invalid IL or missing references)
		//IL_44a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_466a: Unknown result type (might be due to invalid IL or missing references)
		//IL_45df: Unknown result type (might be due to invalid IL or missing references)
		//IL_44d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4502: Unknown result type (might be due to invalid IL or missing references)
		//IL_451a: Unknown result type (might be due to invalid IL or missing references)
		//IL_43f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4696: Unknown result type (might be due to invalid IL or missing references)
		//IL_467e: Unknown result type (might be due to invalid IL or missing references)
		//IL_45f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_441a: Unknown result type (might be due to invalid IL or missing references)
		//IL_46aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_4604: Unknown result type (might be due to invalid IL or missing references)
		//IL_4618: Unknown result type (might be due to invalid IL or missing references)
		//IL_461a: Unknown result type (might be due to invalid IL or missing references)
		//IL_48a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_476b: Unknown result type (might be due to invalid IL or missing references)
		//IL_46f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4709: Unknown result type (might be due to invalid IL or missing references)
		//IL_48d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_48b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_4de9: Unknown result type (might be due to invalid IL or missing references)
		//IL_48e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_502a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5034: Unknown result type (might be due to invalid IL or missing references)
		//IL_5039: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e33: Unknown result type (might be due to invalid IL or missing references)
		//IL_4df8: Unknown result type (might be due to invalid IL or missing references)
		//IL_49e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_48f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_47c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_47ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_47cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_47d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_50d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_50d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_50de: Unknown result type (might be due to invalid IL or missing references)
		//IL_50e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_5074: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a16: Unknown result type (might be due to invalid IL or missing references)
		//IL_49ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_483f: Unknown result type (might be due to invalid IL or missing references)
		//IL_50a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_5083: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ff3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ffd: Unknown result type (might be due to invalid IL or missing references)
		//IL_5002: Unknown result type (might be due to invalid IL or missing references)
		//IL_4abe: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_49fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_486b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4853: Unknown result type (might be due to invalid IL or missing references)
		//IL_480b: Unknown result type (might be due to invalid IL or missing references)
		//IL_50a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b04: Unknown result type (might be due to invalid IL or missing references)
		//IL_4acd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4882: Unknown result type (might be due to invalid IL or missing references)
		//IL_481f: Unknown result type (might be due to invalid IL or missing references)
		//IL_50bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ba8: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b54: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b16: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a41: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a47: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a77: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b75: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b77: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b68: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ca9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c57: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4be0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c63: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d37: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ce1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d97: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d49: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_4da3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dba: Unknown result type (might be due to invalid IL or missing references)
		bool flag = false;
		overrideWidth = -1;
		overrideHeight = -1;
		bool flag7 = false;
		bool? flag8 = ProjectileID.Sets.ForcePlateDetection[type];
		bool flag9 = flag8.HasValue && !flag8.Value;
		bool flag10 = flag8.HasValue && flag8.Value;
		if (tileCollide)
		{
			Vector2 lastVelocity = velocity;
			bool flag11 = true;
			Vector2? vector = null;
			if (Main.projPet[type])
			{
				flag11 = false;
				if (Main.player[owner].position.Y + (float)Main.player[owner].height - 12f > position.Y + (float)height)
				{
					flag11 = true;
				}
			}
			if (type == 500)
			{
				flag11 = false;
				if (Main.player[owner].Bottom.Y > base.Bottom.Y + 4f)
				{
					flag11 = true;
				}
			}
			if (type == 653 || type == 668)
			{
				flag11 = false;
				if (Main.player[owner].Bottom.Y > base.Bottom.Y + 4f)
				{
					flag11 = true;
				}
			}
			if (aiStyle == 62)
			{
				flag11 = true;
			}
			if (aiStyle == 66)
			{
				flag11 = true;
			}
			if (type == 317)
			{
				flag11 = true;
			}
			if (type == 373)
			{
				flag11 = true;
			}
			if (aiStyle == 53)
			{
				flag11 = false;
			}
			if (type == 9 || type == 12 || type == 15 || type == 13)
			{
				flag11 = false;
			}
			if (aiStyle == 10 && ProjectileID.Sets.FallingBlockDoesNotFallThroughPlatforms[type])
			{
				flag11 = false;
			}
			if (type == 24)
			{
				flag11 = false;
			}
			switch (type)
			{
			case 663:
			case 665:
			case 667:
			case 677:
			case 678:
			case 679:
			case 688:
			case 689:
			case 690:
			case 691:
			case 692:
			case 693:
				flag11 = false;
				break;
			case 759:
				flag11 = true;
				break;
			case 1020:
			{
				float num = MathHelper.WrapAngle(rotation);
				flag11 = num >= (float)Math.PI / 2f || num < -(float)Math.PI / 2f;
				break;
			}
			}
			if (decidesManualFallThrough)
			{
				flag11 = shouldFallThrough;
			}
			if (type == 771 || type == 822 || type == 823 || type == 843 || type == 846 || type == 845 || type == 852)
			{
				overrideWidth = width;
				overrideHeight = 34;
				vector = new Vector2(0.75f, 0.75f);
			}
			if (type == 969)
			{
				overrideWidth = 18;
				overrideHeight = 32;
			}
			if (type == 824 || type == 839 || type == 840 || type == 850 || type == 853)
			{
				overrideWidth = width;
				overrideHeight = 58;
				vector = new Vector2(0.75f, 0.75f);
			}
			if (type == 826 || type == 830 || type == 838)
			{
				overrideWidth = width;
				overrideHeight = 38;
				vector = new Vector2(0.75f, 0.75f);
			}
			if (type == 828 || type == 829 || type == 827 || type == 844)
			{
				overrideWidth = width;
				overrideHeight = 22;
				vector = new Vector2(0.75f, 0.75f);
			}
			if (aiStyle == 29 || type == 28 || aiStyle == 49 || type == 906 || type == 903 || type == 904 || type == 910)
			{
				overrideWidth = width - 8;
				overrideHeight = height - 8;
			}
			else if (type == 250 || type == 267 || type == 297 || type == 323 || type == 3 || type == 711)
			{
				overrideWidth = 6;
				overrideHeight = 6;
			}
			else if (type == 308)
			{
				overrideWidth = 26;
				overrideHeight = height;
			}
			else if (type == 663 || type == 665 || type == 667 || type == 677 || type == 678 || type == 679 || type == 691 || type == 692 || type == 693)
			{
				overrideWidth = 16;
				overrideHeight = height;
			}
			else if (type == 688 || type == 689 || type == 690)
			{
				overrideWidth = 16;
				overrideHeight = height;
				vector = new Vector2(0.5f, 1f);
			}
			else if (type == 669 || type == 706)
			{
				overrideWidth = 10;
				overrideHeight = 10;
			}
			else if (type == 261 || type == 277)
			{
				overrideWidth = 26;
				overrideHeight = 26;
			}
			else if (type == 481 || type == 491 || type == 106 || type == 262 || type == 271 || type == 270 || type == 272 || type == 273 || type == 274 || type == 280 || type == 288 || type == 301 || type == 320 || type == 333 || type == 335 || type == 343 || type == 344 || type == 497 || type == 496 || type == 6 || type == 19 || type == 113 || type == 52 || type == 520 || type == 523 || type == 585 || type == 598 || type == 599 || type == 636 || type == 837 || type == 861 || type == 867 || type == 971 || type == 975 || type == 1000)
			{
				overrideWidth = 10;
				overrideHeight = 10;
			}
			else if (type == 514)
			{
				overrideWidth = 4;
				overrideHeight = 4;
			}
			else if (type == 248 || type == 247 || type == 507 || type == 508 || type == 662 || type == 680 || type == 685 || type == 757 || type == 928)
			{
				overrideWidth = width - 12;
				overrideHeight = height - 12;
			}
			else if (aiStyle == 18 || type == 254)
			{
				overrideWidth = width - 36;
				overrideHeight = height - 36;
			}
			else if (type == 182 || type == 190 || type == 33 || type == 229 || type == 237 || type == 243 || type == 866)
			{
				overrideWidth = width - 20;
				overrideHeight = height - 20;
			}
			else if (aiStyle == 27)
			{
				overrideWidth = width - 12;
				overrideHeight = height - 12;
			}
			else if (type == 533 && ai[0] >= 6f)
			{
				overrideWidth = width + 6;
				overrideHeight = height + 6;
			}
			else if (type == 755 && ai[0] >= 0f)
			{
				overrideWidth = width + 6;
				overrideHeight = height + 6;
			}
			else if (type == 759)
			{
				if (velocity.X != lastVelocity.X)
				{
					velocity.X = 0f - lastVelocity.X;
				}
				if (velocity.Y != lastVelocity.Y)
				{
					velocity.Y = 0f - lastVelocity.Y;
				}
			}
			else if (type == 582 || type == 634 || type == 635 || type == 902)
			{
				overrideWidth = 8;
				overrideHeight = 8;
			}
			else if (type == 617)
			{
				overrideWidth = (int)(20f * scale);
				overrideHeight = (int)(20f * scale);
			}
			else if (type == 304)
			{
				overrideWidth = 4;
				overrideHeight = 4;
			}
			else if (aiStyle == 9)
			{
				overrideWidth = 4;
				overrideHeight = 4;
			}
			else if (type == 931)
			{
				overrideWidth = 4;
				overrideHeight = 4;
			}
			Vector2 hitboxCenterFrac = (Vector2)(((_003F?)vector) ?? new Vector2(0.5f));
			int num12 = ((overrideWidth != -1) ? overrideWidth : width);
			int num23 = ((overrideHeight != -1) ? overrideHeight : height);
			if (ProjectileLoader.TileCollideStyle(this, ref num12, ref num23, ref flag11, ref hitboxCenterFrac) && ((type != 440 && type != 449 && type != 606) || ai[1] != 1f) && (type != 466 || localAI[1] != 1f) && (type != 580 || !(localAI[1] > 0f)) && (type != 640 || !(localAI[1] > 0f)))
			{
				Vector2 vector12 = position + new Vector2((float)width, (float)height) * 0.5f - new Vector2((float)num12, (float)num23) * hitboxCenterFrac;
				if (aiStyle == 10)
				{
					velocity = Collision.TileCollision(vector12, velocity, num12, num23, flag11, flag11);
					if (type >= 411 && type <= 414)
					{
						velocity = Collision.AnyCollisionWithSpecificTiles(vector12, velocity, num12, num23, TileID.Sets.Falling, evenActuated: true);
					}
				}
				else if (wet)
				{
					if (shimmerWet)
					{
						Vector2 vector20 = velocity;
						velocity = Collision.TileCollision(vector12, velocity, num12, num23, flag11, flag11);
						wetVelocity = velocity * 0.375f;
						if (velocity.X != vector20.X)
						{
							wetVelocity.X = velocity.X;
						}
						if (velocity.Y != vector20.Y)
						{
							wetVelocity.Y = velocity.Y;
						}
					}
					else if (honeyWet)
					{
						Vector2 vector21 = velocity;
						velocity = Collision.TileCollision(vector12, velocity, num12, num23, flag11, flag11);
						wetVelocity = velocity * 0.25f;
						if (velocity.X != vector21.X)
						{
							wetVelocity.X = velocity.X;
						}
						if (velocity.Y != vector21.Y)
						{
							wetVelocity.Y = velocity.Y;
						}
					}
					else
					{
						Vector2 vector22 = velocity;
						velocity = Collision.TileCollision(vector12, velocity, num12, num23, flag11, flag11);
						wetVelocity = velocity * 0.5f;
						if (velocity.X != vector22.X)
						{
							wetVelocity.X = velocity.X;
						}
						if (velocity.Y != vector22.Y)
						{
							wetVelocity.Y = velocity.Y;
						}
					}
					if (!Main.projPet[type])
					{
						Vector4 vector23 = Collision.SlopeCollision(vector12, velocity, num12, num23, 0f, fall: true);
						Vector2 vector24 = position - vector12;
						if (aiStyle == 137)
						{
							if (vector12.Y != vector23.Y)
							{
								flag = true;
							}
							if (velocity.Y != vector23.W)
							{
								flag = true;
							}
							vector12.Y = vector23.Y;
							position.Y = vector12.Y + vector24.Y;
							velocity.Y = vector23.W;
						}
						else
						{
							if (vector12.X != vector23.X)
							{
								flag = true;
							}
							if (vector12.Y != vector23.Y)
							{
								flag = true;
							}
							if (velocity.X != vector23.Z)
							{
								flag = true;
							}
							if (velocity.Y != vector23.W)
							{
								flag = true;
							}
							vector12.X = vector23.X;
							vector12.Y = vector23.Y;
							position = vector12 + vector24;
							velocity.X = vector23.Z;
							velocity.Y = vector23.W;
						}
					}
				}
				else
				{
					int num34 = Math.Min(num12, num23);
					if (num34 < 3)
					{
						num34 = 3;
					}
					if (num34 > 16)
					{
						num34 = 16;
					}
					if (((Vector2)(ref velocity)).Length() > (float)num34)
					{
						Vector2 val = Collision.TileCollision(vector12, velocity, num12, num23, flag11, flag11);
						float num45 = ((Vector2)(ref velocity)).Length();
						float num50 = num34;
						Vector2 vector25 = velocity.SafeNormalize(Vector2.Zero);
						if (val.Y == 0f)
						{
							vector25.Y = 0f;
						}
						Vector2 zero = Vector2.Zero;
						_ = Vector2.Zero;
						_ = Vector2.Zero;
						Vector2 vector2 = vector12;
						int num51 = 0;
						while (num45 > 0f)
						{
							num51++;
							if (num51 > 300)
							{
								break;
							}
							vector2 = vector12;
							float num52 = num45;
							if (num52 > num50)
							{
								num52 = num50;
							}
							num45 -= num52;
							Vector2 vector3 = vector25 * num52;
							Vector2 vector4 = Collision.TileCollision(vector12, vector3, num12, num23, flag11, flag11);
							vector12 += vector4;
							velocity = vector4;
							if (!Main.projPet[type])
							{
								Vector4 vector5 = Collision.SlopeCollision(vector12, velocity, num12, num23, 0f, fall: true);
								Vector2 vector6 = position - vector12;
								if (aiStyle == 137)
								{
									if (vector12.Y != vector5.Y)
									{
										flag = true;
									}
									if (velocity.Y != vector5.W)
									{
										flag = true;
									}
									vector12.Y = vector5.Y;
									position.Y = vector12.Y + vector6.Y;
									velocity.Y = vector5.W;
								}
								else
								{
									if (vector12.X != vector5.X)
									{
										flag = true;
									}
									if (vector12.Y != vector5.Y)
									{
										flag = true;
									}
									if (velocity.X != vector5.Z)
									{
										flag = true;
									}
									if (velocity.Y != vector5.W)
									{
										flag = true;
									}
									vector12.X = vector5.X;
									vector12.Y = vector5.Y;
									position = vector12 + vector6;
									velocity.X = vector5.Z;
									velocity.Y = vector5.W;
								}
							}
							flag7 = true;
							if (owner == Main.myPlayer && vector12 != vector2 && !flag9)
							{
								Collision.SwitchTiles(vector12, num12, num23, vector2, 4);
							}
							vector4 = velocity;
							zero += vector4;
						}
						velocity = zero;
						if (Math.Abs(velocity.X - lastVelocity.X) < 0.0001f)
						{
							velocity.X = lastVelocity.X;
						}
						if (Math.Abs(velocity.Y - lastVelocity.Y) < 0.0001f)
						{
							velocity.Y = lastVelocity.Y;
						}
						if (!Main.projPet[type])
						{
							Vector4 vector7 = Collision.SlopeCollision(vector12, velocity, num12, num23, 0f, fall: true);
							Vector2 vector8 = position - vector12;
							if (aiStyle == 137)
							{
								if (vector12.Y != vector7.Y)
								{
									flag = true;
								}
								if (velocity.Y != vector7.W)
								{
									flag = true;
								}
								vector12.Y = vector7.Y;
								position.Y = vector12.Y + vector8.Y;
								velocity.Y = vector7.W;
							}
							else
							{
								if (vector12.X != vector7.X)
								{
									flag = true;
								}
								if (vector12.Y != vector7.Y)
								{
									flag = true;
								}
								if (velocity.X != vector7.Z)
								{
									flag = true;
								}
								if (velocity.Y != vector7.W)
								{
									flag = true;
								}
								vector12.X = vector7.X;
								vector12.Y = vector7.Y;
								position = vector12 + vector8;
								velocity.X = vector7.Z;
								velocity.Y = vector7.W;
							}
						}
					}
					else
					{
						velocity = Collision.TileCollision(vector12, velocity, num12, num23, flag11, flag11);
						if (!Main.projPet[type])
						{
							Vector4 vector9 = Collision.SlopeCollision(vector12, velocity, num12, num23, 0f, fall: true);
							Vector2 vector10 = position - vector12;
							if (aiStyle == 137)
							{
								if (vector12.Y != vector9.Y)
								{
									flag = true;
								}
								if (velocity.Y != vector9.W)
								{
									flag = true;
								}
								vector12.Y = vector9.Y;
								position.Y = vector12.Y + vector10.Y;
								velocity.Y = vector9.W;
							}
							else
							{
								if (vector12.X != vector9.X)
								{
									flag = true;
								}
								if (vector12.Y != vector9.Y)
								{
									flag = true;
								}
								if (velocity.X != vector9.Z)
								{
									flag = true;
								}
								if (velocity.Y != vector9.W)
								{
									flag = true;
								}
								vector12.X = vector9.X;
								vector12.Y = vector9.Y;
								position = vector12 + vector10;
								velocity.X = vector9.Z;
								velocity.Y = vector9.W;
							}
						}
					}
				}
			}
			if (lastVelocity != velocity)
			{
				flag = true;
			}
			if (flag)
			{
				if (owner == Main.myPlayer && CanCutTiles() && (friendly || hostile) && damage > 0)
				{
					int num53 = (int)(position.X + velocity.X - 1f) / 16;
					int num2 = (int)((position.X + (float)width + velocity.X + 1f) / 16f) + 1;
					int num3 = (int)(position.Y + velocity.Y - 1f) / 16;
					int num4 = (int)((position.Y + (float)height + velocity.Y + 1f) / 16f) + 1;
					if (num53 < 0)
					{
						num53 = 0;
					}
					if (num2 > Main.maxTilesX)
					{
						num2 = Main.maxTilesX;
					}
					if (num3 < 0)
					{
						num3 = 0;
					}
					if (num4 > Main.maxTilesY)
					{
						num4 = Main.maxTilesY;
					}
					bool[] tileCutIgnorance = Main.player[owner].GetTileCutIgnorance(allowRegrowth: false, trap);
					for (int i = num53; i < num2; i++)
					{
						for (int j = num3; j < num4; j++)
						{
							if (Main.tile[i, j] != null && !tileCutIgnorance[Main.tile[i, j].type] && Main.tile[i, j].type == 484 && WorldGen.CanCutTile(i, j, TileCuttingContext.AttackProjectile))
							{
								WorldGen.KillTile(i, j);
								if (Main.netMode != 0)
								{
									NetMessage.SendData(17, -1, -1, null, 0, i, j);
								}
							}
						}
					}
				}
				if (Main.rand.Next(3) == 0 && owner == Main.myPlayer && CanCutTiles() && (friendly || hostile) && damage > 0)
				{
					int num5 = (int)(position.X + velocity.X - 1f) / 16;
					int num6 = (int)((position.X + (float)width + velocity.X + 1f) / 16f) + 1;
					int num7 = (int)(position.Y + velocity.Y - 1f) / 16;
					int num8 = (int)((position.Y + (float)height + velocity.Y + 1f) / 16f) + 1;
					if (num5 < 0)
					{
						num5 = 0;
					}
					if (num6 > Main.maxTilesX)
					{
						num6 = Main.maxTilesX;
					}
					if (num7 < 0)
					{
						num7 = 0;
					}
					if (num8 > Main.maxTilesY)
					{
						num8 = Main.maxTilesY;
					}
					bool[] tileCutIgnorance2 = Main.player[owner].GetTileCutIgnorance(allowRegrowth: false, trap);
					for (int k = num5; k < num6; k++)
					{
						for (int l = num7; l < num8; l++)
						{
							if (Main.tile[k, l] != null && !tileCutIgnorance2[Main.tile[k, l].type] && TileID.Sets.CrackedBricks[Main.tile[k, l].type] && WorldGen.CanCutTile(k, l, TileCuttingContext.AttackProjectile))
							{
								WorldGen.KillTile(k, l);
								if (Main.netMode != 0)
								{
									NetMessage.SendData(17, -1, -1, null, 0, k, l);
								}
							}
						}
					}
				}
				if (ProjectileLoader.OnTileCollide(this, lastVelocity))
				{
					Vector2 center;
					if (type == 663 || type == 665 || type == 667 || type == 677 || type == 678 || type == 679 || type == 691 || type == 692 || type == 693 || type == 688 || type == 689 || type == 690)
					{
						position += velocity;
						velocity = Vector2.Zero;
					}
					else if (type == 434)
					{
						position += velocity;
						numUpdates = 0;
					}
					else if (type == 1020)
					{
						if (velocity.X != lastVelocity.X && Math.Abs(lastVelocity.X) > 1f)
						{
							velocity.X = (0f - lastVelocity.X) * 0.25f;
						}
						if (velocity.Y != lastVelocity.Y && Math.Abs(lastVelocity.Y) > 1f)
						{
							velocity.Y = (0f - lastVelocity.Y) * 0.25f;
						}
					}
					else if (type == 601)
					{
						if (Main.netMode != 2 && alpha > 0)
						{
							if (ai[1] != 0f)
							{
								SoundEngine.PlaySound(in SoundID.Item114, position);
							}
							else
							{
								SoundEngine.PlaySound(in SoundID.Item115, position);
							}
						}
						if (owner == Main.myPlayer)
						{
							PortalHelper.TryPlacingPortal(this, lastVelocity, velocity);
						}
						position += velocity;
						Kill();
					}
					else if (type == 985)
					{
						position += velocity;
						velocity = lastVelocity;
						velocity *= 0.01f;
						localAI[1] = 1f;
					}
					else if (type == 451)
					{
						ai[0] = 1f;
						ai[1] = 0f;
						netUpdate = true;
						velocity = lastVelocity / 2f;
					}
					else if (type == 645)
					{
						ai[0] = 0f;
						ai[1] = -1f;
						netUpdate = true;
					}
					else if (type == 584)
					{
						bool flag12 = false;
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = lastVelocity.X * -0.75f;
							flag12 = true;
						}
						if ((velocity.Y != lastVelocity.Y && lastVelocity.Y > 2f) || velocity.Y == 0f)
						{
							velocity.Y = lastVelocity.Y * -0.75f;
							flag12 = true;
						}
						if (flag12)
						{
							float num9 = ((Vector2)(ref lastVelocity)).Length() / ((Vector2)(ref velocity)).Length();
							if (num9 == 0f)
							{
								num9 = 1f;
							}
							velocity /= num9;
							penetrate--;
						}
					}
					else if (type == 532)
					{
						bool flag13 = false;
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = lastVelocity.X * -0.75f;
							flag13 = true;
						}
						if ((velocity.Y != lastVelocity.Y && lastVelocity.Y > 2f) || velocity.Y == 0f)
						{
							velocity.Y = lastVelocity.Y * -0.75f;
							flag13 = true;
						}
						if (flag13)
						{
							float num10 = ((Vector2)(ref lastVelocity)).Length() / ((Vector2)(ref velocity)).Length();
							if (num10 == 0f)
							{
								num10 = 1f;
							}
							velocity /= num10;
							penetrate--;
							Collision.HitTiles(position, lastVelocity, width, height);
						}
					}
					else if (type == 533)
					{
						float num11 = 1f;
						bool flag14 = false;
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = lastVelocity.X * (0f - num11);
							flag14 = true;
						}
						if (velocity.Y != lastVelocity.Y || velocity.Y == 0f)
						{
							velocity.Y = lastVelocity.Y * (0f - num11) * 0.5f;
							flag14 = true;
						}
						if (flag14)
						{
							float num13 = ((Vector2)(ref lastVelocity)).Length() / ((Vector2)(ref velocity)).Length();
							if (num13 == 0f)
							{
								num13 = 1f;
							}
							velocity /= num13;
							if (ai[0] == 7f && (double)velocity.Y < -0.1)
							{
								velocity.Y += 0.1f;
							}
							if (ai[0] >= 6f && ai[0] < 9f)
							{
								Collision.HitTiles(position, lastVelocity, width, height);
							}
							localAI[2] += 30f;
						}
					}
					else if (type == 502)
					{
						ai[0] += 1f;
						SoundEngine.PlaySound(37, (int)position.X, (int)position.Y, 5 + (int)ai[0]);
						if (ai[0] >= 5f)
						{
							position += velocity;
							Kill();
						}
						else
						{
							if (velocity.Y != lastVelocity.Y)
							{
								velocity.Y = 0f - lastVelocity.Y;
							}
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = 0f - lastVelocity.X;
							}
						}
						Vector2 spinningpoint = Utils.RotatedByRandom(new Vector2(0f, -3f - ai[0]), 3.1415927410125732);
						float num14 = 10f + ai[0] * 4f;
						Vector2 vector11 = default(Vector2);
						((Vector2)(ref vector11))._002Ector(1.05f, 1f);
						for (float num15 = 0f; num15 < num14; num15 += 1f)
						{
							int num16 = Dust.NewDust(base.Center, 0, 0, 66, 0f, 0f, 0, Color.Transparent);
							Main.dust[num16].position = base.Center;
							Dust obj = Main.dust[num16];
							double radians = (float)Math.PI * 2f * num15 / num14;
							center = default(Vector2);
							obj.velocity = spinningpoint.RotatedBy(radians, center) * vector11 * (0.8f + Main.rand.NextFloat() * 0.4f);
							Main.dust[num16].color = Main.hslToRgb(num15 / num14, 1f, 0.5f);
							Main.dust[num16].noGravity = true;
							Main.dust[num16].scale = 1f + ai[0] / 3f;
						}
						if (Main.myPlayer == owner)
						{
							int num17 = width;
							int num18 = height;
							int num19 = penetrate;
							position = base.Center;
							width = (height = 40 + 8 * (int)ai[0]);
							base.Center = position;
							penetrate = -1;
							Damage();
							penetrate = num19;
							position = base.Center;
							width = num17;
							height = num18;
							base.Center = position;
						}
					}
					else if (type == 444)
					{
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = 0f - lastVelocity.X;
						}
						if (velocity.Y != lastVelocity.Y)
						{
							velocity.Y = 0f - lastVelocity.Y;
						}
						ai[0] = velocity.ToRotation();
					}
					else if (type == 617)
					{
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = (0f - lastVelocity.X) * 0.35f;
						}
						if (velocity.Y != lastVelocity.Y)
						{
							velocity.Y = (0f - lastVelocity.Y) * 0.35f;
						}
					}
					else if (type == 440 || type == 449 || type == 606)
					{
						if (ai[1] != 1f)
						{
							ai[1] = 1f;
							position += velocity;
							velocity = lastVelocity;
						}
					}
					else if (type == 85)
					{
						velocity = lastVelocity * 0.95f;
						position -= velocity;
					}
					else if (type == 466 || type == 580 || type == 640)
					{
						if (localAI[1] < 1f)
						{
							localAI[1] += 2f;
							position += velocity;
							velocity = Vector2.Zero;
						}
					}
					else if (type == 851)
					{
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = (0f - lastVelocity.X) * 0.8f;
						}
						if (velocity.Y != lastVelocity.Y)
						{
							velocity.Y = (0f - lastVelocity.Y) * 0.5f;
						}
					}
					else if (type == 855)
					{
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = 0f - lastVelocity.X;
						}
						if (velocity.Y != lastVelocity.Y)
						{
							velocity.Y = 0f - lastVelocity.Y;
							if (lastVelocity.Y < 0f)
							{
								velocity.Y *= 0.25f;
							}
						}
					}
					else if (aiStyle == 54)
					{
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = lastVelocity.X * -0.6f;
						}
						if (velocity.Y != lastVelocity.Y)
						{
							velocity.Y = lastVelocity.Y * -0.6f;
						}
					}
					else if (type == 861)
					{
						float num20 = -1f;
						if (ai[1] == 1f)
						{
							num20 = -0.6f;
						}
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = lastVelocity.X * num20;
						}
						if (velocity.Y != lastVelocity.Y && (double)lastVelocity.Y > 0.7)
						{
							velocity.Y = lastVelocity.Y * num20;
						}
						if (Math.Abs(velocity.Y) < 0.5f)
						{
							velocity.Y = 0f;
						}
						if (ai[1] != 1f)
						{
							netUpdate = true;
						}
						ai[1] = 1f;
					}
					else if (!Main.projPet[type] && type != 500 && type != 820 && aiStyle != 160 && type != 650 && type != 882 && type != 888 && type != 894 && type != 895 && type != 898 && type != 901 && type != 957)
					{
						if (aiStyle == 99)
						{
							if (type >= 556 && type <= 561)
							{
								bool flag2 = false;
								if (velocity.X != lastVelocity.X)
								{
									flag2 = true;
									velocity.X = lastVelocity.X * -1f;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									flag2 = true;
									velocity.Y = lastVelocity.Y * -1f;
								}
								if (flag2)
								{
									Vector2 vector13 = Main.player[owner].Center - base.Center;
									((Vector2)(ref vector13)).Normalize();
									vector13 *= ((Vector2)(ref velocity)).Length();
									vector13 *= 0.25f;
									velocity *= 0.75f;
									velocity += vector13;
									if (((Vector2)(ref velocity)).Length() > 6f)
									{
										velocity *= 0.5f;
									}
								}
							}
						}
						else if (type == 604)
						{
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = 0f - lastVelocity.X;
							}
							if (velocity.Y != lastVelocity.Y)
							{
								velocity.Y = 0f - lastVelocity.Y;
							}
						}
						else if (type == 379)
						{
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = lastVelocity.X * -0.6f;
							}
							if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 2f)
							{
								velocity.Y = lastVelocity.Y * -0.6f;
							}
						}
						else if (type == 491)
						{
							if (ai[0] <= 0f)
							{
								ai[0] = -10f;
							}
							if (velocity.X != lastVelocity.X && Math.Abs(lastVelocity.X) > 0f)
							{
								velocity.X = lastVelocity.X * -1f;
							}
							if (velocity.Y != lastVelocity.Y && Math.Abs(lastVelocity.Y) > 0f)
							{
								velocity.Y = lastVelocity.Y * -1f;
							}
						}
						else if ((type >= 515 && type <= 517) || type == 637)
						{
							if (velocity.X != lastVelocity.X && Math.Abs(lastVelocity.X) > 1f)
							{
								velocity.X = lastVelocity.X * -0.9f;
							}
							if (velocity.Y != lastVelocity.Y && Math.Abs(lastVelocity.Y) > 1f)
							{
								velocity.Y = lastVelocity.Y * -0.9f;
							}
						}
						else if (type == 921 || type == 926 || type == 937)
						{
							if (velocity.X != lastVelocity.X && Math.Abs(lastVelocity.X) > 1f)
							{
								velocity.X = lastVelocity.X * -0.4f;
							}
							if (velocity.Y != lastVelocity.Y && Math.Abs(lastVelocity.Y) > 1f)
							{
								velocity.Y = lastVelocity.Y * -0.95f;
							}
							penetrate--;
						}
						else if (type == 969)
						{
							if (velocity.X != lastVelocity.X && Math.Abs(lastVelocity.X) > 1f)
							{
								velocity.X = lastVelocity.X * -0.75f;
							}
							if (velocity.Y != lastVelocity.Y && Math.Abs(lastVelocity.Y) > 1f)
							{
								velocity.Y = lastVelocity.Y * -0.75f;
							}
						}
						else if (type == 681)
						{
							timeLeft = 4;
						}
						else if (type == 409)
						{
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = lastVelocity.X * -1f;
							}
							if (velocity.Y != lastVelocity.Y)
							{
								velocity.Y = lastVelocity.Y * -1f;
							}
						}
						else if (type == 254)
						{
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = lastVelocity.X * -1f;
							}
							if (velocity.Y != lastVelocity.Y)
							{
								velocity.Y = lastVelocity.Y * -1f;
							}
						}
						else if (type == 225)
						{
							ai[1] += 1f;
							if (ai[1] == 1f)
							{
								damage = (int)((float)damage * 0.66f);
							}
							if (ai[1] >= 4f)
							{
								Kill();
								return;
							}
							velocity.X = 0f - lastVelocity.X;
							velocity.Y = 0f - lastVelocity.Y;
							int num21 = FindTargetWithLineOfSight();
							if (num21 != -1)
							{
								NPC nPC = Main.npc[num21];
								float t = Distance(nPC.Center);
								Vector2 vector14 = -Vector2.UnitY * MathHelper.Lerp((float)nPC.height * 0.1f, (float)nPC.height * 0.5f, Utils.GetLerpValue(0f, 300f, t));
								velocity = DirectionTo(nPC.Center + vector14).SafeNormalize(-Vector2.UnitY) * ((Vector2)(ref velocity)).Length();
								netUpdate = true;
							}
						}
						else if (type == 285)
						{
							ai[1] += 1f;
							if (ai[1] == 1f)
							{
								damage = (int)((float)damage * 0.66f);
							}
							if (ai[1] >= 2f)
							{
								Kill();
								return;
							}
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = lastVelocity.X * -1f;
							}
							if (velocity.Y != lastVelocity.Y)
							{
								velocity.Y = lastVelocity.Y * -1f;
							}
							int num22 = FindTargetWithLineOfSight();
							if (num22 != -1)
							{
								NPC nPC2 = Main.npc[num22];
								Distance(nPC2.Center);
								velocity = DirectionTo(nPC2.Center).SafeNormalize(-Vector2.UnitY) * ((Vector2)(ref velocity)).Length();
								netUpdate = true;
							}
						}
						else if (type == 931)
						{
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = lastVelocity.X * -1f;
							}
							if (velocity.Y != lastVelocity.Y)
							{
								velocity.Y = lastVelocity.Y * -1f;
							}
						}
						else if (type == 155)
						{
							if (ai[1] > 10f)
							{
								NetworkText networkText = NetworkText.FromKey("Game.BallBounceResult", NetworkText.FromKey(Lang.GetProjectileName(type).Key), ai[1]);
								if (Main.netMode == 0)
								{
									Main.NewText(networkText.ToString(), byte.MaxValue, 240, 20);
								}
								else if (Main.netMode == 2)
								{
									ChatHelper.BroadcastChatMessage(networkText, new Color(255, 240, 20));
								}
							}
							ai[1] = 0f;
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = lastVelocity.X * -0.6f;
							}
							if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 2f)
							{
								velocity.Y = lastVelocity.Y * -0.6f;
							}
						}
						else if (aiStyle == 33)
						{
							if (localAI[0] == 0f)
							{
								if (wet)
								{
									position += lastVelocity / 2f;
								}
								else
								{
									position += lastVelocity;
								}
								velocity *= 0f;
								localAI[0] = 1f;
							}
						}
						else if (type != 308 && type != 377 && type != 966)
						{
							if (type == 477)
							{
								if (velocity.Y != lastVelocity.Y || velocity.X != lastVelocity.X)
								{
									penetrate--;
									if (penetrate <= 0)
									{
										Kill();
									}
									if (velocity.X != lastVelocity.X)
									{
										velocity.X = 0f - lastVelocity.X;
									}
									if (velocity.Y != lastVelocity.Y)
									{
										velocity.Y = 0f - lastVelocity.Y;
									}
								}
								if (penetrate > 0 && owner == Main.myPlayer)
								{
									int[] array = new int[10];
									int num24 = 0;
									int num25 = 700;
									int num26 = 20;
									for (int m = 0; m < 200; m++)
									{
										if (!Main.npc[m].CanBeChasedBy(this))
										{
											continue;
										}
										center = base.Center - Main.npc[m].Center;
										float num27 = ((Vector2)(ref center)).Length();
										if (num27 > (float)num26 && num27 < (float)num25 && Collision.CanHitLine(base.Center, 1, 1, Main.npc[m].Center, 1, 1))
										{
											array[num24] = m;
											num24++;
											if (num24 >= 9)
											{
												break;
											}
										}
									}
									if (num24 > 0)
									{
										num24 = Main.rand.Next(num24);
										Vector2 vector15 = Main.npc[array[num24]].Center - base.Center;
										float num28 = ((Vector2)(ref velocity)).Length();
										((Vector2)(ref vector15)).Normalize();
										velocity = vector15 * num28;
										netUpdate = true;
									}
								}
							}
							else if (type == 94)
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = 0f - lastVelocity.X;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else if (type == 496)
							{
								if (velocity.X != lastVelocity.X)
								{
									if (Math.Abs(velocity.X) < 1f)
									{
										velocity.X = 0f - lastVelocity.X;
									}
									else
									{
										Kill();
									}
								}
								if (velocity.Y != lastVelocity.Y)
								{
									if (Math.Abs(velocity.Y) < 1f)
									{
										velocity.Y = 0f - lastVelocity.Y;
									}
									else
									{
										Kill();
									}
								}
							}
							else if (type == 311)
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = 0f - lastVelocity.X;
									ai[1] += 1f;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									velocity.Y = 0f - lastVelocity.Y;
									ai[1] += 1f;
								}
								if (ai[1] > 4f)
								{
									Kill();
								}
							}
							else if (type == 312)
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = 0f - lastVelocity.X;
									ai[1] += 1f;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									velocity.Y = 0f - lastVelocity.Y;
									ai[1] += 1f;
								}
							}
							else if (type == 522 || type == 620)
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = 0f - lastVelocity.X;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else if (type == 524)
							{
								ai[0] += 100f;
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = 0f - lastVelocity.X;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else if (aiStyle == 93)
							{
								if (velocity != lastVelocity)
								{
									ai[1] = 0f;
									ai[0] = 1f;
									netUpdate = true;
									tileCollide = false;
									position += velocity;
									velocity = lastVelocity;
									((Vector2)(ref velocity)).Normalize();
									velocity *= 3f;
								}
							}
							else if (type == 281)
							{
								bool flag3 = Math.Abs(velocity.X) + Math.Abs(velocity.Y) < 2f || ai[0] == -1f;
								if (ai[0] == -2f || ai[0] == -3f)
								{
									flag3 = false;
								}
								if (flag3)
								{
									if (Main.myPlayer == owner)
									{
										int num29 = ((velocity.X > 0f) ? 1 : 2);
										if (damage == 0)
										{
											num29 += 2;
										}
										NPC.ReleaseNPC((int)base.Center.X, (int)base.Bottom.Y - 4, 614, num29, owner);
										ai[0] = -3f;
										netUpdate = true;
									}
								}
								else
								{
									if (velocity.X != lastVelocity.X)
									{
										velocity.X = (0f - lastVelocity.X) * 0.5f;
									}
									if (velocity.Y != lastVelocity.Y)
									{
										velocity.Y = (0f - lastVelocity.Y) * 0.5f;
									}
								}
							}
							else if (type == 290 || type == 294)
							{
								if (velocity.X != lastVelocity.X)
								{
									position.X += velocity.X;
									velocity.X = 0f - lastVelocity.X;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									position.Y += velocity.Y;
									velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else if ((type == 181 || type == 189 || type == 357 || type == 566) && penetrate > 0)
							{
								if (type == 357)
								{
									damage = (int)((double)damage * 0.9);
								}
								penetrate--;
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = 0f - lastVelocity.X;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else if (type == 307 && ai[1] < 5f)
							{
								ai[1] += 1f;
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = 0f - lastVelocity.X;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else if (type == 99 || type == 1005 || type == 1014)
							{
								if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 5f)
								{
									Collision.HitTiles(position, velocity, width, height);
									SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
									velocity.Y = (0f - lastVelocity.Y) * 0.2f;
								}
								if (velocity.X != lastVelocity.X)
								{
									Kill();
								}
							}
							else if (type == 1021)
							{
								if (velocity.Y != lastVelocity.Y)
								{
									if (lastVelocity.Y > 4f)
									{
										Collision.HitTiles(position, velocity, width, height);
										SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
										velocity.Y = (0f - lastVelocity.Y) * 0.9f;
									}
									else if (lastVelocity.Y > 0f)
									{
										localAI[1] = 999f;
									}
								}
								if (velocity.X != lastVelocity.X)
								{
									if (localAI[1] <= 3f)
									{
										velocity.X = lastVelocity.X * -0.75f;
										localAI[1] += 1f;
									}
									else
									{
										Kill();
									}
								}
							}
							else if (type == 1013)
							{
								float num30 = Math.Abs(lastVelocity.X);
								float num31 = Math.Abs(lastVelocity.Y);
								float num32 = 0.95f;
								float num33 = 0.95f;
								if (num30 < 0.5f)
								{
									num32 = 0.1f;
								}
								else if (num30 < 0.75f)
								{
									num32 = 0.25f;
								}
								else if (num30 < 1f)
								{
									num32 = 0.5f;
								}
								if (num31 < 0.5f)
								{
									num33 = 0.1f;
								}
								else if (num31 < 0.75f)
								{
									num33 = 0.25f;
								}
								else if (num31 < 1f)
								{
									num33 = 0.5f;
								}
								bool flag4 = false;
								if (velocity.Y != lastVelocity.Y)
								{
									if (Math.Abs(lastVelocity.Y) > 5f)
									{
										flag4 = true;
									}
									velocity.Y = (0f - lastVelocity.Y) * num33;
								}
								if (velocity.X != lastVelocity.X)
								{
									if (Math.Abs(lastVelocity.X) > 5f)
									{
										flag4 = true;
									}
									velocity.X = (0f - lastVelocity.X) * num32;
								}
								if (flag4)
								{
									localAI[1] += 1f;
									Collision.HitTiles(position, velocity, width, height);
									SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
								}
								if (((Vector2)(ref velocity)).Length() < 0.1f && localAI[0] > 50f)
								{
									Kill();
								}
								if (localAI[1] > 20f)
								{
									Kill();
								}
							}
							else if (type == 727)
							{
								int num35 = 30;
								float num36 = 2f;
								float num37 = 2f;
								if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 5f)
								{
									Collision.HitTiles(position, velocity, width, height);
									SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
									velocity.Y = (0f - lastVelocity.Y) * 0.65f;
									if (owner == Main.myPlayer)
									{
										int num38 = Main.rand.Next(3, 6);
										float num39 = Main.rand.NextFloat();
										for (float num40 = 0f; num40 < 1f; num40 += 1f / (float)num38)
										{
											Vector2 vector16 = ((num39 + num40) * ((float)Math.PI * 2f)).ToRotationVector2() * num37;
											if (vector16.Y > 0f)
											{
												vector16 *= -0.7f;
											}
											NewProjectile(GetProjectileSource_FromThis(), base.Center, vector16, 763, num35, num36, Main.myPlayer);
										}
									}
								}
								if (velocity.X != lastVelocity.X)
								{
									Kill();
									if (owner == Main.myPlayer)
									{
										int num41 = Main.rand.Next(3, 6);
										float num42 = Main.rand.NextFloat();
										for (float num43 = 0f; num43 < 1f; num43 += 1f / (float)num41)
										{
											Vector2 vector17 = ((num42 + num43) * ((float)Math.PI * 2f)).ToRotationVector2() * num37;
											if (vector17.Y > 0f)
											{
												vector17 *= -0.7f;
											}
											NewProjectile(GetProjectileSource_FromThis(), base.Center, vector17, 763, num35, num36, Main.myPlayer);
										}
									}
								}
							}
							else if (type == 655)
							{
								if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 5f)
								{
									Collision.HitTiles(position, velocity, width, height);
									SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
									velocity.Y = (0f - lastVelocity.Y) * 0.2f;
								}
								if (velocity.X != lastVelocity.X)
								{
									Kill();
								}
							}
							else if (type == 36)
							{
								if (penetrate > 1)
								{
									Collision.HitTiles(position, velocity, width, height);
									SoundEngine.PlaySound(in SoundID.Item10, position);
									penetrate--;
									if (velocity.X != lastVelocity.X)
									{
										velocity.X = 0f - lastVelocity.X;
									}
									if (velocity.Y != lastVelocity.Y)
									{
										velocity.Y = 0f - lastVelocity.Y;
									}
								}
								else
								{
									Kill();
								}
							}
							else if (aiStyle == 21)
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = 0f - lastVelocity.X;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else if (aiStyle == 17)
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = lastVelocity.X * -0.75f;
								}
								if (velocity.Y != lastVelocity.Y && (double)lastVelocity.Y > 1.5)
								{
									velocity.Y = lastVelocity.Y * -0.7f;
								}
							}
							else if (aiStyle == 15)
							{
								AI_015_HandleMovementCollision(ref wetVelocity, ref lastVelocity);
							}
							else if (aiStyle == 9)
							{
								bool flag5 = owner == Main.myPlayer;
								if (type == 79)
								{
									bool flag6 = ai[0] >= 0f;
									flag5 = flag5 && !flag6;
									if (flag6)
									{
										if (velocity.X != lastVelocity.X)
										{
											velocity.X *= 0.1f;
										}
										if (velocity.Y != lastVelocity.Y)
										{
											velocity.Y *= 0.1f;
										}
									}
								}
								if (flag5)
								{
									Kill();
								}
							}
							else if (aiStyle == 39)
							{
								Collision.HitTiles(position, velocity, width, height);
								if (type == 33 || type == 106)
								{
									if (velocity.X != lastVelocity.X)
									{
										velocity.X = 0f - lastVelocity.X;
									}
									if (velocity.Y != lastVelocity.Y)
									{
										velocity.Y = 0f - lastVelocity.Y;
									}
								}
								else
								{
									ai[0] = 1f;
									if (aiStyle == 3)
									{
										velocity.X = 0f - lastVelocity.X;
										velocity.Y = 0f - lastVelocity.Y;
									}
								}
								netUpdate = true;
								SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
							}
							else if (aiStyle == 3 || aiStyle == 13 || aiStyle == 69 || aiStyle == 109)
							{
								if (type == 106)
								{
									Vector2 hitPoint = base.Center + velocity.SafeNormalize(Vector2.UnitX) * 8f * scale;
									Vector2 normal = default(Vector2);
									((Vector2)(ref normal))._002Ector((float)((velocity.X != lastVelocity.X) ? (-Math.Sign(lastVelocity.X)) : 0), (float)((velocity.Y != lastVelocity.Y) ? (-Math.Sign(lastVelocity.Y)) : 0));
									LightDisc_Bounce(hitPoint, normal);
								}
								Collision.HitTiles(position, velocity, width, height);
								if (type == 33 || type == 106 || type == 866)
								{
									if (velocity.X != lastVelocity.X)
									{
										velocity.X = 0f - lastVelocity.X;
									}
									if (velocity.Y != lastVelocity.Y)
									{
										velocity.Y = 0f - lastVelocity.Y;
									}
								}
								else
								{
									ai[0] = 1f;
									if ((aiStyle == 3 || aiStyle == 109) && type != 383)
									{
										velocity.X = 0f - lastVelocity.X;
										velocity.Y = 0f - lastVelocity.Y;
									}
								}
								netUpdate = true;
								SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
							}
							else if (aiStyle == 8 && type != 96)
							{
								SoundEngine.PlaySound(in SoundID.Item10, position);
								ai[0] += 1f;
								int num44 = 5;
								switch (type)
								{
								case 15:
									num44 = 6;
									break;
								case 253:
									num44 = 8;
									break;
								}
								if (ai[0] >= (float)num44)
								{
									position += velocity;
									Kill();
								}
								else
								{
									if (type == 15 && velocity.Y > 4f)
									{
										if (velocity.Y != lastVelocity.Y)
										{
											velocity.Y = (0f - lastVelocity.Y) * 0.8f;
										}
									}
									else if (velocity.Y != lastVelocity.Y)
									{
										velocity.Y = 0f - lastVelocity.Y;
									}
									if (velocity.X != lastVelocity.X)
									{
										velocity.X = 0f - lastVelocity.X;
									}
								}
							}
							else if (aiStyle == 61)
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = lastVelocity.X * -0.3f;
								}
								if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 1f)
								{
									velocity.Y = lastVelocity.Y * -0.3f;
								}
							}
							else if (aiStyle == 14)
							{
								if (type == 928)
								{
									int num46 = 0;
									for (int num47 = 1000; num47 >= 0; num47--)
									{
										if (num47 != whoAmI && Main.projectile[num47].active && Main.projectile[num47].owner == owner && Main.projectile[num47].type == type)
										{
											num46++;
											if (num46 >= 2 && timeLeft > Main.projectile[num47].timeLeft && Main.projectile[num47].timeLeft > 30)
											{
												Main.projectile[num47].timeLeft = 2;
											}
										}
									}
								}
								if (type == 261 && ((velocity.X != lastVelocity.X && (lastVelocity.X < -3f || lastVelocity.X > 3f)) || (velocity.Y != lastVelocity.Y && (lastVelocity.Y < -3f || lastVelocity.Y > 3f))))
								{
									for (int n = 0; n < 10; n++)
									{
										Collision.HitTiles(position, velocity, width, height);
									}
									SoundEngine.PlaySound(0, (int)base.Center.X, (int)base.Center.Y);
									MakeBoulderOfEarthExplosion();
								}
								if (type >= 326 && type <= 328 && velocity.X != lastVelocity.X)
								{
									velocity.X = lastVelocity.X * -0.1f;
								}
								if (type >= 400 && type <= 402)
								{
									if (velocity.X != lastVelocity.X)
									{
										velocity.X = lastVelocity.X * -0.1f;
									}
								}
								else if (type == 870 && ai[1] == 0f)
								{
									if (velocity.X != lastVelocity.X || velocity.Y != lastVelocity.Y)
									{
										velocity = -lastVelocity;
										ai[1] = 1f;
									}
								}
								else if (type == 50)
								{
									if (velocity.X != lastVelocity.X)
									{
										velocity.X = lastVelocity.X * -0.2f;
									}
									if (velocity.Y != lastVelocity.Y && (double)lastVelocity.Y > 1.5)
									{
										velocity.Y = lastVelocity.Y * -0.2f;
									}
								}
								else if (type == 185)
								{
									if (velocity.X != lastVelocity.X)
									{
										velocity.X = lastVelocity.X * -0.9f;
									}
									if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 1f)
									{
										velocity.Y = lastVelocity.Y * -0.9f;
									}
								}
								else if (type == 277)
								{
									if (velocity.X != lastVelocity.X)
									{
										velocity.X = lastVelocity.X * -0.9f;
									}
									if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 3f)
									{
										velocity.Y = lastVelocity.Y * -0.9f;
									}
								}
								else if (type != 480)
								{
									if (type == 450)
									{
										if (velocity.X != lastVelocity.X)
										{
											velocity.X = lastVelocity.X * -0.1f;
										}
									}
									else
									{
										if (velocity.X != lastVelocity.X)
										{
											velocity.X = lastVelocity.X * -0.5f;
										}
										if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 1f)
										{
											velocity.Y = lastVelocity.Y * -0.5f;
										}
									}
								}
							}
							else if (aiStyle == 16)
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = lastVelocity.X * -0.4f;
									if (type == 29)
									{
										velocity.X *= 0.8f;
									}
								}
								if (velocity.Y != lastVelocity.Y && (double)lastVelocity.Y > 0.7 && type != 102)
								{
									velocity.Y = lastVelocity.Y * -0.4f;
									if (type == 29)
									{
										velocity.Y *= 0.8f;
									}
								}
								if (type == 134 || type == 137 || type == 140 || type == 143 || type == 303 || (type >= 338 && type <= 341) || type == 776 || type == 780 || type == 793 || type == 796 || type == 799 || type == 784 || type == 787 || type == 790 || type == 803 || type == 804 || type == 808 || type == 809 || type == 810 || type == 805 || type == 806 || type == 807 || type == 930)
								{
									velocity *= 0f;
									alpha = 255;
									timeLeft = 3;
								}
							}
							else if (aiStyle == 68)
							{
								velocity *= 0f;
								alpha = 255;
								timeLeft = 3;
								netUpdate = true;
							}
							else if (type == 870)
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = lastVelocity.X * -0.2f;
								}
								if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 0f)
								{
									velocity.Y = lastVelocity.Y * -0.2f;
								}
							}
							else
							{
								position += velocity;
								Kill();
							}
						}
					}
				}
			}
		}
		UpdatePosition(wetVelocity);
		if (!flag7 && !flag9 && owner == Main.myPlayer && (tileCollide || flag10) && position != oldPosition)
		{
			Vector2 vector18 = position;
			Vector2 vector19 = oldPosition;
			int num48 = ((overrideWidth != -1) ? overrideWidth : width);
			int num49 = ((overrideHeight != -1) ? overrideHeight : height);
			if (overrideHeight != -1 || overrideWidth != -1)
			{
				((Vector2)(ref vector18))._002Ector(position.X + (float)(width / 2) - (float)(num48 / 2), position.Y + (float)(height / 2) - (float)(num49 / 2));
				((Vector2)(ref vector19))._002Ector(oldPosition.X + (float)(width / 2) - (float)(num48 / 2), oldPosition.Y + (float)(height / 2) - (float)(num49 / 2));
			}
			Collision.SwitchTiles(vector18, num48, num49, vector19, 4);
		}
	}

	private void LightDisc_Bounce(Vector2 hitPoint, Vector2 normal)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		Vector2 spinningpoint = Vector2.Reflect(velocity, normal);
		for (int i = 0; i < 4; i++)
		{
			Dust dust = Dust.NewDustPerfect(hitPoint, 306, spinningpoint.RotatedBy((float)Math.PI / 4f * Main.rand.NextFloatDirection()) * 0.6f * Main.rand.NextFloat(), 200, default(Color), 1.6f);
			dust.color = Color.Lerp(new Color(219, 253, 0), Color.Cyan, Main.rand.NextFloat());
			Dust dust2 = Dust.CloneDust(dust);
			dust2.color = Color.White;
			dust2.scale = 1f;
			dust2.alpha = 50;
		}
	}

	private void AI_149_GolfBall()
	{
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_017f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c8: Unknown result type (might be due to invalid IL or missing references)
		if (!npcProj && timeLeft < 10)
		{
			timeLeft = 10;
		}
		if (ai[1] == -1f)
		{
			Tile tileSafely = Framing.GetTileSafely(base.Bottom.ToTileCoordinates());
			if (!tileSafely.active() || tileSafely.type != 494)
			{
				ai[1] = 0f;
				netUpdate = true;
			}
			return;
		}
		BallStepResult ballStepResult = GolfHelper.StepGolfBall(this, ref localAI[0]);
		if (ballStepResult.State == BallState.Resting)
		{
			damage = 0;
			if (Main.netMode == 1 && owner == Main.myPlayer && localAI[1] != (float)ballStepResult.State)
			{
				netUpdate = true;
			}
		}
		localAI[1] = (float)ballStepResult.State;
		rotation += localAI[0];
		if (velocity.Y != 0f && ballStepResult.State == BallState.Moving)
		{
			rotation += velocity.X * 0.1f + velocity.Y * 0.1f;
		}
		if (ballStepResult.State == BallState.Moving && owner == Main.myPlayer)
		{
			bool? flag = ProjectileID.Sets.ForcePlateDetection[135];
			if ((!flag.HasValue || flag.Value) && localAI[1] != 0f)
			{
				Collision.SwitchTiles(position, width, height, oldPosition, 4);
			}
		}
		if (ballStepResult.State == BallState.Moving && Main.netMode == 2 && Main.player.IndexInRange(owner) && Main.player[owner].active)
		{
			RemoteClient.CheckSection(owner, position);
		}
	}

	private void MakeBoulderOfEarthExplosion()
	{
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		localAI[0] = 40f;
		float mAX_SPREAD = 20f;
		int fluff = 10;
		int distFluff = 50;
		int layerStart = 1;
		int num = 6;
		if (((Vector2)(ref velocity)).Length() < 8f || Math.Abs(velocity.Y) < 4f)
		{
			mAX_SPREAD = 15f;
			fluff = 7;
			distFluff = 30;
			num = 4;
		}
		if (((Vector2)(ref velocity)).Length() < 4f || Math.Abs(velocity.Y) < 2f)
		{
			mAX_SPREAD = 15f;
			fluff = 7;
			distFluff = 30;
			num = 2;
			layerStart = 0;
		}
		int layerEnd = num;
		int num2 = num - 2;
		if (num2 < 1)
		{
			num2 = 1;
		}
		CreateGroundExplosion(mAX_SPREAD, fluff, distFluff, layerStart, layerEnd, num2);
		for (int i = 0; i < 10; i++)
		{
			Dust dust = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(width / 2, height / 2), 228, Main.rand.NextVector2Circular(3f, 3f));
			dust.scale = 0.6f;
			if (i < 5)
			{
				dust.noGravity = true;
				dust.scale = 1.8f;
			}
		}
	}

	private void UpdatePosition(Vector2 wetVelocity)
	{
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0134: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_0116: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0199: Unknown result type (might be due to invalid IL or missing references)
		//IL_019f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f5: Unknown result type (might be due to invalid IL or missing references)
		if (aiStyle == 4 || aiStyle == 38 || aiStyle == 84 || aiStyle == 148 || (aiStyle == 7 && ai[0] == 2f) || ((type == 440 || type == 449 || type == 606) && ai[1] == 1f) || (aiStyle == 93 && ai[0] < 0f) || type == 540 || type == 756 || type == 818 || type == 856 || type == 961 || type == 933 || ProjectileID.Sets.IsAGolfBall[type] || !ProjectileLoader.ShouldUpdatePosition(this))
		{
			return;
		}
		if (wet)
		{
			position += wetVelocity;
		}
		else
		{
			position += velocity;
		}
		if (Main.projPet[type] && tileCollide)
		{
			bool fall = false;
			if (aiStyle == 62)
			{
				fall = true;
			}
			switch (type)
			{
			case 317:
			case 387:
			case 388:
			case 533:
			case 759:
				fall = true;
				break;
			}
			Vector4 vector = Collision.SlopeCollision(position, velocity, width, height, 0f, fall);
			position.X = vector.X;
			position.Y = vector.Y;
			velocity.X = vector.Z;
			velocity.Y = vector.W;
		}
	}

	public void FishingCheck()
	{
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_067f: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_06cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_074f: Unknown result type (might be due to invalid IL or missing references)
		if (Main.player[owner].wet && !(base.Center.Y >= Main.player[owner].RotatedRelativePoint(Main.player[owner].MountedCenter).Y))
		{
			return;
		}
		FishingAttempt fisher = default(FishingAttempt);
		fisher.X = (int)(base.Center.X / 16f);
		fisher.Y = (int)(base.Center.Y / 16f);
		fisher.bobberType = type;
		GetFishingPondState(fisher.X, fisher.Y, out fisher.inLava, out fisher.inHoney, out fisher.waterTilesCount, out fisher.chumsInWater);
		if (Main.notTheBeesWorld && Main.rand.Next(2) == 0)
		{
			fisher.inHoney = false;
		}
		if (fisher.waterTilesCount < 75)
		{
			Main.player[owner].displayedFishingInfo = Language.GetTextValue("GameUI.NotEnoughWater");
			return;
		}
		fisher.playerFishingConditions = Main.player[owner].GetFishingConditions();
		if (fisher.playerFishingConditions.BaitItemType == 2673)
		{
			Main.player[owner].displayedFishingInfo = Language.GetTextValue("GameUI.FishingWarning");
			if ((fisher.X < 380 || fisher.X > Main.maxTilesX - 380) && fisher.waterTilesCount > 1000 && !NPC.AnyNPCs(370))
			{
				ai[1] = Main.rand.Next(-180, -60) - 100;
				localAI[1] = 1f;
				netUpdate = true;
			}
			return;
		}
		fisher.fishingLevel = fisher.playerFishingConditions.FinalFishingLevel;
		if (fisher.fishingLevel == 0)
		{
			return;
		}
		fisher.CanFishInLava = ItemID.Sets.CanFishInLava[fisher.playerFishingConditions.PoleItemType] || ItemID.Sets.IsLavaBait[fisher.playerFishingConditions.BaitItemType] || Main.player[owner].accLavaFishing;
		if (fisher.chumsInWater > 0)
		{
			fisher.fishingLevel += 11;
		}
		if (fisher.chumsInWater > 1)
		{
			fisher.fishingLevel += 6;
		}
		if (fisher.chumsInWater > 2)
		{
			fisher.fishingLevel += 3;
		}
		Main.player[owner].displayedFishingInfo = Language.GetTextValue("GameUI.FishingPower", fisher.fishingLevel);
		fisher.waterNeededToFish = 300;
		float num = (float)Main.maxTilesX / 4200f;
		num *= num;
		fisher.atmo = (float)((double)(position.Y / 16f - (60f + 10f * num)) / (Main.worldSurface / 6.0));
		if ((double)fisher.atmo < 0.25)
		{
			fisher.atmo = 0.25f;
		}
		if (fisher.atmo > 1f)
		{
			fisher.atmo = 1f;
		}
		fisher.waterNeededToFish = (int)((float)fisher.waterNeededToFish * fisher.atmo);
		fisher.waterQuality = (float)fisher.waterTilesCount / (float)fisher.waterNeededToFish;
		if (fisher.waterQuality < 1f)
		{
			fisher.fishingLevel = (int)((float)fisher.fishingLevel * fisher.waterQuality);
		}
		fisher.waterQuality = 1f - fisher.waterQuality;
		if (fisher.waterTilesCount < fisher.waterNeededToFish)
		{
			Main.player[owner].displayedFishingInfo = Language.GetTextValue("GameUI.FullFishingPower", fisher.fishingLevel, 0.0 - Math.Round(fisher.waterQuality * 100f));
		}
		if (Main.player[owner].luck < 0f)
		{
			if (Main.rand.NextFloat() < 0f - Main.player[owner].luck)
			{
				fisher.fishingLevel = (int)((double)fisher.fishingLevel * (0.9 - (double)Main.rand.NextFloat() * 0.3));
			}
		}
		else if (Main.rand.NextFloat() < Main.player[owner].luck)
		{
			fisher.fishingLevel = (int)((double)fisher.fishingLevel * (1.1 + (double)Main.rand.NextFloat() * 0.3));
		}
		int num2 = (fisher.fishingLevel + 75) / 2;
		if (Main.rand.Next(100) > num2)
		{
			return;
		}
		fisher.heightLevel = 0;
		if (Main.remixWorld)
		{
			if ((double)fisher.Y < Main.worldSurface * 0.5)
			{
				fisher.heightLevel = 0;
			}
			else if ((double)fisher.Y < Main.worldSurface)
			{
				fisher.heightLevel = 1;
			}
			else if ((double)fisher.Y < Main.rockLayer)
			{
				fisher.heightLevel = 3;
			}
			else if (fisher.Y < Main.maxTilesY - 300)
			{
				fisher.heightLevel = 2;
			}
			else
			{
				fisher.heightLevel = 4;
			}
			if (fisher.heightLevel == 2 && Main.rand.Next(2) == 0)
			{
				fisher.heightLevel = 1;
			}
		}
		else if ((double)fisher.Y < Main.worldSurface * 0.5)
		{
			fisher.heightLevel = 0;
		}
		else if ((double)fisher.Y < Main.worldSurface)
		{
			fisher.heightLevel = 1;
		}
		else if ((double)fisher.Y < Main.rockLayer)
		{
			fisher.heightLevel = 2;
		}
		else if (fisher.Y < Main.maxTilesY - 300)
		{
			fisher.heightLevel = 3;
		}
		else
		{
			fisher.heightLevel = 4;
		}
		FishingCheck_RollDropLevels(fisher.fishingLevel, out fisher.common, out fisher.uncommon, out fisher.rare, out fisher.veryrare, out fisher.legendary, out fisher.crate);
		PlayerLoader.ModifyFishingAttempt(Main.player[owner], ref fisher);
		FishingCheck_ProbeForQuestFish(ref fisher);
		FishingCheck_RollEnemySpawns(ref fisher);
		FishingCheck_RollItemDrop(ref fisher);
		bool flag = false;
		AdvancedPopupRequest sonar = default(AdvancedPopupRequest);
		Vector2 sonarPosition = default(Vector2);
		((Vector2)(ref sonarPosition))._002Ector(position.X, position.Y);
		PlayerLoader.CatchFish(Main.player[owner], fisher, ref fisher.rolledItemDrop, ref fisher.rolledEnemySpawn, ref sonar, ref sonarPosition);
		if (sonar.Text != null && Main.player[owner].sonarPotion)
		{
			PopupText.AssignAsSonarText(PopupText.NewText(sonar, sonarPosition));
		}
		if (fisher.rolledItemDrop > 0)
		{
			if (sonar.Text == null && Main.player[owner].sonarPotion)
			{
				Item item = new Item();
				item.SetDefaults(fisher.rolledItemDrop);
				item.position = position;
				PopupText.AssignAsSonarText(PopupText.NewText(PopupTextContext.SonarAlert, item, 1, noStack: true));
			}
			float num3 = fisher.fishingLevel;
			ai[1] = (float)Main.rand.Next(-240, -90) - num3;
			localAI[1] = fisher.rolledItemDrop;
			netUpdate = true;
			flag = true;
		}
		if (fisher.rolledEnemySpawn > 0)
		{
			if (sonar.Text == null && Main.player[owner].sonarPotion)
			{
				PopupText.AssignAsSonarText(PopupText.NewText(PopupTextContext.SonarAlert, fisher.rolledEnemySpawn, base.Center, stay5TimesLonger: false));
			}
			float num4 = fisher.fishingLevel;
			ai[1] = (float)Main.rand.Next(-240, -90) - num4;
			localAI[1] = -fisher.rolledEnemySpawn;
			netUpdate = true;
			flag = true;
		}
		if (!flag && fisher.inLava)
		{
			int num5 = 0;
			if (ItemID.Sets.IsLavaBait[fisher.playerFishingConditions.BaitItemType])
			{
				num5++;
			}
			if (ItemID.Sets.CanFishInLava[fisher.playerFishingConditions.PoleItemType])
			{
				num5++;
			}
			if (Main.player[owner].accLavaFishing)
			{
				num5++;
			}
			if (num5 >= 2)
			{
				localAI[1] += 240f;
			}
		}
		if (fisher.CanFishInLava && fisher.inLava)
		{
			AchievementsHelper.HandleSpecialEvent(Main.player[owner], 19);
		}
	}

	private void FishingCheck_RollEnemySpawns(ref FishingAttempt fisher)
	{
		if (fisher.inLava || fisher.inHoney || !Main.bloodMoon || Main.dayTime)
		{
			return;
		}
		int maxValue = 6;
		if (fisher.playerFishingConditions.PoleItemType == 4325)
		{
			maxValue = 3;
		}
		if (Main.rand.Next(maxValue) != 0)
		{
			return;
		}
		if (!NPC.unlockedSlimeRedSpawn && Main.rand.Next(5) == 0)
		{
			fisher.rolledEnemySpawn = 682;
		}
		else if (Main.hardMode)
		{
			fisher.rolledEnemySpawn = Utils.SelectRandom(Main.rand, new short[4] { 620, 621, 586, 587 });
			if (Main.rand.Next(10) == 0)
			{
				fisher.rolledEnemySpawn = 618;
			}
		}
		else
		{
			fisher.rolledEnemySpawn = Utils.SelectRandom(Main.rand, new short[2] { 586, 587 });
		}
	}

	private void FishingCheck_RollItemDrop(ref FishingAttempt fisher)
	{
		bool flag = Main.player[owner].ZoneCorrupt;
		bool flag2 = Main.player[owner].ZoneCrimson;
		bool flag3 = Main.player[owner].ZoneJungle;
		bool flag4 = Main.player[owner].ZoneSnow;
		bool flag5 = Main.player[owner].ZoneDungeon;
		if (!NPC.downedBoss3)
		{
			flag5 = false;
		}
		if (Main.notTheBeesWorld && !Main.remixWorld && Main.rand.Next(2) == 0)
		{
			flag3 = false;
		}
		if (Main.remixWorld && fisher.heightLevel == 0)
		{
			flag = false;
			flag2 = false;
		}
		else if (flag && flag2)
		{
			if (Main.rand.Next(2) == 0)
			{
				flag2 = false;
			}
			else
			{
				flag = false;
			}
		}
		if (fisher.rolledEnemySpawn > 0)
		{
			return;
		}
		if (fisher.inLava)
		{
			if (fisher.CanFishInLava)
			{
				if (fisher.crate && Main.rand.Next(6) == 0)
				{
					fisher.rolledItemDrop = (Main.hardMode ? 4878 : 4877);
				}
				else if (fisher.legendary && Main.hardMode && Main.rand.Next(3) == 0)
				{
					fisher.rolledItemDrop = Main.rand.NextFromList(new short[4] { 4819, 4820, 4872, 2331 });
				}
				else if (fisher.legendary && !Main.hardMode && Main.rand.Next(3) == 0)
				{
					fisher.rolledItemDrop = Main.rand.NextFromList(new short[3] { 4819, 4820, 4872 });
				}
				else if (fisher.veryrare)
				{
					fisher.rolledItemDrop = 2312;
				}
				else if (fisher.rare)
				{
					fisher.rolledItemDrop = 2315;
				}
			}
			return;
		}
		if (fisher.inHoney)
		{
			if (fisher.rare || (fisher.uncommon && Main.rand.Next(2) == 0))
			{
				fisher.rolledItemDrop = 2314;
			}
			else if (fisher.uncommon && fisher.questFish == 2451)
			{
				fisher.rolledItemDrop = 2451;
			}
			return;
		}
		if (Main.rand.Next(50) > fisher.fishingLevel && Main.rand.Next(50) > fisher.fishingLevel && fisher.waterTilesCount < fisher.waterNeededToFish)
		{
			fisher.rolledItemDrop = Main.rand.Next(2337, 2340);
			if (Main.rand.Next(8) == 0)
			{
				fisher.rolledItemDrop = 5275;
			}
			return;
		}
		if (fisher.crate)
		{
			bool hardMode = Main.hardMode;
			if (fisher.rare && flag5)
			{
				fisher.rolledItemDrop = (hardMode ? 3984 : 3205);
			}
			else if (fisher.rare && (Main.player[owner].ZoneBeach || (Main.remixWorld && fisher.heightLevel == 1 && (double)fisher.Y >= Main.rockLayer && Main.rand.Next(2) == 0)))
			{
				fisher.rolledItemDrop = (hardMode ? 5003 : 5002);
			}
			else if (fisher.rare && flag)
			{
				fisher.rolledItemDrop = (hardMode ? 3982 : 3203);
			}
			else if (fisher.rare && flag2)
			{
				fisher.rolledItemDrop = (hardMode ? 3983 : 3204);
			}
			else if (fisher.rare && Main.player[owner].ZoneHallow)
			{
				fisher.rolledItemDrop = (hardMode ? 3986 : 3207);
			}
			else if (fisher.rare && flag3)
			{
				fisher.rolledItemDrop = (hardMode ? 3987 : 3208);
			}
			else if (fisher.rare && Main.player[owner].ZoneSnow)
			{
				fisher.rolledItemDrop = (hardMode ? 4406 : 4405);
			}
			else if (fisher.rare && Main.player[owner].ZoneDesert)
			{
				fisher.rolledItemDrop = (hardMode ? 4408 : 4407);
			}
			else if (fisher.rare && fisher.heightLevel == 0)
			{
				fisher.rolledItemDrop = (hardMode ? 3985 : 3206);
			}
			else if (fisher.veryrare || fisher.legendary)
			{
				fisher.rolledItemDrop = (hardMode ? 3981 : 2336);
			}
			else if (fisher.uncommon)
			{
				fisher.rolledItemDrop = (hardMode ? 3980 : 2335);
			}
			else
			{
				fisher.rolledItemDrop = (hardMode ? 3979 : 2334);
			}
			return;
		}
		if (!NPC.combatBookWasUsed && Main.bloodMoon && fisher.legendary && Main.rand.Next(3) == 0)
		{
			fisher.rolledItemDrop = 4382;
			return;
		}
		if (Main.bloodMoon && fisher.legendary && Main.rand.Next(2) == 0)
		{
			fisher.rolledItemDrop = 5240;
			return;
		}
		if (fisher.legendary && Main.rand.Next(5) == 0)
		{
			fisher.rolledItemDrop = 2423;
			return;
		}
		if (fisher.legendary && Main.rand.Next(5) == 0)
		{
			fisher.rolledItemDrop = 3225;
			return;
		}
		if (fisher.legendary && Main.rand.Next(10) == 0)
		{
			fisher.rolledItemDrop = 2420;
			return;
		}
		if (!fisher.legendary && !fisher.veryrare && fisher.uncommon && Main.rand.Next(5) == 0)
		{
			fisher.rolledItemDrop = 3196;
			return;
		}
		bool flag6 = Main.player[owner].ZoneDesert;
		if (flag5)
		{
			flag6 = false;
			if (fisher.rolledItemDrop == 0 && fisher.veryrare && Main.rand.Next(7) == 0)
			{
				fisher.rolledItemDrop = 3000;
			}
		}
		else
		{
			if (flag)
			{
				if (fisher.legendary && Main.hardMode && Main.player[owner].ZoneSnow && fisher.heightLevel == 3 && Main.rand.Next(3) != 0)
				{
					fisher.rolledItemDrop = 2429;
				}
				else if (fisher.legendary && Main.hardMode && Main.rand.Next(2) == 0)
				{
					fisher.rolledItemDrop = 3210;
				}
				else if (fisher.rare)
				{
					fisher.rolledItemDrop = 2330;
				}
				else if (fisher.uncommon && fisher.questFish == 2454)
				{
					fisher.rolledItemDrop = 2454;
				}
				else if (fisher.uncommon && fisher.questFish == 2485)
				{
					fisher.rolledItemDrop = 2485;
				}
				else if (fisher.uncommon && fisher.questFish == 2457)
				{
					fisher.rolledItemDrop = 2457;
				}
				else if (fisher.uncommon)
				{
					fisher.rolledItemDrop = 2318;
				}
			}
			else if (flag2)
			{
				if (fisher.legendary && Main.hardMode && Main.player[owner].ZoneSnow && fisher.heightLevel == 3 && Main.rand.Next(3) != 0)
				{
					fisher.rolledItemDrop = 2429;
				}
				else if (fisher.legendary && Main.hardMode && Main.rand.Next(2) == 0)
				{
					fisher.rolledItemDrop = 3211;
				}
				else if (fisher.uncommon && fisher.questFish == 2477)
				{
					fisher.rolledItemDrop = 2477;
				}
				else if (fisher.uncommon && fisher.questFish == 2463)
				{
					fisher.rolledItemDrop = 2463;
				}
				else if (fisher.uncommon)
				{
					fisher.rolledItemDrop = 2319;
				}
				else if (fisher.common)
				{
					fisher.rolledItemDrop = 2305;
				}
			}
			else if (Main.player[owner].ZoneHallow)
			{
				if (flag6 && Main.rand.Next(2) == 0)
				{
					if (fisher.uncommon && fisher.questFish == 4393)
					{
						fisher.rolledItemDrop = 4393;
					}
					else if (fisher.uncommon && fisher.questFish == 4394)
					{
						fisher.rolledItemDrop = 4394;
					}
					else if (fisher.uncommon)
					{
						fisher.rolledItemDrop = 4410;
					}
					else if (Main.rand.Next(3) == 0)
					{
						fisher.rolledItemDrop = 4402;
					}
					else
					{
						fisher.rolledItemDrop = 4401;
					}
				}
				else if (fisher.legendary && Main.hardMode && Main.player[owner].ZoneSnow && fisher.heightLevel == 3 && Main.rand.Next(3) != 0)
				{
					fisher.rolledItemDrop = 2429;
				}
				else if (fisher.legendary && Main.hardMode && Main.rand.Next(2) == 0)
				{
					fisher.rolledItemDrop = 3209;
				}
				else if (fisher.legendary && Main.hardMode && Main.rand.Next(3) != 0)
				{
					fisher.rolledItemDrop = 5274;
				}
				else if (fisher.heightLevel > 1 && fisher.veryrare)
				{
					fisher.rolledItemDrop = 2317;
				}
				else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2465)
				{
					fisher.rolledItemDrop = 2465;
				}
				else if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2468)
				{
					fisher.rolledItemDrop = 2468;
				}
				else if (fisher.rare)
				{
					fisher.rolledItemDrop = 2310;
				}
				else if (fisher.uncommon && fisher.questFish == 2471)
				{
					fisher.rolledItemDrop = 2471;
				}
				else if (fisher.uncommon)
				{
					fisher.rolledItemDrop = 2307;
				}
			}
			if (fisher.rolledItemDrop == 0 && Main.player[owner].ZoneGlowshroom && fisher.uncommon && fisher.questFish == 2475)
			{
				fisher.rolledItemDrop = 2475;
			}
			if (flag4 && flag3 && Main.rand.Next(2) == 0)
			{
				flag4 = false;
			}
			if (fisher.rolledItemDrop == 0 && flag4)
			{
				if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2467)
				{
					fisher.rolledItemDrop = 2467;
				}
				else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2470)
				{
					fisher.rolledItemDrop = 2470;
				}
				else if (fisher.heightLevel >= 2 && fisher.uncommon && fisher.questFish == 2484)
				{
					fisher.rolledItemDrop = 2484;
				}
				else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2466)
				{
					fisher.rolledItemDrop = 2466;
				}
				else if ((fisher.common && Main.rand.Next(12) == 0) || (fisher.uncommon && Main.rand.Next(6) == 0))
				{
					fisher.rolledItemDrop = 3197;
				}
				else if (fisher.uncommon)
				{
					fisher.rolledItemDrop = 2306;
				}
				else if (fisher.common)
				{
					fisher.rolledItemDrop = 2299;
				}
				else if (fisher.heightLevel > 1 && Main.rand.Next(3) == 0)
				{
					fisher.rolledItemDrop = 2309;
				}
			}
			if (fisher.rolledItemDrop == 0 && flag3)
			{
				if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2452)
				{
					fisher.rolledItemDrop = 2452;
				}
				else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2483)
				{
					fisher.rolledItemDrop = 2483;
				}
				else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2488)
				{
					fisher.rolledItemDrop = 2488;
				}
				else if (fisher.heightLevel >= 1 && fisher.uncommon && fisher.questFish == 2486)
				{
					fisher.rolledItemDrop = 2486;
				}
				else if (fisher.heightLevel > 1 && fisher.uncommon)
				{
					fisher.rolledItemDrop = 2311;
				}
				else if (fisher.uncommon)
				{
					fisher.rolledItemDrop = 2313;
				}
				else if (fisher.common)
				{
					fisher.rolledItemDrop = 2302;
				}
			}
		}
		if (fisher.rolledItemDrop == 0)
		{
			if ((Main.remixWorld && fisher.heightLevel == 1 && (double)fisher.Y >= Main.rockLayer && Main.rand.Next(3) == 0) || (fisher.heightLevel <= 1 && (fisher.X < 380 || fisher.X > Main.maxTilesX - 380) && fisher.waterTilesCount > 1000))
			{
				if (fisher.veryrare && Main.rand.Next(2) == 0)
				{
					fisher.rolledItemDrop = 2341;
				}
				else if (fisher.veryrare)
				{
					fisher.rolledItemDrop = 2342;
				}
				else if (fisher.rare && Main.rand.Next(5) == 0)
				{
					fisher.rolledItemDrop = 2438;
				}
				else if (fisher.rare && Main.rand.Next(3) == 0)
				{
					fisher.rolledItemDrop = 2332;
				}
				else if (fisher.uncommon && fisher.questFish == 2480)
				{
					fisher.rolledItemDrop = 2480;
				}
				else if (fisher.uncommon && fisher.questFish == 2481)
				{
					fisher.rolledItemDrop = 2481;
				}
				else if (fisher.uncommon)
				{
					fisher.rolledItemDrop = 2316;
				}
				else if (fisher.common && Main.rand.Next(2) == 0)
				{
					fisher.rolledItemDrop = 2301;
				}
				else if (fisher.common)
				{
					fisher.rolledItemDrop = 2300;
				}
				else
				{
					fisher.rolledItemDrop = 2297;
				}
			}
			else if (flag6)
			{
				if (fisher.uncommon && fisher.questFish == 4393)
				{
					fisher.rolledItemDrop = 4393;
				}
				else if (fisher.uncommon && fisher.questFish == 4394)
				{
					fisher.rolledItemDrop = 4394;
				}
				else if (fisher.uncommon)
				{
					fisher.rolledItemDrop = 4410;
				}
				else if (Main.rand.Next(3) == 0)
				{
					fisher.rolledItemDrop = 4402;
				}
				else
				{
					fisher.rolledItemDrop = 4401;
				}
			}
		}
		if (fisher.rolledItemDrop != 0)
		{
			return;
		}
		if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2461)
		{
			fisher.rolledItemDrop = 2461;
		}
		else if (fisher.heightLevel == 0 && fisher.uncommon && fisher.questFish == 2453)
		{
			fisher.rolledItemDrop = 2453;
		}
		else if (fisher.heightLevel == 0 && fisher.uncommon && fisher.questFish == 2473)
		{
			fisher.rolledItemDrop = 2473;
		}
		else if (fisher.heightLevel == 0 && fisher.uncommon && fisher.questFish == 2476)
		{
			fisher.rolledItemDrop = 2476;
		}
		else if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2458)
		{
			fisher.rolledItemDrop = 2458;
		}
		else if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2459)
		{
			fisher.rolledItemDrop = 2459;
		}
		else if (fisher.heightLevel == 0 && fisher.uncommon)
		{
			fisher.rolledItemDrop = 2304;
		}
		else if (fisher.heightLevel > 0 && fisher.heightLevel < 3 && fisher.uncommon && fisher.questFish == 2455)
		{
			fisher.rolledItemDrop = 2455;
		}
		else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2479)
		{
			fisher.rolledItemDrop = 2479;
		}
		else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2456)
		{
			fisher.rolledItemDrop = 2456;
		}
		else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2474)
		{
			fisher.rolledItemDrop = 2474;
		}
		else if (fisher.heightLevel > 1 && fisher.rare && Main.rand.Next(5) == 0)
		{
			if (Main.hardMode && Main.rand.Next(2) == 0)
			{
				fisher.rolledItemDrop = 2437;
			}
			else
			{
				fisher.rolledItemDrop = 2436;
			}
		}
		else if (fisher.heightLevel > 1 && fisher.legendary && Main.rand.Next(3) != 0)
		{
			fisher.rolledItemDrop = 2308;
		}
		else if (fisher.heightLevel > 1 && fisher.veryrare && Main.rand.Next(2) == 0)
		{
			fisher.rolledItemDrop = 2320;
		}
		else if (fisher.heightLevel > 1 && fisher.rare)
		{
			fisher.rolledItemDrop = 2321;
		}
		else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2478)
		{
			fisher.rolledItemDrop = 2478;
		}
		else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2450)
		{
			fisher.rolledItemDrop = 2450;
		}
		else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2464)
		{
			fisher.rolledItemDrop = 2464;
		}
		else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2469)
		{
			fisher.rolledItemDrop = 2469;
		}
		else if (fisher.heightLevel > 2 && fisher.uncommon && fisher.questFish == 2462)
		{
			fisher.rolledItemDrop = 2462;
		}
		else if (fisher.heightLevel > 2 && fisher.uncommon && fisher.questFish == 2482)
		{
			fisher.rolledItemDrop = 2482;
		}
		else if (fisher.heightLevel > 2 && fisher.uncommon && fisher.questFish == 2472)
		{
			fisher.rolledItemDrop = 2472;
		}
		else if (fisher.heightLevel > 2 && fisher.uncommon && fisher.questFish == 2460)
		{
			fisher.rolledItemDrop = 2460;
		}
		else if (fisher.heightLevel > 1 && fisher.uncommon && Main.rand.Next(4) != 0)
		{
			fisher.rolledItemDrop = 2303;
		}
		else if (fisher.heightLevel > 1 && (fisher.uncommon || fisher.common || Main.rand.Next(4) == 0))
		{
			if (Main.rand.Next(4) == 0)
			{
				fisher.rolledItemDrop = 2303;
			}
			else
			{
				fisher.rolledItemDrop = 2309;
			}
		}
		else if (fisher.uncommon && fisher.questFish == 2487)
		{
			fisher.rolledItemDrop = 2487;
		}
		else if (fisher.waterTilesCount > 1000 && fisher.common)
		{
			fisher.rolledItemDrop = 2298;
		}
		else
		{
			fisher.rolledItemDrop = 2290;
		}
	}

	private void FishingCheck_ProbeForQuestFish(ref FishingAttempt fisher)
	{
		fisher.questFish = Main.anglerQuestItemNetIDs[Main.anglerQuest];
		if (Main.player[owner].HasItem(fisher.questFish))
		{
			fisher.questFish = -1;
		}
		if (!NPC.AnyNPCs(369))
		{
			fisher.questFish = -1;
		}
		if (Main.anglerQuestFinished)
		{
			fisher.questFish = -1;
		}
	}

	private void FishingCheck_RollDropLevels(int fishingLevel, out bool common, out bool uncommon, out bool rare, out bool veryrare, out bool legendary, out bool crate)
	{
		int num = 150 / fishingLevel;
		int num2 = 300 / fishingLevel;
		int num3 = 1050 / fishingLevel;
		int num4 = 2250 / fishingLevel;
		int num5 = 4500 / fishingLevel;
		int num6 = 10;
		if (Main.player[owner].cratePotion)
		{
			num6 += 15;
		}
		if (num < 2)
		{
			num = 2;
		}
		if (num2 < 3)
		{
			num2 = 3;
		}
		if (num3 < 4)
		{
			num3 = 4;
		}
		if (num4 < 5)
		{
			num4 = 5;
		}
		if (num5 < 6)
		{
			num5 = 6;
		}
		common = false;
		uncommon = false;
		rare = false;
		veryrare = false;
		legendary = false;
		crate = false;
		if (Main.rand.Next(num) == 0)
		{
			common = true;
		}
		if (Main.rand.Next(num2) == 0)
		{
			uncommon = true;
		}
		if (Main.rand.Next(num3) == 0)
		{
			rare = true;
		}
		if (Main.rand.Next(num4) == 0)
		{
			veryrare = true;
		}
		if (Main.rand.Next(num5) == 0)
		{
			legendary = true;
		}
		if (Main.rand.Next(100) < num6)
		{
			crate = true;
		}
	}

	private static void GetFishingPondState(int x, int y, out bool lava, out bool honey, out int numWaters, out int chumCount)
	{
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		lava = false;
		honey = false;
		numWaters = 0;
		chumCount = 0;
		Point tileCoords = default(Point);
		((Point)(ref tileCoords))._002Ector(0, 0);
		GetFishingPondWidth(x, y, out var minX, out var maxX);
		for (int i = minX; i <= maxX; i++)
		{
			int num = y;
			while (Main.tile[i, num] != null && Main.tile[i, num].liquid > 0 && !WorldGen.SolidTile(i, num) && num < Main.maxTilesY - 10)
			{
				numWaters++;
				num++;
				if (Main.tile[i, num].lava())
				{
					lava = true;
				}
				else if (Main.tile[i, num].honey())
				{
					honey = true;
				}
				tileCoords.X = i;
				tileCoords.Y = num;
				chumCount += Main.instance.ChumBucketProjectileHelper.GetChumsInLocation(tileCoords);
			}
		}
		if (honey)
		{
			numWaters = (int)((double)numWaters * 1.5);
		}
	}

	private static void GetFishingPondWidth(int x, int y, out int minX, out int maxX)
	{
		minX = x;
		maxX = x;
		while (minX > 10 && Main.tile[minX, y] != null && Main.tile[minX, y].liquid > 0 && !WorldGen.SolidTile(minX, y))
		{
			minX--;
		}
		while (maxX < Main.maxTilesX - 10 && Main.tile[maxX, y] != null && Main.tile[maxX, y].liquid > 0 && !WorldGen.SolidTile(maxX, y))
		{
			maxX++;
		}
	}

	public bool CanBeReflected()
	{
		if (active && friendly && !hostile && damage > 0)
		{
			if (type == 728 || type == 955)
			{
				return true;
			}
			if (aiStyle == 1 || aiStyle == 2 || aiStyle == 8 || aiStyle == 21 || aiStyle == 24 || aiStyle == 28 || aiStyle == 29 || aiStyle == 131)
			{
				return true;
			}
		}
		return false;
	}

	public Color GetFairyQueenWeaponsColor(float alphaChannelMultiplier = 1f, float lerpToWhite = 0f, float? rawHueOverride = null)
	{
		//IL_0def: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e03: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e15: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d02: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d14: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d19: Unknown result type (might be due to invalid IL or missing references)
		//IL_066d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0672: Unknown result type (might be due to invalid IL or missing references)
		//IL_0679: Unknown result type (might be due to invalid IL or missing references)
		//IL_067e: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_08dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0688: Unknown result type (might be due to invalid IL or missing references)
		//IL_068a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0690: Unknown result type (might be due to invalid IL or missing references)
		//IL_0695: Unknown result type (might be due to invalid IL or missing references)
		float num = ai[1];
		if (rawHueOverride.HasValue)
		{
			num = rawHueOverride.Value;
		}
		float num2 = (num + 0.5f) % 1f;
		float saturation = 1f;
		float luminosity = 0.5f;
		if (Main.player[owner].active)
		{
			switch (Main.player[owner].name)
			{
			case "Cenx":
			{
				float amount5 = Utils.PingPongFrom01To010(num2);
				amount5 = MathHelper.SmoothStep(0f, 1f, amount5);
				amount5 = MathHelper.SmoothStep(0f, 1f, amount5);
				Color color3 = Color.Lerp(new Color(0.3f, 1f, 0.2f), Color.HotPink, amount5);
				if (lerpToWhite != 0f)
				{
					color3 = Color.Lerp(color3, Color.White, lerpToWhite);
				}
				((Color)(ref color3)).A = (byte)((float)(int)((Color)(ref color3)).A * alphaChannelMultiplier);
				return color3;
			}
			case "Crowno":
				luminosity = MathHelper.Lerp(0.25f, 0.4f, Utils.Turn01ToCyclic010(num2));
				num2 = MathHelper.Lerp(127f / 180f, 47f / 60f, Utils.Turn01ToCyclic010(num2));
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
				break;
			case "Yoraiz0r":
				num2 = MathHelper.Lerp(0.9f, 0.95f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				break;
			case "Jaxrud":
				num2 = MathHelper.Lerp(13f / 72f, 0.43611112f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				break;
			case "Lazure":
				num2 = MathHelper.Lerp(8f / 15f, 83f / 90f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				break;
			case "Leinfors":
				num2 = MathHelper.Lerp(0.7f, 0.77f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				break;
			case "Grox The Great":
				num2 = MathHelper.Lerp(0.31f, 0.5f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 1f, 0.8f);
				break;
			case "Acamaeda":
				num2 = MathHelper.Lerp(0.06f, 0.28f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
				break;
			case "Alchemystics":
				num2 = MathHelper.Lerp(0.74f, 0.96f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.6f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
				break;
			case "Antithesis":
			{
				num2 = 0.51f;
				float amount6 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
				luminosity = MathHelper.Lerp(0f, 0.5f, amount6);
				break;
			}
			case "Aurora3500":
				num2 = MathHelper.Lerp(0.33f, 0.8f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
				break;
			case "Bame":
			{
				float amount4 = Utils.PingPongFrom01To010(num2);
				amount4 = MathHelper.SmoothStep(0f, 1f, amount4);
				amount4 = MathHelper.SmoothStep(0f, 1f, amount4);
				Color color2 = Color.Lerp(Color.Yellow, new Color(0.4f, 0f, 0.75f), amount4);
				if (lerpToWhite != 0f)
				{
					color2 = Color.Lerp(color2, Color.White, lerpToWhite);
				}
				((Color)(ref color2)).A = (byte)((float)(int)((Color)(ref color2)).A * alphaChannelMultiplier);
				return color2;
			}
			case "Criddle":
				num2 = MathHelper.Lerp(0.05f, 0.15f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
				break;
			case "Darthkitten":
			{
				num2 = 1f;
				float amount3 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
				luminosity = MathHelper.Lerp(1f, 0.4f, amount3);
				break;
			}
			case "darthmorf":
			{
				num2 = 0f;
				float amount2 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
				luminosity = MathHelper.Lerp(0f, 0.2f, amount2);
				break;
			}
			case "Discipile":
			{
				num2 = 0.53f;
				float amount14 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
				luminosity = MathHelper.Lerp(0.05f, 0.5f, amount14);
				break;
			}
			case "Doylee":
				num2 = MathHelper.Lerp(0.68f, 1f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
				break;
			case "Ghostar":
			{
				num2 = 0.66f;
				float amount13 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
				luminosity = MathHelper.Lerp(0.15f, 0.85f, amount13);
				break;
			}
			case "Jenosis":
				num2 = MathHelper.Lerp(0.9f, 1.13f, Utils.Turn01ToCyclic010(num2)) % 1f;
				luminosity = 0.5f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
				break;
			case "Kazzymodus":
			{
				num2 = 0.33f;
				float amount12 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
				luminosity = MathHelper.Lerp(0.15f, 0.4f, amount12);
				break;
			}
			case "Khaios":
			{
				num2 = 0.33f;
				float amount11 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
				luminosity = MathHelper.Lerp(0f, 0.2f, amount11);
				break;
			}
			case "Loki":
			{
				num2 = 0f;
				float amount10 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
				luminosity = MathHelper.Lerp(0f, 0.25f, amount10);
				break;
			}
			case "ManaUser":
				num2 = MathHelper.Lerp(0.41f, 0.57f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				break;
			case "Mid":
			{
				num2 = 0f;
				float amount9 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
				luminosity = MathHelper.Lerp(0f, 0.9f, amount9);
				break;
			}
			case "Nimbus":
				num2 = MathHelper.Lerp(0.75f, 1f, Utils.Turn01ToCyclic010(num2));
				luminosity = 1f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.8f);
				break;
			case "Nike Leon":
				num2 = MathHelper.Lerp(0.04f, 0.1f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
				break;
			case "ppowersteef":
				num2 = MathHelper.Lerp(0f, 0.15f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
				break;
			case "RBrandon":
				num2 = 0.03f;
				luminosity = 0.3f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
				break;
			case "Redigit":
				num2 = 0.7f;
				luminosity = 0.5f;
				break;
			case "Serenity":
			{
				num2 = 0.85f;
				float amount8 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
				luminosity = MathHelper.Lerp(1f, 0.5f, amount8);
				break;
			}
			case "Sigma":
				num2 = MathHelper.Lerp(0f, 0.12f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
				break;
			case "teiull":
				num2 = MathHelper.Lerp(0.66f, 1f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				break;
			case "Unit One":
			{
				float amount7 = Utils.PingPongFrom01To010(num2);
				amount7 = MathHelper.SmoothStep(0f, 1f, amount7);
				Color color = Color.Lerp(Color.Yellow, Color.Blue, amount7);
				if (lerpToWhite != 0f)
				{
					color = Color.Lerp(color, Color.White, lerpToWhite);
				}
				((Color)(ref color)).A = (byte)((float)(int)((Color)(ref color)).A * alphaChannelMultiplier);
				return color;
			}
			case "Vulpes Inculta":
				num2 = MathHelper.Lerp(0.65f, 0.75f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
				break;
			case "Waze3174":
				num2 = MathHelper.Lerp(0.33f, 0f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.3f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
				break;
			case "Xman101":
			{
				num2 = 0.06f;
				float amount = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
				luminosity = MathHelper.Lerp(0f, 0.5f, amount);
				break;
			}
			case "Zoomo":
				num2 = 0.77f;
				luminosity = 0.5f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
				break;
			}
		}
		Color color4 = Main.hslToRgb(num2, saturation, luminosity);
		color4 *= Opacity;
		if (lerpToWhite != 0f)
		{
			color4 = Color.Lerp(color4, Color.White, lerpToWhite);
		}
		((Color)(ref color4)).A = (byte)((float)(int)((Color)(ref color4)).A * alphaChannelMultiplier);
		return color4;
	}

	public float GetLastPrismHue(float laserIndex, ref float laserLuminance, ref float laserAlphaMultiplier)
	{
		//IL_0724: Unknown result type (might be due to invalid IL or missing references)
		//IL_0729: Unknown result type (might be due to invalid IL or missing references)
		//IL_072f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0734: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a90: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab0: Unknown result type (might be due to invalid IL or missing references)
		if (Main.player[owner].active)
		{
			double timeForVisualEffects = Main.timeForVisualEffects;
			switch (Main.player[owner].name)
			{
			case "Cenx":
			{
				float amount2 = Utils.PingPongFrom01To010(laserIndex / 6f);
				amount2 = MathHelper.SmoothStep(0f, 1f, amount2);
				amount2 = MathHelper.SmoothStep(0f, 1f, amount2);
				return Main.rgbToHsl(Color.Lerp(new Color(0.3f, 1f, 0.2f), Color.HotPink, amount2)).X;
			}
			case "Crowno":
				laserLuminance = MathHelper.Lerp(0.25f, 0.4f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.5f;
				return MathHelper.Lerp(127f / 180f, 47f / 60f, Utils.Turn01ToCyclic010(laserIndex / 6f));
			case "Tsuki":
			case "Yoraiz0r":
				return 0.92f;
			case "Lazure":
				return MathHelper.Lerp(8f / 15f, 83f / 90f, Utils.Turn01ToCyclic010(laserIndex / 6f));
			case "Jaxrud":
				return MathHelper.Lerp(13f / 72f, 0.43611112f, Utils.Turn01ToCyclic010(laserIndex / 6f));
			case "Ghostar":
				laserLuminance = MathHelper.Lerp(0.4f, 0.7f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.3f;
				return 0.66f;
			case "Devalaous":
				return 0.66f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.1f;
			case "Leinfors":
				return 0.73f + (float)Math.Cos(timeForVisualEffects / 3.0 * 6.2831854820251465) * 0.03f;
			case "Aeroblop":
				return 0.25f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.1f;
			case "Doylee":
				return 0.84f + (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465) * 0.16f;
			case "Darkhalis":
			case "Arkhalis":
				return 0.75f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.07f;
			case "Nike Leon":
				return 0.07f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.04f;
			case "Suweeka":
				return 0.5f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.18f;
			case "W1K":
				return 0.75f + (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465) * 0.05f;
			case "Grox The Great":
				return 0.41f + (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465) * 0.1f;
			case "Acamaeda":
				return 0.18f + (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465) * 0.1f;
			case "Alchemystics":
				return 0.73f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.18f;
			case "Antithesis":
				laserLuminance = 0.25f;
				laserAlphaMultiplier = 0.4f;
				return 0.7f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.05f;
			case "Aurora3500":
				laserLuminance = MathHelper.Lerp(0f, 0.5f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.25f;
				return 0.35f;
			case "Bame":
			{
				float amount = Utils.PingPongFrom01To010(laserIndex / 6f);
				amount = MathHelper.SmoothStep(0f, 1f, amount);
				amount = MathHelper.SmoothStep(0f, 1f, amount);
				return Main.rgbToHsl(Color.Lerp(Color.Yellow, new Color(0.2f, 0f, 0.7f), amount)).X;
			}
			case "Criddle":
				return 0.91f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.19f;
			case "Darthkitten":
				laserLuminance = MathHelper.Lerp(0.4f, 0.9f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.3f;
				return 1f;
			case "darthmorf":
				laserLuminance = MathHelper.Lerp(0f, 0.2f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.4f;
				return 0f;
			case "Discipile":
				laserLuminance = MathHelper.Lerp(0f, 0.4f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.35f;
				return 0.55f;
			case "Jenosis":
				return 0.66f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.08f;
			case "Kazzymodus":
				laserLuminance = MathHelper.Lerp(0.6f, 0.8f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.3f;
				return 0.33f;
			case "Khaios":
				laserLuminance = MathHelper.Lerp(0f, 0.1f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.25f;
				return 0.35f;
			case "Loki":
				laserLuminance = MathHelper.Lerp(0f, 0.3f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 5.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.4f;
				return 0f;
			case "ManaUser":
				return 0.49f + (float)Math.Cos(timeForVisualEffects / 140.0 * 6.2831854820251465) * 0.08f;
			case "Mid":
				laserLuminance = 0.25f;
				laserAlphaMultiplier = 0.4f;
				return 0.86f + (float)Math.Cos(timeForVisualEffects / 270.0 * 6.2831854820251465) * 0.13f;
			case "Nimbus":
				laserLuminance = MathHelper.Lerp(0f, 0.3f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 20.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.2f;
				return 0.75f;
			case "ppowersteef":
				laserLuminance = MathHelper.Lerp(0.1f, 0.5f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.25f;
				return 0.6f;
			case "RBrandon":
				laserLuminance = MathHelper.Lerp(0f, 0.5f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.4f;
				return 1f;
			case "Redigit":
				return 0.7f;
			case "Serenity":
				laserLuminance = MathHelper.Lerp(0.9f, 0.65f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.3f;
				return 0.85f;
			case "Sigma":
				return 0.06f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.06f;
			case "teiull":
				return 0.5f + (float)Math.Cos(timeForVisualEffects / 45.0 * 6.2831854820251465) * 0.3f;
			case "Unit One":
				return 0.38f + (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465) * 0.24f;
			case "Vulpes Inculta":
				return 0.7f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.05f;
			case "Waze3174":
				return 0.38f + (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465) * 0.24f;
			case "Xman101":
				laserLuminance = MathHelper.Lerp(0.9f, 0.55f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.2f;
				return 0.33f;
			case "Zoomo":
				return 0.77f;
			case "Random":
				return Main.rand.NextFloat();
			case "bluemagic123":
			case "blushiemagic":
				return 0.55f + (float)Math.Cos(Main.time / 120.0 * 6.2831854820251465) * 0.1f;
			}
		}
		return (float)(int)laserIndex / 6f;
	}

	public static int GetByUUID(int owner, float uuid)
	{
		return GetByUUID(owner, (int)uuid);
	}

	public static int GetByUUID(int owner, int uuid)
	{
		if (uuid < 0 || uuid >= 1000 || owner < 0 || owner >= 255)
		{
			return -1;
		}
		int num = Main.projectileIdentity[owner, uuid];
		if (num >= 0 && Main.projectile[num].active)
		{
			return num;
		}
		return -1;
	}

	public void ProjectileFixDesperation()
	{
		if (owner < 0 || owner >= 255)
		{
			return;
		}
		switch (type)
		{
		case 461:
		case 632:
		case 642:
		case 644:
		{
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].owner == owner && (float)Main.projectile[i].identity == ai[1] && Main.projectile[i].active)
				{
					ai[1] = i;
					break;
				}
			}
			break;
		}
		}
	}

	public bool ShouldUseWindPhysics()
	{
		if (Main.windPhysics)
		{
			bool? flag = ProjectileID.Sets.WindPhysicsImmunity[type];
			if (flag.HasValue)
			{
				return !flag.Value;
			}
			switch (aiStyle)
			{
			case 1:
			case 2:
			case 8:
			case 10:
			case 14:
			case 16:
			case 17:
			case 21:
			case 24:
			case 28:
			case 29:
			case 32:
			case 33:
			case 34:
			case 35:
			case 49:
			case 72:
			case 93:
			case 96:
			case 106:
				return true;
			}
		}
		return false;
	}

	private void AI_151_SuperStar()
	{
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0147: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_016e: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0186: Unknown result type (might be due to invalid IL or missing references)
		//IL_018b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dd: Unknown result type (might be due to invalid IL or missing references)
		alpha -= 10;
		int num = 100;
		if (alpha < num)
		{
			alpha = num;
		}
		if (soundDelay == 0)
		{
			soundDelay = 20 + Main.rand.Next(40);
			SoundEngine.PlaySound(in SoundID.Item9, position);
		}
		rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.005f * (float)direction;
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector((float)Main.screenWidth, (float)Main.screenHeight);
		Rectangle hitbox = base.Hitbox;
		if (((Rectangle)(ref hitbox)).Intersects(Utils.CenteredRectangle(Main.screenPosition + vector / 2f, vector + new Vector2(400f))) && Main.rand.Next(6) == 0)
		{
			Gore.NewGore(position, velocity * 0.2f, Utils.SelectRandom<int>(Main.rand, 16, 17, 17, 17));
		}
		for (int i = 0; i < 2; i++)
		{
			if (Main.rand.Next(8) == 0)
			{
				int num2 = 228;
				Dust dust = Dust.NewDustDirect(position, width, height, num2, 0f, 0f, 127);
				dust.velocity *= 0.25f;
				dust.scale = 1.3f;
				dust.noGravity = true;
				dust.velocity += velocity.RotatedBy((float)Math.PI / 8f * (1f - (float)(2 * i))) * 0.2f;
			}
		}
	}

	public bool IsInterruptible(Player player)
	{
		if (aiStyle == 160)
		{
			return true;
		}
		return false;
	}

	public void Interrupt(Player player)
	{
		if (aiStyle == 160)
		{
			Kill();
			player.heldProj = -1;
			player.itemAnimation = 0;
			player.itemTime = 0;
		}
	}

	internal IEntitySource GetNPCSource_FromThis()
	{
		return GetSource_FromThis();
	}

	internal IEntitySource GetProjectileSource_FromThis()
	{
		return GetSource_FromThis();
	}

	internal IEntitySource GetItemSource_FromThis()
	{
		return GetSource_FromThis();
	}

	internal IEntitySource GetItemSource_DropAsItem()
	{
		return GetSource_DropAsItem();
	}

	internal IEntitySource GetProjectileSource_OnHit(Entity victim, int projectileSourceId)
	{
		return GetSource_OnHit(victim, ProjectileSourceID.ToContextString(projectileSourceId));
	}

	internal IEntitySource GetItemSource_OnHit(Entity victim, int itemSourceId)
	{
		return GetSource_OnHit(victim, ItemSourceID.ToContextString(itemSourceId));
	}

	internal static IEntitySource GetNoneSource()
	{
		return Entity.GetSource_None();
	}

	private void AI_152_SuperStarSlash()
	{
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_0147: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_043b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_015d: Unknown result type (might be due to invalid IL or missing references)
		//IL_018f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0195: Unknown result type (might be due to invalid IL or missing references)
		//IL_01aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_01af: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02db: Unknown result type (might be due to invalid IL or missing references)
		//IL_0333: Unknown result type (might be due to invalid IL or missing references)
		//IL_0353: Unknown result type (might be due to invalid IL or missing references)
		//IL_0359: Unknown result type (might be due to invalid IL or missing references)
		//IL_036d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0377: Unknown result type (might be due to invalid IL or missing references)
		//IL_037c: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_03dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0404: Unknown result type (might be due to invalid IL or missing references)
		//IL_040a: Unknown result type (might be due to invalid IL or missing references)
		//IL_040b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0420: Unknown result type (might be due to invalid IL or missing references)
		//IL_0425: Unknown result type (might be due to invalid IL or missing references)
		float num = (float)Math.PI / 2f;
		bool flag = true;
		if (type == 976)
		{
			flag = false;
		}
		if (flag)
		{
			alpha -= 10;
			int num2 = 100;
			if (alpha < num2)
			{
				alpha = num2;
			}
		}
		if (soundDelay == 0)
		{
			if (type == 977)
			{
				soundDelay = -1;
				SoundEngine.PlaySound(in SoundID.Item1, position);
			}
			else if (type == 976)
			{
				soundDelay = -1;
			}
			else
			{
				soundDelay = 20 + Main.rand.Next(40);
				SoundEngine.PlaySound(in SoundID.Item9, position);
			}
		}
		if (ai[0] != 0f)
		{
			if (type == 976)
			{
				velocity = velocity.RotatedBy(ai[0]);
			}
			else
			{
				int num3 = 10 * MaxUpdates;
				velocity = velocity.RotatedBy(ai[0] / (float)num3);
			}
		}
		if (type == 977)
		{
			velocity *= 0.96f;
			if (Main.rand.Next(8) == 0)
			{
				Dust dust = Dust.NewDustDirect(base.Center, 0, 0, 172, velocity.X * 0.1f, velocity.Y * 0.1f, 100, default(Color), 0.9f);
				dust.noGravity = true;
				dust.position = base.Center;
				dust.velocity = Main.rand.NextVector2Circular(1f, 1f) + velocity * 0.5f;
			}
		}
		if (type == 976)
		{
			if (Collision.LavaCollision(position, width, height))
			{
				Kill();
				return;
			}
			if (++frameCounter >= 2)
			{
				frameCounter = 0;
				if (++frame >= 7)
				{
					frame = 0;
				}
			}
			float fromValue = 60 - timeLeft;
			float fromMax = ai[1] + 20f;
			float num4 = Utils.Remap(fromValue, ai[1], fromMax, 0f, 1f) * Utils.Remap(fromValue, ai[1], ai[1] + 60f, 1f, 0f);
			velocity = velocity.SafeNormalize(Vector2.UnitY) * (4f + 12f * (1f - num4));
			Opacity = Utils.Remap(fromValue, 0f, 10f, 0f, 1f) * Utils.Remap(fromValue, 30f, 60f, 1f, 0f);
			num = 0f;
			if (Main.rand.Next(3) == 0)
			{
				Dust dust2 = Dust.NewDustDirect(position, width, height, 40, 0f, 0f, 0, default(Color), 1.2f);
				dust2.noGravity = true;
				dust2.velocity = velocity * 0.5f;
			}
			if (localAI[1] == 0f)
			{
				localAI[1] = 1f;
				for (int i = 0; i < 10; i++)
				{
					Dust.NewDustDirect(position, width, height, 40, 0f, 0f, 0, default(Color), 0.7f).velocity = velocity.SafeNormalize(Vector2.UnitY).RotatedBy(Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.25f) * (Main.rand.NextFloat() * 3f);
				}
			}
		}
		rotation = velocity.ToRotation() + num;
		tileCollide = false;
	}

	/// <summary>
	/// Changes the <see cref="F:Terraria.Entity.width" /> and <see cref="F:Terraria.Entity.height" /> of the projectile while preserving the <see cref="P:Terraria.Entity.Center" />. Useful for explosive projectiles that expand their hitbox while exploding.
	/// </summary>
	public void Resize(int newWidth, int newHeight)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		position = base.Center;
		width = newWidth;
		height = newHeight;
		base.Center = position;
	}

	private void Shimmer()
	{
		//IL_0201: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_06de: Unknown result type (might be due to invalid IL or missing references)
		//IL_0719: Unknown result type (might be due to invalid IL or missing references)
		//IL_071e: Unknown result type (might be due to invalid IL or missing references)
		if (hostile || (aiStyle == 99 && ai[0] == -1f) || (aiStyle == 15 && (ai[0] == 2f || ai[0] == 4f)))
		{
			return;
		}
		if (type == 502)
		{
			velocity.Y -= 0.4f;
			timeLeft -= 5;
		}
		else if (type == 469 || type == 181)
		{
			velocity.Y -= 0.2f;
			if (type == 469 && velocity.Y < 0f)
			{
				Kill();
			}
		}
		else if (type == 819 || type == 117 || type == 474 || type == 225 || type == 103 || type == 2 || type == 82 || type == 120 || type == 172 || type == 41 || type == 91 || type == 278 || type == 5 || type == 639 || type == 631 || type == 495 || type == 4 || type == 282 || type == 1 || type == 81)
		{
			velocity.Y -= 0.4f;
		}
		else if (aiStyle == 1 || aiStyle == 16 || aiStyle == 40)
		{
			int num = (int)(base.Center.X / 16f);
			int num2 = (int)(position.Y / 16f);
			if (WorldGen.InWorld(num, num2) && Main.tile[num, num2] != null && Main.tile[num, num2].liquid == byte.MaxValue && Main.tile[num, num2].shimmer() && WorldGen.InWorld(num, num2 - 1) && Main.tile[num, num2 - 1] != null && Main.tile[num, num2 - 1].liquid > 0 && Main.tile[num, num2 - 1].shimmer())
			{
				Kill();
			}
			else if (velocity.Y > 0f)
			{
				velocity.Y *= -1f;
				netUpdate = true;
				if (timeLeft > 600)
				{
					timeLeft = 600;
				}
				timeLeft -= 60;
				shimmerWet = false;
				wet = false;
			}
		}
		else if (aiStyle == 5 || aiStyle == 8 || aiStyle == 21 || aiStyle == 28 || aiStyle == 29 || aiStyle == 33 || aiStyle == 36 || aiStyle == 47 || aiStyle == 93 || aiStyle == 115 || aiStyle == 151 || aiStyle == 152)
		{
			int num3 = (int)(base.Center.X / 16f);
			int num4 = (int)(position.Y / 16f);
			if (WorldGen.InWorld(num3, num4) && Main.tile[num3, num4] != null && Main.tile[num3, num4].liquid == byte.MaxValue && Main.tile[num3, num4].shimmer() && WorldGen.InWorld(num3, num4 - 1) && Main.tile[num3, num4 - 1] != null && Main.tile[num3, num4 - 1].liquid > 0 && Main.tile[num3, num4 - 1].shimmer())
			{
				Kill();
			}
			else if (velocity.Y > 0f)
			{
				velocity.Y *= -1f;
				netUpdate = true;
				shimmerWet = false;
				wet = false;
			}
		}
		else if (aiStyle == 15)
		{
			if (velocity.Y > 0f)
			{
				velocity.Y *= -1f;
				netUpdate = true;
			}
			velocity.Y -= 0.4f;
			if (velocity.Y < -8f)
			{
				velocity.Y = -8f;
			}
		}
		else if (aiStyle == 99)
		{
			if (velocity.Y > 0f)
			{
				velocity.Y *= -1f;
				netUpdate = true;
				shimmerWet = false;
				wet = false;
			}
			if (velocity.Y > -8f)
			{
				velocity.Y = -8f;
			}
		}
		else if (aiStyle == 7 || aiStyle == 9 || aiStyle == 13 || aiStyle == 35 || aiStyle == 53 || aiStyle == 130 || aiStyle == 134 || aiStyle == 137 || aiStyle == 138 || aiStyle == 149 || aiStyle == 160)
		{
			Kill();
		}
		else if (aiStyle == 2)
		{
			velocity.Y -= 0.7f;
			if (type == 936 && !NPC.unlockedSlimeRainbowSpawn && velocity.Y < 0f)
			{
				if (timeLeft > 5)
				{
					timeLeft = 5;
				}
				if (Main.netMode != 1)
				{
					NPC.unlockedSlimeRainbowSpawn = true;
					NetMessage.SendData(7);
					int num5 = NPC.NewNPC(GetNPCSource_FromThis(), (int)base.Center.X + 4, (int)base.Center.Y, 681);
					NPC obj = Main.npc[num5];
					obj.velocity = velocity;
					obj.netUpdate = true;
					WorldGen.CheckAchievement_RealEstateAndTownSlimes();
				}
			}
			else
			{
				timeLeft -= 20;
			}
		}
		else if (aiStyle == 14 || aiStyle == 16)
		{
			if (timeLeft > 3000)
			{
				timeLeft -= 60;
			}
			velocity.Y -= 0.5f;
		}
		else if (aiStyle == 25 || aiStyle == 17)
		{
			if (velocity.Y > 10f)
			{
				velocity.Y *= 0.97f;
			}
			velocity.Y -= 0.7f;
			if (velocity.Y < -10f)
			{
				velocity.Y = -10f;
			}
		}
	}

	public void AI()
	{
		ProjectileLoader.ProjectileAI(this);
	}

	public void VanillaAI()
	{
		//IL_6f66: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f82: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f87: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6fa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_6faa: Unknown result type (might be due to invalid IL or missing references)
		//IL_6fd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e29: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_700e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7018: Unknown result type (might be due to invalid IL or missing references)
		//IL_701d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a29: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0143: Unknown result type (might be due to invalid IL or missing references)
		//IL_0148: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0181: Unknown result type (might be due to invalid IL or missing references)
		//IL_0187: Unknown result type (might be due to invalid IL or missing references)
		//IL_018c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0191: Unknown result type (might be due to invalid IL or missing references)
		//IL_019b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_7455: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e65: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3656: Unknown result type (might be due to invalid IL or missing references)
		//IL_213c: Unknown result type (might be due to invalid IL or missing references)
		//IL_216c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2172: Unknown result type (might be due to invalid IL or missing references)
		//IL_2191: Unknown result type (might be due to invalid IL or missing references)
		//IL_219b: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff4: Unknown result type (might be due to invalid IL or missing references)
		//IL_202b: Unknown result type (might be due to invalid IL or missing references)
		//IL_204c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2056: Unknown result type (might be due to invalid IL or missing references)
		//IL_205b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_020b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0219: Unknown result type (might be due to invalid IL or missing references)
		//IL_021e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0224: Unknown result type (might be due to invalid IL or missing references)
		//IL_0229: Unknown result type (might be due to invalid IL or missing references)
		//IL_022e: Unknown result type (might be due to invalid IL or missing references)
		//IL_023f: Unknown result type (might be due to invalid IL or missing references)
		//IL_025a: Unknown result type (might be due to invalid IL or missing references)
		//IL_025f: Unknown result type (might be due to invalid IL or missing references)
		//IL_027c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0283: Unknown result type (might be due to invalid IL or missing references)
		//IL_0288: Unknown result type (might be due to invalid IL or missing references)
		//IL_028d: Unknown result type (might be due to invalid IL or missing references)
		//IL_77cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_77d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_77de: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_220b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2211: Unknown result type (might be due to invalid IL or missing references)
		//IL_2073: Unknown result type (might be due to invalid IL or missing references)
		//IL_20ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_20b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2104: Unknown result type (might be due to invalid IL or missing references)
		//IL_210a: Unknown result type (might be due to invalid IL or missing references)
		//IL_752e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7eb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ed6: Unknown result type (might be due to invalid IL or missing references)
		//IL_7edc: Unknown result type (might be due to invalid IL or missing references)
		//IL_7bda: Unknown result type (might be due to invalid IL or missing references)
		//IL_520f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2252: Unknown result type (might be due to invalid IL or missing references)
		//IL_2289: Unknown result type (might be due to invalid IL or missing references)
		//IL_228f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7faf: Unknown result type (might be due to invalid IL or missing references)
		//IL_7fd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_7fd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_809b: Unknown result type (might be due to invalid IL or missing references)
		//IL_80a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_80aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_7bfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c20: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c26: Unknown result type (might be due to invalid IL or missing references)
		//IL_71fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_721a: Unknown result type (might be due to invalid IL or missing references)
		//IL_721f: Unknown result type (might be due to invalid IL or missing references)
		//IL_723b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7241: Unknown result type (might be due to invalid IL or missing references)
		//IL_726a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7274: Unknown result type (might be due to invalid IL or missing references)
		//IL_7279: Unknown result type (might be due to invalid IL or missing references)
		//IL_524c: Unknown result type (might be due to invalid IL or missing references)
		//IL_22cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_22dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fe6: Unknown result type (might be due to invalid IL or missing references)
		//IL_301b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f79: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0472: Unknown result type (might be due to invalid IL or missing references)
		//IL_7cf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d23: Unknown result type (might be due to invalid IL or missing references)
		//IL_7de8: Unknown result type (might be due to invalid IL or missing references)
		//IL_7df2: Unknown result type (might be due to invalid IL or missing references)
		//IL_7df7: Unknown result type (might be due to invalid IL or missing references)
		//IL_79fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a22: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a28: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a46: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_72a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_72c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_72c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_72de: Unknown result type (might be due to invalid IL or missing references)
		//IL_72eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_72f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_732a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7334: Unknown result type (might be due to invalid IL or missing references)
		//IL_7339: Unknown result type (might be due to invalid IL or missing references)
		//IL_54e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aba: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ae7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aed: Unknown result type (might be due to invalid IL or missing references)
		//IL_4086: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ce6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bac: Unknown result type (might be due to invalid IL or missing references)
		//IL_3be7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bed: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c24: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c29: Unknown result type (might be due to invalid IL or missing references)
		//IL_37a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_37ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_37b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_37bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_37c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_23af: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_2409: Unknown result type (might be due to invalid IL or missing references)
		//IL_2445: Unknown result type (might be due to invalid IL or missing references)
		//IL_244b: Unknown result type (might be due to invalid IL or missing references)
		//IL_085a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ad0: Unknown result type (might be due to invalid IL or missing references)
		//IL_7af4: Unknown result type (might be due to invalid IL or missing references)
		//IL_7afa: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b18: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b94: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ba3: Unknown result type (might be due to invalid IL or missing references)
		//IL_553d: Unknown result type (might be due to invalid IL or missing references)
		//IL_556a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5570: Unknown result type (might be due to invalid IL or missing references)
		//IL_52c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_52ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_52f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_5322: Unknown result type (might be due to invalid IL or missing references)
		//IL_532c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5331: Unknown result type (might be due to invalid IL or missing references)
		//IL_5348: Unknown result type (might be due to invalid IL or missing references)
		//IL_534e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5358: Unknown result type (might be due to invalid IL or missing references)
		//IL_535d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5362: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ef7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d17: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d53: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d59: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d75: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d99: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_233e: Unknown result type (might be due to invalid IL or missing references)
		//IL_237a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2380: Unknown result type (might be due to invalid IL or missing references)
		//IL_306e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3074: Unknown result type (might be due to invalid IL or missing references)
		//IL_3079: Unknown result type (might be due to invalid IL or missing references)
		//IL_307e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3080: Unknown result type (might be due to invalid IL or missing references)
		//IL_3082: Unknown result type (might be due to invalid IL or missing references)
		//IL_101d: Unknown result type (might be due to invalid IL or missing references)
		//IL_104a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1050: Unknown result type (might be due to invalid IL or missing references)
		//IL_106d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1073: Unknown result type (might be due to invalid IL or missing references)
		//IL_1078: Unknown result type (might be due to invalid IL or missing references)
		//IL_1082: Unknown result type (might be due to invalid IL or missing references)
		//IL_1087: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c42: Unknown result type (might be due to invalid IL or missing references)
		//IL_6354: Unknown result type (might be due to invalid IL or missing references)
		//IL_635a: Unknown result type (might be due to invalid IL or missing references)
		//IL_635f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6364: Unknown result type (might be due to invalid IL or missing references)
		//IL_5dbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_53de: Unknown result type (might be due to invalid IL or missing references)
		//IL_540c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5412: Unknown result type (might be due to invalid IL or missing references)
		//IL_5431: Unknown result type (might be due to invalid IL or missing references)
		//IL_543b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5440: Unknown result type (might be due to invalid IL or missing references)
		//IL_5457: Unknown result type (might be due to invalid IL or missing references)
		//IL_545d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5467: Unknown result type (might be due to invalid IL or missing references)
		//IL_546c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5471: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b96: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ba6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bab: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b41: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b50: Unknown result type (might be due to invalid IL or missing references)
		//IL_417b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f25: Unknown result type (might be due to invalid IL or missing references)
		//IL_3091: Unknown result type (might be due to invalid IL or missing references)
		//IL_3093: Unknown result type (might be due to invalid IL or missing references)
		//IL_309e: Unknown result type (might be due to invalid IL or missing references)
		//IL_30a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_30b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_30b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_30bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_82e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_8305: Unknown result type (might be due to invalid IL or missing references)
		//IL_830b: Unknown result type (might be due to invalid IL or missing references)
		//IL_813b: Unknown result type (might be due to invalid IL or missing references)
		//IL_815a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8160: Unknown result type (might be due to invalid IL or missing references)
		//IL_81e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_81ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_81f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_81fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_8203: Unknown result type (might be due to invalid IL or missing references)
		//IL_329f: Unknown result type (might be due to invalid IL or missing references)
		//IL_32e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_25f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2618: Unknown result type (might be due to invalid IL or missing references)
		//IL_261e: Unknown result type (might be due to invalid IL or missing references)
		//IL_263d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2647: Unknown result type (might be due to invalid IL or missing references)
		//IL_264c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1db0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1de8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dee: Unknown result type (might be due to invalid IL or missing references)
		//IL_83de: Unknown result type (might be due to invalid IL or missing references)
		//IL_83fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_8404: Unknown result type (might be due to invalid IL or missing references)
		//IL_84c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_84d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_84d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_8119: Unknown result type (might be due to invalid IL or missing references)
		//IL_57c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3305: Unknown result type (might be due to invalid IL or missing references)
		//IL_3328: Unknown result type (might be due to invalid IL or missing references)
		//IL_332e: Unknown result type (might be due to invalid IL or missing references)
		//IL_334d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3357: Unknown result type (might be due to invalid IL or missing references)
		//IL_335c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2598: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_051e: Unknown result type (might be due to invalid IL or missing references)
		//IL_053f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0545: Unknown result type (might be due to invalid IL or missing references)
		//IL_0564: Unknown result type (might be due to invalid IL or missing references)
		//IL_056e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0573: Unknown result type (might be due to invalid IL or missing references)
		//IL_058a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0590: Unknown result type (might be due to invalid IL or missing references)
		//IL_059a: Unknown result type (might be due to invalid IL or missing references)
		//IL_059f: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_82d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_5691: Unknown result type (might be due to invalid IL or missing references)
		//IL_56c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_56cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_55c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_5601: Unknown result type (might be due to invalid IL or missing references)
		//IL_5607: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_437d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4382: Unknown result type (might be due to invalid IL or missing references)
		//IL_4386: Unknown result type (might be due to invalid IL or missing references)
		//IL_438b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4392: Unknown result type (might be due to invalid IL or missing references)
		//IL_4397: Unknown result type (might be due to invalid IL or missing references)
		//IL_439c: Unknown result type (might be due to invalid IL or missing references)
		//IL_43a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_43a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_43ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_41ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_41fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4203: Unknown result type (might be due to invalid IL or missing references)
		//IL_4210: Unknown result type (might be due to invalid IL or missing references)
		//IL_4216: Unknown result type (might be due to invalid IL or missing references)
		//IL_4218: Unknown result type (might be due to invalid IL or missing references)
		//IL_421d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4220: Unknown result type (might be due to invalid IL or missing references)
		//IL_425c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4262: Unknown result type (might be due to invalid IL or missing references)
		//IL_4277: Unknown result type (might be due to invalid IL or missing references)
		//IL_427e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4283: Unknown result type (might be due to invalid IL or missing references)
		//IL_4291: Unknown result type (might be due to invalid IL or missing references)
		//IL_4296: Unknown result type (might be due to invalid IL or missing references)
		//IL_429d: Unknown result type (might be due to invalid IL or missing references)
		//IL_42a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_42a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_33c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_33da: Unknown result type (might be due to invalid IL or missing references)
		//IL_33df: Unknown result type (might be due to invalid IL or missing references)
		//IL_33e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_33e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_33e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_33ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_33f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_33f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_33fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_3390: Unknown result type (might be due to invalid IL or missing references)
		//IL_3395: Unknown result type (might be due to invalid IL or missing references)
		//IL_3397: Unknown result type (might be due to invalid IL or missing references)
		//IL_3399: Unknown result type (might be due to invalid IL or missing references)
		//IL_339e: Unknown result type (might be due to invalid IL or missing references)
		//IL_33a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_33a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_33ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_2de5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dea: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b43: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b49: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b53: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b58: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0906: Unknown result type (might be due to invalid IL or missing references)
		//IL_0927: Unknown result type (might be due to invalid IL or missing references)
		//IL_092d: Unknown result type (might be due to invalid IL or missing references)
		//IL_094c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0956: Unknown result type (might be due to invalid IL or missing references)
		//IL_095b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0972: Unknown result type (might be due to invalid IL or missing references)
		//IL_0978: Unknown result type (might be due to invalid IL or missing references)
		//IL_0982: Unknown result type (might be due to invalid IL or missing references)
		//IL_0987: Unknown result type (might be due to invalid IL or missing references)
		//IL_098c: Unknown result type (might be due to invalid IL or missing references)
		//IL_692b: Unknown result type (might be due to invalid IL or missing references)
		//IL_693b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6940: Unknown result type (might be due to invalid IL or missing references)
		//IL_6945: Unknown result type (might be due to invalid IL or missing references)
		//IL_64a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_64dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_42be: Unknown result type (might be due to invalid IL or missing references)
		//IL_42e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_430a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4314: Unknown result type (might be due to invalid IL or missing references)
		//IL_4319: Unknown result type (might be due to invalid IL or missing references)
		//IL_4330: Unknown result type (might be due to invalid IL or missing references)
		//IL_4336: Unknown result type (might be due to invalid IL or missing references)
		//IL_4340: Unknown result type (might be due to invalid IL or missing references)
		//IL_4345: Unknown result type (might be due to invalid IL or missing references)
		//IL_434a: Unknown result type (might be due to invalid IL or missing references)
		//IL_343b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b39: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cee: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d15: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d34: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d43: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d60: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d74: Unknown result type (might be due to invalid IL or missing references)
		//IL_05da: Unknown result type (might be due to invalid IL or missing references)
		//IL_05fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0600: Unknown result type (might be due to invalid IL or missing references)
		//IL_062d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0637: Unknown result type (might be due to invalid IL or missing references)
		//IL_063c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0653: Unknown result type (might be due to invalid IL or missing references)
		//IL_0659: Unknown result type (might be due to invalid IL or missing references)
		//IL_0663: Unknown result type (might be due to invalid IL or missing references)
		//IL_0668: Unknown result type (might be due to invalid IL or missing references)
		//IL_066d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0688: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_06cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_06dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0703: Unknown result type (might be due to invalid IL or missing references)
		//IL_0708: Unknown result type (might be due to invalid IL or missing references)
		//IL_070d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6967: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ea9: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ed7: Unknown result type (might be due to invalid IL or missing references)
		//IL_5edd: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f14: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f19: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f30: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f36: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f40: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f45: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b30: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b65: Unknown result type (might be due to invalid IL or missing references)
		//IL_445f: Unknown result type (might be due to invalid IL or missing references)
		//IL_449b: Unknown result type (might be due to invalid IL or missing references)
		//IL_44a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3461: Unknown result type (might be due to invalid IL or missing references)
		//IL_349d: Unknown result type (might be due to invalid IL or missing references)
		//IL_34a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_34c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_34c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_34d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_34d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_34dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_34f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_34fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_3502: Unknown result type (might be due to invalid IL or missing references)
		//IL_2be9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c01: Unknown result type (might be due to invalid IL or missing references)
		//IL_28b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_28be: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_09e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_09e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a15: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a24: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a41: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a50: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a55: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a70: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a90: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a96: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0abf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0adb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af5: Unknown result type (might be due to invalid IL or missing references)
		//IL_887a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a73: Unknown result type (might be due to invalid IL or missing references)
		//IL_5fc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ff5: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ffb: Unknown result type (might be due to invalid IL or missing references)
		//IL_601a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6024: Unknown result type (might be due to invalid IL or missing references)
		//IL_6029: Unknown result type (might be due to invalid IL or missing references)
		//IL_6040: Unknown result type (might be due to invalid IL or missing references)
		//IL_6046: Unknown result type (might be due to invalid IL or missing references)
		//IL_6050: Unknown result type (might be due to invalid IL or missing references)
		//IL_6055: Unknown result type (might be due to invalid IL or missing references)
		//IL_605a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4408: Unknown result type (might be due to invalid IL or missing references)
		//IL_440e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4418: Unknown result type (might be due to invalid IL or missing references)
		//IL_4523: Unknown result type (might be due to invalid IL or missing references)
		//IL_4528: Unknown result type (might be due to invalid IL or missing references)
		//IL_452c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4531: Unknown result type (might be due to invalid IL or missing references)
		//IL_4538: Unknown result type (might be due to invalid IL or missing references)
		//IL_453d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4542: Unknown result type (might be due to invalid IL or missing references)
		//IL_4549: Unknown result type (might be due to invalid IL or missing references)
		//IL_454e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4553: Unknown result type (might be due to invalid IL or missing references)
		//IL_3526: Unknown result type (might be due to invalid IL or missing references)
		//IL_354a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3550: Unknown result type (might be due to invalid IL or missing references)
		//IL_356f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3575: Unknown result type (might be due to invalid IL or missing references)
		//IL_357f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3584: Unknown result type (might be due to invalid IL or missing references)
		//IL_3589: Unknown result type (might be due to invalid IL or missing references)
		//IL_35a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_35aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_35af: Unknown result type (might be due to invalid IL or missing references)
		//IL_0da9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e06: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e22: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e28: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e32: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e37: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e57: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e77: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ea6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ec2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ec8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0edc: Unknown result type (might be due to invalid IL or missing references)
		//IL_074e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0755: Unknown result type (might be due to invalid IL or missing references)
		//IL_075b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0789: Unknown result type (might be due to invalid IL or missing references)
		//IL_078f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0799: Unknown result type (might be due to invalid IL or missing references)
		//IL_079e: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_07cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_07fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0807: Unknown result type (might be due to invalid IL or missing references)
		//IL_080c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6bf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c16: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c64: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c73: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_5969: Unknown result type (might be due to invalid IL or missing references)
		//IL_598d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5993: Unknown result type (might be due to invalid IL or missing references)
		//IL_59b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_59bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_59c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b36: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b43: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b71: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b77: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b81: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b86: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bba: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bce: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf4: Unknown result type (might be due to invalid IL or missing references)
		//IL_9030: Unknown result type (might be due to invalid IL or missing references)
		//IL_9051: Unknown result type (might be due to invalid IL or missing references)
		//IL_9057: Unknown result type (might be due to invalid IL or missing references)
		//IL_9098: Unknown result type (might be due to invalid IL or missing references)
		//IL_90a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_90a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_8936: Unknown result type (might be due to invalid IL or missing references)
		//IL_8940: Unknown result type (might be due to invalid IL or missing references)
		//IL_8945: Unknown result type (might be due to invalid IL or missing references)
		//IL_891f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8929: Unknown result type (might be due to invalid IL or missing references)
		//IL_892e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6144: Unknown result type (might be due to invalid IL or missing references)
		//IL_6172: Unknown result type (might be due to invalid IL or missing references)
		//IL_6178: Unknown result type (might be due to invalid IL or missing references)
		//IL_61a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_61af: Unknown result type (might be due to invalid IL or missing references)
		//IL_61b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_61cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_61d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_61db: Unknown result type (might be due to invalid IL or missing references)
		//IL_61e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_61e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c11: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d11: Unknown result type (might be due to invalid IL or missing references)
		//IL_45b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_45d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_45dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_45f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4600: Unknown result type (might be due to invalid IL or missing references)
		//IL_4605: Unknown result type (might be due to invalid IL or missing references)
		//IL_456e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4574: Unknown result type (might be due to invalid IL or missing references)
		//IL_457e: Unknown result type (might be due to invalid IL or missing references)
		//IL_274a: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1222: Unknown result type (might be due to invalid IL or missing references)
		//IL_1229: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f24: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f58: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f68: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f72: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fa1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_90de: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b53: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b58: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_899c: Unknown result type (might be due to invalid IL or missing references)
		//IL_89a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_89ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_6261: Unknown result type (might be due to invalid IL or missing references)
		//IL_628f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6295: Unknown result type (might be due to invalid IL or missing references)
		//IL_62b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_62be: Unknown result type (might be due to invalid IL or missing references)
		//IL_62c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_62da: Unknown result type (might be due to invalid IL or missing references)
		//IL_62e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_62ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_62ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_62f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d36: Unknown result type (might be due to invalid IL or missing references)
		//IL_4636: Unknown result type (might be due to invalid IL or missing references)
		//IL_463b: Unknown result type (might be due to invalid IL or missing references)
		//IL_463f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4644: Unknown result type (might be due to invalid IL or missing references)
		//IL_464b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4650: Unknown result type (might be due to invalid IL or missing references)
		//IL_4655: Unknown result type (might be due to invalid IL or missing references)
		//IL_465c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4661: Unknown result type (might be due to invalid IL or missing references)
		//IL_4666: Unknown result type (might be due to invalid IL or missing references)
		//IL_47d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_47de: Unknown result type (might be due to invalid IL or missing references)
		//IL_47e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_47e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_47ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_47f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_47f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_47ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_4804: Unknown result type (might be due to invalid IL or missing references)
		//IL_4809: Unknown result type (might be due to invalid IL or missing references)
		//IL_2786: Unknown result type (might be due to invalid IL or missing references)
		//IL_2795: Unknown result type (might be due to invalid IL or missing references)
		//IL_1636: Unknown result type (might be due to invalid IL or missing references)
		//IL_1659: Unknown result type (might be due to invalid IL or missing references)
		//IL_165f: Unknown result type (might be due to invalid IL or missing references)
		//IL_15fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1622: Unknown result type (might be due to invalid IL or missing references)
		//IL_1628: Unknown result type (might be due to invalid IL or missing references)
		//IL_89de: Unknown result type (might be due to invalid IL or missing references)
		//IL_89ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a05: Unknown result type (might be due to invalid IL or missing references)
		//IL_6db8: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_167c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1682: Unknown result type (might be due to invalid IL or missing references)
		//IL_1687: Unknown result type (might be due to invalid IL or missing references)
		//IL_1691: Unknown result type (might be due to invalid IL or missing references)
		//IL_1696: Unknown result type (might be due to invalid IL or missing references)
		//IL_16bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_16c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_1703: Unknown result type (might be due to invalid IL or missing references)
		//IL_1709: Unknown result type (might be due to invalid IL or missing references)
		//IL_170e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1713: Unknown result type (might be due to invalid IL or missing references)
		//IL_a6fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_a704: Unknown result type (might be due to invalid IL or missing references)
		//IL_a709: Unknown result type (might be due to invalid IL or missing references)
		//IL_8bb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_8bbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_8bd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_8bf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ad6: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ae1: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b80: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b87: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d41: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d46: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d52: Unknown result type (might be due to invalid IL or missing references)
		//IL_4680: Unknown result type (might be due to invalid IL or missing references)
		//IL_4686: Unknown result type (might be due to invalid IL or missing references)
		//IL_4690: Unknown result type (might be due to invalid IL or missing references)
		//IL_495c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4998: Unknown result type (might be due to invalid IL or missing references)
		//IL_499e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4863: Unknown result type (might be due to invalid IL or missing references)
		//IL_4884: Unknown result type (might be due to invalid IL or missing references)
		//IL_488a: Unknown result type (might be due to invalid IL or missing references)
		//IL_48a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_48ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_48b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_48cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_48d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_48db: Unknown result type (might be due to invalid IL or missing references)
		//IL_48e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_48e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4824: Unknown result type (might be due to invalid IL or missing references)
		//IL_482a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4834: Unknown result type (might be due to invalid IL or missing references)
		//IL_a69f: Unknown result type (might be due to invalid IL or missing references)
		//IL_a6a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_a6ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_a5f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_a614: Unknown result type (might be due to invalid IL or missing references)
		//IL_a61a: Unknown result type (might be due to invalid IL or missing references)
		//IL_a65b: Unknown result type (might be due to invalid IL or missing references)
		//IL_a665: Unknown result type (might be due to invalid IL or missing references)
		//IL_a66a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8dc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_8de8: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_46af: Unknown result type (might be due to invalid IL or missing references)
		//IL_46c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_46ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_46f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_46f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_46fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4701: Unknown result type (might be due to invalid IL or missing references)
		//IL_470b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4710: Unknown result type (might be due to invalid IL or missing references)
		//IL_4715: Unknown result type (might be due to invalid IL or missing references)
		//IL_4717: Unknown result type (might be due to invalid IL or missing references)
		//IL_471f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4729: Unknown result type (might be due to invalid IL or missing references)
		//IL_4730: Unknown result type (might be due to invalid IL or missing references)
		//IL_473b: Unknown result type (might be due to invalid IL or missing references)
		//IL_475c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4764: Unknown result type (might be due to invalid IL or missing references)
		//IL_476e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4775: Unknown result type (might be due to invalid IL or missing references)
		//IL_4780: Unknown result type (might be due to invalid IL or missing references)
		//IL_49bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_49e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4906: Unknown result type (might be due to invalid IL or missing references)
		//IL_490c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4916: Unknown result type (might be due to invalid IL or missing references)
		//IL_491b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4920: Unknown result type (might be due to invalid IL or missing references)
		//IL_1955: Unknown result type (might be due to invalid IL or missing references)
		//IL_95dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_95fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_9603: Unknown result type (might be due to invalid IL or missing references)
		//IL_9632: Unknown result type (might be due to invalid IL or missing references)
		//IL_963c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9641: Unknown result type (might be due to invalid IL or missing references)
		//IL_9516: Unknown result type (might be due to invalid IL or missing references)
		//IL_9536: Unknown result type (might be due to invalid IL or missing references)
		//IL_953c: Unknown result type (might be due to invalid IL or missing references)
		//IL_957d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9587: Unknown result type (might be due to invalid IL or missing references)
		//IL_958c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad96: Unknown result type (might be due to invalid IL or missing references)
		//IL_ada0: Unknown result type (might be due to invalid IL or missing references)
		//IL_ada5: Unknown result type (might be due to invalid IL or missing references)
		//IL_9875: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f00: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f06: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f19: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f23: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f28: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f49: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a17: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a40: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aae: Unknown result type (might be due to invalid IL or missing references)
		//IL_182d: Unknown result type (might be due to invalid IL or missing references)
		//IL_183a: Unknown result type (might be due to invalid IL or missing references)
		//IL_b58f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b5be: Unknown result type (might be due to invalid IL or missing references)
		//IL_b5c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_b609: Unknown result type (might be due to invalid IL or missing references)
		//IL_b613: Unknown result type (might be due to invalid IL or missing references)
		//IL_b618: Unknown result type (might be due to invalid IL or missing references)
		//IL_927e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d188: Unknown result type (might be due to invalid IL or missing references)
		//IL_d192: Unknown result type (might be due to invalid IL or missing references)
		//IL_d197: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc40: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc45: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc84: Unknown result type (might be due to invalid IL or missing references)
		//IL_cca6: Unknown result type (might be due to invalid IL or missing references)
		//IL_ccb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_ccb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_bcb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_bcec: Unknown result type (might be due to invalid IL or missing references)
		//IL_bcf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd21: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd26: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd30: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd35: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd74: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd79: Unknown result type (might be due to invalid IL or missing references)
		//IL_b69a: Unknown result type (might be due to invalid IL or missing references)
		//IL_b6d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_b6db: Unknown result type (might be due to invalid IL or missing references)
		//IL_b732: Unknown result type (might be due to invalid IL or missing references)
		//IL_b73c: Unknown result type (might be due to invalid IL or missing references)
		//IL_b741: Unknown result type (might be due to invalid IL or missing references)
		//IL_b098: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_b14a: Unknown result type (might be due to invalid IL or missing references)
		//IL_b16d: Unknown result type (might be due to invalid IL or missing references)
		//IL_b173: Unknown result type (might be due to invalid IL or missing references)
		//IL_b1a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_b1ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_b1b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_b1d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_b1da: Unknown result type (might be due to invalid IL or missing references)
		//IL_b1e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_b1e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_b1ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_ae68: Unknown result type (might be due to invalid IL or missing references)
		//IL_ae8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_ae91: Unknown result type (might be due to invalid IL or missing references)
		//IL_aec0: Unknown result type (might be due to invalid IL or missing references)
		//IL_aeca: Unknown result type (might be due to invalid IL or missing references)
		//IL_aecf: Unknown result type (might be due to invalid IL or missing references)
		//IL_aef2: Unknown result type (might be due to invalid IL or missing references)
		//IL_aef8: Unknown result type (might be due to invalid IL or missing references)
		//IL_af02: Unknown result type (might be due to invalid IL or missing references)
		//IL_af07: Unknown result type (might be due to invalid IL or missing references)
		//IL_af0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_a300: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a44: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e78: Unknown result type (might be due to invalid IL or missing references)
		//IL_cccc: Unknown result type (might be due to invalid IL or missing references)
		//IL_ccd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_ccdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_b793: Unknown result type (might be due to invalid IL or missing references)
		//IL_b7c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_b7c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_b807: Unknown result type (might be due to invalid IL or missing references)
		//IL_b811: Unknown result type (might be due to invalid IL or missing references)
		//IL_b816: Unknown result type (might be due to invalid IL or missing references)
		//IL_b251: Unknown result type (might be due to invalid IL or missing references)
		//IL_b274: Unknown result type (might be due to invalid IL or missing references)
		//IL_b27a: Unknown result type (might be due to invalid IL or missing references)
		//IL_b2a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_b2b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_b2b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_afcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_afe7: Unknown result type (might be due to invalid IL or missing references)
		//IL_afed: Unknown result type (might be due to invalid IL or missing references)
		//IL_b01c: Unknown result type (might be due to invalid IL or missing references)
		//IL_b026: Unknown result type (might be due to invalid IL or missing references)
		//IL_b02b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9454: Unknown result type (might be due to invalid IL or missing references)
		//IL_9474: Unknown result type (might be due to invalid IL or missing references)
		//IL_947a: Unknown result type (might be due to invalid IL or missing references)
		//IL_94bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_94c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_94ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_e069: Unknown result type (might be due to invalid IL or missing references)
		//IL_d0c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_d0d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_d0d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_cfb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_cfbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_c2a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_c2d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_c2d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_c301: Unknown result type (might be due to invalid IL or missing references)
		//IL_c307: Unknown result type (might be due to invalid IL or missing references)
		//IL_c30c: Unknown result type (might be due to invalid IL or missing references)
		//IL_c316: Unknown result type (might be due to invalid IL or missing references)
		//IL_c31b: Unknown result type (might be due to invalid IL or missing references)
		//IL_c350: Unknown result type (might be due to invalid IL or missing references)
		//IL_c35a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c35f: Unknown result type (might be due to invalid IL or missing references)
		//IL_bdbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_bdf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_bdf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_b882: Unknown result type (might be due to invalid IL or missing references)
		//IL_b8af: Unknown result type (might be due to invalid IL or missing references)
		//IL_b8b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_b8f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_b900: Unknown result type (might be due to invalid IL or missing references)
		//IL_b905: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b34: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b75: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b84: Unknown result type (might be due to invalid IL or missing references)
		//IL_6eae: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_d305: Unknown result type (might be due to invalid IL or missing references)
		//IL_d310: Unknown result type (might be due to invalid IL or missing references)
		//IL_c006: Unknown result type (might be due to invalid IL or missing references)
		//IL_c037: Unknown result type (might be due to invalid IL or missing references)
		//IL_c03d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c066: Unknown result type (might be due to invalid IL or missing references)
		//IL_c06c: Unknown result type (might be due to invalid IL or missing references)
		//IL_c071: Unknown result type (might be due to invalid IL or missing references)
		//IL_c07b: Unknown result type (might be due to invalid IL or missing references)
		//IL_c080: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_be37: Unknown result type (might be due to invalid IL or missing references)
		//IL_be3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_be47: Unknown result type (might be due to invalid IL or missing references)
		//IL_be4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_be56: Unknown result type (might be due to invalid IL or missing references)
		//IL_be5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b315: Unknown result type (might be due to invalid IL or missing references)
		//IL_b338: Unknown result type (might be due to invalid IL or missing references)
		//IL_b33e: Unknown result type (might be due to invalid IL or missing references)
		//IL_b36d: Unknown result type (might be due to invalid IL or missing references)
		//IL_b377: Unknown result type (might be due to invalid IL or missing references)
		//IL_b37c: Unknown result type (might be due to invalid IL or missing references)
		//IL_b47f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b466: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ec2: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_e604: Unknown result type (might be due to invalid IL or missing references)
		//IL_e60a: Unknown result type (might be due to invalid IL or missing references)
		//IL_e64b: Unknown result type (might be due to invalid IL or missing references)
		//IL_e655: Unknown result type (might be due to invalid IL or missing references)
		//IL_e65a: Unknown result type (might be due to invalid IL or missing references)
		//IL_e677: Unknown result type (might be due to invalid IL or missing references)
		//IL_e684: Unknown result type (might be due to invalid IL or missing references)
		//IL_e689: Unknown result type (might be due to invalid IL or missing references)
		//IL_e68e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d699: Unknown result type (might be due to invalid IL or missing references)
		//IL_d041: Unknown result type (might be due to invalid IL or missing references)
		//IL_d054: Unknown result type (might be due to invalid IL or missing references)
		//IL_d059: Unknown result type (might be due to invalid IL or missing references)
		//IL_d08d: Unknown result type (might be due to invalid IL or missing references)
		//IL_d0b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_d0ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_d0bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_d0fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_d101: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3da: Unknown result type (might be due to invalid IL or missing references)
		//IL_bed6: Unknown result type (might be due to invalid IL or missing references)
		//IL_bee0: Unknown result type (might be due to invalid IL or missing references)
		//IL_bee5: Unknown result type (might be due to invalid IL or missing references)
		//IL_be7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_be80: Unknown result type (might be due to invalid IL or missing references)
		//IL_be86: Unknown result type (might be due to invalid IL or missing references)
		//IL_be90: Unknown result type (might be due to invalid IL or missing references)
		//IL_be95: Unknown result type (might be due to invalid IL or missing references)
		//IL_be9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_bea4: Unknown result type (might be due to invalid IL or missing references)
		//IL_beae: Unknown result type (might be due to invalid IL or missing references)
		//IL_beb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_e760: Unknown result type (might be due to invalid IL or missing references)
		//IL_e766: Unknown result type (might be due to invalid IL or missing references)
		//IL_e77a: Unknown result type (might be due to invalid IL or missing references)
		//IL_e77f: Unknown result type (might be due to invalid IL or missing references)
		//IL_e78c: Unknown result type (might be due to invalid IL or missing references)
		//IL_e793: Unknown result type (might be due to invalid IL or missing references)
		//IL_e247: Unknown result type (might be due to invalid IL or missing references)
		//IL_e269: Unknown result type (might be due to invalid IL or missing references)
		//IL_e26f: Unknown result type (might be due to invalid IL or missing references)
		//IL_e2b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_e2ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_e2bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_e2dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_e2e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_e2ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_e2f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_e31a: Unknown result type (might be due to invalid IL or missing references)
		//IL_e33c: Unknown result type (might be due to invalid IL or missing references)
		//IL_e342: Unknown result type (might be due to invalid IL or missing references)
		//IL_e383: Unknown result type (might be due to invalid IL or missing references)
		//IL_e38d: Unknown result type (might be due to invalid IL or missing references)
		//IL_e392: Unknown result type (might be due to invalid IL or missing references)
		//IL_e3af: Unknown result type (might be due to invalid IL or missing references)
		//IL_e3bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_e3c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_e3c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_e3ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_e40f: Unknown result type (might be due to invalid IL or missing references)
		//IL_e415: Unknown result type (might be due to invalid IL or missing references)
		//IL_e456: Unknown result type (might be due to invalid IL or missing references)
		//IL_e460: Unknown result type (might be due to invalid IL or missing references)
		//IL_e465: Unknown result type (might be due to invalid IL or missing references)
		//IL_e482: Unknown result type (might be due to invalid IL or missing references)
		//IL_e48f: Unknown result type (might be due to invalid IL or missing references)
		//IL_e494: Unknown result type (might be due to invalid IL or missing references)
		//IL_e499: Unknown result type (might be due to invalid IL or missing references)
		//IL_df72: Unknown result type (might be due to invalid IL or missing references)
		//IL_d10e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d113: Unknown result type (might be due to invalid IL or missing references)
		//IL_cae7: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb18: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb69: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c5d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_c609: Unknown result type (might be due to invalid IL or missing references)
		//IL_c60f: Unknown result type (might be due to invalid IL or missing references)
		//IL_c638: Unknown result type (might be due to invalid IL or missing references)
		//IL_c63e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c643: Unknown result type (might be due to invalid IL or missing references)
		//IL_c64d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c652: Unknown result type (might be due to invalid IL or missing references)
		//IL_c687: Unknown result type (might be due to invalid IL or missing references)
		//IL_c691: Unknown result type (might be due to invalid IL or missing references)
		//IL_c696: Unknown result type (might be due to invalid IL or missing references)
		//IL_c419: Unknown result type (might be due to invalid IL or missing references)
		//IL_c41f: Unknown result type (might be due to invalid IL or missing references)
		//IL_c429: Unknown result type (might be due to invalid IL or missing references)
		//IL_c42e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c438: Unknown result type (might be due to invalid IL or missing references)
		//IL_c43d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c138: Unknown result type (might be due to invalid IL or missing references)
		//IL_c169: Unknown result type (might be due to invalid IL or missing references)
		//IL_c16f: Unknown result type (might be due to invalid IL or missing references)
		//IL_c198: Unknown result type (might be due to invalid IL or missing references)
		//IL_c19e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1df: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_b95a: Unknown result type (might be due to invalid IL or missing references)
		//IL_b98a: Unknown result type (might be due to invalid IL or missing references)
		//IL_b990: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9db: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_a4c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_a4c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_a4cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_a4d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_9dc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_9bfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_f519: Unknown result type (might be due to invalid IL or missing references)
		//IL_f51e: Unknown result type (might be due to invalid IL or missing references)
		//IL_f524: Unknown result type (might be due to invalid IL or missing references)
		//IL_f4ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_f4df: Unknown result type (might be due to invalid IL or missing references)
		//IL_e7ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_e7cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_e50e: Unknown result type (might be due to invalid IL or missing references)
		//IL_e530: Unknown result type (might be due to invalid IL or missing references)
		//IL_e536: Unknown result type (might be due to invalid IL or missing references)
		//IL_e577: Unknown result type (might be due to invalid IL or missing references)
		//IL_e581: Unknown result type (might be due to invalid IL or missing references)
		//IL_e586: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_e0ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_e0ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_e0f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_e131: Unknown result type (might be due to invalid IL or missing references)
		//IL_e13b: Unknown result type (might be due to invalid IL or missing references)
		//IL_e140: Unknown result type (might be due to invalid IL or missing references)
		//IL_e179: Unknown result type (might be due to invalid IL or missing references)
		//IL_e17f: Unknown result type (might be due to invalid IL or missing references)
		//IL_e189: Unknown result type (might be due to invalid IL or missing references)
		//IL_e18e: Unknown result type (might be due to invalid IL or missing references)
		//IL_e193: Unknown result type (might be due to invalid IL or missing references)
		//IL_e1b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_e1bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_e1c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_e1d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_e1e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_e1e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_e1eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_e1f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd61: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd88: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_cbb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_c45c: Unknown result type (might be due to invalid IL or missing references)
		//IL_c462: Unknown result type (might be due to invalid IL or missing references)
		//IL_c468: Unknown result type (might be due to invalid IL or missing references)
		//IL_c472: Unknown result type (might be due to invalid IL or missing references)
		//IL_c477: Unknown result type (might be due to invalid IL or missing references)
		//IL_c481: Unknown result type (might be due to invalid IL or missing references)
		//IL_c486: Unknown result type (might be due to invalid IL or missing references)
		//IL_c490: Unknown result type (might be due to invalid IL or missing references)
		//IL_c495: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc58: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba35: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba62: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba68: Unknown result type (might be due to invalid IL or missing references)
		//IL_baa9: Unknown result type (might be due to invalid IL or missing references)
		//IL_bac6: Unknown result type (might be due to invalid IL or missing references)
		//IL_bacb: Unknown result type (might be due to invalid IL or missing references)
		//IL_a507: Unknown result type (might be due to invalid IL or missing references)
		//IL_a511: Unknown result type (might be due to invalid IL or missing references)
		//IL_a516: Unknown result type (might be due to invalid IL or missing references)
		//IL_9992: Unknown result type (might be due to invalid IL or missing references)
		//IL_f671: Unknown result type (might be due to invalid IL or missing references)
		//IL_f5e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_f54c: Unknown result type (might be due to invalid IL or missing references)
		//IL_de81: Unknown result type (might be due to invalid IL or missing references)
		//IL_de86: Unknown result type (might be due to invalid IL or missing references)
		//IL_ded7: Unknown result type (might be due to invalid IL or missing references)
		//IL_dee1: Unknown result type (might be due to invalid IL or missing references)
		//IL_dee6: Unknown result type (might be due to invalid IL or missing references)
		//IL_d881: Unknown result type (might be due to invalid IL or missing references)
		//IL_c70a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c73a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c740: Unknown result type (might be due to invalid IL or missing references)
		//IL_c769: Unknown result type (might be due to invalid IL or missing references)
		//IL_c76f: Unknown result type (might be due to invalid IL or missing references)
		//IL_c779: Unknown result type (might be due to invalid IL or missing references)
		//IL_c77e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c788: Unknown result type (might be due to invalid IL or missing references)
		//IL_c78d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c7b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_c7ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_c7bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_99a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_f601: Unknown result type (might be due to invalid IL or missing references)
		//IL_f606: Unknown result type (might be due to invalid IL or missing references)
		//IL_f593: Unknown result type (might be due to invalid IL or missing references)
		//IL_f598: Unknown result type (might be due to invalid IL or missing references)
		//IL_f566: Unknown result type (might be due to invalid IL or missing references)
		//IL_f570: Unknown result type (might be due to invalid IL or missing references)
		//IL_f575: Unknown result type (might be due to invalid IL or missing references)
		//IL_dfc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_dfd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_dfd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_dfdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbad: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc03: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc11: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc16: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc40: Unknown result type (might be due to invalid IL or missing references)
		//IL_99c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ea7: Unknown result type (might be due to invalid IL or missing references)
		//IL_9cdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_939b: Unknown result type (might be due to invalid IL or missing references)
		//IL_f5bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_f5c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_f5ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_e002: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce06: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce14: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce21: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce27: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce32: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce37: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce82: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce87: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce94: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce99: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca81: Unknown result type (might be due to invalid IL or missing references)
		//IL_c9bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_c9ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_c9f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca28: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca38: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca42: Unknown result type (might be due to invalid IL or missing references)
		//IL_99d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_93af: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_d478: Unknown result type (might be due to invalid IL or missing references)
		//IL_d4c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_d4cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca76: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_93cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1059a: Unknown result type (might be due to invalid IL or missing references)
		//IL_105c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_f757: Unknown result type (might be due to invalid IL or missing references)
		//IL_f75d: Unknown result type (might be due to invalid IL or missing references)
		//IL_e921: Unknown result type (might be due to invalid IL or missing references)
		//IL_e926: Unknown result type (might be due to invalid IL or missing references)
		//IL_e92c: Unknown result type (might be due to invalid IL or missing references)
		//IL_e931: Unknown result type (might be due to invalid IL or missing references)
		//IL_93df: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c58: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c63: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c69: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c93: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c99: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ca4: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cae: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ccb: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_a121: Unknown result type (might be due to invalid IL or missing references)
		//IL_a12b: Unknown result type (might be due to invalid IL or missing references)
		//IL_a130: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ee6: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ef0: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ef5: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d65: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d79: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d83: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d20: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d31: Unknown result type (might be due to invalid IL or missing references)
		//IL_f7e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_f7e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_f7f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_f802: Unknown result type (might be due to invalid IL or missing references)
		//IL_f820: Unknown result type (might be due to invalid IL or missing references)
		//IL_f82a: Unknown result type (might be due to invalid IL or missing references)
		//IL_ecd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_ecf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_ecfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed46: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed84: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed89: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_118e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_118f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_10db3: Unknown result type (might be due to invalid IL or missing references)
		//IL_10dd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_10dd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e18: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e50: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e64: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e69: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e74: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f798: Unknown result type (might be due to invalid IL or missing references)
		//IL_f7ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b06: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b29: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b70: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_119a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_119ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_119b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_119b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_119c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_112f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1132c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11032: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fe2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ff2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f91: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f97: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab04: Unknown result type (might be due to invalid IL or missing references)
		//IL_119db: Unknown result type (might be due to invalid IL or missing references)
		//IL_119e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_11181: Unknown result type (might be due to invalid IL or missing references)
		//IL_11789: Unknown result type (might be due to invalid IL or missing references)
		//IL_108bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_108d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10962: Unknown result type (might be due to invalid IL or missing references)
		//IL_1097b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10986: Unknown result type (might be due to invalid IL or missing references)
		//IL_f93a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f93f: Unknown result type (might be due to invalid IL or missing references)
		//IL_f951: Unknown result type (might be due to invalid IL or missing references)
		//IL_f95b: Unknown result type (might be due to invalid IL or missing references)
		//IL_f979: Unknown result type (might be due to invalid IL or missing references)
		//IL_f983: Unknown result type (might be due to invalid IL or missing references)
		//IL_11df3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11df8: Unknown result type (might be due to invalid IL or missing references)
		//IL_11dfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e05: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e17: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e21: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e32: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e52: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e75: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f08: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f12: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f17: Unknown result type (might be due to invalid IL or missing references)
		//IL_111a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_107db: Unknown result type (might be due to invalid IL or missing references)
		//IL_107f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_109fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1383a: Unknown result type (might be due to invalid IL or missing references)
		//IL_13844: Unknown result type (might be due to invalid IL or missing references)
		//IL_13862: Unknown result type (might be due to invalid IL or missing references)
		//IL_1386c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ae5: Unknown result type (might be due to invalid IL or missing references)
		//IL_12560: Unknown result type (might be due to invalid IL or missing references)
		//IL_12100: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f58: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f63: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f81: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f86: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f97: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fda: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_111f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_109bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_109c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_109cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_109d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_109e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_13205: Unknown result type (might be due to invalid IL or missing references)
		//IL_132ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_132ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e08: Unknown result type (might be due to invalid IL or missing references)
		//IL_1205a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1205f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12042: Unknown result type (might be due to invalid IL or missing references)
		//IL_12047: Unknown result type (might be due to invalid IL or missing references)
		//IL_11219: Unknown result type (might be due to invalid IL or missing references)
		//IL_fbad: Unknown result type (might be due to invalid IL or missing references)
		//IL_fbbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_fbc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_fbc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_f241: Unknown result type (might be due to invalid IL or missing references)
		//IL_f259: Unknown result type (might be due to invalid IL or missing references)
		//IL_f02c: Unknown result type (might be due to invalid IL or missing references)
		//IL_f049: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e06: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d18: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d42: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d83: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d92: Unknown result type (might be due to invalid IL or missing references)
		//IL_12db5: Unknown result type (might be due to invalid IL or missing references)
		//IL_12dbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_12dc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_12dca: Unknown result type (might be due to invalid IL or missing references)
		//IL_12dcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_120a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_120b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_120b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe11: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe55: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff36: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff47: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_141c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_141d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1324f: Unknown result type (might be due to invalid IL or missing references)
		//IL_13273: Unknown result type (might be due to invalid IL or missing references)
		//IL_13279: Unknown result type (might be due to invalid IL or missing references)
		//IL_132ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_132c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_132c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1314e: Unknown result type (might be due to invalid IL or missing references)
		//IL_13172: Unknown result type (might be due to invalid IL or missing references)
		//IL_13178: Unknown result type (might be due to invalid IL or missing references)
		//IL_131b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_131c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_131c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_123bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_123c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_123ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_123d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_123e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_123e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_123ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_123fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_12418: Unknown result type (might be due to invalid IL or missing references)
		//IL_1241e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1243b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12441: Unknown result type (might be due to invalid IL or missing references)
		//IL_124d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_124de: Unknown result type (might be due to invalid IL or missing references)
		//IL_124e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1228b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12290: Unknown result type (might be due to invalid IL or missing references)
		//IL_12296: Unknown result type (might be due to invalid IL or missing references)
		//IL_1229d: Unknown result type (might be due to invalid IL or missing references)
		//IL_122af: Unknown result type (might be due to invalid IL or missing references)
		//IL_122b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_122b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_122ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_122e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_122ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_12307: Unknown result type (might be due to invalid IL or missing references)
		//IL_1230d: Unknown result type (might be due to invalid IL or missing references)
		//IL_12356: Unknown result type (might be due to invalid IL or missing references)
		//IL_12360: Unknown result type (might be due to invalid IL or missing references)
		//IL_12365: Unknown result type (might be due to invalid IL or missing references)
		//IL_12147: Unknown result type (might be due to invalid IL or missing references)
		//IL_1214c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12152: Unknown result type (might be due to invalid IL or missing references)
		//IL_12159: Unknown result type (might be due to invalid IL or missing references)
		//IL_1216b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12170: Unknown result type (might be due to invalid IL or missing references)
		//IL_12175: Unknown result type (might be due to invalid IL or missing references)
		//IL_12186: Unknown result type (might be due to invalid IL or missing references)
		//IL_121a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_121a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_121c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_121c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_12212: Unknown result type (might be due to invalid IL or missing references)
		//IL_1221c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12221: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe81: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_13cd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_13cf4: Unknown result type (might be due to invalid IL or missing references)
		//IL_13cfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d45: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b88: Unknown result type (might be due to invalid IL or missing references)
		//IL_13bac: Unknown result type (might be due to invalid IL or missing references)
		//IL_13bb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_13bf3: Unknown result type (might be due to invalid IL or missing references)
		//IL_13bfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c02: Unknown result type (might be due to invalid IL or missing references)
		//IL_1028e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1029f: Unknown result type (might be due to invalid IL or missing references)
		//IL_102a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_102a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e75: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13eaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_13eb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_13eb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_13369: Unknown result type (might be due to invalid IL or missing references)
		//IL_15bf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c02: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c07: Unknown result type (might be due to invalid IL or missing references)
		//IL_142c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_142da: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f52: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f61: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f88: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1400a: Unknown result type (might be due to invalid IL or missing references)
		//IL_14014: Unknown result type (might be due to invalid IL or missing references)
		//IL_14019: Unknown result type (might be due to invalid IL or missing references)
		//IL_13680: Unknown result type (might be due to invalid IL or missing references)
		//IL_13698: Unknown result type (might be due to invalid IL or missing references)
		//IL_1337f: Unknown result type (might be due to invalid IL or missing references)
		//IL_13392: Unknown result type (might be due to invalid IL or missing references)
		//IL_14db3: Unknown result type (might be due to invalid IL or missing references)
		//IL_14dc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_14dda: Unknown result type (might be due to invalid IL or missing references)
		//IL_14df0: Unknown result type (might be due to invalid IL or missing references)
		//IL_14531: Unknown result type (might be due to invalid IL or missing references)
		//IL_14549: Unknown result type (might be due to invalid IL or missing references)
		//IL_1408a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1409d: Unknown result type (might be due to invalid IL or missing references)
		//IL_140a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_140c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_140cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_140fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_14108: Unknown result type (might be due to invalid IL or missing references)
		//IL_1410d: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fce: Unknown result type (might be due to invalid IL or missing references)
		//IL_13003: Unknown result type (might be due to invalid IL or missing references)
		//IL_13024: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c34: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c75: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c84: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ca7: Unknown result type (might be due to invalid IL or missing references)
		//IL_12cad: Unknown result type (might be due to invalid IL or missing references)
		//IL_12cb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_12cbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_12cc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_fc38: Unknown result type (might be due to invalid IL or missing references)
		//IL_fc49: Unknown result type (might be due to invalid IL or missing references)
		//IL_16453: Unknown result type (might be due to invalid IL or missing references)
		//IL_1645d: Unknown result type (might be due to invalid IL or missing references)
		//IL_16462: Unknown result type (might be due to invalid IL or missing references)
		//IL_16469: Unknown result type (might be due to invalid IL or missing references)
		//IL_1646e: Unknown result type (might be due to invalid IL or missing references)
		//IL_14424: Unknown result type (might be due to invalid IL or missing references)
		//IL_14441: Unknown result type (might be due to invalid IL or missing references)
		//IL_126b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_126d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_126da: Unknown result type (might be due to invalid IL or missing references)
		//IL_12709: Unknown result type (might be due to invalid IL or missing references)
		//IL_12713: Unknown result type (might be due to invalid IL or missing references)
		//IL_12718: Unknown result type (might be due to invalid IL or missing references)
		//IL_1273b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12741: Unknown result type (might be due to invalid IL or missing references)
		//IL_1274b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12750: Unknown result type (might be due to invalid IL or missing references)
		//IL_12755: Unknown result type (might be due to invalid IL or missing references)
		//IL_16343: Unknown result type (might be due to invalid IL or missing references)
		//IL_16367: Unknown result type (might be due to invalid IL or missing references)
		//IL_1636d: Unknown result type (might be due to invalid IL or missing references)
		//IL_163ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_163b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_163bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_161c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_161d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_161ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_161f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_15817: Unknown result type (might be due to invalid IL or missing references)
		//IL_1581c: Unknown result type (might be due to invalid IL or missing references)
		//IL_15828: Unknown result type (might be due to invalid IL or missing references)
		//IL_15832: Unknown result type (might be due to invalid IL or missing references)
		//IL_1584a: Unknown result type (might be due to invalid IL or missing references)
		//IL_15854: Unknown result type (might be due to invalid IL or missing references)
		//IL_15df1: Unknown result type (might be due to invalid IL or missing references)
		//IL_15dfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_15a8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_15abf: Unknown result type (might be due to invalid IL or missing references)
		//IL_15ac5: Unknown result type (might be due to invalid IL or missing references)
		//IL_15af4: Unknown result type (might be due to invalid IL or missing references)
		//IL_15afe: Unknown result type (might be due to invalid IL or missing references)
		//IL_15b03: Unknown result type (might be due to invalid IL or missing references)
		//IL_15b26: Unknown result type (might be due to invalid IL or missing references)
		//IL_15b2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_15b36: Unknown result type (might be due to invalid IL or missing references)
		//IL_15b3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_15b40: Unknown result type (might be due to invalid IL or missing references)
		//IL_1279b: Unknown result type (might be due to invalid IL or missing references)
		//IL_127bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_127c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_12802: Unknown result type (might be due to invalid IL or missing references)
		//IL_1280c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12811: Unknown result type (might be due to invalid IL or missing references)
		//IL_12834: Unknown result type (might be due to invalid IL or missing references)
		//IL_1283a: Unknown result type (might be due to invalid IL or missing references)
		//IL_12844: Unknown result type (might be due to invalid IL or missing references)
		//IL_12849: Unknown result type (might be due to invalid IL or missing references)
		//IL_1284e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12869: Unknown result type (might be due to invalid IL or missing references)
		//IL_12889: Unknown result type (might be due to invalid IL or missing references)
		//IL_1288f: Unknown result type (might be due to invalid IL or missing references)
		//IL_128be: Unknown result type (might be due to invalid IL or missing references)
		//IL_128c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_128cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_128f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_128f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_12900: Unknown result type (might be due to invalid IL or missing references)
		//IL_12905: Unknown result type (might be due to invalid IL or missing references)
		//IL_1290a: Unknown result type (might be due to invalid IL or missing references)
		//IL_16edc: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ee1: Unknown result type (might be due to invalid IL or missing references)
		//IL_15169: Unknown result type (might be due to invalid IL or missing references)
		//IL_15173: Unknown result type (might be due to invalid IL or missing references)
		//IL_15191: Unknown result type (might be due to invalid IL or missing references)
		//IL_1519b: Unknown result type (might be due to invalid IL or missing references)
		//IL_14efb: Unknown result type (might be due to invalid IL or missing references)
		//IL_14f12: Unknown result type (might be due to invalid IL or missing references)
		//IL_15981: Unknown result type (might be due to invalid IL or missing references)
		//IL_15997: Unknown result type (might be due to invalid IL or missing references)
		//IL_159a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_159bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1295b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12962: Unknown result type (might be due to invalid IL or missing references)
		//IL_12968: Unknown result type (might be due to invalid IL or missing references)
		//IL_129a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_129ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_129b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_129bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_129c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_129f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_129ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a09: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a13: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a36: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a40: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a45: Unknown result type (might be due to invalid IL or missing references)
		//IL_159eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_15a02: Unknown result type (might be due to invalid IL or missing references)
		//IL_154f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1550f: Unknown result type (might be due to invalid IL or missing references)
		//IL_15248: Unknown result type (might be due to invalid IL or missing references)
		//IL_15273: Unknown result type (might be due to invalid IL or missing references)
		//IL_15204: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f35: Unknown result type (might be due to invalid IL or missing references)
		//IL_1562b: Unknown result type (might be due to invalid IL or missing references)
		//IL_15635: Unknown result type (might be due to invalid IL or missing references)
		//IL_1563a: Unknown result type (might be due to invalid IL or missing references)
		//IL_15048: Unknown result type (might be due to invalid IL or missing references)
		//IL_15065: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b25: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b30: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b35: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f54: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_17026: Unknown result type (might be due to invalid IL or missing references)
		//IL_17036: Unknown result type (might be due to invalid IL or missing references)
		//IL_19c2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_19c30: Unknown result type (might be due to invalid IL or missing references)
		//IL_19c35: Unknown result type (might be due to invalid IL or missing references)
		//IL_19c3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_19c41: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b83: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b89: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b94: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b99: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_16fa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_17089: Unknown result type (might be due to invalid IL or missing references)
		//IL_17095: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b44: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b49: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b57: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b66: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1659a: Unknown result type (might be due to invalid IL or missing references)
		//IL_153ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_153b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_153bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_149ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_149d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a63: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_19c84: Unknown result type (might be due to invalid IL or missing references)
		//IL_17909: Unknown result type (might be due to invalid IL or missing references)
		//IL_1790e: Unknown result type (might be due to invalid IL or missing references)
		//IL_17927: Unknown result type (might be due to invalid IL or missing references)
		//IL_1792c: Unknown result type (might be due to invalid IL or missing references)
		//IL_17936: Unknown result type (might be due to invalid IL or missing references)
		//IL_1793b: Unknown result type (might be due to invalid IL or missing references)
		//IL_17941: Unknown result type (might be due to invalid IL or missing references)
		//IL_1796d: Unknown result type (might be due to invalid IL or missing references)
		//IL_17973: Unknown result type (might be due to invalid IL or missing references)
		//IL_17975: Unknown result type (might be due to invalid IL or missing references)
		//IL_1797b: Unknown result type (might be due to invalid IL or missing references)
		//IL_17980: Unknown result type (might be due to invalid IL or missing references)
		//IL_17985: Unknown result type (might be due to invalid IL or missing references)
		//IL_179a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_179b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_179bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_179c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_179c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_179cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_179db: Unknown result type (might be due to invalid IL or missing references)
		//IL_179ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a01: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a07: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a64: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a69: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a92: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a97: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1746e: Unknown result type (might be due to invalid IL or missing references)
		//IL_16dab: Unknown result type (might be due to invalid IL or missing references)
		//IL_16db0: Unknown result type (might be due to invalid IL or missing references)
		//IL_16dba: Unknown result type (might be due to invalid IL or missing references)
		//IL_16dbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_16df3: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e27: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e31: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e36: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e59: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e69: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e73: Unknown result type (might be due to invalid IL or missing references)
		//IL_167bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_167f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_167f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_16a19: Unknown result type (might be due to invalid IL or missing references)
		//IL_16a4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_16a55: Unknown result type (might be due to invalid IL or missing references)
		//IL_16a84: Unknown result type (might be due to invalid IL or missing references)
		//IL_16a8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_16a93: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ab6: Unknown result type (might be due to invalid IL or missing references)
		//IL_16abc: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ac6: Unknown result type (might be due to invalid IL or missing references)
		//IL_16acb: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ad0: Unknown result type (might be due to invalid IL or missing references)
		//IL_16696: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a4c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a4ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a141: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a147: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a14c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a151: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a156: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a15e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a168: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a16d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a178: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a17d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a187: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a18c: Unknown result type (might be due to invalid IL or missing references)
		//IL_19cd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ce1: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ced: Unknown result type (might be due to invalid IL or missing references)
		//IL_19cfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_16c8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_16c97: Unknown result type (might be due to invalid IL or missing references)
		//IL_16c9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_16cbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_16cc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ccf: Unknown result type (might be due to invalid IL or missing references)
		//IL_16cd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_16cd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ceb: Unknown result type (might be due to invalid IL or missing references)
		//IL_16cf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d36: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d61: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d70: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a95a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a964: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a969: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a1d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a1db: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a1e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_19f8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_19f93: Unknown result type (might be due to invalid IL or missing references)
		//IL_19f98: Unknown result type (might be due to invalid IL or missing references)
		//IL_19f9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_19824: Unknown result type (might be due to invalid IL or missing references)
		//IL_19833: Unknown result type (might be due to invalid IL or missing references)
		//IL_19839: Unknown result type (might be due to invalid IL or missing references)
		//IL_1983b: Unknown result type (might be due to invalid IL or missing references)
		//IL_19840: Unknown result type (might be due to invalid IL or missing references)
		//IL_168e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_168ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_168ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_16912: Unknown result type (might be due to invalid IL or missing references)
		//IL_16918: Unknown result type (might be due to invalid IL or missing references)
		//IL_16922: Unknown result type (might be due to invalid IL or missing references)
		//IL_16927: Unknown result type (might be due to invalid IL or missing references)
		//IL_1692c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1693e: Unknown result type (might be due to invalid IL or missing references)
		//IL_16943: Unknown result type (might be due to invalid IL or missing references)
		//IL_169aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_169b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_169b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a9b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a9b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a9fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa12: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa17: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_180d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_180b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a285: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a28a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a29d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a2a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a2ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a2b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a2b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a2e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a2e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a2eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a2f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a2f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a2fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a31c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a32e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a333: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a339: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a33f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a345: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a351: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a362: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a377: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a37d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a3d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a3da: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a3df: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a402: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a408: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a40d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a412: Unknown result type (might be due to invalid IL or missing references)
		//IL_19fca: Unknown result type (might be due to invalid IL or missing references)
		//IL_19fe1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a099: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a0a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a0b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a0bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a0c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a0e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a0ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a0f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a0fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a101: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a10b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a110: Unknown result type (might be due to invalid IL or missing references)
		//IL_199b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_199c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_199ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_199cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_199d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_199d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_199dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_199e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_199e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_199f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_199f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a12: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a62: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a71: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a77: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a81: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a86: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_19aa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_19abd: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ac3: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ac5: Unknown result type (might be due to invalid IL or missing references)
		//IL_19aca: Unknown result type (might be due to invalid IL or missing references)
		//IL_19af9: Unknown result type (might be due to invalid IL or missing references)
		//IL_19afe: Unknown result type (might be due to invalid IL or missing references)
		//IL_19b13: Unknown result type (might be due to invalid IL or missing references)
		//IL_19b18: Unknown result type (might be due to invalid IL or missing references)
		//IL_19b1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_19b22: Unknown result type (might be due to invalid IL or missing references)
		//IL_19853: Unknown result type (might be due to invalid IL or missing references)
		//IL_19858: Unknown result type (might be due to invalid IL or missing references)
		//IL_1985e: Unknown result type (might be due to invalid IL or missing references)
		//IL_19863: Unknown result type (might be due to invalid IL or missing references)
		//IL_1986d: Unknown result type (might be due to invalid IL or missing references)
		//IL_19872: Unknown result type (might be due to invalid IL or missing references)
		//IL_19887: Unknown result type (might be due to invalid IL or missing references)
		//IL_1988d: Unknown result type (might be due to invalid IL or missing references)
		//IL_198de: Unknown result type (might be due to invalid IL or missing references)
		//IL_198e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_198ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_198f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_198fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_19902: Unknown result type (might be due to invalid IL or missing references)
		//IL_19907: Unknown result type (might be due to invalid IL or missing references)
		//IL_19924: Unknown result type (might be due to invalid IL or missing references)
		//IL_19939: Unknown result type (might be due to invalid IL or missing references)
		//IL_1993f: Unknown result type (might be due to invalid IL or missing references)
		//IL_19941: Unknown result type (might be due to invalid IL or missing references)
		//IL_19946: Unknown result type (might be due to invalid IL or missing references)
		//IL_1813a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a490: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a49f: Unknown result type (might be due to invalid IL or missing references)
		//IL_17555: Unknown result type (might be due to invalid IL or missing references)
		//IL_1755a: Unknown result type (might be due to invalid IL or missing references)
		//IL_175ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1760a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a8e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a8f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a8fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a800: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a807: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a80c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a811: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a818: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a828: Unknown result type (might be due to invalid IL or missing references)
		//IL_18631: Unknown result type (might be due to invalid IL or missing references)
		//IL_18636: Unknown result type (might be due to invalid IL or missing references)
		//IL_1863c: Unknown result type (might be due to invalid IL or missing references)
		//IL_18641: Unknown result type (might be due to invalid IL or missing references)
		//IL_1821e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18228: Unknown result type (might be due to invalid IL or missing references)
		//IL_1822d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a89d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a8b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a8ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a8bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a8c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a588: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a58d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a593: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a599: Unknown result type (might be due to invalid IL or missing references)
		//IL_19dd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_19dd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_19de4: Unknown result type (might be due to invalid IL or missing references)
		//IL_19de9: Unknown result type (might be due to invalid IL or missing references)
		//IL_183e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c005: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c00a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c011: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c021: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab14: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab31: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab36: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab62: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab68: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab76: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aba0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1abfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac07: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a7cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a7d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a5b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a5d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_19e59: Unknown result type (might be due to invalid IL or missing references)
		//IL_19e64: Unknown result type (might be due to invalid IL or missing references)
		//IL_19e69: Unknown result type (might be due to invalid IL or missing references)
		//IL_19e7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_19e95: Unknown result type (might be due to invalid IL or missing references)
		//IL_19e9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ea0: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ec6: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ecc: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ece: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ed3: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ee0: Unknown result type (might be due to invalid IL or missing references)
		//IL_19eeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ef5: Unknown result type (might be due to invalid IL or missing references)
		//IL_19f00: Unknown result type (might be due to invalid IL or missing references)
		//IL_1869c: Unknown result type (might be due to invalid IL or missing references)
		//IL_186ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_176cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_176d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1771c: Unknown result type (might be due to invalid IL or missing references)
		//IL_17721: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c217: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b907: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b7fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ad4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ad6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ad70: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ad76: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ad9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ada2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ada4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ada9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac75: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aca1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aca7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1acac: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a5fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a604: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c2ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c096: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c0ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c0b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c0b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c0ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c0c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c0cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c0d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c0d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b8ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b828: Unknown result type (might be due to invalid IL or missing references)
		//IL_1afc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1afe4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1afe9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1afef: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b015: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b01b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b01d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b022: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b029: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b04d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b053: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b0b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b0ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b0bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1add3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1adf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1adfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae65: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_186fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_18701: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cf85: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cf8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cfb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cfc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cfc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cfca: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cfd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cfdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cfe5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cfe7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cfec: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cff9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cfff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d005: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d00a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d017: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d01c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d045: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d04b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d07b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d085: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d08a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd49: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c8c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c8f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c8f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c909: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c90e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1baac: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bab2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bab4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bab9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1babe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bac9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bae6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb17: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb34: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb39: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb63: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb76: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb80: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb85: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b405: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b422: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b427: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b42d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b453: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b459: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b45b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b460: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b467: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b497: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b49d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b4fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b504: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b509: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b10e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b128: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b12d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b132: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b14f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b154: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b15a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b15f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aeb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aed3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aed8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aedd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aefa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aeff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1af05: Unknown result type (might be due to invalid IL or missing references)
		//IL_1af0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_188c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_188cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e1b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d8bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d8ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d1fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d208: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d20d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d227: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d22c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d1a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c49c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b558: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b572: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b577: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b57c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b599: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b59e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b5a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b5a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1873a: Unknown result type (might be due to invalid IL or missing references)
		//IL_18751: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e1d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e1d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e1da: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e1be: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e1c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d9a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d9b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d9be: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d9c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d5a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c91f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c929: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c92e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c934: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c93a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c955: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c95b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c95d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c962: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c971: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c976: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c97b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c980: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c986: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c99b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c9a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c9a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c9a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c9af: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c9c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c9ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca14: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca19: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca24: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca36: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca40: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca45: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b22e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b252: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b258: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b2b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b2bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b2c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_187d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_187de: Unknown result type (might be due to invalid IL or missing references)
		//IL_18785: Unknown result type (might be due to invalid IL or missing references)
		//IL_1878a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dbb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dbbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dbc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dbc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dae0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1daf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1daf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1daf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1daba: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d5f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d603: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d608: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cda6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cdb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cdba: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cdbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cdc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cdd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cdd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cde0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cdf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cdff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ce1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ce22: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ce28: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ce2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb15: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb20: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb25: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c2c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc33: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc39: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc84: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc89: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bcab: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bcd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bcd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bcdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bce0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bcfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd07: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd18: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd23: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd28: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd32: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b313: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b32d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b332: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b337: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b354: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b359: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b35f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b364: Unknown result type (might be due to invalid IL or missing references)
		//IL_18966: Unknown result type (might be due to invalid IL or missing references)
		//IL_1896d: Unknown result type (might be due to invalid IL or missing references)
		//IL_18972: Unknown result type (might be due to invalid IL or missing references)
		//IL_18977: Unknown result type (might be due to invalid IL or missing references)
		//IL_187fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_18814: Unknown result type (might be due to invalid IL or missing references)
		//IL_20932: Unknown result type (might be due to invalid IL or missing references)
		//IL_20948: Unknown result type (might be due to invalid IL or missing references)
		//IL_205b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1de8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1de11: Unknown result type (might be due to invalid IL or missing references)
		//IL_1de16: Unknown result type (might be due to invalid IL or missing references)
		//IL_1de20: Unknown result type (might be due to invalid IL or missing references)
		//IL_1de25: Unknown result type (might be due to invalid IL or missing references)
		//IL_1de66: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dbef: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dbfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dbff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dc06: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dc0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dc16: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dc1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dc21: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d643: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d64d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d652: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d67a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d67f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d270: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d275: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d27b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d282: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd48: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd72: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bdb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bdbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bdc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bde4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be09: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be14: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be19: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be36: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be40: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be51: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be57: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be61: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be66: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a32: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a44: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a49: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a59: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18848: Unknown result type (might be due to invalid IL or missing references)
		//IL_1884d: Unknown result type (might be due to invalid IL or missing references)
		//IL_18859: Unknown result type (might be due to invalid IL or missing references)
		//IL_1885e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1851a: Unknown result type (might be due to invalid IL or missing references)
		//IL_18534: Unknown result type (might be due to invalid IL or missing references)
		//IL_1853a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1855d: Unknown result type (might be due to invalid IL or missing references)
		//IL_18572: Unknown result type (might be due to invalid IL or missing references)
		//IL_18578: Unknown result type (might be due to invalid IL or missing references)
		//IL_1857a: Unknown result type (might be due to invalid IL or missing references)
		//IL_18588: Unknown result type (might be due to invalid IL or missing references)
		//IL_1858e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18590: Unknown result type (might be due to invalid IL or missing references)
		//IL_18595: Unknown result type (might be due to invalid IL or missing references)
		//IL_185a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_185a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_185b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_185b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_185bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_185c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_185d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_185d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2071a: Unknown result type (might be due to invalid IL or missing references)
		//IL_20720: Unknown result type (might be due to invalid IL or missing references)
		//IL_20725: Unknown result type (might be due to invalid IL or missing references)
		//IL_2072a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dfb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dfbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dfc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df78: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df95: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dfa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dfa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dfaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dc59: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d2ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d2b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cbfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc08: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc13: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc19: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc34: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc41: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc50: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc55: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc65: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc80: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc82: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc87: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cca7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ccad: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ccf3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ccf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ccfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd03: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd15: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd24: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cbb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cbc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cbce: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cbd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cbd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c5ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c5ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c5f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c634: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c63e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c643: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be81: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bea5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1beab: Unknown result type (might be due to invalid IL or missing references)
		//IL_1beec: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bef6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1befb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf42: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf48: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf52: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf79: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf90: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf95: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bfa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_189c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_189d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_189da: Unknown result type (might be due to invalid IL or missing references)
		//IL_189e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_189ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_189f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_189f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a01: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a06: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dccb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d43a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d43f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d45a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d460: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d471: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d481: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d486: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d48b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d491: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d506: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d50c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d53c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d546: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d54b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d3e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d3f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d3f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d3fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d339: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d350: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d35a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d35f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d372: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d37c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d381: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d386: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d38c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d393: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d398: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d39d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d3a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d3ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d3b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c720: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c738: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c73e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c76d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c777: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c77c: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b05: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b16: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b21: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b30: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b35: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e68: Unknown result type (might be due to invalid IL or missing references)
		//IL_2125d: Unknown result type (might be due to invalid IL or missing references)
		//IL_21277: Unknown result type (might be due to invalid IL or missing references)
		//IL_2127c: Unknown result type (might be due to invalid IL or missing references)
		//IL_20ba0: Unknown result type (might be due to invalid IL or missing references)
		//IL_20384: Unknown result type (might be due to invalid IL or missing references)
		//IL_20398: Unknown result type (might be due to invalid IL or missing references)
		//IL_2039d: Unknown result type (might be due to invalid IL or missing references)
		//IL_203a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_203a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e33b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e356: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e35b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e373: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e378: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e37a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e37f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e395: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e39a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e3a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e3b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e3bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e3c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e3c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e254: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e26f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e274: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e28c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e291: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e293: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e298: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e2ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e2b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e2b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e2cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e2d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e2db: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e2e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dd35: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dc92: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d6c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d6c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d6ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d6d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d78b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d790: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d805: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d80b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d810: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d81d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d822: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d84b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d851: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d881: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d88b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d890: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d744: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d755: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d75a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d75f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cec1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cec7: Unknown result type (might be due to invalid IL or missing references)
		//IL_22c46: Unknown result type (might be due to invalid IL or missing references)
		//IL_22c4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_22c8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_22caa: Unknown result type (might be due to invalid IL or missing references)
		//IL_204ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_204f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_204f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_204fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_20502: Unknown result type (might be due to invalid IL or missing references)
		//IL_20507: Unknown result type (might be due to invalid IL or missing references)
		//IL_2050d: Unknown result type (might be due to invalid IL or missing references)
		//IL_203de: Unknown result type (might be due to invalid IL or missing references)
		//IL_203e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_203e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_203ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_203f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e44f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e454: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e45a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e460: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e46a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e46f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e493: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e498: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e49d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eb12: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dda7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dd01: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d6ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d705: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ecb: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ea6: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ead: Unknown result type (might be due to invalid IL or missing references)
		//IL_18eb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_217e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_21800: Unknown result type (might be due to invalid IL or missing references)
		//IL_21805: Unknown result type (might be due to invalid IL or missing references)
		//IL_21581: Unknown result type (might be due to invalid IL or missing references)
		//IL_21586: Unknown result type (might be due to invalid IL or missing references)
		//IL_2158b: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a54: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a75: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_20abc: Unknown result type (might be due to invalid IL or missing references)
		//IL_20ac6: Unknown result type (might be due to invalid IL or missing references)
		//IL_20acb: Unknown result type (might be due to invalid IL or missing references)
		//IL_20532: Unknown result type (might be due to invalid IL or missing references)
		//IL_20538: Unknown result type (might be due to invalid IL or missing references)
		//IL_20552: Unknown result type (might be due to invalid IL or missing references)
		//IL_20557: Unknown result type (might be due to invalid IL or missing references)
		//IL_2051f: Unknown result type (might be due to invalid IL or missing references)
		//IL_20419: Unknown result type (might be due to invalid IL or missing references)
		//IL_2041f: Unknown result type (might be due to invalid IL or missing references)
		//IL_20439: Unknown result type (might be due to invalid IL or missing references)
		//IL_2043e: Unknown result type (might be due to invalid IL or missing references)
		//IL_20406: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e4fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e502: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e507: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e51d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e522: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e52d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e532: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e545: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e54f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e554: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e578: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e57d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e582: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e597: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e59c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e5a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eb31: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eb36: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eb3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eb1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eb24: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dd6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_22648: Unknown result type (might be due to invalid IL or missing references)
		//IL_225a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_225c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_215df: Unknown result type (might be due to invalid IL or missing references)
		//IL_215e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_215ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e86: Unknown result type (might be due to invalid IL or missing references)
		//IL_207a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_207ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_207b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_207be: Unknown result type (might be due to invalid IL or missing references)
		//IL_207c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_207c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_207e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_207f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_207f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2055f: Unknown result type (might be due to invalid IL or missing references)
		//IL_20564: Unknown result type (might be due to invalid IL or missing references)
		//IL_20446: Unknown result type (might be due to invalid IL or missing references)
		//IL_2044b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e60e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e620: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e641: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e647: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e649: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e64e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e65b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e668: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e66e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e673: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e081: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e095: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e09b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e09d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e119: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e13a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e13f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e151: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e156: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e15c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e161: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dddd: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ca8: Unknown result type (might be due to invalid IL or missing references)
		//IL_22913: Unknown result type (might be due to invalid IL or missing references)
		//IL_22919: Unknown result type (might be due to invalid IL or missing references)
		//IL_2291e: Unknown result type (might be due to invalid IL or missing references)
		//IL_22923: Unknown result type (might be due to invalid IL or missing references)
		//IL_226a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_226b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_226b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_226ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_225d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_21f74: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b43: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b48: Unknown result type (might be due to invalid IL or missing references)
		//IL_21619: Unknown result type (might be due to invalid IL or missing references)
		//IL_212be: Unknown result type (might be due to invalid IL or missing references)
		//IL_212ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_206fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e6e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e6ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e6f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e729: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e72e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d31: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d84: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d89: Unknown result type (might be due to invalid IL or missing references)
		//IL_22985: Unknown result type (might be due to invalid IL or missing references)
		//IL_226d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_226ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_225f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2260f: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ba1: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ba7: Unknown result type (might be due to invalid IL or missing references)
		//IL_218ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_218b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_21632: Unknown result type (might be due to invalid IL or missing references)
		//IL_20809: Unknown result type (might be due to invalid IL or missing references)
		//IL_2080e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2082a: Unknown result type (might be due to invalid IL or missing references)
		//IL_20830: Unknown result type (might be due to invalid IL or missing references)
		//IL_20832: Unknown result type (might be due to invalid IL or missing references)
		//IL_20837: Unknown result type (might be due to invalid IL or missing references)
		//IL_2083c: Unknown result type (might be due to invalid IL or missing references)
		//IL_20842: Unknown result type (might be due to invalid IL or missing references)
		//IL_20682: Unknown result type (might be due to invalid IL or missing references)
		//IL_20687: Unknown result type (might be due to invalid IL or missing references)
		//IL_20694: Unknown result type (might be due to invalid IL or missing references)
		//IL_2069f: Unknown result type (might be due to invalid IL or missing references)
		//IL_206a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_206b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d89: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_18da0: Unknown result type (might be due to invalid IL or missing references)
		//IL_18dac: Unknown result type (might be due to invalid IL or missing references)
		//IL_18db1: Unknown result type (might be due to invalid IL or missing references)
		//IL_18db9: Unknown result type (might be due to invalid IL or missing references)
		//IL_18dc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_18dc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_18dcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_18de0: Unknown result type (might be due to invalid IL or missing references)
		//IL_18de5: Unknown result type (might be due to invalid IL or missing references)
		//IL_21bd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_21847: Unknown result type (might be due to invalid IL or missing references)
		//IL_21853: Unknown result type (might be due to invalid IL or missing references)
		//IL_2166b: Unknown result type (might be due to invalid IL or missing references)
		//IL_21440: Unknown result type (might be due to invalid IL or missing references)
		//IL_21450: Unknown result type (might be due to invalid IL or missing references)
		//IL_21456: Unknown result type (might be due to invalid IL or missing references)
		//IL_21458: Unknown result type (might be due to invalid IL or missing references)
		//IL_2146e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2147a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2147f: Unknown result type (might be due to invalid IL or missing references)
		//IL_21486: Unknown result type (might be due to invalid IL or missing references)
		//IL_2148b: Unknown result type (might be due to invalid IL or missing references)
		//IL_21491: Unknown result type (might be due to invalid IL or missing references)
		//IL_21496: Unknown result type (might be due to invalid IL or missing references)
		//IL_214a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_214a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_214bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_214c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_214f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_214fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_21500: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e8f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e900: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e906: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e908: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e925: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e933: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e939: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e93b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e94b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e950: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e95b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e968: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e96e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e970: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e975: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e982: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e987: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e992: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e997: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e99d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9da: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea01: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea06: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea12: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea17: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea22: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea33: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea41: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea47: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea49: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a75: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_239dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_239e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_239ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_237cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_237d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_237d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_237dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_23779: Unknown result type (might be due to invalid IL or missing references)
		//IL_23783: Unknown result type (might be due to invalid IL or missing references)
		//IL_23788: Unknown result type (might be due to invalid IL or missing references)
		//IL_23000: Unknown result type (might be due to invalid IL or missing references)
		//IL_23005: Unknown result type (might be due to invalid IL or missing references)
		//IL_23010: Unknown result type (might be due to invalid IL or missing references)
		//IL_23015: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a08: Unknown result type (might be due to invalid IL or missing references)
		//IL_229e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_229f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_229f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_21bef: Unknown result type (might be due to invalid IL or missing references)
		//IL_213ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_213b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_213c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_213d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_213d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_20865: Unknown result type (might be due to invalid IL or missing references)
		//IL_2087a: Unknown result type (might be due to invalid IL or missing references)
		//IL_20884: Unknown result type (might be due to invalid IL or missing references)
		//IL_20889: Unknown result type (might be due to invalid IL or missing references)
		//IL_208a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eac0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eacd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eaaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eddb: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e45: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e54: Unknown result type (might be due to invalid IL or missing references)
		//IL_243ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_24406: Unknown result type (might be due to invalid IL or missing references)
		//IL_2440b: Unknown result type (might be due to invalid IL or missing references)
		//IL_24410: Unknown result type (might be due to invalid IL or missing references)
		//IL_2387d: Unknown result type (might be due to invalid IL or missing references)
		//IL_23882: Unknown result type (might be due to invalid IL or missing references)
		//IL_23894: Unknown result type (might be due to invalid IL or missing references)
		//IL_2389e: Unknown result type (might be due to invalid IL or missing references)
		//IL_238a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_22dee: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e21: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e50: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e55: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e64: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e99: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ea3: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ea8: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ecb: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ed1: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ee2: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ee7: Unknown result type (might be due to invalid IL or missing references)
		//IL_22eec: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a37: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a43: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a48: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2223d: Unknown result type (might be due to invalid IL or missing references)
		//IL_22261: Unknown result type (might be due to invalid IL or missing references)
		//IL_22267: Unknown result type (might be due to invalid IL or missing references)
		//IL_222a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_222ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_22032: Unknown result type (might be due to invalid IL or missing references)
		//IL_22056: Unknown result type (might be due to invalid IL or missing references)
		//IL_2205c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2209e: Unknown result type (might be due to invalid IL or missing references)
		//IL_220a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_220ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_220b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_220be: Unknown result type (might be due to invalid IL or missing references)
		//IL_220c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c28: Unknown result type (might be due to invalid IL or missing references)
		//IL_216e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_216e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eaed: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ee26: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ee2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ee47: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ee4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_24440: Unknown result type (might be due to invalid IL or missing references)
		//IL_2444b: Unknown result type (might be due to invalid IL or missing references)
		//IL_24450: Unknown result type (might be due to invalid IL or missing references)
		//IL_24458: Unknown result type (might be due to invalid IL or missing references)
		//IL_2445d: Unknown result type (might be due to invalid IL or missing references)
		//IL_24468: Unknown result type (might be due to invalid IL or missing references)
		//IL_2446d: Unknown result type (might be due to invalid IL or missing references)
		//IL_23d08: Unknown result type (might be due to invalid IL or missing references)
		//IL_230ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_230f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2311e: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a50: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a61: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a66: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a77: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_22328: Unknown result type (might be due to invalid IL or missing references)
		//IL_22334: Unknown result type (might be due to invalid IL or missing references)
		//IL_22339: Unknown result type (might be due to invalid IL or missing references)
		//IL_222cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_222d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_222e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_222e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_22143: Unknown result type (might be due to invalid IL or missing references)
		//IL_22155: Unknown result type (might be due to invalid IL or missing references)
		//IL_2215a: Unknown result type (might be due to invalid IL or missing references)
		//IL_220e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_220f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_220fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_22102: Unknown result type (might be due to invalid IL or missing references)
		//IL_219fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a13: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a15: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a37: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a43: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a48: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a53: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a62: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a79: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_21aae: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ab8: Unknown result type (might be due to invalid IL or missing references)
		//IL_21abd: Unknown result type (might be due to invalid IL or missing references)
		//IL_216ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_216f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_216c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_216cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_20cd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_20cdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_20ce3: Unknown result type (might be due to invalid IL or missing references)
		//IL_20cea: Unknown result type (might be due to invalid IL or missing references)
		//IL_20dad: Unknown result type (might be due to invalid IL or missing references)
		//IL_20db3: Unknown result type (might be due to invalid IL or missing references)
		//IL_20db8: Unknown result type (might be due to invalid IL or missing references)
		//IL_20dbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_20dd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_20de5: Unknown result type (might be due to invalid IL or missing references)
		//IL_20dea: Unknown result type (might be due to invalid IL or missing references)
		//IL_20df4: Unknown result type (might be due to invalid IL or missing references)
		//IL_20df9: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e06: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e11: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e26: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e46: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ee65: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ee6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ee7: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f11: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f40: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f45: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f54: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f89: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f93: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f98: Unknown result type (might be due to invalid IL or missing references)
		//IL_23af7: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b03: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b50: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b70: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b84: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c18: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c23: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c32: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c38: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c43: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c48: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c61: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c67: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c73: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c78: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c97: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_23cbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_23cc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_23cc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ccb: Unknown result type (might be due to invalid IL or missing references)
		//IL_23cdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ce1: Unknown result type (might be due to invalid IL or missing references)
		//IL_238e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_238f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_238f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2275e: Unknown result type (might be due to invalid IL or missing references)
		//IL_22763: Unknown result type (might be due to invalid IL or missing references)
		//IL_22408: Unknown result type (might be due to invalid IL or missing references)
		//IL_22414: Unknown result type (might be due to invalid IL or missing references)
		//IL_223bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_223c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_21cb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_21cbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2196a: Unknown result type (might be due to invalid IL or missing references)
		//IL_21976: Unknown result type (might be due to invalid IL or missing references)
		//IL_21981: Unknown result type (might be due to invalid IL or missing references)
		//IL_2198f: Unknown result type (might be due to invalid IL or missing references)
		//IL_21995: Unknown result type (might be due to invalid IL or missing references)
		//IL_21712: Unknown result type (might be due to invalid IL or missing references)
		//IL_21737: Unknown result type (might be due to invalid IL or missing references)
		//IL_2174e: Unknown result type (might be due to invalid IL or missing references)
		//IL_21754: Unknown result type (might be due to invalid IL or missing references)
		//IL_21756: Unknown result type (might be due to invalid IL or missing references)
		//IL_21761: Unknown result type (might be due to invalid IL or missing references)
		//IL_21766: Unknown result type (might be due to invalid IL or missing references)
		//IL_2176d: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f76: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f90: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f92: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f98: Unknown result type (might be due to invalid IL or missing references)
		//IL_20fa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_20fab: Unknown result type (might be due to invalid IL or missing references)
		//IL_20fad: Unknown result type (might be due to invalid IL or missing references)
		//IL_20fb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_20fb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_20fbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_20fc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_20fcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2100e: Unknown result type (might be due to invalid IL or missing references)
		//IL_21030: Unknown result type (might be due to invalid IL or missing references)
		//IL_21035: Unknown result type (might be due to invalid IL or missing references)
		//IL_2103b: Unknown result type (might be due to invalid IL or missing references)
		//IL_21040: Unknown result type (might be due to invalid IL or missing references)
		//IL_2105d: Unknown result type (might be due to invalid IL or missing references)
		//IL_21063: Unknown result type (might be due to invalid IL or missing references)
		//IL_21068: Unknown result type (might be due to invalid IL or missing references)
		//IL_2106d: Unknown result type (might be due to invalid IL or missing references)
		//IL_21077: Unknown result type (might be due to invalid IL or missing references)
		//IL_2107c: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d09: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d10: Unknown result type (might be due to invalid IL or missing references)
		//IL_2447f: Unknown result type (might be due to invalid IL or missing references)
		//IL_24499: Unknown result type (might be due to invalid IL or missing references)
		//IL_2449f: Unknown result type (might be due to invalid IL or missing references)
		//IL_244e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_244ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_244ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_244f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_24319: Unknown result type (might be due to invalid IL or missing references)
		//IL_24324: Unknown result type (might be due to invalid IL or missing references)
		//IL_23fc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_23fca: Unknown result type (might be due to invalid IL or missing references)
		//IL_23fd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_23fd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_23fde: Unknown result type (might be due to invalid IL or missing references)
		//IL_2322c: Unknown result type (might be due to invalid IL or missing references)
		//IL_23236: Unknown result type (might be due to invalid IL or missing references)
		//IL_2323b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2321e: Unknown result type (might be due to invalid IL or missing references)
		//IL_23223: Unknown result type (might be due to invalid IL or missing references)
		//IL_2253e: Unknown result type (might be due to invalid IL or missing references)
		//IL_21cc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_21cc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c85: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d44: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ef3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ef45: Unknown result type (might be due to invalid IL or missing references)
		//IL_190f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_19112: Unknown result type (might be due to invalid IL or missing references)
		//IL_19118: Unknown result type (might be due to invalid IL or missing references)
		//IL_1913b: Unknown result type (might be due to invalid IL or missing references)
		//IL_19150: Unknown result type (might be due to invalid IL or missing references)
		//IL_19156: Unknown result type (might be due to invalid IL or missing references)
		//IL_19158: Unknown result type (might be due to invalid IL or missing references)
		//IL_19166: Unknown result type (might be due to invalid IL or missing references)
		//IL_1916c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1916e: Unknown result type (might be due to invalid IL or missing references)
		//IL_19173: Unknown result type (might be due to invalid IL or missing references)
		//IL_19180: Unknown result type (might be due to invalid IL or missing references)
		//IL_19185: Unknown result type (might be due to invalid IL or missing references)
		//IL_19190: Unknown result type (might be due to invalid IL or missing references)
		//IL_19195: Unknown result type (might be due to invalid IL or missing references)
		//IL_1919a: Unknown result type (might be due to invalid IL or missing references)
		//IL_191a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_191b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_191b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_242ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_242d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_242d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ce6: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d22: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d28: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d35: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d41: Unknown result type (might be due to invalid IL or missing references)
		//IL_21124: Unknown result type (might be due to invalid IL or missing references)
		//IL_21138: Unknown result type (might be due to invalid IL or missing references)
		//IL_2113e: Unknown result type (might be due to invalid IL or missing references)
		//IL_21140: Unknown result type (might be due to invalid IL or missing references)
		//IL_21146: Unknown result type (might be due to invalid IL or missing references)
		//IL_21153: Unknown result type (might be due to invalid IL or missing references)
		//IL_21159: Unknown result type (might be due to invalid IL or missing references)
		//IL_2115b: Unknown result type (might be due to invalid IL or missing references)
		//IL_21160: Unknown result type (might be due to invalid IL or missing references)
		//IL_21167: Unknown result type (might be due to invalid IL or missing references)
		//IL_2116c: Unknown result type (might be due to invalid IL or missing references)
		//IL_21176: Unknown result type (might be due to invalid IL or missing references)
		//IL_2117b: Unknown result type (might be due to invalid IL or missing references)
		//IL_211bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_211dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_211e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_211f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_211f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_211ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_21204: Unknown result type (might be due to invalid IL or missing references)
		//IL_2345a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2345f: Unknown result type (might be due to invalid IL or missing references)
		//IL_23464: Unknown result type (might be due to invalid IL or missing references)
		//IL_23469: Unknown result type (might be due to invalid IL or missing references)
		//IL_23470: Unknown result type (might be due to invalid IL or missing references)
		//IL_23475: Unknown result type (might be due to invalid IL or missing references)
		//IL_23480: Unknown result type (might be due to invalid IL or missing references)
		//IL_23485: Unknown result type (might be due to invalid IL or missing references)
		//IL_2348a: Unknown result type (might be due to invalid IL or missing references)
		//IL_193a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_193b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_23498: Unknown result type (might be due to invalid IL or missing references)
		//IL_193c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_193cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_193d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_193d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_193e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_193f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_193f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_19405: Unknown result type (might be due to invalid IL or missing references)
		//IL_19410: Unknown result type (might be due to invalid IL or missing references)
		//IL_1941a: Unknown result type (might be due to invalid IL or missing references)
		//IL_19425: Unknown result type (might be due to invalid IL or missing references)
		//IL_234a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_234ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_234b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_234be: Unknown result type (might be due to invalid IL or missing references)
		//IL_234c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_234cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_234d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_21dab: Unknown result type (might be due to invalid IL or missing references)
		//IL_21db9: Unknown result type (might be due to invalid IL or missing references)
		//IL_21dbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_21dc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_21dd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_21dd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ddd: Unknown result type (might be due to invalid IL or missing references)
		//IL_21de5: Unknown result type (might be due to invalid IL or missing references)
		//IL_21dea: Unknown result type (might be due to invalid IL or missing references)
		//IL_21df5: Unknown result type (might be due to invalid IL or missing references)
		//IL_21dfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f02c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f04d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1964f: Unknown result type (might be due to invalid IL or missing references)
		//IL_19656: Unknown result type (might be due to invalid IL or missing references)
		//IL_1965b: Unknown result type (might be due to invalid IL or missing references)
		//IL_19660: Unknown result type (might be due to invalid IL or missing references)
		//IL_19666: Unknown result type (might be due to invalid IL or missing references)
		//IL_1966c: Unknown result type (might be due to invalid IL or missing references)
		//IL_19671: Unknown result type (might be due to invalid IL or missing references)
		//IL_19676: Unknown result type (might be due to invalid IL or missing references)
		//IL_194f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_194ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_19504: Unknown result type (might be due to invalid IL or missing references)
		//IL_19509: Unknown result type (might be due to invalid IL or missing references)
		//IL_1950f: Unknown result type (might be due to invalid IL or missing references)
		//IL_19516: Unknown result type (might be due to invalid IL or missing references)
		//IL_1951b: Unknown result type (might be due to invalid IL or missing references)
		//IL_19520: Unknown result type (might be due to invalid IL or missing references)
		//IL_19532: Unknown result type (might be due to invalid IL or missing references)
		//IL_1953e: Unknown result type (might be due to invalid IL or missing references)
		//IL_19543: Unknown result type (might be due to invalid IL or missing references)
		//IL_19549: Unknown result type (might be due to invalid IL or missing references)
		//IL_1954f: Unknown result type (might be due to invalid IL or missing references)
		//IL_25693: Unknown result type (might be due to invalid IL or missing references)
		//IL_24822: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e12: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e29: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e33: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f0f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f0fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f10e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f113: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f118: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f07a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f085: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f3af: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f3b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f3c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f3cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f3d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1969e: Unknown result type (might be due to invalid IL or missing references)
		//IL_196aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_196af: Unknown result type (might be due to invalid IL or missing references)
		//IL_196b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_196bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_22823: Unknown result type (might be due to invalid IL or missing references)
		//IL_22842: Unknown result type (might be due to invalid IL or missing references)
		//IL_22848: Unknown result type (might be due to invalid IL or missing references)
		//IL_2288d: Unknown result type (might be due to invalid IL or missing references)
		//IL_22897: Unknown result type (might be due to invalid IL or missing references)
		//IL_2289c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f664: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f66a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f67d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f682: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f687: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f12b: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d24: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d33: Unknown result type (might be due to invalid IL or missing references)
		//IL_25119: Unknown result type (might be due to invalid IL or missing references)
		//IL_2332c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f94b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f951: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f964: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f969: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f96e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f3e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f34b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f350: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f356: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f35c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f362: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f36f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f374: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f240: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f250: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f256: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f258: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f26e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f27a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f27f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f285: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f28b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f291: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f296: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f2a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f2a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f2bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f2c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f2f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f2fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f300: Unknown result type (might be due to invalid IL or missing references)
		//IL_25519: Unknown result type (might be due to invalid IL or missing references)
		//IL_25525: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a75: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2480b: Unknown result type (might be due to invalid IL or missing references)
		//IL_24811: Unknown result type (might be due to invalid IL or missing references)
		//IL_24816: Unknown result type (might be due to invalid IL or missing references)
		//IL_235a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_235ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_23342: Unknown result type (might be due to invalid IL or missing references)
		//IL_23348: Unknown result type (might be due to invalid IL or missing references)
		//IL_2334d: Unknown result type (might be due to invalid IL or missing references)
		//IL_23352: Unknown result type (might be due to invalid IL or missing references)
		//IL_23358: Unknown result type (might be due to invalid IL or missing references)
		//IL_2335e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f69a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f605: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f60a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f610: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f616: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f61c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f629: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f62e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f4fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f50a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f510: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f512: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f528: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f534: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f539: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f53f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f545: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f54b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f550: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f55a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f55f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f576: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f57c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f5ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f5b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f5ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f1ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f1b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f1c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f1d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f1d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_24f64: Unknown result type (might be due to invalid IL or missing references)
		//IL_24f6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_24f6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_24f74: Unknown result type (might be due to invalid IL or missing references)
		//IL_25006: Unknown result type (might be due to invalid IL or missing references)
		//IL_2500c: Unknown result type (might be due to invalid IL or missing references)
		//IL_25011: Unknown result type (might be due to invalid IL or missing references)
		//IL_25017: Unknown result type (might be due to invalid IL or missing references)
		//IL_24f3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_24af3: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b04: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b37: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b48: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b59: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b63: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b68: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a88: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a99: Unknown result type (might be due to invalid IL or missing references)
		//IL_24ab0: Unknown result type (might be due to invalid IL or missing references)
		//IL_24ab5: Unknown result type (might be due to invalid IL or missing references)
		//IL_24aba: Unknown result type (might be due to invalid IL or missing references)
		//IL_24abf: Unknown result type (might be due to invalid IL or missing references)
		//IL_233ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_233c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_233c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_233cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_233d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_233dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_233e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_233e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_233ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_233f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_233fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2340d: Unknown result type (might be due to invalid IL or missing references)
		//IL_23418: Unknown result type (might be due to invalid IL or missing references)
		//IL_2341d: Unknown result type (might be due to invalid IL or missing references)
		//IL_23423: Unknown result type (might be due to invalid IL or missing references)
		//IL_2342d: Unknown result type (might be due to invalid IL or missing references)
		//IL_23432: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fbe5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fbea: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fbf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fbf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fbfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fc09: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fc0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fada: Unknown result type (might be due to invalid IL or missing references)
		//IL_1faea: Unknown result type (might be due to invalid IL or missing references)
		//IL_1faf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1faf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb08: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb14: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb19: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb25: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb30: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb56: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb95: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f8ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f8bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f8c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f8cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f8d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f8de: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f8e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f7af: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f7bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f7c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f7c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f7dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f7e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f7ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f7f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f7fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f800: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f805: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f80f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f814: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f82b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f831: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f860: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f86a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f86f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f466: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f473: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f47e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f48c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f492: Unknown result type (might be due to invalid IL or missing references)
		//IL_28267: Unknown result type (might be due to invalid IL or missing references)
		//IL_2826c: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e56: Unknown result type (might be due to invalid IL or missing references)
		//IL_25390: Unknown result type (might be due to invalid IL or missing references)
		//IL_253a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_253af: Unknown result type (might be due to invalid IL or missing references)
		//IL_253cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_253d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_253f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_253ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_25404: Unknown result type (might be due to invalid IL or missing references)
		//IL_251a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_251c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_251ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_25247: Unknown result type (might be due to invalid IL or missing references)
		//IL_25251: Unknown result type (might be due to invalid IL or missing references)
		//IL_25256: Unknown result type (might be due to invalid IL or missing references)
		//IL_25024: Unknown result type (might be due to invalid IL or missing references)
		//IL_25029: Unknown result type (might be due to invalid IL or missing references)
		//IL_24bc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_24bdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_24be2: Unknown result type (might be due to invalid IL or missing references)
		//IL_24c00: Unknown result type (might be due to invalid IL or missing references)
		//IL_24c05: Unknown result type (might be due to invalid IL or missing references)
		//IL_24c28: Unknown result type (might be due to invalid IL or missing references)
		//IL_24c32: Unknown result type (might be due to invalid IL or missing references)
		//IL_24c37: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b81: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b97: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2478e: Unknown result type (might be due to invalid IL or missing references)
		//IL_24794: Unknown result type (might be due to invalid IL or missing references)
		//IL_24799: Unknown result type (might be due to invalid IL or missing references)
		//IL_246c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_246cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_246d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_246d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_246dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_246ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_246ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_24704: Unknown result type (might be due to invalid IL or missing references)
		//IL_24709: Unknown result type (might be due to invalid IL or missing references)
		//IL_2470e: Unknown result type (might be due to invalid IL or missing references)
		//IL_24715: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fcb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fcba: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fcdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fce5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fcec: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fcf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd11: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd16: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd30: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f9a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f71b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f728: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f733: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f741: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f747: Unknown result type (might be due to invalid IL or missing references)
		//IL_28125: Unknown result type (might be due to invalid IL or missing references)
		//IL_2812a: Unknown result type (might be due to invalid IL or missing references)
		//IL_262b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_25f44: Unknown result type (might be due to invalid IL or missing references)
		//IL_25ec6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2528d: Unknown result type (might be due to invalid IL or missing references)
		//IL_252b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_252b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2533a: Unknown result type (might be due to invalid IL or missing references)
		//IL_25344: Unknown result type (might be due to invalid IL or missing references)
		//IL_25349: Unknown result type (might be due to invalid IL or missing references)
		//IL_25039: Unknown result type (might be due to invalid IL or missing references)
		//IL_25045: Unknown result type (might be due to invalid IL or missing references)
		//IL_2504a: Unknown result type (might be due to invalid IL or missing references)
		//IL_24ccd: Unknown result type (might be due to invalid IL or missing references)
		//IL_24ce6: Unknown result type (might be due to invalid IL or missing references)
		//IL_24cec: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d21: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d26: Unknown result type (might be due to invalid IL or missing references)
		//IL_23624: Unknown result type (might be due to invalid IL or missing references)
		//IL_2362a: Unknown result type (might be due to invalid IL or missing references)
		//IL_282b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_282b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_282cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_282d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_282d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_282dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2651b: Unknown result type (might be due to invalid IL or missing references)
		//IL_262d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_262dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_262e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_262e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_25067: Unknown result type (might be due to invalid IL or missing references)
		//IL_2507a: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d80: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d99: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_24dbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_24dc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_24dd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_24dd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fa21: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fa2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fa39: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fa47: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fa4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_282f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_282fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2830f: Unknown result type (might be due to invalid IL or missing references)
		//IL_26559: Unknown result type (might be due to invalid IL or missing references)
		//IL_26577: Unknown result type (might be due to invalid IL or missing references)
		//IL_2657d: Unknown result type (might be due to invalid IL or missing references)
		//IL_26582: Unknown result type (might be due to invalid IL or missing references)
		//IL_26587: Unknown result type (might be due to invalid IL or missing references)
		//IL_2658d: Unknown result type (might be due to invalid IL or missing references)
		//IL_26593: Unknown result type (might be due to invalid IL or missing references)
		//IL_26302: Unknown result type (might be due to invalid IL or missing references)
		//IL_26313: Unknown result type (might be due to invalid IL or missing references)
		//IL_26318: Unknown result type (might be due to invalid IL or missing references)
		//IL_26324: Unknown result type (might be due to invalid IL or missing references)
		//IL_26329: Unknown result type (might be due to invalid IL or missing references)
		//IL_26334: Unknown result type (might be due to invalid IL or missing references)
		//IL_26339: Unknown result type (might be due to invalid IL or missing references)
		//IL_262f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_262fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2508f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2509a: Unknown result type (might be due to invalid IL or missing references)
		//IL_250a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_250b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e29: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_200b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_200bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_200c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_20112: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ffb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ffc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ffc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ffc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ffde: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ffea: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ffef: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fff5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fffb: Unknown result type (might be due to invalid IL or missing references)
		//IL_20001: Unknown result type (might be due to invalid IL or missing references)
		//IL_20006: Unknown result type (might be due to invalid IL or missing references)
		//IL_20010: Unknown result type (might be due to invalid IL or missing references)
		//IL_20015: Unknown result type (might be due to invalid IL or missing references)
		//IL_2002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_20032: Unknown result type (might be due to invalid IL or missing references)
		//IL_20061: Unknown result type (might be due to invalid IL or missing references)
		//IL_2006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_20070: Unknown result type (might be due to invalid IL or missing references)
		//IL_29c17: Unknown result type (might be due to invalid IL or missing references)
		//IL_29c2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_29c37: Unknown result type (might be due to invalid IL or missing references)
		//IL_29c41: Unknown result type (might be due to invalid IL or missing references)
		//IL_29c46: Unknown result type (might be due to invalid IL or missing references)
		//IL_28ab6: Unknown result type (might be due to invalid IL or missing references)
		//IL_28abb: Unknown result type (might be due to invalid IL or missing references)
		//IL_283d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_283e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_283e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_283ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_28196: Unknown result type (might be due to invalid IL or missing references)
		//IL_2819b: Unknown result type (might be due to invalid IL or missing references)
		//IL_281b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_281bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_281c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_281c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_265b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2659f: Unknown result type (might be due to invalid IL or missing references)
		//IL_265a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_26410: Unknown result type (might be due to invalid IL or missing references)
		//IL_26434: Unknown result type (might be due to invalid IL or missing references)
		//IL_2643a: Unknown result type (might be due to invalid IL or missing references)
		//IL_264a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_264bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_264c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e68: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fdce: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fddb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fde6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fdf4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fdfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe17: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_201d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_201d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_201dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_201ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_201ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_20147: Unknown result type (might be due to invalid IL or missing references)
		//IL_2014c: Unknown result type (might be due to invalid IL or missing references)
		//IL_20162: Unknown result type (might be due to invalid IL or missing references)
		//IL_20170: Unknown result type (might be due to invalid IL or missing references)
		//IL_20176: Unknown result type (might be due to invalid IL or missing references)
		//IL_20178: Unknown result type (might be due to invalid IL or missing references)
		//IL_2017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_201a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_201b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_201be: Unknown result type (might be due to invalid IL or missing references)
		//IL_29a4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_284cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_284ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_2851f: Unknown result type (might be due to invalid IL or missing references)
		//IL_28529: Unknown result type (might be due to invalid IL or missing references)
		//IL_2852e: Unknown result type (might be due to invalid IL or missing references)
		//IL_28433: Unknown result type (might be due to invalid IL or missing references)
		//IL_28438: Unknown result type (might be due to invalid IL or missing references)
		//IL_28443: Unknown result type (might be due to invalid IL or missing references)
		//IL_28448: Unknown result type (might be due to invalid IL or missing references)
		//IL_281f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_281fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_28203: Unknown result type (might be due to invalid IL or missing references)
		//IL_2820b: Unknown result type (might be due to invalid IL or missing references)
		//IL_28210: Unknown result type (might be due to invalid IL or missing references)
		//IL_2821b: Unknown result type (might be due to invalid IL or missing references)
		//IL_28220: Unknown result type (might be due to invalid IL or missing references)
		//IL_26611: Unknown result type (might be due to invalid IL or missing references)
		//IL_2661f: Unknown result type (might be due to invalid IL or missing references)
		//IL_26624: Unknown result type (might be due to invalid IL or missing references)
		//IL_26630: Unknown result type (might be due to invalid IL or missing references)
		//IL_26635: Unknown result type (might be due to invalid IL or missing references)
		//IL_26640: Unknown result type (might be due to invalid IL or missing references)
		//IL_26645: Unknown result type (might be due to invalid IL or missing references)
		//IL_2665e: Unknown result type (might be due to invalid IL or missing references)
		//IL_26664: Unknown result type (might be due to invalid IL or missing references)
		//IL_26689: Unknown result type (might be due to invalid IL or missing references)
		//IL_2668e: Unknown result type (might be due to invalid IL or missing references)
		//IL_266a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_266a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_266ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_266b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_266c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_266cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_266d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_266db: Unknown result type (might be due to invalid IL or missing references)
		//IL_266e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe63: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe73: Unknown result type (might be due to invalid IL or missing references)
		//IL_29ad4: Unknown result type (might be due to invalid IL or missing references)
		//IL_29ae3: Unknown result type (might be due to invalid IL or missing references)
		//IL_285d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_285da: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ce7: Unknown result type (might be due to invalid IL or missing references)
		//IL_26cce: Unknown result type (might be due to invalid IL or missing references)
		//IL_2683d: Unknown result type (might be due to invalid IL or missing references)
		//IL_26842: Unknown result type (might be due to invalid IL or missing references)
		//IL_26848: Unknown result type (might be due to invalid IL or missing references)
		//IL_26859: Unknown result type (might be due to invalid IL or missing references)
		//IL_2685f: Unknown result type (might be due to invalid IL or missing references)
		//IL_26861: Unknown result type (might be due to invalid IL or missing references)
		//IL_2687a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2688e: Unknown result type (might be due to invalid IL or missing references)
		//IL_26893: Unknown result type (might be due to invalid IL or missing references)
		//IL_26899: Unknown result type (might be due to invalid IL or missing references)
		//IL_268ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_268b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_268b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_268bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_268c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_268ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_268d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_268db: Unknown result type (might be due to invalid IL or missing references)
		//IL_268e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_268f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_26911: Unknown result type (might be due to invalid IL or missing references)
		//IL_26917: Unknown result type (might be due to invalid IL or missing references)
		//IL_2693c: Unknown result type (might be due to invalid IL or missing references)
		//IL_26941: Unknown result type (might be due to invalid IL or missing references)
		//IL_26947: Unknown result type (might be due to invalid IL or missing references)
		//IL_2694c: Unknown result type (might be due to invalid IL or missing references)
		//IL_26957: Unknown result type (might be due to invalid IL or missing references)
		//IL_2695d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2698d: Unknown result type (might be due to invalid IL or missing references)
		//IL_269a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_269a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_269ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_269b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_269be: Unknown result type (might be due to invalid IL or missing references)
		//IL_269c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_269c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_269ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_269d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_269de: Unknown result type (might be due to invalid IL or missing references)
		//IL_269ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_26a04: Unknown result type (might be due to invalid IL or missing references)
		//IL_26a0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_26a2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_26a34: Unknown result type (might be due to invalid IL or missing references)
		//IL_26a3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_26a44: Unknown result type (might be due to invalid IL or missing references)
		//IL_26a49: Unknown result type (might be due to invalid IL or missing references)
		//IL_26a54: Unknown result type (might be due to invalid IL or missing references)
		//IL_26a5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_26720: Unknown result type (might be due to invalid IL or missing references)
		//IL_2672e: Unknown result type (might be due to invalid IL or missing references)
		//IL_26733: Unknown result type (might be due to invalid IL or missing references)
		//IL_2673f: Unknown result type (might be due to invalid IL or missing references)
		//IL_26744: Unknown result type (might be due to invalid IL or missing references)
		//IL_2674f: Unknown result type (might be due to invalid IL or missing references)
		//IL_26754: Unknown result type (might be due to invalid IL or missing references)
		//IL_2676d: Unknown result type (might be due to invalid IL or missing references)
		//IL_26773: Unknown result type (might be due to invalid IL or missing references)
		//IL_26798: Unknown result type (might be due to invalid IL or missing references)
		//IL_2679d: Unknown result type (might be due to invalid IL or missing references)
		//IL_267a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_267ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_267b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_267bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_267ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_267d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_267d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_267e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_267e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2593f: Unknown result type (might be due to invalid IL or missing references)
		//IL_25950: Unknown result type (might be due to invalid IL or missing references)
		//IL_25955: Unknown result type (might be due to invalid IL or missing references)
		//IL_2595a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff66: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff77: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_29b0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_29ab3: Unknown result type (might be due to invalid IL or missing references)
		//IL_293fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_29403: Unknown result type (might be due to invalid IL or missing references)
		//IL_28b26: Unknown result type (might be due to invalid IL or missing references)
		//IL_28b30: Unknown result type (might be due to invalid IL or missing references)
		//IL_28b35: Unknown result type (might be due to invalid IL or missing references)
		//IL_28b3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_28b4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_28a50: Unknown result type (might be due to invalid IL or missing references)
		//IL_28a55: Unknown result type (might be due to invalid IL or missing references)
		//IL_28a0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_27968: Unknown result type (might be due to invalid IL or missing references)
		//IL_27976: Unknown result type (might be due to invalid IL or missing references)
		//IL_2797b: Unknown result type (might be due to invalid IL or missing references)
		//IL_27987: Unknown result type (might be due to invalid IL or missing references)
		//IL_2798c: Unknown result type (might be due to invalid IL or missing references)
		//IL_27997: Unknown result type (might be due to invalid IL or missing references)
		//IL_2799c: Unknown result type (might be due to invalid IL or missing references)
		//IL_279b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_279bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_279e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_279e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_279f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_279f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_279fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_27a05: Unknown result type (might be due to invalid IL or missing references)
		//IL_27a16: Unknown result type (might be due to invalid IL or missing references)
		//IL_27a1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_27a1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_27a28: Unknown result type (might be due to invalid IL or missing references)
		//IL_27a2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_27a64: Unknown result type (might be due to invalid IL or missing references)
		//IL_2784e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2785c: Unknown result type (might be due to invalid IL or missing references)
		//IL_27861: Unknown result type (might be due to invalid IL or missing references)
		//IL_2786d: Unknown result type (might be due to invalid IL or missing references)
		//IL_27872: Unknown result type (might be due to invalid IL or missing references)
		//IL_2787d: Unknown result type (might be due to invalid IL or missing references)
		//IL_27882: Unknown result type (might be due to invalid IL or missing references)
		//IL_2789b: Unknown result type (might be due to invalid IL or missing references)
		//IL_278a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_278c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_278cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_278e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_278e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_278ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_278f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_27906: Unknown result type (might be due to invalid IL or missing references)
		//IL_2790c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2790e: Unknown result type (might be due to invalid IL or missing references)
		//IL_27918: Unknown result type (might be due to invalid IL or missing references)
		//IL_2791d: Unknown result type (might be due to invalid IL or missing references)
		//IL_27954: Unknown result type (might be due to invalid IL or missing references)
		//IL_2772e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2773c: Unknown result type (might be due to invalid IL or missing references)
		//IL_27741: Unknown result type (might be due to invalid IL or missing references)
		//IL_2774d: Unknown result type (might be due to invalid IL or missing references)
		//IL_27752: Unknown result type (might be due to invalid IL or missing references)
		//IL_2775d: Unknown result type (might be due to invalid IL or missing references)
		//IL_27762: Unknown result type (might be due to invalid IL or missing references)
		//IL_2777b: Unknown result type (might be due to invalid IL or missing references)
		//IL_27781: Unknown result type (might be due to invalid IL or missing references)
		//IL_277a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_277ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_277b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_277bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_277c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_277cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_277dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_277e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_277e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_277ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_277f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2782a: Unknown result type (might be due to invalid IL or missing references)
		//IL_27618: Unknown result type (might be due to invalid IL or missing references)
		//IL_27626: Unknown result type (might be due to invalid IL or missing references)
		//IL_2762b: Unknown result type (might be due to invalid IL or missing references)
		//IL_27637: Unknown result type (might be due to invalid IL or missing references)
		//IL_2763c: Unknown result type (might be due to invalid IL or missing references)
		//IL_27647: Unknown result type (might be due to invalid IL or missing references)
		//IL_2764c: Unknown result type (might be due to invalid IL or missing references)
		//IL_27661: Unknown result type (might be due to invalid IL or missing references)
		//IL_27667: Unknown result type (might be due to invalid IL or missing references)
		//IL_2768c: Unknown result type (might be due to invalid IL or missing references)
		//IL_27691: Unknown result type (might be due to invalid IL or missing references)
		//IL_276a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_276ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_276b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_276bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_276cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_276d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_276d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_276de: Unknown result type (might be due to invalid IL or missing references)
		//IL_276e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2771a: Unknown result type (might be due to invalid IL or missing references)
		//IL_26fa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_26faa: Unknown result type (might be due to invalid IL or missing references)
		//IL_26fb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_26fc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_26fc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_26fc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_26fe2: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ff6: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ffb: Unknown result type (might be due to invalid IL or missing references)
		//IL_27001: Unknown result type (might be due to invalid IL or missing references)
		//IL_27016: Unknown result type (might be due to invalid IL or missing references)
		//IL_2701b: Unknown result type (might be due to invalid IL or missing references)
		//IL_27021: Unknown result type (might be due to invalid IL or missing references)
		//IL_27027: Unknown result type (might be due to invalid IL or missing references)
		//IL_2702d: Unknown result type (might be due to invalid IL or missing references)
		//IL_27032: Unknown result type (might be due to invalid IL or missing references)
		//IL_27038: Unknown result type (might be due to invalid IL or missing references)
		//IL_27043: Unknown result type (might be due to invalid IL or missing references)
		//IL_27048: Unknown result type (might be due to invalid IL or missing references)
		//IL_2707a: Unknown result type (might be due to invalid IL or missing references)
		//IL_27094: Unknown result type (might be due to invalid IL or missing references)
		//IL_2709a: Unknown result type (might be due to invalid IL or missing references)
		//IL_270bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_270c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_270ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_270cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_270da: Unknown result type (might be due to invalid IL or missing references)
		//IL_270e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_26d5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_26d6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_26d70: Unknown result type (might be due to invalid IL or missing references)
		//IL_26d7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_26d81: Unknown result type (might be due to invalid IL or missing references)
		//IL_26d8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_26d91: Unknown result type (might be due to invalid IL or missing references)
		//IL_26daa: Unknown result type (might be due to invalid IL or missing references)
		//IL_26db0: Unknown result type (might be due to invalid IL or missing references)
		//IL_26dd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_26dda: Unknown result type (might be due to invalid IL or missing references)
		//IL_26def: Unknown result type (might be due to invalid IL or missing references)
		//IL_26df4: Unknown result type (might be due to invalid IL or missing references)
		//IL_26df9: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e04: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e15: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e27: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e63: Unknown result type (might be due to invalid IL or missing references)
		//IL_26a9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_26aa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_26aad: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ab9: Unknown result type (might be due to invalid IL or missing references)
		//IL_26abe: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ac9: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ace: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ae3: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ae9: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b13: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b28: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b32: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b54: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b56: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b60: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b65: Unknown result type (might be due to invalid IL or missing references)
		//IL_26041: Unknown result type (might be due to invalid IL or missing references)
		//IL_26057: Unknown result type (might be due to invalid IL or missing references)
		//IL_2605d: Unknown result type (might be due to invalid IL or missing references)
		//IL_26076: Unknown result type (might be due to invalid IL or missing references)
		//IL_2607b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2609e: Unknown result type (might be due to invalid IL or missing references)
		//IL_260a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_260a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_260b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_260b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_260ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_260d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_260dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_260e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1feea: Unknown result type (might be due to invalid IL or missing references)
		//IL_1feef: Unknown result type (might be due to invalid IL or missing references)
		//IL_29dd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_29ddc: Unknown result type (might be due to invalid IL or missing references)
		//IL_29de7: Unknown result type (might be due to invalid IL or missing references)
		//IL_29dec: Unknown result type (might be due to invalid IL or missing references)
		//IL_29df1: Unknown result type (might be due to invalid IL or missing references)
		//IL_29dfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_29e03: Unknown result type (might be due to invalid IL or missing references)
		//IL_29e08: Unknown result type (might be due to invalid IL or missing references)
		//IL_29b46: Unknown result type (might be due to invalid IL or missing references)
		//IL_29b4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_299e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_293d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2928e: Unknown result type (might be due to invalid IL or missing references)
		//IL_292aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_292b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_292b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_292ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_292c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_292c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2861c: Unknown result type (might be due to invalid IL or missing references)
		//IL_28627: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e82: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e90: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e95: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ea1: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ea6: Unknown result type (might be due to invalid IL or missing references)
		//IL_26eb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_26eb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ecf: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ed5: Unknown result type (might be due to invalid IL or missing references)
		//IL_26efa: Unknown result type (might be due to invalid IL or missing references)
		//IL_26eff: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f14: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f30: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f36: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f38: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f42: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f47: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_28013: Unknown result type (might be due to invalid IL or missing references)
		//IL_28027: Unknown result type (might be due to invalid IL or missing references)
		//IL_2802c: Unknown result type (might be due to invalid IL or missing references)
		//IL_28048: Unknown result type (might be due to invalid IL or missing references)
		//IL_2804e: Unknown result type (might be due to invalid IL or missing references)
		//IL_28065: Unknown result type (might be due to invalid IL or missing references)
		//IL_2806a: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ba5: Unknown result type (might be due to invalid IL or missing references)
		//IL_26bb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_26bb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_26bc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_26bc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_26bd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_26bd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_26bf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_26bf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c22: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c32: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c37: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c42: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c53: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c59: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c65: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_26163: Unknown result type (might be due to invalid IL or missing references)
		//IL_26168: Unknown result type (might be due to invalid IL or missing references)
		//IL_26182: Unknown result type (might be due to invalid IL or missing references)
		//IL_29a0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_29300: Unknown result type (might be due to invalid IL or missing references)
		//IL_29311: Unknown result type (might be due to invalid IL or missing references)
		//IL_29316: Unknown result type (might be due to invalid IL or missing references)
		//IL_2931c: Unknown result type (might be due to invalid IL or missing references)
		//IL_29327: Unknown result type (might be due to invalid IL or missing references)
		//IL_2932c: Unknown result type (might be due to invalid IL or missing references)
		//IL_292dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_292e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_292ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_27135: Unknown result type (might be due to invalid IL or missing references)
		//IL_2713f: Unknown result type (might be due to invalid IL or missing references)
		//IL_27144: Unknown result type (might be due to invalid IL or missing references)
		//IL_27164: Unknown result type (might be due to invalid IL or missing references)
		//IL_2716e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2717b: Unknown result type (might be due to invalid IL or missing references)
		//IL_27185: Unknown result type (might be due to invalid IL or missing references)
		//IL_27191: Unknown result type (might be due to invalid IL or missing references)
		//IL_2719c: Unknown result type (might be due to invalid IL or missing references)
		//IL_29b79: Unknown result type (might be due to invalid IL or missing references)
		//IL_29b7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_29b89: Unknown result type (might be due to invalid IL or missing references)
		//IL_29b8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_29b99: Unknown result type (might be due to invalid IL or missing references)
		//IL_29ba3: Unknown result type (might be due to invalid IL or missing references)
		//IL_28bff: Unknown result type (might be due to invalid IL or missing references)
		//IL_28c0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_28c14: Unknown result type (might be due to invalid IL or missing references)
		//IL_27d94: Unknown result type (might be due to invalid IL or missing references)
		//IL_27da2: Unknown result type (might be due to invalid IL or missing references)
		//IL_27dad: Unknown result type (might be due to invalid IL or missing references)
		//IL_27db2: Unknown result type (might be due to invalid IL or missing references)
		//IL_27dbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_27dc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_27dce: Unknown result type (might be due to invalid IL or missing references)
		//IL_27dd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_27dec: Unknown result type (might be due to invalid IL or missing references)
		//IL_27df2: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e17: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e31: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e36: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e46: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e57: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e69: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ea5: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b10: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b29: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b64: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b94: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ba9: Unknown result type (might be due to invalid IL or missing references)
		//IL_27bae: Unknown result type (might be due to invalid IL or missing references)
		//IL_27bb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_27bbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_27bcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_27bd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_27bd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_27be1: Unknown result type (might be due to invalid IL or missing references)
		//IL_27be6: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_27315: Unknown result type (might be due to invalid IL or missing references)
		//IL_27323: Unknown result type (might be due to invalid IL or missing references)
		//IL_27328: Unknown result type (might be due to invalid IL or missing references)
		//IL_27334: Unknown result type (might be due to invalid IL or missing references)
		//IL_27339: Unknown result type (might be due to invalid IL or missing references)
		//IL_27344: Unknown result type (might be due to invalid IL or missing references)
		//IL_27349: Unknown result type (might be due to invalid IL or missing references)
		//IL_2735e: Unknown result type (might be due to invalid IL or missing references)
		//IL_27364: Unknown result type (might be due to invalid IL or missing references)
		//IL_27389: Unknown result type (might be due to invalid IL or missing references)
		//IL_2738e: Unknown result type (might be due to invalid IL or missing references)
		//IL_273a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_273a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_273ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_273b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_273c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_273cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_273d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_273db: Unknown result type (might be due to invalid IL or missing references)
		//IL_273e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_27417: Unknown result type (might be due to invalid IL or missing references)
		//IL_261aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_261e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_261e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2620b: Unknown result type (might be due to invalid IL or missing references)
		//IL_26211: Unknown result type (might be due to invalid IL or missing references)
		//IL_27eb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ec7: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ed2: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ed7: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ee3: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ee8: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ef3: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ef8: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f11: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f17: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f41: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f51: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f56: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f61: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f72: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f78: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f84: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f89: Unknown result type (might be due to invalid IL or missing references)
		//IL_27fc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c31: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c60: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c70: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c89: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_27cb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_27cb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_27cc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_27cc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_27cce: Unknown result type (might be due to invalid IL or missing references)
		//IL_27cd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_27cea: Unknown result type (might be due to invalid IL or missing references)
		//IL_27cf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_27cf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_27cfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_27d01: Unknown result type (might be due to invalid IL or missing references)
		//IL_27d38: Unknown result type (might be due to invalid IL or missing references)
		//IL_27436: Unknown result type (might be due to invalid IL or missing references)
		//IL_27444: Unknown result type (might be due to invalid IL or missing references)
		//IL_27449: Unknown result type (might be due to invalid IL or missing references)
		//IL_27455: Unknown result type (might be due to invalid IL or missing references)
		//IL_2745a: Unknown result type (might be due to invalid IL or missing references)
		//IL_27465: Unknown result type (might be due to invalid IL or missing references)
		//IL_2746a: Unknown result type (might be due to invalid IL or missing references)
		//IL_27483: Unknown result type (might be due to invalid IL or missing references)
		//IL_27489: Unknown result type (might be due to invalid IL or missing references)
		//IL_274ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_274b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_274be: Unknown result type (might be due to invalid IL or missing references)
		//IL_274c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_274c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_274d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_274e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_274ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_274ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_274f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_274fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_27532: Unknown result type (might be due to invalid IL or missing references)
		//IL_2622a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2622f: Unknown result type (might be due to invalid IL or missing references)
		//IL_26239: Unknown result type (might be due to invalid IL or missing references)
		//IL_2623e: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c08: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c14: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c19: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c35: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c42: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c51: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c57: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c61: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c66: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bd80: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bd85: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aece: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aed8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aedd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2adbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2adca: Unknown result type (might be due to invalid IL or missing references)
		//IL_2adcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2addb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ade0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2adeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2adf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ae09: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ae0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ae34: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ae39: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ae44: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ae49: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ae4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ae59: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ae6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ae70: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ae72: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ae7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ae81: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ac97: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aca5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2acaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2acb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2acbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2acc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2accb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2acf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2acff: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ad24: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ad29: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ad3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ad43: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ad48: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ad53: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ad64: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ad6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ad6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ad76: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ad7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_29f32: Unknown result type (might be due to invalid IL or missing references)
		//IL_2722a: Unknown result type (might be due to invalid IL or missing references)
		//IL_27236: Unknown result type (might be due to invalid IL or missing references)
		//IL_2727c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2728a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2728f: Unknown result type (might be due to invalid IL or missing references)
		//IL_272a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_272a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_272b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_272b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_272bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_25bcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_25bd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c88: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c92: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c97: Unknown result type (might be due to invalid IL or missing references)
		//IL_2af40: Unknown result type (might be due to invalid IL or missing references)
		//IL_2af4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2af4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b725: Unknown result type (might be due to invalid IL or missing references)
		//IL_29f5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_29f62: Unknown result type (might be due to invalid IL or missing references)
		//IL_29f87: Unknown result type (might be due to invalid IL or missing references)
		//IL_28c3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_28c50: Unknown result type (might be due to invalid IL or missing references)
		//IL_28c56: Unknown result type (might be due to invalid IL or missing references)
		//IL_28c58: Unknown result type (might be due to invalid IL or missing references)
		//IL_28c66: Unknown result type (might be due to invalid IL or missing references)
		//IL_28c6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_28c6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_28c73: Unknown result type (might be due to invalid IL or missing references)
		//IL_28c7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_28c9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_28cea: Unknown result type (might be due to invalid IL or missing references)
		//IL_28cef: Unknown result type (might be due to invalid IL or missing references)
		//IL_28cfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_28d05: Unknown result type (might be due to invalid IL or missing references)
		//IL_28d0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2874c: Unknown result type (might be due to invalid IL or missing references)
		//IL_28757: Unknown result type (might be due to invalid IL or missing references)
		//IL_286a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_286ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_27565: Unknown result type (might be due to invalid IL or missing references)
		//IL_27571: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b90b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b8bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b8c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b1b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b1c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b1cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b1d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b1dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b1e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b1ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b206: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b20c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b231: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b236: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b24b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b250: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b255: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b260: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b271: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b277: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b279: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b283: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b288: Unknown result type (might be due to invalid IL or missing references)
		//IL_2af94: Unknown result type (might be due to invalid IL or missing references)
		//IL_2afa2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2afa7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2afb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2afb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2afc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2afc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2afde: Unknown result type (might be due to invalid IL or missing references)
		//IL_2afe4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b009: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b00e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b023: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b028: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b02d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b038: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b049: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b04f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b051: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b05b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b060: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b09c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b0aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b0af: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b0bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b0c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b0cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b0d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b0e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b0ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b111: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b116: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b12b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b130: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b135: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b140: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b151: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b157: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b159: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b163: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b168: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b1aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b1af: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b3a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b3a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_29fa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_287bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_287c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bdff: Unknown result type (might be due to invalid IL or missing references)
		//IL_2be13: Unknown result type (might be due to invalid IL or missing references)
		//IL_2be1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bb9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bba0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bbb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b951: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b962: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b96d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b98a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b995: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b9a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b9b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b9bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b9c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b9c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b8ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b8df: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b8f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b8fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b900: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b905: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a4db: Unknown result type (might be due to invalid IL or missing references)
		//IL_28d4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_28d5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_28d65: Unknown result type (might be due to invalid IL or missing references)
		//IL_28d67: Unknown result type (might be due to invalid IL or missing references)
		//IL_28d6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_28d78: Unknown result type (might be due to invalid IL or missing references)
		//IL_28d93: Unknown result type (might be due to invalid IL or missing references)
		//IL_28de3: Unknown result type (might be due to invalid IL or missing references)
		//IL_28de8: Unknown result type (might be due to invalid IL or missing references)
		//IL_28df3: Unknown result type (might be due to invalid IL or missing references)
		//IL_28dfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_28e03: Unknown result type (might be due to invalid IL or missing references)
		//IL_290da: Unknown result type (might be due to invalid IL or missing references)
		//IL_290df: Unknown result type (might be due to invalid IL or missing references)
		//IL_28e8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_28e93: Unknown result type (might be due to invalid IL or missing references)
		//IL_28e99: Unknown result type (might be due to invalid IL or missing references)
		//IL_28e9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2be38: Unknown result type (might be due to invalid IL or missing references)
		//IL_2be46: Unknown result type (might be due to invalid IL or missing references)
		//IL_2be4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2be57: Unknown result type (might be due to invalid IL or missing references)
		//IL_2be5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2be67: Unknown result type (might be due to invalid IL or missing references)
		//IL_2be6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2be85: Unknown result type (might be due to invalid IL or missing references)
		//IL_2be8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2beb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2beb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2beca: Unknown result type (might be due to invalid IL or missing references)
		//IL_2becf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bed4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bedf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bef0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bef6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bef8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf02: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf07: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bbfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc02: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc07: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc13: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc19: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc23: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc28: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc33: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ba20: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ba36: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ba3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ba5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ba5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ba71: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ba76: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b9df: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b9f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b9fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b31c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b32a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b334: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b339: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b346: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b351: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b35b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b366: Unknown result type (might be due to invalid IL or missing references)
		//IL_29fdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_29ffc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a002: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a020: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a025: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a033: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a043: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a04f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a059: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a05e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a063: Unknown result type (might be due to invalid IL or missing references)
		//IL_2953e: Unknown result type (might be due to invalid IL or missing references)
		//IL_29544: Unknown result type (might be due to invalid IL or missing references)
		//IL_2954e: Unknown result type (might be due to invalid IL or missing references)
		//IL_29553: Unknown result type (might be due to invalid IL or missing references)
		//IL_28eb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_28ed2: Unknown result type (might be due to invalid IL or missing references)
		//IL_28ed7: Unknown result type (might be due to invalid IL or missing references)
		//IL_28ede: Unknown result type (might be due to invalid IL or missing references)
		//IL_28ee3: Unknown result type (might be due to invalid IL or missing references)
		//IL_28ee9: Unknown result type (might be due to invalid IL or missing references)
		//IL_28eee: Unknown result type (might be due to invalid IL or missing references)
		//IL_28ef4: Unknown result type (might be due to invalid IL or missing references)
		//IL_28efa: Unknown result type (might be due to invalid IL or missing references)
		//IL_28eff: Unknown result type (might be due to invalid IL or missing references)
		//IL_28f0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_28f17: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf70: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf81: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf91: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bfaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bfb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bfd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bfda: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bfe5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bfea: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bfef: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bffa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c00b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c011: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c013: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c01d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c022: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c059: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a4f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a51d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a523: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a541: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a546: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a554: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a564: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a570: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a57a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a57f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a584: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a5a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a5b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a5b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_302c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fd18: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eeb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ea9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eaa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eab9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eabe: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eac3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eaca: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eacf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ead4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eada: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eae5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eafc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eb07: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eb1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eb29: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eb40: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eb4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eb68: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c3b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c07b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c080: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c086: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c08c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c096: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c09b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c0ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c0d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c103: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c10d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c112: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc77: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b612: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b61d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b62f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b63a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b57a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b407: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b40c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b413: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a0a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a0cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a0d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a0ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a0f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a102: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a112: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a11e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a128: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a12d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a132: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a167: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a171: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a176: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a191: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a1b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a1b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a1d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a1da: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a1e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a1f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a204: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a20e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a213: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a218: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a23b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a245: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a24a: Unknown result type (might be due to invalid IL or missing references)
		//IL_296cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_29169: Unknown result type (might be due to invalid IL or missing references)
		//IL_2916e: Unknown result type (might be due to invalid IL or missing references)
		//IL_29188: Unknown result type (might be due to invalid IL or missing references)
		//IL_291b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_291b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_291d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_28f39: Unknown result type (might be due to invalid IL or missing references)
		//IL_28f44: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f0eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f0f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ebdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ebed: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ebfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eb97: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eba7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ebb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c3d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c3dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c21d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c237: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c23d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c287: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c28c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c29a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c2b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c2ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c2bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bcd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bcdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bce4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bce9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bcf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bcf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bd00: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bd05: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc90: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b59e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b5a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b453: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b466: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a647: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a66a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a670: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a68e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a693: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a6a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a6a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a6b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a6ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a6bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a6c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a6d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a6d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a6dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a711: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a71b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a720: Unknown result type (might be due to invalid IL or missing references)
		//IL_29918: Unknown result type (might be due to invalid IL or missing references)
		//IL_2992d: Unknown result type (might be due to invalid IL or missing references)
		//IL_29933: Unknown result type (might be due to invalid IL or missing references)
		//IL_29604: Unknown result type (might be due to invalid IL or missing references)
		//IL_2960b: Unknown result type (might be due to invalid IL or missing references)
		//IL_29610: Unknown result type (might be due to invalid IL or missing references)
		//IL_29615: Unknown result type (might be due to invalid IL or missing references)
		//IL_2961f: Unknown result type (might be due to invalid IL or missing references)
		//IL_29624: Unknown result type (might be due to invalid IL or missing references)
		//IL_29629: Unknown result type (might be due to invalid IL or missing references)
		//IL_2963b: Unknown result type (might be due to invalid IL or missing references)
		//IL_29655: Unknown result type (might be due to invalid IL or missing references)
		//IL_2965a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2965f: Unknown result type (might be due to invalid IL or missing references)
		//IL_29665: Unknown result type (might be due to invalid IL or missing references)
		//IL_2966c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2967e: Unknown result type (might be due to invalid IL or missing references)
		//IL_28f6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_28f87: Unknown result type (might be due to invalid IL or missing references)
		//IL_28fb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_28fb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_28fc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_28fc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_28fd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_28fec: Unknown result type (might be due to invalid IL or missing references)
		//IL_28ff1: Unknown result type (might be due to invalid IL or missing references)
		//IL_30d4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_30504: Unknown result type (might be due to invalid IL or missing references)
		//IL_30509: Unknown result type (might be due to invalid IL or missing references)
		//IL_3050e: Unknown result type (might be due to invalid IL or missing references)
		//IL_30515: Unknown result type (might be due to invalid IL or missing references)
		//IL_30526: Unknown result type (might be due to invalid IL or missing references)
		//IL_30537: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fde0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fde5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fdea: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fdf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fdfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fe49: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fe5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fe66: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fe70: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fe75: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fe7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fe80: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fe93: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fe9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fea7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2feac: Unknown result type (might be due to invalid IL or missing references)
		//IL_2feb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2feb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2febd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fec8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fecd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fede: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fee9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ff00: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ff17: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ff2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ff41: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eed8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eedd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bd2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b495: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b4a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b4ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a2b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a2d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a2dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a2fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a300: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a30e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a314: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a321: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a327: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a329: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a335: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a33f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a344: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a349: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a37e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a388: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a38d: Unknown result type (might be due to invalid IL or missing references)
		//IL_29726: Unknown result type (might be due to invalid IL or missing references)
		//IL_2972c: Unknown result type (might be due to invalid IL or missing references)
		//IL_29733: Unknown result type (might be due to invalid IL or missing references)
		//IL_29738: Unknown result type (might be due to invalid IL or missing references)
		//IL_2973d: Unknown result type (might be due to invalid IL or missing references)
		//IL_29747: Unknown result type (might be due to invalid IL or missing references)
		//IL_2974d: Unknown result type (might be due to invalid IL or missing references)
		//IL_29752: Unknown result type (might be due to invalid IL or missing references)
		//IL_29757: Unknown result type (might be due to invalid IL or missing references)
		//IL_29765: Unknown result type (might be due to invalid IL or missing references)
		//IL_2976a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2976f: Unknown result type (might be due to invalid IL or missing references)
		//IL_29775: Unknown result type (might be due to invalid IL or missing references)
		//IL_2977c: Unknown result type (might be due to invalid IL or missing references)
		//IL_29789: Unknown result type (might be due to invalid IL or missing references)
		//IL_2978f: Unknown result type (might be due to invalid IL or missing references)
		//IL_297b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_297c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_297d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_297d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_297da: Unknown result type (might be due to invalid IL or missing references)
		//IL_297e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_297ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_297f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_29815: Unknown result type (might be due to invalid IL or missing references)
		//IL_2981b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2981d: Unknown result type (might be due to invalid IL or missing references)
		//IL_29822: Unknown result type (might be due to invalid IL or missing references)
		//IL_29843: Unknown result type (might be due to invalid IL or missing references)
		//IL_29862: Unknown result type (might be due to invalid IL or missing references)
		//IL_29868: Unknown result type (might be due to invalid IL or missing references)
		//IL_2986a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2986f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2988c: Unknown result type (might be due to invalid IL or missing references)
		//IL_29897: Unknown result type (might be due to invalid IL or missing references)
		//IL_2989c: Unknown result type (might be due to invalid IL or missing references)
		//IL_298a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_290b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_290b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_303a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_303b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_303b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_303bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_303c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_303cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_303d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_303d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_303db: Unknown result type (might be due to invalid IL or missing references)
		//IL_303e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_30400: Unknown result type (might be due to invalid IL or missing references)
		//IL_30406: Unknown result type (might be due to invalid IL or missing references)
		//IL_3041e: Unknown result type (might be due to invalid IL or missing references)
		//IL_30424: Unknown result type (might be due to invalid IL or missing references)
		//IL_30430: Unknown result type (might be due to invalid IL or missing references)
		//IL_30435: Unknown result type (might be due to invalid IL or missing references)
		//IL_3043b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3046a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eef5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c5a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c5ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c5b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c5b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c448: Unknown result type (might be due to invalid IL or missing references)
		//IL_29954: Unknown result type (might be due to invalid IL or missing references)
		//IL_29959: Unknown result type (might be due to invalid IL or missing references)
		//IL_2995f: Unknown result type (might be due to invalid IL or missing references)
		//IL_29966: Unknown result type (might be due to invalid IL or missing references)
		//IL_29973: Unknown result type (might be due to invalid IL or missing references)
		//IL_29979: Unknown result type (might be due to invalid IL or missing references)
		//IL_299a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_299a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_298d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_298e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_298ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_298f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_30daa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ff7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ff84: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ff96: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ff9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f15e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e9b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e9c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e9cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e9d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca19: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca23: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca28: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca34: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca40: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca46: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca50: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca55: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca72: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca78: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2caa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cab0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2caba: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cabf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cae1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2caec: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c5d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c5e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c5c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c5cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c467: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c474: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a3d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a3f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a3f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a416: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a41b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a429: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a42f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a43c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a442: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a444: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a450: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a45a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a45f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a464: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a499: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a4a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a4a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_30efe: Unknown result type (might be due to invalid IL or missing references)
		//IL_30dc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_30dce: Unknown result type (might be due to invalid IL or missing references)
		//IL_30dd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_30dd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_305e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_305f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_305fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ef15: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ef1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ed1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ed2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ed40: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ecd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ece9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ecfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ea0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ea12: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb27: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb31: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb36: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb47: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb57: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb62: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb77: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cba9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cbc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cbd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cbd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cbdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cbe1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cbe7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cbf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cbf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc13: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc19: Unknown result type (might be due to invalid IL or missing references)
		//IL_316a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_30df3: Unknown result type (might be due to invalid IL or missing references)
		//IL_30e04: Unknown result type (might be due to invalid IL or missing references)
		//IL_30e09: Unknown result type (might be due to invalid IL or missing references)
		//IL_30e15: Unknown result type (might be due to invalid IL or missing references)
		//IL_30e1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_30e25: Unknown result type (might be due to invalid IL or missing references)
		//IL_30e2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_30de6: Unknown result type (might be due to invalid IL or missing references)
		//IL_30deb: Unknown result type (might be due to invalid IL or missing references)
		//IL_30b47: Unknown result type (might be due to invalid IL or missing references)
		//IL_3014a: Unknown result type (might be due to invalid IL or missing references)
		//IL_30150: Unknown result type (might be due to invalid IL or missing references)
		//IL_30156: Unknown result type (might be due to invalid IL or missing references)
		//IL_3015c: Unknown result type (might be due to invalid IL or missing references)
		//IL_30166: Unknown result type (might be due to invalid IL or missing references)
		//IL_3016b: Unknown result type (might be due to invalid IL or missing references)
		//IL_30170: Unknown result type (might be due to invalid IL or missing references)
		//IL_30176: Unknown result type (might be due to invalid IL or missing references)
		//IL_3017b: Unknown result type (might be due to invalid IL or missing references)
		//IL_30186: Unknown result type (might be due to invalid IL or missing references)
		//IL_301a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_301a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_301be: Unknown result type (might be due to invalid IL or missing references)
		//IL_301c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_301cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_301d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_301db: Unknown result type (might be due to invalid IL or missing references)
		//IL_3020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ffae: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ffb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ffc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ffc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ffcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ffd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f185: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f18a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2efb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2efd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2efdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f05d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f071: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f07f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f085: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f087: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f091: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f096: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f09b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ef4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ef50: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ea26: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc54: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc63: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc69: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc74: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc79: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc84: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cca4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cca9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cccb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ccd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ccf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ccfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cd02: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cd08: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cd0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cd14: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cd1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cd23: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cd40: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cd46: Unknown result type (might be due to invalid IL or missing references)
		//IL_31796: Unknown result type (might be due to invalid IL or missing references)
		//IL_3125b: Unknown result type (might be due to invalid IL or missing references)
		//IL_31261: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ffe2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ffea: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f84c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f473: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f4a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f4a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f4eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f4fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f4ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f504: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f56e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f579: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f59a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f59f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f620: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ec63: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ec6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_312fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_31290: Unknown result type (might be due to invalid IL or missing references)
		//IL_31296: Unknown result type (might be due to invalid IL or missing references)
		//IL_310d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_310da: Unknown result type (might be due to invalid IL or missing references)
		//IL_30f54: Unknown result type (might be due to invalid IL or missing references)
		//IL_30f7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_30f85: Unknown result type (might be due to invalid IL or missing references)
		//IL_30f87: Unknown result type (might be due to invalid IL or missing references)
		//IL_30f8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_30f93: Unknown result type (might be due to invalid IL or missing references)
		//IL_30f98: Unknown result type (might be due to invalid IL or missing references)
		//IL_30fa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_30fa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_30fad: Unknown result type (might be due to invalid IL or missing references)
		//IL_30621: Unknown result type (might be due to invalid IL or missing references)
		//IL_30636: Unknown result type (might be due to invalid IL or missing references)
		//IL_3063c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3063e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3064c: Unknown result type (might be due to invalid IL or missing references)
		//IL_30652: Unknown result type (might be due to invalid IL or missing references)
		//IL_30654: Unknown result type (might be due to invalid IL or missing references)
		//IL_30659: Unknown result type (might be due to invalid IL or missing references)
		//IL_30665: Unknown result type (might be due to invalid IL or missing references)
		//IL_30680: Unknown result type (might be due to invalid IL or missing references)
		//IL_306d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_306d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_306e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_306eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_306f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f874: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f85a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f66b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f698: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f69e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f6e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f6f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f6f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f6fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f766: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f771: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f792: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f797: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f394: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f3a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f3ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f3b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f3b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f282: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f291: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f296: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f29b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f2a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f2ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f30e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f313: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f318: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f31d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ec86: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ec91: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ea64: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ea7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ea94: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ea99: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c65f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c66a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c674: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c67f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a8c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a8dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a8e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a8ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a904: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a917: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a91c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a92c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a938: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a93d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3118a: Unknown result type (might be due to invalid IL or missing references)
		//IL_31109: Unknown result type (might be due to invalid IL or missing references)
		//IL_3110f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3100d: Unknown result type (might be due to invalid IL or missing references)
		//IL_31017: Unknown result type (might be due to invalid IL or missing references)
		//IL_3101c: Unknown result type (might be due to invalid IL or missing references)
		//IL_30a3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_30a4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f879: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f87e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f885: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c70a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c715: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c729: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c72e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c733: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c739: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c73e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c743: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a966: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a975: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a97b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a97d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a982: Unknown result type (might be due to invalid IL or missing references)
		//IL_30a6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_30730: Unknown result type (might be due to invalid IL or missing references)
		//IL_30745: Unknown result type (might be due to invalid IL or missing references)
		//IL_3074b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3074d: Unknown result type (might be due to invalid IL or missing references)
		//IL_30752: Unknown result type (might be due to invalid IL or missing references)
		//IL_3075e: Unknown result type (might be due to invalid IL or missing references)
		//IL_30779: Unknown result type (might be due to invalid IL or missing references)
		//IL_307c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_307ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_307d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_307e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_307e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f8a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f893: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a9ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a9bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a9c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a9c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a9c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aa31: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aa3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aa40: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aa63: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aa68: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aa6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aa73: Unknown result type (might be due to invalid IL or missing references)
		//IL_3151c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3155c: Unknown result type (might be due to invalid IL or missing references)
		//IL_31572: Unknown result type (might be due to invalid IL or missing references)
		//IL_31582: Unknown result type (might be due to invalid IL or missing references)
		//IL_31587: Unknown result type (might be due to invalid IL or missing references)
		//IL_3158c: Unknown result type (might be due to invalid IL or missing references)
		//IL_315aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_315af: Unknown result type (might be due to invalid IL or missing references)
		//IL_315b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_315ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_315c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_315c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_315d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_315dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_30a83: Unknown result type (might be due to invalid IL or missing references)
		//IL_30a90: Unknown result type (might be due to invalid IL or missing references)
		//IL_30846: Unknown result type (might be due to invalid IL or missing references)
		//IL_3084b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f8ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f8b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eda5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2edb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c756: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c75b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c761: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c766: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c772: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c77c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c781: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c787: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c78d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c793: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c798: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c7b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a9f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aa00: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aa06: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aa08: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aa0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_30c46: Unknown result type (might be due to invalid IL or missing references)
		//IL_30c5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_30c62: Unknown result type (might be due to invalid IL or missing references)
		//IL_30c7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_30c80: Unknown result type (might be due to invalid IL or missing references)
		//IL_30ca3: Unknown result type (might be due to invalid IL or missing references)
		//IL_30ca9: Unknown result type (might be due to invalid IL or missing references)
		//IL_30cab: Unknown result type (might be due to invalid IL or missing references)
		//IL_30cb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_30cba: Unknown result type (might be due to invalid IL or missing references)
		//IL_30cbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_30cdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_30ce2: Unknown result type (might be due to invalid IL or missing references)
		//IL_30ce7: Unknown result type (might be due to invalid IL or missing references)
		//IL_30a9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_30aac: Unknown result type (might be due to invalid IL or missing references)
		//IL_2edc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2edd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf08: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf13: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf18: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf24: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c828: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c82d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c843: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c84e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c7d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c7de: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c7ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c809: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c80e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c813: Unknown result type (might be due to invalid IL or missing references)
		//IL_31829: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf65: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf49: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf54: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ab66: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ab77: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ab81: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ab86: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ab8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2abae: Unknown result type (might be due to invalid IL or missing references)
		//IL_2abb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2abbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_308a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_308aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f8d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f8f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f8fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cfa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cfaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf90: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2faba: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fabf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fada: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fae4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fae9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f9a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f9e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f9eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f9f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fa28: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fb92: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fbc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fbc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fc0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fc1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fc1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fc24: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cfd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cfe3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cfe8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cfca: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cfd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d07d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d1fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d451: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e02b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e036: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e03b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e040: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e055: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e06a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d3ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d412: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d418: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d64e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d66f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d675: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e534: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e53f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e544: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dc87: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dc9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e5b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e850: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e855: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e861: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e866: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e872: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e62a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e13d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e142: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e487: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e714: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e71f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e729: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e734: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e739: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e73e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e748: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e74d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e76a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e770: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e7b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e7bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e7c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e1cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e247: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e272: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e291: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e297: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e2dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e2e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e2eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2de84: Unknown result type (might be due to invalid IL or missing references)
		Vector2 val4;
		Rectangle hitbox;
		if (aiStyle == 1)
		{
			AI_001();
		}
		else if (aiStyle == 2)
		{
			if (Main.windPhysics)
			{
				velocity.X += Main.windSpeedCurrent * Main.windPhysicsStrength;
			}
			if (type == 93 && Main.rand.Next(5) == 0)
			{
				int num = Dust.NewDust(base.position, width, height, 57, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100);
				Main.dust[num].noGravity = true;
				Main.dust[num].fadeIn = 1f;
				Main.dust[num].velocity.X *= 0.3f;
				Main.dust[num].velocity.Y *= 0.3f;
			}
			if (type == 968)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					Vector2 vector = Main.player[owner].velocity;
					float num185 = Utils.Remap(((Vector2)(ref vector)).Length(), 0f, 3f, 0f, 0.5f);
					Vector2 vector90 = base.Center + new Vector2(-8f, -8f) + velocity.SafeNormalize(Vector2.Zero) * 25f;
					for (int i = 0; i < 8; i++)
					{
						Dust dust = Main.dust[Dust.NewDust(vector90, 16, 16, 31, velocity.X, velocity.Y, 50, default(Color), 0.75f + Main.rand.NextFloat() * 0.3f)];
						dust.velocity = (velocity * (0.2f + num185)).RotatedByRandom(0.699999988079071) + vector * 0.25f;
						Dust dust21 = dust;
						Dust dust212 = dust21;
						dust212.velocity *= 0f + Main.rand.NextFloat() * 1f;
						dust.fadeIn = 0.1f;
						dust21 = dust;
						dust212 = dust21;
						dust212.position -= dust.velocity;
						dust.noGravity = true;
					}
				}
				alpha = Math.Max(0, alpha - 50);
				frame = (int)this.ai[1];
			}
			if (type == 304 && localAI[0] == 0f)
			{
				localAI[0] += 1f;
				alpha = 0;
			}
			if (type == 510)
			{
				rotation += Math.Abs(velocity.X) * 0.04f * (float)direction;
			}
			else
			{
				rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.03f * (float)direction;
			}
			if (type == 909)
			{
				int num299 = 38;
				this.ai[0] += 1f;
				if (this.ai[0] >= (float)num299)
				{
					velocity.Y += 0.4f;
					velocity.X *= 0.97f;
				}
				if (Main.netMode != 1 && this.ai[1] == 0f)
				{
					this.ai[1] = 1 + Main.rand.Next(6);
					netUpdate = true;
				}
				if (this.ai[1] > 0f)
				{
					frame = (int)this.ai[1] - 1;
				}
			}
			else if (type == 162)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(in SoundID.Item14, base.position);
				}
				this.ai[0] += 1f;
				if (this.ai[0] >= 18f)
				{
					velocity.Y += 0.28f;
					velocity.X *= 0.99f;
				}
				if (this.ai[0] > 2f)
				{
					alpha = 0;
					if (this.ai[0] == 3f)
					{
						for (int j = 0; j < 10; j++)
						{
							int num410 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust13 = Main.dust[num410];
							Dust dust212 = dust13;
							dust212.velocity *= 0.5f;
							dust13 = Main.dust[num410];
							dust212 = dust13;
							dust212.velocity += velocity * 0.1f;
						}
						for (int k = 0; k < 5; k++)
						{
							int num521 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
							Main.dust[num521].noGravity = true;
							Dust dust12 = Main.dust[num521];
							Dust dust212 = dust12;
							dust212.velocity *= 3f;
							dust12 = Main.dust[num521];
							dust212 = dust12;
							dust212.velocity += velocity * 0.2f;
							num521 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100);
							dust12 = Main.dust[num521];
							dust212 = dust12;
							dust212.velocity *= 2f;
							dust12 = Main.dust[num521];
							dust212 = dust12;
							dust212.velocity += velocity * 0.3f;
						}
						for (int l = 0; l < 1; l++)
						{
							Vector2 val3 = new Vector2(base.position.X - 10f, base.position.Y - 10f);
							val4 = default(Vector2);
							int num632 = Gore.NewGore(val3, val4, Main.rand.Next(61, 64));
							Gore gore = Main.gore[num632];
							Gore gore8 = gore;
							gore8.position += velocity * 1.25f;
							Main.gore[num632].scale = 1.5f;
							gore = Main.gore[num632];
							gore8 = gore;
							gore8.velocity += velocity * 0.5f;
							gore = Main.gore[num632];
							gore8 = gore;
							gore8.velocity *= 0.02f;
						}
					}
				}
			}
			else if (type == 281)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(in SoundID.Item14, base.position);
				}
				this.ai[0] += 1f;
				if (this.ai[0] >= 18f)
				{
					velocity.Y += 0.28f;
					velocity.X *= 0.99f;
				}
				if (this.ai[0] > 2f)
				{
					alpha = 0;
					if (this.ai[0] == 3f)
					{
						for (int m = 0; m < 10; m++)
						{
							int num743 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust15 = Main.dust[num743];
							Dust dust212 = dust15;
							dust212.velocity *= 0.5f;
							dust15 = Main.dust[num743];
							dust212 = dust15;
							dust212.velocity += velocity * 0.1f;
						}
						for (int n = 0; n < 5; n++)
						{
							int num854 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
							Main.dust[num854].noGravity = true;
							Dust dust14 = Main.dust[num854];
							Dust dust212 = dust14;
							dust212.velocity *= 3f;
							dust14 = Main.dust[num854];
							dust212 = dust14;
							dust212.velocity += velocity * 0.2f;
							num854 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100);
							dust14 = Main.dust[num854];
							dust212 = dust14;
							dust212.velocity *= 2f;
							dust14 = Main.dust[num854];
							dust212 = dust14;
							dust212.velocity += velocity * 0.3f;
						}
						for (int num965 = 0; num965 < 1; num965++)
						{
							Vector2 val5 = new Vector2(base.position.X - 10f, base.position.Y - 10f);
							val4 = default(Vector2);
							int num2 = Gore.NewGore(val5, val4, Main.rand.Next(61, 64));
							Gore gore2 = Main.gore[num2];
							Gore gore8 = gore2;
							gore8.position += velocity * 1.25f;
							Main.gore[num2].scale = 1.5f;
							gore2 = Main.gore[num2];
							gore8 = gore2;
							gore8.velocity += velocity * 0.5f;
							gore2 = Main.gore[num2];
							gore8 = gore2;
							gore8.velocity *= 0.02f;
						}
					}
				}
			}
			else if (type == 240)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(in SoundID.Item14, base.position);
				}
				this.ai[0] += 1f;
				if (this.ai[0] >= 16f)
				{
					velocity.Y += 0.18f;
					velocity.X *= 0.991f;
				}
				if (this.ai[0] > 2f)
				{
					alpha = 0;
					if (this.ai[0] == 3f)
					{
						for (int num86 = 0; num86 < 7; num86++)
						{
							int num97 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust17 = Main.dust[num97];
							Dust dust212 = dust17;
							dust212.velocity *= 0.5f;
							dust17 = Main.dust[num97];
							dust212 = dust17;
							dust212.velocity += velocity * 0.1f;
						}
						for (int num108 = 0; num108 < 3; num108++)
						{
							int num119 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
							Main.dust[num119].noGravity = true;
							Dust dust16 = Main.dust[num119];
							Dust dust212 = dust16;
							dust212.velocity *= 3f;
							dust16 = Main.dust[num119];
							dust212 = dust16;
							dust212.velocity += velocity * 0.2f;
							num119 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100);
							dust16 = Main.dust[num119];
							dust212 = dust16;
							dust212.velocity *= 2f;
							dust16 = Main.dust[num119];
							dust212 = dust16;
							dust212.velocity += velocity * 0.3f;
						}
						for (int num130 = 0; num130 < 1; num130++)
						{
							Vector2 val6 = new Vector2(base.position.X - 10f, base.position.Y - 10f);
							val4 = default(Vector2);
							int num141 = Gore.NewGore(val6, val4, Main.rand.Next(61, 64));
							Gore gore3 = Main.gore[num141];
							Gore gore8 = gore3;
							gore8.position += velocity * 1.25f;
							Main.gore[num141].scale = 1.25f;
							gore3 = Main.gore[num141];
							gore8 = gore3;
							gore8.velocity += velocity * 0.5f;
							gore3 = Main.gore[num141];
							gore8 = gore3;
							gore8.velocity *= 0.02f;
						}
					}
				}
			}
			else if (type == 497)
			{
				int num152 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 27, velocity.X, velocity.Y, 100, default(Color), 1.2f);
				Main.dust[num152].position = (Main.dust[num152].position + base.Center) / 2f;
				Main.dust[num152].noGravity = true;
				Dust dust18 = Main.dust[num152];
				Dust dust212 = dust18;
				dust212.velocity *= 0.3f;
				dust18 = Main.dust[num152];
				dust212 = dust18;
				dust212.velocity -= velocity * 0.1f;
				this.ai[0] += 1f;
				if (this.ai[0] >= 30f)
				{
					velocity.X *= 0.99f;
					velocity.Y += 0.5f;
				}
				else
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
			}
			else if (type == 861)
			{
				if (Main.myPlayer == owner)
				{
					localAI[0]++;
					if (localAI[0] > 30f)
					{
						localAI[0] = 30f;
					}
					Player player = Main.player[owner];
					for (int num163 = 0; num163 < 255; num163++)
					{
						Player player5 = Main.player[num163];
						if (player5 != null && player5.active && !player5.dead && (player5.whoAmI != player.whoAmI || !(localAI[0] < 30f)) && Colliding(base.Hitbox, player5.Hitbox))
						{
							Kill();
							break;
						}
					}
				}
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.95f;
				}
				else
				{
					velocity.X *= 0.995f;
				}
				if (Math.Abs(velocity.X) < 0.5f)
				{
					velocity.X = 0f;
				}
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					Kill();
				}
				velocity.Y += 0.1f;
				if (this.ai[1] == 1f)
				{
					frame = (frameCounter = 0);
					rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.03f * (float)direction;
				}
				else
				{
					if (frame == 0)
					{
						frame = 1;
					}
					frameCounter++;
					if (frameCounter > 4)
					{
						frameCounter = 0;
						frame++;
						if (frame >= Main.projFrames[type])
						{
							frame = 1;
						}
					}
					rotation = velocity.ToRotation() + (float)Math.PI / 4f;
					spriteDirection = ((!(velocity.X < 0f)) ? 1 : (-1));
					if (spriteDirection == -1)
					{
						rotation += (float)Math.PI / 2f;
					}
				}
			}
			else if (type == 249)
			{
				this.ai[0] += 1f;
				if (this.ai[0] >= 0f)
				{
					velocity.Y += 0.25f;
				}
			}
			else if (type == 347)
			{
				this.ai[0] += 1f;
				if (this.ai[0] >= 5f)
				{
					velocity.Y += 0.25f;
				}
			}
			else if (type == 501)
			{
				this.ai[0] += 1f;
				if (this.ai[0] >= 18f)
				{
					velocity.X *= 0.995f;
					velocity.Y += 0.2f;
				}
			}
			else if (type == 504 || type == 954 || type == 979)
			{
				alpha = 255;
				this.ai[0] += 1f;
				if (this.ai[0] > 3f)
				{
					int num174 = 100;
					if (this.ai[0] > 20f)
					{
						int num186 = 40;
						float num197 = this.ai[0] - 20f;
						num174 = (int)(100f * (1f - num197 / (float)num186));
						if (num197 >= (float)num186)
						{
							Kill();
						}
					}
					if (this.ai[0] <= 10f)
					{
						num174 = (int)this.ai[0] * 10;
					}
					if (Main.rand.Next(100) < num174)
					{
						int num208 = ((type != 979) ? Dust.NewDust(base.position, width, height, 6, 0f, 0f, 150) : Dust.NewDust(base.position, width, height, 135, 0f, 0f, 150));
						Main.dust[num208].position = (Main.dust[num208].position + base.Center) / 2f;
						Main.dust[num208].noGravity = true;
						Dust dust19 = Main.dust[num208];
						Dust dust212 = dust19;
						dust212.velocity *= 2f;
						dust19 = Main.dust[num208];
						dust212 = dust19;
						dust212.scale *= 1.6f;
						dust19 = Main.dust[num208];
						dust212 = dust19;
						dust212.velocity += velocity;
					}
				}
				if (this.ai[0] >= 20f)
				{
					velocity.X *= 0.99f;
					velocity.Y += 0.1f;
				}
			}
			else if (type == 69 || type == 70 || type == 621)
			{
				this.ai[0] += 1f;
				if (this.ai[0] >= 10f)
				{
					velocity.Y += 0.25f;
					velocity.X *= 0.99f;
				}
			}
			else if (type == 166)
			{
				if (owner == Main.myPlayer && this.ai[1] == 1f)
				{
					for (int num218 = 0; num218 < 200; num218++)
					{
						if (Main.npc[num218].active && Main.npc[num218].townNPC && Colliding(base.Hitbox, Main.npc[num218].Hitbox))
						{
							Kill();
							return;
						}
					}
					if (Main.netMode == 1)
					{
						for (int num229 = 0; num229 < 255; num229++)
						{
							if (num229 != owner && Main.player[num229].active && !Main.player[owner].InOpposingTeam(Main.player[num229]) && Colliding(base.Hitbox, Main.player[num229].Hitbox))
							{
								Kill();
								return;
							}
						}
					}
				}
				this.ai[0] += 1f;
				if (this.ai[0] >= 20f)
				{
					velocity.Y += 0.3f;
					velocity.X *= 0.98f;
				}
			}
			else if (type == 300)
			{
				if (this.ai[0] == 0f)
				{
					SoundEngine.PlaySound(in SoundID.Item1, base.position);
				}
				this.ai[0] += 1f;
				if (this.ai[0] >= 60f)
				{
					velocity.Y += 0.2f;
					velocity.X *= 0.99f;
				}
			}
			else if (type == 306)
			{
				if (alpha <= 200)
				{
					for (int num242 = 0; num242 < 4; num242++)
					{
						float num255 = velocity.X / 4f * (float)num242;
						float num266 = velocity.Y / 4f * (float)num242;
						int num277 = Dust.NewDust(base.position, width, height, 184);
						Main.dust[num277].position.X = base.Center.X - num255;
						Main.dust[num277].position.Y = base.Center.Y - num266;
						Dust dust20 = Main.dust[num277];
						Dust dust212 = dust20;
						dust212.velocity *= 0f;
						Main.dust[num277].scale = 0.7f;
					}
				}
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 0.785f;
			}
			else if (type == 304)
			{
				this.ai[0] += 1f;
				if (this.ai[0] >= 30f)
				{
					alpha += 10;
					damage = (int)((double)damage * 0.9);
					knockBack = (int)((double)knockBack * 0.9);
					if (alpha >= 255)
					{
						active = false;
					}
				}
				if (this.ai[0] < 30f)
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
			}
			else if (type == 370 || type == 371 || type == 936)
			{
				this.ai[0] += 1f;
				if (this.ai[0] >= 15f)
				{
					velocity.Y += 0.3f;
					velocity.X *= 0.98f;
				}
			}
			else
			{
				int num288 = 20;
				if (type == 93)
				{
					num288 = 28 + Main.rand.Next(6);
				}
				this.ai[0] += 1f;
				if (this.ai[0] >= (float)num288)
				{
					if (type == 93)
					{
						this.ai[0] = 40f;
					}
					velocity.Y += 0.4f;
					velocity.X *= 0.97f;
				}
				else if (type == 48 || type == 54 || type == 93 || type == 520 || type == 599)
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
			if (type == 54 && Main.rand.Next(20) == 0)
			{
				Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 40, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.75f);
			}
		}
		else if (aiStyle == 3)
		{
			if (soundDelay == 0 && type != 383)
			{
				soundDelay = 8;
				SoundEngine.PlaySound(in SoundID.Item7, base.position);
			}
			if (type == 19)
			{
				for (int num300 = 0; num300 < 2; num300++)
				{
					int num311 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
					Main.dust[num311].noGravity = true;
					Main.dust[num311].velocity.X *= 0.3f;
					Main.dust[num311].velocity.Y *= 0.3f;
				}
			}
			else if (type == 1000)
			{
				if (Main.rand.Next(3) == 0)
				{
					switch (Main.rand.Next(3))
					{
					default:
					{
						int num1076 = Main.rand.Next(3);
						Dust dust170 = Main.dust[Dust.NewDust(base.position, width, height, num1076 switch
						{
							1 => 57, 
							2 => 58, 
							_ => 15, 
						}, velocity.X * 0.25f, velocity.Y * 0.25f, 150, default(Color), 0.7f)];
						Dust dust28 = dust170;
						Dust dust212 = dust28;
						dust212.velocity *= 0.5f;
						break;
					}
					case 1:
					{
						Dust dust172 = Main.dust[Dust.NewDust(base.position, width, height, 267, velocity.X, velocity.Y, 50, new Color(50, 50, 200), 1.1f)];
						dust172.fadeIn = 0.1f;
						dust172.velocity = velocity * 0.5f;
						dust172.noGravity = true;
						break;
					}
					case 2:
					{
						Dust dust171 = Main.dust[Dust.NewDust(base.position, width, height, 76, velocity.X * 0.15f, velocity.Y * 0.15f, 0, default(Color), 1.1f)];
						dust171.noGravity = true;
						Dust.NewDust(base.position, width, height, 15, velocity.X * 0.05f, velocity.Y * 0.05f, 150, default(Color), 0.6f);
						break;
					}
					}
				}
			}
			else if (type == 867)
			{
				if (Main.rand.Next(3) == 0)
				{
					int num332 = Dust.NewDust(base.position, width, height, 165, velocity.X, velocity.Y, 50);
					Dust dust30 = Main.dust[num332];
					Dust dust212 = dust30;
					dust212.velocity *= 0.5f;
					Main.dust[num332].noGravity = true;
				}
			}
			else if (type == 33)
			{
				if (Main.rand.Next(1) == 0)
				{
					int num343 = Dust.NewDust(base.position, width, height, 40, velocity.X * 0.25f, velocity.Y * 0.25f, 0, default(Color), 1.4f);
					Main.dust[num343].noGravity = true;
				}
			}
			else if (type == 320)
			{
				if (Main.rand.Next(3) == 0)
				{
					int num354 = Dust.NewDust(base.position, width, height, 5, velocity.X * 0.25f, velocity.Y * 0.25f, 0, default(Color), 1.1f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num354].scale = 0.9f;
						Dust dust31 = Main.dust[num354];
						Dust dust212 = dust31;
						dust212.velocity *= 0.2f;
					}
					else
					{
						Main.dust[num354].noGravity = true;
					}
				}
			}
			else if (type == 6)
			{
				if (Main.rand.Next(5) == 0)
				{
					int num1077 = Main.rand.Next(3);
					Dust.NewDust(base.position, width, height, num1077 switch
					{
						0 => 15, 
						1 => 57, 
						_ => 58, 
					}, velocity.X * 0.25f, velocity.Y * 0.25f, 150, default(Color), 0.7f);
				}
			}
			else if (type == 113 && Main.rand.Next(1) == 0)
			{
				int num375 = Dust.NewDust(base.position, width, height, 76, velocity.X * 0.15f, velocity.Y * 0.15f, 0, default(Color), 1.1f);
				Main.dust[num375].noGravity = true;
				Dust.NewDust(base.position, width, height, 15, velocity.X * 0.05f, velocity.Y * 0.05f, 150, default(Color), 0.6f);
			}
			if (this.ai[0] == 0f)
			{
				bool flag = true;
				int num386 = type;
				if (num386 == 866)
				{
					flag = false;
				}
				if (flag)
				{
					this.ai[1] += 1f;
				}
				if (type == 106 && this.ai[1] >= 45f)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				if (type == 320 || type == 383)
				{
					if (this.ai[1] >= 10f)
					{
						velocity.Y += 0.5f;
						if (type == 383 && velocity.Y < 0f)
						{
							velocity.Y += 0.35f;
						}
						velocity.X *= 0.95f;
						if (velocity.Y > 16f)
						{
							velocity.Y = 16f;
						}
						if (type == 383 && Vector2.Distance(base.Center, Main.player[owner].Center) > 800f)
						{
							this.ai[0] = 1f;
							netUpdate = true;
						}
					}
				}
				else if (type == 182)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num399 = Dust.NewDust(base.position, width, height, 57, 0f, 0f, 255, default(Color), 0.75f);
						Dust dust25 = Main.dust[num399];
						Dust dust212 = dust25;
						dust212.velocity *= 0.1f;
						Main.dust[num399].noGravity = true;
					}
					if (velocity.X > 0f)
					{
						spriteDirection = 1;
					}
					else if (velocity.X < 0f)
					{
						spriteDirection = -1;
					}
					float num411 = base.position.X;
					float num422 = base.position.Y;
					float num433 = 800f;
					bool flag12 = false;
					if (this.ai[1] > 10f && this.ai[1] < 360f)
					{
						for (int num444 = 0; num444 < 200; num444++)
						{
							if (Main.npc[num444].CanBeChasedBy(this))
							{
								float num455 = Main.npc[num444].position.X + (float)(Main.npc[num444].width / 2);
								float num466 = Main.npc[num444].position.Y + (float)(Main.npc[num444].height / 2);
								float num477 = Distance(Main.npc[num444].Center);
								if (num477 < num433 && Collision.CanHit(new Vector2(base.position.X + (float)(width / 2), base.position.Y + (float)(height / 2)), 1, 1, Main.npc[num444].position, Main.npc[num444].width, Main.npc[num444].height))
								{
									num433 = num477;
									num411 = num455;
									num422 = num466;
									flag12 = true;
								}
							}
						}
					}
					if (!flag12)
					{
						num411 = base.position.X + (float)(width / 2) + velocity.X * 100f;
						num422 = base.position.Y + (float)(height / 2) + velocity.Y * 100f;
						if (this.ai[1] >= 30f)
						{
							this.ai[0] = 1f;
							this.ai[1] = 0f;
							netUpdate = true;
						}
					}
					float num488 = 12f;
					float num499 = 0.25f;
					Vector2 vector101 = default(Vector2);
					((Vector2)(ref vector101))._002Ector(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num510 = num411 - vector101.X;
					float num522 = num422 - vector101.Y;
					float num533 = (float)Math.Sqrt(num510 * num510 + num522 * num522);
					float num544 = num533;
					num533 = num488 / num533;
					num510 *= num533;
					num522 *= num533;
					if (velocity.X < num510)
					{
						velocity.X += num499;
						if (velocity.X < 0f && num510 > 0f)
						{
							velocity.X += num499 * 2f;
						}
					}
					else if (velocity.X > num510)
					{
						velocity.X -= num499;
						if (velocity.X > 0f && num510 < 0f)
						{
							velocity.X -= num499 * 2f;
						}
					}
					if (velocity.Y < num522)
					{
						velocity.Y += num499;
						if (velocity.Y < 0f && num522 > 0f)
						{
							velocity.Y += num499 * 2f;
						}
					}
					else if (velocity.Y > num522)
					{
						velocity.Y -= num499;
						if (velocity.Y > 0f && num522 < 0f)
						{
							velocity.Y -= num499 * 2f;
						}
					}
				}
				else if (type == 866)
				{
					if (owner == Main.myPlayer && damage > 0)
					{
						float num555 = this.ai[1];
						if (localAI[0] >= 10f && localAI[0] <= 360f)
						{
							int num566 = FindTargetWithLineOfSight();
							this.ai[1] = num566;
						}
						else
						{
							this.ai[1] = -1f;
						}
						if (this.ai[1] != num555)
						{
							netUpdate = true;
						}
					}
					localAI[0] += 1f;
					int num577 = (int)this.ai[1];
					Vector2 vector112;
					if (Main.npc.IndexInRange(num577) && Main.npc[num577].CanBeChasedBy(this))
					{
						vector112 = Main.npc[num577].Center;
					}
					else
					{
						vector112 = base.Center + velocity * 100f;
						int num588 = 30;
						if (owner != Main.myPlayer)
						{
							num588 = 60;
						}
						if (localAI[0] >= (float)num588)
						{
							this.ai[0] = 1f;
							this.ai[1] = 0f;
							netUpdate = true;
						}
					}
					float num599 = 12f;
					float num610 = 0.25f;
					Vector2 vector123 = default(Vector2);
					((Vector2)(ref vector123))._002Ector(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num621 = vector112.X - vector123.X;
					float num633 = vector112.Y - vector123.Y;
					float num644 = (float)Math.Sqrt(num621 * num621 + num633 * num633);
					float num655 = num644;
					num644 = num599 / num644;
					num621 *= num644;
					num633 *= num644;
					if (velocity.X < num621)
					{
						velocity.X += num610;
						if (velocity.X < 0f && num621 > 0f)
						{
							velocity.X += num610 * 2f;
						}
					}
					else if (velocity.X > num621)
					{
						velocity.X -= num610;
						if (velocity.X > 0f && num621 < 0f)
						{
							velocity.X -= num610 * 2f;
						}
					}
					if (velocity.Y < num633)
					{
						velocity.Y += num610;
						if (velocity.Y < 0f && num633 > 0f)
						{
							velocity.Y += num610 * 2f;
						}
					}
					else if (velocity.Y > num633)
					{
						velocity.Y -= num610;
						if (velocity.Y > 0f && num633 < 0f)
						{
							velocity.Y -= num610 * 2f;
						}
					}
				}
				else if (type == 301)
				{
					if (this.ai[1] >= 20f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						velocity = Vector2.Zero;
						netUpdate = true;
					}
				}
				else if (this.ai[1] >= 30f)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
			}
			else
			{
				tileCollide = false;
				float num666 = 9f;
				float num677 = 0.4f;
				if (type == 1000)
				{
					num666 = 9.5f;
				}
				if (type == 19)
				{
					num666 = 20f;
					num677 = 1.5f;
				}
				else if (type == 33)
				{
					num666 = 18f;
					num677 = 1.2f;
				}
				else if (type == 182)
				{
					num666 = 16f;
					num677 = 1.2f;
				}
				else if (type == 866)
				{
					num666 = 16f;
					num677 = 1.2f;
				}
				else if (type == 106)
				{
					num666 = 16f;
					num677 = 1.2f;
				}
				else if (type == 272)
				{
					num666 = 20f;
					num677 = 1.5f;
				}
				else if (type == 333)
				{
					num666 = 12f;
					num677 = 0.6f;
				}
				else if (type == 301)
				{
					num666 = 15f;
					num677 = 3f;
				}
				else if (type == 320)
				{
					num666 = 15f;
					num677 = 3f;
				}
				else if (type == 383)
				{
					num666 = 16f;
					num677 = 4f;
				}
				Vector2 vector134 = default(Vector2);
				((Vector2)(ref vector134))._002Ector(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num688 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector134.X;
				float num699 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector134.Y;
				float num710 = (float)Math.Sqrt(num688 * num688 + num699 * num699);
				if (num710 > 3000f)
				{
					Kill();
				}
				num710 = num666 / num710;
				num688 *= num710;
				num699 *= num710;
				if (type == 383)
				{
					Vector2 vector145 = new Vector2(num688, num699) - velocity;
					if (vector145 != Vector2.Zero)
					{
						Vector2 vector156 = vector145;
						((Vector2)(ref vector156)).Normalize();
						velocity += vector156 * Math.Min(num677, ((Vector2)(ref vector145)).Length());
					}
				}
				else
				{
					if (velocity.X < num688)
					{
						velocity.X += num677;
						if (velocity.X < 0f && num688 > 0f)
						{
							velocity.X += num677;
						}
					}
					else if (velocity.X > num688)
					{
						velocity.X -= num677;
						if (velocity.X > 0f && num688 < 0f)
						{
							velocity.X -= num677;
						}
					}
					if (velocity.Y < num699)
					{
						velocity.Y += num677;
						if (velocity.Y < 0f && num699 > 0f)
						{
							velocity.Y += num677;
						}
					}
					else if (velocity.Y > num699)
					{
						velocity.Y -= num677;
						if (velocity.Y > 0f && num699 < 0f)
						{
							velocity.Y -= num677;
						}
					}
				}
				if (Main.myPlayer == owner)
				{
					Rectangle rectangle = default(Rectangle);
					((Rectangle)(ref rectangle))._002Ector((int)base.position.X, (int)base.position.Y, width, height);
					Rectangle value = default(Rectangle);
					((Rectangle)(ref value))._002Ector((int)Main.player[owner].position.X, (int)Main.player[owner].position.Y, Main.player[owner].width, Main.player[owner].height);
					if (((Rectangle)(ref rectangle)).Intersects(value))
					{
						Kill();
					}
				}
			}
			if (type == 106)
			{
				rotation += 0.3f * (float)direction;
			}
			else if (type == 866)
			{
				rotation = velocity.ToRotation();
				if (Main.rand.Next(2) == 0)
				{
					int num721 = Dust.NewDust(base.position, width, height, 212);
					Dust dust22 = Main.dust[num721];
					Dust dust212 = dust22;
					dust212.velocity *= 0.1f;
					Main.dust[num721].noGravity = true;
				}
			}
			else if (type == 383)
			{
				if (this.ai[0] == 0f)
				{
					Vector2 v = velocity;
					v = v.SafeNormalize(Vector2.Zero);
					rotation = (float)Math.Atan2(v.Y, v.X) + 1.57f;
				}
				else
				{
					Vector2 v2 = base.Center - Main.player[owner].Center;
					v2 = v2.SafeNormalize(Vector2.Zero);
					rotation = (float)Math.Atan2(v2.Y, v2.X) + 1.57f;
				}
			}
			else if (type == 301)
			{
				if (this.ai[0] == 0f)
				{
					rotation = velocity.ToRotation() + (float)Math.PI / 4f;
					if (Main.rand.Next(2) == 0)
					{
						int num732 = Dust.NewDust(base.position, width, height, 57, velocity.X * 0.2f, velocity.Y * 0.2f, 200, default(Color), 1.2f);
						Dust dust24 = Main.dust[num732];
						Dust dust212 = dust24;
						dust212.velocity += velocity * 0.3f;
						dust24 = Main.dust[num732];
						dust212 = dust24;
						dust212.velocity *= 0.2f;
						Main.dust[num732].noGravity = true;
					}
					if (Main.rand.Next(3) == 0)
					{
						int num744 = Dust.NewDust(base.position, width, height, 43, 0f, 0f, 254, default(Color), 0.3f);
						Dust dust23 = Main.dust[num744];
						Dust dust212 = dust23;
						dust212.velocity += velocity * 0.5f;
						dust23 = Main.dust[num744];
						dust212 = dust23;
						dust212.velocity *= 0.5f;
						Main.dust[num744].noGravity = true;
					}
				}
				else
				{
					rotation += 0.4f * (float)direction;
				}
			}
			else
			{
				rotation += 0.4f * (float)direction;
			}
		}
		else if (aiStyle == 4)
		{
			if (Main.netMode != 2 && this.ai[1] == 0f && localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundStyle legacySoundStyle = SoundID.Item8;
				if (type == 494)
				{
					legacySoundStyle = SoundID.Item101;
				}
				SoundEngine.PlaySound(in legacySoundStyle, base.Center);
			}
			rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
			if (this.ai[0] == 0f)
			{
				if (type >= 150 && type <= 152 && this.ai[1] == 0f && alpha == 255 && Main.rand.Next(2) == 0)
				{
					type++;
					netUpdate = true;
				}
				alpha -= 50;
				if (type >= 150 && type <= 152)
				{
					alpha -= 25;
				}
				else if (type == 493 || type == 494)
				{
					alpha -= 50;
				}
				if (alpha > 0)
				{
					return;
				}
				alpha = 0;
				this.ai[0] = 1f;
				if (this.ai[1] == 0f)
				{
					this.ai[1] += 1f;
					base.position += velocity * 1f;
				}
				if (type == 7 && Main.myPlayer == owner)
				{
					int num755 = type;
					if (this.ai[1] >= 6f)
					{
						num755++;
					}
					int num766 = NewProjectile(GetProjectileSource_FromThis(), base.position.X + velocity.X + (float)(width / 2), base.position.Y + velocity.Y + (float)(height / 2), velocity.X, velocity.Y, num755, damage, knockBack, owner);
					Main.projectile[num766].damage = damage;
					Main.projectile[num766].ai[1] = this.ai[1] + 1f;
					NetMessage.SendData(27, -1, -1, null, num766);
				}
				else if (type == 494 && Main.myPlayer == owner)
				{
					int num777 = type;
					if (this.ai[1] >= (float)(7 + Main.rand.Next(2)))
					{
						num777--;
					}
					int num788 = damage;
					float num799 = knockBack;
					if (num777 == 493)
					{
						num788 = (int)((double)damage * 1.25);
						num799 = knockBack * 1.25f;
					}
					int number = NewProjectile(GetProjectileSource_FromThis(), base.position.X + velocity.X + (float)(width / 2), base.position.Y + velocity.Y + (float)(height / 2), velocity.X, velocity.Y, num777, num788, num799, owner, 0f, this.ai[1] + 1f);
					NetMessage.SendData(27, -1, -1, null, number);
				}
				else if ((type == 150 || type == 151) && Main.myPlayer == owner)
				{
					int num810 = type;
					if (type == 150)
					{
						num810 = 151;
					}
					else if (type == 151)
					{
						num810 = 150;
					}
					if (this.ai[1] >= 10f && type == 151)
					{
						num810 = 152;
					}
					int num821 = NewProjectile(GetProjectileSource_FromThis(), base.position.X + velocity.X + (float)(width / 2), base.position.Y + velocity.Y + (float)(height / 2), velocity.X, velocity.Y, num810, damage, knockBack, owner);
					Main.projectile[num821].damage = damage;
					Main.projectile[num821].ai[1] = this.ai[1] + 1f;
					NetMessage.SendData(27, -1, -1, null, num821);
				}
				return;
			}
			if (alpha < 170 && alpha + 5 >= 170)
			{
				if (type >= 150 && type <= 152)
				{
					for (int num832 = 0; num832 < 8; num832++)
					{
						int num843 = Dust.NewDust(base.position, width, height, 7, velocity.X * 0.025f, velocity.Y * 0.025f, 200, default(Color), 1.3f);
						Main.dust[num843].noGravity = true;
						Dust dust33 = Main.dust[num843];
						Dust dust212 = dust33;
						dust212.velocity *= 0.5f;
					}
				}
				else if (type == 493 || type == 494)
				{
					for (int num855 = 0; num855 < 8; num855++)
					{
						int num866 = Dust.NewDust(base.position, width, height, Main.rand.Next(68, 71), velocity.X * 0.025f, velocity.Y * 0.025f, 200, default(Color), 1.3f);
						Main.dust[num866].noGravity = true;
						Dust dust34 = Main.dust[num866];
						Dust dust212 = dust34;
						dust212.velocity *= 0.5f;
					}
				}
				else
				{
					for (int num877 = 0; num877 < 3; num877++)
					{
						Dust.NewDust(base.position, width, height, 18, velocity.X * 0.025f, velocity.Y * 0.025f, 170, default(Color), 1.2f);
					}
					Dust.NewDust(base.position, width, height, 14, 0f, 0f, 170, default(Color), 1.1f);
				}
			}
			if (type >= 150 && type <= 152)
			{
				alpha += 3;
			}
			else if (type == 493 || type == 494)
			{
				alpha += 4;
			}
			else
			{
				alpha += 5;
			}
			if (alpha >= 255)
			{
				Kill();
			}
		}
		else if (aiStyle == 5)
		{
			if (!Main.remixWorld && type == 12 && Main.dayTime && damage == 1000)
			{
				Kill();
			}
			if (type == 503 || type == 723 || type == 724 || type == 725 || type == 726)
			{
				if (base.Center.Y > this.ai[1])
				{
					tileCollide = true;
				}
			}
			else if (type == 92)
			{
				if (base.position.Y > this.ai[1])
				{
					tileCollide = true;
				}
			}
			else if (type == 9)
			{
				tileCollide = base.Bottom.Y >= this.ai[1];
			}
			else
			{
				if (this.ai[1] == 0f && !Collision.SolidCollision(base.position, width, height))
				{
					this.ai[1] = 1f;
					netUpdate = true;
				}
				if (this.ai[1] != 0f)
				{
					tileCollide = true;
				}
			}
			if (soundDelay == 0)
			{
				soundDelay = 20 + Main.rand.Next(40);
				SoundEngine.PlaySound(in SoundID.Item9, base.position);
			}
			if (type == 503 || type == 9)
			{
				alpha -= 15;
				int num888 = 150;
				if (base.Center.Y >= this.ai[1])
				{
					num888 = 0;
				}
				if (alpha < num888)
				{
					alpha = num888;
				}
				localAI[0] += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f * (float)direction;
			}
			else if (type == 723 || type == 724 || type == 725 || type == 726)
			{
				alpha -= 15;
				int num899 = 100;
				if (base.Center.Y >= this.ai[1])
				{
					num899 = 0;
				}
				if (alpha < num899)
				{
					alpha = num899;
				}
				localAI[0] += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f * (float)direction;
			}
			else
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
				}
				alpha += (int)(25f * localAI[0]);
				if (alpha > 200)
				{
					alpha = 200;
					localAI[0] = -1f;
				}
				if (alpha < 0)
				{
					alpha = 0;
					localAI[0] = 1f;
				}
			}
			if (type == 503)
			{
				rotation = velocity.ToRotation() - (float)Math.PI / 2f;
			}
			else
			{
				rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f * (float)direction;
			}
			if (type == 503)
			{
				if (Main.rand.Next(16) == 0)
				{
					Vector2 spinningpoint18 = Vector2.UnitX.RotatedByRandom(1.5707963705062866);
					double radians = velocity.ToRotation();
					val4 = default(Vector2);
					Vector2 vector167 = spinningpoint18.RotatedBy(radians, val4);
					int num910 = Dust.NewDust(base.position, width, height, 58, velocity.X * 0.5f, velocity.Y * 0.5f, 150, default(Color), 1.2f);
					Main.dust[num910].velocity = vector167 * 0.66f;
					Main.dust[num910].position = base.Center + vector167 * 12f;
				}
				if (Main.rand.Next(48) == 0)
				{
					int num921 = Gore.NewGore(base.Center, new Vector2(velocity.X * 0.2f, velocity.Y * 0.2f), 16);
					Gore gore5 = Main.gore[num921];
					Gore gore8 = gore5;
					gore8.velocity *= 0.66f;
					gore5 = Main.gore[num921];
					gore8 = gore5;
					gore8.velocity += velocity * 0.3f;
				}
			}
			if (type == 12 || type == 955)
			{
				Vector2 vector2 = default(Vector2);
				((Vector2)(ref vector2))._002Ector((float)Main.screenWidth, (float)Main.screenHeight);
				hitbox = base.Hitbox;
				if (((Rectangle)(ref hitbox)).Intersects(Utils.CenteredRectangle(Main.screenPosition + vector2 / 2f, vector2 + new Vector2(400f))) && Main.rand.Next(6) == 0)
				{
					int num932 = Utils.SelectRandom<int>(Main.rand, 16, 17, 17, 17);
					if (Main.tenthAnniversaryWorld)
					{
						num932 = Utils.SelectRandom<int>(Main.rand, 16, 16, 16, 17);
					}
					Gore.NewGore(base.position, velocity * 0.2f, num932);
				}
				light = 0.9f;
				if (Main.rand.Next(20) == 0 || (Main.tenthAnniversaryWorld && Main.rand.Next(15) == 0))
				{
					Dust.NewDust(base.position, width, height, 58, velocity.X * 0.5f, velocity.Y * 0.5f, 150, default(Color), 1.2f);
				}
			}
			else if (type == 723 || type == 724 || type == 725 || type == 726)
			{
				if (type == 726 || type == 725 || type == 726)
				{
					Vector2 vector13 = default(Vector2);
					((Vector2)(ref vector13))._002Ector((float)Main.screenWidth, (float)Main.screenHeight);
					hitbox = base.Hitbox;
					if (((Rectangle)(ref hitbox)).Intersects(Utils.CenteredRectangle(Main.screenPosition + vector13 / 2f, vector13 + new Vector2(400f))) && Main.rand.Next(24) == 0)
					{
						Gore.NewGore(base.position, velocity * 0.2f, Utils.SelectRandom<int>(Main.rand, 16, 17));
					}
					if (Main.rand.Next(3) == 0)
					{
						Dust dust183 = Dust.NewDustDirect(base.position, width, height, 86, 0f, 0f, 127);
						Dust dust35 = dust183;
						Dust dust212 = dust35;
						dust212.velocity *= 0.5f;
						dust183.noGravity = true;
					}
				}
				if (type == 723)
				{
					Vector2 vector24 = default(Vector2);
					((Vector2)(ref vector24))._002Ector((float)Main.screenWidth, (float)Main.screenHeight);
					hitbox = base.Hitbox;
					if (((Rectangle)(ref hitbox)).Intersects(Utils.CenteredRectangle(Main.screenPosition + vector24 / 2f, vector24 + new Vector2(400f))) && Main.rand.Next(6) == 0)
					{
						Gore.NewGore(base.position, velocity * 0.2f, 17);
					}
					for (float num943 = 0f; num943 < 3f; num943 += 1f)
					{
						Vector2 center21 = base.Center;
						Vector2 spinningpoint19 = new Vector2(0f, 12f * scale);
						double radians2 = base.position.Y / 200f + num943 * ((float)Math.PI * 2f) + rotation;
						val4 = default(Vector2);
						Vector2 vector35 = center21 + Utils.RotatedBy(spinningpoint19, radians2, val4) - velocity * 0.5f;
						Dust dust194 = Dust.NewDustPerfect(vector35, 267, velocity * 0.2f * num943, 0, Color.Blue);
						dust194.noLight = true;
						dust194.noGravity = true;
						dust194 = Dust.NewDustPerfect(vector35, 267, velocity * 0.2f * num943, 0, Color.White, 0.4f);
						dust194.noLight = true;
						dust194.noGravity = true;
					}
				}
			}
			else if (type == 9)
			{
				Vector2 vector46 = default(Vector2);
				((Vector2)(ref vector46))._002Ector((float)Main.screenWidth, (float)Main.screenHeight);
				hitbox = base.Hitbox;
				if (((Rectangle)(ref hitbox)).Intersects(Utils.CenteredRectangle(Main.screenPosition + vector46 / 2f, vector46 + new Vector2(400f))) && Main.rand.Next(20) == 0)
				{
					Gore.NewGore(base.position, velocity * 0.2f, Main.rand.Next(16, 18));
				}
				if (Main.rand.Next(4) == 0)
				{
					Dust dust205 = Dust.NewDustDirect(base.position, width, height, 86, 0f, 0f, 127);
					Dust dust36 = dust205;
					Dust dust212 = dust36;
					dust212.velocity *= 0.7f;
					dust205.noGravity = true;
					dust36 = dust205;
					dust212 = dust36;
					dust212.velocity += velocity * 0.3f;
					if (Main.rand.Next(2) == 0)
					{
						dust36 = dust205;
						dust212 = dust36;
						dust212.position -= velocity * 4f;
					}
				}
			}
			else if (this.ai[1] == 1f || type == 92)
			{
				light = 0.9f;
				if (Main.rand.Next(10) == 0)
				{
					Dust.NewDust(base.position, width, height, 58, velocity.X * 0.5f, velocity.Y * 0.5f, 150, default(Color), 1.2f);
				}
				if (Main.rand.Next(20) == 0)
				{
					Gore.NewGore(base.position, new Vector2(velocity.X * 0.2f, velocity.Y * 0.2f), Main.rand.Next(16, 18));
				}
			}
		}
		else if (aiStyle == 6)
		{
			bool flag23 = type == 1019;
			velocity *= 0.95f;
			this.ai[0] += 1f;
			if (this.ai[0] == 180f)
			{
				Kill();
			}
			if (this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				int num954 = 10 + type;
				int num966 = 30;
				if (type == 463)
				{
					num954 = 231;
				}
				if (flag23)
				{
					num954 = 0;
					num966 = 40;
				}
				for (int num977 = 0; num977 < num966; num977++)
				{
					Dust dust209 = Main.dust[Dust.NewDust(base.position, width, height, num954, velocity.X, velocity.Y, 50)];
					if (flag23)
					{
						dust209.noGravity = num977 % 3 != 0;
						if (!dust209.noGravity)
						{
							Dust dust37 = dust209;
							Dust dust212 = dust37;
							dust212.scale *= 1.25f;
							dust37 = dust209;
							dust212 = dust37;
							dust212.velocity /= 2f;
							dust209.velocity.Y -= 2.2f;
						}
						else
						{
							Dust dust38 = dust209;
							Dust dust212 = dust38;
							dust212.scale *= 1.75f;
							dust38 = dust209;
							dust212 = dust38;
							dust212.velocity += velocity * 0.65f;
						}
					}
				}
			}
			bool flag34 = Main.myPlayer == owner;
			if (flag23)
			{
				flag34 = Main.netMode != 1;
			}
			if (flag34 && (type == 10 || type == 11 || type == 463 || flag23))
			{
				int num988 = (int)(base.position.X / 16f) - 1;
				int num999 = (int)((base.position.X + (float)width) / 16f) + 2;
				int num1010 = (int)(base.position.Y / 16f) - 1;
				int num1021 = (int)((base.position.Y + (float)height) / 16f) + 2;
				if (num988 < 0)
				{
					num988 = 0;
				}
				if (num999 > Main.maxTilesX)
				{
					num999 = Main.maxTilesX;
				}
				if (num1010 < 0)
				{
					num1010 = 0;
				}
				if (num1021 > Main.maxTilesY)
				{
					num1021 = Main.maxTilesY;
				}
				Vector2 vector57 = default(Vector2);
				for (int num1032 = num988; num1032 < num999; num1032++)
				{
					for (int num1043 = num1010; num1043 < num1021; num1043++)
					{
						vector57.X = num1032 * 16;
						vector57.Y = num1043 * 16;
						if (!(base.position.X + (float)width > vector57.X) || !(base.position.X < vector57.X + 16f) || !(base.position.Y + (float)height > vector57.Y) || !(base.position.Y < vector57.Y + 16f) || !Main.tile[num1032, num1043].active())
						{
							continue;
						}
						if (type == 10)
						{
							if (Main.tile[num1032, num1043].type == 23 || Main.tile[num1032, num1043].type == 199)
							{
								Main.tile[num1032, num1043].type = 2;
								WorldGen.SquareTileFrame(num1032, num1043);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num1032, num1043);
								}
							}
							if (Main.tile[num1032, num1043].type == 25 || Main.tile[num1032, num1043].type == 203)
							{
								Main.tile[num1032, num1043].type = 1;
								WorldGen.SquareTileFrame(num1032, num1043);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num1032, num1043);
								}
							}
							if (Main.tile[num1032, num1043].type == 112 || Main.tile[num1032, num1043].type == 234)
							{
								Main.tile[num1032, num1043].type = 53;
								WorldGen.SquareTileFrame(num1032, num1043);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num1032, num1043);
								}
							}
							if (Main.tile[num1032, num1043].type == 163 || Main.tile[num1032, num1043].type == 200)
							{
								Main.tile[num1032, num1043].type = 161;
								WorldGen.SquareTileFrame(num1032, num1043);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num1032, num1043);
								}
							}
							if (Main.tile[num1032, num1043].type == 400 || Main.tile[num1032, num1043].type == 401)
							{
								Main.tile[num1032, num1043].type = 396;
								WorldGen.SquareTileFrame(num1032, num1043);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num1032, num1043);
								}
							}
							if (Main.tile[num1032, num1043].type == 398 || Main.tile[num1032, num1043].type == 399)
							{
								Main.tile[num1032, num1043].type = 397;
								WorldGen.SquareTileFrame(num1032, num1043);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num1032, num1043);
								}
							}
							if (Main.tile[num1032, num1043].type == 661 || Main.tile[num1032, num1043].type == 662)
							{
								Main.tile[num1032, num1043].type = 60;
								WorldGen.SquareTileFrame(num1032, num1043);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num1032, num1043);
								}
							}
						}
						if (type == 11 || type == 463)
						{
							if (type == 11)
							{
								WorldGen.Convert(num1032, num1043, 1, 1);
							}
							if (type == 463)
							{
								WorldGen.Convert(num1032, num1043, 4, 1);
							}
						}
						if (!flag23)
						{
							continue;
						}
						Tile tile = Main.tile[num1032, num1043];
						if (tile.type >= 0 && tile.type < TileID.Count && TileID.Sets.CommonSapling[tile.type])
						{
							if (Main.remixWorld && num1043 >= (int)Main.worldSurface - 1 && num1043 < Main.maxTilesY - 20)
							{
								WorldGen.AttemptToGrowTreeFromSapling(num1032, num1043, underground: false);
							}
							WorldGen.AttemptToGrowTreeFromSapling(num1032, num1043, num1043 > (int)Main.worldSurface - 1);
						}
					}
				}
			}
			if (flag23 && ((Vector2)(ref velocity)).Length() < 0.5f)
			{
				Kill();
			}
		}
		else if (aiStyle == 7)
		{
			AI_007_GrapplingHooks();
		}
		else if (aiStyle == 8)
		{
			if (type == 258 && localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(in SoundID.Item20, base.position);
			}
			if (type == 96 && localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(in SoundID.Item20, base.position);
			}
			if (type == 27)
			{
				for (int num1054 = 0; num1054 < 5; num1054++)
				{
					float num1065 = velocity.X / 3f * (float)num1054;
					float num3 = velocity.Y / 3f * (float)num1054;
					int num14 = 4;
					int num25 = Dust.NewDust(new Vector2(base.position.X + (float)num14, base.position.Y + (float)num14), width - num14 * 2, height - num14 * 2, 172, 0f, 0f, 100, default(Color), 1.2f);
					Main.dust[num25].noGravity = true;
					Dust dust40 = Main.dust[num25];
					Dust dust212 = dust40;
					dust212.velocity *= 0.1f;
					dust40 = Main.dust[num25];
					dust212 = dust40;
					dust212.velocity += velocity * 0.1f;
					Main.dust[num25].position.X -= num1065;
					Main.dust[num25].position.Y -= num3;
				}
				if (Main.rand.Next(5) == 0)
				{
					int num36 = 4;
					int num47 = Dust.NewDust(new Vector2(base.position.X + (float)num36, base.position.Y + (float)num36), width - num36 * 2, height - num36 * 2, 172, 0f, 0f, 100, default(Color), 0.6f);
					Dust dust39 = Main.dust[num47];
					Dust dust212 = dust39;
					dust212.velocity *= 0.25f;
					dust39 = Main.dust[num47];
					dust212 = dust39;
					dust212.velocity += velocity * 0.5f;
				}
			}
			else if (type == 502)
			{
				float num58 = (float)Main.DiscoR / 255f;
				float num69 = (float)Main.DiscoG / 255f;
				float num80 = (float)Main.DiscoB / 255f;
				num58 = (0.5f + num58) / 2f;
				num69 = (0.5f + num69) / 2f;
				num80 = (0.5f + num80) / 2f;
				Lighting.AddLight(base.Center, num58, num69, num80);
			}
			else if (type == 95 || type == 96)
			{
				int num84 = Dust.NewDust(new Vector2(base.position.X + velocity.X, base.position.Y + velocity.Y), width, height, 75, velocity.X, velocity.Y, 100, default(Color), 3f * scale);
				Main.dust[num84].noGravity = true;
			}
			else if (type == 253)
			{
				for (int num85 = 0; num85 < 2; num85++)
				{
					int num87 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 135, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
					Main.dust[num87].noGravity = true;
					Main.dust[num87].velocity.X *= 0.3f;
					Main.dust[num87].velocity.Y *= 0.3f;
				}
			}
			else
			{
				for (int num88 = 0; num88 < 2; num88++)
				{
					int num89 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
					if (type == 258 && Main.getGoodWorld)
					{
						Main.dust[num89].noLight = true;
					}
					Main.dust[num89].noGravity = true;
					Main.dust[num89].velocity.X *= 0.3f;
					Main.dust[num89].velocity.Y *= 0.3f;
				}
			}
			if (type != 27 && type != 96 && type != 258)
			{
				this.ai[1] += 1f;
			}
			if (this.ai[1] >= 20f)
			{
				velocity.Y += 0.2f;
			}
			if (type == 502)
			{
				rotation = velocity.ToRotation() + (float)Math.PI / 2f;
				if (velocity.X != 0f)
				{
					spriteDirection = (direction = Math.Sign(velocity.X));
				}
			}
			else
			{
				rotation += 0.3f * (float)direction;
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
		}
		else if (aiStyle == 9)
		{
			AI_009_MagicMissiles();
		}
		else if (aiStyle == 10)
		{
			AI_010();
		}
		else if (aiStyle == 11)
		{
			bool flag45 = type == 72 || type == 86 || type == 87;
			if (flag45)
			{
				if (velocity.X > 0f)
				{
					spriteDirection = -1;
				}
				else if (velocity.X < 0f)
				{
					spriteDirection = 1;
				}
				rotation = velocity.X * 0.1f;
				frameCounter++;
				if (frameCounter >= 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame >= 4)
				{
					frame = 0;
				}
				if (Main.rand.Next(6) == 0)
				{
					int num90 = 56;
					if (type == 86)
					{
						num90 = 73;
					}
					else if (type == 87)
					{
						num90 = 74;
					}
					int num91 = Dust.NewDust(base.position, width, height, num90, 0f, 0f, 200, default(Color), 0.8f);
					Dust dust41 = Main.dust[num91];
					Dust dust212 = dust41;
					dust212.velocity *= 0.3f;
					Main.dust[num91].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cLight, Main.player[owner]);
				}
			}
			else
			{
				rotation += 0.02f;
			}
			if (type == 72)
			{
				if (Main.player[owner].blueFairy)
				{
					timeLeft = 2;
				}
			}
			else if (type == 86)
			{
				if (Main.player[owner].redFairy)
				{
					timeLeft = 2;
				}
			}
			else if (type == 87)
			{
				if (Main.player[owner].greenFairy)
				{
					timeLeft = 2;
				}
			}
			else if (type == 18 && Main.player[owner].lightOrb)
			{
				timeLeft = 2;
			}
			if (!Main.player[owner].dead)
			{
				float num92 = 3f;
				if (flag45)
				{
					num92 = 6f;
				}
				Vector2 vector68 = default(Vector2);
				((Vector2)(ref vector68))._002Ector(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num93 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector68.X;
				float num94 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector68.Y;
				int num95 = 800;
				int num96 = 70;
				if (type == 18)
				{
					if (Main.player[owner].controlUp)
					{
						num94 = Main.player[owner].position.Y - 40f - vector68.Y;
						num93 -= 6f;
						num96 = 4;
					}
					else if (Main.player[owner].controlDown)
					{
						num94 = Main.player[owner].position.Y + (float)Main.player[owner].height + 40f - vector68.Y;
						num93 -= 6f;
						num96 = 4;
					}
				}
				if (flag45)
				{
					num96 = 50;
				}
				float num98 = (float)Math.Sqrt(num93 * num93 + num94 * num94);
				num98 = (float)Math.Sqrt(num93 * num93 + num94 * num94);
				if (num98 > (float)num95)
				{
					base.position.X = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - (float)(width / 2);
					base.position.Y = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - (float)(height / 2);
				}
				else if (num98 > (float)num96)
				{
					float num99 = num98 - (float)num96;
					num98 = num92 / num98;
					num93 *= num98;
					num94 *= num98;
					velocity.X = num93;
					velocity.Y = num94;
					if (flag45 && ((Vector2)(ref velocity)).Length() > num99)
					{
						velocity = velocity.SafeNormalize(Vector2.Zero) * num99;
					}
				}
				else
				{
					velocity.X = (velocity.Y = 0f);
				}
			}
			else
			{
				Kill();
			}
		}
		else if (aiStyle == 12)
		{
			if (type == 288 && localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(in SoundID.Item17, base.position);
			}
			if (type == 280 || type == 288)
			{
				scale -= 0.002f;
				if (scale <= 0f)
				{
					Kill();
				}
				if (type == 288)
				{
					this.ai[0] = 4f;
				}
				if (this.ai[0] > 3f)
				{
					velocity.Y += 0.075f;
					for (int num100 = 0; num100 < 3; num100++)
					{
						float num101 = velocity.X / 3f * (float)num100;
						float num102 = velocity.Y / 3f * (float)num100;
						int num103 = 14;
						int num104 = Dust.NewDust(new Vector2(base.position.X + (float)num103, base.position.Y + (float)num103), width - num103 * 2, height - num103 * 2, 170, 0f, 0f, 100);
						Main.dust[num104].noGravity = true;
						Dust dust43 = Main.dust[num104];
						Dust dust212 = dust43;
						dust212.velocity *= 0.1f;
						dust43 = Main.dust[num104];
						dust212 = dust43;
						dust212.velocity += velocity * 0.5f;
						Main.dust[num104].position.X -= num101;
						Main.dust[num104].position.Y -= num102;
					}
					if (Main.rand.Next(8) == 0)
					{
						int num105 = 16;
						int num106 = Dust.NewDust(new Vector2(base.position.X + (float)num105, base.position.Y + (float)num105), width - num105 * 2, height - num105 * 2, 170, 0f, 0f, 100, default(Color), 0.5f);
						Dust dust42 = Main.dust[num106];
						Dust dust212 = dust42;
						dust212.velocity *= 0.25f;
						dust42 = Main.dust[num106];
						dust212 = dust42;
						dust212.velocity += velocity * 0.5f;
					}
				}
				else
				{
					this.ai[0] += 1f;
				}
				return;
			}
			float num107 = 0.02f;
			float num109 = 0.2f;
			if (type == 22)
			{
				num107 = 0.01f;
				num109 = 0.15f;
			}
			scale -= num107;
			if (scale <= 0f)
			{
				Kill();
			}
			if (this.ai[0] > 3f)
			{
				velocity.Y += num109;
				for (int num110 = 0; num110 < 1; num110++)
				{
					for (int num111 = 0; num111 < 3; num111++)
					{
						float num112 = velocity.X / 3f * (float)num111;
						float num113 = velocity.Y / 3f * (float)num111;
						int num114 = 6;
						int num115 = Dust.NewDust(new Vector2(base.position.X + (float)num114, base.position.Y + (float)num114), width - num114 * 2, height - num114 * 2, 172, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num115].noGravity = true;
						Dust dust45 = Main.dust[num115];
						Dust dust212 = dust45;
						dust212.velocity *= 0.3f;
						dust45 = Main.dust[num115];
						dust212 = dust45;
						dust212.velocity += velocity * 0.5f;
						Main.dust[num115].position.X -= num112;
						Main.dust[num115].position.Y -= num113;
					}
					if (Main.rand.Next(8) == 0)
					{
						int num116 = 6;
						int num117 = Dust.NewDust(new Vector2(base.position.X + (float)num116, base.position.Y + (float)num116), width - num116 * 2, height - num116 * 2, 172, 0f, 0f, 100, default(Color), 0.75f);
						Dust dust44 = Main.dust[num117];
						Dust dust212 = dust44;
						dust212.velocity *= 0.5f;
						dust44 = Main.dust[num117];
						dust212 = dust44;
						dust212.velocity += velocity * 0.5f;
					}
				}
			}
			else
			{
				this.ai[0] += 1f;
			}
		}
		else if (aiStyle == 13)
		{
			bool flag56 = Main.player[owner].dead;
			if (!flag56)
			{
				val4 = Main.player[owner].Center - base.Center;
				float num118 = ((Vector2)(ref val4)).Length();
				flag56 = num118 > 2000f;
			}
			if (flag56)
			{
				Kill();
				return;
			}
			if (type != 481)
			{
				int dummyItemTime = 5;
				Main.player[owner].SetDummyItemTime(dummyItemTime);
			}
			if (alpha == 0)
			{
				if (base.position.X + (float)(width / 2) > Main.player[owner].position.X + (float)(Main.player[owner].width / 2))
				{
					Main.player[owner].ChangeDir(1);
				}
				else
				{
					Main.player[owner].ChangeDir(-1);
				}
			}
			if (type == 481)
			{
				if (this.ai[0] == 0f)
				{
					extraUpdates = 1;
				}
				else
				{
					extraUpdates = 2;
				}
			}
			Vector2 vector79 = default(Vector2);
			((Vector2)(ref vector79))._002Ector(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
			float num120 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector79.X;
			float num121 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector79.Y;
			float num122 = (float)Math.Sqrt(num120 * num120 + num121 * num121);
			if (this.ai[0] == 0f)
			{
				if (num122 > 700f)
				{
					this.ai[0] = 1f;
				}
				else if (type == 262 && num122 > 500f)
				{
					this.ai[0] = 1f;
				}
				else if (type == 271 && num122 > 200f)
				{
					this.ai[0] = 1f;
				}
				else if (type == 273 && (Main.remixWorld ? (num122 > 300f) : (num122 > 150f)))
				{
					this.ai[0] = 1f;
				}
				else if (type == 481 && num122 > 525f)
				{
					this.ai[0] = 1f;
				}
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				this.ai[1] += 1f;
				if (this.ai[1] > 5f)
				{
					alpha = 0;
				}
				if (type == 262 && this.ai[1] > 8f)
				{
					this.ai[1] = 8f;
				}
				if (type == 271 && this.ai[1] > 8f)
				{
					this.ai[1] = 8f;
				}
				if (type == 273 && this.ai[1] > 8f)
				{
					this.ai[1] = 8f;
				}
				if (type == 481 && this.ai[1] > 8f)
				{
					this.ai[1] = 8f;
				}
				if (type == 404 && this.ai[1] > 8f)
				{
					this.ai[1] = 0f;
				}
				if (this.ai[1] >= 10f)
				{
					this.ai[1] = 15f;
					velocity.Y += 0.3f;
				}
				if (type == 262 && velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				else if (type == 262)
				{
					spriteDirection = 1;
				}
				if (type == 271 && velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				else if (type == 271)
				{
					spriteDirection = 1;
				}
			}
			else if (this.ai[0] == 1f)
			{
				tileCollide = false;
				rotation = (float)Math.Atan2(num121, num120) - 1.57f;
				float num123 = 20f;
				if (type == 262)
				{
					num123 = 30f;
				}
				if (num122 < 50f)
				{
					Kill();
				}
				num122 = num123 / num122;
				num120 *= num122;
				num121 *= num122;
				velocity.X = num120;
				velocity.Y = num121;
				if (type == 262 && velocity.X < 0f)
				{
					spriteDirection = 1;
				}
				else if (type == 262)
				{
					spriteDirection = -1;
				}
				if (type == 271 && velocity.X < 0f)
				{
					spriteDirection = 1;
				}
				else if (type == 271)
				{
					spriteDirection = -1;
				}
			}
		}
		else if (aiStyle == 14)
		{
			if (type == 870 && this.ai[1] > 0f)
			{
				aiStyle = 170;
			}
			if (type == 473 && Main.netMode != 2)
			{
				localAI[0] += 1f;
				if (localAI[0] >= 10f)
				{
					localAI[0] = 0f;
					int num124 = 30;
					val4 = base.Center - Main.player[Main.myPlayer].Center;
					if (((Vector2)(ref val4)).Length() < (float)(Main.screenWidth + num124 * 16))
					{
						Main.instance.SpelunkerProjectileHelper.AddSpotToCheck(base.Center);
					}
				}
			}
			if (type == 352)
			{
				if (localAI[1] == 0f)
				{
					localAI[1] = 1f;
				}
				alpha += (int)(25f * localAI[1]);
				if (alpha <= 0)
				{
					alpha = 0;
					localAI[1] = 1f;
				}
				else if (alpha >= 255)
				{
					alpha = 255;
					localAI[1] = -1f;
				}
				scale += localAI[1] * 0.01f;
			}
			if (type == 346)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(in SoundID.Item1, base.position);
				}
				frame = (int)this.ai[1];
				if (frame == 0)
				{
					Lighting.AddLight(base.Center, 0.25f, 0.2f, 0f);
				}
				else
				{
					Lighting.AddLight(base.Center, 0.15f, 0.15f, 0.15f);
				}
				if (owner == Main.myPlayer && timeLeft == 1)
				{
					Vector2 vector88 = default(Vector2);
					for (int num125 = 0; num125 < 5; num125++)
					{
						float num126 = 10f;
						((Vector2)(ref vector88))._002Ector(base.Center.X, base.Center.Y);
						float num127 = Main.rand.Next(-20, 21);
						float num128 = Main.rand.Next(-20, 0);
						float num129 = (float)Math.Sqrt(num127 * num127 + num128 * num128);
						num129 = num126 / num129;
						num127 *= num129;
						num128 *= num129;
						num127 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
						num128 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
						int num131 = NewProjectile(GetProjectileSource_FromThis(), vector88.X, vector88.Y, num127, num128, 347, 40, 0f, Main.myPlayer, 0f, this.ai[1]);
					}
				}
			}
			if (type == 196)
			{
				int num132 = Main.rand.Next(1, 3);
				for (int num133 = 0; num133 < num132; num133++)
				{
					int num134 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 100);
					Dust dust55 = Main.dust[num134];
					Dust dust212 = dust55;
					dust212.alpha += Main.rand.Next(100);
					dust55 = Main.dust[num134];
					dust212 = dust55;
					dust212.velocity *= 0.3f;
					Main.dust[num134].velocity.X += (float)Main.rand.Next(-10, 11) * 0.025f;
					Main.dust[num134].velocity.Y -= 0.4f + (float)Main.rand.Next(-3, 14) * 0.15f;
					Main.dust[num134].fadeIn = 1.25f + (float)Main.rand.Next(20) * 0.15f;
				}
			}
			if (type == 53)
			{
				try
				{
					int num135 = (int)(base.position.X / 16f) - 1;
					int num136 = (int)((base.position.X + (float)width) / 16f) + 2;
					int num137 = (int)(base.position.Y / 16f) - 1;
					int num138 = (int)((base.position.Y + (float)height) / 16f) + 2;
					if (num135 < 0)
					{
						num135 = 0;
					}
					if (num136 > Main.maxTilesX)
					{
						num136 = Main.maxTilesX;
					}
					if (num137 < 0)
					{
						num137 = 0;
					}
					if (num138 > Main.maxTilesY)
					{
						num138 = Main.maxTilesY;
					}
					Vector2 vector89 = default(Vector2);
					for (int num139 = num135; num139 < num136; num139++)
					{
						for (int num140 = num137; num140 < num138; num140++)
						{
							if (Main.tile[num139, num140] != null && Main.tile[num139, num140].nactive() && Main.tileSolid[Main.tile[num139, num140].type] && !Main.tileSolidTop[Main.tile[num139, num140].type])
							{
								vector89.X = num139 * 16;
								vector89.Y = num140 * 16;
								if (base.position.X + (float)width > vector89.X && base.position.X < vector89.X + 16f && base.position.Y + (float)height > vector89.Y && base.position.Y < vector89.Y + 16f)
								{
									velocity.X = 0f;
									velocity.Y = -0.2f;
								}
							}
						}
					}
				}
				catch
				{
				}
			}
			if (type == 277)
			{
				if (alpha > 0)
				{
					alpha -= 30;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				if (Main.expertMode)
				{
					float num142 = 12f;
					int num143 = Player.FindClosest(base.Center, 1, 1);
					Vector2 vector91 = Main.player[num143].Center - base.Center;
					((Vector2)(ref vector91)).Normalize();
					vector91 *= num142;
					int num144 = 200;
					velocity.X = (velocity.X * (float)(num144 - 1) + vector91.X) / (float)num144;
					if (((Vector2)(ref velocity)).Length() > 16f)
					{
						((Vector2)(ref velocity)).Normalize();
						velocity *= 16f;
					}
				}
			}
			if (type == 261)
			{
				if (localAI[1] == 0f)
				{
					localAI[1] = 1f;
					localAI[0] = 80f;
				}
				rotation += velocity.X * 0.05f;
				if (velocity.Y != 0f)
				{
					rotation += (float)spriteDirection * 0.01f;
				}
				this.ai[0]++;
				if (this.ai[0] > 15f)
				{
					if (velocity.Y == 0f && velocity.X != 0f)
					{
						velocity.X *= 0.97f;
						Math.Abs(velocity.X);
						if (Math.Abs(velocity.X) <= 0.01f)
						{
							Kill();
						}
					}
					this.ai[0] = 15f;
					velocity.Y += 0.2f;
				}
				if (localAI[0] > 0f)
				{
					localAI[0]--;
					int num145 = 5;
					int maxValue = num145;
					if (localAI[0] < 20f)
					{
						maxValue = num145 + num145;
					}
					if (localAI[0] < 10f)
					{
						maxValue = num145 + num145 + num145;
					}
					if (Main.rand.Next(maxValue) == 0)
					{
						Dust dust210 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(width / 2, height / 2), 31);
						Dust dust54 = dust210;
						Dust dust212 = dust54;
						dust212.velocity *= 0.33f;
						dust210.scale = 0.7f;
					}
					if (Main.rand.Next(maxValue) == 0)
					{
						Dust dust211 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(width / 2, height / 2), 228, Main.rand.NextVector2Circular(3f, 3f));
						dust211.scale = 0.6f;
						Dust dust53 = dust211;
						Dust dust212 = dust53;
						dust212.velocity *= 0.33f;
					}
				}
			}
			else if (type == 277)
			{
				this.ai[0] += 1f;
				if (this.ai[0] > 15f)
				{
					this.ai[0] = 15f;
					if (velocity.Y == 0f && velocity.X != 0f)
					{
						velocity.X *= 0.97f;
						if ((double)velocity.X > -0.01 && (double)velocity.X < 0.01)
						{
							Kill();
						}
					}
					velocity.Y += 0.2f;
				}
				rotation += velocity.X * 0.05f;
			}
			else if (type == 378)
			{
				if (localAI[0] == 0f)
				{
					SoundEngine.PlaySound(in SoundID.Item17, base.position);
					localAI[0] += 1f;
				}
				Rectangle rectangle2 = default(Rectangle);
				((Rectangle)(ref rectangle2))._002Ector((int)base.position.X, (int)base.position.Y, width, height);
				Rectangle value12 = default(Rectangle);
				for (int num146 = 0; num146 < 200; num146++)
				{
					if (Main.npc[num146].CanBeChasedBy(this, ignoreDontTakeDamage: true))
					{
						((Rectangle)(ref value12))._002Ector((int)Main.npc[num146].position.X, (int)Main.npc[num146].position.Y, Main.npc[num146].width, Main.npc[num146].height);
						if (((Rectangle)(ref rectangle2)).Intersects(value12))
						{
							Kill();
							return;
						}
					}
				}
				this.ai[0] += 1f;
				if (this.ai[0] > 10f)
				{
					this.ai[0] = 90f;
					if (velocity.Y == 0f && velocity.X != 0f)
					{
						velocity.X *= 0.96f;
						if ((double)velocity.X > -0.01 && (double)velocity.X < 0.01)
						{
							Kill();
						}
					}
					velocity.Y += 0.2f;
				}
				rotation += velocity.X * 0.1f;
			}
			else if (type == 483)
			{
				this.ai[0] += 1f;
				if (this.ai[0] > 5f)
				{
					if (owner == Main.myPlayer && this.ai[0] > (float)Main.rand.Next(20, 130))
					{
						Kill();
					}
					if (velocity.Y == 0f && velocity.X != 0f)
					{
						velocity.X *= 0.97f;
						if ((double)velocity.X > -0.01 && (double)velocity.X < 0.01)
						{
							velocity.X = 0f;
							netUpdate = true;
						}
					}
					velocity.Y += 0.3f;
					velocity.X *= 0.99f;
				}
				rotation += velocity.X * 0.05f;
			}
			else if (type == 538)
			{
				this.ai[0] += 1f;
				if (this.ai[0] > 60f || velocity.Y >= 0f)
				{
					alpha += 6;
					velocity *= 0.5f;
				}
				else if (this.ai[0] > 5f)
				{
					velocity.Y += 0.1f;
					velocity.X *= 1.025f;
					alpha -= 23;
					scale = 0.8f * (255f - (float)alpha) / 255f;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				if (alpha >= 255 && this.ai[0] > 5f)
				{
					Kill();
					return;
				}
			}
			else
			{
				this.ai[0] += 1f;
				if (this.ai[0] > 5f)
				{
					this.ai[0] = 5f;
					if (velocity.Y == 0f && velocity.X != 0f)
					{
						velocity.X *= 0.97f;
						if ((double)velocity.X > -0.01 && (double)velocity.X < 0.01)
						{
							velocity.X = 0f;
							netUpdate = true;
						}
					}
					velocity.Y += 0.2f;
				}
				rotation += velocity.X * 0.1f;
			}
			if (type == 538)
			{
				if (localAI[1] == 0f)
				{
					localAI[1] = 1f;
					SoundEngine.PlaySound(4, (int)base.position.X, (int)base.position.Y, 7);
				}
				if (velocity.Y < 0f && this.ai[0] < 60f)
				{
					if (Main.rand.Next(4) == 0)
					{
						int num147 = Dust.NewDust(base.position, width, height, 180, 0f, 0f, 100);
						Main.dust[num147].position = base.Center;
						Dust dust52 = Main.dust[num147];
						Dust dust212 = dust52;
						dust212.scale += (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num147].noGravity = true;
						Main.dust[num147].velocity.Y -= 2f;
					}
					if (Main.rand.Next(6) == 0)
					{
						int num148 = Dust.NewDust(base.position, width, height, 176, 0f, 0f, 100);
						Main.dust[num148].position = base.Center;
						Dust dust51 = Main.dust[num148];
						Dust dust212 = dust51;
						dust212.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num148].noGravity = true;
						dust51 = Main.dust[num148];
						dust212 = dust51;
						dust212.velocity *= 0.1f;
					}
				}
			}
			if (type == 450)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(in SoundID.Item13, base.position);
				}
				if (Main.rand.Next(2) == 0)
				{
					int num149 = Dust.NewDust(base.position, width, height, 228, 0f, 0f, 100);
					Main.dust[num149].position.X -= 2f;
					Main.dust[num149].position.Y += 2f;
					Dust dust50 = Main.dust[num149];
					Dust dust212 = dust50;
					dust212.scale += (float)Main.rand.Next(50) * 0.01f;
					Main.dust[num149].noGravity = true;
					Main.dust[num149].velocity.Y -= 2f;
				}
				if (Main.rand.Next(4) == 0)
				{
					int num150 = Dust.NewDust(base.position, width, height, 228, 0f, 0f, 100);
					Main.dust[num150].position.X -= 2f;
					Main.dust[num150].position.Y += 2f;
					Dust dust49 = Main.dust[num150];
					Dust dust212 = dust49;
					dust212.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
					Main.dust[num150].noGravity = true;
					dust49 = Main.dust[num150];
					dust212 = dust49;
					dust212.velocity *= 0.1f;
				}
				if (++frameCounter >= 3)
				{
					frameCounter = 0;
					if (++frame >= 5)
					{
						frame = 0;
					}
				}
				if ((double)velocity.Y < 0.25 && (double)velocity.Y > 0.15)
				{
					velocity.X *= 0.8f;
				}
				rotation = (0f - velocity.X) * 0.05f;
			}
			if (type == 480)
			{
				alpha = 255;
				int num151 = Dust.NewDust(base.position, width, height, 75, 0f, 0f, 100);
				Main.dust[num151].position.X -= 2f;
				Main.dust[num151].position.Y += 2f;
				Dust dust48 = Main.dust[num151];
				Dust dust212 = dust48;
				dust212.scale += (float)Main.rand.Next(50) * 0.01f;
				Main.dust[num151].noGravity = true;
				Main.dust[num151].velocity.Y -= 2f;
				if (Main.rand.Next(2) == 0)
				{
					int num153 = Dust.NewDust(base.position, width, height, 75, 0f, 0f, 100);
					Main.dust[num153].position.X -= 2f;
					Main.dust[num153].position.Y += 2f;
					dust48 = Main.dust[num153];
					dust212 = dust48;
					dust212.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
					Main.dust[num153].noGravity = true;
					dust48 = Main.dust[num153];
					dust212 = dust48;
					dust212.velocity *= 0.1f;
				}
			}
			if (type >= 326 && type <= 328)
			{
				if (wet)
				{
					Kill();
				}
				if (this.ai[1] == 0f && type >= 326 && type <= 328)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(in SoundID.Item13, base.position);
				}
				if (Main.rand.Next(3) != 0)
				{
					Dust dust2 = Dust.NewDustDirect(base.position, width, height, 6);
					dust2.velocity.Y -= 2f;
					dust2.noGravity = true;
					Dust dust47 = dust2;
					Dust dust212 = dust47;
					dust212.scale += Main.rand.NextFloat() * 0.8f + 0.3f;
					dust47 = dust2;
					dust212 = dust47;
					dust212.velocity += velocity * 1f;
				}
				if ((double)velocity.Y < 0.25 && (double)velocity.Y > 0.15)
				{
					velocity.X *= 0.8f;
				}
				rotation = (0f - velocity.X) * 0.05f;
			}
			if (type >= 400 && type <= 402)
			{
				if (wet)
				{
					Kill();
				}
				if (this.ai[1] == 0f && type >= 326 && type <= 328)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(in SoundID.Item13, base.position);
				}
				int num154 = Dust.NewDust(base.position, width, height, 6, 0f, 0f, 100);
				Main.dust[num154].position.X -= 2f;
				Main.dust[num154].position.Y += 2f;
				Dust dust46 = Main.dust[num154];
				Dust dust212 = dust46;
				dust212.scale += (float)Main.rand.Next(50) * 0.01f;
				Main.dust[num154].noGravity = true;
				Main.dust[num154].velocity.Y -= 2f;
				if (Main.rand.Next(2) == 0)
				{
					int num155 = Dust.NewDust(base.position, width, height, 6, 0f, 0f, 100);
					Main.dust[num155].position.X -= 2f;
					Main.dust[num155].position.Y += 2f;
					dust46 = Main.dust[num155];
					dust212 = dust46;
					dust212.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
					Main.dust[num155].noGravity = true;
					dust46 = Main.dust[num155];
					dust212 = dust46;
					dust212.velocity *= 0.1f;
				}
				if ((double)velocity.Y < 0.25 && (double)velocity.Y > 0.15)
				{
					velocity.X *= 0.8f;
				}
				rotation = (0f - velocity.X) * 0.05f;
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
		}
		else if (aiStyle == 15)
		{
			AI_015_Flails();
		}
		else if (aiStyle == 16)
		{
			AI_016();
		}
		else if (aiStyle == 17)
		{
			if (velocity.Y == 0f)
			{
				velocity.X *= 0.98f;
			}
			rotation += velocity.X * 0.1f;
			velocity.Y += 0.2f;
			if (Main.getGoodWorld && Math.Abs(velocity.X) + Math.Abs(velocity.Y) < 1f)
			{
				damage = 0;
				knockBack = 0f;
			}
			if (owner != Main.myPlayer)
			{
				return;
			}
			int num156 = (int)((base.position.X + (float)(width / 2)) / 16f);
			int num157 = (int)((base.position.Y + (float)height - 4f) / 16f);
			if (Main.tile[num156, num157] == null)
			{
				return;
			}
			int style = 0;
			if (type >= 201 && type <= 205)
			{
				style = type - 200;
			}
			if (type >= 527 && type <= 531)
			{
				style = type - 527 + 6;
			}
			bool flag67 = false;
			TileObject objectData = default(TileObject);
			if (TileObject.CanPlace(num156, num157, 85, style, direction, out objectData))
			{
				flag67 = TileObject.Place(objectData);
			}
			if (flag67)
			{
				NetMessage.SendObjectPlacement(-1, num156, num157, objectData.type, objectData.style, objectData.alternate, objectData.random, direction);
				SoundEngine.PlaySound(0, num156 * 16, num157 * 16);
				int num158 = Sign.ReadSign(num156, num157);
				if (num158 >= 0)
				{
					Sign.TextSign(num158, miscText);
					NetMessage.SendData(47, -1, -1, null, num158, 0f, (int)(byte)new BitsByte(b1: true));
				}
				Kill();
			}
		}
		else if (aiStyle == 18)
		{
			if (this.ai[1] == 0f && type == 44)
			{
				this.ai[1] = 1f;
				SoundEngine.PlaySound(in SoundID.Item8, base.position);
			}
			if (type == 263 || type == 274)
			{
				if (type == 274 && velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				rotation += (float)direction * 0.05f;
				rotation += (float)direction * 0.5f * ((float)timeLeft / 180f);
				if (type == 274)
				{
					velocity *= 0.96f;
				}
				else
				{
					velocity *= 0.95f;
				}
				return;
			}
			rotation += (float)direction * 0.8f;
			this.ai[0] += 1f;
			if (!(this.ai[0] < 30f))
			{
				if (this.ai[0] < 100f)
				{
					velocity *= 1.06f;
				}
				else
				{
					this.ai[0] = 200f;
				}
			}
			for (int num159 = 0; num159 < 2; num159++)
			{
				int num160 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 27, 0f, 0f, 100);
				Main.dust[num160].noGravity = true;
			}
		}
		else if (aiStyle == 19)
		{
			AI_019_Spears();
		}
		else if (aiStyle == 20)
		{
			timeLeft = 60;
			if (type == 252)
			{
				frameCounter++;
				if (frameCounter >= 4)
				{
					frameCounter = 0;
					frame++;
				}
				if (frame > 3)
				{
					frame = 0;
				}
			}
			if (type == 509)
			{
				frameCounter++;
				if (frameCounter >= 2)
				{
					frameCounter = 0;
					frame++;
				}
				if (frame > 1)
				{
					frame = 0;
				}
			}
			if (soundDelay <= 0)
			{
				SoundEngine.PlaySound(in SoundID.Item22, base.position);
				soundDelay = 30;
			}
			Vector2 vector92 = Main.player[owner].RotatedRelativePoint(Main.player[owner].MountedCenter);
			if (Main.myPlayer == owner)
			{
				if (Main.player[owner].channel)
				{
					float num161 = Main.player[owner].inventory[Main.player[owner].selectedItem].shootSpeed * scale;
					Vector2 vector93 = vector92;
					float num162 = (float)Main.mouseX + Main.screenPosition.X - vector93.X;
					float num164 = (float)Main.mouseY + Main.screenPosition.Y - vector93.Y;
					if (Main.player[owner].gravDir == -1f)
					{
						num164 = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector93.Y;
					}
					float num165 = (float)Math.Sqrt(num162 * num162 + num164 * num164);
					num165 = (float)Math.Sqrt(num162 * num162 + num164 * num164);
					num165 = num161 / num165;
					num162 *= num165;
					num164 *= num165;
					if (num162 != velocity.X || num164 != velocity.Y)
					{
						netUpdate = true;
					}
					velocity.X = num162;
					velocity.Y = num164;
				}
				else
				{
					Kill();
				}
			}
			if (velocity.X > 0f)
			{
				Main.player[owner].ChangeDir(1);
			}
			else if (velocity.X < 0f)
			{
				Main.player[owner].ChangeDir(-1);
			}
			spriteDirection = direction;
			Main.player[owner].ChangeDir(direction);
			Main.player[owner].heldProj = whoAmI;
			Main.player[owner].SetDummyItemTime(2);
			base.position.X = vector92.X - (float)(width / 2);
			base.position.Y = vector92.Y - (float)(height / 2);
			rotation = (float)(Math.Atan2(velocity.Y, velocity.X) + 1.5700000524520874);
			if (Main.player[owner].direction == 1)
			{
				Main.player[owner].itemRotation = (float)Math.Atan2(velocity.Y * (float)direction, velocity.X * (float)direction);
			}
			else
			{
				Main.player[owner].itemRotation = (float)Math.Atan2(velocity.Y * (float)direction, velocity.X * (float)direction);
			}
			velocity.X *= 1f + (float)Main.rand.Next(-3, 4) * 0.01f;
			if (Main.rand.Next(6) == 0)
			{
				int num166 = Dust.NewDust(base.position + velocity * (float)Main.rand.Next(6, 10) * 0.1f, width, height, 31, 0f, 0f, 80, default(Color), 1.4f);
				Main.dust[num166].position.X -= 4f;
				Main.dust[num166].noGravity = true;
				Dust dust56 = Main.dust[num166];
				Dust dust212 = dust56;
				dust212.velocity *= 0.2f;
				Main.dust[num166].velocity.Y = (float)(-Main.rand.Next(7, 13)) * 0.15f;
			}
		}
		else if (aiStyle == 21)
		{
			rotation = velocity.X * 0.1f;
			spriteDirection = -direction;
			if (Main.rand.Next(3) == 0)
			{
				int num167 = Dust.NewDust(base.position, width, height, 27, 0f, 0f, 80);
				Main.dust[num167].noGravity = true;
				Dust dust57 = Main.dust[num167];
				Dust dust212 = dust57;
				dust212.velocity *= 0.2f;
			}
			if (this.ai[1] == 1f)
			{
				this.ai[1] = 0f;
				Main.musicPitch = this.ai[0];
				SoundEngine.PlaySound(in SoundID.Item26, base.position);
			}
		}
		else if (aiStyle == 22)
		{
			if (velocity.X == 0f && velocity.Y == 0f)
			{
				alpha = 255;
			}
			Dust dust58;
			Dust dust212;
			if (this.ai[1] < 0f)
			{
				if (timeLeft > 60)
				{
					timeLeft = 60;
				}
				if (velocity.X > 0f)
				{
					rotation += 0.3f;
				}
				else
				{
					rotation -= 0.3f;
				}
				int num168 = (int)(base.position.X / 16f) - 1;
				int num169 = (int)((base.position.X + (float)width) / 16f) + 2;
				int num170 = (int)(base.position.Y / 16f) - 1;
				int num171 = (int)((base.position.Y + (float)height) / 16f) + 2;
				if (num168 < 0)
				{
					num168 = 0;
				}
				if (num169 > Main.maxTilesX)
				{
					num169 = Main.maxTilesX;
				}
				if (num170 < 0)
				{
					num170 = 0;
				}
				if (num171 > Main.maxTilesY)
				{
					num171 = Main.maxTilesY;
				}
				int num172 = (int)base.position.X + 4;
				int num173 = (int)base.position.Y + 4;
				Vector2 vector94 = default(Vector2);
				for (int num175 = num168; num175 < num169; num175++)
				{
					for (int num176 = num170; num176 < num171; num176++)
					{
						if (Main.tile[num175, num176] != null && Main.tile[num175, num176].active() && Main.tile[num175, num176].type != 127 && Main.tileSolid[Main.tile[num175, num176].type] && !Main.tileSolidTop[Main.tile[num175, num176].type])
						{
							vector94.X = num175 * 16;
							vector94.Y = num176 * 16;
							if ((float)(num172 + 8) > vector94.X && (float)num172 < vector94.X + 16f && (float)(num173 + 8) > vector94.Y && (float)num173 < vector94.Y + 16f)
							{
								Kill();
							}
						}
					}
				}
				int num177 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67);
				Main.dust[num177].noGravity = true;
				dust58 = Main.dust[num177];
				dust212 = dust58;
				dust212.velocity *= 0.3f;
				return;
			}
			if (this.ai[0] < 0f)
			{
				if (this.ai[0] == -1f)
				{
					for (int num178 = 0; num178 < 10; num178++)
					{
						int num179 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67, 0f, 0f, 0, default(Color), 1.1f);
						Main.dust[num179].noGravity = true;
						dust58 = Main.dust[num179];
						dust212 = dust58;
						dust212.velocity *= 1.3f;
					}
				}
				else if (Main.rand.Next(30) == 0)
				{
					int num180 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67, 0f, 0f, 100);
					dust58 = Main.dust[num180];
					dust212 = dust58;
					dust212.velocity *= 0.2f;
				}
				int num181 = (int)base.position.X / 16;
				int num182 = (int)base.position.Y / 16;
				if (Main.tile[num181, num182] == null || !Main.tile[num181, num182].active())
				{
					Kill();
				}
				this.ai[0] -= 1f;
				if (this.ai[0] <= -900f && (Main.myPlayer == owner || Main.netMode == 2) && Main.tile[num181, num182].active() && Main.tile[num181, num182].type == 127)
				{
					WorldGen.KillTile(num181, num182);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 0, num181, num182);
					}
					Kill();
				}
				return;
			}
			int num183 = (int)(base.position.X / 16f) - 1;
			int num184 = (int)((base.position.X + (float)width) / 16f) + 2;
			int num187 = (int)(base.position.Y / 16f) - 1;
			int num188 = (int)((base.position.Y + (float)height) / 16f) + 2;
			if (num183 < 0)
			{
				num183 = 0;
			}
			if (num184 > Main.maxTilesX)
			{
				num184 = Main.maxTilesX;
			}
			if (num187 < 0)
			{
				num187 = 0;
			}
			if (num188 > Main.maxTilesY)
			{
				num188 = Main.maxTilesY;
			}
			int num189 = (int)base.position.X + 4;
			int num190 = (int)base.position.Y + 4;
			Vector2 vector95 = default(Vector2);
			for (int num191 = num183; num191 < num184; num191++)
			{
				for (int num192 = num187; num192 < num188; num192++)
				{
					if (Main.tile[num191, num192] != null && Main.tile[num191, num192].nactive() && Main.tile[num191, num192].type != 127 && Main.tileSolid[Main.tile[num191, num192].type] && !Main.tileSolidTop[Main.tile[num191, num192].type])
					{
						vector95.X = num191 * 16;
						vector95.Y = num192 * 16;
						if ((float)(num189 + 8) > vector95.X && (float)num189 < vector95.X + 16f && (float)(num190 + 8) > vector95.Y && (float)num190 < vector95.Y + 16f)
						{
							Kill();
						}
					}
				}
			}
			if (lavaWet)
			{
				Kill();
			}
			int num193 = (int)(base.Center.X / 16f);
			int num194 = (int)(base.Center.Y / 16f);
			if (WorldGen.InWorld(num193, num194) && Main.tile[num193, num194] != null && Main.tile[num193, num194].liquid > 0 && Main.tile[num193, num194].shimmer())
			{
				Kill();
			}
			if (!active)
			{
				return;
			}
			int num195 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67);
			Main.dust[num195].noGravity = true;
			dust58 = Main.dust[num195];
			dust212 = dust58;
			dust212.velocity *= 0.3f;
			int num196 = (int)this.ai[0];
			int num198 = (int)this.ai[1];
			if (WorldGen.InWorld(num196, num198) && WorldGen.SolidTile(num196, num198))
			{
				if (Math.Abs(velocity.X) > Math.Abs(velocity.Y))
				{
					if (base.Center.Y < (float)(num198 * 16 + 8) && WorldGen.InWorld(num196, num198 - 1) && !WorldGen.SolidTile(num196, num198 - 1))
					{
						num198--;
					}
					else if (WorldGen.InWorld(num196, num198 + 1) && !WorldGen.SolidTile(num196, num198 + 1))
					{
						num198++;
					}
					else if (WorldGen.InWorld(num196, num198 - 1) && !WorldGen.SolidTile(num196, num198 - 1))
					{
						num198--;
					}
					else if (base.Center.X < (float)(num196 * 16 + 8) && WorldGen.InWorld(num196 - 1, num198) && !WorldGen.SolidTile(num196 - 1, num198))
					{
						num196--;
					}
					else if (WorldGen.InWorld(num196 + 1, num198) && !WorldGen.SolidTile(num196 + 1, num198))
					{
						num196++;
					}
					else if (WorldGen.InWorld(num196 - 1, num198) && !WorldGen.SolidTile(num196 - 1, num198))
					{
						num196--;
					}
				}
				else if (base.Center.X < (float)(num196 * 16 + 8) && WorldGen.InWorld(num196 - 1, num198) && !WorldGen.SolidTile(num196 - 1, num198))
				{
					num196--;
				}
				else if (WorldGen.InWorld(num196 + 1, num198) && !WorldGen.SolidTile(num196 + 1, num198))
				{
					num196++;
				}
				else if (WorldGen.InWorld(num196 - 1, num198) && !WorldGen.SolidTile(num196 - 1, num198))
				{
					num196--;
				}
				else if (base.Center.Y < (float)(num198 * 16 + 8) && WorldGen.InWorld(num196, num198 - 1) && !WorldGen.SolidTile(num196, num198 - 1))
				{
					num198--;
				}
				else if (WorldGen.InWorld(num196, num198 + 1) && !WorldGen.SolidTile(num196, num198 + 1))
				{
					num198++;
				}
				else if (WorldGen.InWorld(num196, num198 - 1) && !WorldGen.SolidTile(num196, num198 - 1))
				{
					num198--;
				}
			}
			if (velocity.X > 0f)
			{
				rotation += 0.3f;
			}
			else
			{
				rotation -= 0.3f;
			}
			if (Main.myPlayer != owner)
			{
				return;
			}
			int num199 = (int)((base.position.X + (float)(width / 2)) / 16f);
			int num200 = (int)((base.position.Y + (float)(height / 2)) / 16f);
			bool flag70 = false;
			if (num199 == num196 && num200 == num198)
			{
				flag70 = true;
			}
			if (((velocity.X <= 0f && num199 <= num196) || (velocity.X >= 0f && num199 >= num196)) && ((velocity.Y <= 0f && num200 <= num198) || (velocity.Y >= 0f && num200 >= num198)))
			{
				flag70 = true;
			}
			if (!flag70)
			{
				return;
			}
			if (WorldGen.PlaceTile(num196, num198, 127, mute: false, forced: false, owner))
			{
				if (Main.netMode == 1)
				{
					NetMessage.SendData(17, -1, -1, null, 1, num196, num198, 127f);
				}
				damage = 0;
				this.ai[0] = -1f;
				velocity *= 0f;
				alpha = 255;
				base.position.X = num196 * 16;
				base.position.Y = num198 * 16;
				netUpdate = true;
			}
			else
			{
				this.ai[1] = -1f;
			}
		}
		else if (aiStyle == 23)
		{
			if (type == 188)
			{
				if (this.ai[0] < 8f)
				{
					this.ai[0] = 8f;
				}
				localAI[0]++;
			}
			if (timeLeft > 60)
			{
				timeLeft = 60;
			}
			if (this.ai[0] > 7f)
			{
				float num201 = 1f;
				if (this.ai[0] == 8f)
				{
					num201 = 0.25f;
				}
				else if (this.ai[0] == 9f)
				{
					num201 = 0.5f;
				}
				else if (this.ai[0] == 10f)
				{
					num201 = 0.75f;
				}
				this.ai[0] += 1f;
				int num202 = 6;
				if (type == 101)
				{
					num202 = 75;
				}
				if (num202 == 6 || Main.rand.Next(2) == 0)
				{
					for (int num203 = 0; num203 < 1; num203++)
					{
						int num204 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, num202, velocity.X * 0.2f, velocity.Y * 0.2f, 100);
						Dust dust59;
						Dust dust212;
						if (Main.rand.Next(3) != 0 || (num202 == 75 && Main.rand.Next(3) == 0))
						{
							Main.dust[num204].noGravity = true;
							dust59 = Main.dust[num204];
							dust212 = dust59;
							dust212.scale *= 3f;
							Main.dust[num204].velocity.X *= 2f;
							Main.dust[num204].velocity.Y *= 2f;
						}
						if (type == 188)
						{
							dust59 = Main.dust[num204];
							dust212 = dust59;
							dust212.scale *= 1.25f;
						}
						else
						{
							dust59 = Main.dust[num204];
							dust212 = dust59;
							dust212.scale *= 1.5f;
						}
						Main.dust[num204].velocity.X *= 1.2f;
						Main.dust[num204].velocity.Y *= 1.2f;
						dust59 = Main.dust[num204];
						dust212 = dust59;
						dust212.scale *= num201;
						if (num202 == 75)
						{
							dust59 = Main.dust[num204];
							dust212 = dust59;
							dust212.velocity += velocity;
							if (!Main.dust[num204].noGravity)
							{
								dust59 = Main.dust[num204];
								dust212 = dust59;
								dust212.velocity *= 0.5f;
							}
						}
					}
				}
			}
			else
			{
				this.ai[0] += 1f;
			}
			rotation += 0.3f * (float)direction;
		}
		else if (aiStyle == 24)
		{
			light = scale * 0.5f;
			rotation += velocity.X * 0.2f;
			this.ai[1] += 1f;
			if (type == 94)
			{
				if (Main.rand.Next(4) == 0)
				{
					int num205 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 70);
					Main.dust[num205].noGravity = true;
					Dust dust60 = Main.dust[num205];
					Dust dust212 = dust60;
					dust212.velocity *= 0.5f;
					dust60 = Main.dust[num205];
					dust212 = dust60;
					dust212.scale *= 0.9f;
				}
				velocity *= 0.985f;
				if (this.ai[1] > 130f)
				{
					scale -= 0.05f;
					if ((double)scale <= 0.2)
					{
						scale = 0.2f;
						Kill();
					}
				}
				return;
			}
			velocity *= 0.96f;
			if (this.ai[1] > 15f)
			{
				scale -= 0.05f;
				if ((double)scale <= 0.2)
				{
					scale = 0.2f;
					Kill();
				}
			}
		}
		else if (aiStyle == 25)
		{
			if (type == 1013)
			{
				localAI[0]++;
			}
			if (type == 1014)
			{
				frame = Main.tileFrame[665];
			}
			if (this.ai[0] != 0f && velocity.Y <= 0f && velocity.X == 0f)
			{
				float num206 = 0.5f;
				int i2 = (int)((base.position.X - 8f) / 16f);
				int num207 = (int)(base.position.Y / 16f);
				bool flag71 = false;
				bool flag2 = false;
				if (WorldGen.SolidTile(i2, num207) || WorldGen.SolidTile(i2, num207 + 1))
				{
					flag71 = true;
				}
				i2 = (int)((base.position.X + (float)width + 8f) / 16f);
				if (WorldGen.SolidTile(i2, num207) || WorldGen.SolidTile(i2, num207 + 1))
				{
					flag2 = true;
				}
				if (flag71)
				{
					velocity.X = num206;
				}
				else if (flag2)
				{
					velocity.X = 0f - num206;
				}
				else
				{
					i2 = (int)((base.position.X - 8f - 16f) / 16f);
					num207 = (int)(base.position.Y / 16f);
					flag71 = false;
					flag2 = false;
					if (WorldGen.SolidTile(i2, num207) || WorldGen.SolidTile(i2, num207 + 1))
					{
						flag71 = true;
					}
					i2 = (int)((base.position.X + (float)width + 8f + 16f) / 16f);
					if (WorldGen.SolidTile(i2, num207) || WorldGen.SolidTile(i2, num207 + 1))
					{
						flag2 = true;
					}
					if (flag71)
					{
						velocity.X = num206;
					}
					else if (flag2)
					{
						velocity.X = 0f - num206;
					}
					else
					{
						i2 = (int)((base.position.X - 8f - 32f) / 16f);
						num207 = (int)(base.position.Y / 16f);
						flag71 = false;
						flag2 = false;
						if (WorldGen.SolidTile(i2, num207) || WorldGen.SolidTile(i2, num207 + 1))
						{
							flag71 = true;
						}
						i2 = (int)((base.position.X + (float)width + 8f + 32f) / 16f);
						if (WorldGen.SolidTile(i2, num207) || WorldGen.SolidTile(i2, num207 + 1))
						{
							flag2 = true;
						}
						if (!flag71 && !flag2)
						{
							if ((int)(base.Center.X / 16f) % 2 == 0)
							{
								flag71 = true;
							}
							else
							{
								flag2 = true;
							}
						}
						if (flag71)
						{
							velocity.X = num206;
						}
						else if (flag2)
						{
							velocity.X = 0f - num206;
						}
					}
				}
			}
			rotation += velocity.X * 0.06f;
			this.ai[0] = 1f;
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
			if (type == 1021)
			{
				if (Math.Abs(velocity.Y) <= 1f)
				{
					if (velocity.X > 0f && (double)velocity.X < 3.5)
					{
						velocity.X += 0.025f;
					}
					if (velocity.X < 0f && (double)velocity.X > -3.5)
					{
						velocity.X -= 0.025f;
					}
				}
			}
			else if (velocity.Y <= 6f)
			{
				if (velocity.X > 0f && velocity.X < 7f)
				{
					velocity.X += 0.05f;
				}
				if (velocity.X < 0f && velocity.X > -7f)
				{
					velocity.X -= 0.05f;
				}
			}
			if (type == 1021)
			{
				velocity.Y += 0.06f;
			}
			else
			{
				velocity.Y += 0.3f;
			}
			if (type == 655 && wet)
			{
				Kill();
			}
		}
		else if (aiStyle == 26)
		{
			AI_026();
		}
		else if (aiStyle == 27)
		{
			if (type == 115)
			{
				this.ai[0] += 1f;
				if (this.ai[0] < 30f)
				{
					velocity *= 1.125f;
				}
			}
			if (type == 115 && localAI[1] < 5f)
			{
				localAI[1] = 5f;
				for (int num209 = 5; num209 < 25; num209++)
				{
					float num210 = velocity.X * (30f / (float)num209);
					float num211 = velocity.Y * (30f / (float)num209);
					num210 *= 80f;
					num211 *= 80f;
					int num212 = Dust.NewDust(new Vector2(base.position.X - num210, base.position.Y - num211), 8, 8, 27, oldVelocity.X, oldVelocity.Y, 100, default(Color), 0.9f);
					Dust dust65 = Main.dust[num212];
					Dust dust212 = dust65;
					dust212.velocity *= 0.25f;
					dust65 = Main.dust[num212];
					dust212 = dust65;
					dust212.velocity -= velocity * 5f;
				}
			}
			if (localAI[1] > 7f && type == 173)
			{
				int num1077 = Main.rand.Next(3);
				int num213 = Dust.NewDust(new Vector2(base.position.X - velocity.X * 4f + 2f, base.position.Y + 2f - velocity.Y * 4f), 8, 8, num1077 switch
				{
					0 => 15, 
					1 => 57, 
					_ => 58, 
				}, 0f, 0f, 100, default(Color), 1.25f);
				Dust dust64 = Main.dust[num213];
				Dust dust212 = dust64;
				dust212.velocity *= 0.1f;
			}
			if (localAI[1] > 7f && type == 132)
			{
				int num214 = Dust.NewDust(new Vector2(base.position.X - velocity.X * 4f + 2f, base.position.Y + 2f - velocity.Y * 4f), 8, 8, 107, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.25f);
				Dust dust63 = Main.dust[num214];
				Dust dust212 = dust63;
				dust212.velocity *= -0.25f;
				num214 = Dust.NewDust(new Vector2(base.position.X - velocity.X * 4f + 2f, base.position.Y + 2f - velocity.Y * 4f), 8, 8, 107, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.25f);
				dust63 = Main.dust[num214];
				dust212 = dust63;
				dust212.velocity *= -0.25f;
				dust63 = Main.dust[num214];
				dust212 = dust63;
				dust212.position -= velocity * 0.5f;
			}
			if (localAI[1] < 15f)
			{
				localAI[1] += 1f;
			}
			else
			{
				if (type == 114 || type == 115)
				{
					int num215 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 4f), 8, 8, 27, oldVelocity.X, oldVelocity.Y, 100, default(Color), 0.6f);
					Dust dust61 = Main.dust[num215];
					Dust dust212 = dust61;
					dust212.velocity *= -0.25f;
				}
				else if (type == 116)
				{
					int num216 = Dust.NewDust(new Vector2(base.position.X - velocity.X * 5f + 2f, base.position.Y + 2f - velocity.Y * 5f), 8, 8, 64, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.5f);
					Dust dust62 = Main.dust[num216];
					Dust dust212 = dust62;
					dust212.velocity *= -0.25f;
					Main.dust[num216].noGravity = true;
				}
				if (localAI[0] == 0f)
				{
					scale -= 0.02f;
					alpha += 30;
					if (alpha >= 250)
					{
						alpha = 255;
						localAI[0] = 1f;
					}
				}
				else if (localAI[0] == 1f)
				{
					scale += 0.02f;
					alpha -= 30;
					if (alpha <= 0)
					{
						alpha = 0;
						localAI[0] = 0f;
					}
				}
			}
			if (this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				if (type == 132)
				{
					SoundEngine.PlaySound(in SoundID.Item60, base.position);
				}
				else
				{
					SoundEngine.PlaySound(in SoundID.Item8, base.position);
				}
			}
			if (type == 157)
			{
				rotation += (float)direction * 0.4f;
				spriteDirection = direction;
			}
			else
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 0.785f;
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
		}
		else if (aiStyle == 28)
		{
			if (type == 967)
			{
				localAI[0]++;
				if (localAI[0] >= 5f && timeLeft % 3 == 0)
				{
					localAI[0] = 5f;
					int num217 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 219, velocity.X, velocity.Y, 0, default(Color), 0.35f + (float)Main.rand.Next(-5, 5) * 0.01f);
					Main.dust[num217].noGravity = true;
					Main.dust[num217].velocity = velocity * 1.5f;
				}
				if (++frameCounter > 6)
				{
					frameCounter = 0;
					frame++;
					if (frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
			}
			if (type == 177)
			{
				for (int num219 = 0; num219 < 3; num219++)
				{
					int num220 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 137, velocity.X, velocity.Y, Main.rand.Next(0, 101), default(Color), 1f + (float)Main.rand.Next(-20, 40) * 0.01f);
					Main.dust[num220].noGravity = true;
					Dust dust71 = Main.dust[num220];
					Dust dust212 = dust71;
					dust212.velocity *= 0.3f;
				}
			}
			if (type == 118)
			{
				for (int num221 = 0; num221 < 2; num221++)
				{
					int num222 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 92, velocity.X, velocity.Y, 50, default(Color), 1.2f);
					Main.dust[num222].noGravity = true;
					Dust dust70 = Main.dust[num222];
					Dust dust212 = dust70;
					dust212.velocity *= 0.3f;
				}
			}
			if (type == 119 || type == 128 || type == 359)
			{
				for (int num223 = 0; num223 < 3; num223++)
				{
					int num224 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 92, velocity.X, velocity.Y, 50, default(Color), 1.2f);
					Main.dust[num224].noGravity = true;
					Dust dust69 = Main.dust[num224];
					Dust dust212 = dust69;
					dust212.velocity *= 0.3f;
				}
			}
			if (type == 309)
			{
				for (int num225 = 0; num225 < 3; num225++)
				{
					int num226 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 185, velocity.X, velocity.Y, 50, default(Color), 1.2f);
					Main.dust[num226].noGravity = true;
					Dust dust68 = Main.dust[num226];
					Dust dust212 = dust68;
					dust212.velocity *= 0.3f;
				}
			}
			if (type == 129)
			{
				for (int num227 = 0; num227 < 6; num227++)
				{
					int num228 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 106, velocity.X, velocity.Y, 100);
					Main.dust[num228].noGravity = true;
					Dust dust67 = Main.dust[num228];
					Dust dust212 = dust67;
					dust212.velocity *= 0.1f + (float)Main.rand.Next(4) * 0.1f;
					dust67 = Main.dust[num228];
					dust212 = dust67;
					dust212.scale *= 1f + (float)Main.rand.Next(5) * 0.1f;
				}
			}
			if (this.ai[1] != 0f)
			{
				return;
			}
			this.ai[1] = 1f;
			if (type == 967)
			{
				for (int num230 = 0; num230 < 10; num230++)
				{
					int num231 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 219, velocity.X, velocity.Y, 0, default(Color), 0.4f + (float)Main.rand.Next(-20, 40) * 0.01f);
					Main.dust[num231].noGravity = true;
					Main.dust[num231].velocity = (velocity * 0.5f).RotatedByRandom(0.5);
				}
				SoundEngine.PlaySound(in SoundID.Item60, base.position);
			}
			else
			{
				SoundEngine.PlaySound(in SoundID.Item28, base.position);
			}
		}
		else if (aiStyle == 29)
		{
			if (type == 619)
			{
				int num232 = (int)this.ai[0];
				for (int num233 = 0; num233 < 3; num233++)
				{
					int num235 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 254, velocity.X, velocity.Y, num232, default(Color), 1.2f);
					Main.dust[num235].position = (Main.dust[num235].position + base.Center) / 2f;
					Main.dust[num235].noGravity = true;
					Dust dust73 = Main.dust[num235];
					Dust dust212 = dust73;
					dust212.velocity *= 0.5f;
				}
				for (int num236 = 0; num236 < 2; num236++)
				{
					int num234 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 255, velocity.X, velocity.Y, num232, default(Color), 0.4f);
					switch (num236)
					{
					case 0:
						Main.dust[num234].position = (Main.dust[num234].position + base.Center * 5f) / 6f;
						break;
					case 1:
						Main.dust[num234].position = (Main.dust[num234].position + (base.Center + velocity / 2f) * 5f) / 6f;
						break;
					}
					Dust dust72 = Main.dust[num234];
					Dust dust212 = dust72;
					dust212.velocity *= 0.1f;
					Main.dust[num234].noGravity = true;
					Main.dust[num234].fadeIn = 1f;
				}
			}
			else if (type == 620)
			{
				int num237 = (int)this.ai[0];
				this.ai[1] += 1f;
				float num238 = (60f - this.ai[1]) / 60f;
				if (this.ai[1] > 40f)
				{
					Kill();
				}
				velocity.Y += 0.2f;
				if (velocity.Y > 18f)
				{
					velocity.Y = 18f;
				}
				velocity.X *= 0.98f;
				for (int num239 = 0; num239 < 2; num239++)
				{
					int num241 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, num237, velocity.X, velocity.Y, 50, default(Color), 1.1f);
					Main.dust[num241].position = (Main.dust[num241].position + base.Center) / 2f;
					Main.dust[num241].noGravity = true;
					Dust dust76 = Main.dust[num241];
					Dust dust212 = dust76;
					dust212.velocity *= 0.3f;
					dust76 = Main.dust[num241];
					dust212 = dust76;
					dust212.scale *= num238;
				}
				for (int num243 = 0; num243 < 1; num243++)
				{
					int num240 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, num237, velocity.X, velocity.Y, 50, default(Color), 0.6f);
					Main.dust[num240].position = (Main.dust[num240].position + base.Center * 5f) / 6f;
					Dust dust74 = Main.dust[num240];
					Dust dust212 = dust74;
					dust212.velocity *= 0.1f;
					Main.dust[num240].noGravity = true;
					Main.dust[num240].fadeIn = 0.9f * num238;
					dust74 = Main.dust[num240];
					dust212 = dust74;
					dust212.scale *= num238;
				}
			}
			else if (type == 521)
			{
				for (int num244 = 0; num244 < 3; num244++)
				{
					int num246 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 254, velocity.X, velocity.Y, 50, default(Color), 1.2f);
					Main.dust[num246].position = (Main.dust[num246].position + base.Center) / 2f;
					Main.dust[num246].noGravity = true;
					Dust dust78 = Main.dust[num246];
					Dust dust212 = dust78;
					dust212.velocity *= 0.5f;
				}
				for (int num247 = 0; num247 < 2; num247++)
				{
					int num245 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 255, velocity.X, velocity.Y, 50, default(Color), 0.4f);
					switch (num247)
					{
					case 0:
						Main.dust[num245].position = (Main.dust[num245].position + base.Center * 5f) / 6f;
						break;
					case 1:
						Main.dust[num245].position = (Main.dust[num245].position + (base.Center + velocity / 2f) * 5f) / 6f;
						break;
					}
					Dust dust77 = Main.dust[num245];
					Dust dust212 = dust77;
					dust212.velocity *= 0.1f;
					Main.dust[num245].noGravity = true;
					Main.dust[num245].fadeIn = 1f;
				}
			}
			else if (type == 522)
			{
				this.ai[1] += 1f;
				float num248 = (60f - this.ai[1]) / 60f;
				if (this.ai[1] > 40f)
				{
					Kill();
				}
				velocity.Y += 0.2f;
				if (velocity.Y > 18f)
				{
					velocity.Y = 18f;
				}
				velocity.X *= 0.98f;
				for (int num249 = 0; num249 < 2; num249++)
				{
					int num251 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 254, velocity.X, velocity.Y, 50, default(Color), 1.1f);
					Main.dust[num251].position = (Main.dust[num251].position + base.Center) / 2f;
					Main.dust[num251].noGravity = true;
					Dust dust80 = Main.dust[num251];
					Dust dust212 = dust80;
					dust212.velocity *= 0.3f;
					dust80 = Main.dust[num251];
					dust212 = dust80;
					dust212.scale *= num248;
				}
				for (int num252 = 0; num252 < 1; num252++)
				{
					int num250 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 255, velocity.X, velocity.Y, 50, default(Color), 0.6f);
					Main.dust[num250].position = (Main.dust[num250].position + base.Center * 5f) / 6f;
					Dust dust79 = Main.dust[num250];
					Dust dust212 = dust79;
					dust212.velocity *= 0.1f;
					Main.dust[num250].noGravity = true;
					Main.dust[num250].fadeIn = 0.9f * num248;
					dust79 = Main.dust[num250];
					dust212 = dust79;
					dust212.scale *= num248;
				}
			}
			else if (type == 731)
			{
				if (++frameCounter >= 4)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				alpha -= 15;
				if (alpha < 0)
				{
					alpha = 0;
				}
				this.ai[0]++;
				if ((int)this.ai[0] % 2 != 0 && Main.rand.Next(4) == 0)
				{
					this.ai[0]++;
				}
				float num253 = 5f;
				switch ((int)this.ai[0])
				{
				case 10:
					velocity.Y -= num253;
					break;
				case 12:
					velocity.Y += num253;
					break;
				case 18:
					velocity.Y += num253;
					break;
				case 20:
					velocity.Y -= num253;
					this.ai[0] = 0f;
					break;
				}
				if (Main.rand.Next(3) == 0)
				{
					Dust dust3 = Dust.NewDustDirect(base.position, width, height, 226, velocity.X, velocity.Y, 50, default(Color), 0.4f);
					dust3.noGravity = true;
					dust3.velocity = dust3.velocity * 0f + velocity * 0.5f;
					if (Main.rand.Next(3) != 0)
					{
						Dust dust82 = dust3;
						Dust dust212 = dust82;
						dust212.velocity *= 1.4f;
					}
				}
				Lighting.AddLight(base.Center, 0.2f, 0.5f, 0.7f);
			}
			else
			{
				int num254 = type - 121 + 86;
				if (type == 597)
				{
					num254 = 262;
				}
				for (int num256 = 0; num256 < 2; num256++)
				{
					int num257 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, num254, velocity.X, velocity.Y, 50, default(Color), 1.2f);
					Main.dust[num257].noGravity = true;
					Dust dust83 = Main.dust[num257];
					Dust dust212 = dust83;
					dust212.velocity *= 0.3f;
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(in SoundID.Item8, base.position);
				}
			}
		}
		else if (aiStyle == 30)
		{
			if (type == 907)
			{
				float num258 = 100f;
				float num259 = num258 - 50f;
				if (Main.rand.Next(Math.Max(4, 8 - (int)((Vector2)(ref velocity)).Length())) == 0)
				{
					int num260 = 5;
					int num261 = Dust.NewDust(base.position + new Vector2((float)num260, (float)num260), width - num260 * 2, height - num260 * 2, 43, 0f, 0f, 254, new Color(255, 255, 0));
					Main.dust[num261].velocity = velocity * 0.75f;
				}
				if (this.ai[0] > num259)
				{
					velocity *= 0.9f;
					rotation *= 0.9f;
				}
				else
				{
					rotation += 0.2f;
					if (rotation > (float)Math.PI * 2f)
					{
						rotation -= (float)Math.PI * 2f;
					}
				}
				float num262 = this.ai[0];
				this.ai[0]++;
				if (Main.myPlayer == owner && this.ai[0] < num259 && this.ai[0] % 10f == 0f)
				{
					float num263 = (float)Math.PI / 2f * (float)((this.ai[0] % 20f != 0f) ? 1 : (-1));
					num263 *= (float)((whoAmI % 2 != 0) ? 1 : (-1));
					num263 += (float)Main.rand.Next(-5, 5) * MathHelper.Lerp(0.2f, 0.03f, this.ai[0] / num259);
					Vector2 spinningpoint20 = velocity;
					double radians3 = num263;
					val4 = default(Vector2);
					Vector2 v3 = spinningpoint20.RotatedBy(radians3, val4);
					v3 = v3.SafeNormalize(Vector2.Zero);
					v3 *= Math.Max(2.5f, (num259 - this.ai[0]) / num259 * (7f + (-2f + (float)Main.rand.Next(2) * 2f)));
					int num264 = NewProjectile(GetProjectileSource_FromThis(), base.Center, v3, 335, damage, knockBack * 0.25f, owner, 0f, Main.rand.Next(4));
				}
				if (num262 <= num259 && this.ai[0] > num259)
				{
					netUpdate = true;
				}
				if (this.ai[0] > num258)
				{
					Kill();
				}
			}
			else if (type == 335)
			{
				int num265 = (frame = (int)this.ai[1]);
				if (this.ai[0] < 0f)
				{
					velocity.Y += 0.25f;
					if (velocity.Y > 14f)
					{
						velocity.Y = 14f;
					}
				}
				else
				{
					if (Main.rand.Next(Math.Max(4, 8 - (int)((Vector2)(ref velocity)).Length())) == 0)
					{
						Color newColor = Color.White;
						switch (num265)
						{
						case 0:
							((Color)(ref newColor))._002Ector(255, 100, 100);
							break;
						case 1:
							((Color)(ref newColor))._002Ector(100, 255, 100);
							break;
						case 2:
							((Color)(ref newColor))._002Ector(100, 100, 255);
							break;
						case 3:
							((Color)(ref newColor))._002Ector(255, 255, 100);
							break;
						}
						int num267 = 5;
						int num268 = Dust.NewDust(base.position + new Vector2((float)num267, (float)num267), width - num267 * 2, height - num267 * 2, 43, 0f, 0f, 254, newColor);
						Main.dust[num268].velocity = velocity * 0.75f;
					}
					velocity *= 0.95f;
				}
				if (this.ai[0] >= 0f && ((Vector2)(ref velocity)).Length() < 0.25f)
				{
					if (velocity != Vector2.Zero)
					{
						velocity = Vector2.Zero;
						if (Main.netMode != 1)
						{
							this.ai[0] = 50f;
							netUpdate = true;
						}
					}
					this.ai[0]--;
				}
				localAI[0]++;
				rotation = (float)Math.Sin(localAI[0] / 10f);
			}
			else
			{
				velocity *= 0.8f;
				rotation += 0.2f;
				alpha += 4;
				if (alpha >= 255)
				{
					Kill();
				}
			}
		}
		else if (aiStyle == 31)
		{
			bool flag3 = this.ai[1] == 1f;
			short num269 = 110;
			int num270 = 0;
			switch (type)
			{
			default:
				num269 = 110;
				num270 = 0;
				break;
			case 147:
				num269 = 112;
				num270 = 1;
				break;
			case 146:
				num269 = 111;
				num270 = 2;
				break;
			case 148:
				num269 = 113;
				num270 = 3;
				break;
			case 149:
				num269 = 114;
				num270 = 4;
				break;
			case 1015:
				num269 = 311;
				num270 = 5;
				break;
			case 1016:
				num269 = 312;
				num270 = 6;
				break;
			case 1017:
				num269 = 313;
				num270 = 7;
				break;
			}
			if (owner == Main.myPlayer)
			{
				int size = 2;
				if (flag3)
				{
					size = 3;
				}
				Point point = base.Center.ToTileCoordinates();
				WorldGen.Convert(point.X, point.Y, num270, size);
			}
			if (timeLeft > 133)
			{
				timeLeft = 133;
			}
			int num271 = 7;
			if (flag3)
			{
				num271 = 3;
			}
			if (this.ai[0] > (float)num271)
			{
				float num272 = 1f;
				if (this.ai[0] == (float)(num271 + 1))
				{
					num272 = 0.2f;
				}
				else if (this.ai[0] == (float)(num271 + 2))
				{
					num272 = 0.4f;
				}
				else if (this.ai[0] == (float)(num271 + 3))
				{
					num272 = 0.6f;
				}
				else if (this.ai[0] == (float)(num271 + 4))
				{
					num272 = 0.8f;
				}
				int num273 = 0;
				if (flag3)
				{
					num272 *= 1.2f;
					num273 = (int)(12f * num272);
				}
				this.ai[0]++;
				for (int num274 = 0; num274 < 1; num274++)
				{
					int num275 = Dust.NewDust(new Vector2(base.position.X - (float)num273, base.position.Y - (float)num273), width + num273 * 2, height + num273 * 2, num269, velocity.X * 0.2f, velocity.Y * 0.2f, 100);
					Main.dust[num275].noGravity = true;
					Dust dust84 = Main.dust[num275];
					Dust dust212 = dust84;
					dust212.scale *= 1.75f;
					Main.dust[num275].velocity.X *= 2f;
					Main.dust[num275].velocity.Y *= 2f;
					dust84 = Main.dust[num275];
					dust212 = dust84;
					dust212.scale *= num272;
				}
			}
			else
			{
				this.ai[0]++;
			}
			rotation += 0.3f * (float)direction;
		}
		else if (aiStyle == 32)
		{
			timeLeft = 10;
			this.ai[0] += 1f;
			if (this.ai[0] >= 20f)
			{
				this.ai[0] = 18f;
				Rectangle rectangle3 = default(Rectangle);
				((Rectangle)(ref rectangle3))._002Ector((int)base.position.X, (int)base.position.Y, width, height);
				for (int num276 = 0; num276 < 255; num276++)
				{
					Entity entity2 = Main.player[num276];
					if (entity2.active && ((Rectangle)(ref rectangle3)).Intersects(entity2.Hitbox))
					{
						this.ai[0] = 0f;
						velocity.Y = -4.5f;
						if (velocity.X > 2f)
						{
							velocity.X = 2f;
						}
						if (velocity.X < -2f)
						{
							velocity.X = -2f;
						}
						velocity.X = (velocity.X + (float)entity2.direction * 1.75f) / 2f;
						velocity.X += entity2.velocity.X * 3f;
						velocity.Y += entity2.velocity.Y;
						if (velocity.X > 6f)
						{
							velocity.X = 6f;
						}
						if (velocity.X < -6f)
						{
							velocity.X = -6f;
						}
						if (((Vector2)(ref velocity)).Length() > 16f)
						{
							velocity = velocity.SafeNormalize(Vector2.Zero) * 16f;
						}
						netUpdate = true;
						this.ai[1] += 1f;
					}
				}
				for (int num278 = 0; num278 < 1000; num278++)
				{
					if (num278 == whoAmI)
					{
						continue;
					}
					Entity entity = Main.projectile[num278];
					if (entity.active && ((Rectangle)(ref rectangle3)).Intersects(entity.Hitbox))
					{
						this.ai[0] = 0f;
						velocity.Y = -4.5f;
						if (velocity.X > 2f)
						{
							velocity.X = 2f;
						}
						if (velocity.X < -2f)
						{
							velocity.X = -2f;
						}
						velocity.X = (velocity.X + (float)entity.direction * 1.75f) / 2f;
						velocity.X += entity.velocity.X * 3f;
						velocity.Y += entity.velocity.Y;
						if (velocity.X > 6f)
						{
							velocity.X = 6f;
						}
						if (velocity.X < -6f)
						{
							velocity.X = -6f;
						}
						if (((Vector2)(ref velocity)).Length() > 16f)
						{
							velocity = velocity.SafeNormalize(Vector2.Zero) * 16f;
						}
						netUpdate = true;
						this.ai[1] += 1f;
					}
				}
			}
			if (velocity.X == 0f && velocity.Y == 0f)
			{
				Kill();
			}
			rotation += 0.02f * velocity.X;
			if (velocity.Y == 0f)
			{
				velocity.X *= 0.98f;
			}
			else if (wet)
			{
				velocity.X *= 0.99f;
			}
			else
			{
				velocity.X *= 0.995f;
			}
			if ((double)velocity.X > -0.03 && (double)velocity.X < 0.03)
			{
				velocity.X = 0f;
			}
			if (wet)
			{
				this.ai[1] = 0f;
				if (velocity.Y > 0f)
				{
					velocity.Y *= 0.95f;
				}
				velocity.Y -= 0.1f;
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
				if (velocity.X == 0f)
				{
					Kill();
				}
			}
			else
			{
				velocity.Y += 0.1f;
			}
			if (velocity.Y > 10f)
			{
				velocity.Y = 10f;
			}
		}
		else if (aiStyle == 33)
		{
			if (alpha > 0)
			{
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			float num279 = 4f;
			float num280 = this.ai[0];
			float num281 = this.ai[1];
			if (num280 == 0f && num281 == 0f)
			{
				num280 = 1f;
			}
			float num282 = (float)Math.Sqrt(num280 * num280 + num281 * num281);
			num282 = num279 / num282;
			num280 *= num282;
			num281 *= num282;
			if (alpha < 70)
			{
				short num283 = 127;
				switch (type)
				{
				case 163:
					num283 = 127;
					break;
				case 310:
					num283 = 187;
					break;
				case 1008:
					num283 = 169;
					break;
				case 1009:
					num283 = 75;
					break;
				case 1010:
					num283 = 66;
					break;
				case 1011:
					num283 = 310;
					break;
				}
				int num284 = Dust.NewDust(new Vector2(base.position.X, base.position.Y - 2f), 6, 6, num283, velocity.X, velocity.Y, 100, default(Color), 1.6f);
				Main.dust[num284].noGravity = true;
				Main.dust[num284].position.X -= num280 * 1f;
				Main.dust[num284].position.Y -= num281 * 1f;
				Main.dust[num284].velocity.X -= num280;
				Main.dust[num284].velocity.Y -= num281;
				if (type == 1010)
				{
					Main.dust[num284].color = Main.hslToRgb(Main.GlobalTimeWrappedHourly * 0.6f % 1f, 1f, 0.5f);
					Dust dust85 = Main.dust[num284];
					Dust dust212 = dust85;
					dust212.scale *= 0.5f;
					dust85 = Main.dust[num284];
					dust212 = dust85;
					dust212.velocity *= 0.75f;
				}
			}
			if (localAI[0] == 0f)
			{
				this.ai[0] = velocity.X;
				this.ai[1] = velocity.Y;
				localAI[1] += 1f;
				if (localAI[1] >= 30f)
				{
					velocity.Y += 0.09f;
					localAI[1] = 30f;
				}
			}
			else
			{
				if (!Collision.SolidCollision(base.position, width, height))
				{
					localAI[0] = 0f;
					localAI[1] = 30f;
				}
				if (type == 1008 && Main.netMode != 2)
				{
					int num285 = 30;
					val4 = base.Center - Main.player[Main.myPlayer].Center;
					if (((Vector2)(ref val4)).Length() < (float)(Main.screenWidth + num285 * 16))
					{
						Main.instance.SpelunkerProjectileHelper.AddSpotToCheck(base.Center);
					}
				}
				damage = 0;
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
			rotation = (float)Math.Atan2(this.ai[1], this.ai[0]) + 1.57f;
		}
		else if (aiStyle == 34)
		{
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
			if (this.ai[1] == 1f)
			{
				this.ai[0]++;
				if (this.ai[0] == 1f)
				{
					for (int num286 = 0; num286 < 8; num286++)
					{
						int num287 = Dust.NewDust(base.position, width, height, 6, 0f, 0f, 100, default(Color), 1.8f);
						Main.dust[num287].noGravity = true;
						Dust dust87 = Main.dust[num287];
						Dust dust212 = dust87;
						dust212.velocity *= 3f;
						Main.dust[num287].fadeIn = 0.5f;
						dust87 = Main.dust[num287];
						dust212 = dust87;
						dust212.position += velocity / 2f;
						dust87 = Main.dust[num287];
						dust212 = dust87;
						dust212.velocity += velocity / 4f + Main.player[owner].velocity * 0.1f;
					}
				}
				if (this.ai[0] > 2f)
				{
					int num289 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 20f), 8, 8, 6, velocity.X, velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num289].noGravity = true;
					Dust dust86 = Main.dust[num289];
					Dust dust212 = dust86;
					dust212.velocity *= 0.2f;
					Main.dust[num289].position = Main.dust[num289].position.RotatedBy(rotation, base.Center);
					num289 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 15f), 8, 8, 6, velocity.X, velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num289].noGravity = true;
					dust86 = Main.dust[num289];
					dust212 = dust86;
					dust212.velocity *= 0.2f;
					Main.dust[num289].position = Main.dust[num289].position.RotatedBy(rotation, base.Center);
					num289 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 10f), 8, 8, 6, velocity.X, velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num289].noGravity = true;
					dust86 = Main.dust[num289];
					dust212 = dust86;
					dust212.velocity *= 0.2f;
					Main.dust[num289].position = Main.dust[num289].position.RotatedBy(rotation, base.Center);
				}
			}
			else if (type >= 415 && type <= 418)
			{
				this.ai[0]++;
				if (this.ai[0] > 4f)
				{
					int num290 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 20f), 8, 8, 6, velocity.X, velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num290].noGravity = true;
					Dust dust88 = Main.dust[num290];
					Dust dust212 = dust88;
					dust212.velocity *= 0.2f;
					Main.dust[num290].position = Main.dust[num290].position.RotatedBy(rotation, base.Center);
				}
			}
			else
			{
				int num291 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 20f), 8, 8, 6, velocity.X, velocity.Y, 100, default(Color), 1.2f);
				Main.dust[num291].noGravity = true;
				Dust dust89 = Main.dust[num291];
				Dust dust212 = dust89;
				dust212.velocity *= 0.2f;
				Main.dust[num291].position = Main.dust[num291].position.RotatedBy(rotation, base.Center);
			}
		}
		else if (aiStyle == 35)
		{
			this.ai[0] += 1f;
			if (this.ai[0] > 30f)
			{
				velocity.Y += 0.2f;
				velocity.X *= 0.985f;
				if (velocity.Y > 14f)
				{
					velocity.Y = 14f;
				}
			}
			rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * (float)direction * 0.02f;
			if (owner != Main.myPlayer)
			{
				return;
			}
			Vector2 vector96 = Collision.TileCollision(base.position, velocity, width, height, fallThrough: true, fall2: true);
			bool flag4 = false;
			if (vector96 != velocity)
			{
				flag4 = true;
			}
			else
			{
				int num292 = (int)(base.Center.X + velocity.X) / 16;
				int num293 = (int)(base.Center.Y + velocity.Y) / 16;
				if (Main.tile[num292, num293] != null && Main.tile[num292, num293].active() && Main.tile[num292, num293].bottomSlope())
				{
					flag4 = true;
					base.position.Y = num293 * 16 + 16 + 8;
					base.position.X = num292 * 16 + 8;
				}
			}
			if (!flag4)
			{
				return;
			}
			int num294 = 213;
			if (type == 475)
			{
				num294 = 353;
			}
			if (type == 506)
			{
				num294 = 366;
			}
			if (type == 505)
			{
				num294 = 365;
			}
			int num295 = (int)(base.position.X + (float)(width / 2)) / 16;
			int num296 = (int)(base.position.Y + (float)(height / 2)) / 16;
			base.position += vector96;
			int num297 = 10;
			if (Main.tile[num295, num296] == null)
			{
				return;
			}
			for (; WorldGen.IsRope(num295, num296); num296++)
			{
			}
			bool flag5 = false;
			while (num297 > 0)
			{
				bool flag6 = false;
				if (Main.tile[num295, num296] == null)
				{
					break;
				}
				if (Main.tile[num295, num296].active())
				{
					if (Main.tile[num295, num296].type == 314 || TileID.Sets.Platforms[Main.tile[num295, num296].type])
					{
						flag5 = !flag5;
					}
					else if (Main.tileCut[Main.tile[num295, num296].type] || Main.tile[num295, num296].type == 165)
					{
						flag5 = false;
						WorldGen.KillTile(num295, num296);
						NetMessage.SendData(17, -1, -1, null, 0, num295, num296);
					}
				}
				if (!Main.tile[num295, num296].active())
				{
					flag5 = false;
					flag6 = true;
					WorldGen.PlaceTile(num295, num296, num294);
					NetMessage.SendData(17, -1, -1, null, 1, num295, num296, num294);
					this.ai[1] += 1f;
				}
				else if (!flag5)
				{
					num297 = 0;
				}
				if (flag6)
				{
					num297--;
				}
				num296++;
			}
			Kill();
		}
		else if (aiStyle == 36)
		{
			if (type != 307 && wet && !honeyWet && !shimmerWet)
			{
				Kill();
			}
			if (alpha > 0)
			{
				alpha -= 50;
			}
			else
			{
				extraUpdates = 0;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (type == 307)
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
				frameCounter++;
				if (frameCounter >= 6)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame >= 2)
				{
					frame = 0;
				}
				for (int num298 = 0; num298 < 3; num298++)
				{
					float num301 = velocity.X / 3f * (float)num298;
					float num302 = velocity.Y / 3f * (float)num298;
					int num303 = Dust.NewDust(base.position, width, height, 184);
					Main.dust[num303].position.X = base.Center.X - num301;
					Main.dust[num303].position.Y = base.Center.Y - num302;
					Dust dust95 = Main.dust[num303];
					Dust dust212 = dust95;
					dust212.velocity *= 0f;
					Main.dust[num303].scale = 0.5f;
				}
			}
			else
			{
				if (type == 316)
				{
					if (velocity.X > 0f)
					{
						spriteDirection = -1;
					}
					else if (velocity.X < 0f)
					{
						spriteDirection = 1;
					}
				}
				else if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				else if (velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				rotation = velocity.X * 0.1f;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame >= 3)
				{
					frame = 0;
				}
			}
			float num304 = base.position.X;
			float num305 = base.position.Y;
			float num306 = 100000f;
			bool flag7 = false;
			this.ai[0] += 1f;
			if (this.ai[0] > 30f)
			{
				this.ai[0] = 30f;
				for (int num307 = 0; num307 < 200; num307++)
				{
					if (Main.npc[num307].CanBeChasedBy(this) && (!Main.npc[num307].wet || Main.npc[num307].type == 370 || type == 307))
					{
						float num308 = Main.npc[num307].position.X + (float)(Main.npc[num307].width / 2);
						float num309 = Main.npc[num307].position.Y + (float)(Main.npc[num307].height / 2);
						float num310 = Math.Abs(base.position.X + (float)(width / 2) - num308) + Math.Abs(base.position.Y + (float)(height / 2) - num309);
						if (num310 < 800f && num310 < num306 && Collision.CanHit(base.position, width, height, Main.npc[num307].position, Main.npc[num307].width, Main.npc[num307].height))
						{
							num306 = num310;
							num304 = num308;
							num305 = num309;
							flag7 = true;
						}
					}
				}
			}
			if (!flag7)
			{
				num304 = base.position.X + (float)(width / 2) + velocity.X * 100f;
				num305 = base.position.Y + (float)(height / 2) + velocity.Y * 100f;
			}
			else if (type == 307)
			{
				friendly = true;
			}
			float num312 = 6f;
			float num313 = 0.1f;
			if (type == 189)
			{
				num312 = 9f;
				num313 = 0.2f;
			}
			if (type == 307)
			{
				num312 = 13f;
				num313 = 0.35f;
			}
			if (type == 316)
			{
				if (flag7)
				{
					num312 = 13f;
					num313 = 0.325f;
				}
				else
				{
					num312 = 10f;
					num313 = 0.25f;
				}
			}
			if (type == 566)
			{
				num312 = 6.8f;
				num313 = 0.14f;
			}
			Vector2 vector97 = default(Vector2);
			((Vector2)(ref vector97))._002Ector(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
			float num314 = num304 - vector97.X;
			float num315 = num305 - vector97.Y;
			float num316 = (float)Math.Sqrt(num314 * num314 + num315 * num315);
			float num317 = num316;
			num316 = num312 / num316;
			num314 *= num316;
			num315 *= num316;
			if (velocity.X < num314)
			{
				velocity.X += num313;
				if (velocity.X < 0f && num314 > 0f)
				{
					velocity.X += num313 * 2f;
				}
			}
			else if (velocity.X > num314)
			{
				velocity.X -= num313;
				if (velocity.X > 0f && num314 < 0f)
				{
					velocity.X -= num313 * 2f;
				}
			}
			if (velocity.Y < num315)
			{
				velocity.Y += num313;
				if (velocity.Y < 0f && num315 > 0f)
				{
					velocity.Y += num313 * 2f;
				}
			}
			else if (velocity.Y > num315)
			{
				velocity.Y -= num313;
				if (velocity.Y > 0f && num315 < 0f)
				{
					velocity.Y -= num313 * 2f;
				}
			}
		}
		else if (aiStyle == 37)
		{
			if (this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				localAI[0] = base.Center.X - velocity.X * 1.5f;
				localAI[1] = base.Center.Y - velocity.Y * 1.5f;
			}
			Vector2 vector98 = default(Vector2);
			((Vector2)(ref vector98))._002Ector(localAI[0], localAI[1]);
			rotation = (base.Center - vector98).ToRotation() - (float)Math.PI / 2f;
			if (this.ai[0] == 0f)
			{
				if (Collision.SolidCollision(base.position, width, height))
				{
					velocity *= -1f;
					this.ai[0] += 1f;
					return;
				}
				float num318 = Vector2.Distance(base.Center, vector98);
				if (num318 > 300f)
				{
					velocity *= -1f;
					this.ai[0] += 1f;
				}
			}
			else if (Collision.SolidCollision(base.position, width, height) || Vector2.Distance(base.Center, vector98) < ((Vector2)(ref velocity)).Length())
			{
				Kill();
			}
		}
		else if (aiStyle == 38)
		{
			this.ai[0] += 1f;
			if (this.ai[0] >= 6f)
			{
				this.ai[0] = 0f;
				SoundEngine.PlaySound(in SoundID.Item34, base.position);
				if (Main.myPlayer == owner)
				{
					NewProjectile(GetProjectileSource_FromThis(), base.position.X, base.position.Y, velocity.X, velocity.Y, 188, damage, knockBack, owner);
				}
			}
		}
		else if (aiStyle == 39)
		{
			alpha -= 50;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (!active || !Main.player[owner].active || Main.player[owner].dead || Vector2.Distance(Main.player[owner].Center, base.Center) > 2000f)
			{
				Kill();
				return;
			}
			if (active && alpha == 0)
			{
				Main.player[owner].SetDummyItemTime(5);
				if (base.Center.X > Main.player[owner].Center.X)
				{
					Main.player[owner].ChangeDir(1);
				}
				else
				{
					Main.player[owner].ChangeDir(-1);
				}
			}
			Vector2 center = base.Center;
			float num319 = Main.player[owner].Center.X - center.X;
			float num320 = Main.player[owner].Center.Y - center.Y;
			float num321 = (float)Math.Sqrt(num319 * num319 + num320 * num320);
			if (!Main.player[owner].channel && active && alpha == 0)
			{
				this.ai[0] = 1f;
				this.ai[1] = -1f;
			}
			if (this.ai[1] > 0f && num321 > 1500f)
			{
				this.ai[1] = 0f;
				this.ai[0] = 1f;
			}
			if (this.ai[1] > 0f)
			{
				tileCollide = false;
				int num322 = (int)this.ai[1] - 1;
				if (Main.npc[num322].active && Main.npc[num322].life > 0)
				{
					float num323 = 16f;
					center = base.Center;
					num319 = Main.npc[num322].Center.X - center.X;
					num320 = Main.npc[num322].Center.Y - center.Y;
					num321 = (float)Math.Sqrt(num319 * num319 + num320 * num320);
					if (num321 < num323)
					{
						velocity.X = num319;
						velocity.Y = num320;
						if (num321 > num323 / 3f)
						{
							if (velocity.X < 0f)
							{
								spriteDirection = -1;
								rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
							}
							else
							{
								spriteDirection = 1;
								rotation = (float)Math.Atan2(velocity.Y, velocity.X);
							}
							if (type == 190)
							{
								velocity.X = 0f;
								velocity.Y = 0f;
							}
						}
					}
					else
					{
						if (num321 == 0f)
						{
							num321 = 0.0001f;
						}
						num321 = num323 / num321;
						num319 *= num321;
						num320 *= num321;
						velocity.X = num319;
						velocity.Y = num320;
						if (velocity.X < 0f)
						{
							spriteDirection = -1;
							rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
						}
						else
						{
							spriteDirection = 1;
							rotation = (float)Math.Atan2(velocity.Y, velocity.X);
						}
					}
					if (type == 190)
					{
						base.position += Main.npc[num322].velocity;
						for (int num324 = 0; num324 < 1000; num324++)
						{
							if (num324 != whoAmI && Main.projectile[num324].active && Main.projectile[num324].owner == owner && Main.projectile[num324].type == 190 && Vector2.Distance(base.Center, Main.projectile[num324].Center) < 8f)
							{
								if (base.position.X < Main.projectile[num324].position.X)
								{
									velocity.X -= 4f;
								}
								else
								{
									velocity.X += 4f;
								}
								if (base.position.Y < Main.projectile[num324].position.Y)
								{
									velocity.Y -= 4f;
								}
								else
								{
									velocity.Y += 4f;
								}
							}
						}
					}
					if (Main.myPlayer == owner)
					{
						float num325 = this.ai[0];
						this.ai[0] = 1f;
						if (num325 != this.ai[0])
						{
							netUpdate = true;
						}
					}
				}
				else if (Main.myPlayer == owner)
				{
					float num326 = this.ai[1];
					this.ai[1] = 0f;
					if (num326 != this.ai[1])
					{
						netUpdate = true;
					}
					float num327 = base.position.X;
					float num328 = base.position.Y;
					float num329 = 3000f;
					int num330 = -1;
					for (int num331 = 0; num331 < 200; num331++)
					{
						if (Main.npc[num331].CanBeChasedBy(this))
						{
							float x = Main.npc[num331].Center.X;
							float y = Main.npc[num331].Center.Y;
							float num333 = Math.Abs(base.Center.X - x) + Math.Abs(base.Center.Y - y);
							if (num333 < num329 && Collision.CanHit(base.position, width, height, Main.npc[num331].position, Main.npc[num331].width, Main.npc[num331].height))
							{
								num329 = num333;
								num327 = x;
								num328 = y;
								num330 = num331;
							}
						}
					}
					if (num330 >= 0)
					{
						float num334 = 16f;
						center = base.Center;
						num319 = num327 - center.X;
						num320 = num328 - center.Y;
						num321 = (float)Math.Sqrt(num319 * num319 + num320 * num320);
						if (num321 == 0f)
						{
							num321 = 0.0001f;
						}
						num321 = num334 / num321;
						num319 *= num321;
						num320 *= num321;
						velocity.X = num319;
						velocity.Y = num320;
						this.ai[0] = 0f;
						this.ai[1] = num330 + 1;
						netUpdate = true;
					}
				}
			}
			else if (this.ai[0] == 0f)
			{
				if (Main.myPlayer == owner && num321 > 700f)
				{
					this.ai[0] = 1f;
					netUpdate = true;
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
				}
				else
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
				}
			}
			else if (this.ai[0] == 1f)
			{
				tileCollide = false;
				if (velocity.X < 0f)
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
				}
				else
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
				}
				else
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
				}
				float num335 = 20f;
				if (Main.myPlayer == owner && num321 < 70f)
				{
					Kill();
				}
				num321 = num335 / num321;
				num319 *= num321;
				num320 *= num321;
				velocity.X = num319;
				velocity.Y = num320;
				if (type == 190)
				{
					base.position += Main.player[owner].velocity;
				}
			}
			frameCounter++;
			if (frameCounter >= 4)
			{
				frame++;
				frameCounter = 0;
			}
			if (frame >= 4)
			{
				frame = 0;
			}
		}
		else if (aiStyle == 40)
		{
			localAI[0] += 1f;
			if (localAI[0] > 3f)
			{
				localAI[0] = 100f;
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			frameCounter++;
			if (frameCounter >= 3)
			{
				frame++;
				frameCounter = 0;
			}
			if (frame >= 5)
			{
				frame = 0;
			}
			velocity.X += this.ai[0];
			velocity.Y += this.ai[1];
			localAI[1] += 1f;
			if (localAI[1] == 50f)
			{
				localAI[1] = 51f;
				this.ai[0] = (float)Main.rand.Next(-100, 101) * 6E-05f;
				this.ai[1] = (float)Main.rand.Next(-100, 101) * 6E-05f;
			}
			if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) > 16f)
			{
				velocity.X *= 0.95f;
				velocity.Y *= 0.95f;
			}
			if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < 12f)
			{
				velocity.X *= 1.05f;
				velocity.Y *= 1.05f;
			}
			rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 3.14f;
		}
		else if (aiStyle == 41)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				frame = Main.rand.Next(3);
			}
			rotation += velocity.X * 0.01f;
		}
		else if (aiStyle == 42)
		{
			if (!Main.player[owner].crystalLeaf)
			{
				Kill();
				return;
			}
			base.position.X = Main.player[owner].Center.X - (float)(width / 2);
			base.position.Y = Main.player[owner].Center.Y - (float)(height / 2) + Main.player[owner].gfxOffY - 60f;
			if (Main.player[owner].gravDir == -1f)
			{
				base.position.Y += 120f;
				rotation = 3.14f;
			}
			else
			{
				rotation = 0f;
			}
			base.position.X = (int)base.position.X;
			base.position.Y = (int)base.position.Y;
			float num336 = (float)(int)Main.mouseTextColor / 200f - 0.35f;
			num336 *= 0.2f;
			scale = num336 + 0.95f;
			if (owner != Main.myPlayer || Main.player[owner].crystalLeafCooldown != 0)
			{
				return;
			}
			float x2 = base.position.X;
			float y2 = base.position.Y;
			float num337 = 700f;
			NPC nPC = null;
			for (int num338 = 0; num338 < 200; num338++)
			{
				if (Main.npc[num338].CanBeChasedBy(this))
				{
					float num339 = Main.npc[num338].position.X + (float)(Main.npc[num338].width / 2);
					float num340 = Main.npc[num338].position.Y + (float)(Main.npc[num338].height / 2);
					float num341 = Math.Abs(base.position.X + (float)(width / 2) - num339) + Math.Abs(base.position.Y + (float)(height / 2) - num340);
					if (num341 < num337 && Collision.CanHit(base.position, width, height, Main.npc[num338].position, Main.npc[num338].width, Main.npc[num338].height))
					{
						num337 = num341;
						nPC = Main.npc[num338];
					}
				}
			}
			if (nPC != null)
			{
				float num342 = 12f;
				Vector2 vector99 = default(Vector2);
				((Vector2)(ref vector99))._002Ector(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num344 = x2 - vector99.X;
				float num345 = y2 - vector99.Y;
				float num346 = (float)Math.Sqrt(num344 * num344 + num345 * num345);
				float num347 = num346;
				num346 = num342 / num346;
				num344 *= num346;
				num345 *= num346;
				int num348 = 180;
				Utils.ChaseResults chaseResults = Utils.GetChaseResults(base.Center, num342 * (float)num348, nPC.Center, nPC.velocity);
				if (chaseResults.InterceptionHappens && chaseResults.InterceptionTime <= 180f)
				{
					Vector2 vector100 = chaseResults.ChaserVelocity / (float)num348;
					num344 = vector100.X;
					num345 = vector100.Y;
				}
				NewProjectile(GetProjectileSource_FromThis(), base.Center.X - 4f, base.Center.Y, num344, num345, 227, Player.crystalLeafDamage, Player.crystalLeafKB, owner);
				Main.player[owner].crystalLeafCooldown = 40;
			}
		}
		else if (aiStyle == 43)
		{
			rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 3.14f;
			if (soundDelay == 0 && type == 227)
			{
				soundDelay = -1;
				SoundEngine.PlaySound(6, (int)base.position.X, (int)base.position.Y);
				for (int num349 = 0; num349 < 8; num349++)
				{
					int num350 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 157);
					Main.dust[num350].noGravity = true;
					Dust dust98 = Main.dust[num350];
					Dust dust212 = dust98;
					dust212.velocity *= 3f;
					Main.dust[num350].scale = 1.5f;
					dust98 = Main.dust[num350];
					dust212 = dust98;
					dust212.velocity += velocity * Main.rand.NextFloat();
				}
			}
			float num351 = 1f - (float)timeLeft / 180f;
			float num352 = ((num351 * -6f * 0.85f + 0.33f) % 1f + 1f) % 1f;
			Color value19 = Main.hslToRgb(num352, 1f, 0.5f);
			value19 = Color.Lerp(value19, Color.Red, Utils.Remap(num352, 0.33f, 0.7f, 0f, 1f));
			value19 = Color.Lerp(value19, Color.Lerp(Color.LimeGreen, Color.Gold, 0.3f), (float)(int)((Color)(ref value19)).R / 255f * 1f);
			if (frameCounter++ >= 1)
			{
				frameCounter = 0;
				ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.ChlorophyteLeafCrystalShot, new ParticleOrchestraSettings
				{
					PositionInWorld = base.Center,
					MovementVector = velocity,
					UniqueInfoPiece = (byte)(Main.rgbToHsl(value19).X * 255f)
				});
			}
			Lighting.AddLight(base.Center, new Vector3(0.05f, 0.2f, 0.1f) * 1.5f);
			if (Main.rand.Next(5) == 0)
			{
				Dust dust4 = Dust.NewDustDirect(new Vector2(base.position.X, base.position.Y), width, height, 63);
				dust4.noGravity = true;
				Dust dust97 = dust4;
				Dust dust212 = dust97;
				dust212.velocity *= 0.1f;
				dust4.scale = 1.5f;
				dust97 = dust4;
				dust212 = dust97;
				dust212.velocity += velocity * Main.rand.NextFloat();
				dust4.color = value19;
				ref Color color3 = ref dust4.color;
				((Color)(ref color3)).A = (byte)(((Color)(ref color3)).A / 4);
				dust4.alpha = 100;
				dust4.noLight = true;
			}
		}
		else if (aiStyle == 44)
		{
			int num353 = 6;
			if (type == 228)
			{
				velocity *= 0.96f;
				alpha += 2;
				if (alpha > 200)
				{
					Kill();
				}
			}
			else if (type == 732)
			{
				num353 = 3;
				alpha += 20;
				if (alpha > 255)
				{
					Kill();
				}
				if (Main.rand.Next(5) == 0)
				{
					Dust dust5 = Dust.NewDustDirect(base.position, width, height, 226, 0f, 0f, 150, default(Color), 0.8f);
					dust5.noGravity = true;
					Dust dust99 = dust5;
					Dust dust212 = dust99;
					dust212.velocity *= 1.2f;
				}
				rotation = velocity.ToRotation();
				Lighting.AddLight(base.Center, 0.3f, 0.6f, 0.8f);
			}
			else if (type == 229)
			{
				if (this.ai[0] == 0f)
				{
					SoundEngine.PlaySound(in SoundID.Item8, base.position);
				}
				this.ai[0] += 1f;
				if (this.ai[0] > 20f)
				{
					velocity.Y += 0.3f;
					velocity.X *= 0.98f;
				}
			}
			if (++frameCounter >= num353)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
		}
		else if (aiStyle == 45)
		{
			if (type == 237 || type == 243)
			{
				float num355 = this.ai[0];
				float num356 = this.ai[1];
				if (num355 != 0f && num356 != 0f)
				{
					bool flag8 = false;
					bool flag9 = false;
					if (velocity.X == 0f || (velocity.X < 0f && base.Center.X < num355) || (velocity.X > 0f && base.Center.X > num355))
					{
						velocity.X = 0f;
						flag8 = true;
					}
					if (velocity.Y == 0f || (velocity.Y < 0f && base.Center.Y < num356) || (velocity.Y > 0f && base.Center.Y > num356))
					{
						velocity.Y = 0f;
						flag9 = true;
					}
					if (owner == Main.myPlayer && flag8 && flag9)
					{
						Kill();
					}
				}
				rotation += velocity.X * 0.02f;
				frameCounter++;
				if (frameCounter > 4)
				{
					frameCounter = 0;
					frame++;
					if (frame > 3)
					{
						frame = 0;
					}
				}
			}
			else if (type == 238 || type == 244)
			{
				bool flag10 = true;
				int num357 = (int)base.Center.X;
				int num358 = (int)(base.position.Y + (float)height);
				if (Collision.SolidTiles(new Vector2((float)num357, (float)num358), 2, 20))
				{
					flag10 = false;
				}
				frameCounter++;
				if (frameCounter > 8)
				{
					frameCounter = 0;
					frame++;
					if ((!flag10 && frame > 2) || frame > 5)
					{
						frame = 0;
					}
				}
				this.ai[1] += 1f;
				if (type == 244 && this.ai[1] >= 18000f)
				{
					alpha += 5;
					if (alpha > 255)
					{
						alpha = 255;
						Kill();
					}
				}
				else if (type == 238 && this.ai[1] >= 18000f)
				{
					alpha += 5;
					if (alpha > 255)
					{
						alpha = 255;
						Kill();
					}
				}
				else if (flag10)
				{
					this.ai[0] += 1f;
					if (type == 244)
					{
						if (this.ai[0] > 10f)
						{
							this.ai[0] = 0f;
							if (owner == Main.myPlayer)
							{
								num357 += Main.rand.Next(-14, 15);
								NewProjectile(GetProjectileSource_FromThis(), num357, num358, 0f, 5f, 245, damage, 0f, owner);
							}
						}
					}
					else if (this.ai[0] > 8f)
					{
						this.ai[0] = 0f;
						if (owner == Main.myPlayer)
						{
							num357 += Main.rand.Next(-14, 15);
							NewProjectile(GetProjectileSource_FromThis(), num357, num358, 0f, 5f, 239, damage, 0f, owner);
						}
					}
				}
				localAI[0] += 1f;
				if (!(localAI[0] >= 10f))
				{
					return;
				}
				localAI[0] = 0f;
				int num359 = 0;
				int num360 = 0;
				float num361 = 0f;
				int num362 = type;
				for (int num363 = 0; num363 < 1000; num363++)
				{
					if (Main.projectile[num363].active && Main.projectile[num363].owner == owner && Main.projectile[num363].type == num362 && Main.projectile[num363].ai[1] < 18000f)
					{
						num359++;
						if (Main.projectile[num363].ai[1] > num361)
						{
							num360 = num363;
							num361 = Main.projectile[num363].ai[1];
						}
					}
				}
				if (type == 244)
				{
					if (num359 > 1)
					{
						Main.projectile[num360].netUpdate = true;
						Main.projectile[num360].ai[1] = 18000f;
					}
				}
				else if (num359 > 2)
				{
					Main.projectile[num360].netUpdate = true;
					Main.projectile[num360].ai[1] = 18000f;
				}
			}
			else if (type == 239 || type == 245 || type == 264)
			{
				int num364 = (int)(base.Center.X / 16f);
				int num365 = (int)((base.position.Y + (float)height) / 16f);
				if (WorldGen.InWorld(num364, num365) && Main.tile[num364, num365] != null && Main.tile[num364, num365].liquid == byte.MaxValue && Main.tile[num364, num365].shimmer() && velocity.Y > 0f)
				{
					velocity.Y *= -1f;
					netUpdate = true;
				}
				if (type == 239)
				{
					alpha = 50;
				}
				else if (type == 245)
				{
					alpha = 100;
				}
				else if (type == 264)
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
			}
		}
		else if (aiStyle == 46)
		{
			int num366 = (int)(base.Center.X / 16f);
			int num367 = (int)(base.Center.Y / 16f);
			if (WorldGen.InWorld(num366, num367) && Main.tile[num366, num367] != null && Main.tile[num366, num367].liquid > 0 && Main.tile[num366, num367].shimmer())
			{
				Kill();
			}
			int num368 = 2400;
			if (type == 250)
			{
				Point point2 = base.Center.ToTileCoordinates();
				if (!WorldGen.InWorld(point2.X, point2.Y, 2) || Main.tile[point2.X, point2.Y] == null)
				{
					Kill();
					return;
				}
				if (owner == Main.myPlayer)
				{
					localAI[0] += 1f;
					if (localAI[0] > 4f)
					{
						localAI[0] = 3f;
						NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, velocity.X * 0.001f, velocity.Y * 0.001f, 251, damage, knockBack, owner);
					}
					if (timeLeft > num368)
					{
						timeLeft = num368;
					}
				}
				float num369 = 1f;
				if (velocity.Y < 0f)
				{
					num369 -= velocity.Y / 3f;
				}
				this.ai[0] += num369;
				if (this.ai[0] > 30f)
				{
					velocity.Y += 0.5f;
					if (velocity.Y > 0f)
					{
						velocity.X *= 0.95f;
					}
					else
					{
						velocity.X *= 1.05f;
					}
				}
				float x3 = velocity.X;
				float y3 = velocity.Y;
				float num370 = (float)Math.Sqrt(x3 * x3 + y3 * y3);
				num370 = 15.95f * scale / num370;
				x3 *= num370;
				y3 *= num370;
				velocity.X = x3;
				velocity.Y = y3;
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
				return;
			}
			if (localAI[0] == 0f)
			{
				if (velocity.X > 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
				}
				else
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
				}
				localAI[0] = 1f;
				timeLeft = num368;
			}
			velocity.X *= 0.98f;
			velocity.Y *= 0.98f;
			if (rotation == 0f)
			{
				alpha = 255;
			}
			else if (timeLeft < 10)
			{
				alpha = 255 - (int)(255f * (float)timeLeft / 10f);
			}
			else if (timeLeft > num368 - 10)
			{
				int num371 = num368 - timeLeft;
				alpha = 255 - (int)(255f * (float)num371 / 10f);
			}
			else
			{
				alpha = 0;
			}
		}
		else if (aiStyle == 47)
		{
			AI_047_MagnetSphere();
		}
		else if (aiStyle == 48)
		{
			if (type == 255)
			{
				for (int num372 = 0; num372 < 4; num372++)
				{
					Vector2 vector102 = base.position;
					vector102 -= velocity * ((float)num372 * 0.25f);
					alpha = 255;
					int num373 = Dust.NewDust(vector102, 1, 1, 160);
					Main.dust[num373].position = vector102;
					Main.dust[num373].position.X += width / 2;
					Main.dust[num373].position.Y += height / 2;
					Main.dust[num373].scale = (float)Main.rand.Next(70, 110) * 0.013f;
					Dust dust102 = Main.dust[num373];
					Dust dust212 = dust102;
					dust212.velocity *= 0.2f;
				}
				return;
			}
			if (type == 433)
			{
				for (int num374 = 0; num374 < 2; num374++)
				{
					Vector2 vector103 = base.position;
					vector103 -= velocity * ((float)num374 * 0.25f);
					alpha = 255;
					int num376 = Dust.NewDust(vector103, 1, 1, 160);
					Main.dust[num376].position = vector103;
					Main.dust[num376].position.X += width / 2;
					Main.dust[num376].position.Y += height / 2;
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num376].color = Color.LimeGreen;
					}
					else
					{
						Main.dust[num376].color = Color.CornflowerBlue;
					}
					Main.dust[num376].scale = (float)Main.rand.Next(70, 110) * 0.013f;
					Dust dust103 = Main.dust[num376];
					Dust dust212 = dust103;
					dust212.velocity *= 0.2f;
				}
				return;
			}
			if (type == 290)
			{
				if (localAI[0] == 0f)
				{
					SoundEngine.PlaySound(in SoundID.Item8, base.position);
				}
				localAI[0] += 1f;
				if (localAI[0] > 3f)
				{
					for (int num377 = 0; num377 < 3; num377++)
					{
						Vector2 vector104 = base.position;
						vector104 -= velocity * ((float)num377 * 0.3334f);
						alpha = 255;
						int num378 = Dust.NewDust(vector104, 1, 1, 173);
						Main.dust[num378].position = vector104;
						Main.dust[num378].scale = (float)Main.rand.Next(70, 110) * 0.013f;
						Dust dust104 = Main.dust[num378];
						Dust dust212 = dust104;
						dust212.velocity *= 0.2f;
					}
				}
				return;
			}
			if (type == 294)
			{
				localAI[0] += 1f;
				if (localAI[0] > 9f)
				{
					for (int num379 = 0; num379 < 4; num379++)
					{
						Vector2 vector105 = base.position;
						vector105 -= velocity * ((float)num379 * 0.25f);
						alpha = 255;
						int num380 = Dust.NewDust(vector105, 1, 1, 173);
						Main.dust[num380].position = vector105;
						Main.dust[num380].scale = (float)Main.rand.Next(70, 110) * 0.013f;
						Dust dust105 = Main.dust[num380];
						Dust dust212 = dust105;
						dust212.velocity *= 0.2f;
					}
				}
				return;
			}
			localAI[0] += 1f;
			if (localAI[0] > 3f)
			{
				for (int num381 = 0; num381 < 4; num381++)
				{
					Vector2 vector106 = base.position;
					vector106 -= velocity * ((float)num381 * 0.25f);
					alpha = 255;
					int num382 = Dust.NewDust(vector106, 1, 1, 162);
					Main.dust[num382].position = vector106;
					Main.dust[num382].position.X += width / 2;
					Main.dust[num382].position.Y += height / 2;
					Main.dust[num382].scale = (float)Main.rand.Next(70, 110) * 0.013f;
					Dust dust106 = Main.dust[num382];
					Dust dust212 = dust106;
					dust212.velocity *= 0.2f;
				}
			}
		}
		else if (aiStyle == 49)
		{
			if (this.ai[0] == -2f)
			{
				hostile = true;
				Kill();
				return;
			}
			if (this.ai[0] == -3f)
			{
				Kill();
				return;
			}
			if (soundDelay == 0)
			{
				soundDelay = 3000;
				SoundEngine.PlaySound(in SoundID.Item14, base.position);
			}
			if (this.ai[0] >= 0f)
			{
				if (velocity.X > 0f)
				{
					direction = 1;
				}
				else if (velocity.X < 0f)
				{
					direction = -1;
				}
				spriteDirection = direction;
				this.ai[0] += 1f;
				rotation += velocity.X * 0.05f + (float)direction * 0.05f;
				if (this.ai[0] >= 18f)
				{
					velocity.Y += 0.28f;
					velocity.X *= 0.99f;
				}
				if ((double)velocity.Y > 15.9)
				{
					velocity.Y = 15.9f;
				}
				if (!(this.ai[0] > 2f))
				{
					return;
				}
				alpha = 0;
				if (this.ai[0] == 3f)
				{
					for (int num383 = 0; num383 < 10; num383++)
					{
						int num384 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust108 = Main.dust[num384];
						Dust dust212 = dust108;
						dust212.velocity *= 0.5f;
						dust108 = Main.dust[num384];
						dust212 = dust108;
						dust212.velocity += velocity * 0.1f;
					}
					for (int num385 = 0; num385 < 5; num385++)
					{
						int num389 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num389].noGravity = true;
						Dust dust107 = Main.dust[num389];
						Dust dust212 = dust107;
						dust212.velocity *= 3f;
						dust107 = Main.dust[num389];
						dust212 = dust107;
						dust212.velocity += velocity * 0.2f;
						num389 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100);
						dust107 = Main.dust[num389];
						dust212 = dust107;
						dust212.velocity *= 2f;
						dust107 = Main.dust[num389];
						dust212 = dust107;
						dust212.velocity += velocity * 0.3f;
					}
					for (int num390 = 0; num390 < 1; num390++)
					{
						Vector2 val7 = new Vector2(base.position.X - 10f, base.position.Y - 10f);
						val4 = default(Vector2);
						int num391 = Gore.NewGore(val7, val4, Main.rand.Next(61, 64));
						Gore gore6 = Main.gore[num391];
						Gore gore8 = gore6;
						gore8.position += velocity * 1.25f;
						Main.gore[num391].scale = 1.5f;
						gore6 = Main.gore[num391];
						gore8 = gore6;
						gore8.velocity += velocity * 0.5f;
						gore6 = Main.gore[num391];
						gore8 = gore6;
						gore8.velocity *= 0.02f;
					}
				}
			}
			else if (this.ai[0] == -1f)
			{
				rotation = 0f;
				velocity.X *= 0.95f;
				velocity.Y += 0.2f;
			}
		}
		else if (aiStyle == 50)
		{
			if (type == 291)
			{
				if (localAI[0] == 0f)
				{
					SoundEngine.PlaySound(in SoundID.Item20, base.position);
					localAI[0] += 1f;
				}
				bool flag11 = false;
				bool flag13 = false;
				if (velocity.X < 0f && base.position.X < this.ai[0])
				{
					flag11 = true;
				}
				if (velocity.X > 0f && base.position.X > this.ai[0])
				{
					flag11 = true;
				}
				if (velocity.Y < 0f && base.position.Y < this.ai[1])
				{
					flag13 = true;
				}
				if (velocity.Y > 0f && base.position.Y > this.ai[1])
				{
					flag13 = true;
				}
				if (flag11 && flag13)
				{
					Kill();
				}
				for (int num392 = 0; num392 < 10; num392++)
				{
					int num393 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 174, 0f, 0f, 100, default(Color), 1.2f);
					Main.dust[num393].noGravity = true;
					Dust dust110 = Main.dust[num393];
					Dust dust212 = dust110;
					dust212.velocity *= 0.5f;
					dust110 = Main.dust[num393];
					dust212 = dust110;
					dust212.velocity += velocity * 0.1f;
				}
				return;
			}
			if (type == 295)
			{
				for (int num394 = 0; num394 < 8; num394++)
				{
					int num395 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 174, 0f, 0f, 100, default(Color), 1.2f);
					Main.dust[num395].noGravity = true;
					Dust dust111 = Main.dust[num395];
					Dust dust212 = dust111;
					dust212.velocity *= 0.5f;
					dust111 = Main.dust[num395];
					dust212 = dust111;
					dust212.velocity += velocity * 0.1f;
				}
				return;
			}
			if (localAI[0] == 0f)
			{
				SoundEngine.PlaySound(in SoundID.Item74, base.position);
				localAI[0] += 1f;
			}
			this.ai[0] += 1f;
			if (type == 296)
			{
				this.ai[0] += 3f;
			}
			float num396 = 25f;
			if (this.ai[0] > 540f)
			{
				num396 -= (this.ai[0] - 180f) / 2f;
			}
			if (num396 <= 0f)
			{
				num396 = 0f;
				Kill();
			}
			if (type == 296)
			{
				num396 *= 0.7f;
			}
			for (int num397 = 0; (float)num397 < num396; num397++)
			{
				float num398 = Main.rand.Next(-10, 11);
				float num400 = Main.rand.Next(-10, 11);
				float num401 = Main.rand.Next(3, 9);
				float num402 = (float)Math.Sqrt(num398 * num398 + num400 * num400);
				num402 = num401 / num402;
				num398 *= num402;
				num400 *= num402;
				int num403 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 174, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num403].noGravity = true;
				Main.dust[num403].position.X = base.Center.X;
				Main.dust[num403].position.Y = base.Center.Y;
				Main.dust[num403].position.X += Main.rand.Next(-10, 11);
				Main.dust[num403].position.Y += Main.rand.Next(-10, 11);
				Main.dust[num403].velocity.X = num398;
				Main.dust[num403].velocity.Y = num400;
			}
		}
		else if (aiStyle == 51)
		{
			if (type == 297)
			{
				localAI[0] += 1f;
				if (localAI[0] > 4f)
				{
					for (int num404 = 0; num404 < 5; num404++)
					{
						int num405 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 175, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num405].noGravity = true;
						Dust dust113 = Main.dust[num405];
						Dust dust212 = dust113;
						dust212.velocity *= 0f;
					}
				}
			}
			else
			{
				if (localAI[0] == 0f)
				{
					SoundEngine.PlaySound(in SoundID.Item8, base.position);
					localAI[0] += 1f;
				}
				for (int num406 = 0; num406 < 9; num406++)
				{
					int num407 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 175, 0f, 0f, 100, default(Color), 1.3f);
					Main.dust[num407].noGravity = true;
					Dust dust114 = Main.dust[num407];
					Dust dust212 = dust114;
					dust212.velocity *= 0f;
				}
			}
			float num408 = base.Center.X;
			float num409 = base.Center.Y;
			float num412 = 400f;
			bool flag14 = false;
			int num413 = 0;
			if (type == 297)
			{
				for (int num414 = 0; num414 < 200; num414++)
				{
					if (Main.npc[num414].CanBeChasedBy(this) && Distance(Main.npc[num414].Center) < num412 && Collision.CanHit(base.Center, 1, 1, Main.npc[num414].Center, 1, 1))
					{
						float num415 = Main.npc[num414].position.X + (float)(Main.npc[num414].width / 2);
						float num416 = Main.npc[num414].position.Y + (float)(Main.npc[num414].height / 2);
						float num417 = Math.Abs(base.position.X + (float)(width / 2) - num415) + Math.Abs(base.position.Y + (float)(height / 2) - num416);
						if (num417 < num412)
						{
							num412 = num417;
							num408 = num415;
							num409 = num416;
							flag14 = true;
							num413 = num414;
						}
					}
				}
			}
			else
			{
				num412 = 200f;
				for (int num418 = 0; num418 < 255; num418++)
				{
					if (Main.player[num418].active && !Main.player[num418].dead)
					{
						float num419 = Main.player[num418].position.X + (float)(Main.player[num418].width / 2);
						float num420 = Main.player[num418].position.Y + (float)(Main.player[num418].height / 2);
						float num421 = Math.Abs(base.position.X + (float)(width / 2) - num419) + Math.Abs(base.position.Y + (float)(height / 2) - num420);
						if (num421 < num412)
						{
							num412 = num421;
							num408 = num419;
							num409 = num420;
							flag14 = true;
							num413 = num418;
						}
					}
				}
			}
			if (flag14)
			{
				float num423 = 3f;
				if (type == 297)
				{
					num423 = 6f;
				}
				Vector2 vector107 = default(Vector2);
				((Vector2)(ref vector107))._002Ector(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num424 = num408 - vector107.X;
				float num425 = num409 - vector107.Y;
				float num426 = (float)Math.Sqrt(num424 * num424 + num425 * num425);
				float num427 = num426;
				num426 = num423 / num426;
				num424 *= num426;
				num425 *= num426;
				if (type == 297)
				{
					velocity.X = (velocity.X * 20f + num424) / 21f;
					velocity.Y = (velocity.Y * 20f + num425) / 21f;
				}
				else
				{
					velocity.X = (velocity.X * 100f + num424) / 101f;
					velocity.Y = (velocity.Y * 100f + num425) / 101f;
				}
			}
		}
		else if (aiStyle == 52)
		{
			int num428 = (int)this.ai[0];
			float num429 = 4f;
			Vector2 vector108 = default(Vector2);
			((Vector2)(ref vector108))._002Ector(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
			float num430 = Main.player[num428].Center.X - vector108.X;
			float num431 = Main.player[num428].Center.Y - vector108.Y;
			float num432 = (float)Math.Sqrt(num430 * num430 + num431 * num431);
			float num434 = num432;
			if (num432 < 50f && base.position.X < Main.player[num428].position.X + (float)Main.player[num428].width && base.position.X + (float)width > Main.player[num428].position.X && base.position.Y < Main.player[num428].position.Y + (float)Main.player[num428].height && base.position.Y + (float)height > Main.player[num428].position.Y)
			{
				if (owner == Main.myPlayer && !Main.player[Main.myPlayer].moonLeech)
				{
					int num435 = (int)this.ai[1];
					Main.player[num428].HealEffect(num435, broadcast: false);
					Player player6 = Main.player[num428];
					Player player13 = player6;
					player13.statLife += num435;
					if (Main.player[num428].statLife > Main.player[num428].statLifeMax2)
					{
						Main.player[num428].statLife = Main.player[num428].statLifeMax2;
					}
					NetMessage.SendData(66, -1, -1, null, num428, num435);
				}
				Kill();
			}
			num432 = num429 / num432;
			num430 *= num432;
			num431 *= num432;
			velocity.X = (velocity.X * 15f + num430) / 16f;
			velocity.Y = (velocity.Y * 15f + num431) / 16f;
			if (type == 305)
			{
				for (int num436 = 0; num436 < 3; num436++)
				{
					float num437 = velocity.X * 0.334f * (float)num436;
					float num438 = (0f - velocity.Y * 0.334f) * (float)num436;
					int num439 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 183, 0f, 0f, 100, default(Color), 1.1f);
					Main.dust[num439].noGravity = true;
					Dust dust115 = Main.dust[num439];
					Dust dust212 = dust115;
					dust212.velocity *= 0f;
					Main.dust[num439].position.X -= num437;
					Main.dust[num439].position.Y -= num438;
				}
			}
			else
			{
				for (int num440 = 0; num440 < 5; num440++)
				{
					float num441 = velocity.X * 0.2f * (float)num440;
					float num442 = (0f - velocity.Y * 0.2f) * (float)num440;
					int num443 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 175, 0f, 0f, 100, default(Color), 1.3f);
					Main.dust[num443].noGravity = true;
					Dust dust116 = Main.dust[num443];
					Dust dust212 = dust116;
					dust212.velocity *= 0f;
					Main.dust[num443].position.X -= num441;
					Main.dust[num443].position.Y -= num442;
				}
			}
		}
		else if (aiStyle == 53)
		{
			if (localAI[0] == 0f)
			{
				localAI[1] = 1f;
				localAI[0] = 1f;
				this.ai[0] = 120f;
				int num445 = 80;
				SoundEngine.PlaySound(in SoundID.Item46, base.position);
				if (type == 308)
				{
					for (int num446 = 0; num446 < num445; num446++)
					{
						int num447 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 16f), width, height - 16, 185);
						Dust dust119 = Main.dust[num447];
						Dust dust212 = dust119;
						dust212.velocity *= 2f;
						Main.dust[num447].noGravity = true;
						dust119 = Main.dust[num447];
						dust212 = dust119;
						dust212.scale *= 1.15f;
					}
				}
				if (type == 377)
				{
					frame = 4;
					num445 = 40;
					for (int num448 = 0; num448 < num445; num448++)
					{
						int num449 = Dust.NewDust(base.position + Vector2.UnitY * 16f, width, height - 16, 171, 0f, 0f, 100);
						Main.dust[num449].scale = (float)Main.rand.Next(1, 10) * 0.1f;
						Main.dust[num449].noGravity = true;
						Main.dust[num449].fadeIn = 1.5f;
						Dust dust118 = Main.dust[num449];
						Dust dust212 = dust118;
						dust212.velocity *= 0.75f;
					}
				}
				if (type == 966)
				{
					this.ai[1] = -1f;
					frame = 0;
					num445 = 30;
					int num450 = 25;
					int num451 = 30;
					for (int num452 = 0; num452 < num445; num452++)
					{
						int num453 = Dust.NewDust(base.Center - new Vector2((float)num450, (float)num451), num450 * 2, num451 * 2, 219);
						Dust dust117 = Main.dust[num453];
						Dust dust212 = dust117;
						dust212.velocity *= 2f;
						Main.dust[num453].noGravity = true;
						dust117 = Main.dust[num453];
						dust212 = dust117;
						dust212.scale *= 0.5f;
					}
				}
			}
			velocity.X = 0f;
			velocity.Y += 0.2f;
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
			bool flag15 = false;
			float num454 = base.Center.X;
			float num456 = base.Center.Y;
			float num457 = 1000f;
			int num458 = -1;
			NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
			if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
			{
				float num459 = ownerMinionAttackTargetNPC.position.X + (float)(ownerMinionAttackTargetNPC.width / 2);
				float num460 = ownerMinionAttackTargetNPC.position.Y + (float)(ownerMinionAttackTargetNPC.height / 2);
				float num461 = Math.Abs(base.position.X + (float)(width / 2) - num459) + Math.Abs(base.position.Y + (float)(height / 2) - num460);
				if (num461 < num457 && Collision.CanHit(base.position, width, height, ownerMinionAttackTargetNPC.position, ownerMinionAttackTargetNPC.width, ownerMinionAttackTargetNPC.height))
				{
					num457 = num461;
					num454 = num459;
					num456 = num460;
					flag15 = true;
					num458 = ownerMinionAttackTargetNPC.whoAmI;
				}
			}
			if (!flag15)
			{
				for (int num462 = 0; num462 < 200; num462++)
				{
					if (Main.npc[num462].CanBeChasedBy(this))
					{
						float num463 = Main.npc[num462].position.X + (float)(Main.npc[num462].width / 2);
						float num464 = Main.npc[num462].position.Y + (float)(Main.npc[num462].height / 2);
						float num465 = Math.Abs(base.position.X + (float)(width / 2) - num463) + Math.Abs(base.position.Y + (float)(height / 2) - num464);
						if (num465 < num457 && Collision.CanHit(base.position, width, height, Main.npc[num462].position, Main.npc[num462].width, Main.npc[num462].height))
						{
							num457 = num465;
							num454 = num463;
							num456 = num464;
							flag15 = true;
							num458 = Main.npc[num462].whoAmI;
						}
					}
				}
			}
			if (flag15)
			{
				if (type == 966 && this.ai[1] != (float)num458)
				{
					this.ai[1] = num458;
					netUpdate = true;
				}
				float num467 = num454;
				float num468 = num456;
				num454 -= base.Center.X;
				num456 -= base.Center.Y;
				int num469 = 0;
				if (type != 966)
				{
					if (frameCounter > 0)
					{
						frameCounter--;
					}
					if (frameCounter <= 0)
					{
						int num470 = spriteDirection;
						if (num454 < 0f)
						{
							spriteDirection = -1;
						}
						else
						{
							spriteDirection = 1;
						}
						num469 = ((!(num456 > 0f)) ? ((Math.Abs(num456) > Math.Abs(num454) * 3f) ? 4 : ((Math.Abs(num456) > Math.Abs(num454) * 2f) ? 3 : ((!(Math.Abs(num454) > Math.Abs(num456) * 3f)) ? ((Math.Abs(num454) > Math.Abs(num456) * 2f) ? 1 : 2) : 0))) : 0);
						int num471 = frame;
						if (type == 308)
						{
							frame = num469 * 2;
						}
						else if (type == 377)
						{
							frame = num469;
						}
						if (this.ai[0] > 40f && localAI[1] == 0f && type == 308)
						{
							frame++;
						}
						if (num471 != frame || num470 != spriteDirection)
						{
							frameCounter = 8;
							if (this.ai[0] <= 0f)
							{
								frameCounter = 4;
							}
						}
					}
				}
				if (this.ai[0] <= 0f)
				{
					float num472 = 60f;
					if (type == 966)
					{
						num472 = 90f;
					}
					localAI[1] = 0f;
					this.ai[0] = num472;
					netUpdate = true;
					if (Main.myPlayer == owner)
					{
						float num473 = 6f;
						int num474 = 309;
						if (type == 308)
						{
							num474 = 309;
							num473 = 9f;
						}
						if (type == 377)
						{
							num474 = 378;
							num473 = 9f;
						}
						if (type == 966)
						{
							num474 = 967;
							num473 = 12.5f;
						}
						Vector2 vector109 = default(Vector2);
						((Vector2)(ref vector109))._002Ector(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						if (type == 966)
						{
							vector109.Y -= 16f;
						}
						else
						{
							switch (num469)
							{
							case 0:
								vector109.Y += 12f;
								vector109.X += 24 * spriteDirection;
								break;
							case 1:
								vector109.Y += 0f;
								vector109.X += 24 * spriteDirection;
								break;
							case 2:
								vector109.Y -= 2f;
								vector109.X += 24 * spriteDirection;
								break;
							case 3:
								vector109.Y -= 6f;
								vector109.X += 14 * spriteDirection;
								break;
							case 4:
								vector109.Y -= 14f;
								vector109.X += 2 * spriteDirection;
								break;
							}
						}
						if (type != 966 && spriteDirection < 0)
						{
							vector109.X += 10f;
						}
						float num475 = num467 - vector109.X;
						float num476 = num468 - vector109.Y;
						float num478 = (float)Math.Sqrt(num475 * num475 + num476 * num476);
						float num479 = num478;
						num478 = num473 / num478;
						num475 *= num478;
						num476 *= num478;
						int num480 = damage;
						int num481 = NewProjectile(GetProjectileSource_FromThis(), vector109.X, vector109.Y, num475, num476, num474, num480, knockBack, Main.myPlayer);
					}
				}
			}
			else
			{
				if (type == 966 && this.ai[1] != -1f)
				{
					this.ai[1] = -1f;
					netUpdate = true;
				}
				if (type != 966 && this.ai[0] <= 60f && (frame == 1 || frame == 3 || frame == 5 || frame == 7 || frame == 9))
				{
					frame--;
				}
			}
			if (this.ai[0] > 0f)
			{
				this.ai[0] -= 1f;
			}
		}
		else if (aiStyle == 54)
		{
			if (type == 317)
			{
				if (Main.player[Main.myPlayer].dead)
				{
					Main.player[Main.myPlayer].raven = false;
				}
				if (Main.player[Main.myPlayer].raven)
				{
					timeLeft = 2;
				}
			}
			for (int num482 = 0; num482 < 1000; num482++)
			{
				if (num482 != whoAmI && Main.projectile[num482].active && Main.projectile[num482].owner == owner && Main.projectile[num482].type == type && Math.Abs(base.position.X - Main.projectile[num482].position.X) + Math.Abs(base.position.Y - Main.projectile[num482].position.Y) < (float)width)
				{
					if (base.position.X < Main.projectile[num482].position.X)
					{
						velocity.X -= 0.05f;
					}
					else
					{
						velocity.X += 0.05f;
					}
					if (base.position.Y < Main.projectile[num482].position.Y)
					{
						velocity.Y -= 0.05f;
					}
					else
					{
						velocity.Y += 0.05f;
					}
				}
			}
			float num483 = base.position.X;
			float num484 = base.position.Y;
			float num485 = 900f;
			bool flag16 = false;
			int num486 = 500;
			if (this.ai[1] != 0f || friendly)
			{
				num486 = 1400;
			}
			if (Math.Abs(base.Center.X - Main.player[owner].Center.X) + Math.Abs(base.Center.Y - Main.player[owner].Center.Y) > (float)num486)
			{
				this.ai[0] = 1f;
			}
			if (this.ai[0] == 0f)
			{
				tileCollide = true;
				NPC ownerMinionAttackTargetNPC2 = OwnerMinionAttackTargetNPC;
				if (ownerMinionAttackTargetNPC2 != null && ownerMinionAttackTargetNPC2.CanBeChasedBy(this))
				{
					float num487 = ownerMinionAttackTargetNPC2.position.X + (float)(ownerMinionAttackTargetNPC2.width / 2);
					float num489 = ownerMinionAttackTargetNPC2.position.Y + (float)(ownerMinionAttackTargetNPC2.height / 2);
					float num490 = Math.Abs(base.position.X + (float)(width / 2) - num487) + Math.Abs(base.position.Y + (float)(height / 2) - num489);
					if (num490 < num485 && Collision.CanHit(base.position, width, height, ownerMinionAttackTargetNPC2.position, ownerMinionAttackTargetNPC2.width, ownerMinionAttackTargetNPC2.height))
					{
						num485 = num490;
						num483 = num487;
						num484 = num489;
						flag16 = true;
					}
				}
				if (!flag16)
				{
					for (int num491 = 0; num491 < 200; num491++)
					{
						if (Main.npc[num491].CanBeChasedBy(this))
						{
							float num492 = Main.npc[num491].position.X + (float)(Main.npc[num491].width / 2);
							float num493 = Main.npc[num491].position.Y + (float)(Main.npc[num491].height / 2);
							float num494 = Math.Abs(base.position.X + (float)(width / 2) - num492) + Math.Abs(base.position.Y + (float)(height / 2) - num493);
							if (num494 < num485 && Collision.CanHit(base.position, width, height, Main.npc[num491].position, Main.npc[num491].width, Main.npc[num491].height))
							{
								num485 = num494;
								num483 = num492;
								num484 = num493;
								flag16 = true;
							}
						}
					}
				}
			}
			else
			{
				tileCollide = false;
			}
			if (!flag16)
			{
				friendly = true;
				float num495 = 8f;
				if (this.ai[0] == 1f)
				{
					num495 = 12f;
				}
				Vector2 vector110 = default(Vector2);
				((Vector2)(ref vector110))._002Ector(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num496 = Main.player[owner].Center.X - vector110.X;
				float num497 = Main.player[owner].Center.Y - vector110.Y - 60f;
				float num498 = (float)Math.Sqrt(num496 * num496 + num497 * num497);
				float num500 = num498;
				if (num498 < 100f && this.ai[0] == 1f && !Collision.SolidCollision(base.position, width, height))
				{
					this.ai[0] = 0f;
				}
				if (num498 > 2000f)
				{
					base.position.X = Main.player[owner].Center.X - (float)(width / 2);
					base.position.Y = Main.player[owner].Center.Y - (float)(width / 2);
				}
				if (type == 317 && num498 > 100f)
				{
					num495 = 12f;
					if (this.ai[0] == 1f)
					{
						num495 = 15f;
					}
				}
				if (num498 > 70f)
				{
					num498 = num495 / num498;
					num496 *= num498;
					num497 *= num498;
					velocity.X = (velocity.X * 20f + num496) / 21f;
					velocity.Y = (velocity.Y * 20f + num497) / 21f;
				}
				else
				{
					if (velocity.X == 0f && velocity.Y == 0f)
					{
						velocity.X = -0.15f;
						velocity.Y = -0.05f;
					}
					velocity *= 1.01f;
				}
				friendly = false;
				rotation = velocity.X * 0.05f;
				frameCounter++;
				if (frameCounter >= 4)
				{
					frameCounter = 0;
					frame++;
				}
				if (frame > 3)
				{
					frame = 0;
				}
				if ((double)Math.Abs(velocity.X) > 0.2)
				{
					spriteDirection = -direction;
				}
				return;
			}
			if (this.ai[1] == -1f)
			{
				this.ai[1] = 17f;
			}
			if (this.ai[1] > 0f)
			{
				this.ai[1] -= 1f;
			}
			if (this.ai[1] == 0f)
			{
				friendly = true;
				float num501 = 16f;
				Vector2 vector111 = default(Vector2);
				((Vector2)(ref vector111))._002Ector(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num502 = num483 - vector111.X;
				float num503 = num484 - vector111.Y;
				float num504 = (float)Math.Sqrt(num502 * num502 + num503 * num503);
				float num505 = num504;
				if (num504 < 100f)
				{
					num501 = 10f;
				}
				num504 = num501 / num504;
				num502 *= num504;
				num503 *= num504;
				velocity.X = (velocity.X * 14f + num502) / 15f;
				velocity.Y = (velocity.Y * 14f + num503) / 15f;
			}
			else
			{
				friendly = false;
				if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < 10f)
				{
					velocity *= 1.05f;
				}
			}
			rotation = velocity.X * 0.05f;
			frameCounter++;
			if (frameCounter >= 4)
			{
				frameCounter = 0;
				frame++;
			}
			if (frame < 4)
			{
				frame = 4;
			}
			if (frame > 7)
			{
				frame = 4;
			}
			if ((double)Math.Abs(velocity.X) > 0.2)
			{
				spriteDirection = -direction;
			}
		}
		else if (aiStyle == 55)
		{
			frameCounter++;
			if (frameCounter > 0)
			{
				frame++;
				frameCounter = 0;
				if (frame > 2)
				{
					frame = 0;
				}
			}
			if (velocity.X < 0f)
			{
				spriteDirection = -1;
				rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
			}
			else
			{
				spriteDirection = 1;
				rotation = (float)Math.Atan2(velocity.Y, velocity.X);
			}
			if (this.ai[0] >= 0f && this.ai[0] < 200f)
			{
				int num506 = (int)this.ai[0];
				NPC nPC12 = Main.npc[num506];
				if (nPC12.CanBeChasedBy(this) && !NPCID.Sets.CountsAsCritter[nPC12.type])
				{
					float num507 = 8f;
					Vector2 center12 = base.Center;
					float num508 = nPC12.Center.X - center12.X;
					float num509 = nPC12.Center.Y - center12.Y;
					float num511 = (float)Math.Sqrt(num508 * num508 + num509 * num509);
					float num512 = num511;
					num511 = num507 / num511;
					num508 *= num511;
					num509 *= num511;
					velocity.X = (velocity.X * 14f + num508) / 15f;
					velocity.Y = (velocity.Y * 14f + num509) / 15f;
				}
				else
				{
					float num513 = 1000f;
					for (int num514 = 0; num514 < 200; num514++)
					{
						NPC nPC13 = Main.npc[num514];
						if (nPC13.CanBeChasedBy(this) && !NPCID.Sets.CountsAsCritter[nPC13.type])
						{
							float x4 = nPC13.Center.X;
							float y4 = nPC13.Center.Y;
							float num515 = Math.Abs(base.Center.X - x4) + Math.Abs(base.Center.Y - y4);
							if (num515 < num513 && Collision.CanHit(base.position, width, height, nPC13.position, nPC13.width, nPC13.height))
							{
								num513 = num515;
								this.ai[0] = num514;
							}
						}
					}
				}
				int num516 = 8;
				int num517 = Dust.NewDust(new Vector2(base.position.X + (float)num516, base.position.Y + (float)num516), width - num516 * 2, height - num516 * 2, 6);
				Dust dust120 = Main.dust[num517];
				Dust dust212 = dust120;
				dust212.velocity *= 0.5f;
				dust120 = Main.dust[num517];
				dust212 = dust120;
				dust212.velocity += velocity * 0.5f;
				Main.dust[num517].noGravity = true;
				Main.dust[num517].noLight = true;
				Main.dust[num517].scale = 1.4f;
			}
			else
			{
				Kill();
			}
		}
		else if (aiStyle == 56)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				rotation = this.ai[0];
				spriteDirection = -(int)this.ai[1];
			}
			if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < 16f)
			{
				velocity *= 1.05f;
			}
			if (velocity.X < 0f)
			{
				direction = -1;
			}
			else
			{
				direction = 1;
			}
			rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.025f * (float)direction;
		}
		else if (aiStyle == 57)
		{
			this.ai[0] += 1f;
			if (this.ai[0] > 30f)
			{
				this.ai[0] = 30f;
				velocity.Y += 0.25f;
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
				velocity.X *= 0.995f;
			}
			rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
			alpha -= 50;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (owner == Main.myPlayer)
			{
				if (localAI[1] == 0f)
				{
					localAI[1] = Main.rand.Next(7);
				}
				localAI[0]++;
				int num518 = 8;
				if (localAI[1] > 0f)
				{
					num518 += (int)localAI[1];
				}
				if (localAI[0] >= (float)num518)
				{
					localAI[0] = 0f;
					localAI[1] = -1f;
					NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 344, (int)((float)damage * 0.7f), knockBack * 0.55f, owner, 0f, Main.rand.Next(3));
				}
			}
		}
		else if (aiStyle == 58)
		{
			alpha -= 50;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (this.ai[0] == 0f)
			{
				frame = 0;
				this.ai[1] += 1f;
				if (this.ai[1] > 30f)
				{
					velocity.Y += 0.1f;
				}
				if (velocity.Y >= 0f)
				{
					this.ai[0] = 1f;
				}
			}
			if (this.ai[0] == 1f)
			{
				frame = 1;
				velocity.Y += 0.1f;
				if (velocity.Y > 3f)
				{
					velocity.Y = 3f;
				}
				velocity.X *= 0.99f;
			}
			rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
		}
		else if (aiStyle == 59)
		{
			this.ai[1] += 1f;
			if (this.ai[1] >= 60f)
			{
				friendly = true;
				int num519 = (int)this.ai[0];
				if (Main.myPlayer == owner && (num519 == -1 || !Main.npc[num519].CanBeChasedBy(this)))
				{
					num519 = -1;
					int[] array = new int[200];
					int num520 = 0;
					for (int num523 = 0; num523 < 200; num523++)
					{
						if (Main.npc[num523].CanBeChasedBy(this))
						{
							float num524 = Math.Abs(Main.npc[num523].position.X + (float)(Main.npc[num523].width / 2) - base.position.X + (float)(width / 2)) + Math.Abs(Main.npc[num523].position.Y + (float)(Main.npc[num523].height / 2) - base.position.Y + (float)(height / 2));
							if (num524 < 800f)
							{
								array[num520] = num523;
								num520++;
							}
						}
					}
					if (num520 == 0)
					{
						Kill();
						return;
					}
					num519 = array[Main.rand.Next(num520)];
					this.ai[0] = num519;
					netUpdate = true;
				}
				if (num519 != -1)
				{
					float num525 = 4f;
					Vector2 vector113 = default(Vector2);
					((Vector2)(ref vector113))._002Ector(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num526 = Main.npc[num519].Center.X - vector113.X;
					float num527 = Main.npc[num519].Center.Y - vector113.Y;
					float num528 = (float)Math.Sqrt(num526 * num526 + num527 * num527);
					float num529 = num528;
					num528 = num525 / num528;
					num526 *= num528;
					num527 *= num528;
					int num530 = 30;
					velocity.X = (velocity.X * (float)(num530 - 1) + num526) / (float)num530;
					velocity.Y = (velocity.Y * (float)(num530 - 1) + num527) / (float)num530;
				}
			}
			for (int num531 = 0; num531 < 5; num531++)
			{
				float num532 = velocity.X * 0.2f * (float)num531;
				float num534 = (0f - velocity.Y * 0.2f) * (float)num531;
				int num535 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 175, 0f, 0f, 100, default(Color), 1.3f);
				Main.dust[num535].noGravity = true;
				Dust dust127 = Main.dust[num535];
				Dust dust212 = dust127;
				dust212.velocity *= 0f;
				Main.dust[num535].position.X -= num532;
				Main.dust[num535].position.Y -= num534;
			}
		}
		else if (aiStyle == 60)
		{
			scale -= 0.015f;
			if (scale <= 0f)
			{
				velocity *= 5f;
				oldVelocity = velocity;
				Kill();
			}
			if (this.ai[0] > 3f)
			{
				int num536 = 103;
				if (type == 406)
				{
					num536 = 137;
				}
				if (owner == Main.myPlayer)
				{
					Rectangle rectangle4 = default(Rectangle);
					((Rectangle)(ref rectangle4))._002Ector((int)base.position.X, (int)base.position.Y, width, height);
					Rectangle value20 = default(Rectangle);
					for (int num537 = 0; num537 < 200; num537++)
					{
						if (Main.npc[num537].active && !Main.npc[num537].dontTakeDamage && Main.npc[num537].lifeMax > 1)
						{
							((Rectangle)(ref value20))._002Ector((int)Main.npc[num537].position.X, (int)Main.npc[num537].position.Y, Main.npc[num537].width, Main.npc[num537].height);
							if (((Rectangle)(ref rectangle4)).Intersects(value20))
							{
								Main.npc[num537].AddBuff(num536, 1500);
								Kill();
							}
						}
					}
					Rectangle value21 = default(Rectangle);
					for (int num538 = 0; num538 < 255; num538++)
					{
						if (num538 != owner && Main.player[num538].active && !Main.player[num538].dead)
						{
							((Rectangle)(ref value21))._002Ector((int)Main.player[num538].position.X, (int)Main.player[num538].position.Y, Main.player[num538].width, Main.player[num538].height);
							if (((Rectangle)(ref rectangle4)).Intersects(value21))
							{
								Main.player[num538].AddBuff(num536, 1500, quiet: false);
								Kill();
							}
						}
					}
				}
				this.ai[0] += this.ai[1];
				if (this.ai[0] > 30f)
				{
					velocity.Y += 0.1f;
				}
				if (type == 358)
				{
					for (int num539 = 0; num539 < 1; num539++)
					{
						for (int num540 = 0; num540 < 6; num540++)
						{
							float num541 = velocity.X / 6f * (float)num540;
							float num542 = velocity.Y / 6f * (float)num540;
							int num543 = 6;
							int num545 = Dust.NewDust(new Vector2(base.position.X + (float)num543, base.position.Y + (float)num543), width - num543 * 2, height - num543 * 2, 211, 0f, 0f, 75, default(Color), 1.2f);
							Dust dust136;
							Dust dust212;
							if (Main.rand.Next(2) == 0)
							{
								dust136 = Main.dust[num545];
								dust212 = dust136;
								dust212.alpha += 25;
							}
							if (Main.rand.Next(2) == 0)
							{
								dust136 = Main.dust[num545];
								dust212 = dust136;
								dust212.alpha += 25;
							}
							if (Main.rand.Next(2) == 0)
							{
								dust136 = Main.dust[num545];
								dust212 = dust136;
								dust212.alpha += 25;
							}
							Main.dust[num545].noGravity = true;
							dust136 = Main.dust[num545];
							dust212 = dust136;
							dust212.velocity *= 0.3f;
							dust136 = Main.dust[num545];
							dust212 = dust136;
							dust212.velocity += velocity * 0.5f;
							Main.dust[num545].position = base.Center;
							Main.dust[num545].position.X -= num541;
							Main.dust[num545].position.Y -= num542;
							dust136 = Main.dust[num545];
							dust212 = dust136;
							dust212.velocity *= 0.2f;
						}
						if (Main.rand.Next(4) == 0)
						{
							int num546 = 6;
							int num547 = Dust.NewDust(new Vector2(base.position.X + (float)num546, base.position.Y + (float)num546), width - num546 * 2, height - num546 * 2, 211, 0f, 0f, 75, default(Color), 0.65f);
							Dust dust131 = Main.dust[num547];
							Dust dust212 = dust131;
							dust212.velocity *= 0.5f;
							dust131 = Main.dust[num547];
							dust212 = dust131;
							dust212.velocity += velocity * 0.5f;
						}
					}
				}
				if (type != 406)
				{
					return;
				}
				int num548 = 175;
				Color newColor2 = default(Color);
				((Color)(ref newColor2))._002Ector(0, 80, 255, 100);
				for (int num549 = 0; num549 < 6; num549++)
				{
					Vector2 vector114 = velocity * (float)num549 / 6f;
					int num550 = 6;
					int num551 = Dust.NewDust(base.position + Vector2.One * 6f, width - num550 * 2, height - num550 * 2, 4, 0f, 0f, num548, newColor2, 1.2f);
					Dust dust129;
					Dust dust212;
					if (Main.rand.Next(2) == 0)
					{
						dust129 = Main.dust[num551];
						dust212 = dust129;
						dust212.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust129 = Main.dust[num551];
						dust212 = dust129;
						dust212.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust129 = Main.dust[num551];
						dust212 = dust129;
						dust212.alpha += 25;
					}
					Main.dust[num551].noGravity = true;
					dust129 = Main.dust[num551];
					dust212 = dust129;
					dust212.velocity *= 0.3f;
					dust129 = Main.dust[num551];
					dust212 = dust129;
					dust212.velocity += velocity * 0.5f;
					Main.dust[num551].position = base.Center;
					Main.dust[num551].position.X -= vector114.X;
					Main.dust[num551].position.Y -= vector114.Y;
					dust129 = Main.dust[num551];
					dust212 = dust129;
					dust212.velocity *= 0.2f;
				}
				if (Main.rand.Next(4) == 0)
				{
					int num552 = 6;
					int num553 = Dust.NewDust(base.position + Vector2.One * 6f, width - num552 * 2, height - num552 * 2, 4, 0f, 0f, num548, newColor2, 1.2f);
					Dust dust128 = Main.dust[num553];
					Dust dust212 = dust128;
					dust212.velocity *= 0.5f;
					dust128 = Main.dust[num553];
					dust212 = dust128;
					dust212.velocity += velocity * 0.5f;
				}
			}
			else
			{
				this.ai[0] += 1f;
			}
		}
		else if (aiStyle == 61)
		{
			AI_061_FishingBobber();
		}
		else if (aiStyle == 62)
		{
			AI_062();
		}
		else if (aiStyle == 63)
		{
			if (!Main.player[owner].active)
			{
				active = false;
				return;
			}
			Vector2 center14 = base.position;
			bool flag17 = false;
			float num554 = 2000f;
			for (int num556 = 0; num556 < 200; num556++)
			{
				NPC nPC14 = Main.npc[num556];
				if (nPC14.CanBeChasedBy(this))
				{
					float num557 = Vector2.Distance(nPC14.Center, base.Center);
					if (!(num557 >= num554) && Collision.CanHit(base.position, width, height, nPC14.position, nPC14.width, nPC14.height))
					{
						num554 = num557;
						center14 = nPC14.Center;
						flag17 = true;
					}
				}
			}
			if (!flag17)
			{
				velocity.X *= 0.95f;
			}
			else
			{
				float num558 = 5f;
				float num559 = 0.08f;
				if (velocity.Y == 0f)
				{
					bool flag18 = false;
					if (base.Center.Y - 50f > center14.Y)
					{
						flag18 = true;
					}
					if (flag18)
					{
						velocity.Y = -6f;
					}
				}
				else
				{
					num558 = 8f;
					num559 = 0.12f;
				}
				velocity.X += (float)Math.Sign(center14.X - base.Center.X) * num559;
				if (velocity.X < 0f - num558)
				{
					velocity.X = 0f - num558;
				}
				if (velocity.X > num558)
				{
					velocity.X = num558;
				}
			}
			float num560 = 0f;
			Collision.StepUp(ref base.position, ref velocity, width, height, ref num560, ref gfxOffY);
			if (velocity.Y != 0f)
			{
				frame = 3;
			}
			else
			{
				if (Math.Abs(velocity.X) > 0.2f)
				{
					frameCounter++;
				}
				if (frameCounter >= 9)
				{
					frameCounter = 0;
				}
				if (frameCounter >= 6)
				{
					frame = 2;
				}
				else if (frameCounter >= 3)
				{
					frame = 1;
				}
				else
				{
					frame = 0;
				}
			}
			if (velocity.X != 0f)
			{
				direction = Math.Sign(velocity.X);
			}
			spriteDirection = -direction;
			velocity.Y += 0.2f;
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
		}
		else if (aiStyle == 64)
		{
			int num561 = 10;
			int num562 = 15;
			float num563 = 1f;
			int num564 = 150;
			int num565 = 42;
			if (type == 386)
			{
				num561 = 16;
				num562 = 16;
				num563 = 1.5f;
			}
			if (velocity.X != 0f)
			{
				direction = (spriteDirection = -Math.Sign(velocity.X));
			}
			frameCounter++;
			if (frameCounter > 2)
			{
				frame++;
				frameCounter = 0;
			}
			if (frame >= 6)
			{
				frame = 0;
			}
			if (localAI[0] == 0f && Main.myPlayer == owner)
			{
				localAI[0] = 1f;
				base.position.X += width / 2;
				base.position.Y += height / 2;
				scale = ((float)(num561 + num562) - this.ai[1]) * num563 / (float)(num562 + num561);
				width = (int)((float)num564 * scale);
				height = (int)((float)num565 * scale);
				base.position.X -= width / 2;
				base.position.Y -= height / 2;
				netUpdate = true;
			}
			if (this.ai[1] != -1f)
			{
				scale = ((float)(num561 + num562) - this.ai[1]) * num563 / (float)(num562 + num561);
				width = (int)((float)num564 * scale);
				height = (int)((float)num565 * scale);
			}
			if (!Collision.SolidCollision(base.position, width, height))
			{
				alpha -= 30;
				if (alpha < 60)
				{
					alpha = 60;
				}
				if (type == 386 && alpha < 100)
				{
					alpha = 100;
				}
			}
			else
			{
				alpha += 30;
				if (alpha > 150)
				{
					alpha = 150;
				}
			}
			if (this.ai[0] > 0f)
			{
				this.ai[0]--;
			}
			if (this.ai[0] == 1f && this.ai[1] > 0f && owner == Main.myPlayer)
			{
				netUpdate = true;
				Vector2 center15 = base.Center;
				center15.Y -= (float)num565 * scale / 2f;
				float num567 = ((float)(num561 + num562) - this.ai[1] + 1f) * num563 / (float)(num562 + num561);
				center15.Y -= (float)num565 * num567 / 2f;
				center15.Y += 2f;
				NewProjectile(GetProjectileSource_FromThis(), center15.X, center15.Y, velocity.X, velocity.Y, type, damage, knockBack, owner, 10f, this.ai[1] - 1f);
				int num568 = 4;
				if (type == 386)
				{
					num568 = 2;
				}
				if ((int)this.ai[1] % num568 == 0 && this.ai[1] != 0f)
				{
					int num569 = 372;
					if (type == 386)
					{
						num569 = 373;
					}
					int num570 = NPC.NewNPC(GetNPCSource_FromThis(), (int)center15.X, (int)center15.Y, num569);
					Main.npc[num570].velocity = velocity;
					Main.npc[num570].netUpdate = true;
					if (type == 386)
					{
						Main.npc[num570].ai[2] = width;
						Main.npc[num570].ai[3] = -1.5f;
					}
				}
			}
			if (this.ai[0] <= 0f)
			{
				float num571 = (float)Math.PI / 30f;
				float num572 = (float)width / 5f;
				if (type == 386)
				{
					num572 *= 2f;
				}
				float num573 = (float)(Math.Cos(num571 * (0f - this.ai[0])) - 0.5) * num572;
				base.position.X -= num573 * (float)(-direction);
				this.ai[0]--;
				num573 = (float)(Math.Cos(num571 * (0f - this.ai[0])) - 0.5) * num572;
				base.position.X += num573 * (float)(-direction);
			}
		}
		else if (aiStyle == 65)
		{
			if (this.ai[1] > 0f)
			{
				int num574 = (int)this.ai[1] - 1;
				if (num574 < 255)
				{
					localAI[0]++;
					if (localAI[0] > 10f)
					{
						int num575 = 6;
						for (int num576 = 0; num576 < num575; num576++)
						{
							Vector2 spinningpoint = Vector2.Normalize(velocity) * new Vector2((float)width / 2f, (float)height) * 0.75f;
							Vector2 spinningpoint21 = spinningpoint;
							double radians4 = (double)(num576 - (num575 / 2 - 1)) * Math.PI / (double)num575;
							val4 = default(Vector2);
							spinningpoint = spinningpoint21.RotatedBy(radians4, val4) + base.Center;
							Vector2 vector115 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - (float)Math.PI / 2f).ToRotationVector2() * (float)Main.rand.Next(3, 8);
							int num578 = Dust.NewDust(spinningpoint + vector115, 0, 0, 172, vector115.X * 2f, vector115.Y * 2f, 100, default(Color), 1.4f);
							Main.dust[num578].noGravity = true;
							Main.dust[num578].noLight = true;
							Dust dust158 = Main.dust[num578];
							Dust dust212 = dust158;
							dust212.velocity /= 4f;
							dust158 = Main.dust[num578];
							dust212 = dust158;
							dust212.velocity -= velocity;
						}
						alpha -= 5;
						if (alpha < 100)
						{
							alpha = 100;
						}
						rotation += velocity.X * 0.1f;
						frame = (int)(localAI[0] / 3f) % 3;
					}
					Vector2 value22 = Main.player[num574].Center - base.Center;
					float num579 = 4f;
					if (this.ai[2] == 1f)
					{
						num579 += 12f;
					}
					num579 += localAI[0] / 20f;
					velocity = Vector2.Normalize(value22) * num579;
					if (((Vector2)(ref value22)).Length() < 50f)
					{
						Kill();
					}
				}
			}
			else
			{
				float num580 = (float)Math.PI / 15f;
				float num581 = 4f;
				float num582 = (float)(Math.Cos(num580 * this.ai[0]) - 0.5) * num581;
				velocity.Y -= num582;
				this.ai[0]++;
				num582 = (float)(Math.Cos(num580 * this.ai[0]) - 0.5) * num581;
				velocity.Y += num582;
				localAI[0]++;
				if (localAI[0] > 10f)
				{
					alpha -= 5;
					if (alpha < 100)
					{
						alpha = 100;
					}
					rotation += velocity.X * 0.1f;
					frame = (int)(localAI[0] / 3f) % 3;
				}
			}
			if (wet)
			{
				base.position.Y -= 16f;
				Kill();
			}
		}
		else if (aiStyle == 66)
		{
			float num583 = 0f;
			float num584 = 0f;
			float num585 = 0f;
			float num586 = 0f;
			bool flag19 = type == 387 || type == 388;
			if (flag19)
			{
				num583 = 2000f;
				num584 = 800f;
				num585 = 1200f;
				num586 = 150f;
				if (Main.player[owner].dead)
				{
					Main.player[owner].twinsMinion = false;
				}
				if (Main.player[owner].twinsMinion)
				{
					timeLeft = 2;
				}
			}
			if (type == 533)
			{
				num583 = 2000f;
				num584 = 900f;
				num585 = 1500f;
				num586 = 450f;
				if (Main.player[owner].dead)
				{
					Main.player[owner].DeadlySphereMinion = false;
				}
				if (Main.player[owner].DeadlySphereMinion)
				{
					timeLeft = 2;
				}
				localAI[2] = Utils.Clamp(localAI[2] - 1f, 0f, 60f);
			}
			float num587 = 0.05f;
			for (int num589 = 0; num589 < 1000; num589++)
			{
				bool flag20 = (Main.projectile[num589].type == 387 || Main.projectile[num589].type == 388) && (type == 387 || type == 388);
				if (!flag20)
				{
					flag20 = type == 533 && Main.projectile[num589].type == 533;
				}
				if (num589 != whoAmI && Main.projectile[num589].active && Main.projectile[num589].owner == owner && flag20 && Math.Abs(base.position.X - Main.projectile[num589].position.X) + Math.Abs(base.position.Y - Main.projectile[num589].position.Y) < (float)width)
				{
					if (base.position.X < Main.projectile[num589].position.X)
					{
						velocity.X -= num587;
					}
					else
					{
						velocity.X += num587;
					}
					if (base.position.Y < Main.projectile[num589].position.Y)
					{
						velocity.Y -= num587;
					}
					else
					{
						velocity.Y += num587;
					}
				}
			}
			if (type == 533)
			{
				if ((int)this.ai[0] % 3 != 2)
				{
					Lighting.AddLight(base.Center, 0.8f, 0.3f, 0.1f);
				}
				else
				{
					Lighting.AddLight(base.Center, 0.3f, 0.5f, 0.7f);
				}
			}
			bool flag21 = false;
			if (this.ai[0] == 2f && type == 388)
			{
				this.ai[1]++;
				extraUpdates = 1;
				rotation = velocity.ToRotation() + (float)Math.PI;
				frameCounter++;
				if (frameCounter > 1)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 2)
				{
					frame = 0;
				}
				if (this.ai[1] > 40f)
				{
					this.ai[1] = 1f;
					this.ai[0] = 0f;
					extraUpdates = 0;
					numUpdates = 0;
					netUpdate = true;
				}
				else
				{
					flag21 = true;
				}
			}
			if (type == 533 && this.ai[0] >= 3f && this.ai[0] <= 5f)
			{
				int num590 = 2;
				flag21 = true;
				velocity *= 0.9f;
				this.ai[1]++;
				int num591 = (int)this.ai[1] / num590 + (int)(this.ai[0] - 3f) * 8;
				if (num591 < 4)
				{
					frame = 17 + num591;
				}
				else if (num591 < 5)
				{
					frame = 0;
				}
				else if (num591 < 8)
				{
					frame = 1 + num591 - 5;
				}
				else if (num591 < 11)
				{
					frame = 11 - num591;
				}
				else if (num591 < 12)
				{
					frame = 0;
				}
				else if (num591 < 16)
				{
					frame = num591 - 2;
				}
				else if (num591 < 20)
				{
					frame = 29 - num591;
				}
				else if (num591 < 21)
				{
					frame = 0;
				}
				else
				{
					frame = num591 - 4;
				}
				if (this.ai[1] > (float)(num590 * 8))
				{
					this.ai[0] -= 3f;
					this.ai[1] = 0f;
				}
			}
			if (type == 533 && this.ai[0] >= 6f && this.ai[0] <= 8f)
			{
				this.ai[1]++;
				MaxUpdates = 2;
				if (this.ai[0] == 7f)
				{
					rotation = velocity.ToRotation() + (float)Math.PI;
				}
				else
				{
					rotation += (float)Math.PI / 6f;
				}
				int num592 = 0;
				switch ((int)this.ai[0])
				{
				case 6:
					frame = 5;
					num592 = 40;
					break;
				case 7:
					frame = 13;
					num592 = 30;
					break;
				case 8:
					frame = 17;
					num592 = 30;
					break;
				}
				if (this.ai[1] > (float)num592)
				{
					this.ai[1] = 1f;
					this.ai[0] -= 6f;
					localAI[0]++;
					extraUpdates = 0;
					numUpdates = 0;
					netUpdate = true;
				}
				else
				{
					flag21 = true;
				}
				if (this.ai[0] == 8f)
				{
					for (int num593 = 0; num593 < 4; num593++)
					{
						int num594 = Utils.SelectRandom<int>(Main.rand, 226, 228, 75);
						int num595 = Dust.NewDust(base.Center, 0, 0, num594);
						Dust dust6 = Main.dust[num595];
						Vector2 one = Vector2.One;
						double radians5 = (float)num593 * ((float)Math.PI / 2f);
						val4 = default(Vector2);
						Vector2 spinningpoint22 = one.RotatedBy(radians5, val4);
						double radians6 = rotation;
						val4 = default(Vector2);
						Vector2 vector116 = spinningpoint22.RotatedBy(radians6, val4);
						dust6.position = base.Center + vector116 * 10f;
						dust6.velocity = vector116 * 1f;
						dust6.scale = 0.6f + Main.rand.NextFloat() * 0.5f;
						dust6.noGravity = true;
					}
				}
			}
			if (flag21)
			{
				return;
			}
			Vector2 center16 = base.position;
			Vector2 zero = Vector2.Zero;
			bool flag22 = false;
			if (this.ai[0] != 1f && flag19)
			{
				tileCollide = true;
			}
			if (type == 533 && this.ai[0] < 9f)
			{
				tileCollide = true;
			}
			if (tileCollide && WorldGen.SolidTile(Framing.GetTileSafely((int)base.Center.X / 16, (int)base.Center.Y / 16)))
			{
				tileCollide = false;
			}
			NPC ownerMinionAttackTargetNPC3 = OwnerMinionAttackTargetNPC;
			if (ownerMinionAttackTargetNPC3 != null && ownerMinionAttackTargetNPC3.CanBeChasedBy(this))
			{
				float num596 = Vector2.Distance(ownerMinionAttackTargetNPC3.Center, base.Center);
				float num597 = num583 * 3f;
				if (num596 < num597 && !flag22 && Collision.CanHitLine(base.position, width, height, ownerMinionAttackTargetNPC3.position, ownerMinionAttackTargetNPC3.width, ownerMinionAttackTargetNPC3.height))
				{
					num583 = num596;
					center16 = ownerMinionAttackTargetNPC3.Center;
					flag22 = true;
				}
			}
			if (!flag22)
			{
				for (int num598 = 0; num598 < 200; num598++)
				{
					NPC nPC15 = Main.npc[num598];
					if (nPC15.CanBeChasedBy(this))
					{
						float num600 = Vector2.Distance(nPC15.Center, base.Center);
						if (!(num600 >= num583) && Collision.CanHitLine(base.position, width, height, nPC15.position, nPC15.width, nPC15.height))
						{
							num583 = num600;
							center16 = nPC15.Center;
							zero = nPC15.velocity;
							flag22 = true;
						}
					}
				}
			}
			float num601 = num584;
			if (flag22)
			{
				num601 = num585;
			}
			Player player7 = Main.player[owner];
			if (Vector2.Distance(player7.Center, base.Center) > num601)
			{
				if (flag19)
				{
					this.ai[0] = 1f;
				}
				if (type == 533 && this.ai[0] < 9f)
				{
					this.ai[0] += 3 * (3 - (int)(this.ai[0] / 3f));
				}
				tileCollide = false;
				netUpdate = true;
			}
			if (flag19 && flag22 && this.ai[0] == 0f)
			{
				Vector2 vector117 = center16 - base.Center;
				float num602 = ((Vector2)(ref vector117)).Length();
				((Vector2)(ref vector117)).Normalize();
				if (num602 > 200f)
				{
					float num603 = 6f;
					if (type == 388)
					{
						num603 = 14f;
					}
					vector117 *= num603;
					velocity = (velocity * 40f + vector117) / 41f;
				}
				else
				{
					float num604 = 4f;
					vector117 *= 0f - num604;
					velocity = (velocity * 40f + vector117) / 41f;
				}
			}
			else
			{
				bool flag24 = false;
				if (!flag24 && flag19)
				{
					flag24 = this.ai[0] == 1f;
				}
				if (!flag24 && type == 533)
				{
					flag24 = this.ai[0] >= 9f;
				}
				float num605 = 6f;
				float num606 = 40f;
				if (type == 533)
				{
					num605 = 12f;
				}
				if (flag24)
				{
					num605 = 15f;
				}
				Vector2 center17 = base.Center;
				Vector2 vector118 = player7.Center - center17 + new Vector2(0f, -60f);
				float num607 = ((Vector2)(ref vector118)).Length();
				float num608 = num607;
				if (num607 > 200f && num605 < 8f)
				{
					num605 = 8f;
				}
				if (num605 < Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y))
				{
					num606 = 30f;
					num605 = Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y);
					if (num607 > 200f)
					{
						num606 = 20f;
						num605 += 4f;
					}
					else if (num607 > 100f)
					{
						num605 += 3f;
					}
				}
				if (flag24 && num607 > 300f)
				{
					num605 += 6f;
					num606 -= 10f;
				}
				if (num607 < num586 && flag24 && !Collision.SolidCollision(base.position, width, height))
				{
					if (type == 387 || type == 388)
					{
						this.ai[0] = 0f;
					}
					if (type == 533)
					{
						this.ai[0] -= 9f;
					}
					netUpdate = true;
				}
				if (num607 > 2000f)
				{
					base.position.X = Main.player[owner].Center.X - (float)(width / 2);
					base.position.Y = Main.player[owner].Center.Y - (float)(height / 2);
					netUpdate = true;
				}
				if (num607 > 70f)
				{
					Vector2 vector119 = vector118;
					((Vector2)(ref vector118)).Normalize();
					vector118 *= num605;
					velocity = (velocity * num606 + vector118) / (num606 + 1f);
				}
				else if (velocity.X == 0f && velocity.Y == 0f)
				{
					velocity.X = -0.15f;
					velocity.Y = -0.05f;
				}
				if (((Vector2)(ref velocity)).Length() > num605)
				{
					velocity *= 0.95f;
				}
			}
			if (type == 388)
			{
				rotation = velocity.ToRotation() + (float)Math.PI;
			}
			if (type == 387)
			{
				if (this.ai[0] != 1f && flag22)
				{
					rotation = (center16 - base.Center).ToRotation() + (float)Math.PI;
				}
				else
				{
					rotation = velocity.ToRotation() + (float)Math.PI;
				}
			}
			if (type == 533 && (this.ai[0] < 3f || this.ai[0] >= 9f))
			{
				rotation += velocity.X * 0.04f;
			}
			if (type == 388 || type == 387)
			{
				frameCounter++;
				if (frameCounter > 3)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 2)
				{
					frame = 0;
				}
			}
			else if (type == 533)
			{
				if (this.ai[0] < 3f || this.ai[0] >= 9f)
				{
					frameCounter++;
					if (frameCounter >= 24)
					{
						frameCounter = 0;
					}
					int num609 = frameCounter / 4;
					frame = 4 + num609;
					switch ((int)this.ai[0])
					{
					case 0:
					case 9:
						frame = 4 + num609;
						break;
					case 1:
					case 10:
						num609 = frameCounter / 8;
						frame = 14 + num609;
						break;
					case 2:
					case 11:
						num609 = frameCounter / 3;
						if (num609 >= 4)
						{
							num609 -= 4;
						}
						frame = 17 + num609;
						break;
					}
				}
				if (this.ai[0] == 2f && Main.rand.Next(2) == 0)
				{
					for (int num611 = 0; num611 < 4; num611++)
					{
						if (Main.rand.Next(2) != 0)
						{
							int num612 = Utils.SelectRandom<int>(Main.rand, 226, 228, 75);
							int num613 = Dust.NewDust(base.Center, 0, 0, num612);
							Dust dust7 = Main.dust[num613];
							Vector2 one2 = Vector2.One;
							double radians7 = (float)num611 * ((float)Math.PI / 2f);
							val4 = default(Vector2);
							Vector2 spinningpoint23 = one2.RotatedBy(radians7, val4);
							double radians8 = rotation;
							val4 = default(Vector2);
							Vector2 vector120 = spinningpoint23.RotatedBy(radians8, val4);
							dust7.position = base.Center + vector120 * 10f;
							dust7.velocity = vector120 * 1f;
							dust7.scale = 0.3f + Main.rand.NextFloat() * 0.5f;
							dust7.noGravity = true;
							dust7.customData = this;
							dust7.noLight = true;
						}
					}
				}
			}
			if (this.ai[1] > 0f && flag19)
			{
				this.ai[1] += Main.rand.Next(1, 4);
			}
			if (this.ai[1] > 90f && type == 387)
			{
				this.ai[1] = 0f;
				netUpdate = true;
			}
			if (this.ai[1] > 40f && type == 388)
			{
				this.ai[1] = 0f;
				netUpdate = true;
			}
			if (this.ai[1] > 0f && type == 533)
			{
				this.ai[1]++;
				int num614 = 10;
				if (this.ai[1] > (float)num614)
				{
					this.ai[1] = 0f;
					netUpdate = true;
				}
			}
			if (this.ai[0] == 0f && flag19)
			{
				if (type == 387)
				{
					float num615 = 8f;
					int num616 = 389;
					if (flag22 && this.ai[1] == 0f)
					{
						this.ai[1]++;
						if (Main.myPlayer == owner && Collision.CanHitLine(base.position, width, height, center16, 0, 0))
						{
							Vector2 vector121 = center16 - base.Center;
							((Vector2)(ref vector121)).Normalize();
							vector121 *= num615;
							int num617 = NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector121.X, vector121.Y, num616, (int)((float)damage * 1.15f), 0f, Main.myPlayer);
							Main.projectile[num617].timeLeft = 300;
							netUpdate = true;
						}
					}
				}
				if (type == 388 && this.ai[1] == 0f && flag22 && num583 < 500f)
				{
					this.ai[1]++;
					if (Main.myPlayer == owner)
					{
						this.ai[0] = 2f;
						Vector2 v4 = center16 - base.Center;
						v4 = v4.SafeNormalize(velocity);
						float num618 = 8f;
						velocity = v4 * num618;
						AI_066_TryInterceptingTarget(center16, zero, num618);
						netUpdate = true;
					}
				}
			}
			else
			{
				if (type != 533 || !(this.ai[0] < 9f))
				{
					return;
				}
				int num619 = 0;
				num619 = 800;
				if (!(this.ai[1] == 0f && flag22) || !(num583 < (float)num619))
				{
					return;
				}
				this.ai[1]++;
				if (Main.myPlayer != owner)
				{
					return;
				}
				if (localAI[0] >= 3f)
				{
					this.ai[0] += 4f;
					if (this.ai[0] == 6f)
					{
						this.ai[0] = 3f;
					}
					localAI[0] = 0f;
				}
				else
				{
					this.ai[0] += 6f;
					Vector2 v5 = center16 - base.Center;
					v5 = v5.SafeNormalize(Vector2.Zero);
					float num620 = ((this.ai[0] == 8f) ? 12f : 10f);
					velocity = v5 * num620;
					AI_066_TryInterceptingTarget(center16, zero, num620);
					netUpdate = true;
				}
			}
		}
		else if (aiStyle == 67)
		{
			AI_067_FreakingPirates();
		}
		else if (aiStyle == 68)
		{
			rotation += 0.25f * (float)direction;
			bool flag25 = type == 399;
			bool flag26 = type == 669;
			this.ai[0] += 1f;
			if (this.ai[0] >= 3f)
			{
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (this.ai[0] >= 15f)
			{
				velocity.Y += 0.2f;
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
				velocity.X *= 0.99f;
			}
			if (alpha == 0)
			{
				if (flag25)
				{
					Vector2 spinningpoint10 = default(Vector2);
					((Vector2)(ref spinningpoint10))._002Ector(4f, -8f);
					float num622 = rotation;
					if (direction == -1)
					{
						spinningpoint10.X = -4f;
					}
					Vector2 spinningpoint24 = spinningpoint10;
					double radians9 = num622;
					val4 = default(Vector2);
					spinningpoint10 = spinningpoint24.RotatedBy(radians9, val4);
					for (int num623 = 0; num623 < 1; num623++)
					{
						int num624 = Dust.NewDust(base.Center + spinningpoint10 - Vector2.One * 5f, 4, 4, 6);
						Main.dust[num624].scale = 1.5f;
						Main.dust[num624].noGravity = true;
						Main.dust[num624].velocity = Main.dust[num624].velocity * 0.25f + Vector2.Normalize(spinningpoint10) * 1f;
						Dust obj2 = Main.dust[num624];
						Vector2 spinningpoint25 = Main.dust[num624].velocity;
						double radians10 = -(float)Math.PI / 2f * (float)direction;
						val4 = default(Vector2);
						obj2.velocity = spinningpoint25.RotatedBy(radians10, val4);
					}
				}
				if (flag26)
				{
					Vector2 spinningpoint11 = default(Vector2);
					for (int num625 = 0; num625 < 2; num625++)
					{
						((Vector2)(ref spinningpoint11))._002Ector(MathHelper.Lerp(-8f, 8f, Main.rand.NextFloat()), -4f);
						float num626 = rotation;
						Vector2 spinningpoint26 = spinningpoint11;
						double radians11 = num626;
						val4 = default(Vector2);
						spinningpoint11 = spinningpoint26.RotatedBy(radians11, val4);
						int num627 = Dust.NewDust(base.Center + spinningpoint11 - Vector2.One * 5f, 4, 4, 4);
						Main.dust[num627].scale = 0.8f - Main.rand.NextFloat() * 0.2f;
						Main.dust[num627].velocity = Main.dust[num627].velocity * 0.25f + Vector2.Normalize(spinningpoint11) * 1f;
						Dust obj3 = Main.dust[num627];
						Vector2 spinningpoint27 = Main.dust[num627].velocity;
						double radians12 = -(float)Math.PI / 2f * (float)direction;
						val4 = default(Vector2);
						obj3.velocity = spinningpoint27.RotatedBy(radians12, val4);
						Main.dust[num627].color = Utils.SelectRandom(Main.rand, (Color[])(object)new Color[2]
						{
							new Color(255, 255, 255, 110),
							new Color(245, 200, 30, 110)
						});
					}
				}
			}
			spriteDirection = direction;
			if (timeLeft <= 3)
			{
				tileCollide = false;
				alpha = 255;
				base.position.X += width / 2;
				base.position.Y += height / 2;
				width = 80;
				height = 80;
				base.position.X -= width / 2;
				base.position.Y -= height / 2;
				knockBack = 8f;
			}
			if (wet && timeLeft > 3)
			{
				timeLeft = 3;
			}
		}
		else if (aiStyle == 69)
		{
			Vector2 vector122 = Main.player[owner].Center - base.Center;
			rotation = vector122.ToRotation() - 1.57f;
			if (Main.player[owner].dead)
			{
				Kill();
				return;
			}
			Main.player[owner].SetDummyItemTime(10);
			if (vector122.X < 0f)
			{
				Main.player[owner].ChangeDir(1);
				direction = 1;
			}
			else
			{
				Main.player[owner].ChangeDir(-1);
				direction = -1;
			}
			Main.player[owner].itemRotation = (vector122 * -1f * (float)direction).ToRotation();
			spriteDirection = ((!(vector122.X > 0f)) ? 1 : (-1));
			if (this.ai[0] == 0f && ((Vector2)(ref vector122)).Length() > 400f)
			{
				this.ai[0] = 1f;
			}
			if (this.ai[0] == 1f || this.ai[0] == 2f)
			{
				float num628 = ((Vector2)(ref vector122)).Length();
				if (num628 > 1500f)
				{
					Kill();
					return;
				}
				if (num628 > 600f)
				{
					this.ai[0] = 2f;
				}
				tileCollide = false;
				float num629 = 20f;
				if (this.ai[0] == 2f)
				{
					num629 = 40f;
				}
				velocity = Vector2.Normalize(vector122) * num629;
				if (((Vector2)(ref vector122)).Length() < num629)
				{
					Kill();
					return;
				}
			}
			this.ai[1]++;
			if (this.ai[1] > 5f)
			{
				alpha = 0;
			}
			if ((int)this.ai[1] % 4 == 0 && owner == Main.myPlayer)
			{
				Vector2 spinningpoint12 = vector122 * -1f;
				((Vector2)(ref spinningpoint12)).Normalize();
				spinningpoint12 *= (float)Main.rand.Next(45, 65) * 0.1f;
				Vector2 spinningpoint28 = spinningpoint12;
				double radians13 = (Main.rand.NextDouble() - 0.5) * 1.5707963705062866;
				val4 = default(Vector2);
				spinningpoint12 = spinningpoint28.RotatedBy(radians13, val4);
				NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, spinningpoint12.X, spinningpoint12.Y, 405, damage, knockBack, owner, -10f);
			}
		}
		else if (aiStyle == 70)
		{
			if (this.ai[0] == 0f)
			{
				float num630 = 650f;
				int num631 = -1;
				for (int num634 = 0; num634 < 200; num634++)
				{
					NPC nPC16 = Main.npc[num634];
					val4 = nPC16.Center - base.Center;
					float num635 = ((Vector2)(ref val4)).Length();
					if (!(num635 >= num630) && nPC16.CanBeChasedBy(this) && Collision.CanHit(base.position, width, height, nPC16.position, nPC16.width, nPC16.height))
					{
						num631 = num634;
						num630 = num635;
					}
				}
				this.ai[0] = num631 + 1;
				if (this.ai[0] == 0f)
				{
					this.ai[0] = -15f;
				}
				if (this.ai[0] > 0f)
				{
					float num636 = (float)Main.rand.Next(35, 75) / 30f;
					velocity = (velocity * 20f + Vector2.Normalize(Main.npc[(int)this.ai[0] - 1].Center - base.Center + new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101))) * num636) / 21f;
					netUpdate = true;
				}
			}
			else if (this.ai[0] > 0f)
			{
				Vector2 vector124 = Vector2.Normalize(Main.npc[(int)this.ai[0] - 1].Center - base.Center);
				velocity = (velocity * 40f + vector124 * 12f) / 41f;
			}
			else
			{
				this.ai[0]++;
				alpha -= 25;
				if (alpha < 50)
				{
					alpha = 50;
				}
				velocity *= 0.95f;
			}
			if (this.ai[1] == 0f)
			{
				this.ai[1] = (float)Main.rand.Next(80, 121) / 100f;
				netUpdate = true;
			}
			scale = this.ai[1];
		}
		else if (aiStyle == 71)
		{
			localAI[1]++;
			if (localAI[1] > 10f && Main.rand.Next(3) == 0)
			{
				int num637 = 6;
				for (int num638 = 0; num638 < num637; num638++)
				{
					Vector2 spinningpoint13 = Vector2.Normalize(velocity) * new Vector2((float)width, (float)height) / 2f;
					Vector2 spinningpoint29 = spinningpoint13;
					double radians14 = (double)(num638 - (num637 / 2 - 1)) * Math.PI / (double)num637;
					val4 = default(Vector2);
					spinningpoint13 = spinningpoint29.RotatedBy(radians14, val4) + base.Center;
					Vector2 vector125 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - (float)Math.PI / 2f).ToRotationVector2() * (float)Main.rand.Next(3, 8);
					int num639 = Dust.NewDust(spinningpoint13 + vector125, 0, 0, 217, vector125.X * 2f, vector125.Y * 2f, 100, default(Color), 1.4f);
					Main.dust[num639].noGravity = true;
					Main.dust[num639].noLight = true;
					Dust dust157 = Main.dust[num639];
					Dust dust212 = dust157;
					dust212.velocity /= 4f;
					dust157 = Main.dust[num639];
					dust212 = dust157;
					dust212.velocity -= velocity;
				}
				alpha -= 5;
				if (alpha < 50)
				{
					alpha = 50;
				}
				rotation += velocity.X * 0.1f;
				frame = (int)(localAI[1] / 3f) % 3;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.1f, 0.4f, 0.6f);
			}
			int num640 = -1;
			Vector2 vector126 = base.Center;
			float num641 = 500f;
			if (localAI[0] > 0f)
			{
				localAI[0]--;
			}
			if (this.ai[0] == 0f && localAI[0] == 0f)
			{
				for (int num642 = 0; num642 < 200; num642++)
				{
					NPC nPC17 = Main.npc[num642];
					if (nPC17.CanBeChasedBy(this) && (this.ai[0] == 0f || this.ai[0] == (float)(num642 + 1)))
					{
						Vector2 center18 = nPC17.Center;
						float num643 = Vector2.Distance(center18, vector126);
						if (num643 < num641 && Collision.CanHit(base.position, width, height, nPC17.position, nPC17.width, nPC17.height))
						{
							num641 = num643;
							vector126 = center18;
							num640 = num642;
						}
					}
				}
				if (num640 >= 0)
				{
					this.ai[0] = num640 + 1;
					netUpdate = true;
				}
				num640 = -1;
			}
			if (localAI[0] == 0f && this.ai[0] == 0f)
			{
				localAI[0] = 30f;
			}
			bool flag27 = false;
			if (this.ai[0] != 0f)
			{
				int num645 = (int)(this.ai[0] - 1f);
				if (Main.npc[num645].active && !Main.npc[num645].dontTakeDamage && Main.npc[num645].immune[owner] == 0)
				{
					float num646 = Main.npc[num645].position.X + (float)(Main.npc[num645].width / 2);
					float num647 = Main.npc[num645].position.Y + (float)(Main.npc[num645].height / 2);
					float num648 = Math.Abs(base.position.X + (float)(width / 2) - num646) + Math.Abs(base.position.Y + (float)(height / 2) - num647);
					if (num648 < 1000f)
					{
						flag27 = true;
						vector126 = Main.npc[num645].Center;
					}
				}
				else
				{
					this.ai[0] = 0f;
					flag27 = false;
					netUpdate = true;
				}
			}
			if (flag27)
			{
				Vector2 v6 = vector126 - base.Center;
				float num649 = velocity.ToRotation();
				float num650 = v6.ToRotation();
				double num651 = num650 - num649;
				if (num651 > Math.PI)
				{
					num651 -= Math.PI * 2.0;
				}
				if (num651 < -Math.PI)
				{
					num651 += Math.PI * 2.0;
				}
				Vector2 spinningpoint30 = velocity;
				double radians15 = num651 * 0.10000000149011612;
				val4 = default(Vector2);
				velocity = spinningpoint30.RotatedBy(radians15, val4);
			}
			float num652 = ((Vector2)(ref velocity)).Length();
			((Vector2)(ref velocity)).Normalize();
			velocity *= num652 + 0.0025f;
		}
		else if (aiStyle == 72)
		{
			localAI[0]++;
			if (localAI[0] > 3f)
			{
				alpha -= 25;
				if (alpha < 50)
				{
					alpha = 50;
				}
			}
			velocity *= 0.96f;
			if (this.ai[1] == 0f)
			{
				this.ai[1] = (float)Main.rand.Next(60, 121) / 100f;
				netUpdate = true;
			}
			scale = this.ai[1];
			base.position = base.Center;
			int num653 = 14;
			int num654 = 14;
			width = (int)((float)num653 * this.ai[1]);
			height = (int)((float)num654 * this.ai[1]);
			base.position -= new Vector2((float)(width / 2), (float)(height / 2));
		}
		else if (aiStyle == 73)
		{
			int num656 = (int)this.ai[0];
			int num657 = (int)this.ai[1];
			Tile tile2 = Main.tile[num656, num657];
			if (tile2 == null || !tile2.active() || tile2.type != 338)
			{
				Kill();
				return;
			}
			float num658 = 2f;
			float num659 = (float)timeLeft / 60f;
			if (num659 < 1f)
			{
				num658 *= num659;
			}
			if (type == 419)
			{
				Vector2 spinningpoint14 = default(Vector2);
				for (int num660 = 0; num660 < 2; num660++)
				{
					((Vector2)(ref spinningpoint14))._002Ector(0f, 0f - num658);
					spinningpoint14 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
					Vector2 spinningpoint31 = spinningpoint14;
					double radians16 = (Main.rand.NextDouble() - 0.5) * 1.5707963705062866;
					val4 = default(Vector2);
					spinningpoint14 = spinningpoint31.RotatedBy(radians16, val4);
					int num661 = Dust.NewDust(base.position, width, height, 222, 0f, 0f, 100);
					Dust dust8 = Main.dust[num661];
					dust8.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
					Dust dust152 = dust8;
					Dust dust212 = dust152;
					dust212.velocity *= 0.5f;
					if (dust8.velocity.Y > 0f)
					{
						dust8.velocity.Y *= -1f;
					}
					dust152 = dust8;
					dust212 = dust152;
					dust212.position -= new Vector2((float)(2 + Main.rand.Next(-2, 3)), 0f);
					dust152 = dust8;
					dust212 = dust152;
					dust212.velocity += spinningpoint14;
					dust8.scale = 0.6f;
					dust8.fadeIn = dust8.scale + 0.2f;
					dust8.velocity.Y *= 2f;
				}
			}
			if (type == 420)
			{
				Vector2 spinningpoint15 = default(Vector2);
				for (int num662 = 0; num662 < 2; num662++)
				{
					((Vector2)(ref spinningpoint15))._002Ector(0f, 0f - num658);
					spinningpoint15 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
					Vector2 spinningpoint32 = spinningpoint15;
					double radians17 = (Main.rand.NextDouble() - 0.5) * 1.5707963705062866;
					val4 = default(Vector2);
					spinningpoint15 = spinningpoint32.RotatedBy(radians17, val4);
					int num663 = 219;
					if (Main.rand.Next(5) == 0)
					{
						num663 = 222;
					}
					int num664 = Dust.NewDust(base.position, width, height, num663, 0f, 0f, 100);
					Dust dust9 = Main.dust[num664];
					dust9.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
					Dust dust153 = dust9;
					Dust dust212 = dust153;
					dust212.velocity *= 0.5f;
					if (dust9.velocity.Y > 0f)
					{
						dust9.velocity.Y *= -1f;
					}
					dust153 = dust9;
					dust212 = dust153;
					dust212.position -= new Vector2((float)(2 + Main.rand.Next(-2, 3)), 0f);
					dust153 = dust9;
					dust212 = dust153;
					dust212.velocity += spinningpoint15;
					dust9.velocity.X *= 0.5f;
					dust9.scale = 0.6f;
					dust9.fadeIn = dust9.scale + 0.2f;
					dust9.velocity.Y *= 2f;
				}
			}
			if (type == 421)
			{
				Vector2 spinningpoint16 = default(Vector2);
				for (int num665 = 0; num665 < 2; num665++)
				{
					((Vector2)(ref spinningpoint16))._002Ector(0f, 0f - num658);
					spinningpoint16 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
					Vector2 spinningpoint33 = spinningpoint16;
					double radians18 = (Main.rand.NextDouble() - 0.5) * 0.7853981852531433;
					val4 = default(Vector2);
					spinningpoint16 = spinningpoint33.RotatedBy(radians18, val4);
					int num667 = Dust.NewDust(base.position, width, height, 221, 0f, 0f, 100);
					Dust dust10 = Main.dust[num667];
					dust10.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
					Dust dust154 = dust10;
					Dust dust212 = dust154;
					dust212.velocity *= 0.1f;
					if (dust10.velocity.Y > 0f)
					{
						dust10.velocity.Y *= -1f;
					}
					dust154 = dust10;
					dust212 = dust154;
					dust212.position -= new Vector2((float)(2 + Main.rand.Next(-2, 3)), 0f);
					dust154 = dust10;
					dust212 = dust154;
					dust212.velocity += spinningpoint16;
					dust10.scale = 0.6f;
					dust10.fadeIn = dust10.scale + 0.2f;
					dust10.velocity.Y *= 2.5f;
				}
				if (timeLeft % 10 == 0)
				{
					float num668 = 0.85f + (float)Main.rand.NextDouble() * 0.2f;
					Vector2 vector127 = default(Vector2);
					for (int num669 = 0; num669 < 9; num669++)
					{
						((Vector2)(ref vector127))._002Ector((float)(num669 - 4) / 5f, (0f - num658) * num668);
						int num670 = Dust.NewDust(base.position, width, height, 222, 0f, 0f, 100);
						Dust dust11 = Main.dust[num670];
						dust11.scale = 0.7f + (float)Main.rand.NextDouble() * 0.3f;
						Dust dust155 = dust11;
						Dust dust212 = dust155;
						dust212.velocity *= 0f;
						if (dust11.velocity.Y > 0f)
						{
							dust11.velocity.Y *= -1f;
						}
						dust155 = dust11;
						dust212 = dust155;
						dust212.position -= new Vector2((float)(2 + Main.rand.Next(-2, 3)), 0f);
						dust155 = dust11;
						dust212 = dust155;
						dust212.velocity += vector127;
						dust11.scale = 0.6f;
						dust11.fadeIn = dust11.scale + 0.2f;
						dust11.velocity.Y *= 2f;
					}
				}
			}
			if (type != 422)
			{
				return;
			}
			Vector2 spinningpoint17 = default(Vector2);
			for (int num671 = 0; num671 < 2; num671++)
			{
				((Vector2)(ref spinningpoint17))._002Ector(0f, 0f - num658);
				spinningpoint17 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
				Vector2 spinningpoint34 = spinningpoint17;
				double radians19 = (Main.rand.NextDouble() - 0.5) * 1.5707963705062866;
				val4 = default(Vector2);
				spinningpoint17 = spinningpoint34.RotatedBy(radians19, val4);
				int num672 = Dust.NewDust(base.position, width, height, 219 + Main.rand.Next(5), 0f, 0f, 100);
				Dust dust159 = Main.dust[num672];
				dust159.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
				Dust dust156 = dust159;
				Dust dust212 = dust156;
				dust212.velocity *= 0.5f;
				if (dust159.velocity.Y > 0f)
				{
					dust159.velocity.Y *= -1f;
				}
				dust156 = dust159;
				dust212 = dust156;
				dust212.position -= new Vector2((float)(2 + Main.rand.Next(-2, 3)), 0f);
				dust156 = dust159;
				dust212 = dust156;
				dust212.velocity += spinningpoint17;
				dust159.scale = 0.6f;
				dust159.fadeIn = dust159.scale + 0.2f;
				dust159.velocity.Y *= 2f;
			}
		}
		else if (aiStyle == 74)
		{
			if (extraUpdates == 1)
			{
				localAI[0] *= localAI[1];
				localAI[1] -= 0.001f;
				if ((double)localAI[0] < 0.01)
				{
					Kill();
				}
			}
		}
		else if (aiStyle == 75)
		{
			AI_075();
		}
		else if (aiStyle == 76)
		{
			Player player8 = Main.player[owner];
			player8.heldProj = whoAmI;
			if (type == 441)
			{
				if (player8.mount.Type != 9)
				{
					Kill();
					return;
				}
			}
			else if (type == 453 && player8.mount.Type != 8)
			{
				Kill();
				return;
			}
			if (Main.myPlayer == owner)
			{
				base.position.X = Main.screenPosition.X + (float)Main.mouseX;
				base.position.Y = Main.screenPosition.Y + (float)Main.mouseY;
				if (this.ai[0] != base.position.X - player8.position.X || this.ai[1] != base.position.Y - player8.position.Y)
				{
					netUpdate = true;
				}
				this.ai[0] = base.position.X - player8.position.X;
				this.ai[1] = base.position.Y - player8.position.Y;
				player8.mount.AimAbility(player8, base.position);
				if (!player8.channel)
				{
					player8.mount.UseAbility(player8, base.position, toggleOn: false);
					Kill();
				}
				return;
			}
			base.position.X = player8.position.X + this.ai[0];
			base.position.Y = player8.position.Y + this.ai[1];
			if (type == 441)
			{
				if (!player8.mount.AbilityCharging)
				{
					player8.mount.StartAbilityCharge(player8);
				}
			}
			else if (type == 453 && !player8.mount.AbilityActive)
			{
				player8.mount.UseAbility(player8, base.position, toggleOn: false);
			}
			player8.mount.AimAbility(player8, base.position);
		}
		else if (aiStyle == 77)
		{
			ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[0]));
			if (activeSound != null)
			{
				if (activeSound.Volume == 0f)
				{
					activeSound.Stop();
					localAI[0] = SlotId.Invalid.ToFloat();
				}
				activeSound.Volume = Math.Max(0f, activeSound.Volume - 0.05f);
			}
			else
			{
				localAI[0] = SlotId.Invalid.ToFloat();
			}
			if (this.ai[1] == 1f)
			{
				friendly = false;
				if (alpha < 255)
				{
					alpha += 51;
				}
				if (alpha >= 255)
				{
					alpha = 255;
					Kill();
					return;
				}
			}
			else
			{
				if (alpha > 0)
				{
					alpha -= 50;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			float num673 = 30f;
			float num674 = num673 * 4f;
			this.ai[0]++;
			if (this.ai[0] > num674)
			{
				this.ai[0] = 0f;
			}
			Vector2 unitY = Vector2.UnitY;
			double radians20 = (float)Math.PI * 2f * this.ai[0] / num673;
			val4 = default(Vector2);
			Vector2 vector128 = -unitY.RotatedBy(radians20, val4);
			float val = 0.75f + vector128.Y * 0.25f;
			float val2 = 0.8f - vector128.Y * 0.2f;
			float num675 = Math.Max(val, val2);
			base.position += new Vector2((float)width, (float)height) / 2f;
			width = (height = (int)(80f * num675));
			base.position -= new Vector2((float)width, (float)height) / 2f;
			frameCounter++;
			if (frameCounter >= 3)
			{
				frameCounter = 0;
				frame++;
				if (frame >= 4)
				{
					frame = 0;
				}
			}
			for (int num676 = 0; num676 < 1; num676++)
			{
				float num678 = 55f * num675;
				float num679 = 11f * num675;
				float num680 = 0.5f;
				int num681 = Dust.NewDust(base.position, width, height, 226, 0f, 0f, 100, default(Color), 0.5f);
				Main.dust[num681].noGravity = true;
				Dust dust151 = Main.dust[num681];
				Dust dust212 = dust151;
				dust212.velocity *= 2f;
				Main.dust[num681].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (num679 + num680 * (float)Main.rand.NextDouble() * num678) + base.Center;
				Main.dust[num681].velocity = Main.dust[num681].velocity / 2f + Vector2.Normalize(Main.dust[num681].position - base.Center);
				if (Main.rand.Next(2) == 0)
				{
					num681 = Dust.NewDust(base.position, width, height, 226, 0f, 0f, 100, default(Color), 0.9f);
					Main.dust[num681].noGravity = true;
					dust151 = Main.dust[num681];
					dust212 = dust151;
					dust212.velocity *= 1.2f;
					Main.dust[num681].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (num679 + num680 * (float)Main.rand.NextDouble() * num678) + base.Center;
					Main.dust[num681].velocity = Main.dust[num681].velocity / 2f + Vector2.Normalize(Main.dust[num681].position - base.Center);
				}
				if (Main.rand.Next(4) == 0)
				{
					num681 = Dust.NewDust(base.position, width, height, 226, 0f, 0f, 100, default(Color), 0.7f);
					Main.dust[num681].noGravity = true;
					dust151 = Main.dust[num681];
					dust212 = dust151;
					dust212.velocity *= 1.2f;
					Main.dust[num681].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (num679 + num680 * (float)Main.rand.NextDouble() * num678) + base.Center;
					Main.dust[num681].velocity = Main.dust[num681].velocity / 2f + Vector2.Normalize(Main.dust[num681].position - base.Center);
				}
			}
		}
		else if (aiStyle == 78)
		{
			if (alpha > 0)
			{
				alpha -= 30;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			Vector2 v7 = this.ai[0].ToRotationVector2();
			float num682 = velocity.ToRotation();
			float num683 = v7.ToRotation();
			double num684 = num683 - num682;
			if (num684 > Math.PI)
			{
				num684 -= Math.PI * 2.0;
			}
			if (num684 < -Math.PI)
			{
				num684 += Math.PI * 2.0;
			}
			Vector2 spinningpoint35 = velocity;
			double radians21 = num684 * 0.05000000074505806;
			val4 = default(Vector2);
			velocity = spinningpoint35.RotatedBy(radians21, val4);
			velocity *= 0.96f;
			rotation = velocity.ToRotation() - (float)Math.PI / 2f;
			if (Main.myPlayer == owner && timeLeft > 60)
			{
				timeLeft = 60;
			}
		}
		else if (aiStyle == 79)
		{
			bool flag28 = true;
			int num685 = (int)this.ai[0] - 1;
			if (type == 447 && (this.ai[0] == 0f || ((!Main.npc[num685].active || Main.npc[num685].type != 392) && (!Main.npc[num685].active || Main.npc[num685].type != 395 || !(Main.npc[num685].ai[3] % 120f >= 60f) || Main.npc[num685].ai[0] != 2f))))
			{
				flag28 = false;
			}
			if (!flag28)
			{
				Kill();
				return;
			}
			NPC nPC18 = Main.npc[num685];
			float num686 = nPC18.Center.Y + 46f;
			float num687 = num686;
			if (type == 447)
			{
				int target = nPC18.target;
				if (nPC18.type == 392)
				{
					target = Main.npc[(int)nPC18.ai[0]].target;
				}
				Player player9 = Main.player[target];
				if (player9 != null && player9.active && !player9.dead)
				{
					num687 = player9.Bottom.Y;
				}
			}
			num687 /= 16f;
			int num689 = (int)nPC18.Center.X / 16;
			int num690 = (int)num686 / 16;
			int num691 = 0;
			if ((float)num690 >= num687 && Main.tile[num689, num690].nactive() && Main.tileSolid[Main.tile[num689, num690].type] && !Main.tileSolidTop[Main.tile[num689, num690].type])
			{
				num691 = 1;
			}
			else
			{
				for (; num691 < 150 && num690 + num691 < Main.maxTilesY; num691++)
				{
					int num692 = num690 + num691;
					if ((float)num692 >= num687 && Main.tile[num689, num692].nactive() && Main.tileSolid[Main.tile[num689, num692].type] && !Main.tileSolidTop[Main.tile[num689, num692].type])
					{
						num691--;
						break;
					}
				}
			}
			base.position.X = nPC18.Center.X - (float)(width / 2);
			base.position.Y = num686;
			height = (num691 + 1) * 16;
			int num693 = (int)base.position.Y + height;
			if (Main.tile[num689, num693 / 16].nactive() && Main.tileSolid[Main.tile[num689, num693 / 16].type] && !Main.tileSolidTop[Main.tile[num689, num693 / 16].type])
			{
				int num694 = num693 % 16;
				height -= num694 - 2;
			}
			if (type == 447)
			{
				for (int num695 = 0; num695 < 2; num695++)
				{
					int num696 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + (float)height - 16f), width, 16, 228);
					Main.dust[num696].noGravity = true;
					Dust dust149 = Main.dust[num696];
					Dust dust212 = dust149;
					dust212.velocity *= 0.5f;
					Main.dust[num696].velocity.X -= (float)num695 - nPC18.velocity.X * 2f / 3f;
					Main.dust[num696].scale = 2.8f;
				}
				if (Main.rand.Next(5) == 0)
				{
					int num697 = Dust.NewDust(new Vector2(base.position.X + (float)(width / 2) - (float)(width / 2 * Math.Sign(nPC18.velocity.X)) - 4f, base.position.Y + (float)height - 16f), 4, 16, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust150 = Main.dust[num697];
					Dust dust212 = dust150;
					dust212.velocity *= 0.5f;
					Main.dust[num697].velocity.X -= nPC18.velocity.X / 2f;
					Main.dust[num697].velocity.Y = 0f - Math.Abs(Main.dust[num697].velocity.Y);
				}
			}
			if (type == 447 && ++frameCounter >= 5)
			{
				frameCounter = 0;
				if (++frame >= 4)
				{
					frame = 0;
				}
			}
		}
		else if (aiStyle == 80)
		{
			if (this.ai[0] == 0f && this.ai[1] > 0f)
			{
				this.ai[1]--;
			}
			else if (this.ai[0] == 0f && this.ai[1] == 0f)
			{
				this.ai[0] = 1f;
				this.ai[1] = (int)Player.FindClosest(base.position, width, height);
				netUpdate = true;
				float num698 = ((Vector2)(ref velocity)).Length();
				velocity = Vector2.Normalize(velocity) * (num698 + 4f);
				for (int num700 = 0; num700 < 8; num700++)
				{
					Vector2 spinningpoint2 = Vector2.UnitX * -8f;
					Vector2 val8 = spinningpoint2;
					Vector2 unitY2 = Vector2.UnitY;
					double radians22 = (float)num700 * (float)Math.PI / 4f;
					val4 = default(Vector2);
					spinningpoint2 = val8 + -unitY2.RotatedBy(radians22, val4) * new Vector2(2f, 8f);
					Vector2 spinningpoint36 = spinningpoint2;
					double radians23 = rotation - (float)Math.PI / 2f;
					val4 = default(Vector2);
					spinningpoint2 = spinningpoint36.RotatedBy(radians23, val4);
					int num701 = Dust.NewDust(base.Center, 0, 0, 228);
					Main.dust[num701].scale = 1.5f;
					Main.dust[num701].noGravity = true;
					Main.dust[num701].position = base.Center + spinningpoint2;
					Main.dust[num701].velocity = velocity * 0f;
				}
			}
			else if (this.ai[0] == 1f)
			{
				tileCollide = true;
				localAI[1]++;
				float num702 = 180f;
				float num703 = 0f;
				float num704 = 30f;
				if (localAI[1] == num702)
				{
					Kill();
					return;
				}
				if (localAI[1] >= num703 && localAI[1] < num703 + num704)
				{
					Vector2 v8 = Main.player[(int)this.ai[1]].Center - base.Center;
					float num705 = velocity.ToRotation();
					float num706 = v8.ToRotation();
					double num707 = num706 - num705;
					if (num707 > Math.PI)
					{
						num707 -= Math.PI * 2.0;
					}
					if (num707 < -Math.PI)
					{
						num707 += Math.PI * 2.0;
					}
					Vector2 spinningpoint37 = velocity;
					double radians24 = num707 * 0.20000000298023224;
					val4 = default(Vector2);
					velocity = spinningpoint37.RotatedBy(radians24, val4);
				}
				if (localAI[1] % 5f == 0f)
				{
					for (int num708 = 0; num708 < 4; num708++)
					{
						Vector2 spinningpoint3 = Vector2.UnitX * -8f;
						Vector2 val9 = spinningpoint3;
						Vector2 unitY3 = Vector2.UnitY;
						double radians25 = (float)num708 * (float)Math.PI / 4f;
						val4 = default(Vector2);
						spinningpoint3 = val9 + -unitY3.RotatedBy(radians25, val4) * new Vector2(2f, 4f);
						Vector2 spinningpoint38 = spinningpoint3;
						double radians26 = rotation - (float)Math.PI / 2f;
						val4 = default(Vector2);
						spinningpoint3 = spinningpoint38.RotatedBy(radians26, val4);
						int num709 = Dust.NewDust(base.Center, 0, 0, 228);
						Main.dust[num709].scale = 1.5f;
						Main.dust[num709].noGravity = true;
						Main.dust[num709].position = base.Center + spinningpoint3;
						Main.dust[num709].velocity = velocity * 0f;
					}
				}
			}
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
			if (++frameCounter >= 3)
			{
				frameCounter = 0;
				if (++frame >= 3)
				{
					frame = 0;
				}
			}
			for (int num711 = 0; (float)num711 < 1f + this.ai[0]; num711++)
			{
				Vector2 unitY4 = Vector2.UnitY;
				double radians27 = rotation;
				val4 = default(Vector2);
				Vector2 vector129 = unitY4.RotatedBy(radians27, val4) * 8f * (float)(num711 + 1);
				int num712 = Dust.NewDust(base.Center, 0, 0, 228);
				Main.dust[num712].position = base.Center + vector129;
				Main.dust[num712].scale = 1f;
				Main.dust[num712].noGravity = true;
			}
			for (int num713 = 0; num713 < 255; num713++)
			{
				Player player10 = Main.player[num713];
				if (player10.active && !player10.dead && Vector2.Distance(player10.Center, base.Center) <= 42f)
				{
					Kill();
					break;
				}
			}
		}
		else if (aiStyle == 81)
		{
			int num714 = penetrate;
			if (this.ai[0] == 0f)
			{
				tileCollide = true;
				localAI[0]++;
				if (localAI[0] > 7f)
				{
					int num715 = Utils.SelectRandom<int>(Main.rand, 226, 229);
					Vector2 center19 = base.Center;
					Vector2 spinningpoint4 = default(Vector2);
					((Vector2)(ref spinningpoint4))._002Ector(-16f, 16f);
					float num716 = 1f;
					spinningpoint4 += new Vector2(-16f, 16f);
					Vector2 spinningpoint39 = spinningpoint4;
					double radians28 = rotation;
					val4 = default(Vector2);
					spinningpoint4 = spinningpoint39.RotatedBy(radians28, val4);
					int num717 = 4;
					int num718 = Dust.NewDust(center19 + spinningpoint4 + Vector2.One * (float)(-num717), num717 * 2, num717 * 2, num715, 0f, 0f, 100, default(Color), num716);
					Dust dust148 = Main.dust[num718];
					Dust dust212 = dust148;
					dust212.velocity *= 0.1f;
					if (Main.rand.Next(6) != 0)
					{
						Main.dust[num718].noGravity = true;
					}
				}
				float num719 = 0.01f;
				int num720 = 5;
				int num722 = num720 * 15;
				int num723 = 0;
				if (localAI[0] > 7f)
				{
					if (localAI[1] == 0f)
					{
						scale -= num719;
						alpha += num720;
						if (alpha > num722)
						{
							alpha = num722;
							localAI[1] = 1f;
						}
					}
					else if (localAI[1] == 1f)
					{
						scale += num719;
						alpha -= num720;
						if (alpha <= num723)
						{
							alpha = num723;
							localAI[1] = 0f;
						}
					}
				}
				rotation = velocity.ToRotation() + (float)Math.PI / 4f;
			}
			else if (this.ai[0] >= 1f && this.ai[0] < (float)(1 + num714))
			{
				tileCollide = false;
				alpha += 15;
				velocity *= 0.98f;
				localAI[0] = 0f;
				int num724 = -1;
				Vector2 vector130 = base.Center;
				float num725 = 250f;
				for (int num726 = 0; num726 < 200; num726++)
				{
					NPC nPC19 = Main.npc[num726];
					if (nPC19.CanBeChasedBy(this))
					{
						Vector2 center20 = nPC19.Center;
						float num727 = Vector2.Distance(center20, base.Center);
						if (num727 < num725)
						{
							num725 = num727;
							vector130 = center20;
							num724 = num726;
						}
					}
				}
				if (alpha >= 255)
				{
					if (this.ai[0] == 1f)
					{
						Kill();
						return;
					}
					if (num724 >= 0)
					{
						netUpdate = true;
						this.ai[0] += num714;
						base.position = vector130 + ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * 100f - new Vector2((float)width, (float)height) / 2f;
						velocity = Vector2.Normalize(vector130 - base.Center) * 15f;
						rotation = velocity.ToRotation() + (float)Math.PI / 4f;
					}
					else
					{
						Kill();
					}
				}
				if (active && num724 >= 0)
				{
					base.position += Main.npc[num724].velocity;
				}
				if (Main.rand.Next(3) == 0)
				{
					int num728 = Utils.SelectRandom<int>(Main.rand, 226, 229);
					Vector2 center2 = base.Center;
					Vector2 vector131 = default(Vector2);
					((Vector2)(ref vector131))._002Ector(-16f, 16f);
					vector131 = vector131;
					float num729 = 0.6f;
					vector131 += new Vector2(-16f, 16f);
					Vector2 spinningpoint40 = vector131;
					double radians29 = rotation;
					val4 = default(Vector2);
					vector131 = spinningpoint40.RotatedBy(radians29, val4);
					int num730 = 4;
					int num731 = Dust.NewDust(center2 + vector131 + Vector2.One * (float)(-num730), num730 * 2, num730 * 2, num728, 0f, 0f, 100, default(Color), num729);
					Dust dust147 = Main.dust[num731];
					Dust dust212 = dust147;
					dust212.velocity *= 0.1f;
					Main.dust[num731].noGravity = true;
				}
			}
			else if (this.ai[0] >= (float)(1 + num714) && this.ai[0] < (float)(1 + num714 * 2))
			{
				scale = 0.9f;
				tileCollide = false;
				rotation = velocity.ToRotation() + (float)Math.PI / 4f;
				this.ai[1]++;
				if (this.ai[1] >= 15f)
				{
					alpha += 51;
					velocity *= 0.8f;
					if (alpha >= 255)
					{
						Kill();
					}
				}
				else
				{
					alpha -= 125;
					if (alpha < 0)
					{
						alpha = 0;
					}
					velocity *= 0.98f;
				}
				localAI[0]++;
				int num733 = -1;
				Vector2 center3 = base.Center;
				float num734 = 250f;
				for (int num735 = 0; num735 < 200; num735++)
				{
					NPC nPC2 = Main.npc[num735];
					if (nPC2.CanBeChasedBy(this))
					{
						Vector2 center4 = nPC2.Center;
						float num736 = Vector2.Distance(center4, base.Center);
						if (num736 < num734)
						{
							num734 = num736;
							center3 = center4;
							num733 = num735;
						}
					}
				}
				if (num733 >= 0)
				{
					base.position += Main.npc[num733].velocity;
				}
				int num737 = Utils.SelectRandom<int>(Main.rand, 226, 229);
				Vector2 center5 = base.Center;
				Vector2 spinningpoint5 = default(Vector2);
				((Vector2)(ref spinningpoint5))._002Ector(-16f, 16f);
				float num738 = 0.6f;
				spinningpoint5 += new Vector2(-16f, 16f);
				Vector2 spinningpoint41 = spinningpoint5;
				double radians30 = rotation;
				val4 = default(Vector2);
				spinningpoint5 = spinningpoint41.RotatedBy(radians30, val4);
				int num739 = 4;
				int num740 = Dust.NewDust(center5 + spinningpoint5 + Vector2.One * (float)(-num739), num739 * 2, num739 * 2, num737, 0f, 0f, 100, default(Color), num738);
				Dust dust146 = Main.dust[num740];
				Dust dust212 = dust146;
				dust212.velocity *= 0.1f;
				Main.dust[num740].noGravity = true;
			}
			float num741 = (float)alpha / 255f;
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f * num741, 0.4f * num741, 1f * num741);
		}
		else if (aiStyle == 82)
		{
			alpha -= 40;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (this.ai[0] == 0f)
			{
				localAI[0]++;
				if (localAI[0] >= 45f)
				{
					localAI[0] = 0f;
					this.ai[0] = 1f;
					this.ai[1] = 0f - this.ai[1];
					netUpdate = true;
				}
				ref Vector2 reference = ref velocity;
				Vector2 spinningpoint42 = velocity;
				double radians31 = this.ai[1];
				val4 = default(Vector2);
				reference.X = spinningpoint42.RotatedBy(radians31, val4).X;
				velocity.X = MathHelper.Clamp(velocity.X, -6f, 6f);
				velocity.Y -= 0.08f;
				if (velocity.Y > 0f)
				{
					velocity.Y -= 0.2f;
				}
				if (velocity.Y < -7f)
				{
					velocity.Y = -7f;
				}
			}
			else if (this.ai[0] == 1f)
			{
				localAI[0]++;
				if (localAI[0] >= 90f)
				{
					localAI[0] = 0f;
					this.ai[0] = 2f;
					this.ai[1] = (int)Player.FindClosest(base.position, width, height);
					netUpdate = true;
				}
				ref Vector2 reference2 = ref velocity;
				Vector2 spinningpoint43 = velocity;
				double radians32 = this.ai[1];
				val4 = default(Vector2);
				reference2.X = spinningpoint43.RotatedBy(radians32, val4).X;
				velocity.X = MathHelper.Clamp(velocity.X, -6f, 6f);
				velocity.Y -= 0.08f;
				if (velocity.Y > 0f)
				{
					velocity.Y -= 0.2f;
				}
				if (velocity.Y < -7f)
				{
					velocity.Y = -7f;
				}
			}
			else if (this.ai[0] == 2f)
			{
				Vector2 value23 = Main.player[(int)this.ai[1]].Center - base.Center;
				if (((Vector2)(ref value23)).Length() < 30f)
				{
					Kill();
					return;
				}
				((Vector2)(ref value23)).Normalize();
				value23 *= 14f;
				value23 = Vector2.Lerp(velocity, value23, 0.6f);
				if (value23.Y < 6f)
				{
					value23.Y = 6f;
				}
				float num742 = 0.4f;
				if (velocity.X < value23.X)
				{
					velocity.X += num742;
					if (velocity.X < 0f && value23.X > 0f)
					{
						velocity.X += num742;
					}
				}
				else if (velocity.X > value23.X)
				{
					velocity.X -= num742;
					if (velocity.X > 0f && value23.X < 0f)
					{
						velocity.X -= num742;
					}
				}
				if (velocity.Y < value23.Y)
				{
					velocity.Y += num742;
					if (velocity.Y < 0f && value23.Y > 0f)
					{
						velocity.Y += num742;
					}
				}
				else if (velocity.Y > value23.Y)
				{
					velocity.Y -= num742;
					if (velocity.Y > 0f && value23.Y < 0f)
					{
						velocity.Y -= num742;
					}
				}
			}
			if (alpha < 40)
			{
				int num745 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 229, (0f - velocity.X) / 3f, (0f - velocity.Y) / 3f, 150, Color.Transparent, 1.2f);
				Main.dust[num745].noGravity = true;
			}
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
		}
		else if (aiStyle == 83)
		{
			if (alpha > 200)
			{
				alpha = 200;
			}
			alpha -= 5;
			if (alpha < 0)
			{
				alpha = 0;
			}
			float num746 = (float)alpha / 255f;
			scale = 1f - num746;
			if (this.ai[0] >= 0f)
			{
				this.ai[0]++;
			}
			if (this.ai[0] == -1f)
			{
				frame = 1;
				extraUpdates = 1;
			}
			else if (this.ai[0] < 30f)
			{
				base.position = Main.npc[(int)this.ai[1]].Center - new Vector2((float)width, (float)height) / 2f - velocity;
			}
			else
			{
				velocity *= 0.96f;
				if (++frameCounter >= 6)
				{
					frameCounter = 0;
					if (++frame >= 2)
					{
						frame = 0;
					}
				}
			}
			if (alpha >= 40)
			{
				return;
			}
			for (int num747 = 0; num747 < 2; num747++)
			{
				float num748 = (float)Main.rand.NextDouble() * 1f - 0.5f;
				if (num748 < -0.5f)
				{
					num748 = -0.5f;
				}
				if (num748 > 0.5f)
				{
					num748 = 0.5f;
				}
				Vector2 spinningpoint44 = new Vector2((float)(-width) * 0.65f * scale, 0f);
				double radians33 = num748 * ((float)Math.PI * 2f);
				val4 = default(Vector2);
				Vector2 spinningpoint45 = Utils.RotatedBy(spinningpoint44, radians33, val4);
				double radians34 = velocity.ToRotation();
				val4 = default(Vector2);
				Vector2 vector132 = spinningpoint45.RotatedBy(radians34, val4);
				int num749 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 229, (0f - velocity.X) / 3f, (0f - velocity.Y) / 3f, 150, Color.Transparent, 0.7f);
				Main.dust[num749].velocity = Vector2.Zero;
				Main.dust[num749].position = base.Center + vector132;
				Main.dust[num749].noGravity = true;
			}
		}
		else if (aiStyle == 84)
		{
			Vector2? vector133 = null;
			if (velocity.HasNaNs() || velocity == Vector2.Zero)
			{
				velocity = -Vector2.UnitY;
			}
			if (type == 455 && Main.npc[(int)this.ai[1]].active && Main.npc[(int)this.ai[1]].type == 396)
			{
				if (Main.npc[(int)this.ai[1]].ai[0] == -2f)
				{
					Kill();
					return;
				}
				val4 = new Vector2(27f, 59f) * Main.npc[(int)this.ai[1]].localAI[1];
				Vector2 vector135 = Utils.Vector2FromElipse(Main.npc[(int)this.ai[1]].localAI[0].ToRotationVector2(), val4);
				base.position = Main.npc[(int)this.ai[1]].Center + vector135 - new Vector2((float)width, (float)height) / 2f;
			}
			else if (type == 455 && Main.npc[(int)this.ai[1]].active && Main.npc[(int)this.ai[1]].type == 400)
			{
				val4 = new Vector2(30f, 30f) * Main.npc[(int)this.ai[1]].localAI[1];
				Vector2 vector136 = Utils.Vector2FromElipse(Main.npc[(int)this.ai[1]].localAI[0].ToRotationVector2(), val4);
				base.position = Main.npc[(int)this.ai[1]].Center + vector136 - new Vector2((float)width, (float)height) / 2f;
			}
			else if (type == 537 && Main.npc[(int)this.ai[1]].active && Main.npc[(int)this.ai[1]].type == 411)
			{
				Vector2 vector137 = default(Vector2);
				((Vector2)(ref vector137))._002Ector((float)(Main.npc[(int)this.ai[1]].direction * 6), -4f);
				base.position = Main.npc[(int)this.ai[1]].Center + vector137 - base.Size / 2f + new Vector2(0f, 0f - Main.npc[(int)this.ai[1]].gfxOffY);
			}
			else if (type == 461 && Main.projectile[(int)this.ai[1]].active && Main.projectile[(int)this.ai[1]].type == 460)
			{
				Vector2 vector138 = Vector2.Normalize(Main.projectile[(int)this.ai[1]].velocity);
				base.position = Main.projectile[(int)this.ai[1]].Center + vector138 * 16f - new Vector2((float)width, (float)height) / 2f + new Vector2(0f, 0f - Main.projectile[(int)this.ai[1]].gfxOffY);
				velocity = Vector2.Normalize(Main.projectile[(int)this.ai[1]].velocity);
			}
			else if (type == 642 && Main.projectile[(int)this.ai[1]].active && Main.projectile[(int)this.ai[1]].type == 641)
			{
				Projectile projectile = Main.projectile[(int)this.ai[1]];
				base.Center = projectile.Center;
				Vector2 spinningpoint46 = this.ai[0].ToRotationVector2();
				double radians35 = (float)(-projectile.direction) * ((float)Math.PI / 3f) / 50f;
				val4 = default(Vector2);
				Vector2 vector139 = spinningpoint46.RotatedBy(radians35, val4);
				this.ai[0] = vector139.ToRotation();
				velocity = Vector2.Normalize(vector139);
			}
			else
			{
				if (type != 632 || !Main.projectile[(int)this.ai[1]].active || Main.projectile[(int)this.ai[1]].type != 633)
				{
					Kill();
					return;
				}
				float num750 = (float)(int)this.ai[0] - 2.5f;
				Vector2 vector140 = Vector2.Normalize(Main.projectile[(int)this.ai[1]].velocity);
				Projectile projectile2 = Main.projectile[(int)this.ai[1]];
				float num751 = num750 * ((float)Math.PI / 6f);
				float num752 = 20f;
				Vector2 zero2 = Vector2.Zero;
				float num753 = 1f;
				float num754 = 15f;
				float num756 = -2f;
				if (projectile2.ai[0] < 180f)
				{
					num753 = 1f - projectile2.ai[0] / 180f;
					num754 = 20f - projectile2.ai[0] / 180f * 14f;
					if (projectile2.ai[0] < 120f)
					{
						num752 = 20f - 4f * (projectile2.ai[0] / 120f);
						Opacity = projectile2.ai[0] / 120f * 0.4f;
					}
					else
					{
						num752 = 16f - 10f * ((projectile2.ai[0] - 120f) / 60f);
						Opacity = 0.4f + (projectile2.ai[0] - 120f) / 60f * 0.6f;
					}
					num756 = -22f + projectile2.ai[0] / 180f * 20f;
				}
				else
				{
					num753 = 0f;
					num752 = 1.75f;
					num754 = 6f;
					Opacity = 1f;
					num756 = -2f;
				}
				float num757 = (projectile2.ai[0] + num750 * num752) / (num752 * 6f) * ((float)Math.PI * 2f);
				Vector2 unitY5 = Vector2.UnitY;
				double radians36 = num757;
				val4 = default(Vector2);
				num751 = unitY5.RotatedBy(radians36, val4).Y * ((float)Math.PI / 6f) * num753;
				Vector2 unitY6 = Vector2.UnitY;
				double radians37 = num757;
				val4 = default(Vector2);
				Vector2 spinningpoint47 = unitY6.RotatedBy(radians37, val4) * new Vector2(4f, num754);
				double radians38 = projectile2.velocity.ToRotation();
				val4 = default(Vector2);
				zero2 = spinningpoint47.RotatedBy(radians38, val4);
				base.position = projectile2.Center + vector140 * 16f - base.Size / 2f + new Vector2(0f, 0f - Main.projectile[(int)this.ai[1]].gfxOffY);
				base.position += projectile2.velocity.ToRotation().ToRotationVector2() * num756;
				base.position += zero2;
				Vector2 spinningpoint48 = Vector2.Normalize(projectile2.velocity);
				double radians39 = num751;
				val4 = default(Vector2);
				velocity = spinningpoint48.RotatedBy(radians39, val4);
				scale = 1.4f * (1f - num753);
				damage = projectile2.damage;
				if (projectile2.ai[0] >= 180f)
				{
					damage *= 3;
					vector133 = projectile2.Center;
				}
				if (!Collision.CanHitLine(Main.player[owner].Center, 0, 0, projectile2.Center, 0, 0))
				{
					vector133 = Main.player[owner].Center;
				}
				friendly = projectile2.ai[0] > 30f;
			}
			if (velocity.HasNaNs() || velocity == Vector2.Zero)
			{
				velocity = -Vector2.UnitY;
			}
			if (type == 461)
			{
				this.ai[0]++;
				if (this.ai[0] >= 300f)
				{
					Kill();
					return;
				}
				scale = (float)Math.Sin(this.ai[0] * (float)Math.PI / 300f) * 10f;
				if (scale > 1f)
				{
					scale = 1f;
				}
			}
			if (type == 455)
			{
				if (localAI[0] == 0f)
				{
					SoundEngine.PlaySound(29, (int)base.position.X, (int)base.position.Y, 104);
				}
				float num758 = 1f;
				if (Main.npc[(int)this.ai[1]].type == 400)
				{
					num758 = 0.4f;
				}
				localAI[0]++;
				if (localAI[0] >= 180f)
				{
					Kill();
					return;
				}
				scale = (float)Math.Sin(localAI[0] * (float)Math.PI / 180f) * 10f * num758;
				if (scale > num758)
				{
					scale = num758;
				}
			}
			if (type == 642)
			{
				float num759 = 1f;
				localAI[0]++;
				if (localAI[0] >= 50f)
				{
					Kill();
					return;
				}
				scale = (float)Math.Sin(localAI[0] * (float)Math.PI / 50f) * 10f * num759;
				if (scale > num759)
				{
					scale = num759;
				}
			}
			if (type == 537)
			{
				float num760 = 0.8f;
				localAI[0]++;
				if (localAI[0] >= 90f)
				{
					Kill();
					return;
				}
				scale = (float)Math.Sin(localAI[0] * (float)Math.PI / 90f) * 10f * num760;
				if (scale > num760)
				{
					scale = num760;
				}
			}
			float num761 = velocity.ToRotation();
			if (type == 455)
			{
				num761 += this.ai[0];
			}
			rotation = num761 - (float)Math.PI / 2f;
			velocity = num761.ToRotationVector2();
			float num762 = 0f;
			float num763 = 0f;
			Vector2 samplingPoint = base.Center;
			if (vector133.HasValue)
			{
				samplingPoint = vector133.Value;
			}
			if (type == 455)
			{
				num762 = 3f;
				num763 = width;
			}
			else if (type == 461)
			{
				num762 = 2f;
				num763 = 0f;
			}
			else if (type == 642)
			{
				num762 = 2f;
				num763 = 0f;
			}
			else if (type == 632)
			{
				num762 = 2f;
				num763 = 0f;
			}
			else if (type == 537)
			{
				num762 = 2f;
				num763 = 0f;
			}
			float[] array2 = new float[(int)num762];
			Collision.LaserScan(samplingPoint, velocity, num763 * scale, 2400f, array2);
			float num764 = 0f;
			for (int num765 = 0; num765 < array2.Length; num765++)
			{
				num764 += array2[num765];
			}
			num764 /= num762;
			float amount = 0.5f;
			if (type == 455)
			{
				NPC nPC3 = Main.npc[(int)this.ai[1]];
				if (nPC3.type == 396)
				{
					Player player11 = Main.player[nPC3.target];
					if (!Collision.CanHitLine(nPC3.position, nPC3.width, nPC3.height, player11.position, player11.width, player11.height))
					{
						num764 = Math.Min(2400f, Vector2.Distance(nPC3.Center, player11.Center) + 150f);
						amount = 0.75f;
					}
				}
			}
			if (type == 632)
			{
				amount = 0.75f;
			}
			localAI[1] = MathHelper.Lerp(localAI[1], num764, amount);
			if (type == 455)
			{
				Vector2 vector141 = base.Center + velocity * (localAI[1] - 14f);
				Vector2 vector142 = default(Vector2);
				for (int num767 = 0; num767 < 2; num767++)
				{
					float num768 = velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
					float num769 = (float)Main.rand.NextDouble() * 2f + 2f;
					((Vector2)(ref vector142))._002Ector((float)Math.Cos(num768) * num769, (float)Math.Sin(num768) * num769);
					int num770 = Dust.NewDust(vector141, 0, 0, 229, vector142.X, vector142.Y);
					Main.dust[num770].noGravity = true;
					Main.dust[num770].scale = 1.7f;
				}
				if (Main.rand.Next(5) == 0)
				{
					Vector2 spinningpoint49 = velocity;
					val4 = default(Vector2);
					Vector2 vector143 = spinningpoint49.RotatedBy(1.5707963705062866, val4) * ((float)Main.rand.NextDouble() - 0.5f) * (float)width;
					int num771 = Dust.NewDust(vector141 + vector143 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust140 = Main.dust[num771];
					Dust dust212 = dust140;
					dust212.velocity *= 0.5f;
					Main.dust[num771].velocity.Y = 0f - Math.Abs(Main.dust[num771].velocity.Y);
				}
				DelegateMethods.v3_1 = new Vector3(0.3f, 0.65f, 0.7f);
				Utils.PlotTileLine(base.Center, base.Center + velocity * localAI[1], (float)width * scale, DelegateMethods.CastLight);
			}
			else if (type == 642)
			{
				Vector2 vector144 = base.Center + velocity * (localAI[1] - 14f);
				Vector2 vector146 = default(Vector2);
				for (int num772 = 0; num772 < 2; num772++)
				{
					float num773 = velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
					float num774 = (float)Main.rand.NextDouble() * 2f + 2f;
					((Vector2)(ref vector146))._002Ector((float)Math.Cos(num773) * num774, (float)Math.Sin(num773) * num774);
					int num775 = Dust.NewDust(vector144, 0, 0, 229, vector146.X, vector146.Y);
					Main.dust[num775].noGravity = true;
					Main.dust[num775].scale = 1.7f;
				}
				if (Main.rand.Next(5) == 0)
				{
					Vector2 spinningpoint50 = velocity;
					val4 = default(Vector2);
					Vector2 vector147 = spinningpoint50.RotatedBy(1.5707963705062866, val4) * ((float)Main.rand.NextDouble() - 0.5f) * (float)width;
					int num776 = Dust.NewDust(vector144 + vector147 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust139 = Main.dust[num776];
					Dust dust212 = dust139;
					dust212.velocity *= 0.5f;
					Main.dust[num776].velocity.Y = 0f - Math.Abs(Main.dust[num776].velocity.Y);
				}
				DelegateMethods.v3_1 = new Vector3(0.3f, 0.65f, 0.7f);
				Utils.PlotTileLine(base.Center, base.Center + velocity * localAI[1], (float)width * scale, DelegateMethods.CastLight);
			}
			if (type == 461)
			{
				Vector2 vector148 = base.Center + velocity * (localAI[1] - 8f);
				Vector2 vector149 = default(Vector2);
				for (int num778 = 0; num778 < 2; num778++)
				{
					float num779 = velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
					float num780 = (float)Main.rand.NextDouble() * 0.8f + 1f;
					((Vector2)(ref vector149))._002Ector((float)Math.Cos(num779) * num780, (float)Math.Sin(num779) * num780);
					int num781 = Dust.NewDust(vector148, 0, 0, 226, vector149.X, vector149.Y);
					Main.dust[num781].noGravity = true;
					Main.dust[num781].scale = 1.2f;
				}
				if (Main.rand.Next(5) == 0)
				{
					Vector2 spinningpoint51 = velocity;
					val4 = default(Vector2);
					Vector2 vector150 = spinningpoint51.RotatedBy(1.5707963705062866, val4) * ((float)Main.rand.NextDouble() - 0.5f) * (float)width;
					int num782 = Dust.NewDust(vector148 + vector150 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust141 = Main.dust[num782];
					Dust dust212 = dust141;
					dust212.velocity *= 0.5f;
					Main.dust[num782].velocity.Y = 0f - Math.Abs(Main.dust[num782].velocity.Y);
				}
				DelegateMethods.v3_1 = new Vector3(0.4f, 0.85f, 0.9f);
				Utils.PlotTileLine(base.Center, base.Center + velocity * localAI[1], (float)width * scale, DelegateMethods.CastLight);
			}
			if (type == 537)
			{
				float num783 = MathHelper.Clamp(MathHelper.Lerp(0f, 1f, localAI[0] / 30f), 0f, 1f);
				Vector2 vector151 = base.Center + velocity * (localAI[1] - 8f);
				int num784 = (int)(2f * num783);
				if (num784 > 0)
				{
					Vector2 vector152 = default(Vector2);
					for (int num785 = 0; num785 < num784; num785++)
					{
						float num786 = velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
						float num787 = (float)Main.rand.NextDouble() * 0.8f + 1f;
						((Vector2)(ref vector152))._002Ector((float)Math.Cos(num786) * num787, (float)Math.Sin(num786) * num787);
						int num789 = Dust.NewDust(vector151, 0, 0, 226, vector152.X, vector152.Y);
						Main.dust[num789].noGravity = true;
						Main.dust[num789].scale = 1.2f;
					}
				}
				int maxValue2 = 5 + (int)((1f - num783) * 5f);
				if (Main.rand.Next(maxValue2) == 0)
				{
					Vector2 spinningpoint52 = velocity;
					val4 = default(Vector2);
					Vector2 vector153 = spinningpoint52.RotatedBy(1.5707963705062866, val4) * ((float)Main.rand.NextDouble() - 0.5f) * (float)width;
					int num790 = Dust.NewDust(vector151 + vector153 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust142 = Main.dust[num790];
					Dust dust212 = dust142;
					dust212.velocity *= 0.5f;
					Main.dust[num790].velocity.Y = 0f - Math.Abs(Main.dust[num790].velocity.Y);
				}
				DelegateMethods.v3_1 = new Vector3(0.4f, 0.85f, 0.9f);
				Utils.PlotTileLine(base.Center, base.Center + velocity * localAI[1], (float)width * scale, DelegateMethods.CastLight);
			}
			if (type != 632 || !(Math.Abs(localAI[1] - num764) < 100f) || !(scale > 0.15f))
			{
				return;
			}
			float laserLuminance = 0.5f;
			float laserAlphaMultiplier = 0f;
			float lastPrismHue = GetLastPrismHue(this.ai[0], ref laserLuminance, ref laserAlphaMultiplier);
			Color color = Main.hslToRgb(lastPrismHue, 1f, laserLuminance);
			((Color)(ref color)).A = (byte)((float)(int)((Color)(ref color)).A * laserAlphaMultiplier);
			Color color2 = color;
			Vector2 vector154 = base.Center + velocity * (localAI[1] - 14.5f * scale);
			float x5 = Main.rgbToHsl(new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB)).X;
			Vector2 vector155 = default(Vector2);
			for (int num791 = 0; num791 < 2; num791++)
			{
				float num792 = velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
				float num793 = (float)Main.rand.NextDouble() * 0.8f + 1f;
				((Vector2)(ref vector155))._002Ector((float)Math.Cos(num792) * num793, (float)Math.Sin(num792) * num793);
				int num794 = Dust.NewDust(vector154, 0, 0, 267, vector155.X, vector155.Y);
				Main.dust[num794].color = color;
				Main.dust[num794].scale = 1.2f;
				if (scale > 1f)
				{
					Dust dust143 = Main.dust[num794];
					Dust dust212 = dust143;
					dust212.velocity *= scale;
					dust143 = Main.dust[num794];
					dust212 = dust143;
					dust212.scale *= scale;
				}
				Main.dust[num794].noGravity = true;
				if (scale != 1.4f && num794 != 6000)
				{
					Dust dust160 = Dust.CloneDust(num794);
					dust160.color = Color.White;
					Dust dust144 = dust160;
					Dust dust212 = dust144;
					dust212.scale /= 2f;
				}
				float hue = (x5 + Main.rand.NextFloat() * 0.4f) % 1f;
				Main.dust[num794].color = Color.Lerp(color, Main.hslToRgb(hue, 1f, 0.75f), scale / 1.4f);
			}
			if (Main.rand.Next(5) == 0)
			{
				Vector2 spinningpoint53 = velocity;
				val4 = default(Vector2);
				Vector2 vector157 = spinningpoint53.RotatedBy(1.5707963705062866, val4) * ((float)Main.rand.NextDouble() - 0.5f) * (float)width;
				int num795 = Dust.NewDust(vector154 + vector157 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
				Dust dust145 = Main.dust[num795];
				Dust dust212 = dust145;
				dust212.velocity *= 0.5f;
				Main.dust[num795].velocity.Y = 0f - Math.Abs(Main.dust[num795].velocity.Y);
			}
			DelegateMethods.v3_1 = ((Color)(ref color)).ToVector3() * 0.3f;
			float value24 = 0.1f * (float)Math.Sin(Main.GlobalTimeWrappedHourly * 20f);
			Vector2 size2 = default(Vector2);
			((Vector2)(ref size2))._002Ector(((Vector2)(ref velocity)).Length() * localAI[1], (float)width * scale);
			float num796 = velocity.ToRotation();
			if (Main.netMode != 2)
			{
				WaterShaderData obj4 = (WaterShaderData)Filters.Scene["WaterDistortion"].GetShader();
				Vector2 val10 = base.position;
				Vector2 spinningpoint54 = new Vector2(size2.X * 0.5f, 0f);
				double radians40 = num796;
				val4 = default(Vector2);
				obj4.QueueRipple(val10 + Utils.RotatedBy(spinningpoint54, radians40, val4), new Color(0.5f, 0.1f * (float)Math.Sign(value24) + 0.5f, 0f, 1f) * Math.Abs(value24), size2, RippleShape.Square, num796);
			}
			Utils.PlotTileLine(base.Center, base.Center + velocity * localAI[1], (float)width * scale, DelegateMethods.CastLight);
		}
		else if (aiStyle == 85)
		{
			Vector2 vector158 = default(Vector2);
			((Vector2)(ref vector158))._002Ector(0f, 216f);
			alpha -= 15;
			if (alpha < 0)
			{
				alpha = 0;
			}
			int num797 = (int)Math.Abs(this.ai[0]) - 1;
			int num798 = (int)this.ai[1];
			if (!Main.npc[num797].active || Main.npc[num797].type != 396)
			{
				Kill();
				return;
			}
			localAI[0]++;
			if (localAI[0] >= 330f && this.ai[0] > 0f && Main.netMode != 1)
			{
				this.ai[0] *= -1f;
				netUpdate = true;
			}
			if (Main.netMode != 1 && this.ai[0] > 0f && (!Main.player[(int)this.ai[1]].active || Main.player[(int)this.ai[1]].dead))
			{
				this.ai[0] *= -1f;
				netUpdate = true;
			}
			rotation = (Main.npc[(int)Math.Abs(this.ai[0]) - 1].Center - Main.player[(int)this.ai[1]].Center + vector158).ToRotation() + (float)Math.PI / 2f;
			if (this.ai[0] > 0f)
			{
				Vector2 value25 = Main.player[(int)this.ai[1]].Center - base.Center;
				if (value25.X != 0f || value25.Y != 0f)
				{
					velocity = Vector2.Normalize(value25) * Math.Min(16f, ((Vector2)(ref value25)).Length());
				}
				else
				{
					velocity = Vector2.Zero;
				}
				if (((Vector2)(ref value25)).Length() < 20f && localAI[1] == 0f)
				{
					localAI[1] = 1f;
					int timeToAdd = 840;
					if (Main.expertMode)
					{
						timeToAdd = 960;
					}
					if (!Main.player[num798].creativeGodMode)
					{
						Main.player[num798].AddBuff(145, timeToAdd);
					}
				}
			}
			else
			{
				Vector2 value2 = Main.npc[(int)Math.Abs(this.ai[0]) - 1].Center - base.Center + vector158;
				if (value2.X != 0f || value2.Y != 0f)
				{
					velocity = Vector2.Normalize(value2) * Math.Min(16f, ((Vector2)(ref value2)).Length());
				}
				else
				{
					velocity = Vector2.Zero;
				}
				if (((Vector2)(ref value2)).Length() < 20f)
				{
					Kill();
				}
			}
		}
		else if (aiStyle == 86)
		{
			if (localAI[1] == 0f)
			{
				localAI[1] = 1f;
				SoundEngine.PlaySound(in SoundID.Item120, base.position);
			}
			this.ai[0]++;
			if (this.ai[1] == 1f)
			{
				if (this.ai[0] >= 130f)
				{
					alpha += 10;
				}
				else
				{
					alpha -= 10;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha > 255)
				{
					alpha = 255;
				}
				if (this.ai[0] >= 150f)
				{
					Kill();
					return;
				}
				if (this.ai[0] % 30f == 0f && Main.netMode != 1)
				{
					Vector2 vector159 = rotation.ToRotationVector2();
					NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector159.X, vector159.Y, 464, damage, knockBack, owner);
				}
				rotation += (float)Math.PI / 30f;
				Lighting.AddLight(base.Center, 0.3f, 0.75f, 0.9f);
				return;
			}
			base.position -= velocity;
			if (this.ai[0] >= 40f)
			{
				alpha += 3;
			}
			else
			{
				alpha -= 40;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (alpha > 255)
			{
				alpha = 255;
			}
			if (this.ai[0] >= 45f)
			{
				Kill();
				return;
			}
			Vector2 spinningpoint55 = new Vector2(0f, -720f);
			double radians41 = velocity.ToRotation();
			val4 = default(Vector2);
			Vector2 vector160 = Utils.RotatedBy(spinningpoint55, radians41, val4);
			float num800 = this.ai[0] % 45f / 45f;
			Vector2 spinningpoint6 = vector160 * num800;
			for (int num801 = 0; num801 < 6; num801++)
			{
				Vector2 center22 = base.Center;
				double radians42 = (float)num801 * ((float)Math.PI * 2f) / 6f;
				val4 = default(Vector2);
				Vector2 vector161 = center22 + spinningpoint6.RotatedBy(radians42, val4);
				Lighting.AddLight(vector161, 0.3f, 0.75f, 0.9f);
				for (int num802 = 0; num802 < 2; num802++)
				{
					int num803 = Dust.NewDust(vector161 + Utils.RandomVector2(Main.rand, -8f, 8f) / 2f, 8, 8, 197, 0f, 0f, 100, Color.Transparent);
					Main.dust[num803].noGravity = true;
				}
			}
		}
		else if (aiStyle == 87)
		{
			base.position.Y = this.ai[0];
			height = (int)this.ai[1];
			if (base.Center.X > Main.player[owner].Center.X)
			{
				direction = 1;
			}
			else
			{
				direction = -1;
			}
			velocity.X = (float)direction * 1E-06f;
			if (owner == Main.myPlayer)
			{
				for (int num804 = 0; num804 < 1000; num804++)
				{
					if (Main.projectile[num804].active && num804 != whoAmI && Main.projectile[num804].type == type && Main.projectile[num804].owner == owner && Main.projectile[num804].timeLeft > timeLeft)
					{
						Kill();
						return;
					}
				}
			}
			float num805 = (float)(width * height) * 0.0045f;
			for (int num806 = 0; (float)num806 < num805; num806++)
			{
				int num807 = Dust.NewDust(base.position, width, height, 75, 0f, 0f, 100);
				Main.dust[num807].noGravity = true;
				Dust dust138 = Main.dust[num807];
				Dust dust212 = dust138;
				dust212.velocity *= 0.5f;
				Main.dust[num807].velocity.Y -= 0.5f;
				Main.dust[num807].scale = 1.4f;
				Main.dust[num807].position.X += 6f;
				Main.dust[num807].position.Y -= 2f;
			}
		}
		else if (aiStyle == 88)
		{
			if (type == 465)
			{
				if (localAI[1] == 0f)
				{
					SoundEngine.PlaySound(in SoundID.Item121, base.position);
					localAI[1] = 1f;
				}
				if (this.ai[0] < 180f)
				{
					alpha -= 5;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				else
				{
					alpha += 5;
					if (alpha > 255)
					{
						alpha = 255;
						Kill();
						return;
					}
				}
				this.ai[0]++;
				if (this.ai[0] % 30f == 0f && this.ai[0] < 180f && Main.netMode != 1)
				{
					int[] array3 = new int[5];
					Vector2[] array4 = (Vector2[])(object)new Vector2[5];
					int num808 = 0;
					float num809 = 2000f;
					for (int num811 = 0; num811 < 255; num811++)
					{
						if (!Main.player[num811].active || Main.player[num811].dead)
						{
							continue;
						}
						Vector2 center6 = Main.player[num811].Center;
						float num812 = Vector2.Distance(center6, base.Center);
						if (num812 < num809 && Collision.CanHit(base.Center, 1, 1, center6, 1, 1))
						{
							array3[num808] = num811;
							array4[num808] = center6;
							int num388 = num808 + 1;
							num808 = num388;
							if (num388 >= array4.Length)
							{
								break;
							}
						}
					}
					for (int num813 = 0; num813 < num808; num813++)
					{
						Vector2 vector162 = array4[num813] - base.Center;
						float ai = Main.rand.Next(100);
						Vector2 vector163 = Vector2.Normalize(vector162.RotatedByRandom(0.7853981852531433)) * 7f;
						NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector163.X, vector163.Y, 466, damage, 0f, Main.myPlayer, vector162.ToRotation(), ai);
					}
				}
				Lighting.AddLight(base.Center, 0.4f, 0.85f, 0.9f);
				if (++frameCounter >= 4)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				if (alpha >= 150 || !(this.ai[0] < 180f))
				{
					return;
				}
				for (int num814 = 0; num814 < 1; num814++)
				{
					float num815 = (float)Main.rand.NextDouble() * 1f - 0.5f;
					if (num815 < -0.5f)
					{
						num815 = -0.5f;
					}
					if (num815 > 0.5f)
					{
						num815 = 0.5f;
					}
					Vector2 spinningpoint56 = new Vector2((float)(-width) * 0.2f * scale, 0f);
					double radians43 = num815 * ((float)Math.PI * 2f);
					val4 = default(Vector2);
					Vector2 spinningpoint57 = Utils.RotatedBy(spinningpoint56, radians43, val4);
					double radians44 = velocity.ToRotation();
					val4 = default(Vector2);
					Vector2 vector164 = spinningpoint57.RotatedBy(radians44, val4);
					int num816 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 226, (0f - velocity.X) / 3f, (0f - velocity.Y) / 3f, 150, Color.Transparent, 0.7f);
					Main.dust[num816].position = base.Center + vector164;
					Main.dust[num816].velocity = Vector2.Normalize(Main.dust[num816].position - base.Center) * 2f;
					Main.dust[num816].noGravity = true;
				}
				for (int num817 = 0; num817 < 1; num817++)
				{
					float num818 = (float)Main.rand.NextDouble() * 1f - 0.5f;
					if (num818 < -0.5f)
					{
						num818 = -0.5f;
					}
					if (num818 > 0.5f)
					{
						num818 = 0.5f;
					}
					Vector2 spinningpoint58 = new Vector2((float)(-width) * 0.6f * scale, 0f);
					double radians45 = num818 * ((float)Math.PI * 2f);
					val4 = default(Vector2);
					Vector2 spinningpoint59 = Utils.RotatedBy(spinningpoint58, radians45, val4);
					double radians46 = velocity.ToRotation();
					val4 = default(Vector2);
					Vector2 vector165 = spinningpoint59.RotatedBy(radians46, val4);
					int num819 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 226, (0f - velocity.X) / 3f, (0f - velocity.Y) / 3f, 150, Color.Transparent, 0.7f);
					Main.dust[num819].velocity = Vector2.Zero;
					Main.dust[num819].position = base.Center + vector165;
					Main.dust[num819].noGravity = true;
				}
			}
			else if (type == 466)
			{
				frameCounter++;
				Lighting.AddLight(base.Center, 0.3f, 0.45f, 0.5f);
				if (velocity == Vector2.Zero)
				{
					if (frameCounter >= extraUpdates * 2)
					{
						frameCounter = 0;
						bool flag29 = true;
						for (int num820 = 1; num820 < oldPos.Length; num820++)
						{
							if (oldPos[num820] != oldPos[0])
							{
								flag29 = false;
							}
						}
						if (flag29)
						{
							Kill();
							return;
						}
					}
					if (Main.rand.Next(extraUpdates) == 0)
					{
						Vector2 vector166 = default(Vector2);
						for (int num822 = 0; num822 < 2; num822++)
						{
							float num823 = rotation + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
							float num824 = (float)Main.rand.NextDouble() * 0.8f + 1f;
							((Vector2)(ref vector166))._002Ector((float)Math.Cos(num823) * num824, (float)Math.Sin(num823) * num824);
							int num825 = Dust.NewDust(base.Center, 0, 0, 226, vector166.X, vector166.Y);
							Main.dust[num825].noGravity = true;
							Main.dust[num825].scale = 1.2f;
						}
						if (Main.rand.Next(5) == 0)
						{
							Vector2 spinningpoint60 = velocity;
							val4 = default(Vector2);
							Vector2 vector168 = spinningpoint60.RotatedBy(1.5707963705062866, val4) * ((float)Main.rand.NextDouble() - 0.5f) * (float)width;
							int num826 = Dust.NewDust(base.Center + vector168 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust137 = Main.dust[num826];
							Dust dust212 = dust137;
							dust212.velocity *= 0.5f;
							Main.dust[num826].velocity.Y = 0f - Math.Abs(Main.dust[num826].velocity.Y);
						}
					}
				}
				else
				{
					if (frameCounter < extraUpdates * 2)
					{
						return;
					}
					frameCounter = 0;
					float num827 = ((Vector2)(ref velocity)).Length();
					UnifiedRandom unifiedRandom = new UnifiedRandom((int)this.ai[1]);
					int num828 = 0;
					Vector2 spinningpoint7 = -Vector2.UnitY;
					while (true)
					{
						int num829 = unifiedRandom.Next();
						this.ai[1] = num829;
						num829 %= 100;
						float f = (float)num829 / 100f * ((float)Math.PI * 2f);
						Vector2 vector169 = f.ToRotationVector2();
						if (vector169.Y > 0f)
						{
							vector169.Y *= -1f;
						}
						bool flag30 = false;
						if (vector169.Y > -0.02f)
						{
							flag30 = true;
						}
						if (vector169.X * (float)(extraUpdates + 1) * 2f * num827 + localAI[0] > 40f)
						{
							flag30 = true;
						}
						if (vector169.X * (float)(extraUpdates + 1) * 2f * num827 + localAI[0] < -40f)
						{
							flag30 = true;
						}
						if (flag30)
						{
							if (num828++ >= 100)
							{
								velocity = Vector2.Zero;
								localAI[1] = 1f;
								break;
							}
							continue;
						}
						spinningpoint7 = vector169;
						break;
					}
					if (velocity != Vector2.Zero)
					{
						localAI[0] += spinningpoint7.X * (float)(extraUpdates + 1) * 2f * num827;
						Vector2 spinningpoint61 = spinningpoint7;
						double radians47 = this.ai[0] + (float)Math.PI / 2f;
						val4 = default(Vector2);
						velocity = spinningpoint61.RotatedBy(radians47, val4) * num827;
						rotation = velocity.ToRotation() + (float)Math.PI / 2f;
					}
				}
			}
			else
			{
				if (type != 580)
				{
					return;
				}
				if (localAI[1] == 0f && this.ai[0] >= 900f)
				{
					this.ai[0] -= 1000f;
					localAI[1] = -1f;
				}
				frameCounter++;
				Lighting.AddLight(base.Center, 0.3f, 0.45f, 0.5f);
				if (velocity == Vector2.Zero)
				{
					if (frameCounter >= extraUpdates * 2)
					{
						frameCounter = 0;
						bool flag31 = true;
						for (int num830 = 1; num830 < oldPos.Length; num830++)
						{
							if (oldPos[num830] != oldPos[0])
							{
								flag31 = false;
							}
						}
						if (flag31)
						{
							Kill();
							return;
						}
					}
					if (Main.rand.Next(extraUpdates) == 0 && (velocity != Vector2.Zero || Main.rand.Next((localAI[1] == 2f) ? 2 : 6) == 0))
					{
						Vector2 vector170 = default(Vector2);
						for (int num831 = 0; num831 < 2; num831++)
						{
							float num833 = rotation + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
							float num834 = (float)Main.rand.NextDouble() * 0.8f + 1f;
							((Vector2)(ref vector170))._002Ector((float)Math.Cos(num833) * num834, (float)Math.Sin(num833) * num834);
							int num835 = Dust.NewDust(base.Center, 0, 0, 226, vector170.X, vector170.Y);
							Main.dust[num835].noGravity = true;
							Main.dust[num835].scale = 1.2f;
						}
						if (Main.rand.Next(5) == 0)
						{
							Vector2 spinningpoint62 = velocity;
							val4 = default(Vector2);
							Vector2 vector171 = spinningpoint62.RotatedBy(1.5707963705062866, val4) * ((float)Main.rand.NextDouble() - 0.5f) * (float)width;
							int num836 = Dust.NewDust(base.Center + vector171 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust135 = Main.dust[num836];
							Dust dust212 = dust135;
							dust212.velocity *= 0.5f;
							Main.dust[num836].velocity.Y = 0f - Math.Abs(Main.dust[num836].velocity.Y);
						}
					}
				}
				else
				{
					if (frameCounter < extraUpdates * 2)
					{
						return;
					}
					frameCounter = 0;
					float num837 = ((Vector2)(ref velocity)).Length();
					UnifiedRandom unifiedRandom2 = new UnifiedRandom((int)this.ai[1]);
					int num838 = 0;
					Vector2 spinningpoint8 = -Vector2.UnitY;
					while (true)
					{
						int num839 = unifiedRandom2.Next();
						this.ai[1] = num839;
						num839 %= 100;
						float f2 = (float)num839 / 100f * ((float)Math.PI * 2f);
						Vector2 vector172 = f2.ToRotationVector2();
						if (vector172.Y > 0f)
						{
							vector172.Y *= -1f;
						}
						bool flag32 = false;
						if (vector172.Y > -0.02f)
						{
							flag32 = true;
						}
						if (vector172.X * (float)(extraUpdates + 1) * 2f * num837 + localAI[0] > 40f)
						{
							flag32 = true;
						}
						if (vector172.X * (float)(extraUpdates + 1) * 2f * num837 + localAI[0] < -40f)
						{
							flag32 = true;
						}
						if (flag32)
						{
							if (num838++ >= 100)
							{
								velocity = Vector2.Zero;
								if (localAI[1] < 1f)
								{
									localAI[1] += 2f;
								}
								break;
							}
							continue;
						}
						spinningpoint8 = vector172;
						break;
					}
					if (!(velocity != Vector2.Zero))
					{
						return;
					}
					localAI[0] += spinningpoint8.X * (float)(extraUpdates + 1) * 2f * num837;
					Vector2 spinningpoint63 = spinningpoint8;
					double radians48 = this.ai[0] + (float)Math.PI / 2f;
					val4 = default(Vector2);
					velocity = spinningpoint63.RotatedBy(radians48, val4) * num837;
					rotation = velocity.ToRotation() + (float)Math.PI / 2f;
					if (Main.rand.Next(4) == 0 && Main.netMode != 1 && localAI[1] == 0f)
					{
						float num840 = (float)Main.rand.Next(-3, 4) * ((float)Math.PI / 3f) / 3f;
						Vector2 spinningpoint64 = this.ai[0].ToRotationVector2();
						double radians49 = num840;
						val4 = default(Vector2);
						Vector2 vector173 = spinningpoint64.RotatedBy(radians49, val4) * ((Vector2)(ref velocity)).Length();
						if (!Collision.CanHitLine(base.Center, 0, 0, base.Center + vector173 * 50f, 0, 0))
						{
							NewProjectile(GetProjectileSource_FromThis(), base.Center.X - vector173.X, base.Center.Y - vector173.Y, vector173.X, vector173.Y, type, damage, knockBack, owner, vector173.ToRotation() + 1000f, this.ai[1]);
						}
					}
				}
			}
		}
		else if (aiStyle == 89)
		{
			if (this.ai[1] == -1f)
			{
				alpha += 12;
			}
			else if (this.ai[0] < 300f)
			{
				alpha -= 5;
			}
			else
			{
				alpha += 12;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (alpha > 255)
			{
				alpha = 255;
			}
			scale = 1f - (float)alpha / 255f;
			scale *= 0.6f;
			rotation += (float)Math.PI / 210f;
			if (localAI[1] == 0f)
			{
				localAI[1] = 1f;
				SoundEngine.PlaySound(in SoundID.Item123, base.position);
			}
			if (alpha == 0)
			{
				Vector2 vector174 = default(Vector2);
				for (int num841 = 0; num841 < 2; num841++)
				{
					float num842 = Main.rand.Next(2, 4);
					float num844 = scale;
					if (num841 == 1)
					{
						num844 *= 0.42f;
						num842 *= -0.75f;
					}
					((Vector2)(ref vector174))._002Ector((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
					((Vector2)(ref vector174)).Normalize();
					int num845 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 228, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num845].noGravity = true;
					Main.dust[num845].noLight = true;
					Main.dust[num845].position = base.Center + vector174 * 204f * num844;
					if (Main.rand.Next(8) == 0)
					{
						Main.dust[num845].velocity = vector174 * (0f - num842) * 2f;
						Dust dust133 = Main.dust[num845];
						Dust dust212 = dust133;
						dust212.scale += 0.5f;
					}
					else
					{
						Main.dust[num845].velocity = vector174 * (0f - num842);
					}
				}
			}
			this.ai[0]++;
			if (this.ai[0] >= 60f)
			{
				int num846 = (int)(this.ai[0] - 0f) / 60;
				float num847 = scale * 0.4f;
				Vector2 vector175 = default(Vector2);
				for (int num848 = 0; num848 < 1; num848++)
				{
					float num849 = Main.rand.Next(1, 3);
					((Vector2)(ref vector175))._002Ector((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
					((Vector2)(ref vector175)).Normalize();
					int num850 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 228, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num850].noGravity = true;
					Main.dust[num850].noLight = true;
					Main.dust[num850].position = base.Center;
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num850].velocity = vector175 * num849 * 2f;
						Dust dust134 = Main.dust[num850];
						Dust dust212 = dust134;
						dust212.scale += 0.5f;
					}
					else
					{
						Main.dust[num850].velocity = vector175 * num849;
					}
					Main.dust[num850].fadeIn = 2f;
				}
			}
			if (this.ai[0] == 300f && this.ai[1] != -1f && Main.netMode != 1)
			{
				if (!NPC.AnyNPCs(454))
				{
					this.ai[1] = NPC.NewNPC(GetNPCSource_FromThis(), (int)base.Center.X, (int)base.Center.Y, 454);
				}
				else
				{
					this.ai[1] = NPC.NewNPC(GetNPCSource_FromThis(), (int)base.Center.X, (int)base.Center.Y, 521);
				}
			}
			else if (this.ai[0] == 320f)
			{
				Kill();
				return;
			}
			bool flag33 = false;
			if (this.ai[1] == -1f)
			{
				if (alpha == 255)
				{
					flag33 = true;
				}
			}
			else
			{
				flag33 = !(this.ai[1] >= 0f) || !Main.npc[(int)this.ai[1]].active;
				if ((flag33 || Main.npc[(int)this.ai[1]].type != 439) && (flag33 || Main.npc[(int)this.ai[1]].type != 454) && (flag33 || Main.npc[(int)this.ai[1]].type != 521))
				{
					flag33 = true;
				}
			}
			if (flag33)
			{
				Kill();
			}
			else
			{
				Lighting.AddLight(base.Center, 1.1f, 0.9f, 0.4f);
			}
		}
		else if (aiStyle == 90)
		{
			if (Main.player[owner].dead)
			{
				Kill();
			}
			if (Main.player[owner].magicLantern)
			{
				timeLeft = 2;
			}
			if (tileCollide)
			{
				if (!Collision.CanHit(base.position, width, height, Main.player[owner].Center, 1, 1))
				{
					tileCollide = false;
				}
				else if (!Collision.SolidCollision(base.position, width, height) && Collision.CanHitLine(base.position, width, height, Main.player[owner].Center, 1, 1))
				{
					tileCollide = true;
				}
			}
			direction = Main.player[owner].direction;
			spriteDirection = direction;
			Lighting.AddLight(base.position, 0.35f, 0.35f, 0.1f);
			localAI[0] += 1f;
			if (localAI[0] >= 10f)
			{
				localAI[0] = 0f;
				int num851 = 17;
				val4 = base.Center - Main.player[Main.myPlayer].Center;
				if (((Vector2)(ref val4)).Length() < (float)(Main.screenWidth + num851 * 16))
				{
					int num852 = (int)base.Center.X / 16;
					int num853 = (int)base.Center.Y / 16;
					for (int num856 = num852 - num851; num856 <= num852 + num851; num856++)
					{
						for (int num857 = num853 - num851; num857 <= num853 + num851; num857++)
						{
							if (Main.rand.Next(4) == 0)
							{
								val4 = new Vector2((float)(num852 - num856), (float)(num853 - num857));
								if (((Vector2)(ref val4)).Length() < (float)num851 && num856 > 0 && num856 < Main.maxTilesX - 1 && num857 > 0 && num857 < Main.maxTilesY - 1 && Main.tile[num856, num857] != null && Main.tile[num856, num857].active() && Main.IsTileSpelunkable(num856, num857))
								{
									int num858 = Dust.NewDust(new Vector2((float)(num856 * 16), (float)(num857 * 16)), 16, 16, 204, 0f, 0f, 150, default(Color), 0.3f);
									Main.dust[num858].fadeIn = 0.75f;
									Dust dust132 = Main.dust[num858];
									Dust dust212 = dust132;
									dust212.velocity *= 0.1f;
									Main.dust[num858].noLight = true;
								}
							}
						}
					}
				}
			}
			Vector2 vector176 = Main.player[owner].Center - base.Center;
			vector176.X += 40 * direction;
			vector176.Y -= 40f;
			float num859 = ((Vector2)(ref vector176)).Length();
			if (num859 > 1000f)
			{
				base.Center = Main.player[owner].Center;
			}
			float num860 = 3f;
			float num861 = 4f;
			if (num859 > 200f)
			{
				num861 += (num859 - 200f) * 0.1f;
				tileCollide = false;
			}
			if (num859 < num861)
			{
				velocity *= 0.25f;
				num861 = num859;
			}
			if (vector176.X != 0f || vector176.Y != 0f)
			{
				((Vector2)(ref vector176)).Normalize();
				vector176 *= num861;
			}
			velocity = (velocity * (num860 - 1f) + vector176) / num860;
			if (((Vector2)(ref velocity)).Length() > 6f)
			{
				float num862 = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				if ((double)Math.Abs(rotation - num862) >= 3.14)
				{
					if (num862 < rotation)
					{
						rotation -= 6.28f;
					}
					else
					{
						rotation += 6.28f;
					}
				}
				rotation = (rotation * 4f + num862) / 5f;
				frameCounter++;
				if (frameCounter > 4)
				{
					frameCounter = 0;
					frame++;
					if (frame > 7)
					{
						frame = 4;
					}
				}
				if (frame < 4)
				{
					frame = 7;
				}
				return;
			}
			if ((double)rotation > 3.14)
			{
				rotation -= 6.28f;
			}
			if ((double)rotation > -0.01 && (double)rotation < 0.01)
			{
				rotation = 0f;
			}
			else
			{
				rotation *= 0.9f;
			}
			frameCounter++;
			if (frameCounter > 6)
			{
				frameCounter = 0;
				frame++;
				if (frame > 3)
				{
					frame = 0;
				}
			}
		}
		else if (aiStyle == 91)
		{
			Vector2 center7 = base.Center;
			scale = 1f - localAI[0];
			width = (int)(20f * scale);
			height = width;
			base.position.X = center7.X - (float)(width / 2);
			base.position.Y = center7.Y - (float)(height / 2);
			if ((double)localAI[0] < 0.1)
			{
				localAI[0] += 0.01f;
			}
			else
			{
				localAI[0] += 0.025f;
			}
			if (localAI[0] >= 0.95f)
			{
				Kill();
			}
			velocity.X += this.ai[0] * 1.5f;
			velocity.Y += this.ai[1] * 1.5f;
			if (((Vector2)(ref velocity)).Length() > 16f)
			{
				((Vector2)(ref velocity)).Normalize();
				velocity *= 16f;
			}
			this.ai[0] *= 1.05f;
			this.ai[1] *= 1.05f;
			if (scale < 1f)
			{
				for (int num863 = 0; (float)num863 < scale * 10f; num863++)
				{
					int num864 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 27, velocity.X, velocity.Y, 100, default(Color), 1.1f);
					Main.dust[num864].position = (Main.dust[num864].position + base.Center) / 2f;
					Main.dust[num864].noGravity = true;
					Dust dust130 = Main.dust[num864];
					Dust dust212 = dust130;
					dust212.velocity *= 0.1f;
					dust130 = Main.dust[num864];
					dust212 = dust130;
					dust212.velocity -= velocity * (1.3f - scale);
					Main.dust[num864].fadeIn = 100 + owner;
					dust130 = Main.dust[num864];
					dust212 = dust130;
					dust212.scale += scale * 0.75f;
				}
			}
		}
		else if (aiStyle == 92)
		{
			bool flag35 = type == 1007;
			bool flag36 = type >= 511 && type <= 513;
			tileCollide = false;
			if (Main.netMode != 1 && flag35 && localAI[0] == 0f)
			{
				if (direction == 0)
				{
					direction = 1;
				}
				ParticleOrchestrator.BroadcastParticleSpawn(ParticleOrchestraType.GasTrap, new ParticleOrchestraSettings
				{
					PositionInWorld = base.Center,
					MovementVector = Vector2.Zero
				});
			}
			this.ai[0] += 1f;
			if (this.ai[1] >= 1f)
			{
				this.ai[0] += 2f;
			}
			float num865 = 260f;
			if (flag35)
			{
				num865 = 80f;
			}
			if (this.ai[0] > num865)
			{
				Kill();
				this.ai[0] = num865;
				return;
			}
			float fromValue = this.ai[0] / num865;
			if (flag35)
			{
				scale = Utils.Remap(fromValue, 0f, 0.95f, 1f, 6f);
				Vector2 center8 = base.Center;
				width = (int)(50f * scale);
				height = (int)(50f * scale);
				base.Center = center8;
				Opacity = MathHelper.Clamp(Utils.Remap(fromValue, 0f, 0.25f, 0f, 1f) * Utils.Remap(fromValue, 0.75f, 1f, 1f, 0f), 0f, 1f) * 0.85f;
			}
			else
			{
				Opacity = Utils.Remap(fromValue, 0f, 0.3f, 0f, 1f) * Utils.Remap(fromValue, 0.3f, 1f, 1f, 0f) * 0.7f;
			}
			localAI[0] += direction;
			rotation = (float)whoAmI * 0.4002029f + localAI[0] * ((float)Math.PI * 2f) / 480f;
			if (flag35)
			{
				velocity = Vector2.Zero;
			}
			else
			{
				velocity *= 0.96f;
			}
			if (flag36)
			{
				Rectangle rectangle5 = default(Rectangle);
				((Rectangle)(ref rectangle5))._002Ector((int)base.position.X, (int)base.position.Y, width, height);
				Rectangle value3 = default(Rectangle);
				for (int num867 = 0; num867 < 1000; num867++)
				{
					if (num867 == whoAmI)
					{
						continue;
					}
					Projectile projectile3 = Main.projectile[num867];
					if (!projectile3.active || projectile3.type < 511 || projectile3.type > 513)
					{
						continue;
					}
					((Rectangle)(ref value3))._002Ector((int)projectile3.position.X, (int)projectile3.position.Y, projectile3.width, projectile3.height);
					if (!((Rectangle)(ref rectangle5)).Intersects(value3))
					{
						continue;
					}
					Vector2 vector177 = projectile3.Center - base.Center;
					if (vector177 == Vector2.Zero)
					{
						if (num867 < whoAmI)
						{
							vector177.X = -1f;
							vector177.Y = 1f;
						}
						else
						{
							vector177.X = 1f;
							vector177.Y = -1f;
						}
					}
					Vector2 vector3 = vector177.SafeNormalize(Vector2.UnitX) * 0.005f;
					velocity = Vector2.Lerp(velocity, velocity - vector3, 0.6f);
					projectile3.velocity = Vector2.Lerp(projectile3.velocity, projectile3.velocity + vector3, 0.6f);
				}
			}
			Vector2 vector4 = velocity.SafeNormalize(Vector2.Zero);
			Vector2 pos = base.Center + vector4 * 16f;
			if (!flag35 && Collision.IsWorldPointSolid(pos, treatPlatformsAsNonSolid: true))
			{
				velocity = Vector2.Lerp(velocity, velocity - vector4 * 1f, 0.5f);
			}
			if (!flag35)
			{
				return;
			}
			int num868 = 20;
			int num869 = 2940;
			float num870 = MathHelper.Clamp(Utils.Remap(fromValue, 0f, 0.2f, 0f, 1f), 0f, 1f) * 180f;
			if (localAI[1] > 0f)
			{
				localAI[1]--;
			}
			if (!(localAI[1] <= 0f))
			{
				return;
			}
			localAI[1] = 15f;
			if (Main.netMode != 2)
			{
				Player localPlayer = Main.LocalPlayer;
				if (localPlayer.active && !localPlayer.DeadOrGhost && localPlayer.Center.Distance(base.Center) <= num870)
				{
					localPlayer.AddBuff(num868, num869);
				}
			}
			if (Main.netMode == 1)
			{
				return;
			}
			for (int num871 = 0; num871 < 200; num871++)
			{
				NPC nPC4 = Main.npc[num871];
				if (nPC4.active && !nPC4.buffImmune[num868] && nPC4.Center.Distance(base.Center) <= num870)
				{
					nPC4.AddBuff(num868, num869);
				}
			}
		}
		else if (aiStyle == 93)
		{
			if (alpha > 0)
			{
				alpha -= 25;
				if (alpha <= 0)
				{
					alpha = 0;
				}
			}
			if (velocity.Y > 18f)
			{
				velocity.Y = 18f;
			}
			if (this.ai[0] == 0f)
			{
				this.ai[1] += 1f;
				if (this.ai[1] > 20f)
				{
					velocity.Y += 0.1f;
					velocity.X *= 0.992f;
				}
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				return;
			}
			tileCollide = false;
			if (this.ai[0] == 1f)
			{
				tileCollide = false;
				velocity *= 0.6f;
			}
			else
			{
				tileCollide = false;
				int num872 = (int)(0f - this.ai[0]);
				num872--;
				base.position = Main.npc[num872].Center - velocity;
				base.position.X -= width / 2;
				base.position.Y -= height / 2;
				if (!Main.npc[num872].active || Main.npc[num872].life < 0)
				{
					tileCollide = true;
					this.ai[0] = 0f;
					this.ai[1] = 20f;
					velocity = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
					((Vector2)(ref velocity)).Normalize();
					velocity *= 6f;
					netUpdate = true;
				}
				else if (((Vector2)(ref velocity)).Length() > (float)((Main.npc[num872].width + Main.npc[num872].height) / 3))
				{
					velocity *= 0.99f;
				}
			}
			if (this.ai[0] != 0f)
			{
				this.ai[1] += 1f;
				if (this.ai[1] > 90f)
				{
					Kill();
				}
			}
		}
		else if (aiStyle == 94)
		{
			if (++frameCounter >= 4)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			this.ai[0]++;
			if (this.ai[0] <= 40f)
			{
				alpha -= 5;
				if (alpha < 0)
				{
					alpha = 0;
				}
				velocity *= 0.85f;
				if (this.ai[0] == 40f)
				{
					netUpdate = true;
					switch (Main.rand.Next(3))
					{
					case 0:
						this.ai[1] = 10f;
						break;
					case 1:
						this.ai[1] = 15f;
						break;
					case 2:
						this.ai[1] = 30f;
						break;
					}
				}
			}
			else if (this.ai[0] <= 60f)
			{
				velocity = Vector2.Zero;
				if (this.ai[0] == 60f)
				{
					netUpdate = true;
				}
			}
			else if (this.ai[0] <= 210f)
			{
				if (Main.netMode != 1 && (localAI[0] += 1f) >= this.ai[1])
				{
					localAI[0] = 0f;
					int num873 = Item.NewItem(GetItemSource_FromThis(), (int)base.Center.X, (int)base.Center.Y, 0, 0, 73);
					Main.item[num873].velocity = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * new Vector2(3f, 2f) * (Main.rand.NextFloat() * 0.5f + 0.5f) - Vector2.UnitY * 1f;
				}
				if (this.ai[0] == 210f)
				{
					netUpdate = true;
				}
			}
			else
			{
				scale -= 1f / 30f;
				alpha += 15;
				if (this.ai[0] == 239f)
				{
					netUpdate = true;
				}
				if (this.ai[0] == 240f)
				{
					Kill();
				}
			}
			if (alpha < 90 && Main.rand.Next(3) == 0)
			{
				Vector2 vector5 = new Vector2((float)width, (float)height) * scale * 0.85f;
				vector5 /= 2f;
				Vector2 vector6 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * vector5;
				int num874 = Dust.NewDust(base.Center + vector6, 0, 0, 246);
				Main.dust[num874].position = base.Center + vector6;
				Main.dust[num874].velocity = Vector2.Zero;
			}
			float num875 = 0.8f;
			float num876 = 0.70980394f;
			float num878 = 24f / 85f;
			Lighting.AddLight(base.Center, num875 * 0.3f, num876 * 0.3f, num878 * 0.3f);
		}
		else if (aiStyle == 95)
		{
			if (localAI[0] > 2f)
			{
				alpha -= 20;
				if (alpha < 100)
				{
					alpha = 100;
				}
			}
			else
			{
				localAI[0] += 1f;
			}
			if (this.ai[0] > 30f)
			{
				if (velocity.Y > -8f)
				{
					velocity.Y -= 0.05f;
				}
				velocity.X *= 0.98f;
			}
			else
			{
				this.ai[0] += 1f;
			}
			rotation = velocity.X * 0.1f;
			if (wet)
			{
				if (velocity.Y > 0f)
				{
					velocity.Y *= 0.98f;
				}
				if (velocity.Y > -8f)
				{
					velocity.Y -= 0.2f;
				}
				velocity.X *= 0.94f;
			}
		}
		else if (aiStyle == 96)
		{
			this.ai[0] += 0.6f;
			if (this.ai[0] > 500f)
			{
				Kill();
			}
			for (int num879 = 0; num879 < 2; num879++)
			{
				if (Main.rand.Next(3) != 0)
				{
					int num880 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 170, 0f, 0f, 100);
					Main.dust[num880].position = (Main.dust[num880].position + base.Center) / 2f;
					Main.dust[num880].noGravity = true;
					Dust dust126 = Main.dust[num880];
					Dust dust212 = dust126;
					dust212.velocity *= 0.1f;
					if (num879 == 1)
					{
						dust126 = Main.dust[num880];
						dust212 = dust126;
						dust212.position += velocity / 2f;
					}
					float num881 = (800f - this.ai[0]) / 800f;
					dust126 = Main.dust[num880];
					dust212 = dust126;
					dust212.scale *= num881 + 0.1f;
				}
			}
			velocity.Y += 0.008f;
		}
		else if (aiStyle == 97)
		{
			frameCounter++;
			float num882 = 4f;
			if ((float)frameCounter < num882 * 1f)
			{
				frame = 0;
			}
			else if ((float)frameCounter < num882 * 2f)
			{
				frame = 1;
			}
			else if ((float)frameCounter < num882 * 3f)
			{
				frame = 2;
			}
			else if ((float)frameCounter < num882 * 4f)
			{
				frame = 3;
			}
			else if ((float)frameCounter < num882 * 5f)
			{
				frame = 4;
			}
			else if ((float)frameCounter < num882 * 6f)
			{
				frame = 3;
			}
			else if ((float)frameCounter < num882 * 7f)
			{
				frame = 2;
			}
			else if ((float)frameCounter < num882 * 8f)
			{
				frame = 1;
			}
			else
			{
				frameCounter = 0;
				frame = 0;
			}
			Main.CurrentFrameFlags.HadAnActiveInteractibleProjectile = true;
			if (owner == Main.myPlayer)
			{
				for (int num883 = 0; num883 < 1000; num883++)
				{
					if (num883 != whoAmI && Main.projectile[num883].active && Main.projectile[num883].owner == owner && Main.projectile[num883].type == type)
					{
						if (timeLeft >= Main.projectile[num883].timeLeft)
						{
							Main.projectile[num883].Kill();
						}
						else
						{
							Kill();
						}
					}
				}
			}
			if (this.ai[0] == 0f)
			{
				if ((double)((Vector2)(ref velocity)).Length() < 0.1)
				{
					velocity.X = 0f;
					velocity.Y = 0f;
					this.ai[0] = 1f;
					this.ai[1] = 45f;
					return;
				}
				velocity *= 0.94f;
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				spriteDirection = direction;
				return;
			}
			if (Main.player[owner].Center.X < base.Center.X)
			{
				direction = -1;
			}
			else
			{
				direction = 1;
			}
			spriteDirection = direction;
			this.ai[1] += 1f;
			float num884 = 0.005f;
			if (this.ai[1] > 0f)
			{
				velocity.Y -= num884;
			}
			else
			{
				velocity.Y += num884;
			}
			if (this.ai[1] >= 90f)
			{
				this.ai[1] *= -1f;
			}
		}
		else if (aiStyle == 98)
		{
			Vector2 vector7 = default(Vector2);
			((Vector2)(ref vector7))._002Ector(this.ai[0], this.ai[1]);
			Vector2 value4 = vector7 - base.Center;
			if (((Vector2)(ref value4)).Length() < ((Vector2)(ref velocity)).Length())
			{
				Kill();
				return;
			}
			((Vector2)(ref value4)).Normalize();
			value4 *= 15f;
			velocity = Vector2.Lerp(velocity, value4, 0.1f);
			for (int num885 = 0; num885 < 2; num885++)
			{
				int num886 = Dust.NewDust(base.Center, 0, 0, 228, 0f, 0f, 100);
				Main.dust[num886].noGravity = true;
				Dust dust125 = Main.dust[num886];
				Dust dust212 = dust125;
				dust212.position += new Vector2(4f);
				dust125 = Main.dust[num886];
				dust212 = dust125;
				dust212.scale += Main.rand.NextFloat() * 1f;
			}
		}
		else if (aiStyle == 99 && type >= 556 && type <= 561)
		{
			AI_099_1();
		}
		else if (aiStyle == 99)
		{
			AI_099_2();
		}
		else if (aiStyle == 100)
		{
			AI_100_Medusa();
		}
		else if (aiStyle == 101)
		{
			float num887 = 20f;
			localAI[0]++;
			alpha = (int)MathHelper.Lerp(0f, 255f, localAI[0] / num887);
			int num889 = (int)this.ai[0];
			int num890 = -1;
			int num891 = -1;
			switch (type)
			{
			case 536:
				num890 = 535;
				num891 = 0;
				break;
			case 591:
				num891 = 1;
				break;
			}
			switch (num891)
			{
			case 1:
				if (localAI[0] >= num887 || num889 < 0 || num889 > 255 || !Main.player[num889].active || Main.player[num889].dead)
				{
					Kill();
					return;
				}
				if (type == 591)
				{
					base.position -= velocity;
					base.position += Main.player[owner].position - Main.player[owner].oldPosition;
					rotation = velocity.ToRotation() + (float)Math.PI / 2f;
					if (Math.Sign(velocity.X) != Math.Sign(Main.player[num889].velocity.X) && Main.player[num889].velocity.X != 0f)
					{
						Kill();
						return;
					}
				}
				else
				{
					base.Center = Main.player[num889].Center - velocity;
				}
				break;
			case 0:
				if (localAI[0] >= num887 || num889 < 0 || num889 > 1000 || !Main.projectile[num889].active || Main.projectile[num889].type != num890)
				{
					Kill();
					return;
				}
				base.Center = Main.projectile[num889].Center - velocity;
				break;
			}
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
		}
		else if (aiStyle == 102)
		{
			int num892 = 0;
			float num893 = 0f;
			float x6 = 0f;
			float y5 = 0f;
			int num894 = -1;
			int num895 = 0;
			float num896 = 0f;
			bool flag37 = true;
			bool flag38 = false;
			bool flag39 = false;
			switch (type)
			{
			case 539:
				num892 = 407;
				num893 = 210f;
				x6 = 0.15f;
				y5 = 0.075f;
				num896 = 16f;
				break;
			case 573:
				num892 = 424;
				num893 = 90f;
				num896 = 20f;
				flag37 = false;
				flag38 = true;
				break;
			case 574:
				num892 = 420;
				num893 = 180f;
				x6 = 0.15f;
				y5 = 0.075f;
				num896 = 8f;
				flag37 = false;
				num894 = 576;
				num895 = 65;
				if (Main.expertMode)
				{
					num895 = 50;
				}
				flag39 = true;
				break;
			}
			if (flag39)
			{
				int num897 = (int)this.ai[1];
				if (!Main.npc[num897].active || Main.npc[num897].type != num892)
				{
					Kill();
					return;
				}
				timeLeft = 2;
			}
			this.ai[0]++;
			if (this.ai[0] < num893)
			{
				bool flag40 = true;
				int num898 = (int)this.ai[1];
				if (Main.npc[num898].active && Main.npc[num898].type == num892)
				{
					if (!flag38 && Main.npc[num898].oldPos[1] != Vector2.Zero)
					{
						base.position += Main.npc[num898].position - Main.npc[num898].oldPos[1];
					}
				}
				else
				{
					this.ai[0] = num893;
					flag40 = false;
				}
				if (flag40 && !flag38)
				{
					velocity += new Vector2((float)Math.Sign(Main.npc[num898].Center.X - base.Center.X), (float)Math.Sign(Main.npc[num898].Center.Y - base.Center.Y)) * new Vector2(x6, y5);
					if (((Vector2)(ref velocity)).Length() > 6f)
					{
						velocity *= 6f / ((Vector2)(ref velocity)).Length();
					}
				}
				if (type == 539)
				{
					if (Main.rand.Next(12) == 0)
					{
						int num900 = Dust.NewDust(base.Center, 8, 8, 180);
						Main.dust[num900].position = base.Center;
						Dust dust121 = Main.dust[num900];
						Dust dust212 = dust121;
						dust212.velocity *= 0.2f;
						Main.dust[num900].noGravity = true;
					}
					if (++frameCounter >= 4)
					{
						frameCounter = 0;
						if (++frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
					rotation = velocity.X * 0.1f;
				}
				if (type == 573)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num901 = Dust.NewDust(base.Center, 8, 8, 242);
						Main.dust[num901].position = base.Center;
						Main.dust[num901].velocity = velocity;
						Main.dust[num901].noGravity = true;
						Main.dust[num901].scale = 1.5f;
					}
					alpha = 255;
				}
				if (type == 574)
				{
					if (Main.rand.Next(10) == 0)
					{
						int num902 = Dust.NewDust(base.Center, 8, 8, 242);
						Main.dust[num902].position = base.Center;
						Main.dust[num902].velocity = velocity;
						Main.dust[num902].noGravity = true;
						Main.dust[num902].scale = 1.5f;
					}
					if (flag40)
					{
						int target2 = Main.npc[num898].target;
						float num903 = velocity.ToRotation();
						if (Collision.CanHitLine(base.Center, 0, 0, Main.player[target2].Center, 0, 0))
						{
							num903 = DirectionTo(Main.player[target2].Center).ToRotation();
						}
						rotation = rotation.AngleLerp(num903 + (float)Math.PI / 2f, 0.2f);
					}
					frame = 1;
				}
			}
			if (this.ai[0] == num893)
			{
				bool flag41 = true;
				int num904 = -1;
				if (!flag37)
				{
					int num905 = (int)this.ai[1];
					if (Main.npc[num905].active && Main.npc[num905].type == num892)
					{
						num904 = Main.npc[num905].target;
					}
					else
					{
						flag41 = false;
					}
				}
				else
				{
					flag41 = false;
				}
				if (!flag41)
				{
					num904 = Player.FindClosest(base.position, width, height);
				}
				Vector2 value5 = Main.player[num904].Center - base.Center;
				value5.X += Main.rand.Next(-50, 51);
				value5.Y += Main.rand.Next(-50, 51);
				value5.X *= (float)Main.rand.Next(80, 121) * 0.01f;
				value5.Y *= (float)Main.rand.Next(80, 121) * 0.01f;
				Vector2 vector8 = Vector2.Normalize(value5);
				if (vector8.HasNaNs())
				{
					vector8 = Vector2.UnitY;
				}
				if (num894 == -1)
				{
					velocity = vector8 * num896;
					netUpdate = true;
				}
				else
				{
					if (Main.netMode != 1 && Collision.CanHitLine(base.Center, 0, 0, Main.player[num904].Center, 0, 0))
					{
						NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector8.X * num896, vector8.Y * num896, num894, num895, 1f, Main.myPlayer);
					}
					this.ai[0] = 0f;
				}
			}
			if (!(this.ai[0] >= num893))
			{
				return;
			}
			rotation = rotation.AngleLerp(velocity.ToRotation() + (float)Math.PI / 2f, 0.4f);
			if (type == 539)
			{
				if (++frameCounter >= 2)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					int num906 = Dust.NewDust(base.position, width, height, 180, 0f, 0f, 100);
					Dust dust122 = Main.dust[num906];
					Dust dust212 = dust122;
					dust212.scale += (float)Main.rand.Next(50) * 0.01f;
					Main.dust[num906].noGravity = true;
					dust122 = Main.dust[num906];
					dust212 = dust122;
					dust212.velocity *= 0.1f;
					Main.dust[num906].fadeIn = Main.rand.NextFloat() * 1.5f;
				}
				if (Main.rand.Next(3) == 0)
				{
					int num907 = Dust.NewDust(base.position, width, height, 176, 0f, 0f, 100);
					Dust dust123 = Main.dust[num907];
					Dust dust212 = dust123;
					dust212.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
					Main.dust[num907].noGravity = true;
					dust123 = Main.dust[num907];
					dust212 = dust123;
					dust212.velocity *= 0.1f;
					Main.dust[num907].fadeIn = Main.rand.NextFloat() * 1.5f;
				}
			}
			if (type == 573)
			{
				if (Main.rand.Next(4) == 0)
				{
					int num908 = Dust.NewDust(base.Center, 8, 8, 242);
					Main.dust[num908].position = base.Center;
					Dust dust124 = Main.dust[num908];
					Dust dust212 = dust124;
					dust212.velocity *= 0.2f;
					Main.dust[num908].noGravity = true;
					Main.dust[num908].scale = 1.5f;
				}
				alpha = 0;
			}
		}
		else if (aiStyle == 103)
		{
			scale = this.ai[1];
			this.ai[0]++;
			if (this.ai[0] >= 30f)
			{
				alpha += 25;
				if (alpha >= 250)
				{
					Kill();
				}
			}
			else
			{
				if (!(this.ai[0] >= 0f))
				{
					return;
				}
				alpha -= 25;
				if (alpha < 0)
				{
					alpha = 0;
					if (localAI[1] == 0f && Main.netMode != 1 && localAI[0] != 0f)
					{
						localAI[1] = 1f;
						NPC.NewNPC(GetNPCSource_FromThis(), (int)base.Center.X, (int)base.Bottom.Y, (int)localAI[0]);
					}
				}
			}
		}
		else if (aiStyle == 104)
		{
			if (this.ai[0] == 1f)
			{
				scale *= 0.995f;
				alpha += 3;
				if (alpha >= 250)
				{
					Kill();
				}
			}
			else
			{
				scale *= 1.01f;
				alpha -= 7;
				if (alpha < 0)
				{
					alpha = 0;
					this.ai[0] = 1f;
				}
			}
			frameCounter++;
			if (frameCounter > 6)
			{
				frameCounter = 0;
				frame++;
				if (frame > 3)
				{
					frame = 0;
				}
			}
			velocity.Y -= 0.03f;
			velocity.X *= 0.97f;
		}
		else if (aiStyle == 105)
		{
			float num909 = 1f - (float)alpha / 255f;
			num909 *= scale;
			Lighting.AddLight(base.Center, 0.2f * num909, 0.275f * num909, 0.075f * num909);
			localAI[0] += 1f;
			if (localAI[0] >= 90f)
			{
				localAI[0] *= -1f;
			}
			if (localAI[0] >= 0f)
			{
				scale += 0.003f;
			}
			else
			{
				scale -= 0.003f;
			}
			rotation += 0.0025f * scale;
			float num911 = 1f;
			float num912 = 1f;
			if (identity % 6 == 0)
			{
				num912 *= -1f;
			}
			if (identity % 6 == 1)
			{
				num911 *= -1f;
			}
			if (identity % 6 == 2)
			{
				num912 *= -1f;
				num911 *= -1f;
			}
			if (identity % 6 == 3)
			{
				num912 = 0f;
			}
			if (identity % 6 == 4)
			{
				num911 = 0f;
			}
			localAI[1] += 1f;
			if (localAI[1] > 60f)
			{
				localAI[1] = -180f;
			}
			if (localAI[1] >= -60f)
			{
				velocity.X += 0.002f * num912;
				velocity.Y += 0.002f * num911;
			}
			else
			{
				velocity.X -= 0.002f * num912;
				velocity.Y -= 0.002f * num911;
			}
			this.ai[0] += 1f;
			if (this.ai[0] > 5400f)
			{
				damage = 0;
				this.ai[1] = 1f;
				if (alpha < 255)
				{
					alpha += 5;
					if (alpha > 255)
					{
						alpha = 255;
					}
				}
				else if (owner == Main.myPlayer)
				{
					Kill();
				}
			}
			else
			{
				val4 = base.Center - Main.player[owner].Center;
				float num913 = ((Vector2)(ref val4)).Length() / 100f;
				if (num913 > 4f)
				{
					num913 *= 1.1f;
				}
				if (num913 > 5f)
				{
					num913 *= 1.2f;
				}
				if (num913 > 6f)
				{
					num913 *= 1.3f;
				}
				if (num913 > 7f)
				{
					num913 *= 1.4f;
				}
				if (num913 > 8f)
				{
					num913 *= 1.5f;
				}
				if (num913 > 9f)
				{
					num913 *= 1.6f;
				}
				if (num913 > 10f)
				{
					num913 *= 1.7f;
				}
				if (!Main.player[owner].sporeSac)
				{
					num913 += 100f;
				}
				this.ai[0] += num913;
				if (alpha > 50)
				{
					alpha -= 10;
					if (alpha < 50)
					{
						alpha = 50;
					}
				}
			}
			bool flag42 = false;
			Vector2 vector9 = default(Vector2);
			((Vector2)(ref vector9))._002Ector(0f, 0f);
			float num914 = 340f;
			for (int num915 = 0; num915 < 200; num915++)
			{
				if (Main.npc[num915].CanBeChasedBy(this))
				{
					float num916 = Main.npc[num915].position.X + (float)(Main.npc[num915].width / 2);
					float num917 = Main.npc[num915].position.Y + (float)(Main.npc[num915].height / 2);
					float num918 = Math.Abs(base.position.X + (float)(width / 2) - num916) + Math.Abs(base.position.Y + (float)(height / 2) - num917);
					if (num918 < num914)
					{
						num914 = num918;
						vector9 = Main.npc[num915].Center;
						flag42 = true;
					}
				}
			}
			if (flag42)
			{
				Vector2 vector10 = vector9 - base.Center;
				((Vector2)(ref vector10)).Normalize();
				vector10 *= 4f;
				velocity = (velocity * 40f + vector10) / 41f;
			}
			else if ((double)((Vector2)(ref velocity)).Length() > 0.2)
			{
				velocity *= 0.98f;
			}
		}
		else if (aiStyle == 106)
		{
			rotation += velocity.X * 0.02f;
			if (velocity.X < 0f)
			{
				rotation -= Math.Abs(velocity.Y) * 0.02f;
			}
			else
			{
				rotation += Math.Abs(velocity.Y) * 0.02f;
			}
			velocity *= 0.98f;
			this.ai[0] += 1f;
			if (this.ai[0] >= 60f)
			{
				if (alpha < 255)
				{
					alpha += 5;
					if (alpha > 255)
					{
						alpha = 255;
					}
				}
				else if (owner == Main.myPlayer)
				{
					Kill();
				}
			}
			else if (alpha > 80)
			{
				alpha -= 30;
				if (alpha < 80)
				{
					alpha = 80;
				}
			}
		}
		else if (aiStyle == 107)
		{
			float num919 = 10f;
			float num920 = 5f;
			float num922 = 40f;
			if (type == 575)
			{
				if (timeLeft > 30 && alpha > 0)
				{
					alpha -= 25;
				}
				if (timeLeft > 30 && alpha < 128 && Collision.SolidCollision(base.position, width, height))
				{
					alpha = 128;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (++frameCounter > 4)
				{
					frameCounter = 0;
					if (++frame >= 4)
					{
						frame = 0;
					}
				}
				Lighting.AddLight(base.Center, 0.5f, 0.1f, 0.3f);
			}
			else if (type == 596)
			{
				num919 = 10f;
				num920 = 7.5f;
				if (timeLeft > 30 && alpha > 0)
				{
					alpha -= 25;
				}
				if (timeLeft > 30 && alpha < 128 && Collision.SolidCollision(base.position, width, height))
				{
					alpha = 128;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (++frameCounter > 4)
				{
					frameCounter = 0;
					if (++frame >= 4)
					{
						frame = 0;
					}
				}
				float num923 = 0.5f;
				if (timeLeft < 120)
				{
					num923 = 1.1f;
				}
				if (timeLeft < 60)
				{
					num923 = 1.6f;
				}
				this.ai[1]++;
				float num924 = this.ai[1] / 180f * ((float)Math.PI * 2f);
				for (float num925 = 0f; num925 < 3f; num925++)
				{
					if (Main.rand.Next(3) != 0)
					{
						return;
					}
					Dust dust161 = Main.dust[Dust.NewDust(base.Center, 0, 0, 27, 0f, -2f)];
					Vector2 center23 = base.Center;
					Vector2 unitY7 = Vector2.UnitY;
					double radians50 = num925 * ((float)Math.PI * 2f) / 3f + this.ai[1];
					val4 = default(Vector2);
					dust161.position = center23 + unitY7.RotatedBy(radians50, val4) * 10f;
					dust161.noGravity = true;
					dust161.velocity = DirectionFrom(dust161.position);
					dust161.scale = num923;
					dust161.fadeIn = 0.5f;
					dust161.alpha = 200;
				}
				if (timeLeft < 4)
				{
					int num926 = 30;
					if (Main.expertMode)
					{
						num926 = 22;
					}
					base.position = base.Center;
					width = (height = 60);
					base.Center = base.position;
					damage = num926;
					for (int num927 = 0; num927 < 10; num927++)
					{
						Dust dust162 = Main.dust[Dust.NewDust(base.position, width, height, Utils.SelectRandom<int>(Main.rand, 27, 6), 0f, -2f)];
						dust162.noGravity = true;
						if (dust162.position != base.Center)
						{
							dust162.velocity = DirectionTo(dust162.position) * 3f;
						}
					}
				}
			}
			int num928 = (int)this.ai[0];
			if (num928 >= 0 && Main.player[num928].active && !Main.player[num928].dead)
			{
				if (Distance(Main.player[num928].Center) > num922)
				{
					Vector2 vector11 = DirectionTo(Main.player[num928].Center);
					if (vector11.HasNaNs())
					{
						vector11 = Vector2.UnitY;
					}
					velocity = (velocity * (num919 - 1f) + vector11 * num920) / num919;
				}
			}
			else
			{
				if (timeLeft > 30)
				{
					timeLeft = 30;
				}
				if (this.ai[0] != -1f)
				{
					this.ai[0] = -1f;
					netUpdate = true;
				}
			}
		}
		else if (aiStyle == 108)
		{
			bool flag43 = type == 579 || type == 578;
			if (flag43 && this.ai[1] == 1f && Main.netMode != 2)
			{
				this.ai[1] = 0f;
				for (int num929 = 0; num929 < 25; num929++)
				{
					int num930 = Utils.SelectRandom<int>(Main.rand, 229, 229, 161);
					Dust dust163 = Main.dust[Dust.NewDust(base.position, width, height, num930)];
					dust163.noGravity = true;
					dust163.scale = 1.75f + Main.rand.NextFloat() * 1.25f;
					dust163.fadeIn = 0.25f;
					Dust dust112 = dust163;
					Dust dust212 = dust112;
					dust212.velocity *= 3.5f + Main.rand.NextFloat() * 0.5f;
					dust163.noLight = true;
				}
			}
			if (flag43 && localAI[1] == 0f)
			{
				localAI[1] = 1f;
				SoundEngine.PlaySound(in SoundID.Item117, base.position);
			}
			if (type == 578 && localAI[0] == 0f)
			{
				localAI[0] = 1f;
				int num931 = Player.FindClosest(base.Center, 0, 0);
				Vector2 vector12 = Main.player[num931].Center - base.Center;
				if (vector12 == Vector2.Zero)
				{
					vector12 = Vector2.UnitY;
				}
				this.ai[1] = vector12.ToRotation();
				netUpdate = true;
			}
			this.ai[0]++;
			if (this.ai[0] <= 50f)
			{
				if (type == 579)
				{
					if (Main.rand.Next(4) == 0)
					{
						Vector2 vector14 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust164 = Main.dust[Dust.NewDust(base.Center - vector14 * 30f, 0, 0, 229)];
						dust164.noGravity = true;
						dust164.position = base.Center - vector14 * (float)Main.rand.Next(10, 21);
						val4 = default(Vector2);
						dust164.velocity = vector14.RotatedBy(1.5707963705062866, val4) * 4f;
						dust164.scale = 0.5f + Main.rand.NextFloat();
						dust164.fadeIn = 0.5f;
					}
					if (Main.rand.Next(4) == 0)
					{
						Vector2 vector15 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust165 = Main.dust[Dust.NewDust(base.Center - vector15 * 30f, 0, 0, 240)];
						dust165.noGravity = true;
						dust165.position = base.Center - vector15 * 30f;
						val4 = default(Vector2);
						dust165.velocity = vector15.RotatedBy(-1.5707963705062866, val4) * 2f;
						dust165.scale = 0.5f + Main.rand.NextFloat();
						dust165.fadeIn = 0.5f;
					}
				}
				if (type == 578 && Main.rand.Next(2) == 0)
				{
					Vector2 vector16 = this.ai[1].ToRotationVector2();
					val4 = default(Vector2);
					Vector2 vector17 = vector16.RotatedBy(1.5707963705062866, val4) * (float)(Main.rand.Next(2) == 0).ToDirectionInt() * (float)Main.rand.Next(10, 21);
					Vector2 vector18 = vector16 * (float)Main.rand.Next(-80, 81);
					Vector2 vector19 = vector18 - vector17;
					vector19 /= 10f;
					int num933 = 229;
					Dust dust166 = Main.dust[Dust.NewDust(base.Center, 0, 0, num933)];
					dust166.noGravity = true;
					dust166.position = base.Center + vector17;
					dust166.velocity = vector19;
					dust166.scale = 0.5f + Main.rand.NextFloat();
					dust166.fadeIn = 0.5f;
					vector18 = vector16 * (float)Main.rand.Next(40, 121);
					vector19 = vector18 - vector17 / 2f;
					vector19 /= 10f;
					dust166 = Main.dust[Dust.NewDust(base.Center, 0, 0, num933)];
					dust166.noGravity = true;
					dust166.position = base.Center + vector17 / 2f;
					dust166.velocity = vector19;
					dust166.scale = 1f + Main.rand.NextFloat();
				}
				if (type == 813)
				{
					if (Main.rand.Next(4) == 0)
					{
						Vector2 vector20 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust167 = Main.dust[Dust.NewDust(base.Center - vector20 * 30f, 0, 0, 5)];
						dust167.noGravity = true;
						dust167.position = base.Center - vector20 * (float)Main.rand.Next(10, 21);
						val4 = default(Vector2);
						dust167.velocity = vector20.RotatedBy(1.5707963705062866, val4) * 4f;
						dust167.scale = 0.5f + Main.rand.NextFloat();
						dust167.fadeIn = 0.5f;
					}
					if (Main.rand.Next(4) == 0)
					{
						Vector2 vector21 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust168 = Main.dust[Dust.NewDust(base.Center - vector21 * 30f, 0, 0, 240)];
						dust168.noGravity = true;
						dust168.position = base.Center - vector21 * 30f;
						val4 = default(Vector2);
						dust168.velocity = vector21.RotatedBy(-1.5707963705062866, val4) * 2f;
						dust168.scale = 0.5f + Main.rand.NextFloat();
						dust168.fadeIn = 0.5f;
					}
				}
			}
			else if (this.ai[0] <= 90f)
			{
				if (this.ai[0] == 90f)
				{
					if (flag43)
					{
						SoundEngine.PlaySound(in SoundID.Item113, base.position);
					}
					else
					{
						SoundEngine.PlaySound(in SoundID.Item8, base.position);
					}
				}
				scale = (this.ai[0] - 50f) / 40f;
				alpha = 255 - (int)(255f * scale);
				rotation -= (float)Math.PI / 20f;
				if (type == 579)
				{
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector22 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust169 = Main.dust[Dust.NewDust(base.Center - vector22 * 30f, 0, 0, 229)];
						dust169.noGravity = true;
						dust169.position = base.Center - vector22 * (float)Main.rand.Next(10, 21);
						val4 = default(Vector2);
						dust169.velocity = vector22.RotatedBy(1.5707963705062866, val4) * 6f;
						dust169.scale = 0.5f + Main.rand.NextFloat();
						dust169.fadeIn = 0.5f;
						dust169.customData = base.Center;
					}
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector23 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust173 = Main.dust[Dust.NewDust(base.Center - vector23 * 30f, 0, 0, 240)];
						dust173.noGravity = true;
						dust173.position = base.Center - vector23 * 30f;
						val4 = default(Vector2);
						dust173.velocity = vector23.RotatedBy(-1.5707963705062866, val4) * 3f;
						dust173.scale = 0.5f + Main.rand.NextFloat();
						dust173.fadeIn = 0.5f;
						dust173.customData = base.Center;
					}
				}
				if (type == 578)
				{
					Vector2 vector25 = this.ai[1].ToRotationVector2();
					Vector2 spinningpoint65 = vector25;
					val4 = default(Vector2);
					Vector2 vector26 = spinningpoint65.RotatedBy(1.5707963705062866, val4) * (float)(Main.rand.Next(2) == 0).ToDirectionInt() * (float)Main.rand.Next(10, 21);
					vector25 *= (float)Main.rand.Next(-80, 81);
					Vector2 vector27 = vector25 - vector26;
					vector27 /= 10f;
					int num934 = Utils.SelectRandom<int>(Main.rand, 229, 229);
					Dust dust174 = Main.dust[Dust.NewDust(base.Center, 0, 0, num934)];
					dust174.noGravity = true;
					dust174.position = base.Center + vector26;
					dust174.velocity = vector27;
					dust174.scale = 0.5f + Main.rand.NextFloat();
					dust174.fadeIn = 0.5f;
					if (this.ai[0] == 90f && Main.netMode != 1)
					{
						Vector2 vector28 = this.ai[1].ToRotationVector2() * 8f;
						float ai2 = Main.rand.Next(80);
						NewProjectile(GetProjectileSource_FromThis(), base.Center.X - vector28.X, base.Center.Y - vector28.Y, vector28.X, vector28.Y, 580, 50, 1f, Main.myPlayer, this.ai[1], ai2);
					}
				}
				else if (type == 579)
				{
					if (this.ai[0] == 90f && Main.netMode != 1)
					{
						this.ai[1] = 1f;
						netUpdate = true;
						for (int num935 = 0; num935 < 2; num935++)
						{
							int num936 = NPC.NewNPC(GetNPCSource_FromThis(), (int)base.Center.X, (int)base.Center.Y, 427, whoAmI);
							Main.npc[num936].velocity = -Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (float)Main.rand.Next(4, 9) - Vector2.UnitY * 2f;
							Main.npc[num936].netUpdate = true;
						}
					}
				}
				else if (type == 813)
				{
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector29 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust175 = Main.dust[Dust.NewDust(base.Center - vector29 * 30f, 0, 0, 5)];
						dust175.noGravity = true;
						dust175.position = base.Center - vector29 * (float)Main.rand.Next(10, 21);
						val4 = default(Vector2);
						dust175.velocity = vector29.RotatedBy(1.5707963705062866, val4) * 6f;
						dust175.scale = 0.5f + Main.rand.NextFloat();
						dust175.fadeIn = 0.5f;
						dust175.customData = base.Center;
					}
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector30 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust176 = Main.dust[Dust.NewDust(base.Center - vector30 * 30f, 0, 0, 240)];
						dust176.noGravity = true;
						dust176.position = base.Center - vector30 * 30f;
						val4 = default(Vector2);
						dust176.velocity = vector30.RotatedBy(-1.5707963705062866, val4) * 3f;
						dust176.scale = 0.5f + Main.rand.NextFloat();
						dust176.fadeIn = 0.5f;
						dust176.customData = base.Center;
					}
					if (this.ai[0] == 90f && Main.netMode != 1)
					{
						int num937 = NPC.NewNPC(GetNPCSource_FromThis(), (int)base.Center.X, (int)base.Center.Y, 619, whoAmI);
						Main.npc[num937].netUpdate = true;
					}
				}
			}
			else if (this.ai[0] <= 120f)
			{
				scale = 1f;
				alpha = 0;
				rotation -= (float)Math.PI / 60f;
				if (type == 813)
				{
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector31 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust177 = Main.dust[Dust.NewDust(base.Center - vector31 * 30f, 0, 0, 5)];
						dust177.noGravity = true;
						dust177.position = base.Center - vector31 * (float)Main.rand.Next(10, 21);
						val4 = default(Vector2);
						dust177.velocity = vector31.RotatedBy(1.5707963705062866, val4) * 6f;
						dust177.scale = 0.5f + Main.rand.NextFloat();
						dust177.fadeIn = 0.5f;
						dust177.customData = base.Center;
					}
					else
					{
						Vector2 vector32 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust178 = Main.dust[Dust.NewDust(base.Center - vector32 * 30f, 0, 0, 240)];
						dust178.noGravity = true;
						dust178.position = base.Center - vector32 * 30f;
						val4 = default(Vector2);
						dust178.velocity = vector32.RotatedBy(-1.5707963705062866, val4) * 3f;
						dust178.scale = 0.5f + Main.rand.NextFloat();
						dust178.fadeIn = 0.5f;
						dust178.customData = base.Center;
					}
				}
				else if (Main.rand.Next(2) == 0)
				{
					Vector2 vector33 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					Dust dust179 = Main.dust[Dust.NewDust(base.Center - vector33 * 30f, 0, 0, 229)];
					dust179.noGravity = true;
					dust179.position = base.Center - vector33 * (float)Main.rand.Next(10, 21);
					val4 = default(Vector2);
					dust179.velocity = vector33.RotatedBy(1.5707963705062866, val4) * 6f;
					dust179.scale = 0.5f + Main.rand.NextFloat();
					dust179.fadeIn = 0.5f;
					dust179.customData = base.Center;
				}
				else
				{
					Vector2 vector34 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					Dust dust180 = Main.dust[Dust.NewDust(base.Center - vector34 * 30f, 0, 0, 240)];
					dust180.noGravity = true;
					dust180.position = base.Center - vector34 * 30f;
					val4 = default(Vector2);
					dust180.velocity = vector34.RotatedBy(-1.5707963705062866, val4) * 3f;
					dust180.scale = 0.5f + Main.rand.NextFloat();
					dust180.fadeIn = 0.5f;
					dust180.customData = base.Center;
				}
			}
			else
			{
				scale = 1f - (this.ai[0] - 120f) / 60f;
				alpha = 255 - (int)(255f * scale);
				rotation -= (float)Math.PI / 30f;
				if (alpha >= 255)
				{
					Kill();
				}
				if (type == 813)
				{
					for (int num938 = 0; num938 < 2; num938++)
					{
						switch (Main.rand.Next(3))
						{
						case 0:
						{
							Vector2 vector37 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * scale;
							Dust dust182 = Main.dust[Dust.NewDust(base.Center - vector37 * 30f, 0, 0, 5)];
							dust182.noGravity = true;
							dust182.position = base.Center - vector37 * (float)Main.rand.Next(10, 21);
							val4 = default(Vector2);
							dust182.velocity = vector37.RotatedBy(1.5707963705062866, val4) * 6f;
							dust182.scale = 0.5f + Main.rand.NextFloat();
							dust182.fadeIn = 0.5f;
							dust182.customData = base.Center;
							break;
						}
						case 1:
						{
							Vector2 vector36 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * scale;
							Dust dust181 = Main.dust[Dust.NewDust(base.Center - vector36 * 30f, 0, 0, 240)];
							dust181.noGravity = true;
							dust181.position = base.Center - vector36 * 30f;
							val4 = default(Vector2);
							dust181.velocity = vector36.RotatedBy(-1.5707963705062866, val4) * 3f;
							dust181.scale = 0.5f + Main.rand.NextFloat();
							dust181.fadeIn = 0.5f;
							dust181.customData = base.Center;
							break;
						}
						}
					}
				}
				else
				{
					for (int num939 = 0; num939 < 2; num939++)
					{
						switch (Main.rand.Next(3))
						{
						case 0:
						{
							Vector2 vector39 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * scale;
							Dust dust185 = Main.dust[Dust.NewDust(base.Center - vector39 * 30f, 0, 0, 229)];
							dust185.noGravity = true;
							dust185.position = base.Center - vector39 * (float)Main.rand.Next(10, 21);
							val4 = default(Vector2);
							dust185.velocity = vector39.RotatedBy(1.5707963705062866, val4) * 6f;
							dust185.scale = 0.5f + Main.rand.NextFloat();
							dust185.fadeIn = 0.5f;
							dust185.customData = base.Center;
							break;
						}
						case 1:
						{
							Vector2 vector38 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * scale;
							Dust dust184 = Main.dust[Dust.NewDust(base.Center - vector38 * 30f, 0, 0, 240)];
							dust184.noGravity = true;
							dust184.position = base.Center - vector38 * 30f;
							val4 = default(Vector2);
							dust184.velocity = vector38.RotatedBy(-1.5707963705062866, val4) * 3f;
							dust184.scale = 0.5f + Main.rand.NextFloat();
							dust184.fadeIn = 0.5f;
							dust184.customData = base.Center;
							break;
						}
						}
					}
				}
			}
			if (type == 813 && Main.rand.NextFloat() < Opacity)
			{
				Dust dust186 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(3f, 20f), 90);
				dust186.velocity = Vector2.UnitY;
				dust186.noGravity = true;
				dust186.scale = scale;
			}
		}
		else if (aiStyle == 109)
		{
			if (localAI[1] == 0f)
			{
				localAI[1] = ((Vector2)(ref velocity)).Length();
			}
			if (this.ai[0] == 0f)
			{
				localAI[0]++;
				if (localAI[0] > 30f)
				{
					this.ai[0] = 1f;
					localAI[0] = 0f;
					return;
				}
			}
			else if (this.ai[0] == 1f)
			{
				Vector2 zero3 = Vector2.Zero;
				if (type != 582 || !Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].type != 124)
				{
					Kill();
					return;
				}
				NPC.lazyNPCOwnedProjectileSearchArray[(int)this.ai[1]] = whoAmI;
				zero3 = Main.npc[(int)this.ai[1]].Center;
				tileCollide = false;
				float num940 = localAI[1];
				Vector2 value6 = zero3 - base.Center;
				if (((Vector2)(ref value6)).Length() < num940)
				{
					Kill();
					return;
				}
				((Vector2)(ref value6)).Normalize();
				value6 *= num940;
				velocity = Vector2.Lerp(velocity, value6, 0.04f);
			}
			rotation += (float)Math.PI / 10f;
		}
		else if (aiStyle == 110)
		{
			if (localAI[1] == 0f)
			{
				localAI[1] = ((Vector2)(ref velocity)).Length();
			}
			Vector2 zero4 = Vector2.Zero;
			if (Main.npc[(int)this.ai[0]].active && Main.npc[(int)this.ai[0]].townNPC)
			{
				zero4 = Main.npc[(int)this.ai[0]].Center;
				float num941 = localAI[1];
				Vector2 value7 = zero4 - base.Center;
				if (!(((Vector2)(ref value7)).Length() < num941))
				{
					hitbox = base.Hitbox;
					if (!((Rectangle)(ref hitbox)).Intersects(Main.npc[(int)this.ai[0]].Hitbox))
					{
						((Vector2)(ref value7)).Normalize();
						value7 *= num941;
						if (value7.Y < velocity.Y)
						{
							value7.Y = velocity.Y;
						}
						value7.Y += 1f;
						velocity = Vector2.Lerp(velocity, value7, 0.04f);
						rotation += velocity.X * 0.05f;
						return;
					}
				}
				Kill();
				int num942 = Main.npc[(int)this.ai[0]].lifeMax - Main.npc[(int)this.ai[0]].life;
				if (num942 > 20)
				{
					num942 = 20;
				}
				if (num942 > 0)
				{
					NPC nPC6 = Main.npc[(int)this.ai[0]];
					NPC nPC20 = nPC6;
					nPC20.life += num942;
					Main.npc[(int)this.ai[0]].HealEffect(num942);
				}
			}
			else
			{
				Kill();
			}
		}
		else if (aiStyle == 111)
		{
			AI_111_DryadsWard();
		}
		else if (aiStyle == 112)
		{
			if (type == 836)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					for (int num944 = 0; num944 < 3; num944++)
					{
						int num945 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 50, Color.White, 1.2f);
						Dust dust101 = Main.dust[num945];
						Dust dust212 = dust101;
						dust212.velocity *= 0.3f;
						Main.dust[num945].noGravity = true;
					}
				}
				if (++frameCounter >= 6)
				{
					frameCounter = 0;
					if (++frame >= 4)
					{
						frame = 0;
					}
				}
				Player player12 = Main.player[(int)this.ai[1]];
				bool flag44 = player12.active && !player12.dead && Vector2.Distance(player12.Center, base.Center) < 800f;
				int num946 = (spriteDirection = ((Main.WindForVisuals > 0f) ? 1 : (-1)));
				direction = ((player12.Center.X > base.Center.X) ? 1 : (-1));
				bool flag46 = num946 != direction;
				float num947 = 2.5f;
				float num948 = 2f;
				if (flag46)
				{
					num947 = 1.5f;
					num948 = 1f;
				}
				if (flag44)
				{
					if (!flag46)
					{
						float num949 = player12.Center.X - base.Center.X;
						velocity.X += 0.05f * (float)direction * (0.6f + Math.Abs(Main.WindForVisuals));
						if (velocity.X > num947)
						{
							velocity.X -= 0.1f;
						}
						if (velocity.X < 0f - num947)
						{
							velocity.X += 0.1f;
						}
					}
					if (player12.Top.Y >= base.Center.Y || flag46)
					{
						velocity.Y += 0.05f;
						if (velocity.Y > num947)
						{
							velocity.Y -= 0.1f;
						}
					}
					else if (player12.Top.Y < base.Center.Y)
					{
						velocity.Y -= 0.1f;
						if (velocity.Y < 0f - num948)
						{
							velocity.Y += 0.2f;
						}
					}
				}
				else
				{
					velocity.Y += 0.2f;
					if (velocity.Y < 0f - num948)
					{
						velocity.Y += 0.2f;
					}
					if (velocity.Y > num948)
					{
						velocity.Y -= 0.2f;
					}
				}
				rotation = velocity.X * 0.125f;
			}
			if (type == 590)
			{
				if (++frameCounter >= 4)
				{
					int num950 = 0;
					int num951 = 3;
					if (this.ai[2] == 1f)
					{
						num950 = 3;
						num951 = 6;
					}
					frameCounter = 0;
					if (++frame >= num951)
					{
						frame = num950;
					}
				}
				if (alpha > 0)
				{
					alpha -= 15;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha == 0)
				{
					float num952 = (float)Main.rand.Next(28, 42) * 0.005f;
					num952 += (float)(270 - Main.mouseTextColor) / 500f;
					float num953 = 0.1f;
					float num955 = 0.3f + num952 / 2f;
					float num956 = 0.6f + num952;
					float num957 = 0.35f;
					num953 *= num957;
					num955 *= num957;
					num956 *= num957;
					Lighting.AddLight(base.Center, num953, num955, num956);
				}
				velocity = new Vector2(0f, (float)Math.Sin((float)Math.PI * 2f * this.ai[0] / 180f) * 0.15f);
				this.ai[0]++;
				if (this.ai[0] >= 180f)
				{
					this.ai[0] = 0f;
				}
			}
			if (type != 644)
			{
				return;
			}
			Color newColor3 = Main.hslToRgb(this.ai[0], 1f, 0.5f);
			int num958 = (int)this.ai[1];
			if (num958 < 0 || num958 >= 1000 || (!Main.projectile[num958].active && Main.projectile[num958].type != 643))
			{
				this.ai[1] = -1f;
			}
			else
			{
				DelegateMethods.v3_1 = ((Color)(ref newColor3)).ToVector3() * 0.5f;
				Utils.PlotTileLine(base.Center, Main.projectile[num958].Center, 8f, DelegateMethods.CastLight);
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = Main.rand.NextFloat() * 0.8f + 0.8f;
				direction = ((Main.rand.Next(2) > 0) ? 1 : (-1));
			}
			rotation = localAI[1] / 40f * ((float)Math.PI * 2f) * (float)direction;
			if (alpha > 0)
			{
				alpha -= 8;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (alpha == 0)
			{
				Lighting.AddLight(base.Center, ((Color)(ref newColor3)).ToVector3() * 0.5f);
			}
			for (int num959 = 0; num959 < 2; num959++)
			{
				if (Main.rand.Next(10) == 0)
				{
					Vector2 unitY8 = Vector2.UnitY;
					double radians51 = (float)num959 * (float)Math.PI;
					val4 = default(Vector2);
					Vector2 spinningpoint66 = unitY8.RotatedBy(radians51, val4);
					double radians52 = rotation;
					val4 = default(Vector2);
					Vector2 vector40 = spinningpoint66.RotatedBy(radians52, val4);
					Dust dust187 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor3, 1.5f)];
					dust187.noGravity = true;
					dust187.noLight = true;
					dust187.scale = Opacity * localAI[0];
					dust187.position = base.Center;
					dust187.velocity = vector40 * 2.5f;
				}
			}
			for (int num960 = 0; num960 < 2; num960++)
			{
				if (Main.rand.Next(10) == 0)
				{
					Vector2 unitY9 = Vector2.UnitY;
					double radians53 = (float)num960 * (float)Math.PI;
					val4 = default(Vector2);
					Vector2 vector41 = unitY9.RotatedBy(radians53, val4);
					Dust dust188 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor3, 1.5f)];
					dust188.noGravity = true;
					dust188.noLight = true;
					dust188.scale = Opacity * localAI[0];
					dust188.position = base.Center;
					dust188.velocity = vector41 * 2.5f;
				}
			}
			if (Main.rand.Next(10) == 0)
			{
				float num961 = 1f + Main.rand.NextFloat() * 2f;
				float fadeIn = 1f + Main.rand.NextFloat();
				float num962 = 1f + Main.rand.NextFloat();
				Vector2 vector42 = Utils.RandomVector2(Main.rand, -1f, 1f);
				if (vector42 != Vector2.Zero)
				{
					((Vector2)(ref vector42)).Normalize();
				}
				vector42 *= 20f + Main.rand.NextFloat() * 100f;
				Vector2 vec = base.Center + vector42;
				Point point3 = vec.ToTileCoordinates();
				bool flag47 = true;
				if (!WorldGen.InWorld(point3.X, point3.Y))
				{
					flag47 = false;
				}
				if (flag47 && WorldGen.SolidTile(point3.X, point3.Y))
				{
					flag47 = false;
				}
				if (flag47)
				{
					Dust dust189 = Main.dust[Dust.NewDust(vec, 0, 0, 267, 0f, 0f, 127, newColor3)];
					dust189.noGravity = true;
					dust189.position = vec;
					dust189.velocity = -Vector2.UnitY * num961 * (Main.rand.NextFloat() * 0.9f + 1.6f);
					dust189.fadeIn = fadeIn;
					dust189.scale = num962;
					dust189.noLight = true;
					if (dust189.dustIndex != 6000)
					{
						Dust dust190 = Dust.CloneDust(dust189);
						Dust dust109 = dust190;
						Dust dust212 = dust109;
						dust212.scale *= 0.65f;
						dust109 = dust190;
						dust212 = dust109;
						dust212.fadeIn *= 0.65f;
						dust190.color = new Color(255, 255, 255, 255);
					}
				}
			}
			scale = Opacity / 2f * localAI[0];
			velocity = Vector2.Zero;
			localAI[1]++;
			if (localAI[1] >= 60f)
			{
				Kill();
			}
			if (localAI[1] == 30f)
			{
				DoRainbowCrystalStaffExplosion();
				if (Main.myPlayer == owner)
				{
					friendly = true;
					int num963 = width;
					int num964 = height;
					int num967 = penetrate;
					base.position = base.Center;
					width = (height = 60);
					base.Center = base.position;
					penetrate = -1;
					maxPenetrate = -1;
					Damage();
					penetrate = num967;
					base.position = base.Center;
					width = num963;
					height = num964;
					base.Center = base.position;
					friendly = false;
				}
			}
		}
		else if (aiStyle == 113)
		{
			int num968 = 25;
			if (type == 614)
			{
				num968 = 63;
			}
			if (alpha > 0)
			{
				alpha -= num968;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (this.ai[0] == 0f)
			{
				if (type == 614)
				{
					int num969 = (int)this.ai[1];
					if (!Main.npc[num969].CanBeChasedBy(this))
					{
						Kill();
						return;
					}
					float num970 = velocity.ToRotation();
					Vector2 vector43 = Main.npc[num969].Center - base.Center;
					if (vector43 != Vector2.Zero)
					{
						((Vector2)(ref vector43)).Normalize();
						vector43 *= 14f;
					}
					float num971 = 5f;
					velocity = (velocity * (num971 - 1f) + vector43) / num971;
				}
				else
				{
					this.ai[1]++;
					if (this.ai[1] >= 45f)
					{
						float num972 = 0.98f;
						float num973 = 0.35f;
						if (type == 636)
						{
							num972 = 0.995f;
							num973 = 0.15f;
						}
						this.ai[1] = 45f;
						velocity.X *= num972;
						velocity.Y += num973;
					}
					rotation = velocity.ToRotation() + (float)Math.PI / 2f;
				}
			}
			if (this.ai[0] == 1f)
			{
				Vector2 center9 = base.Center;
				ignoreWater = true;
				tileCollide = false;
				int num974 = 15;
				if (type == 636)
				{
					num974 = 5 * MaxUpdates;
				}
				if (type == 971)
				{
					num974 = 9 * MaxUpdates;
				}
				if (type == 975)
				{
					num974 = 9 * MaxUpdates;
				}
				bool flag48 = false;
				bool flag49 = false;
				localAI[0]++;
				if (localAI[0] % 30f == 0f)
				{
					flag49 = true;
				}
				int num975 = (int)this.ai[1];
				if (localAI[0] >= (float)(60 * num974))
				{
					flag48 = true;
				}
				else if (num975 < 0 || num975 >= 200)
				{
					flag48 = true;
				}
				else if (Main.npc[num975].active && !Main.npc[num975].dontTakeDamage)
				{
					base.Center = Main.npc[num975].Center - velocity * 2f;
					gfxOffY = Main.npc[num975].gfxOffY;
					if (flag49)
					{
						Main.npc[num975].HitEffect(0, 1.0);
					}
				}
				else
				{
					flag48 = true;
				}
				if (flag48)
				{
					Kill();
				}
				if (!flag48 && type == 971)
				{
					if (num975 > 0 && num975 < 200 && timeLeft % 2 == 0)
					{
						Vector2 vector44 = center9 - velocity.SafeNormalize(Vector2.Zero) * 8f;
						Vector2 value8 = Main.npc[num975].velocity + new Vector2(Main.rand.NextFloatDirection() * 0.35f, 2.5f);
						Dust dust191 = Dust.NewDustPerfect(vector44, 4, value8, 0, new Color(120, 50, 120), 0.65f);
						dust191.fadeIn = 0.25f;
						dust191.noGravity = true;
					}
					if (localAI[1] == 0f)
					{
						localAI[1] = 1f;
						rotation = velocity.ToRotation() + (float)Math.PI / 2f;
					}
				}
				if (!flag48 && type == 975)
				{
					if (num975 > 0 && num975 < 200 && timeLeft % 2 == 0)
					{
						Vector2 vector45 = center9;
						Vector2 vector47 = velocity.SafeNormalize(Vector2.Zero) * -7f + velocity.SafeNormalize(Vector2.Zero).RotatedByRandom(0.19634954631328583);
						Dust dust192 = Dust.NewDustPerfect(vector45, 5, Vector2.Zero, 0, default(Color), 1.5f);
						dust192.scale = 1.1f;
						dust192.velocity = vector47 * 0.85f + new Vector2(0f, 0.85f);
						Vector2 spinningpoint9 = dust192.velocity;
						Dust dust213 = dust192;
						double radians54 = (float)Math.PI * 2f * Main.rand.NextFloatDirection() * 0.025f;
						val4 = default(Vector2);
						dust213.velocity = spinningpoint9.RotatedBy(radians54, val4);
						dust192 = Dust.CloneDust(dust192.dustIndex);
						Dust dust214 = dust192;
						double radians55 = (float)Math.PI * 2f * Main.rand.NextFloatDirection() * 0.025f;
						val4 = default(Vector2);
						dust214.velocity = spinningpoint9.RotatedBy(radians55, val4);
						Dust dust100 = dust192;
						Dust dust212 = dust100;
						dust212.position += dust192.velocity;
						if (Main.rand.Next(3) == 0)
						{
							dust192 = Dust.CloneDust(dust192.dustIndex);
							dust192.velocity = dust192.velocity.RotatedByRandom(0.39269909262657166) * 0.9f;
						}
					}
					if (localAI[1] == 0f)
					{
						localAI[1] = 1f;
						rotation = velocity.ToRotation() + (float)Math.PI / 2f;
						Vector2 vector48 = center9;
						for (int num976 = 0; num976 < 10; num976++)
						{
							Vector2 vector49 = Main.rand.NextVector2CircularEdge(4f, 4f);
							Dust dust193 = Dust.NewDustPerfect(vector48, 5, Vector2.Zero, 0, default(Color), 1.5f);
							dust193.scale = 1.5f;
							dust193.velocity = vector49;
							dust193.noGravity = true;
						}
					}
				}
			}
			if (type == 614)
			{
				Lighting.AddLight(base.Center, 0.2f, 0.6f, 0.7f);
			}
			if (type == 636)
			{
				Lighting.AddLight(base.Center, 0.8f, 0.7f, 0.4f);
			}
		}
		else if (aiStyle == 114)
		{
			if (Main.netMode == 2 && localAI[0] == 0f)
			{
				PortalHelper.SyncPortalSections(base.Center, 1);
				localAI[0] = 1f;
			}
			timeLeft = 3;
			bool flag50 = false;
			if (owner != 255 && (!Main.player[owner].active || Main.player[owner].dead || Distance(Main.player[owner].Center) > 12800f))
			{
				flag50 = true;
			}
			if (!flag50 && !WorldGen.InWorld((int)base.Center.X / 16, (int)base.Center.Y / 16, Lighting.OffScreenTiles))
			{
				flag50 = true;
			}
			if (!flag50 && !PortalHelper.SupportedTilesAreFine(base.Center, this.ai[0]))
			{
				flag50 = true;
			}
			if (flag50)
			{
				Kill();
				return;
			}
			Color portalColor = PortalHelper.GetPortalColor(owner, (int)this.ai[1]);
			alpha -= 25;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (alpha == 0)
			{
				Lighting.AddLight(base.Center + velocity * 3f, ((Color)(ref portalColor)).ToVector3() * 0.5f);
			}
			if (++frameCounter >= 6)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			rotation = this.ai[0] - (float)Math.PI / 2f;
		}
		else if (aiStyle == 115)
		{
			Lighting.AddLight(base.Center, new Vector3(0.075f, 0.3f, 0.15f));
			velocity *= 0.985f;
			rotation += velocity.X * 0.2f;
			if (velocity.X > 0f)
			{
				rotation += 0.08f;
			}
			else
			{
				rotation -= 0.08f;
			}
			this.ai[1] += 1f;
			if (this.ai[1] > 30f)
			{
				alpha += 10;
				if (alpha >= 255)
				{
					alpha = 255;
					Kill();
				}
			}
		}
		else if (aiStyle == 116)
		{
			if (localAI[0] == 0f)
			{
				rotation = this.ai[1];
				localAI[0] = 1f;
			}
			Player player2 = Main.player[owner];
			if (player2.setSolar)
			{
				timeLeft = 2;
			}
			float angle = (float)player2.miscCounter / 300f * ((float)Math.PI * 4f) + this.ai[1];
			angle = MathHelper.WrapAngle(angle);
			rotation = rotation.AngleLerp(angle, 0.05f);
			alpha -= 15;
			if (alpha < 0)
			{
				alpha = 0;
			}
			velocity = rotation.ToRotationVector2() * 100f - player2.velocity;
			base.Center = player2.Center - velocity;
		}
		else if (aiStyle == 117)
		{
			this.ai[1] += 0.01f;
			scale = this.ai[1];
			this.ai[0]++;
			if (this.ai[0] >= (float)(3 * Main.projFrames[type]))
			{
				Kill();
				return;
			}
			if (++frameCounter >= 3)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type])
				{
					hide = true;
				}
			}
			alpha -= 63;
			if (alpha < 0)
			{
				alpha = 0;
			}
			bool flag51 = type == 612 || type == 953 || type == 978;
			bool flag52 = type == 624;
			if (flag51)
			{
				Lighting.AddLight(base.Center, 0.9f, 0.8f, 0.6f);
			}
			if (this.ai[0] != 1f)
			{
				return;
			}
			base.position = base.Center;
			width = (height = (int)(52f * scale));
			base.Center = base.position;
			Damage();
			if (flag51)
			{
				SoundEngine.PlaySound(in SoundID.Item14, base.position);
				for (int num978 = 0; num978 < 4; num978++)
				{
					int num979 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num979].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				}
				for (int num980 = 0; num980 < 10; num980++)
				{
					int num981 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 200, default(Color), 2.7f);
					Main.dust[num981].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
					Main.dust[num981].noGravity = true;
					Dust dust90 = Main.dust[num981];
					Dust dust212 = dust90;
					dust212.velocity *= 3f;
					num981 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num981].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
					dust90 = Main.dust[num981];
					dust212 = dust90;
					dust212.velocity *= 2f;
					Main.dust[num981].noGravity = true;
					Main.dust[num981].fadeIn = 2.5f;
				}
				for (int num982 = 0; num982 < 5; num982++)
				{
					int num983 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.7f);
					Dust obj5 = Main.dust[num983];
					Vector2 center24 = base.Center;
					Vector2 spinningpoint67 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
					double radians56 = velocity.ToRotation();
					val4 = default(Vector2);
					obj5.position = center24 + spinningpoint67.RotatedBy(radians56, val4) * (float)width / 2f;
					Main.dust[num983].noGravity = true;
					Dust dust91 = Main.dust[num983];
					Dust dust212 = dust91;
					dust212.velocity *= 3f;
				}
				for (int num984 = 0; num984 < 10; num984++)
				{
					int num985 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Dust obj6 = Main.dust[num985];
					Vector2 center25 = base.Center;
					Vector2 spinningpoint68 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
					double radians57 = velocity.ToRotation();
					val4 = default(Vector2);
					obj6.position = center25 + spinningpoint68.RotatedBy(radians57, val4) * (float)width / 2f;
					Main.dust[num985].noGravity = true;
					Dust dust92 = Main.dust[num985];
					Dust dust212 = dust92;
					dust212.velocity *= 3f;
				}
			}
			if (!flag52)
			{
				return;
			}
			SoundEngine.PlaySound(in SoundID.Item14, base.position);
			for (int num986 = 0; num986 < 20; num986++)
			{
				int num987 = Dust.NewDust(base.position, width, height, 135, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num987].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				Dust dust93 = Main.dust[num987];
				Dust dust212 = dust93;
				dust212.velocity *= 2f;
				Main.dust[num987].noGravity = true;
				Main.dust[num987].fadeIn = 2.5f;
				Main.dust[num987].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
			}
			for (int num989 = 0; num989 < 15; num989++)
			{
				int num990 = Dust.NewDust(base.position, width, height, 135, 0f, 0f, 0, default(Color), 2.7f);
				Dust obj7 = Main.dust[num990];
				Vector2 center26 = base.Center;
				Vector2 spinningpoint69 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
				double radians58 = velocity.ToRotation();
				val4 = default(Vector2);
				obj7.position = center26 + spinningpoint69.RotatedBy(radians58, val4) * (float)width / 2f;
				Main.dust[num990].noGravity = true;
				Dust dust94 = Main.dust[num990];
				Dust dust212 = dust94;
				dust212.velocity *= 3f;
				Main.dust[num990].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
			}
			float num991 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
			float num992 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
			float num993 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
			float num994 = 7f + (float)Main.rand.NextDouble() * 7f;
			float num995 = 7f + (float)Main.rand.NextDouble() * 7f;
			float num996 = 7f + (float)Main.rand.NextDouble() * 7f;
			float num997 = num994;
			if (num995 > num997)
			{
				num997 = num995;
			}
			if (num996 > num997)
			{
				num997 = num996;
			}
			for (int num998 = 0; num998 < 200; num998++)
			{
				int num1000 = 135;
				float num1001 = num997;
				if (num998 > 50)
				{
					num1001 = num995;
				}
				if (num998 > 100)
				{
					num1001 = num994;
				}
				if (num998 > 150)
				{
					num1001 = num996;
				}
				int num1002 = Dust.NewDust(base.position, 6, 6, num1000, 0f, 0f, 100);
				Vector2 vector50 = Main.dust[num1002].velocity;
				Main.dust[num1002].position = base.Center;
				((Vector2)(ref vector50)).Normalize();
				vector50 *= num1001;
				if (num998 > 150)
				{
					vector50.Y *= 0.5f;
					Vector2 spinningpoint70 = vector50;
					double radians59 = num993;
					val4 = default(Vector2);
					vector50 = spinningpoint70.RotatedBy(radians59, val4);
				}
				else if (num998 > 100)
				{
					vector50.X *= 0.5f;
					Vector2 spinningpoint71 = vector50;
					double radians60 = num991;
					val4 = default(Vector2);
					vector50 = spinningpoint71.RotatedBy(radians60, val4);
				}
				else if (num998 > 50)
				{
					vector50.Y *= 0.5f;
					Vector2 spinningpoint72 = vector50;
					double radians61 = num992;
					val4 = default(Vector2);
					vector50 = spinningpoint72.RotatedBy(radians61, val4);
				}
				Dust dust96 = Main.dust[num1002];
				Dust dust212 = dust96;
				dust212.velocity *= 0.2f;
				dust96 = Main.dust[num1002];
				dust212 = dust96;
				dust212.velocity += vector50;
				Main.dust[num1002].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
				if (num998 <= 200)
				{
					Main.dust[num1002].scale = 2f;
					Main.dust[num1002].noGravity = true;
					Main.dust[num1002].fadeIn = Main.rand.NextFloat() * 2f;
					if (Main.rand.Next(4) == 0)
					{
						Main.dust[num1002].fadeIn = 2.5f;
					}
					Main.dust[num1002].noLight = true;
					if (num998 < 100)
					{
						dust96 = Main.dust[num1002];
						dust212 = dust96;
						dust212.position += Main.dust[num1002].velocity * 20f;
						dust96 = Main.dust[num1002];
						dust212 = dust96;
						dust212.velocity *= -1f;
					}
				}
			}
		}
		else if (aiStyle == 118)
		{
			this.ai[0]++;
			int num1003 = 0;
			if (((Vector2)(ref velocity)).Length() <= 4f)
			{
				num1003 = 1;
			}
			alpha -= 15;
			if (alpha < 0)
			{
				alpha = 0;
			}
			switch (num1003)
			{
			case 0:
				rotation -= (float)Math.PI / 30f;
				if (Main.rand.Next(3) == 0)
				{
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector56 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust197 = Main.dust[Dust.NewDust(base.Center - vector56 * 30f, 0, 0, Utils.SelectRandom<int>(Main.rand, 86, 90))];
						dust197.noGravity = true;
						dust197.position = base.Center - vector56 * (float)Main.rand.Next(10, 21);
						val4 = default(Vector2);
						dust197.velocity = vector56.RotatedBy(1.5707963705062866, val4) * 6f;
						dust197.scale = 0.5f + Main.rand.NextFloat();
						dust197.fadeIn = 0.5f;
						dust197.customData = this;
					}
					else
					{
						Vector2 vector58 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust198 = Main.dust[Dust.NewDust(base.Center - vector58 * 30f, 0, 0, 240)];
						dust198.noGravity = true;
						dust198.position = base.Center - vector58 * 30f;
						val4 = default(Vector2);
						dust198.velocity = vector58.RotatedBy(-1.5707963705062866, val4) * 3f;
						dust198.scale = 0.5f + Main.rand.NextFloat();
						dust198.fadeIn = 0.5f;
						dust198.customData = this;
					}
				}
				if (this.ai[0] >= 30f)
				{
					velocity *= 0.98f;
					scale += 0.0074468083f;
					if (scale > 1.3f)
					{
						scale = 1.3f;
					}
					rotation -= (float)Math.PI / 180f;
				}
				if (((Vector2)(ref velocity)).Length() < 4.1f)
				{
					((Vector2)(ref velocity)).Normalize();
					velocity *= 4f;
					this.ai[0] = 0f;
				}
				break;
			case 1:
			{
				rotation -= (float)Math.PI / 30f;
				for (int num1004 = 0; num1004 < 1; num1004++)
				{
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector51 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust195 = Main.dust[Dust.NewDust(base.Center - vector51 * 30f, 0, 0, 86)];
						dust195.noGravity = true;
						dust195.position = base.Center - vector51 * (float)Main.rand.Next(10, 21);
						Dust dust215 = dust195;
						Vector2 spinningpoint73 = vector51;
						val4 = default(Vector2);
						dust215.velocity = spinningpoint73.RotatedBy(1.5707963705062866, val4) * 6f;
						dust195.scale = 0.9f + Main.rand.NextFloat();
						dust195.fadeIn = 0.5f;
						dust195.customData = this;
						vector51 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						dust195 = Main.dust[Dust.NewDust(base.Center - vector51 * 30f, 0, 0, 90)];
						dust195.noGravity = true;
						dust195.position = base.Center - vector51 * (float)Main.rand.Next(10, 21);
						Dust dust216 = dust195;
						Vector2 spinningpoint74 = vector51;
						val4 = default(Vector2);
						dust216.velocity = spinningpoint74.RotatedBy(1.5707963705062866, val4) * 6f;
						dust195.scale = 0.9f + Main.rand.NextFloat();
						dust195.fadeIn = 0.5f;
						dust195.customData = this;
						dust195.color = Color.Crimson;
					}
					else
					{
						Vector2 vector52 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust196 = Main.dust[Dust.NewDust(base.Center - vector52 * 30f, 0, 0, 240)];
						dust196.noGravity = true;
						dust196.position = base.Center - vector52 * (float)Main.rand.Next(20, 31);
						val4 = default(Vector2);
						dust196.velocity = vector52.RotatedBy(-1.5707963705062866, val4) * 5f;
						dust196.scale = 0.9f + Main.rand.NextFloat();
						dust196.fadeIn = 0.5f;
						dust196.customData = this;
					}
				}
				if (this.ai[0] % 30f == 0f && this.ai[0] < 241f && Main.myPlayer == owner)
				{
					Vector2 vector53 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * 12f;
					NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector53.X, vector53.Y, 618, damage / 2, 0f, owner, 0f, whoAmI);
				}
				Vector2 vector54 = base.Center;
				float num1005 = 800f;
				bool flag53 = false;
				int num1006 = 0;
				if (this.ai[1] == 0f)
				{
					for (int num1007 = 0; num1007 < 200; num1007++)
					{
						if (Main.npc[num1007].CanBeChasedBy(this))
						{
							Vector2 center10 = Main.npc[num1007].Center;
							if (Distance(center10) < num1005 && Collision.CanHit(new Vector2(base.position.X + (float)(width / 2), base.position.Y + (float)(height / 2)), 1, 1, Main.npc[num1007].position, Main.npc[num1007].width, Main.npc[num1007].height))
							{
								num1005 = Distance(center10);
								vector54 = center10;
								flag53 = true;
								num1006 = num1007;
							}
						}
					}
					if (flag53)
					{
						if (this.ai[1] != (float)(num1006 + 1))
						{
							netUpdate = true;
						}
						this.ai[1] = num1006 + 1;
					}
					flag53 = false;
				}
				if (this.ai[1] != 0f)
				{
					int num1008 = (int)(this.ai[1] - 1f);
					if (Main.npc[num1008].active && Main.npc[num1008].CanBeChasedBy(this, ignoreDontTakeDamage: true) && Distance(Main.npc[num1008].Center) < 1000f)
					{
						flag53 = true;
						vector54 = Main.npc[num1008].Center;
					}
				}
				if (!friendly)
				{
					flag53 = false;
				}
				if (flag53)
				{
					float num1009 = 4f;
					int num1011 = 8;
					Vector2 vector55 = default(Vector2);
					((Vector2)(ref vector55))._002Ector(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num1012 = vector54.X - vector55.X;
					float num1013 = vector54.Y - vector55.Y;
					float num1014 = (float)Math.Sqrt(num1012 * num1012 + num1013 * num1013);
					float num1015 = num1014;
					num1014 = num1009 / num1014;
					num1012 *= num1014;
					num1013 *= num1014;
					velocity.X = (velocity.X * (float)(num1011 - 1) + num1012) / (float)num1011;
					velocity.Y = (velocity.Y * (float)(num1011 - 1) + num1013) / (float)num1011;
				}
				break;
			}
			}
			if (alpha < 150)
			{
				Lighting.AddLight(base.Center, 0.7f, 0.2f, 0.6f);
			}
			if (this.ai[0] >= 600f)
			{
				Kill();
			}
		}
		else if (aiStyle == 119)
		{
			int num1016 = 0;
			float num1017 = 0f;
			float x7 = 0f;
			float y6 = 0f;
			bool flag54 = false;
			bool flag55 = false;
			int num387 = type;
			if (num387 == 618)
			{
				num1016 = 617;
				num1017 = 420f;
				x7 = 0.15f;
				y6 = 0.15f;
			}
			if (flag55)
			{
				int num1018 = (int)this.ai[1];
				if (!Main.projectile[num1018].active || Main.projectile[num1018].type != num1016)
				{
					Kill();
					return;
				}
				timeLeft = 2;
			}
			this.ai[0]++;
			if (!(this.ai[0] < num1017))
			{
				return;
			}
			bool flag57 = true;
			int num1019 = (int)this.ai[1];
			if (Main.projectile[num1019].active && Main.projectile[num1019].type == num1016)
			{
				if (!flag54 && Main.projectile[num1019].oldPos[1] != Vector2.Zero)
				{
					base.position += Main.projectile[num1019].position - Main.projectile[num1019].oldPos[1];
				}
				if (base.Center.HasNaNs())
				{
					Kill();
					return;
				}
			}
			else
			{
				this.ai[0] = num1017;
				flag57 = false;
				Kill();
			}
			if (flag57 && !flag54)
			{
				velocity += new Vector2((float)Math.Sign(Main.projectile[num1019].Center.X - base.Center.X), (float)Math.Sign(Main.projectile[num1019].Center.Y - base.Center.Y)) * new Vector2(x7, y6);
				if (((Vector2)(ref velocity)).Length() > 6f)
				{
					velocity *= 6f / ((Vector2)(ref velocity)).Length();
				}
			}
			if (type == 618)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num1020 = Dust.NewDust(base.Center, 8, 8, 86);
					Main.dust[num1020].position = base.Center;
					Main.dust[num1020].velocity = velocity;
					Main.dust[num1020].noGravity = true;
					Main.dust[num1020].scale = 1.5f;
					if (flag57)
					{
						Main.dust[num1020].customData = Main.projectile[(int)this.ai[1]];
					}
				}
				alpha = 255;
			}
			else
			{
				Kill();
			}
		}
		else if (aiStyle == 120)
		{
			AI_120_StardustGuardian();
		}
		else if (aiStyle == 121)
		{
			AI_121_StardustDragon();
		}
		else if (aiStyle == 122)
		{
			int num1022 = (int)this.ai[0];
			bool flag58 = false;
			if (num1022 == -1 || !Main.npc[num1022].active)
			{
				flag58 = true;
			}
			if (flag58)
			{
				if (type == 629)
				{
					Kill();
					return;
				}
				if (type == 631 && this.ai[0] != -1f)
				{
					this.ai[0] = -1f;
					netUpdate = true;
				}
			}
			if (!flag58)
			{
				hitbox = base.Hitbox;
				if (((Rectangle)(ref hitbox)).Intersects(Main.npc[num1022].Hitbox))
				{
					Kill();
					if (type == 631)
					{
						localAI[1] = 1f;
						Damage();
					}
					return;
				}
			}
			if (type == 629)
			{
				Vector2 value9 = Main.npc[num1022].Center - base.Center;
				velocity = Vector2.Normalize(value9) * 5f;
				Dust.QuickDust(base.Center, Color.Red);
			}
			if (type != 631)
			{
				return;
			}
			if (this.ai[1] > 0f)
			{
				this.ai[1]--;
				velocity = Vector2.Zero;
				return;
			}
			if (flag58)
			{
				if (velocity == Vector2.Zero)
				{
					Kill();
				}
				tileCollide = true;
				alpha += 10;
				if (alpha > 255)
				{
					Kill();
				}
			}
			else
			{
				Vector2 value10 = Main.npc[num1022].Center - base.Center;
				velocity = Vector2.Normalize(value10) * 12f;
				alpha -= 15;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			rotation = velocity.ToRotation() - (float)Math.PI / 2f;
		}
		else if (aiStyle == 123)
		{
			bool flag59 = type == 641;
			bool flag60 = type == 643;
			float num1023 = 1000f;
			velocity = Vector2.Zero;
			if (flag59)
			{
				alpha -= 5;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (direction == 0)
				{
					direction = Main.player[owner].direction;
				}
				rotation -= (float)direction * ((float)Math.PI * 2f) / 120f;
				scale = Opacity;
				Lighting.AddLight(base.Center, new Vector3(0.3f, 0.9f, 0.7f) * Opacity);
				if (Main.rand.Next(2) == 0)
				{
					Vector2 vector59 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					Dust dust199 = Main.dust[Dust.NewDust(base.Center - vector59 * 30f, 0, 0, 229)];
					dust199.noGravity = true;
					dust199.position = base.Center - vector59 * (float)Main.rand.Next(10, 21);
					val4 = default(Vector2);
					dust199.velocity = vector59.RotatedBy(1.5707963705062866, val4) * 6f;
					dust199.scale = 0.5f + Main.rand.NextFloat();
					dust199.fadeIn = 0.5f;
					dust199.customData = base.Center;
				}
				if (Main.rand.Next(2) == 0)
				{
					Vector2 vector60 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					Dust dust200 = Main.dust[Dust.NewDust(base.Center - vector60 * 30f, 0, 0, 240)];
					dust200.noGravity = true;
					dust200.position = base.Center - vector60 * 30f;
					val4 = default(Vector2);
					dust200.velocity = vector60.RotatedBy(-1.5707963705062866, val4) * 3f;
					dust200.scale = 0.5f + Main.rand.NextFloat();
					dust200.fadeIn = 0.5f;
					dust200.customData = base.Center;
				}
				if (this.ai[0] < 0f)
				{
					Vector2 center11 = base.Center;
					int num1024 = Dust.NewDust(center11 - Vector2.One * 8f, 16, 16, 229, velocity.X / 2f, velocity.Y / 2f);
					Dust dust81 = Main.dust[num1024];
					Dust dust212 = dust81;
					dust212.velocity *= 2f;
					Main.dust[num1024].noGravity = true;
					Main.dust[num1024].scale = Utils.SelectRandom<float>(Main.rand, 0.8f, 1.65f);
					Main.dust[num1024].customData = this;
				}
			}
			if (flag60)
			{
				alpha -= 5;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (direction == 0)
				{
					direction = Main.player[owner].direction;
				}
				if (++frameCounter >= 3)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				if (alpha == 0 && Main.rand.Next(15) == 0)
				{
					Dust dust201 = Main.dust[Dust.NewDust(base.Top, 0, 0, 261, 0f, 0f, 100)];
					dust201.velocity.X = 0f;
					dust201.noGravity = true;
					dust201.fadeIn = 1f;
					dust201.position = base.Center + Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (4f * Main.rand.NextFloat() + 26f);
					dust201.scale = 0.5f;
				}
				localAI[0]++;
				if (localAI[0] >= 60f)
				{
					localAI[0] = 0f;
				}
			}
			if (this.ai[0] < 0f)
			{
				this.ai[0]++;
				if (flag59)
				{
					this.ai[1] -= (float)direction * ((float)Math.PI / 8f) / 50f;
				}
			}
			if (this.ai[0] == 0f)
			{
				int num1025 = -1;
				float num1026 = num1023;
				NPC ownerMinionAttackTargetNPC4 = OwnerMinionAttackTargetNPC;
				if (ownerMinionAttackTargetNPC4 != null && ownerMinionAttackTargetNPC4.CanBeChasedBy(this))
				{
					float num1027 = Distance(ownerMinionAttackTargetNPC4.Center);
					if (num1027 < num1026 && Collision.CanHitLine(base.Center, 0, 0, ownerMinionAttackTargetNPC4.Center, 0, 0))
					{
						num1026 = num1027;
						num1025 = ownerMinionAttackTargetNPC4.whoAmI;
					}
				}
				if (num1025 < 0)
				{
					for (int num1028 = 0; num1028 < 200; num1028++)
					{
						NPC nPC7 = Main.npc[num1028];
						if (nPC7.CanBeChasedBy(this))
						{
							float num1029 = Distance(nPC7.Center);
							if (num1029 < num1026 && Collision.CanHitLine(base.Center, 0, 0, nPC7.Center, 0, 0))
							{
								num1026 = num1029;
								num1025 = num1028;
							}
						}
					}
				}
				if (num1025 != -1)
				{
					this.ai[0] = 1f;
					this.ai[1] = num1025;
					netUpdate = true;
					return;
				}
			}
			if (!(this.ai[0] > 0f))
			{
				return;
			}
			int num1030 = (int)this.ai[1];
			if (!Main.npc[num1030].CanBeChasedBy(this))
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				netUpdate = true;
				return;
			}
			this.ai[0]++;
			float num1031 = 30f;
			if (flag59)
			{
				num1031 = 10f;
			}
			if (flag60)
			{
				num1031 = 5f;
			}
			if (!(this.ai[0] >= num1031))
			{
				return;
			}
			Vector2 vector61 = DirectionTo(Main.npc[num1030].Center);
			if (vector61.HasNaNs())
			{
				vector61 = Vector2.UnitY;
			}
			float num1033 = vector61.ToRotation();
			int num1034 = ((vector61.X > 0f) ? 1 : (-1));
			if (flag59)
			{
				direction = num1034;
				this.ai[0] = -20f;
				this.ai[1] = num1033 + (float)num1034 * (float)Math.PI / 6f;
				netUpdate = true;
				if (owner == Main.myPlayer)
				{
					NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector61.X, vector61.Y, 642, damage, knockBack, owner, this.ai[1], whoAmI);
				}
			}
			if (!flag60)
			{
				return;
			}
			direction = num1034;
			this.ai[0] = -20f;
			netUpdate = true;
			if (owner != Main.myPlayer)
			{
				return;
			}
			NPC nPC8 = Main.npc[num1030];
			Vector2 vector62 = nPC8.position + nPC8.Size * Utils.RandomVector2(Main.rand, 0f, 1f) - base.Center;
			for (int num1035 = 0; num1035 < 3; num1035++)
			{
				Vector2 other = base.Center + vector62;
				Vector2 vector63 = nPC8.velocity * 30f;
				other += vector63;
				float num1036 = MathHelper.Lerp(0.1f, 0.75f, Utils.GetLerpValue(800f, 200f, Distance(other)));
				if (num1035 > 0)
				{
					other = base.Center + vector62.RotatedByRandom(0.7853981852531433) * (Main.rand.NextFloat() * num1036 + 0.5f);
				}
				float x8 = Main.rgbToHsl(new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB)).X;
				NewProjectile(GetProjectileSource_FromThis(), other.X, other.Y, 0f, 0f, 644, damage, knockBack, owner, x8, whoAmI);
			}
		}
		else if (aiStyle == 124)
		{
			bool flag61 = type == 650;
			Player player3 = Main.player[owner];
			if (player3.dead)
			{
				Kill();
				return;
			}
			if (type == 650 && player3.suspiciouslookingTentacle)
			{
				timeLeft = 2;
			}
			if (type == 882 && player3.petFlagEyeOfCthulhuPet)
			{
				timeLeft = 2;
			}
			if (type == 888 && player3.petFlagTwinsPet)
			{
				timeLeft = 2;
			}
			if (type == 895 && player3.petFlagFairyQueenPet)
			{
				timeLeft = 2;
			}
			if (type == 896 && player3.petFlagPumpkingPet)
			{
				timeLeft = 2;
			}
			if (type == 898 && player3.petFlagIceQueenPet)
			{
				timeLeft = 2;
			}
			if (type == 957 && player3.petFlagGlommerPet)
			{
				timeLeft = 2;
			}
			direction = (spriteDirection = player3.direction);
			if (type == 650)
			{
				Vector3 v3_ = new Vector3(0.5f, 0.9f, 1f) * 2f;
				DelegateMethods.v3_1 = v3_;
				Utils.PlotTileLine(base.Center, base.Center + velocity * 6f, 20f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(base.Left, base.Right, 20f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(player3.Center, player3.Center + player3.velocity * 6f, 40f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(player3.Left, player3.Right, 40f, DelegateMethods.CastLightOpen);
			}
			if (type == 895)
			{
				Vector3 vector64 = new Vector3(1f, 0.6f, 1f) * 1.5f;
				DelegateMethods.v3_1 = vector64 * 0.75f;
				Utils.PlotTileLine(player3.Center, player3.Center + player3.velocity * 6f, 40f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(player3.Left, player3.Right, 40f, DelegateMethods.CastLightOpen);
				DelegateMethods.v3_1 = vector64 * 1.5f;
				Utils.PlotTileLine(base.Center, base.Center + velocity * 6f, 30f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(base.Left, base.Right, 20f, DelegateMethods.CastLightOpen);
			}
			if (type == 896)
			{
				Vector3 vector65 = new Vector3(1f, 0.7f, 0.05f) * 1.5f;
				DelegateMethods.v3_1 = vector65 * 0.75f;
				Utils.PlotTileLine(player3.Center, player3.Center + player3.velocity * 6f, 40f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(player3.Left, player3.Right, 40f, DelegateMethods.CastLightOpen);
				DelegateMethods.v3_1 = vector65 * 1.5f;
				Utils.PlotTileLine(base.Center, base.Center + velocity * 6f, 30f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(base.Left, base.Right, 20f, DelegateMethods.CastLightOpen);
			}
			float num1037 = 30f;
			float y7 = -20f;
			int num1038 = player3.direction;
			if (type == 882 && player3.ownedProjectileCounts[650] > 0)
			{
				num1038 *= -1;
			}
			if (type == 888)
			{
				num1037 = 30f;
				y7 = -50f;
				if (player3.ownedProjectileCounts[650] > 0)
				{
					y7 = -70f;
				}
			}
			if (type == 895)
			{
				num1037 = -36f;
				y7 = -50f;
			}
			if (type == 896)
			{
				num1037 = 30f;
				y7 = -60f;
				if (player3.ownedProjectileCounts[888] > 0)
				{
					num1037 = -30f;
				}
			}
			if (type == 898)
			{
				num1037 = -30f;
				y7 = -50f;
				if (player3.ownedProjectileCounts[895] > 0)
				{
					num1037 = 30f;
				}
			}
			if (type == 957)
			{
				num1037 = -40f;
				y7 = -40f;
				if (player3.ownedProjectileCounts[895] > 0)
				{
					num1037 = 40f;
				}
			}
			Vector2 vector66 = default(Vector2);
			((Vector2)(ref vector66))._002Ector((float)num1038 * num1037, y7);
			Vector2 vector67 = player3.MountedCenter + vector66;
			float num1039 = Vector2.Distance(base.Center, vector67);
			if (num1039 > 1000f)
			{
				base.Center = player3.Center + vector66;
			}
			Vector2 vector69 = vector67 - base.Center;
			float num1040 = 4f;
			if (num1039 < num1040)
			{
				velocity *= 0.25f;
			}
			if (vector69 != Vector2.Zero)
			{
				if (((Vector2)(ref vector69)).Length() < num1040)
				{
					velocity = vector69;
				}
				else
				{
					velocity = vector69 * 0.1f;
				}
			}
			if (num1039 > 50f && (type == 895 || type == 898 || type == 957))
			{
				direction = (spriteDirection = 1);
				if (velocity.X < 0f)
				{
					direction = (spriteDirection = -1);
				}
			}
			if (((Vector2)(ref velocity)).Length() > 6f)
			{
				if (type == 650)
				{
					float num1041 = velocity.ToRotation() + (float)Math.PI / 2f;
					if (Math.Abs(rotation - num1041) >= (float)Math.PI)
					{
						if (num1041 < rotation)
						{
							rotation -= (float)Math.PI * 2f;
						}
						else
						{
							rotation += (float)Math.PI * 2f;
						}
					}
					float num1042 = 12f;
					rotation = (rotation * (num1042 - 1f) + num1041) / num1042;
					if (++frameCounter >= 4)
					{
						frameCounter = 0;
						if (++frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
				}
				else if (type == 882)
				{
					rotation = velocity.X * 0.125f;
					if (++frameCounter >= 3)
					{
						frameCounter = 0;
						if (frame < 6)
						{
							frame = 6;
						}
						else
						{
							frame++;
							if (frame > 15)
							{
								frame = 10;
							}
						}
					}
				}
				else if (type == 888)
				{
					float num1044 = velocity.ToRotation() + (float)Math.PI / 2f;
					if (Math.Abs(rotation - num1044) >= (float)Math.PI)
					{
						if (num1044 < rotation)
						{
							rotation -= (float)Math.PI * 2f;
						}
						else
						{
							rotation += (float)Math.PI * 2f;
						}
					}
					float num1045 = 12f;
					rotation = (rotation * (num1045 - 1f) + num1044) / num1045;
					if (++frameCounter >= 3)
					{
						frameCounter = 0;
						if (frame < 6)
						{
							frame = 6;
						}
						else
						{
							frame++;
							if (frame > 17)
							{
								frame = 6;
							}
						}
					}
				}
				else if (type == 895)
				{
					float num1046 = velocity.X * 0.1f;
					if (Math.Abs(rotation - num1046) >= (float)Math.PI)
					{
						if (num1046 < rotation)
						{
							rotation -= (float)Math.PI * 2f;
						}
						else
						{
							rotation += (float)Math.PI * 2f;
						}
					}
					float num1047 = 12f;
					rotation = (rotation * (num1047 - 1f) + num1046) / num1047;
					if (++frameCounter >= 3)
					{
						frameCounter = 0;
						frame++;
						if (frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
					if (frameCounter == 0)
					{
						int num1048 = Dust.NewDust(base.position, width, height, 242, 0f, 0f, 50, default(Color), 2f);
						Main.dust[num1048].noGravity = true;
					}
				}
				else if (type == 896)
				{
					float num1049 = velocity.ToRotation() + (float)Math.PI / 2f;
					if (Math.Abs(rotation - num1049) >= (float)Math.PI)
					{
						if (num1049 < rotation)
						{
							rotation -= (float)Math.PI * 2f;
						}
						else
						{
							rotation += (float)Math.PI * 2f;
						}
					}
					float num1050 = 12f;
					rotation = (rotation * (num1050 - 1f) + num1049) / num1050;
					if (++frameCounter >= 4)
					{
						frameCounter = 0;
						if (frame < 8)
						{
							frame = 8;
						}
						else
						{
							frame++;
							if (frame >= Main.projFrames[type])
							{
								frame = 8;
							}
						}
					}
				}
				else if (type == 898)
				{
					float num1051 = velocity.X * 0.1f;
					if (Math.Abs(rotation - num1051) >= (float)Math.PI)
					{
						if (num1051 < rotation)
						{
							rotation -= (float)Math.PI * 2f;
						}
						else
						{
							rotation += (float)Math.PI * 2f;
						}
					}
					float num1052 = 12f;
					rotation = (rotation * (num1052 - 1f) + num1051) / num1052;
					if (++frameCounter >= 3)
					{
						frameCounter = 0;
						frame++;
						if (frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
					if (frameCounter == 0)
					{
						int num1053 = Dust.NewDust(base.position, width, height, 80, 0f, 0f, 50);
						Main.dust[num1053].noGravity = true;
					}
				}
				else if (type == 957)
				{
					float num1055 = velocity.X * 0.05f;
					if (Math.Abs(rotation - num1055) >= (float)Math.PI)
					{
						if (num1055 < rotation)
						{
							rotation -= (float)Math.PI * 2f;
						}
						else
						{
							rotation += (float)Math.PI * 2f;
						}
					}
					float num1056 = 12f;
					rotation = (rotation * (num1056 - 1f) + num1055) / num1056;
					if (++frameCounter >= 4)
					{
						frameCounter = 0;
						frame++;
						if (frame >= Main.projFrames[type] * 2)
						{
							frame = 0;
						}
					}
				}
			}
			else if (type == 650)
			{
				if (rotation > (float)Math.PI)
				{
					rotation -= (float)Math.PI * 2f;
				}
				if (rotation > -0.005f && rotation < 0.005f)
				{
					rotation = 0f;
				}
				else
				{
					rotation *= 0.96f;
				}
				if (++frameCounter >= 6)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
			}
			else if (type == 882)
			{
				rotation = velocity.X * 0.125f;
				if (++frameCounter >= 5)
				{
					frameCounter = 0;
					frame++;
					if (frame == 6 || frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
			}
			else if (type == 888)
			{
				if (rotation > (float)Math.PI)
				{
					rotation -= (float)Math.PI * 2f;
				}
				if (rotation > -0.005f && rotation < 0.005f)
				{
					rotation = 0f;
				}
				else
				{
					rotation *= 0.96f;
				}
				if (++frameCounter >= 5)
				{
					frameCounter = 0;
					frame++;
					if (frame == 6 || frame >= 18)
					{
						frame = 0;
					}
				}
			}
			else if (type == 895)
			{
				if (rotation > (float)Math.PI)
				{
					rotation -= (float)Math.PI * 2f;
				}
				if (rotation > -0.005f && rotation < 0.005f)
				{
					rotation = 0f;
				}
				else
				{
					rotation *= 0.96f;
				}
				if (++frameCounter >= 5)
				{
					frameCounter = 0;
					frame++;
					if (frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
			}
			else if (type == 896)
			{
				if (rotation > (float)Math.PI)
				{
					rotation -= (float)Math.PI * 2f;
				}
				if (rotation > -0.005f && rotation < 0.005f)
				{
					rotation = 0f;
				}
				else
				{
					rotation *= 0.96f;
				}
				if (++frameCounter >= 5)
				{
					frameCounter = 0;
					frame++;
					if (frame == 8 || frame >= Main.projFrames[type])
					{
						frame = 0;
						if (Main.rand.Next(15) == 0)
						{
							frame = 8;
						}
					}
				}
			}
			else if (type == 898)
			{
				if (rotation > (float)Math.PI)
				{
					rotation -= (float)Math.PI * 2f;
				}
				if (rotation > -0.005f && rotation < 0.005f)
				{
					rotation = 0f;
				}
				else
				{
					rotation *= 0.96f;
				}
				if (++frameCounter >= 5)
				{
					frameCounter = 0;
					frame++;
					if (frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
			}
			else if (type == 957)
			{
				int num1057 = Main.projFrames[type];
				if (rotation > (float)Math.PI)
				{
					rotation -= (float)Math.PI * 2f;
				}
				if (rotation > -0.005f && rotation < 0.005f)
				{
					rotation = 0f;
				}
				else
				{
					rotation *= 0.96f;
				}
				if (((Vector2)(ref velocity)).Length() <= 0.01f)
				{
					bool flag62 = true;
					int num1058 = (int)base.Center.X / 16;
					int num1059 = (int)base.Center.Y / 16;
					int num1060 = 4;
					for (int num1061 = 0; num1061 < num1060 + 1; num1061++)
					{
						if (num1058 < 0 || num1058 >= Main.maxTilesX || num1059 < 0 || num1059 >= Main.maxTilesY)
						{
							flag62 = false;
							break;
						}
						bool flag63 = WorldGen.SolidTileAllowBottomSlope(num1058, num1059);
						if ((num1061 == num1060 && !flag63) || (num1061 < num1060 && flag63))
						{
							flag62 = false;
							break;
						}
						num1059++;
					}
					if (flag62)
					{
						localAI[0]--;
						if (localAI[0] <= 0f)
						{
							localAI[0] = 0f;
							if (frame < num1057 * 2)
							{
								frame = num1057 * 2;
							}
							int num1062 = 3;
							if (frame <= 30 && frame <= 33)
							{
								num1062 = 2;
							}
							if (++frameCounter >= num1062)
							{
								frameCounter = 0;
								frame++;
								if (frame >= num1057 * 3)
								{
									localAI[0] = 200 + Main.rand.Next(150);
									frame = 0;
								}
								if (frame == 32)
								{
									SoundEngine.PlaySound(in SoundID.GlommerBounce, base.Bottom);
								}
							}
						}
						else if (++frameCounter >= 4)
						{
							frameCounter = 0;
							frame++;
							if (frame >= num1057 * 2)
							{
								frame = 0;
							}
						}
					}
					else
					{
						localAI[0] = 300f;
						if (++frameCounter >= 4)
						{
							frameCounter = 0;
							frame++;
							if (frame >= num1057 * 2)
							{
								frame = 0;
							}
						}
					}
				}
				else
				{
					localAI[0] = 300f;
					if (++frameCounter >= 4)
					{
						frameCounter = 0;
						frame++;
						if (frame >= num1057 * 2)
						{
							frame = 0;
						}
					}
				}
			}
			if (flag61 && this.ai[0] > 0f && (this.ai[0] += 1f) >= 60f)
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
			}
			if (flag61 && Main.rand.Next(15) == 0)
			{
				int num1063 = -1;
				int num1064 = -1;
				float num1066 = -1f;
				int num1067 = 17;
				val4 = base.Center - player3.Center;
				if (((Vector2)(ref val4)).Length() < (float)Main.screenWidth)
				{
					int num1068 = (int)base.Center.X / 16;
					int num1069 = (int)base.Center.Y / 16;
					num1068 = (int)MathHelper.Clamp((float)num1068, (float)(num1067 + 1), (float)(Main.maxTilesX - num1067 - 1));
					num1069 = (int)MathHelper.Clamp((float)num1069, (float)(num1067 + 1), (float)(Main.maxTilesY - num1067 - 1));
					for (int num1070 = num1068 - num1067; num1070 <= num1068 + num1067; num1070++)
					{
						for (int num1071 = num1069 - num1067; num1071 <= num1069 + num1067; num1071++)
						{
							int num1072 = Main.rand.Next(8);
							if (num1072 >= 4)
							{
								continue;
							}
							val4 = new Vector2((float)(num1068 - num1070), (float)(num1069 - num1071));
							if (((Vector2)(ref val4)).Length() < (float)num1067 && Main.tile[num1070, num1071] != null && Main.tile[num1070, num1071].active() && Main.IsTileSpelunkable(num1070, num1071))
							{
								float num1073 = Distance(new Vector2((float)(num1070 * 16 + 8), (float)(num1071 * 16 + 8)));
								if (num1073 < num1066 || num1066 == -1f)
								{
									num1066 = num1073;
									num1063 = num1070;
									num1064 = num1071;
									this.ai[0] = 1f;
									this.ai[1] = AngleTo(new Vector2((float)(num1070 * 16 + 8), (float)(num1071 * 16 + 8)));
								}
								if (num1072 < 2)
								{
									int num1074 = Dust.NewDust(new Vector2((float)(num1070 * 16), (float)(num1071 * 16)), 16, 16, 204, 0f, 0f, 150, default(Color), 0.3f);
									Main.dust[num1074].fadeIn = 0.75f;
									Dust dust66 = Main.dust[num1074];
									Dust dust212 = dust66;
									dust212.velocity *= 0.1f;
								}
							}
						}
					}
				}
			}
			if (!flag61)
			{
				return;
			}
			float f3 = localAI[0] % ((float)Math.PI * 2f) - (float)Math.PI;
			float num1075 = (float)Math.IEEERemainder(localAI[1], 1.0);
			if (num1075 < 0f)
			{
				num1075 += 1f;
			}
			float num4 = (float)Math.Floor(localAI[1]);
			float max = 0.999f;
			float num5 = 0f;
			int num6 = 0;
			float amount2 = 0.1f;
			bool flag64 = ((Vector2)(ref player3.velocity)).Length() > 3f;
			int num7 = -1;
			int num8 = -1;
			float num9 = 300f;
			float num10 = 500f;
			for (int num11 = 0; num11 < 200; num11++)
			{
				NPC nPC9 = Main.npc[num11];
				if (!nPC9.active || !nPC9.chaseable || nPC9.dontTakeDamage || nPC9.immortal)
				{
					continue;
				}
				float num12 = Distance(nPC9.Center);
				if (nPC9.friendly || nPC9.lifeMax <= 5)
				{
					if (num12 < num9 && !flag64)
					{
						num9 = num12;
						num8 = num11;
					}
				}
				else if (num12 < num10)
				{
					num10 = num12;
					num7 = num11;
				}
			}
			if (flag64)
			{
				num5 = AngleTo(base.Center + player3.velocity);
				num6 = 1;
				num1075 = MathHelper.Clamp(num1075 + 0.05f, 0f, max);
				num4 += (float)Math.Sign(-10f - num4);
			}
			else if (num7 != -1)
			{
				num5 = AngleTo(Main.npc[num7].Center);
				num6 = 2;
				num1075 = MathHelper.Clamp(num1075 + 0.05f, 0f, max);
				num4 += (float)Math.Sign(-12f - num4);
			}
			else if (num8 != -1)
			{
				num5 = AngleTo(Main.npc[num8].Center);
				num6 = 3;
				num1075 = MathHelper.Clamp(num1075 + 0.05f, 0f, max);
				num4 += (float)Math.Sign(6f - num4);
			}
			else if (this.ai[0] > 0f)
			{
				num5 = this.ai[1];
				num1075 = MathHelper.Clamp(num1075 + (float)Math.Sign(0.75f - num1075) * 0.05f, 0f, max);
				num6 = 4;
				num4 += (float)Math.Sign(10f - num4);
				if (Main.rand.Next(10) == 0)
				{
					int num13 = Dust.NewDust(base.Center + f3.ToRotationVector2() * 6f * num1075 - Vector2.One * 4f, 8, 8, 204, 0f, 0f, 150, default(Color), 0.3f);
					Main.dust[num13].fadeIn = 0.75f;
					Dust dust75 = Main.dust[num13];
					Dust dust212 = dust75;
					dust212.velocity *= 0.1f;
				}
			}
			else
			{
				num5 = ((player3.direction == 1) ? 0f : 3.1416028f);
				num1075 = MathHelper.Clamp(num1075 + (float)Math.Sign(0.75f - num1075) * 0.05f, 0f, max);
				num4 += (float)Math.Sign(0f - num4);
				amount2 = 0.12f;
			}
			Vector2 value11 = num5.ToRotationVector2();
			num5 = Vector2.Lerp(f3.ToRotationVector2(), value11, amount2).ToRotation();
			localAI[0] = num5 + (float)num6 * ((float)Math.PI * 2f) + (float)Math.PI;
			localAI[1] = num4 + num1075;
		}
		else if (aiStyle == 125)
		{
			Player player4 = Main.player[owner];
			if (Main.myPlayer == owner)
			{
				if (localAI[1] > 0f)
				{
					localAI[1]--;
				}
				if (player4.noItems || player4.CCed || player4.dead)
				{
					Kill();
				}
				else if (Main.mouseRight && Main.mouseRightRelease)
				{
					Kill();
					player4.mouseInterface = true;
					Main.blockMouse = true;
				}
				else if (!player4.channel)
				{
					if (localAI[0] == 0f)
					{
						localAI[0] = 1f;
					}
					Kill();
				}
				else if (localAI[1] == 0f)
				{
					Vector2 vector70 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY);
					if (player4.gravDir == -1f)
					{
						vector70.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y;
					}
					if (vector70 != base.Center)
					{
						netUpdate = true;
						base.Center = vector70;
						localAI[1] = 1f;
					}
					if (this.ai[0] == 0f && this.ai[1] == 0f)
					{
						this.ai[0] = (int)base.Center.X / 16;
						this.ai[1] = (int)base.Center.Y / 16;
						netUpdate = true;
						velocity = Vector2.Zero;
					}
				}
				velocity = Vector2.Zero;
				Point point4 = Utils.ToPoint(new Vector2(this.ai[0], this.ai[1]));
				Point point5 = base.Center.ToTileCoordinates();
				int num15 = Math.Abs(point4.X - point5.X);
				int num16 = Math.Abs(point4.Y - point5.Y);
				int num17 = Math.Sign(point5.X - point4.X);
				int num18 = Math.Sign(point5.Y - point4.Y);
				Point point6 = default(Point);
				bool flag65 = false;
				bool flag66 = player4.direction == 1;
				int num19;
				int num20;
				int num21;
				if (flag66)
				{
					point6.X = point4.X;
					num19 = point4.Y;
					num20 = point5.Y;
					num21 = num18;
				}
				else
				{
					point6.Y = point4.Y;
					num19 = point4.X;
					num20 = point5.X;
					num21 = num17;
				}
				for (int num22 = num19; num22 != num20; num22 += num21)
				{
					if (flag65)
					{
						break;
					}
					if (flag66)
					{
						point6.Y = num22;
					}
					else
					{
						point6.X = num22;
					}
					if (WorldGen.InWorld(point6.X, point6.Y, 1))
					{
						Tile tile3 = Main.tile[point6.X, point6.Y];
					}
				}
				if (flag66)
				{
					point6.Y = point5.Y;
					num19 = point4.X;
					num20 = point5.X;
					num21 = num17;
				}
				else
				{
					point6.X = point5.X;
					num19 = point4.Y;
					num20 = point5.Y;
					num21 = num18;
				}
				for (int num23 = num19; num23 != num20; num23 += num21)
				{
					if (flag65)
					{
						break;
					}
					if (!flag66)
					{
						point6.Y = num23;
					}
					else
					{
						point6.X = num23;
					}
					if (WorldGen.InWorld(point6.X, point6.Y, 1))
					{
						Tile tile4 = Main.tile[point6.X, point6.Y];
					}
				}
			}
			int num24 = Math.Sign(player4.velocity.X);
			if (num24 != 0)
			{
				player4.ChangeDir(num24);
			}
			player4.heldProj = whoAmI;
			player4.SetDummyItemTime(2);
			player4.itemRotation = 0f;
		}
		else if (aiStyle == 126)
		{
			int num26 = Math.Sign(velocity.Y);
			int num27 = ((num26 != -1) ? 1 : 0);
			if (this.ai[0] == 0f)
			{
				if (!Collision.SolidCollision(base.position + new Vector2(0f, (float)((num26 == -1) ? (height - 48) : 0)), width, 48) && !Collision.WetCollision(base.position + new Vector2(0f, (float)((num26 == -1) ? (height - 20) : 0)), width, 20))
				{
					velocity = new Vector2(0f, (float)Math.Sign(velocity.Y) * 0.001f);
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					timeLeft = 60;
				}
				this.ai[1]++;
				if (this.ai[1] >= 60f)
				{
					Kill();
				}
				for (int num28 = 0; num28 < 3; num28++)
				{
					int num29 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 100);
					Main.dust[num29].scale = 0.1f + (float)Main.rand.Next(5) * 0.1f;
					Main.dust[num29].fadeIn = 1.5f + (float)Main.rand.Next(5) * 0.1f;
					Main.dust[num29].noGravity = true;
					Dust obj8 = Main.dust[num29];
					Vector2 center27 = base.Center;
					Vector2 spinningpoint75 = new Vector2(0f, (float)(-height / 2));
					double radians62 = rotation;
					val4 = default(Vector2);
					obj8.position = center27 + Utils.RotatedBy(spinningpoint75, radians62, val4) * 1.1f;
				}
			}
			if (this.ai[0] != 1f)
			{
				return;
			}
			velocity = new Vector2(0f, (float)Math.Sign(velocity.Y) * 0.001f);
			if (num26 != 0)
			{
				int num30 = 16;
				int num31 = 320;
				if (type == 670)
				{
					num31 -= (int)Math.Abs(localAI[1]) * 64;
				}
				for (; num30 < num31 && !Collision.SolidCollision(base.position + new Vector2(0f, (float)((num26 == -1) ? (height - num30 - 16) : 0)), width, num30 + 16); num30 += 16)
				{
				}
				if (num26 == -1)
				{
					base.position.Y += height;
					height = num30;
					base.position.Y -= num30;
				}
				else
				{
					height = num30;
				}
			}
			this.ai[1]++;
			if (type == 670 && owner == Main.myPlayer && this.ai[1] == 12f && localAI[1] < 3f && localAI[1] > -3f)
			{
				if (localAI[1] == 0f)
				{
					int num32 = NewProjectile(GetProjectileSource_FromThis(), base.Bottom + new Vector2(-50f, -10f), -Vector2.UnitY, type, damage, knockBack, owner);
					Main.projectile[num32].localAI[1] = localAI[1] - 1f;
					num32 = NewProjectile(GetProjectileSource_FromThis(), base.Bottom + new Vector2(50f, -10f), -Vector2.UnitY, type, damage, knockBack, owner);
					Main.projectile[num32].localAI[1] = localAI[1] + 1f;
				}
				else
				{
					int num33 = Math.Sign(localAI[1]);
					int num34 = NewProjectile(GetProjectileSource_FromThis(), base.Bottom + new Vector2((float)(50 * num33), -10f), -Vector2.UnitY, type, damage, knockBack, owner);
					Main.projectile[num34].localAI[1] = localAI[1] + (float)num33;
				}
			}
			if (this.ai[1] >= 60f)
			{
				Kill();
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				for (int num35 = 0; (float)num35 < 60f; num35++)
				{
					int num37 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
					int num38 = Dust.NewDust(base.position, width, height, num37, 0f, -2.5f * (float)(-num26));
					Main.dust[num38].alpha = 200;
					Dust dust26 = Main.dust[num38];
					Dust dust212 = dust26;
					dust212.velocity *= new Vector2(0.3f, 2f);
					Main.dust[num38].velocity.Y += 2 * num26;
					dust26 = Main.dust[num38];
					dust212 = dust26;
					dust212.scale += Main.rand.NextFloat();
					Main.dust[num38].position = new Vector2(base.Center.X, base.Center.Y + (float)height * 0.5f * (float)(-num26));
					Main.dust[num38].customData = num27;
					if (num26 == -1 && Main.rand.Next(4) != 0)
					{
						Main.dust[num38].velocity.Y -= 0.2f;
					}
				}
				SoundEngine.PlaySound(in SoundID.Item34, base.position);
			}
			if (num26 == 1)
			{
				for (int num39 = 0; (float)num39 < 9f; num39++)
				{
					int num40 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
					int num41 = Dust.NewDust(base.position, width, height, num40, 0f, -2.5f * (float)(-num26));
					Main.dust[num41].alpha = 200;
					Dust dust27 = Main.dust[num41];
					Dust dust212 = dust27;
					dust212.velocity *= new Vector2(0.3f, 2f);
					Main.dust[num41].velocity.Y += 2 * num26;
					dust27 = Main.dust[num41];
					dust212 = dust27;
					dust212.scale += Main.rand.NextFloat();
					Main.dust[num41].position = new Vector2(base.Center.X, base.Center.Y + (float)height * 0.5f * (float)(-num26));
					Main.dust[num41].customData = num27;
					if (num26 == -1 && Main.rand.Next(4) != 0)
					{
						Main.dust[num41].velocity.Y -= 0.2f;
					}
				}
			}
			int num42 = (int)(this.ai[1] / 60f * (float)height) * 3;
			if (num42 > height)
			{
				num42 = height;
			}
			Vector2 vector71 = base.position + (Vector2)((num26 == -1) ? new Vector2(0f, (float)(height - num42)) : Vector2.Zero);
			Vector2 vector72 = base.position + (Vector2)((num26 == -1) ? new Vector2(0f, (float)height) : Vector2.Zero);
			for (int num43 = 0; (float)num43 < 6f; num43++)
			{
				if (Main.rand.Next(3) < 2)
				{
					int num44 = Dust.NewDust(vector71, width, num42, 6, 0f, 0f, 90, default(Color), 2.5f);
					Main.dust[num44].noGravity = true;
					Main.dust[num44].fadeIn = 1f;
					if (Main.dust[num44].velocity.Y > 0f)
					{
						Main.dust[num44].velocity.Y *= -1f;
					}
					if (Main.rand.Next(6) < 3)
					{
						Main.dust[num44].position.Y = MathHelper.Lerp(Main.dust[num44].position.Y, vector72.Y, 0.5f);
						Dust dust29 = Main.dust[num44];
						Dust dust212 = dust29;
						dust212.velocity *= 5f;
						Main.dust[num44].velocity.Y -= 3f;
						Main.dust[num44].position.X = base.Center.X;
						Main.dust[num44].noGravity = false;
						Main.dust[num44].noLight = true;
						Main.dust[num44].fadeIn = 0.4f;
						dust29 = Main.dust[num44];
						dust212 = dust29;
						dust212.scale *= 0.3f;
					}
					else
					{
						Main.dust[num44].velocity = DirectionFrom(Main.dust[num44].position) * ((Vector2)(ref Main.dust[num44].velocity)).Length() * 0.25f;
					}
					Main.dust[num44].velocity.Y *= -num26;
					Main.dust[num44].customData = num27;
				}
			}
			for (int num45 = 0; (float)num45 < 6f; num45++)
			{
				if (!(Main.rand.NextFloat() < 0.5f))
				{
					int num46 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
					int num48 = Dust.NewDust(vector71, width, num42, num46, 0f, -2.5f * (float)(-num26));
					Main.dust[num48].alpha = 200;
					Dust dust32 = Main.dust[num48];
					Dust dust212 = dust32;
					dust212.velocity *= new Vector2(0.6f, 1.5f);
					dust32 = Main.dust[num48];
					dust212 = dust32;
					dust212.scale += Main.rand.NextFloat();
					if (num26 == -1 && Main.rand.Next(4) != 0)
					{
						Main.dust[num48].velocity.Y -= 0.2f;
					}
					Main.dust[num48].customData = num27;
				}
			}
		}
		else if (aiStyle == 127)
		{
			float num49 = 900f;
			if (type == 657)
			{
				num49 = 300f;
			}
			if (soundDelay == 0)
			{
				soundDelay = -1;
				SoundEngine.PlaySound(in SoundID.Item82, base.Center);
			}
			this.ai[0]++;
			if (this.ai[0] >= num49)
			{
				Kill();
			}
			if (type == 656 && localAI[0] >= 30f)
			{
				damage = 0;
				if (this.ai[0] < num49 - 120f)
				{
					float num50 = this.ai[0] % 60f;
					this.ai[0] = num49 - 120f + num50;
					netUpdate = true;
				}
			}
			float num51 = 15f;
			float num52 = 15f;
			Point point7 = base.Center.ToTileCoordinates();
			Collision.ExpandVertically(point7.X, point7.Y, out var topY, out var bottomY, (int)num51, (int)num52);
			topY++;
			bottomY--;
			Vector2 value13 = new Vector2((float)point7.X, (float)topY) * 16f + new Vector2(8f);
			Vector2 value14 = new Vector2((float)point7.X, (float)bottomY) * 16f + new Vector2(8f);
			Vector2 vector73 = Vector2.Lerp(value13, value14, 0.5f);
			Vector2 vector74 = default(Vector2);
			((Vector2)(ref vector74))._002Ector(0f, value14.Y - value13.Y);
			vector74.X = vector74.Y * 0.2f;
			width = (int)(vector74.X * 0.65f);
			height = (int)vector74.Y;
			base.Center = vector73;
			if (type == 656 && owner == Main.myPlayer)
			{
				bool flag68 = false;
				Vector2 center13 = Main.player[owner].Center;
				Vector2 top = Main.player[owner].Top;
				for (float num53 = 0f; num53 < 1f; num53 += 0.05f)
				{
					Vector2 position = Vector2.Lerp(value13, value14, num53);
					if (Collision.CanHitLine(position, 0, 0, center13, 0, 0) || Collision.CanHitLine(position, 0, 0, top, 0, 0))
					{
						flag68 = true;
						break;
					}
				}
				if (!flag68 && this.ai[0] < num49 - 120f)
				{
					float num54 = this.ai[0] % 60f;
					this.ai[0] = num49 - 120f + num54;
					netUpdate = true;
				}
			}
			if (!(this.ai[0] < num49 - 120f))
			{
				return;
			}
			Vector2 vector75 = default(Vector2);
			Vector2 vector76 = default(Vector2);
			for (int num55 = 0; num55 < 1; num55++)
			{
				float value15 = -0.5f;
				float value16 = 0.9f;
				float amount3 = Main.rand.NextFloat();
				((Vector2)(ref vector75))._002Ector(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()), MathHelper.Lerp(value15, value16, amount3));
				vector75.X *= MathHelper.Lerp(2.2f, 0.6f, amount3);
				vector75.X *= -1f;
				((Vector2)(ref vector76))._002Ector(6f, 10f);
				Vector2 vector77 = vector73 + vector74 * vector75 * 0.5f + vector76;
				Dust dust202 = Main.dust[Dust.NewDust(vector77, 0, 0, 269)];
				dust202.position = vector77;
				dust202.customData = vector73 + vector76;
				dust202.fadeIn = 1f;
				dust202.scale = 0.3f;
				if (vector75.X > -1.2f)
				{
					dust202.velocity.X = 1f + Main.rand.NextFloat();
				}
				dust202.velocity.Y = Main.rand.NextFloat() * -0.5f - 1f;
			}
		}
		else if (aiStyle == 128)
		{
			Color newColor4 = default(Color);
			((Color)(ref newColor4))._002Ector(255, 255, 255);
			if (soundDelay == 0)
			{
				soundDelay = -1;
				SoundEngine.PlaySound(in SoundID.Item60, base.Center);
			}
			if (localAI[1] < 30f)
			{
				Vector2 vector78 = default(Vector2);
				Vector2 vector80 = default(Vector2);
				for (int num56 = 0; num56 < 1; num56++)
				{
					float value17 = -0.5f;
					float value18 = 0.9f;
					float amount4 = Main.rand.NextFloat();
					((Vector2)(ref vector78))._002Ector(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()), MathHelper.Lerp(value17, value18, amount4));
					vector78.X *= MathHelper.Lerp(2.2f, 0.6f, amount4);
					vector78.X *= -1f;
					((Vector2)(ref vector80))._002Ector(2f, 10f);
					Vector2 vector81 = base.Center + new Vector2(60f, 200f) * vector78 * 0.5f + vector80;
					Dust dust203 = Main.dust[Dust.NewDust(vector81, 0, 0, 269)];
					dust203.position = vector81;
					dust203.customData = base.Center + vector80;
					dust203.fadeIn = 1f;
					dust203.scale = 0.3f;
					if (vector78.X > -1.2f)
					{
						dust203.velocity.X = 1f + Main.rand.NextFloat();
					}
					dust203.velocity.Y = Main.rand.NextFloat() * -0.5f - 1f;
				}
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 0.8f;
				direction = 1;
				Point point8 = base.Center.ToTileCoordinates();
				base.Center = new Vector2((float)(point8.X * 16 + 8), (float)(point8.Y * 16 + 8));
			}
			rotation = localAI[1] / 40f * ((float)Math.PI * 2f) * (float)direction;
			if (localAI[1] < 33f)
			{
				if (alpha > 0)
				{
					alpha -= 8;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (localAI[1] > 103f)
			{
				if (alpha < 255)
				{
					alpha += 16;
				}
				if (alpha > 255)
				{
					alpha = 255;
				}
			}
			if (alpha == 0)
			{
				Lighting.AddLight(base.Center, ((Color)(ref newColor4)).ToVector3() * 0.5f);
			}
			for (int num57 = 0; num57 < 2; num57++)
			{
				if (Main.rand.Next(10) == 0)
				{
					Vector2 unitY10 = Vector2.UnitY;
					double radians63 = (float)num57 * (float)Math.PI;
					val4 = default(Vector2);
					Vector2 spinningpoint76 = unitY10.RotatedBy(radians63, val4);
					double radians64 = rotation;
					val4 = default(Vector2);
					Vector2 vector82 = spinningpoint76.RotatedBy(radians64, val4);
					Dust dust204 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor4, 1.5f)];
					dust204.noGravity = true;
					dust204.noLight = true;
					dust204.scale = Opacity * localAI[0];
					dust204.position = base.Center;
					dust204.velocity = vector82 * 2.5f;
				}
			}
			for (int num59 = 0; num59 < 2; num59++)
			{
				if (Main.rand.Next(10) == 0)
				{
					Vector2 unitY11 = Vector2.UnitY;
					double radians65 = (float)num59 * (float)Math.PI;
					val4 = default(Vector2);
					Vector2 vector83 = unitY11.RotatedBy(radians65, val4);
					Dust dust206 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor4, 1.5f)];
					dust206.noGravity = true;
					dust206.noLight = true;
					dust206.scale = Opacity * localAI[0];
					dust206.position = base.Center;
					dust206.velocity = vector83 * 2.5f;
				}
			}
			if (localAI[1] < 33f || localAI[1] > 87f)
			{
				scale = Opacity / 2f * localAI[0];
			}
			velocity = Vector2.Zero;
			localAI[1]++;
			if (localAI[1] == 60f && owner == Main.myPlayer)
			{
				int num60 = 30;
				if (Main.expertMode)
				{
					num60 = 22;
				}
				NewProjectile(GetProjectileSource_FromThis(), base.Center, Vector2.Zero, 657, num60, 3f, owner);
			}
			if (localAI[1] >= 120f)
			{
				Kill();
			}
		}
		else if (aiStyle == 129)
		{
			float num61 = 10f;
			float num62 = 5f;
			float num63 = 40f;
			int num64 = 300;
			int num65 = 180;
			if (type == 659)
			{
				num64 = 420;
				num65 = 240;
				num61 = 3f;
				num62 = 7.5f;
				num63 = 1f;
				if (localAI[0] > 0f)
				{
					localAI[0]--;
				}
				if (localAI[0] == 0f && this.ai[0] < 0f && owner == Main.myPlayer)
				{
					localAI[0] = 5f;
					for (int num66 = 0; num66 < 200; num66++)
					{
						NPC nPC10 = Main.npc[num66];
						if (nPC10.CanBeChasedBy(this))
						{
							bool flag69 = this.ai[0] < 0f || Main.npc[(int)this.ai[0]].Distance(base.Center) > nPC10.Distance(base.Center);
							if ((flag69 & (nPC10.Distance(base.Center) < 400f)) && (Collision.CanHitLine(base.Center, 0, 0, nPC10.Center, 0, 0) || Collision.CanHitLine(base.Center, 0, 0, nPC10.Top, 0, 0)))
							{
								this.ai[0] = num66;
							}
						}
					}
					if (this.ai[0] >= 0f)
					{
						timeLeft = num64;
						netUpdate = true;
					}
				}
				if (timeLeft > 30 && alpha > 0)
				{
					alpha -= 12;
				}
				if (timeLeft > 30 && alpha < 128 && Collision.SolidCollision(base.position, width, height))
				{
					alpha = 128;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (++frameCounter > 4)
				{
					frameCounter = 0;
					if (++frame >= 4)
					{
						frame = 0;
					}
				}
				float num67 = 0.5f;
				if (timeLeft < 120)
				{
					num67 = 1.1f;
				}
				if (timeLeft < 60)
				{
					num67 = 1.6f;
				}
				this.ai[1]++;
				float num68 = this.ai[1] / 180f * ((float)Math.PI * 2f);
				for (float num70 = 0f; num70 < 3f; num70++)
				{
					if (Main.rand.Next(3) == 0)
					{
						Dust dust207 = Main.dust[Dust.NewDust(base.Center, 0, 0, 27, 0f, -2f)];
						Vector2 center28 = base.Center;
						Vector2 unitY12 = Vector2.UnitY;
						double radians66 = num70 * ((float)Math.PI * 2f) / 3f + this.ai[1];
						val4 = default(Vector2);
						dust207.position = center28 + unitY12.RotatedBy(radians66, val4) * 10f;
						dust207.noGravity = true;
						dust207.velocity = DirectionFrom(dust207.position);
						dust207.scale = num67;
						dust207.fadeIn = 0.5f;
						dust207.alpha = 200;
					}
				}
			}
			if (timeLeft > 2 && Collision.SolidCollision(base.position, width, height))
			{
				timeLeft = 2;
			}
			int num71 = (int)this.ai[0];
			if (num71 >= 0 && Main.npc[num71].active)
			{
				if (Distance(Main.npc[num71].Center) > num63)
				{
					Vector2 vector84 = DirectionTo(Main.npc[num71].Center);
					if (vector84.HasNaNs())
					{
						vector84 = Vector2.UnitY;
					}
					velocity = (velocity * (num61 - 1f) + vector84 * num62) / num61;
				}
				return;
			}
			if (this.ai[0] == -1f && timeLeft > 5)
			{
				timeLeft = 5;
			}
			if (this.ai[0] == -2f && timeLeft > num65)
			{
				timeLeft = num65;
			}
			if (this.ai[0] >= 0f)
			{
				this.ai[0] = -1f;
				netUpdate = true;
			}
		}
		else if (aiStyle == 130)
		{
			AI_130_FlameBurstTower();
		}
		else if (aiStyle == 131)
		{
			AI_131_FlameBurstShot();
		}
		else if (aiStyle == 132)
		{
			if (localAI[1] == 0f)
			{
				if (localAI[0] == 0f)
				{
					SoundEngine.PlayTrackedSound(in SoundID.DD2_DefeatScene, base.Center);
				}
				if (localAI[0] == 105f)
				{
					for (int num72 = 0; num72 < 20; num72++)
					{
						float num73 = (float)num72 / 20f;
						Vector2 spinningpoint77 = new Vector2(Main.rand.NextFloat() * 10f, 0f);
						double radians67 = num73 * -(float)Math.PI + Main.rand.NextFloat() * 0.1f - 0.05f;
						val4 = default(Vector2);
						Vector2 vector85 = Utils.RotatedBy(spinningpoint77, radians67, val4);
						Gore gore7 = Gore.NewGoreDirect(base.Center + vector85 * 3f, vector85, Utils.SelectRandom<int>(Main.rand, 1027, 1028, 1029, 1030));
						if (gore7.velocity.Y > 0f)
						{
							Gore gore4 = gore7;
							Gore gore8 = gore4;
							gore8.velocity *= -0.5f;
						}
						if (gore7.velocity.Y < -5f)
						{
							gore7.velocity.Y *= 0.8f;
						}
						gore7.velocity.Y *= 1.1f;
						gore7.velocity.X *= 0.88f;
					}
				}
				if (!Main.dedServ)
				{
					if (!Filters.Scene["CrystalDestructionVortex"].IsActive())
					{
						FilterManager scene = Filters.Scene;
						val4 = default(Vector2);
						scene.Activate("CrystalDestructionVortex", val4);
					}
					if (!Filters.Scene["CrystalDestructionColor"].IsActive())
					{
						FilterManager scene2 = Filters.Scene;
						val4 = default(Vector2);
						scene2.Activate("CrystalDestructionColor", val4);
					}
					float num74 = Math.Min(1f, localAI[0] / 120f);
					Filters.Scene["CrystalDestructionColor"].GetShader().UseIntensity(num74);
					Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(num74 * 2f).UseProgress(0f)
						.UseTargetPosition(base.Center);
				}
				if (localAI[0] == 120f)
				{
					localAI[0] = 0f;
					localAI[1]++;
				}
			}
			else if (localAI[1] == 1f)
			{
				if (!Main.dedServ)
				{
					float num75 = localAI[0] / 300f;
					float num76 = Math.Min(1f, localAI[0] / 150f);
					velocity.Y = num76 * -0.25f;
					if (!Filters.Scene["CrystalDestructionVortex"].IsActive())
					{
						FilterManager scene3 = Filters.Scene;
						val4 = default(Vector2);
						scene3.Activate("CrystalDestructionVortex", val4);
					}
					if (!Filters.Scene["CrystalDestructionColor"].IsActive())
					{
						FilterManager scene4 = Filters.Scene;
						val4 = default(Vector2);
						scene4.Activate("CrystalDestructionColor", val4);
					}
					num76 = 1f;
					Filters.Scene["CrystalDestructionColor"].GetShader().UseIntensity(num76);
					Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(num76 * 2f).UseProgress(0f)
						.UseTargetPosition(base.Center);
				}
				if (localAI[0] == 300f)
				{
					localAI[0] = 0f;
					localAI[1]++;
				}
			}
			else if (localAI[1] == 2f)
			{
				float num77 = localAI[0] / 300f;
				if (Main.netMode != 2)
				{
					Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(2f).UseProgress(num77 * 30f);
				}
				velocity.Y -= 1f;
				if (localAI[0] == 60f)
				{
					localAI[0] = 0f;
					localAI[1]++;
				}
			}
			else if (localAI[1] == 3f)
			{
				if (!Main.dedServ)
				{
					Filters.Scene.Deactivate("CrystalDestructionVortex");
					Filters.Scene.Deactivate("CrystalDestructionColor");
				}
				Kill();
			}
			if (localAI[1] >= 1f)
			{
				Vector2 vector86 = default(Vector2);
				for (int num78 = 0; num78 < 1 + (int)(0f - velocity.Y); num78++)
				{
					if (Main.rand.Next(2) == 0)
					{
						float num79 = Main.rand.NextFloat() * (0f - velocity.Y);
						((Vector2)(ref vector86))._002Ector(Main.rand.NextFloat() * 0.1f - 0.05f, 0f);
						vector86.X += (float)Math.Sin((double)((base.position.Y + num79) * 0.01f) + 6.2831854820251465 * ((double)Main.rand.Next(3) / 3.0)) * 0.5f;
						vector86.X = MathHelper.Lerp(Main.rand.NextFloat() - 0.5f, vector86.X, MathHelper.Clamp(0f - velocity.Y, 0f, 1f));
						vector86.Y = 0.5f - Math.Abs(vector86.X);
						vector86 *= new Vector2(100f, 50f);
						vector86.Y += num79;
						Vector2 vector87 = base.Center + vector86;
						Dust dust208 = Dust.NewDustPerfect(vector87, 27, Vector2.Zero, 0, Color.White * 0.1f, 1.1f);
						dust208.velocity.Y = Main.rand.NextFloat() * 2f;
						dust208.fadeIn = 0.1f;
					}
				}
			}
			localAI[0]++;
		}
		else if (aiStyle == 133)
		{
			if (type == 673)
			{
				if (this.ai[0] == 70f)
				{
					SoundEngine.PlayTrackedSound(in SoundID.DD2_SkeletonSummoned, base.Center);
				}
				this.ai[0]++;
				float opacity = 0f;
				if (this.ai[0] < 20f)
				{
					opacity = Utils.GetLerpValue(0f, 20f, this.ai[0], clamped: true);
				}
				else if (this.ai[0] < 60f)
				{
					opacity = 1f;
				}
				else if (this.ai[0] < 80f)
				{
					opacity = Utils.GetLerpValue(80f, 60f, this.ai[0], clamped: true);
				}
				else
				{
					Kill();
				}
				Opacity = opacity;
				_ = owner;
				_ = Main.myPlayer;
			}
			if (type != 674)
			{
				return;
			}
			if (this.ai[0] == 0f)
			{
				SoundEngine.PlayTrackedSound(in SoundID.DD2_DarkMageHealImpact, base.Center);
			}
			this.ai[0]++;
			if (!(this.ai[0] >= 40f))
			{
				return;
			}
			for (int num81 = 0; num81 < 200; num81++)
			{
				NPC nPC11 = Main.npc[num81];
				if (nPC11.active && nPC11.damage >= 1 && nPC11.lifeMax >= 30 && !(Distance(nPC11.Center) > 1000f) && nPC11.type != 564 && nPC11.type != 565)
				{
					int num82 = 500;
					int num83 = nPC11.lifeMax - nPC11.life;
					if (num82 > num83)
					{
						num82 = num83;
					}
					if (num82 > 0)
					{
						NPC nPC5 = nPC11;
						NPC nPC20 = nPC5;
						nPC20.life += num82;
						nPC11.HealEffect(num82);
						nPC11.netUpdate = true;
					}
				}
			}
			Kill();
		}
		else if (aiStyle == 134)
		{
			AI_134_Ballista();
		}
		else if (aiStyle == 135)
		{
			AI_135_OgreStomp();
		}
		else if (aiStyle == 136)
		{
			AI_136_BetsyBreath();
		}
		else if (aiStyle == 137)
		{
			AI_137_LightningAura();
		}
		else if (aiStyle == 138)
		{
			AI_138_ExplosiveTrap();
		}
		else if (aiStyle == 139)
		{
			AI_139_ExplosiveTrapExplosion();
		}
		else if (aiStyle == 140)
		{
			AI_140_MonkStaffT1();
		}
		else if (aiStyle == 141)
		{
			AI_141_MonkStaffT1Explosion();
		}
		else if (aiStyle == 142)
		{
			AI_142_MonkStaffT2And3();
		}
		else if (aiStyle == 143)
		{
			AI_143_MonkStaffT2Ghast();
		}
		else if (aiStyle == 144)
		{
			AI_144_DD2Pet();
		}
		else if (aiStyle == 145)
		{
			AI_145_BookStaffStorm();
		}
		else if (aiStyle == 146)
		{
			AI_146_DD2Victory();
		}
		else if (aiStyle == 147)
		{
			AI_147_Celeb2Rocket();
		}
		else if (aiStyle == 148)
		{
			AI_148_StarSpawner();
		}
		else if (aiStyle == 149)
		{
			AI_149_GolfBall();
		}
		else if (aiStyle == 150)
		{
			AI_150_GolfClubHelper();
		}
		else if (aiStyle == 151)
		{
			AI_151_SuperStar();
		}
		else if (aiStyle == 152)
		{
			AI_152_SuperStarSlash();
		}
		else if (aiStyle == 153)
		{
			AI_153_ToiletPop();
		}
		else if (aiStyle == 154)
		{
			AI_154_VoidLens();
		}
		else if (aiStyle == 155)
		{
			AI_155_MysticSnakeCoil();
		}
		else if (aiStyle == 156)
		{
			AI_156_BatOfLight();
		}
		else if (aiStyle == 157)
		{
			AI_157_SharpTears();
		}
		else if (aiStyle == 158)
		{
			AI_158_BabyBird();
		}
		else if (aiStyle == 159)
		{
			AI_159_PaperAirplanes();
		}
		else if (aiStyle == 160)
		{
			AI_160_Kites();
		}
		else if (aiStyle == 161)
		{
			AI_161_RapierStabs();
		}
		else if (aiStyle == 162)
		{
			AI_162_TigerPounce();
		}
		else if (aiStyle == 163)
		{
			AI_163_Chum();
		}
		else if (aiStyle == 164)
		{
			AI_164_StormTigerGem();
		}
		else if (aiStyle == 165)
		{
			AI_165_Whip();
		}
		else if (aiStyle == 166)
		{
			AI_166_Dove();
		}
		else if (aiStyle == 167)
		{
			AI_167_SparkleGuitar();
		}
		else if (aiStyle == 168)
		{
			AI_168_FirstFractal();
		}
		else if (aiStyle == 169)
		{
			AI_169_Smolstars();
		}
		else if (aiStyle == 170)
		{
			AI_170_FairyGlowstick();
		}
		else if (aiStyle == 171)
		{
			AI_171_HallowBossRainbowStreak();
		}
		else if (aiStyle == 172)
		{
			AI_172_HallowBossRainbowPelletStorm();
		}
		else if (aiStyle == 173)
		{
			AI_173_HallowBossRainbowTrail();
		}
		else if (aiStyle == 174)
		{
			AI_174_MultisegmentPet();
		}
		else if (aiStyle == 175)
		{
			AI_175_TitaniumStormShards();
		}
		else if (aiStyle == 176)
		{
			AI_176_EdgyLightning();
		}
		else if (aiStyle == 177)
		{
			AI_177_IceWhipSlicer();
		}
		else if (aiStyle == 178)
		{
			AI_178_FireExplosion();
		}
		else if (aiStyle == 179)
		{
			AI_179_FairyQueenLance();
		}
		else if (aiStyle == 180)
		{
			AI_180_FairyQueenSunDance();
		}
		else if (aiStyle == 181)
		{
			AI_181_FairyQueenRangedItemShot();
		}
		else if (aiStyle == 182)
		{
			AI_182_FinalFractal();
		}
		else if (aiStyle == 183)
		{
			AI_183_ZoologistStrike();
		}
		else if (aiStyle == 184)
		{
			AI_184_BadTorchLuck();
		}
		else if (aiStyle == 185)
		{
			AI_185_LifeDrain();
		}
		else if (aiStyle == 186)
		{
			AI_186_PrincessWeapon();
		}
		else if (aiStyle == 187)
		{
			AI_187_ShadowHand();
		}
		else if (aiStyle == 188)
		{
			AI_188_LightsBane();
		}
		else if (aiStyle == 189)
		{
			AI_189_Volcano();
		}
		else if (aiStyle == 190)
		{
			AI_190_NightsEdge();
		}
		else if (aiStyle == 191)
		{
			AI_191_TrueNightsEdge();
		}
		else if (aiStyle == 192)
		{
			AI_192_JuminoAnimation();
		}
		else if (aiStyle == 193)
		{
			AI_193_Flamethrower();
		}
		else if (aiStyle == 194)
		{
			AI_194_HorsemanPumpkin();
		}
		else if (aiStyle == 195)
		{
			AI_195_JimsDrone();
		}
	}

	private void AI_195_JimsDrone()
	{
		//IL_02af: Unknown result type (might be due to invalid IL or missing references)
		//IL_0266: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0403: Unknown result type (might be due to invalid IL or missing references)
		//IL_0342: Unknown result type (might be due to invalid IL or missing references)
		//IL_0347: Unknown result type (might be due to invalid IL or missing references)
		//IL_034b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0350: Unknown result type (might be due to invalid IL or missing references)
		//IL_0357: Unknown result type (might be due to invalid IL or missing references)
		//IL_035c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0361: Unknown result type (might be due to invalid IL or missing references)
		//IL_0486: Unknown result type (might be due to invalid IL or missing references)
		//IL_048b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0495: Unknown result type (might be due to invalid IL or missing references)
		//IL_0465: Unknown result type (might be due to invalid IL or missing references)
		//IL_047b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0480: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_04de: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0503: Unknown result type (might be due to invalid IL or missing references)
		//IL_0507: Unknown result type (might be due to invalid IL or missing references)
		//IL_0511: Unknown result type (might be due to invalid IL or missing references)
		//IL_0513: Unknown result type (might be due to invalid IL or missing references)
		//IL_0630: Unknown result type (might be due to invalid IL or missing references)
		//IL_054e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0557: Unknown result type (might be due to invalid IL or missing references)
		//IL_055c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0575: Unknown result type (might be due to invalid IL or missing references)
		//IL_057a: Unknown result type (might be due to invalid IL or missing references)
		//IL_058e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0598: Unknown result type (might be due to invalid IL or missing references)
		//IL_059d: Unknown result type (might be due to invalid IL or missing references)
		//IL_059f: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_05db: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e1: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[owner];
		bool flag = false;
		if (player.dead)
		{
			flag = true;
		}
		if (owner == Main.myPlayer)
		{
			if (position.Y - (float)height <= (float)(16 * Main.offScreenRange / 2))
			{
				Kill();
				return;
			}
			if (player.HeldItem.type != 5451)
			{
				flag = true;
			}
			bool flag2 = player.gravDir == -1f;
			BitsByte bitsByte = (byte)0;
			Player.DirectionalInputSyncCache localInputCache = player.LocalInputCache;
			bitsByte[0] = localInputCache.controlLeft ^ flag2;
			bitsByte[1] = localInputCache.controlRight ^ flag2;
			bitsByte[2] = localInputCache.controlUp;
			bitsByte[3] = localInputCache.controlDown;
			float num = (int)(byte)bitsByte;
			if (ai[0] != num)
			{
				ai[0] = num;
				netUpdate = true;
			}
			Main.DroneCameraTracker.Track(this);
		}
		if (flag)
		{
			Kill();
			return;
		}
		BitsByte bitsByte2 = (byte)ai[0];
		rotation = ai[1];
		bool flag3 = bitsByte2[0];
		bool flag4 = bitsByte2[1];
		bool flag5 = bitsByte2[2];
		_ = bitsByte2[3];
		localAI[0] += 1f;
		if (!flag3 && !flag4)
		{
			localAI[0] = 0f;
		}
		bool flag6 = velocity.Y == 0f;
		int num3 = 0;
		if (!flag6)
		{
			num3 = 10;
		}
		if (flag5)
		{
			num3 = 100;
		}
		localAI[1] = MathHelper.Lerp(localAI[1], (float)num3, 0.2f);
		float num4 = Utils.Remap(localAI[0], 0f, 5f, 0f, 1f) * Utils.Remap(localAI[0], 5f, 15f, 1f, 0f);
		float num5 = Utils.Clamp(MathHelper.Max(Utils.Remap(localAI[1], 0f, 100f, 0f, 25f), num4 * 12f), 0f, 100f);
		ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[2]));
		if (activeSound == null && num5 != 0f)
		{
			localAI[2] = SoundEngine.PlayTrackedLoopedSound(in SoundID.JimsDrone, base.Center, new ProjectileAudioTracker(this).IsActiveAndInGame).ToFloat();
			activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[2]));
		}
		if (activeSound != null)
		{
			activeSound.Volume = num5;
			activeSound.Position = base.Center;
			activeSound.Pitch = Utils.Clamp(Utils.Remap(localAI[1], 0f, 100f, -1f, 1f) + num4, -1f, 1f);
		}
		float num6 = 0.15f;
		if (flag6)
		{
			rotation = MathHelper.WrapAngle(rotation) * 0.7f;
			velocity.X *= 0.97f;
			if (flag5)
			{
				Vector2 vector = (rotation - (float)Math.PI / 2f).ToRotationVector2();
				velocity += vector * 0.5f;
				num6 = 0.05f;
			}
		}
		else
		{
			float num7 = (float)Math.PI / 15f;
			num7 = Utils.Remap(localAI[0], 0f, 10f, num7 * 0.1f, num7);
			int num8 = flag4.ToInt() - flag3.ToInt();
			rotation += (float)num8 * num7;
			if (flag5)
			{
				Vector2 vector2 = (rotation - (float)Math.PI / 2f).ToRotationVector2();
				velocity.X *= 0.97f;
				velocity += vector2 * 0.5f;
			}
		}
		velocity.Y += num6;
		ai[1] = rotation;
		if (!flag5 && velocity.Y > 12f)
		{
			velocity.Y *= 0.95f;
		}
		if (((Vector2)(ref velocity)).Length() > 16f)
		{
			velocity *= 16f / ((Vector2)(ref velocity)).Length();
		}
		Lighting.AddLight(base.Center, Vector3.One * 0.3f);
		timeLeft = 2;
		if (!flag6)
		{
			Vector2 vector3 = position;
			float num9 = 0f;
			int num10 = 3;
			int num2 = 16 * num10;
			Vector2 vector4 = default(Vector2);
			for (int i = 0; i < num10; i++)
			{
				((Vector2)(ref vector4))._002Ector(0f, 16f);
				Vector2 vector5 = Collision.TileCollision(vector3 + vector4 * (float)i, vector4, width, height);
				num9 += vector5.Y;
				if (vector5 != vector4)
				{
					break;
				}
			}
			if (num9 != (float)num2)
			{
				for (int j = 0; j < 2; j++)
				{
					if (!(Main.rand.NextFloat() < 0.66f))
					{
						Vector2 val = vector3 + new Vector2(0f, num9) + new Vector2((float)width / 2f, (float)height);
						Vector2 value = Main.rand.NextVector2CircularEdge(2.5f, 1f) * 0.5f;
						if (value.Y > 0f)
						{
							value.Y *= -1f;
						}
						Dust.NewDustPerfect(val, (Main.rand.Next(2) == 0) ? 31 : 16, value, 127);
					}
				}
			}
		}
		if (Main.netMode == 2 && Main.player.IndexInRange(owner) && Main.player[owner].active)
		{
			RemoteClient.CheckSection(owner, position);
		}
	}

	public static void UseGasTrapInChest(int chestIndex, Chest theChest, int gasTrapIndex, int gasOffsetX, int gasOffsetY)
	{
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_0169: Unknown result type (might be due to invalid IL or missing references)
		if (Main.netMode == 1)
		{
			return;
		}
		bool flag = false;
		int num = -1;
		for (int i = 0; i < 40; i++)
		{
			Item item = theChest.item[i];
			if (item == null)
			{
				continue;
			}
			if (item.IsAir)
			{
				if (num == -1)
				{
					num = i;
				}
			}
			else if (item.type == 5356 && item.stack < item.maxStack)
			{
				flag = true;
				item.stack++;
				if (Main.netMode != 0)
				{
					NetMessage.SendData(32, -1, -1, null, chestIndex, i);
				}
				break;
			}
		}
		theChest.item[gasTrapIndex].stack--;
		if (theChest.item[gasTrapIndex].stack <= 0)
		{
			if (flag)
			{
				theChest.item[gasTrapIndex].TurnToAir();
			}
			else
			{
				flag = true;
				theChest.item[gasTrapIndex].ChangeItemType(5356);
			}
		}
		if (Main.netMode != 0)
		{
			NetMessage.SendData(32, -1, -1, null, chestIndex, gasTrapIndex);
		}
		if (!flag && num > -1)
		{
			flag = true;
			theChest.item[num].ChangeItemType(5356);
			if (Main.netMode != 0)
			{
				NetMessage.SendData(32, -1, -1, null, chestIndex, num);
			}
		}
		if (!flag)
		{
			Vector2 pos = default(Vector2);
			((Vector2)(ref pos))._002Ector((float)(theChest.x * 16 + gasOffsetX), (float)(theChest.y * 16 + gasOffsetY));
			Item.NewItem(new EntitySource_OverfullChest(theChest.x, theChest.y, theChest, "GasTrap"), pos, Vector2.One, 5356);
		}
	}

	private void AI_111_DryadsWard()
	{
		//IL_022b: Unknown result type (might be due to invalid IL or missing references)
		//IL_024b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0251: Unknown result type (might be due to invalid IL or missing references)
		//IL_0276: Unknown result type (might be due to invalid IL or missing references)
		//IL_027b: Unknown result type (might be due to invalid IL or missing references)
		//IL_027e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0283: Unknown result type (might be due to invalid IL or missing references)
		//IL_0288: Unknown result type (might be due to invalid IL or missing references)
		//IL_0359: Unknown result type (might be due to invalid IL or missing references)
		//IL_0379: Unknown result type (might be due to invalid IL or missing references)
		//IL_037f: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0415: Unknown result type (might be due to invalid IL or missing references)
		//IL_041f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0424: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03de: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_0462: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0593: Unknown result type (might be due to invalid IL or missing references)
		//IL_059c: Unknown result type (might be due to invalid IL or missing references)
		if (!Main.npc[(int)ai[1]].active || Main.npc[(int)ai[1]].type != 20 || Main.npc[(int)ai[1]].ai[0] != 14f)
		{
			Kill();
			return;
		}
		ai[0] += 1f;
		rotation += (float)Math.PI / 300f;
		scale = ai[0] / 100f;
		if (scale > 1f)
		{
			scale = 1f;
		}
		alpha = (int)(255f * (1f - scale));
		float num = 300f;
		if (ai[0] >= 100f)
		{
			num = MathHelper.Lerp(300f, 600f, (ai[0] - 100f) / 200f);
		}
		if (num > 600f)
		{
			num = 600f;
		}
		if (ai[0] >= 500f)
		{
			alpha = (int)MathHelper.Lerp(0f, 255f, (ai[0] - 500f) / 100f);
			num = MathHelper.Lerp(600f, 1200f, (ai[0] - 500f) / 100f);
			rotation += (float)Math.PI / 300f;
		}
		int num2 = 163;
		if (ai[2] == 1f)
		{
			float num3 = (float)Math.Sin(ai[0] % 120f * ((float)Math.PI * 2f) / 120f) * 0.5f + 0.5f;
			if (Main.rand.NextFloat() < num3)
			{
				num2 = 70;
			}
		}
		if (Main.rand.Next(4) == 0)
		{
			float num4 = num;
			Vector2 vector = default(Vector2);
			((Vector2)(ref vector))._002Ector((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
			float num5 = Main.rand.Next(3, 9);
			((Vector2)(ref vector)).Normalize();
			int num6 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num2, 0f, 0f, 100);
			Main.dust[num6].noGravity = true;
			Main.dust[num6].position = base.Center + vector * num4;
			if (Main.rand.Next(8) == 0)
			{
				Main.dust[num6].velocity = vector * (0f - num5) * 3f;
				Main.dust[num6].scale += 0.5f;
			}
			else
			{
				Main.dust[num6].velocity = vector * (0f - num5);
			}
		}
		if (Main.rand.Next(2) == 0)
		{
			Vector2 vector2 = default(Vector2);
			((Vector2)(ref vector2))._002Ector((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
			float num7 = Main.rand.Next(3, 9);
			((Vector2)(ref vector2)).Normalize();
			int num8 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num2, 0f, 0f, 100, default(Color), 1.5f);
			Main.dust[num8].noGravity = true;
			Main.dust[num8].position = base.Center + vector2 * 30f;
			if (Main.rand.Next(8) == 0)
			{
				Main.dust[num8].velocity = vector2 * (0f - num7) * 3f;
				Main.dust[num8].scale += 0.5f;
			}
			else
			{
				Main.dust[num8].velocity = vector2 * (0f - num7);
			}
		}
		if (ai[0] >= 30f && Main.netMode != 2)
		{
			Player player = Main.player[Main.myPlayer];
			if (player.active && !player.dead && Distance(player.Center) <= num && player.FindBuffIndex(165) == -1)
			{
				player.AddBuff(165, 120);
			}
		}
		if (ai[0] >= 30f && ai[0] % 10f == 0f && Main.netMode != 1)
		{
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.type != 488 && nPC.active && Distance(nPC.Center) <= num)
				{
					if (nPC.townNPC && (nPC.FindBuffIndex(165) == -1 || nPC.buffTime[nPC.FindBuffIndex(165)] <= 20))
					{
						nPC.AddBuff(165, 120);
					}
					else if (!nPC.friendly && nPC.lifeMax > 5 && !nPC.dontTakeDamage && (nPC.FindBuffIndex(186) == -1 || nPC.buffTime[nPC.FindBuffIndex(186)] <= 20) && (nPC.dryadBane || Collision.CanHit(base.Center, 1, 1, nPC.position, nPC.width, nPC.height)))
					{
						nPC.AddBuff(186, 120);
					}
				}
			}
		}
		if (ai[0] >= 570f)
		{
			Kill();
		}
	}

	public static bool GasTrapCheck(int x, int y, Player user)
	{
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		if (Main.netMode == 1)
		{
			return false;
		}
		int num = Chest.FindChest(x, y);
		if (num < 0)
		{
			return false;
		}
		Chest chest = Main.chest[num];
		int num2 = 16;
		int num3 = 16;
		bool flag = false;
		for (int i = 0; i < 40; i++)
		{
			ushort num4 = Main.tile[chest.x, chest.y].type;
			if (TileObjectData.CustomPlace(num4, 0))
			{
				TileObjectData tileData = TileObjectData.GetTileData(num4, 0);
				if (tileData != null)
				{
					int num5 = (int)Math.Ceiling((float)tileData.Width / 2f);
					int num6 = (int)Math.Ceiling((float)tileData.Width / 2f);
					num2 = num5 * 16;
					num3 = num6 * 16;
					if (num5 % 2 != 0)
					{
						num2 += 8;
					}
					if (num6 % 2 != 0)
					{
						num3 += 8;
					}
				}
			}
			if (chest.item[i] != null && chest.item[i].type == 5346)
			{
				UseGasTrapInChest(num, chest, i, num2, num3);
				flag = true;
				break;
			}
		}
		if (flag)
		{
			num3 -= 8;
			Vector2 val = default(Vector2);
			((Vector2)(ref val))._002Ector((float)(x * 16 + num2), (float)(y * 16 + num3));
			NewProjectile(user.GetProjectileSource_TileInteraction(x, y), val, Vector2.Zero, 1007, 10, 0f, Main.myPlayer);
		}
		return flag;
	}

	private void AI_194_HorsemanPumpkin()
	{
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_015a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		//IL_018b: Unknown result type (might be due to invalid IL or missing references)
		int num = (int)ai[0];
		Vector2 center = base.Center;
		if (Main.player.IndexInRange(num))
		{
			Player player = Main.player[num];
			if (player.active && !player.dead)
			{
				center = player.Center;
			}
		}
		Vector2 vector = center - base.Center;
		int num2 = 30;
		float num3 = 4f;
		float num4 = 5f;
		float num5 = 0.4f;
		float num6 = 0.4f;
		if (!(vector.Y < (float)num2) || !(vector.Y > (float)(-num2)))
		{
			float num7 = (float)Math.Sign(vector.Y) * num6;
			velocity.Y = Utils.Clamp(velocity.Y + num7, 0f - num4, num4);
		}
		velocity.X = Utils.Clamp(velocity.X + (float)Math.Sign(vector.X) * num5, 0f - num3, num3);
		rotation = velocity.ToRotation();
		spriteDirection = ((!(velocity.X < 0f)) ? 1 : (-1));
		if (timeLeft < 6)
		{
			Opacity -= 0.1f;
		}
		else
		{
			Opacity += 1f / 30f;
		}
		if (Main.rand.Next(3) != 0)
		{
			Dust dust = Dust.NewDustDirect(position, width, height, 6, velocity.X, velocity.Y);
			dust.scale = 0.6f;
			dust.fadeIn = 1.1f;
			dust.noGravity = true;
			dust.noLight = true;
		}
	}

	private void AI_193_Flamethrower()
	{
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0276: Unknown result type (might be due to invalid IL or missing references)
		//IL_027b: Unknown result type (might be due to invalid IL or missing references)
		//IL_027e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0283: Unknown result type (might be due to invalid IL or missing references)
		//IL_0285: Unknown result type (might be due to invalid IL or missing references)
		//IL_028a: Unknown result type (might be due to invalid IL or missing references)
		//IL_028f: Unknown result type (might be due to invalid IL or missing references)
		//IL_029d: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0312: Unknown result type (might be due to invalid IL or missing references)
		//IL_0314: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0116: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01be: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0222: Unknown result type (might be due to invalid IL or missing references)
		//IL_0227: Unknown result type (might be due to invalid IL or missing references)
		//IL_022c: Unknown result type (might be due to invalid IL or missing references)
		localAI[0] += 1f;
		int num = 60;
		int num2 = 12;
		int num3 = num + num2;
		if (localAI[0] >= (float)num3)
		{
			Kill();
		}
		if (localAI[0] >= (float)num)
		{
			velocity *= 0.95f;
		}
		bool flag = ai[0] == 1f;
		int num4 = 50;
		int num5 = num4;
		if (flag)
		{
			num4 = 0;
			num5 = num;
		}
		if (localAI[0] < (float)num5 && Main.rand.NextFloat() < 0.25f)
		{
			short num6 = (short)(flag ? 135 : 6);
			Dust dust = Dust.NewDustDirect(base.Center + Main.rand.NextVector2Circular(60f, 60f) * Utils.Remap(localAI[0], 0f, 72f, 0.5f, 1f), 4, 4, num6, velocity.X * 0.2f, velocity.Y * 0.2f, 100);
			if (Main.rand.Next(4) == 0)
			{
				dust.noGravity = true;
				dust.scale *= 3f;
				dust.velocity.X *= 2f;
				dust.velocity.Y *= 2f;
			}
			else
			{
				dust.scale *= 1.5f;
			}
			dust.scale *= 1.5f;
			dust.velocity *= 1.2f;
			dust.velocity += velocity * 1f * Utils.Remap(localAI[0], 0f, (float)num * 0.75f, 1f, 0.1f) * Utils.Remap(localAI[0], 0f, (float)num * 0.1f, 0.1f, 1f);
			dust.customData = 1;
		}
		if (num4 > 0 && localAI[0] >= (float)num4 && Main.rand.NextFloat() < 0.5f)
		{
			Vector2 center = Main.player[owner].Center;
			Vector2 vector = (base.Center - center).SafeNormalize(Vector2.Zero).RotatedByRandom(0.19634954631328583) * 7f;
			short num7 = 31;
			Dust dust2 = Dust.NewDustDirect(base.Center + Main.rand.NextVector2Circular(50f, 50f) - vector * 2f, 4, 4, num7, 0f, 0f, 150, new Color(80, 80, 80));
			dust2.noGravity = true;
			dust2.velocity = vector;
			dust2.scale *= 1.1f + Main.rand.NextFloat() * 0.2f;
			dust2.customData = -0.3f - 0.15f * Main.rand.NextFloat();
		}
	}

	private void AI_047_MagnetSphere()
	{
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		if (ai[0] == 0f)
		{
			ai[0] = velocity.X;
			ai[1] = velocity.Y;
		}
		if (velocity.X > 0f)
		{
			rotation += (Math.Abs(velocity.Y) + Math.Abs(velocity.X)) * 0.001f;
		}
		else
		{
			rotation -= (Math.Abs(velocity.Y) + Math.Abs(velocity.X)) * 0.001f;
		}
		frameCounter++;
		if (frameCounter > 6)
		{
			frameCounter = 0;
			frame++;
			if (frame > 4)
			{
				frame = 0;
			}
		}
		if (((Vector2)(ref velocity)).Length() > 2f)
		{
			velocity *= 0.98f;
		}
		for (int i = 0; i < 1000; i++)
		{
			if (i != whoAmI)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.owner == owner && projectile.type == type && timeLeft > Main.projectile[i].timeLeft && Main.projectile[i].timeLeft > 30)
				{
					Main.projectile[i].timeLeft = 30;
				}
			}
		}
		AI_047_MagnetSphere_TryAttacking();
	}

	private void AI_047_MagnetSphere_TryAttacking()
	{
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0203: Unknown result type (might be due to invalid IL or missing references)
		//IL_020f: Unknown result type (might be due to invalid IL or missing references)
		//IL_024b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0252: Unknown result type (might be due to invalid IL or missing references)
		int[] array = new int[20];
		int num = 0;
		float num3 = 300f;
		bool flag = false;
		float num4 = 0f;
		float num5 = 0f;
		for (int i = 0; i < 200; i++)
		{
			if (!Main.npc[i].CanBeChasedBy(this))
			{
				continue;
			}
			float num6 = Main.npc[i].position.X + (float)(Main.npc[i].width / 2);
			float num7 = Main.npc[i].position.Y + (float)(Main.npc[i].height / 2);
			if (Math.Abs(position.X + (float)(width / 2) - num6) + Math.Abs(position.Y + (float)(height / 2) - num7) < num3 && Collision.CanHit(base.Center, 1, 1, Main.npc[i].Center, 1, 1))
			{
				if (num < 20)
				{
					array[num] = i;
					num++;
					num4 = num6;
					num5 = num7;
				}
				flag = true;
			}
		}
		if (timeLeft < 30)
		{
			flag = false;
		}
		if (flag)
		{
			int num8 = Main.rand.Next(num);
			num8 = array[num8];
			num4 = Main.npc[num8].position.X + (float)(Main.npc[num8].width / 2);
			num5 = Main.npc[num8].position.Y + (float)(Main.npc[num8].height / 2);
			localAI[0] += 1f;
			if (localAI[0] > 8f)
			{
				localAI[0] = 0f;
				Vector2 vector = default(Vector2);
				((Vector2)(ref vector))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				vector += velocity * 4f;
				float num9 = num4 - vector.X;
				float num10 = num5 - vector.Y;
				float num2 = (float)Math.Sqrt(num9 * num9 + num10 * num10);
				num2 = 6f / num2;
				num9 *= num2;
				num10 *= num2;
				NewProjectile(GetProjectileSource_FromThis(), vector.X, vector.Y, num9, num10, 255, damage, knockBack, owner);
			}
		}
	}

	public static void AI_192_GetJuminoFall(Projectile proj, out float timeSinceFall, out float fall)
	{
		int num = 420;
		timeSinceFall = proj.ai[0] - (float)num;
		if (timeSinceFall < 0f)
		{
			timeSinceFall = 0f;
		}
		int num2 = 24;
		int num3 = -4;
		float num4 = 0.2f;
		fall = (float)num3 * timeSinceFall + num4 * (timeSinceFall * timeSinceFall) / 2f;
		if (fall > (float)num2)
		{
			fall = num2;
		}
	}

	private void AI_192_JuminoAnimation()
	{
		//IL_016f: Unknown result type (might be due to invalid IL or missing references)
		//IL_017a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0626: Unknown result type (might be due to invalid IL or missing references)
		//IL_063e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0643: Unknown result type (might be due to invalid IL or missing references)
		//IL_0652: Unknown result type (might be due to invalid IL or missing references)
		//IL_0659: Unknown result type (might be due to invalid IL or missing references)
		//IL_065e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0663: Unknown result type (might be due to invalid IL or missing references)
		//IL_027a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0289: Unknown result type (might be due to invalid IL or missing references)
		//IL_028e: Unknown result type (might be due to invalid IL or missing references)
		//IL_029d: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02be: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0312: Unknown result type (might be due to invalid IL or missing references)
		//IL_0317: Unknown result type (might be due to invalid IL or missing references)
		//IL_0888: Unknown result type (might be due to invalid IL or missing references)
		//IL_0897: Unknown result type (might be due to invalid IL or missing references)
		//IL_089c: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_066d: Unknown result type (might be due to invalid IL or missing references)
		//IL_066f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0674: Unknown result type (might be due to invalid IL or missing references)
		//IL_067b: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_0464: Unknown result type (might be due to invalid IL or missing references)
		//IL_046e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0473: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04de: Unknown result type (might be due to invalid IL or missing references)
		//IL_07de: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0801: Unknown result type (might be due to invalid IL or missing references)
		//IL_0806: Unknown result type (might be due to invalid IL or missing references)
		//IL_080b: Unknown result type (might be due to invalid IL or missing references)
		//IL_080d: Unknown result type (might be due to invalid IL or missing references)
		//IL_080f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0814: Unknown result type (might be due to invalid IL or missing references)
		//IL_081b: Unknown result type (might be due to invalid IL or missing references)
		//IL_083f: Unknown result type (might be due to invalid IL or missing references)
		//IL_086a: Unknown result type (might be due to invalid IL or missing references)
		//IL_086f: Unknown result type (might be due to invalid IL or missing references)
		//IL_033d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0347: Unknown result type (might be due to invalid IL or missing references)
		//IL_034c: Unknown result type (might be due to invalid IL or missing references)
		//IL_038e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0394: Unknown result type (might be due to invalid IL or missing references)
		//IL_0396: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0709: Unknown result type (might be due to invalid IL or missing references)
		//IL_0718: Unknown result type (might be due to invalid IL or missing references)
		//IL_071d: Unknown result type (might be due to invalid IL or missing references)
		//IL_072c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0731: Unknown result type (might be due to invalid IL or missing references)
		//IL_0736: Unknown result type (might be due to invalid IL or missing references)
		//IL_0738: Unknown result type (might be due to invalid IL or missing references)
		//IL_073a: Unknown result type (might be due to invalid IL or missing references)
		//IL_073f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0746: Unknown result type (might be due to invalid IL or missing references)
		//IL_076a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0795: Unknown result type (might be due to invalid IL or missing references)
		//IL_079a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0536: Unknown result type (might be due to invalid IL or missing references)
		//IL_0540: Unknown result type (might be due to invalid IL or missing references)
		//IL_0545: Unknown result type (might be due to invalid IL or missing references)
		//IL_0575: Unknown result type (might be due to invalid IL or missing references)
		//IL_057b: Unknown result type (might be due to invalid IL or missing references)
		//IL_057d: Unknown result type (might be due to invalid IL or missing references)
		//IL_059e: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b6: Unknown result type (might be due to invalid IL or missing references)
		float num = 120f;
		float num8 = 420f + num;
		float num9 = num8 - 150f;
		if (Opacity > 0f && Opacity < 1f)
		{
			for (int i = 0; i < 1; i++)
			{
				Rectangle r = Utils.CenteredRectangle(base.Center + new Vector2(0f, 20f), new Vector2(32f, 32f));
				Dust dust = Dust.NewDustDirect(r.TopLeft(), r.Width, r.Height, 263, 0f, 0f, 100, new Color(80, 200, 255), 0.6f);
				dust.noGravity = true;
				dust.fadeIn = 0.9f;
				dust.velocity = new Vector2(0f, -0.3f);
			}
		}
		int num10 = 20;
		int num11 = 4;
		if (frame == 1)
		{
			num11 = 60;
		}
		AI_192_GetJuminoFall(this, out var timeSinceFall, out var fall);
		if (timeSinceFall > 0f)
		{
			if (fall < 20f)
			{
				frame = 0;
			}
			else if (++frameCounter >= num11)
			{
				frameCounter = 0;
				if (++frame >= num10)
				{
					frame = num10 - 1;
				}
			}
		}
		else
		{
			frame = 1;
		}
		float num12 = Main.player[owner].Center.X - base.Center.X;
		direction = (spriteDirection = ((num12 >= 0f) ? 1 : (-1)));
		int num13 = 30;
		float num14 = num8 + (float)(num10 * num11) + (float)num13;
		Opacity = Utils.Remap(ai[0], num9 + 0f, num9 + 20f, 0f, 1f) * Utils.Remap(ai[0], num14 - 5f, num14, 1f, 0.5f);
		ai[0] += 1f;
		if (ai[0] <= 130f && ai[0] >= 60f)
		{
			float num15 = Utils.Remap(ai[0], 60f, 130f, 0f, 1f);
			if (Main.rand.NextFloat() < num15 * 0.5f)
			{
				Rectangle r2 = Utils.CenteredRectangle(base.Center + new Vector2(0f, 0f), new Vector2(70f, 70f) * num15);
				Dust dust2 = Dust.NewDustDirect(r2.TopLeft(), r2.Width, r2.Height, 263, 0f, 0f, 100, new Color(80, 200, 255), 0.6f);
				dust2.noGravity = true;
				dust2.fadeIn = 0.9f;
				dust2.velocity = Main.rand.NextVector2Circular(2f, 2f);
			}
			for (float num2 = 0f; num2 < 1f; num2 += 0.5f)
			{
				if (Main.rand.NextFloat() < 0.5f)
				{
					Dust dust3 = Dust.NewDustPerfect(base.Center, 263, (-Vector2.UnitY).RotatedBy(((0f - num15) * (3f - num15 * 0.6f) + num2 + Main.rand.NextFloatDirection() * 0.05f * (1f - num15)) * ((float)Math.PI * 2f)) * (2f + Main.rand.NextFloat() + Main.rand.NextFloat() * 3f * num15), 30, new Color(80, 200, 255));
					dust3.noGravity = true;
					dust3.fadeIn = 1.1f;
				}
			}
		}
		if (ai[0] <= 60f)
		{
			float num3 = Utils.Remap(ai[0], 0f, 60f, 0f, 1f);
			for (float num4 = 0f; num4 < 1f; num4 += 0.5f)
			{
				if (Main.rand.NextFloat() < 0.5f)
				{
					Dust dust4 = Dust.NewDustPerfect(base.Center, 263, (-Vector2.UnitY).RotatedBy(((0f - num3) * 3f + num4 + Main.rand.NextFloatDirection() * 0.05f) * ((float)Math.PI * 2f)) * (2f * num3 + Main.rand.NextFloat() * num3), 100, new Color(80, 200, 255), 2f - num3);
					dust4.noGravity = true;
					dust4.fadeIn = 1.1f;
				}
			}
			if (ai[0] == 58f)
			{
				for (float num5 = 0f; num5 < 1f; num5 += 1f / 12f)
				{
					Dust dust5 = Dust.NewDustPerfect(base.Center, 263, (-Vector2.UnitY).RotatedBy(((0f - num3) * 2f + num5 + Main.rand.NextFloatDirection() * 0.05f) * ((float)Math.PI * 2f)) * (1f * num3 + Main.rand.NextFloat() * num3 * 2f), 100, new Color(80, 200, 255), 0.8f);
					dust5.noGravity = true;
					dust5.fadeIn = 1.2f;
				}
			}
		}
		if (ai[0] >= num14 - 20f)
		{
			float num6 = Utils.Remap(ai[0], num14 - 20f, num14, 0.25f, 1f);
			Rectangle r3 = Utils.CenteredRectangle(base.Center + new Vector2(0f, 30f + num6 * -20f), new Vector2(82f, 72f) * num6);
			for (int j = 0; j < 5; j++)
			{
				Dust dust6 = Dust.NewDustDirect(r3.TopLeft(), r3.Width, r3.Height, 263, 0f, num6 * -4f, 100, new Color(80, 200, 255) * 0.75f, 0.1f);
				dust6.noGravity = true;
				dust6.fadeIn = 0.6f + Main.rand.NextFloat() * 0.3f;
				dust6.velocity = new Vector2(0f, -0.3f);
			}
			for (int k = 0; k < 1; k++)
			{
				Rectangle r4 = Utils.CenteredRectangle(base.Center + new Vector2(0f, 40f), new Vector2(32f, 32f));
				Dust dust7 = Dust.NewDustDirect(r4.TopLeft(), r4.Width, r4.Height, 263, 0f, 0f, 100, new Color(80, 200, 255), 0.6f);
				dust7.noGravity = true;
				dust7.fadeIn = 0.9f;
				dust7.velocity = new Vector2(0f, -0.3f);
			}
		}
		if (Main.rand.Next(6) == 0 && ai[0] >= 90f && ai[0] < num8)
		{
			Rectangle r5 = Utils.CenteredRectangle(base.Center + new Vector2(0f, 0f), new Vector2(104f, 104f));
			Dust dust8 = Dust.NewDustDirect(r5.TopLeft(), r5.Width, r5.Height, 263, 0f, 0f, 100, new Color(80, 200, 255), 0.6f);
			dust8.noGravity = true;
			dust8.fadeIn = 0.9f;
			dust8.velocity = new Vector2(0f, -0.3f);
		}
		if (ai[0] >= num14)
		{
			int num7 = Item.NewItem(new EntitySource_Gift(this), base.Center + new Vector2(0f, 12f), Vector2.Zero, 5276);
			Main.item[num7].velocity = new Vector2(0f, 0f);
			Kill();
		}
	}

	private void AI_191_TrueNightsEdge()
	{
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_057b: Unknown result type (might be due to invalid IL or missing references)
		//IL_033f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0346: Unknown result type (might be due to invalid IL or missing references)
		//IL_034c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0351: Unknown result type (might be due to invalid IL or missing references)
		//IL_0357: Unknown result type (might be due to invalid IL or missing references)
		//IL_035e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0365: Unknown result type (might be due to invalid IL or missing references)
		//IL_036c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0371: Unknown result type (might be due to invalid IL or missing references)
		//IL_0405: Unknown result type (might be due to invalid IL or missing references)
		//IL_040c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0416: Unknown result type (might be due to invalid IL or missing references)
		//IL_0421: Unknown result type (might be due to invalid IL or missing references)
		//IL_0426: Unknown result type (might be due to invalid IL or missing references)
		//IL_042b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0217: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_07fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0812: Unknown result type (might be due to invalid IL or missing references)
		//IL_0836: Unknown result type (might be due to invalid IL or missing references)
		//IL_0841: Unknown result type (might be due to invalid IL or missing references)
		//IL_084b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0856: Unknown result type (might be due to invalid IL or missing references)
		//IL_085b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0862: Unknown result type (might be due to invalid IL or missing references)
		//IL_0647: Unknown result type (might be due to invalid IL or missing references)
		//IL_0651: Unknown result type (might be due to invalid IL or missing references)
		//IL_0656: Unknown result type (might be due to invalid IL or missing references)
		//IL_0665: Unknown result type (might be due to invalid IL or missing references)
		//IL_043a: Unknown result type (might be due to invalid IL or missing references)
		//IL_044f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0455: Unknown result type (might be due to invalid IL or missing references)
		//IL_0230: Unknown result type (might be due to invalid IL or missing references)
		//IL_0246: Unknown result type (might be due to invalid IL or missing references)
		//IL_024e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0258: Unknown result type (might be due to invalid IL or missing references)
		//IL_0263: Unknown result type (might be due to invalid IL or missing references)
		//IL_0268: Unknown result type (might be due to invalid IL or missing references)
		//IL_026d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0270: Unknown result type (might be due to invalid IL or missing references)
		//IL_0286: Unknown result type (might be due to invalid IL or missing references)
		//IL_028e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0299: Unknown result type (might be due to invalid IL or missing references)
		//IL_029e: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_047b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0480: Unknown result type (might be due to invalid IL or missing references)
		//IL_0485: Unknown result type (might be due to invalid IL or missing references)
		//IL_048a: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_088f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0891: Unknown result type (might be due to invalid IL or missing references)
		//IL_08af: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_08da: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_08fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0904: Unknown result type (might be due to invalid IL or missing references)
		//IL_0912: Unknown result type (might be due to invalid IL or missing references)
		//IL_0918: Unknown result type (might be due to invalid IL or missing references)
		//IL_0920: Unknown result type (might be due to invalid IL or missing references)
		//IL_094e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0955: Unknown result type (might be due to invalid IL or missing references)
		//IL_095f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0964: Unknown result type (might be due to invalid IL or missing references)
		//IL_0969: Unknown result type (might be due to invalid IL or missing references)
		//IL_0971: Unknown result type (might be due to invalid IL or missing references)
		//IL_0978: Unknown result type (might be due to invalid IL or missing references)
		//IL_0982: Unknown result type (might be due to invalid IL or missing references)
		//IL_0987: Unknown result type (might be due to invalid IL or missing references)
		//IL_098c: Unknown result type (might be due to invalid IL or missing references)
		//IL_09be: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_09cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_07af: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0780: Unknown result type (might be due to invalid IL or missing references)
		//IL_078a: Unknown result type (might be due to invalid IL or missing references)
		//IL_078f: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_06cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0706: Unknown result type (might be due to invalid IL or missing references)
		//IL_070d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0718: Unknown result type (might be due to invalid IL or missing references)
		//IL_071d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0722: Unknown result type (might be due to invalid IL or missing references)
		//IL_0726: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_04da: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a15: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a24: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a64: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a75: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a80: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a85: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aac: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b07: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b19: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b28: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b36: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b50: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b57: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b61: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b66: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b73: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b89: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b93: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b98: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b9d: Unknown result type (might be due to invalid IL or missing references)
		float num = 50f;
		float num9 = 15f;
		float num10 = ai[1] + num;
		float num11 = num10 + num9;
		float num12 = 77f;
		if (type == 985)
		{
			num = 0f;
			num10 = ai[1];
			num11 = ai[1] + 25f;
			num12 = num11;
		}
		if (localAI[0] == 0f && type == 973)
		{
			SoundEngine.PlaySound(in SoundID.Item8, base.position);
		}
		localAI[0] += 1f;
		if (type == 985 && localAI[1] == 1f)
		{
			localAI[0] += 2f;
		}
		if (type == 973 && damage == 0 && localAI[0] < MathHelper.Lerp(num10, num11, 0.5f))
		{
			localAI[0] += 6f;
		}
		Opacity = Utils.Remap(localAI[0], 0f, ai[1], 0f, 1f) * Utils.Remap(localAI[0], num10, num11, 1f, 0f);
		if (localAI[0] >= num11)
		{
			localAI[1] = 1f;
			Kill();
			return;
		}
		Player player = Main.player[owner];
		float fromValue = localAI[0] / ai[1];
		float num13 = Utils.Remap(localAI[0], ai[1] * 0.4f, num11, 0f, 1f);
		direction = (spriteDirection = (int)ai[0]);
		if (type == 973)
		{
			int num14 = 3;
			if (damage != 0 && localAI[0] >= num12 + (float)num14)
			{
				damage = 0;
			}
			if (damage != 0)
			{
				int num15 = 80;
				bool flag = false;
				float num16 = velocity.ToRotation();
				for (float num2 = -1f; num2 <= 1f; num2 += 0.5f)
				{
					Vector2 position = base.Center + (num16 + num2 * ((float)Math.PI / 4f) * 0.25f).ToRotationVector2() * (float)num15 * 0.5f * scale;
					Vector2 position2 = base.Center + (num16 + num2 * ((float)Math.PI / 4f) * 0.25f).ToRotationVector2() * (float)num15 * scale;
					if (!Collision.SolidTiles(base.Center, 0, 0) && Collision.CanHit(position, 0, 0, position2, 0, 0))
					{
						flag = true;
						break;
					}
				}
				if (!flag)
				{
					damage = 0;
				}
			}
			fromValue = localAI[0] / ai[1];
			localAI[1] += 1f;
			num13 = Utils.Remap(localAI[1], ai[1] * 0.4f, num11, 0f, 1f);
			base.Center = player.RotatedRelativePoint(player.MountedCenter) - velocity + velocity * num13 * num13 * num12;
			rotation += ai[0] * ((float)Math.PI * 2f) * (4f + Opacity * 4f) / 90f;
			scale = Utils.Remap(localAI[0], ai[1] + 2f, num11, 1.12f, 1f) * ai[2];
			float f = rotation + Main.rand.NextFloatDirection() * ((float)Math.PI / 2f) * 0.7f;
			Vector2 vector = base.Center + f.ToRotationVector2() * 84f * scale;
			if (Main.rand.Next(5) == 0)
			{
				Dust dust5 = Dust.NewDustPerfect(vector, 14, null, 150, default(Color), 1.4f);
				dust5.noLight = (dust5.noLightEmittence = true);
			}
			for (int i = 0; (float)i < 3f * Opacity; i++)
			{
				Vector2 vector2 = velocity.SafeNormalize(Vector2.UnitX);
				int num3 = ((Main.rand.NextFloat() < Opacity) ? 75 : 27);
				Dust dust6 = Dust.NewDustPerfect(vector, num3, velocity * 0.2f + vector2 * 3f, 100, default(Color), 1.4f);
				dust6.noGravity = true;
				dust6.customData = Opacity * 0.2f;
			}
		}
		if (type != 985)
		{
			return;
		}
		ownerHitCheck = localAI[0] <= 6f;
		if (localAI[0] >= MathHelper.Lerp(num10, num11, 0.65f))
		{
			damage = 0;
		}
		float fromValue2 = 1f - (1f - num13) * (1f - num13);
		rotation = velocity.ToRotation();
		scale = Utils.Remap(fromValue2, 0f, 1f, 1.5f, 1f) * ai[2];
		num13 = Utils.Remap(localAI[0], ai[1] / 2f, num11, 0f, 1f);
		Opacity = Utils.Remap(localAI[0], 0f, ai[1] * 0.5f, 0f, 1f) * Utils.Remap(localAI[0], num11 - 12f, num11, 1f, 0f);
		if (((Vector2)(ref velocity)).Length() > 8f)
		{
			velocity *= 0.94f;
			new Vector2(32f, 32f);
			float num4 = Utils.Remap(fromValue, 0.7f, 1f, 110f, 110f);
			if (localAI[1] == 0f)
			{
				bool flag2 = false;
				for (float num5 = -1f; num5 <= 1f; num5 += 0.5f)
				{
					Vector2 position4 = base.Center + (rotation + num5 * ((float)Math.PI / 4f) * 0.25f).ToRotationVector2() * num4 * 0.5f * scale;
					Vector2 position3 = base.Center + (rotation + num5 * ((float)Math.PI / 4f) * 0.25f).ToRotationVector2() * num4 * scale;
					if (Collision.CanHit(position4, 0, 0, position3, 0, 0))
					{
						flag2 = true;
						break;
					}
				}
				if (!flag2)
				{
					localAI[1] = 1f;
				}
			}
			if (localAI[1] == 1f && ((Vector2)(ref velocity)).Length() > 8f)
			{
				velocity *= 0.8f;
			}
			if (localAI[1] == 1f)
			{
				velocity *= 0.88f;
			}
		}
		float num6 = rotation + Main.rand.NextFloatDirection() * ((float)Math.PI / 2f) * 0.9f;
		Vector2 vector3 = base.Center + num6.ToRotationVector2() * 85f * scale;
		(num6 + ai[0] * ((float)Math.PI / 2f)).ToRotationVector2();
		Color value = default(Color);
		((Color)(ref value))._002Ector(64, 220, 96);
		Color value2 = default(Color);
		((Color)(ref value2))._002Ector(15, 84, 125);
		Lighting.AddLight(base.Center + rotation.ToRotationVector2() * 85f * scale, ((Color)(ref value)).ToVector3());
		for (int j = 0; j < 3; j++)
		{
			if (Main.rand.NextFloat() < Opacity + 0.1f)
			{
				Color.Lerp(Color.Lerp(Color.Lerp(value2, value, Utils.Remap(fromValue, 0f, 0.6f, 0f, 1f)), Color.White, Utils.Remap(fromValue, 0.6f, 0.8f, 0f, 0.5f)), Color.White, Main.rand.NextFloat() * 0.3f);
				Dust dust3 = Dust.NewDustPerfect(vector3, 107, velocity * 0.7f, 100, default(Color) * Opacity, 0.8f * Opacity);
				dust3.scale *= 0.7f;
				dust3.velocity += player.velocity * 0.1f;
				dust3.position -= dust3.velocity * 6f;
			}
		}
		if (damage == 0)
		{
			localAI[0] += 3f;
			velocity *= 0.76f;
		}
		if (localAI[0] < 10f && (localAI[1] == 1f || damage == 0))
		{
			localAI[0] += 1f;
			velocity *= 0.85f;
			for (int k = 0; k < 4; k++)
			{
				float num7 = Main.rand.NextFloatDirection();
				float num8 = 1f - Math.Abs(num7);
				num6 = rotation + num7 * ((float)Math.PI / 2f) * 0.9f;
				vector3 = base.Center + num6.ToRotationVector2() * 85f * scale;
				Color.Lerp(Color.Lerp(Color.Lerp(value2, value, Utils.Remap(fromValue, 0f, 0.6f, 0f, 1f)), Color.White, Utils.Remap(fromValue, 0.6f, 0.8f, 0f, 0.5f)), Color.White, Main.rand.NextFloat() * 0.3f);
				Dust dust4 = Dust.NewDustPerfect(vector3, 107, velocity.RotatedBy(num7 * ((float)Math.PI / 4f)) * 0.2f * Main.rand.NextFloat(), 100, default(Color), 1.4f * num8);
				dust4.velocity += player.velocity * 0.1f;
				dust4.position -= dust4.velocity * Main.rand.NextFloat() * 3f;
			}
		}
	}

	private void AI_190_NightsEdge()
	{
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_0129: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0134: Unknown result type (might be due to invalid IL or missing references)
		//IL_0327: Unknown result type (might be due to invalid IL or missing references)
		//IL_032e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0338: Unknown result type (might be due to invalid IL or missing references)
		//IL_0343: Unknown result type (might be due to invalid IL or missing references)
		//IL_0348: Unknown result type (might be due to invalid IL or missing references)
		//IL_034d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0360: Unknown result type (might be due to invalid IL or missing references)
		//IL_0365: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04de: Unknown result type (might be due to invalid IL or missing references)
		//IL_0383: Unknown result type (might be due to invalid IL or missing references)
		//IL_038a: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03da: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0227: Unknown result type (might be due to invalid IL or missing references)
		//IL_022e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0238: Unknown result type (might be due to invalid IL or missing references)
		//IL_0243: Unknown result type (might be due to invalid IL or missing references)
		//IL_0248: Unknown result type (might be due to invalid IL or missing references)
		//IL_024d: Unknown result type (might be due to invalid IL or missing references)
		//IL_059b: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0500: Unknown result type (might be due to invalid IL or missing references)
		//IL_0529: Unknown result type (might be due to invalid IL or missing references)
		//IL_052e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0534: Unknown result type (might be due to invalid IL or missing references)
		//IL_053b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0548: Unknown result type (might be due to invalid IL or missing references)
		//IL_054e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0438: Unknown result type (might be due to invalid IL or missing references)
		//IL_043c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0443: Unknown result type (might be due to invalid IL or missing references)
		//IL_044f: Unknown result type (might be due to invalid IL or missing references)
		//IL_045a: Unknown result type (might be due to invalid IL or missing references)
		//IL_025c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0271: Unknown result type (might be due to invalid IL or missing references)
		//IL_0277: Unknown result type (might be due to invalid IL or missing references)
		//IL_070f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0716: Unknown result type (might be due to invalid IL or missing references)
		//IL_0720: Unknown result type (might be due to invalid IL or missing references)
		//IL_072b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0730: Unknown result type (might be due to invalid IL or missing references)
		//IL_0735: Unknown result type (might be due to invalid IL or missing references)
		//IL_0748: Unknown result type (might be due to invalid IL or missing references)
		//IL_074d: Unknown result type (might be due to invalid IL or missing references)
		//IL_076d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0774: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0621: Unknown result type (might be due to invalid IL or missing references)
		//IL_0626: Unknown result type (might be due to invalid IL or missing references)
		//IL_0630: Unknown result type (might be due to invalid IL or missing references)
		//IL_0637: Unknown result type (might be due to invalid IL or missing references)
		//IL_0643: Unknown result type (might be due to invalid IL or missing references)
		//IL_0648: Unknown result type (might be due to invalid IL or missing references)
		//IL_065d: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02df: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0799: Unknown result type (might be due to invalid IL or missing references)
		//IL_079b: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_07bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_07bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0819: Unknown result type (might be due to invalid IL or missing references)
		//IL_081e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0828: Unknown result type (might be due to invalid IL or missing references)
		//IL_082f: Unknown result type (might be due to invalid IL or missing references)
		//IL_083b: Unknown result type (might be due to invalid IL or missing references)
		//IL_083d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0852: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_06aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_06bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0898: Unknown result type (might be due to invalid IL or missing references)
		//IL_089a: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_08bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_08dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_08fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0900: Unknown result type (might be due to invalid IL or missing references)
		//IL_0907: Unknown result type (might be due to invalid IL or missing references)
		//IL_0915: Unknown result type (might be due to invalid IL or missing references)
		//IL_091b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0923: Unknown result type (might be due to invalid IL or missing references)
		//IL_093e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0944: Unknown result type (might be due to invalid IL or missing references)
		//IL_094e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0953: Unknown result type (might be due to invalid IL or missing references)
		//IL_0958: Unknown result type (might be due to invalid IL or missing references)
		//IL_0960: Unknown result type (might be due to invalid IL or missing references)
		//IL_0971: Unknown result type (might be due to invalid IL or missing references)
		//IL_0976: Unknown result type (might be due to invalid IL or missing references)
		//IL_097b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0983: Unknown result type (might be due to invalid IL or missing references)
		//IL_098a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0994: Unknown result type (might be due to invalid IL or missing references)
		//IL_0999: Unknown result type (might be due to invalid IL or missing references)
		//IL_099e: Unknown result type (might be due to invalid IL or missing references)
		if (localAI[0] == 0f && type == 984)
		{
			SoundEffectInstance soundEffectInstance = SoundEngine.PlaySound((SoundStyle?)SoundID.Item60, (Vector2?)position);
			if (soundEffectInstance != null)
			{
				soundEffectInstance.Volume *= 0.65f;
			}
		}
		localAI[0] += 1f;
		Player player = Main.player[owner];
		float num = localAI[0] / ai[1];
		float num4 = ai[0];
		float num5 = velocity.ToRotation();
		float num6 = (float)Math.PI * num4 * num + num5 + num4 * (float)Math.PI + player.fullRotation;
		rotation = num6;
		float num7 = 0.2f;
		float num8 = 1f;
		switch (type)
		{
		case 982:
			num7 = 0.6f;
			break;
		case 997:
			num7 = 0.6f;
			break;
		case 983:
			num7 = 1f;
			num8 = 1.2f;
			break;
		case 984:
			num7 = 0.6f;
			break;
		}
		base.Center = player.RotatedRelativePoint(player.MountedCenter) - velocity;
		scale = num8 + num * num7;
		if (type == 972)
		{
			if (Math.Abs(num4) < 0.2f)
			{
				rotation += (float)Math.PI * 4f * num4 * 10f * num;
				float num9 = Utils.Remap(localAI[0], 10f, ai[1] - 5f, 0f, 1f);
				position += velocity.SafeNormalize(Vector2.Zero) * (45f * num9);
				scale += num9 * 0.4f;
			}
			if (Main.rand.Next(2) == 0)
			{
				float f = rotation + Main.rand.NextFloatDirection() * ((float)Math.PI / 2f) * 0.7f;
				Vector2 vector = base.Center + f.ToRotationVector2() * 84f * scale;
				if (Main.rand.Next(5) == 0)
				{
					Dust dust7 = Dust.NewDustPerfect(vector, 14, null, 150, default(Color), 1.4f);
					dust7.noLight = (dust7.noLightEmittence = true);
				}
				if (Main.rand.Next(2) == 0)
				{
					Dust.NewDustPerfect(vector, 27, (Vector2?)new Vector2(player.velocity.X * 0.2f + (float)(player.direction * 3), player.velocity.Y * 0.2f), 100, default(Color), 1.4f).noGravity = true;
				}
			}
		}
		if (type == 982)
		{
			float num10 = rotation + Main.rand.NextFloatDirection() * ((float)Math.PI / 2f) * 0.7f;
			Vector2 vector2 = base.Center + num10.ToRotationVector2() * 84f * scale;
			Vector2 vector3 = (num10 + ai[0] * ((float)Math.PI / 2f)).ToRotationVector2();
			if (Main.rand.NextFloat() * 2f < Opacity)
			{
				Dust dust8 = Dust.NewDustPerfect(base.Center + num10.ToRotationVector2() * (Main.rand.NextFloat() * 80f * scale + 20f * scale), 278, vector3 * 1f, 100, Color.Lerp(Color.Gold, Color.White, Main.rand.NextFloat() * 0.3f), 0.4f);
				dust8.fadeIn = 0.4f + Main.rand.NextFloat() * 0.15f;
				dust8.noGravity = true;
			}
			if (Main.rand.NextFloat() * 1.5f < Opacity)
			{
				Dust.NewDustPerfect(vector2, 43, vector3 * 1f, 100, Color.White * Opacity, 1.2f * Opacity);
			}
		}
		if (type == 997)
		{
			float num11 = rotation + Main.rand.NextFloatDirection() * ((float)Math.PI / 2f) * 0.7f;
			_ = base.Center + num11.ToRotationVector2() * 84f * scale;
			Vector2 vector4 = (num11 + ai[0] * ((float)Math.PI / 2f)).ToRotationVector2();
			if (Main.rand.NextFloat() * 2f < Opacity)
			{
				Dust dust9 = Dust.NewDustPerfect(base.Center + num11.ToRotationVector2() * (Main.rand.NextFloat() * 80f * scale + 20f * scale), 6, vector4 * 4f, 0, default(Color), 0.4f);
				dust9.noGravity = true;
				dust9.scale = 1.4f;
			}
		}
		if (type == 983)
		{
			float num2 = rotation + Main.rand.NextFloatDirection() * ((float)Math.PI / 2f) * 0.7f;
			Vector2 vector5 = base.Center + num2.ToRotationVector2() * 84f * scale;
			Vector2 vector6 = (num2 + ai[0] * ((float)Math.PI / 2f)).ToRotationVector2();
			if (Main.rand.NextFloat() < Opacity)
			{
				Dust dust10 = Dust.NewDustPerfect(base.Center + num2.ToRotationVector2() * (Main.rand.NextFloat() * 80f * scale + 20f * scale), 278, vector6 * 1f, 100, Color.Lerp(Color.HotPink, Color.White, Main.rand.NextFloat() * 0.3f), 0.4f);
				dust10.fadeIn = 0.4f + Main.rand.NextFloat() * 0.15f;
				dust10.noGravity = true;
			}
			if (Main.rand.NextFloat() * 1.5f < Opacity)
			{
				Dust.NewDustPerfect(vector5, 43, vector6 * 1f, 100, Color.White * Opacity, 1.2f * Opacity);
			}
		}
		if (type == 984)
		{
			float num3 = rotation + Main.rand.NextFloatDirection() * ((float)Math.PI / 2f) * 0.7f;
			Vector2 vector7 = base.Center + num3.ToRotationVector2() * 85f * scale;
			Vector2 vector8 = (num3 + ai[0] * ((float)Math.PI / 2f)).ToRotationVector2();
			Color value = default(Color);
			((Color)(ref value))._002Ector(64, 220, 96);
			Color value2 = default(Color);
			((Color)(ref value2))._002Ector(15, 84, 125);
			Lighting.AddLight(base.Center, ((Color)(ref value2)).ToVector3());
			if (Main.rand.NextFloat() * 2f < Opacity)
			{
				Color value3 = Color.Lerp(value2, value, Utils.Remap(num, 0f, 0.6f, 0f, 1f));
				value3 = Color.Lerp(value3, Color.White, Utils.Remap(num, 0.6f, 0.8f, 0f, 0.5f));
				Dust dust11 = Dust.NewDustPerfect(base.Center + num3.ToRotationVector2() * (Main.rand.NextFloat() * 80f * scale + 20f * scale), 278, vector8 * 1f, 100, Color.Lerp(value3, Color.White, Main.rand.NextFloat() * 0.3f), 0.4f);
				dust11.fadeIn = 0.4f + Main.rand.NextFloat() * 0.15f;
				dust11.noGravity = true;
			}
			if (Main.rand.NextFloat() < Opacity)
			{
				Color.Lerp(Color.Lerp(Color.Lerp(value2, value, Utils.Remap(num, 0f, 0.6f, 0f, 1f)), Color.White, Utils.Remap(num, 0.6f, 0.8f, 0f, 0.5f)), Color.White, Main.rand.NextFloat() * 0.3f);
				Dust dust6 = Dust.NewDustPerfect(vector7, 107, vector8 * 3f, 100, default(Color) * Opacity, 0.8f * Opacity);
				dust6.velocity += player.velocity * 0.1f;
				dust6.velocity += new Vector2((float)player.direction, 0f);
				dust6.position -= dust6.velocity * 6f;
			}
		}
		scale *= ai[2];
		if (localAI[0] >= ai[1])
		{
			Kill();
		}
	}

	private void AI_188_LightsBane()
	{
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_0153: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0165: Unknown result type (might be due to invalid IL or missing references)
		//IL_0174: Unknown result type (might be due to invalid IL or missing references)
		//IL_0187: Unknown result type (might be due to invalid IL or missing references)
		if (soundDelay == 0)
		{
			soundDelay = -1;
			SoundEffectInstance soundEffectInstance = SoundEngine.PlaySound((SoundStyle?)SoundID.Item60, (Vector2?)base.Center);
			if (soundEffectInstance != null)
			{
				soundEffectInstance.Volume *= 0.15f * ai[0];
			}
		}
		scale = ai[0];
		localAI[0] += 1f;
		if (++frameCounter >= 3)
		{
			frameCounter = 0;
			if (++frame >= 12)
			{
				Kill();
				return;
			}
		}
		rotation = velocity.ToRotation();
		float f = rotation;
		float num = 46f * scale;
		Vector2 vector = f.ToRotationVector2();
		float num2 = localAI[0] / 36f * 4f;
		if (num2 >= 0f && num2 <= 1f)
		{
			Dust dust = Dust.NewDustPerfect(Vector2.Lerp(base.Center - vector * num, base.Center + vector * num, localAI[0] / 36f), 278, vector.RotatedBy((float)Math.PI * 2f * Main.rand.NextFloatDirection() * 0.02f) * 8f * Main.rand.NextFloat(), 0, new Color(60, 0, 150), 0.7f * num2);
			dust.noGravity = true;
			dust.noLight = (dust.noLightEmittence = true);
		}
	}

	private void AI_189_Volcano()
	{
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		//IL_014e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_0174: Unknown result type (might be due to invalid IL or missing references)
		//IL_017a: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_0361: Unknown result type (might be due to invalid IL or missing references)
		//IL_036d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0372: Unknown result type (might be due to invalid IL or missing references)
		//IL_0379: Unknown result type (might be due to invalid IL or missing references)
		//IL_0391: Unknown result type (might be due to invalid IL or missing references)
		//IL_0397: Unknown result type (might be due to invalid IL or missing references)
		//IL_0399: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_042e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0433: Unknown result type (might be due to invalid IL or missing references)
		//IL_0444: Unknown result type (might be due to invalid IL or missing references)
		//IL_044e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0453: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0201: Unknown result type (might be due to invalid IL or missing references)
		//IL_0206: Unknown result type (might be due to invalid IL or missing references)
		//IL_020e: Unknown result type (might be due to invalid IL or missing references)
		//IL_022c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0232: Unknown result type (might be due to invalid IL or missing references)
		//IL_0234: Unknown result type (might be due to invalid IL or missing references)
		//IL_024f: Unknown result type (might be due to invalid IL or missing references)
		//IL_025d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0263: Unknown result type (might be due to invalid IL or missing references)
		//IL_0282: Unknown result type (might be due to invalid IL or missing references)
		//IL_028c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0291: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04be: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0507: Unknown result type (might be due to invalid IL or missing references)
		//IL_0518: Unknown result type (might be due to invalid IL or missing references)
		//IL_051e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0537: Unknown result type (might be due to invalid IL or missing references)
		//IL_0546: Unknown result type (might be due to invalid IL or missing references)
		//IL_054b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0550: Unknown result type (might be due to invalid IL or missing references)
		//IL_02af: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02da: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0300: Unknown result type (might be due to invalid IL or missing references)
		//IL_031b: Unknown result type (might be due to invalid IL or missing references)
		if (soundDelay == 0)
		{
			soundDelay = -1;
			SoundEngine.PlaySound(in SoundID.DD2_ExplosiveTrapExplode, base.Center);
		}
		alpha = (int)(255f * (1f - Utils.Remap(ai[0], 0f, 2f, 0f, 1f) * Utils.Remap(ai[0], 6f, 10f, 1f, 0f)));
		float num = width / 2;
		float num2 = height / 2;
		num = (num2 = 8f);
		scale = 1f + 1f * (ai[0] / 15f);
		if (++frameCounter >= 2)
		{
			frameCounter = 0;
			if (++frame >= 5)
			{
				Kill();
				return;
			}
		}
		ai[0] += 1f;
		if (ai[0] == 1f)
		{
			for (int i = 0; i < 20; i++)
			{
				int num3 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
				Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(num, num2), num3, velocity.RotatedBy(Main.rand.NextFloatDirection() * ((float)Math.PI / 4f) * 0.6f) * (2f + 5f * Main.rand.NextFloat()), 200, default(Color), 1f + Main.rand.NextFloat()).customData = 0;
			}
			int num4 = Main.rand.Next(3, 7);
			for (int j = 0; j < num4 * 5; j++)
			{
				Dust dust3 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(num, num2), 31, velocity.RotatedBy(Main.rand.NextFloatDirection() * ((float)Math.PI / 4f) * 0.6f) * (2f + 5f * Main.rand.NextFloat()), 50, default(Color), 1f + Main.rand.NextFloat());
				dust3.noGravity = true;
				dust3.velocity *= 3f;
			}
			for (int k = 0; k < num4; k++)
			{
				Gore.NewGorePerfect(base.Center + Main.rand.NextVector2Circular(num, num2) - new Vector2(16f, 16f), velocity.RotatedBy(Main.rand.NextFloatDirection() * ((float)Math.PI / 4f) * 0.6f) * (0f + 4f * Main.rand.NextFloat()), 61 + Main.rand.Next(3));
			}
		}
		for (int l = 0; l < 2; l++)
		{
			if (Main.rand.Next(3) < 2)
			{
				Dust dust2 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(num, num2), 6, velocity.RotatedBy(Main.rand.NextFloatDirection() * ((float)Math.PI / 4f)) * (1.5f + 2f * Main.rand.NextFloat()), 90, default(Color), 2.5f);
				dust2.noGravity = true;
				dust2.fadeIn = 1f;
				if (Main.rand.Next(6) < 3)
				{
					dust2.noGravity = false;
					dust2.noLight = true;
					dust2.fadeIn = 0.4f;
					dust2.scale *= 0.3f;
				}
				else
				{
					dust2.velocity = DirectionFrom(dust2.position) * ((Vector2)(ref dust2.velocity)).Length() * 0.25f;
				}
				dust2.customData = 0;
			}
		}
		for (int m = 0; m < 2; m++)
		{
			if (!(Main.rand.NextFloat() < 0.5f))
			{
				int num5 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
				Dust dust4 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(num, num2), num5, velocity.RotatedBy(Main.rand.NextFloatDirection() * ((float)Math.PI / 4f) * 0.5f) * (1f + 2f * Main.rand.NextFloat()), 200, default(Color), 1f + Main.rand.NextFloat());
				dust4.velocity *= new Vector2(0.6f, 1.5f);
				dust4.customData = 0;
			}
		}
	}

	private void AI_066_TryInterceptingTarget(Vector2 targetDir, Vector2 targetVelocity, float speed)
	{
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		float num = 5f;
		float num2 = 30f;
		float num3 = num2 + num;
		int num4 = 1;
		int num5 = 4;
		int num6 = 2;
		bool flag = false;
		if (type == 533)
		{
			num4 = 2;
		}
		if (type == 388)
		{
			num4 = 2;
			num2 = 40f;
		}
		targetVelocity /= (float)num4;
		for (float num7 = 1f; num7 <= 1.5f; num7 += 0.1f)
		{
			Utils.ChaseResults chaseResults = Utils.GetChaseResults(base.Center, speed, targetDir, targetVelocity);
			if (chaseResults.InterceptionHappens && chaseResults.InterceptionTime <= num3)
			{
				velocity = chaseResults.ChaserVelocity;
				if (flag)
				{
					int num8 = (int)Utils.Clamp((float)Math.Ceiling(chaseResults.InterceptionTime) + (float)num6, num5, num2 - 1f) / num4;
					float num9 = num2 / (float)num4 - (float)num8;
					ai[1] += num9 * (float)num4;
				}
				break;
			}
		}
	}

	public static void RandomizeInsanityShadowFor(Entity targetEntity, bool isHostile, out Vector2 spawnposition, out Vector2 spawnvelocity, out float ai0, out float ai1)
	{
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_0189: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Unknown result type (might be due to invalid IL or missing references)
		//IL_0196: Unknown result type (might be due to invalid IL or missing references)
		//IL_019b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0135: Unknown result type (might be due to invalid IL or missing references)
		//IL_013a: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		//IL_015a: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0205: Unknown result type (might be due to invalid IL or missing references)
		//IL_020b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0212: Unknown result type (might be due to invalid IL or missing references)
		//IL_0217: Unknown result type (might be due to invalid IL or missing references)
		//IL_021c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0221: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_022e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0233: Unknown result type (might be due to invalid IL or missing references)
		//IL_023c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0241: Unknown result type (might be due to invalid IL or missing references)
		//IL_0243: Unknown result type (might be due to invalid IL or missing references)
		//IL_0248: Unknown result type (might be due to invalid IL or missing references)
		//IL_024d: Unknown result type (might be due to invalid IL or missing references)
		//IL_025a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0260: Unknown result type (might be due to invalid IL or missing references)
		//IL_0262: Unknown result type (might be due to invalid IL or missing references)
		//IL_0267: Unknown result type (might be due to invalid IL or missing references)
		//IL_0277: Unknown result type (might be due to invalid IL or missing references)
		//IL_0279: Unknown result type (might be due to invalid IL or missing references)
		int num = Main.rand.Next(2) * 2 - 1;
		int num10 = Main.rand.Next(4);
		float num3 = (isHostile ? 200f : 100f);
		float num4 = (isHostile ? 30 : 20);
		float num5 = (isHostile ? 30 : 0);
		float num6 = Main.rand.NextFloatDirection() * (float)Math.PI * 0.125f;
		if (isHostile && targetEntity.velocity.X * (float)num > 0f)
		{
			num *= -1;
		}
		if (num10 == 0 && isHostile)
		{
			num4 += 10f;
		}
		spawnposition = targetEntity.Center + targetEntity.velocity * num5 + Utils.RotatedBy(new Vector2((float)num * (0f - num3), 0f), num6);
		spawnvelocity = Utils.RotatedBy(new Vector2((float)num * num3 / num4, 0f), num6);
		ai0 = 0f;
		ai1 = 0f;
		if (num10 == 1)
		{
			float num7 = (float)Math.PI * 2f * Main.rand.NextFloat();
			spawnposition = targetEntity.Center - num7.ToRotationVector2() * (isHostile ? num3 : (num3 * 0.5f));
			ai0 = 180f;
			ai1 = num7 - (float)Math.PI / 2f;
			spawnvelocity = num7.ToRotationVector2() * (float)(isHostile ? 4 : 2);
		}
		if (num10 == 2)
		{
			float num8 = (float)Math.PI * 2f * Main.rand.NextFloat();
			spawnposition = targetEntity.Center - num8.ToRotationVector2() * num3;
			ai0 = 300f;
			ai1 = num8;
			spawnvelocity = num8.ToRotationVector2() * (float)(isHostile ? 4 : 2);
		}
		if (num10 == 3)
		{
			float f = (float)Math.PI * 2f * Main.rand.NextFloat();
			float num9 = (isHostile ? 60 : 30);
			float num2 = (float)Math.PI / 2f / num9 * Main.rand.NextFloatDirection();
			spawnposition = targetEntity.Center + targetEntity.velocity * num9;
			Vector2 vector = f.ToRotationVector2() * (float)(isHostile ? 8 : 3);
			for (int i = 0; (float)i < num9; i++)
			{
				spawnposition -= vector;
				vector = vector.RotatedBy(0f - num2);
			}
			spawnvelocity = vector;
			ai0 = 390f;
			ai1 = num2;
		}
	}

	private void AI_187_ShadowHand()
	{
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0341: Unknown result type (might be due to invalid IL or missing references)
		//IL_0348: Unknown result type (might be due to invalid IL or missing references)
		//IL_034d: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_037b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01db: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_019e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fa: Unknown result type (might be due to invalid IL or missing references)
		AI_187_ShadowHand_GetVariation(out var variation, out var fakeCounter, out var counterMax);
		float fromValue = fakeCounter / counterMax;
		if (fakeCounter == 0f)
		{
			localAI[1] = SoundEngine.PlayTrackedSound(in SoundID.DD2_GhastlyGlaiveImpactGhost, base.Center).ToFloat();
		}
		ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
		if (activeSound == null)
		{
			localAI[1] = SlotId.Invalid.ToFloat();
		}
		else
		{
			activeSound.Position = base.Center;
		}
		float num = counterMax - 15f;
		if (fakeCounter > num)
		{
			alpha += 25;
			if (alpha > 255)
			{
				alpha = 255;
			}
		}
		else
		{
			alpha -= 25;
			if (alpha < 50)
			{
				alpha = 50;
			}
		}
		if (fakeCounter >= counterMax - 1f)
		{
			Kill();
			return;
		}
		if (variation == 0)
		{
			velocity *= 0.98f;
			direction = (spriteDirection = ((velocity.X > 0f) ? 1 : (-1)));
			rotation = velocity.ToRotation();
			if (spriteDirection == -1)
			{
				rotation += (float)Math.PI;
			}
		}
		if (variation == 1)
		{
			float num2 = 70f;
			direction = (spriteDirection = ((velocity.X > 0f) ? 1 : (-1)));
			if (((Vector2)(ref velocity)).Length() > 0.1f)
			{
				velocity *= 0.95f;
			}
			num2 *= (float)direction;
			Vector2 vector = base.Center - rotation.ToRotationVector2() * num2;
			float num8 = Utils.Remap(fromValue, 0.3f, 0.5f, 0f, 1f) * Utils.Remap(fromValue, 0.45f, 0.5f, 1f, 0f);
			float num3 = Utils.Remap(fromValue, 0.5f, 0.55f, 0f, 1f) * Utils.Remap(fromValue, 0.5f, 1f, 1f, 0f);
			float num4 = num8 * (float)Math.PI * 1f / 60f;
			num4 += num3 * -(float)Math.PI * 8f / 60f;
			rotation += num4 * (float)(-direction);
			rotation = MathHelper.WrapAngle(rotation);
			base.Center = vector + rotation.ToRotationVector2() * num2;
		}
		if (variation == 2)
		{
			float f = ai[1];
			float num9 = Utils.Remap(fromValue, 0f, 0.4f, 1f, 0f);
			float num5 = Utils.Remap(fromValue, 0.3f, 0.4f, 0f, 1f) * Utils.Remap(fromValue, 0.4f, 1f, 1f, 0f);
			float num6 = num9 * 2f + num5 * 8f + 0.01f;
			velocity = f.ToRotationVector2() * num6;
			direction = (spriteDirection = ((velocity.X > 0f) ? 1 : (-1)));
			rotation = velocity.ToRotation();
			if (spriteDirection == -1)
			{
				rotation += (float)Math.PI;
			}
		}
		if (variation == 3)
		{
			float num7 = ai[1];
			velocity = velocity.RotatedBy(num7);
			direction = (spriteDirection = ((velocity.X > 0f) ? 1 : (-1)));
			rotation = velocity.ToRotation();
			if (spriteDirection == -1)
			{
				rotation += (float)Math.PI;
			}
		}
		ai[0] += 1f;
	}

	private void AI_187_ShadowHand_GetVariation(out int variation, out float fakeCounter, out float counterMax)
	{
		fakeCounter = ai[0];
		variation = 0;
		float num = 0f;
		float num2 = (counterMax = 180f);
		if (fakeCounter >= num && fakeCounter < num2)
		{
			variation = 0;
			counterMax = num2;
			return;
		}
		num = num2;
		num2 += 120f;
		if (fakeCounter >= num && fakeCounter < num2)
		{
			variation = 1;
			fakeCounter -= num;
			counterMax = num2 - num;
			return;
		}
		num = num2;
		num2 += 90f;
		if (fakeCounter >= num && fakeCounter < num2)
		{
			variation = 2;
			fakeCounter -= num;
			counterMax = num2 - num;
		}
		num = num2;
		num2 += 90f;
		if (fakeCounter >= num && fakeCounter < num2)
		{
			variation = 3;
			fakeCounter -= num;
			counterMax = num2 - num;
		}
	}

	private void AI_185_LifeDrain()
	{
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		if (Main.myPlayer != owner || localAI[0] != 0f)
		{
			return;
		}
		Player player = Main.player[owner];
		bool flag = false;
		Rectangle hitbox;
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = Main.npc[i];
			if (nPC.active && !nPC.townNPC && !nPC.dontTakeDamage && !nPC.friendly)
			{
				hitbox = base.Hitbox;
				if (((Rectangle)(ref hitbox)).Intersects(nPC.Hitbox))
				{
					flag = true;
					break;
				}
			}
		}
		if (!flag)
		{
			for (int j = 0; j < 255; j++)
			{
				Player player2 = Main.player[j];
				if (player2.active && player2.whoAmI != player.whoAmI && player2.hostile && !player2.immune && !player2.dead && player2.team != player.team)
				{
					hitbox = base.Hitbox;
					if (((Rectangle)(ref hitbox)).Intersects(player2.Hitbox))
					{
						flag = true;
						break;
					}
				}
			}
		}
		if (flag)
		{
			player.CheckMana(player.inventory[player.selectedItem], -1, pay: true);
			localAI[0] = 1f;
		}
	}

	private void AI_186_PrincessWeapon()
	{
		//IL_0155: Unknown result type (might be due to invalid IL or missing references)
		//IL_0160: Unknown result type (might be due to invalid IL or missing references)
		//IL_0165: Unknown result type (might be due to invalid IL or missing references)
		//IL_0198: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0203: Unknown result type (might be due to invalid IL or missing references)
		//IL_0208: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_021e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0234: Unknown result type (might be due to invalid IL or missing references)
		//IL_0236: Unknown result type (might be due to invalid IL or missing references)
		//IL_0287: Unknown result type (might be due to invalid IL or missing references)
		//IL_028f: Unknown result type (might be due to invalid IL or missing references)
		//IL_029c: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02de: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0308: Unknown result type (might be due to invalid IL or missing references)
		//IL_030d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0312: Unknown result type (might be due to invalid IL or missing references)
		//IL_039a: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03de: Unknown result type (might be due to invalid IL or missing references)
		//IL_03eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0406: Unknown result type (might be due to invalid IL or missing references)
		//IL_040b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0410: Unknown result type (might be due to invalid IL or missing references)
		//IL_0412: Unknown result type (might be due to invalid IL or missing references)
		//IL_0426: Unknown result type (might be due to invalid IL or missing references)
		//IL_043c: Unknown result type (might be due to invalid IL or missing references)
		//IL_043e: Unknown result type (might be due to invalid IL or missing references)
		//IL_048f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0497: Unknown result type (might be due to invalid IL or missing references)
		//IL_049e: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04da: Unknown result type (might be due to invalid IL or missing references)
		//IL_035f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0364: Unknown result type (might be due to invalid IL or missing references)
		//IL_0616: Unknown result type (might be due to invalid IL or missing references)
		//IL_0626: Unknown result type (might be due to invalid IL or missing references)
		//IL_062c: Unknown result type (might be due to invalid IL or missing references)
		//IL_062e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0633: Unknown result type (might be due to invalid IL or missing references)
		//IL_0635: Unknown result type (might be due to invalid IL or missing references)
		//IL_0641: Unknown result type (might be due to invalid IL or missing references)
		//IL_0648: Unknown result type (might be due to invalid IL or missing references)
		//IL_064d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0662: Unknown result type (might be due to invalid IL or missing references)
		//IL_0664: Unknown result type (might be due to invalid IL or missing references)
		//IL_066b: Unknown result type (might be due to invalid IL or missing references)
		//IL_066f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0674: Unknown result type (might be due to invalid IL or missing references)
		//IL_0697: Unknown result type (might be due to invalid IL or missing references)
		//IL_0699: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0563: Unknown result type (might be due to invalid IL or missing references)
		//IL_0581: Unknown result type (might be due to invalid IL or missing references)
		//IL_0587: Unknown result type (might be due to invalid IL or missing references)
		//IL_0589: Unknown result type (might be due to invalid IL or missing references)
		//IL_0598: Unknown result type (might be due to invalid IL or missing references)
		//IL_059d: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_05bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0527: Unknown result type (might be due to invalid IL or missing references)
		//IL_052c: Unknown result type (might be due to invalid IL or missing references)
		float num = 60f;
		ai[0] += 1f;
		if (ai[0] >= num)
		{
			Kill();
			return;
		}
		Opacity = Utils.Remap(ai[0], 0f, num, 1f, 0f);
		float num11 = ai[0] / num;
		float num12 = 1f - (1f - num11) * (1f - num11);
		float num13 = 1f - (1f - num12) * (1f - num12);
		float num18 = Utils.Remap(ai[0], num - 15f, num, 0f, 1f);
		float num14 = num18 * num18;
		float num15 = 1f - num14;
		scale = (0.4f + 0.6f * num13) * num15;
		float num16 = Utils.Remap(ai[0], 20f, num, 0f, 1f);
		float num17 = 1f - (1f - num16) * (1f - num16);
		float num2 = 1f - (1f - num17) * (1f - num17);
		localAI[0] = (0.4f + 0.6f * num2) * num15;
		int num3 = width / 2;
		Color newColor = Main.hslToRgb(0.92f, 1f, 0.5f) * Opacity;
		float num4 = 6f;
		float num5 = 2f;
		if (num11 < 0.9f)
		{
			for (int i = 0; i < 3; i++)
			{
				if (Main.rand.Next(2) == 0)
				{
					Vector2 val = Vector2.UnitX.RotatedBy(Main.rand.NextFloat() * ((float)Math.PI * 2f));
					Vector2 vector11 = val * ((float)num3 * scale);
					Vector2 vector12 = base.Center + vector11;
					Vector2 vector13 = val.RotatedBy(0.7853981852531433);
					vector12 += vector13 * num4;
					int num6 = Dust.NewDust(vector12, 0, 0, 267, 0f, 0f, 0, newColor);
					Main.dust[num6].position = vector12;
					Main.dust[num6].noGravity = true;
					Main.dust[num6].scale = 0.3f;
					Main.dust[num6].fadeIn = Main.rand.NextFloat() * 1.2f * scale;
					Main.dust[num6].velocity = vector13 * scale * (0f - num5);
					Main.dust[num6].scale *= scale;
					Dust obj = Main.dust[num6];
					obj.velocity += velocity * 0.5f;
					Dust obj2 = Main.dust[num6];
					obj2.position += Main.dust[num6].velocity * -5f;
					if (num6 != 6000)
					{
						Dust dust = Dust.CloneDust(num6);
						dust.scale /= 2f;
						dust.fadeIn *= 0.85f;
						dust.color = new Color(255, 255, 255, 255);
					}
				}
			}
		}
		if (num11 < 0.9f)
		{
			for (int j = 0; j < 3; j++)
			{
				if (Main.rand.Next(2) == 0)
				{
					Vector2 val2 = Vector2.UnitX.RotatedBy(Main.rand.NextFloat() * ((float)Math.PI * 2f));
					Vector2 vector14 = val2 * ((float)num3 * scale);
					Vector2 vector15 = base.Center + vector14;
					Vector2 vector16 = val2.RotatedBy(0.7853981852531433);
					vector15 += vector16 * (0f - num4);
					int num7 = Dust.NewDust(vector15, 0, 0, 267, 0f, 0f, 0, newColor);
					Main.dust[num7].position = vector15;
					Main.dust[num7].noGravity = true;
					Main.dust[num7].scale = 0.3f;
					Main.dust[num7].fadeIn = Main.rand.NextFloat() * 1.2f * scale;
					Main.dust[num7].velocity = vector16 * scale * num5;
					Main.dust[num7].scale *= scale;
					Main.dust[num7].velocity = velocity * 0.5f;
					if (num7 != 6000)
					{
						Dust dust2 = Dust.CloneDust(num7);
						dust2.scale /= 2f;
						dust2.fadeIn *= 0.85f;
						dust2.color = new Color(255, 255, 255, 255);
					}
				}
			}
		}
		if (num11 < 0.95f)
		{
			for (float num8 = 0f; num8 < 0.8f; num8 += 1f)
			{
				if (Main.rand.Next(4) == 0)
				{
					Vector2 vector17 = Vector2.UnitX.RotatedBy(Main.rand.NextFloat() * ((float)Math.PI * 2f) + (float)Math.PI / 2f) * ((float)num3 * scale);
					Vector2 positionInWorld = base.Center + vector17;
					ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.PrincessWeapon, new ParticleOrchestraSettings
					{
						PositionInWorld = positionInWorld,
						MovementVector = velocity
					}, owner);
				}
			}
		}
		if (ai[0] == num - 10f)
		{
			for (float num9 = 0f; num9 < 1f; num9 += 0.25f)
			{
				Vector2 vector10 = Vector2.UnitX.RotatedBy((float)Math.PI * 2f * num9);
				_ = vector10 * ((float)num3 * scale);
				Vector2 center = base.Center;
				float num10 = 1f;
				ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.PrincessWeapon, new ParticleOrchestraSettings
				{
					PositionInWorld = center,
					MovementVector = vector10 * num10
				}, owner);
				ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.PrincessWeapon, new ParticleOrchestraSettings
				{
					PositionInWorld = center,
					MovementVector = vector10 * num10 * 2f
				}, owner);
			}
		}
	}

	private void AI_184_BadTorchLuck()
	{
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0108: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_013c: Unknown result type (might be due to invalid IL or missing references)
		owner = 255;
		if (Main.player[Main.myPlayer].unlockedBiomeTorches)
		{
			damage = 0;
		}
		if (localAI[0] == 0f)
		{
			localAI[0] = 1f;
			SoundEngine.PlaySound(in SoundID.Item8, base.Center);
		}
		if (ai[1] > 0f)
		{
			ai[1] -= ((Vector2)(ref velocity)).Length();
		}
		else
		{
			tileCollide = true;
		}
		int num = (int)ai[0];
		float num2 = 4f;
		for (float num3 = 0f; num3 < num2; num3 += 1f)
		{
			int num4 = Dust.NewDust(position + velocity / num2 * num3, 4, 4, num, 0f, 0f, 100);
			if (Main.rand.Next(3) != 0)
			{
				Main.dust[num4].noGravity = true;
			}
			Dust obj = Main.dust[num4];
			obj.velocity *= 0.3f;
			if (num == 66)
			{
				Main.dust[num4].color = new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
				Main.dust[num4].noGravity = true;
			}
		}
	}

	private void AI_121_StardustDragon()
	{
		//IL_062c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0631: Unknown result type (might be due to invalid IL or missing references)
		//IL_0633: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		//IL_016f: Unknown result type (might be due to invalid IL or missing references)
		//IL_017e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0134: Unknown result type (might be due to invalid IL or missing references)
		//IL_0368: Unknown result type (might be due to invalid IL or missing references)
		//IL_036b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0370: Unknown result type (might be due to invalid IL or missing references)
		//IL_0375: Unknown result type (might be due to invalid IL or missing references)
		//IL_024e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0254: Unknown result type (might be due to invalid IL or missing references)
		//IL_0259: Unknown result type (might be due to invalid IL or missing references)
		//IL_025e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0260: Unknown result type (might be due to invalid IL or missing references)
		//IL_0274: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_08aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_08af: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_08bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_06eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0909: Unknown result type (might be due to invalid IL or missing references)
		//IL_090e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0938: Unknown result type (might be due to invalid IL or missing references)
		//IL_0942: Unknown result type (might be due to invalid IL or missing references)
		//IL_0944: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_08eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0826: Unknown result type (might be due to invalid IL or missing references)
		//IL_084a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0850: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0200: Unknown result type (might be due to invalid IL or missing references)
		//IL_0973: Unknown result type (might be due to invalid IL or missing references)
		//IL_0951: Unknown result type (might be due to invalid IL or missing references)
		//IL_0953: Unknown result type (might be due to invalid IL or missing references)
		//IL_0955: Unknown result type (might be due to invalid IL or missing references)
		//IL_095c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0963: Unknown result type (might be due to invalid IL or missing references)
		//IL_0968: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_02da: Unknown result type (might be due to invalid IL or missing references)
		//IL_02df: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0302: Unknown result type (might be due to invalid IL or missing references)
		//IL_0307: Unknown result type (might be due to invalid IL or missing references)
		//IL_0211: Unknown result type (might be due to invalid IL or missing references)
		//IL_045c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0466: Unknown result type (might be due to invalid IL or missing references)
		//IL_046b: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0404: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0346: Unknown result type (might be due to invalid IL or missing references)
		//IL_034b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0352: Unknown result type (might be due to invalid IL or missing references)
		//IL_0357: Unknown result type (might be due to invalid IL or missing references)
		//IL_0317: Unknown result type (might be due to invalid IL or missing references)
		//IL_0321: Unknown result type (might be due to invalid IL or missing references)
		//IL_0326: Unknown result type (might be due to invalid IL or missing references)
		//IL_042a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0432: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0537: Unknown result type (might be due to invalid IL or missing references)
		//IL_053c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0572: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cd: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[owner];
		if ((int)Main.timeForVisualEffects % 120 == 0)
		{
			netUpdate = true;
		}
		if (!player.active)
		{
			active = false;
			return;
		}
		bool num26 = type == 625;
		bool flag = type == 625 || type == 626 || type == 627 || type == 628;
		int num19 = 10;
		if (flag)
		{
			if (player.dead)
			{
				player.stardustDragon = false;
			}
			if (player.stardustDragon)
			{
				timeLeft = 2;
			}
			num19 = 30;
			if (Main.rand.Next(30) == 0)
			{
				int num21 = Dust.NewDust(position, width, height, 135, 0f, 0f, 0, default(Color), 2f);
				Main.dust[num21].noGravity = true;
				Main.dust[num21].fadeIn = 2f;
				Point point = Main.dust[num21].position.ToTileCoordinates();
				if (WorldGen.InWorld(point.X, point.Y, 5) && WorldGen.SolidTile(point.X, point.Y))
				{
					Main.dust[num21].noLight = true;
				}
			}
		}
		Vector2 center2;
		if (num26)
		{
			Vector2 center = player.Center;
			float num22 = 700f;
			float num23 = 1000f;
			int num24 = -1;
			if (Distance(center) > 2000f)
			{
				base.Center = center;
				netUpdate = true;
			}
			NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
			if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this) && Distance(ownerMinionAttackTargetNPC.Center) < num22 * 2f)
			{
				num24 = ownerMinionAttackTargetNPC.whoAmI;
				if (ownerMinionAttackTargetNPC.boss)
				{
					_ = ownerMinionAttackTargetNPC.whoAmI;
				}
				else
				{
					_ = ownerMinionAttackTargetNPC.whoAmI;
				}
			}
			if (num24 < 0)
			{
				for (int i = 0; i < 200; i++)
				{
					NPC nPC = Main.npc[i];
					if (nPC.CanBeChasedBy(this) && player.Distance(nPC.Center) < num23 && Distance(nPC.Center) < num22)
					{
						num24 = i;
						_ = nPC.boss;
					}
				}
			}
			if (num24 != -1)
			{
				NPC nPC2 = Main.npc[num24];
				Vector2 vector = nPC2.Center - base.Center;
				(vector.X > 0f).ToDirectionInt();
				(vector.Y > 0f).ToDirectionInt();
				float num25 = 0.4f;
				if (((Vector2)(ref vector)).Length() < 600f)
				{
					num25 = 0.6f;
				}
				if (((Vector2)(ref vector)).Length() < 300f)
				{
					num25 = 0.8f;
				}
				float num27 = ((Vector2)(ref vector)).Length();
				center2 = nPC2.Size;
				if (num27 > ((Vector2)(ref center2)).Length() * 0.75f)
				{
					velocity += Vector2.Normalize(vector) * num25 * 1.5f;
					if (Vector2.Dot(velocity, vector) < 0.25f)
					{
						velocity *= 0.8f;
					}
				}
				float num10 = 30f;
				if (((Vector2)(ref velocity)).Length() > num10)
				{
					velocity = Vector2.Normalize(velocity) * num10;
				}
			}
			else
			{
				float num11 = 0.2f;
				Vector2 vector2 = center - base.Center;
				if (((Vector2)(ref vector2)).Length() < 200f)
				{
					num11 = 0.12f;
				}
				if (((Vector2)(ref vector2)).Length() < 140f)
				{
					num11 = 0.06f;
				}
				if (((Vector2)(ref vector2)).Length() > 100f)
				{
					if (Math.Abs(center.X - base.Center.X) > 20f)
					{
						velocity.X += num11 * (float)Math.Sign(center.X - base.Center.X);
					}
					if (Math.Abs(center.Y - base.Center.Y) > 10f)
					{
						velocity.Y += num11 * (float)Math.Sign(center.Y - base.Center.Y);
					}
				}
				else if (((Vector2)(ref velocity)).Length() > 2f)
				{
					velocity *= 0.96f;
				}
				if (Math.Abs(velocity.Y) < 1f)
				{
					velocity.Y -= 0.1f;
				}
				float num12 = 15f;
				if (((Vector2)(ref velocity)).Length() > num12)
				{
					velocity = Vector2.Normalize(velocity) * num12;
				}
			}
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
			int num28 = direction;
			direction = (spriteDirection = ((velocity.X > 0f) ? 1 : (-1)));
			if (num28 != direction)
			{
				netUpdate = true;
			}
			float num13 = MathHelper.Clamp(localAI[0], 0f, 50f);
			position = base.Center;
			scale = 1f + num13 * 0.01f;
			width = (height = (int)((float)num19 * scale));
			base.Center = position;
			if (alpha > 0)
			{
				for (int j = 0; j < 2; j++)
				{
					int num14 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 135, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num14].noGravity = true;
					Main.dust[num14].noLight = true;
				}
				alpha -= 42;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
		}
		else
		{
			bool flag2 = false;
			Vector2 vector3 = Vector2.Zero;
			_ = Vector2.Zero;
			float num15 = 0f;
			float num16 = 0f;
			float num17 = 1f;
			if (ai[1] == 1f)
			{
				ai[1] = 0f;
				netUpdate = true;
			}
			int byUUID = GetByUUID(owner, (int)ai[0]);
			if (Main.projectile.IndexInRange(byUUID))
			{
				Projectile projectile = Main.projectile[byUUID];
				if (flag && projectile.active && (projectile.type == 625 || projectile.type == 626 || projectile.type == 627))
				{
					flag2 = true;
					vector3 = projectile.Center;
					_ = projectile.velocity;
					num15 = projectile.rotation;
					num17 = MathHelper.Clamp(projectile.scale, 0f, 50f);
					num16 = 16f;
					_ = projectile.alpha;
					projectile.localAI[0] = localAI[0] + 1f;
					if (projectile.type != 625)
					{
						projectile.localAI[1] = whoAmI;
					}
					if (owner == Main.myPlayer && type == 628 && projectile.type == 625)
					{
						projectile.Kill();
						Kill();
						return;
					}
				}
			}
			if (!flag2)
			{
				for (int k = 0; k < 1000; k++)
				{
					Projectile projectile2 = Main.projectile[k];
					if (projectile2.active && projectile2.owner == owner && ProjectileID.Sets.StardustDragon[projectile2.type] && projectile2.localAI[1] == ai[0])
					{
						ai[0] = projectile2.projUUID;
						projectile2.localAI[1] = whoAmI;
						netUpdate = true;
					}
				}
				return;
			}
			if (alpha > 0)
			{
				for (int l = 0; l < 2; l++)
				{
					int num18 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num18].noGravity = true;
					Main.dust[num18].noLight = true;
				}
			}
			alpha -= 42;
			if (alpha < 0)
			{
				alpha = 0;
			}
			velocity = Vector2.Zero;
			Vector2 vector4 = vector3 - base.Center;
			if (num15 != rotation)
			{
				float num20 = MathHelper.WrapAngle(num15 - rotation);
				Vector2 spinningpoint = vector4;
				double radians = num20 * 0.1f;
				center2 = default(Vector2);
				vector4 = spinningpoint.RotatedBy(radians, center2);
			}
			rotation = vector4.ToRotation() + (float)Math.PI / 2f;
			position = base.Center;
			scale = num17;
			width = (height = (int)((float)num19 * scale));
			base.Center = position;
			if (vector4 != Vector2.Zero)
			{
				base.Center = vector3 - Vector2.Normalize(vector4) * num16 * num17;
			}
			spriteDirection = ((vector4.X > 0f) ? 1 : (-1));
		}
		position.X = MathHelper.Clamp(position.X, 160f, (float)(Main.maxTilesX * 16 - 160));
		position.Y = MathHelper.Clamp(position.Y, 160f, (float)(Main.maxTilesY * 16 - 160));
	}

	private Projectile FindStardustDragonHeadOfOwner()
	{
		for (int i = 0; i < 1000; i++)
		{
			Projectile projectile = Main.projectile[i];
			if (projectile.active && projectile.owner == owner && projectile.type == 625)
			{
				return projectile;
			}
		}
		return null;
	}

	private void AI_183_ZoologistStrike()
	{
		velocity.X *= 0.2f;
		velocity.Y = 0f;
		spriteDirection = (direction = 1);
		if (velocity.X < 0f)
		{
			spriteDirection = (direction = -1);
		}
		frame++;
		if (frame >= Main.projFrames[type])
		{
			frame = Main.projFrames[type] - 1;
		}
	}

	private void AI_182_FinalFractal()
	{
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_015a: Unknown result type (might be due to invalid IL or missing references)
		//IL_015c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_0170: Unknown result type (might be due to invalid IL or missing references)
		//IL_017a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0180: Unknown result type (might be due to invalid IL or missing references)
		//IL_0182: Unknown result type (might be due to invalid IL or missing references)
		//IL_019c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01af: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0215: Unknown result type (might be due to invalid IL or missing references)
		//IL_021a: Unknown result type (might be due to invalid IL or missing references)
		//IL_021f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0237: Unknown result type (might be due to invalid IL or missing references)
		//IL_0239: Unknown result type (might be due to invalid IL or missing references)
		//IL_023b: Unknown result type (might be due to invalid IL or missing references)
		//IL_02eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0350: Unknown result type (might be due to invalid IL or missing references)
		//IL_0352: Unknown result type (might be due to invalid IL or missing references)
		//IL_035b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0379: Unknown result type (might be due to invalid IL or missing references)
		//IL_037e: Unknown result type (might be due to invalid IL or missing references)
		//IL_039e: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03db: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0400: Unknown result type (might be due to invalid IL or missing references)
		//IL_040a: Unknown result type (might be due to invalid IL or missing references)
		if (type == 933 && localAI[1] == 0f)
		{
			localAI[1] = 1f;
			SoundEngine.PlaySound(in SoundID.Item169, base.Center);
		}
		Player player = Main.player[owner];
		Vector2 mountedCenter = player.MountedCenter;
		float lerpValue = Utils.GetLerpValue(900f, 0f, ((Vector2)(ref velocity)).Length() * 2f, clamped: true);
		float num = MathHelper.Lerp(0.7f, 2f, lerpValue);
		localAI[0] += num;
		if (localAI[0] >= 120f)
		{
			Kill();
			return;
		}
		float lerpValue2 = Utils.GetLerpValue(0f, 1f, localAI[0] / 60f, clamped: true);
		float num11 = localAI[0] / 60f;
		float num4 = ai[0];
		float num5 = velocity.ToRotation();
		float num6 = (float)Math.PI;
		float num7 = ((velocity.X > 0f) ? 1 : (-1));
		float num8 = num6 + num7 * lerpValue2 * ((float)Math.PI * 2f);
		float num9 = ((Vector2)(ref velocity)).Length() + Utils.GetLerpValue(0.5f, 1f, lerpValue2, clamped: true) * 40f;
		float num10 = 60f;
		if (num9 < num10)
		{
			num9 = num10;
		}
		Vector2 val = mountedCenter + velocity;
		Vector2 spinningpoint = Utils.RotatedBy(new Vector2(1f, 0f), num8) * new Vector2(num9, num4 * MathHelper.Lerp(2f, 1f, lerpValue));
		Vector2 vector2 = val + spinningpoint.RotatedBy(num5);
		Vector2 vector3 = (1f - Utils.GetLerpValue(0f, 0.5f, lerpValue2, clamped: true)) * new Vector2((float)((velocity.X > 0f) ? 1 : (-1)) * (0f - num9) * 0.1f, (0f - ai[0]) * 0.3f);
		float num2 = num8 + num5;
		rotation = num2 + (float)Math.PI / 2f;
		base.Center = vector2 + vector3;
		spriteDirection = (direction = ((velocity.X > 0f) ? 1 : (-1)));
		if (num4 < 0f)
		{
			rotation = num6 + num7 * lerpValue2 * ((float)Math.PI * -2f) + num5;
			rotation += (float)Math.PI / 2f;
			spriteDirection = (direction = ((!(velocity.X > 0f)) ? 1 : (-1)));
		}
		if (num11 < 1f)
		{
			FinalFractalHelper.FinalFractalProfile finalFractalProfile = FinalFractalHelper.GetFinalFractalProfile((int)ai[1]);
			Vector2 vector4 = (rotation - (float)Math.PI / 2f).ToRotationVector2();
			Vector2 center = base.Center;
			int num3 = 1 + (int)(((Vector2)(ref velocity)).Length() / 100f);
			num3 = (int)((float)num3 * Utils.GetLerpValue(0f, 0.5f, lerpValue2, clamped: true) * Utils.GetLerpValue(1f, 0.5f, lerpValue2, clamped: true));
			if (num3 < 1)
			{
				num3 = 1;
			}
			for (int i = 0; i < num3; i++)
			{
				finalFractalProfile.dustMethod(center + vector4 * finalFractalProfile.trailWidth * MathHelper.Lerp(0.5f, 1f, Main.rand.NextFloat()), rotation - (float)Math.PI / 2f + (float)Math.PI / 2f * (float)spriteDirection, player.velocity);
			}
			Vector3 vector5 = ((Color)(ref finalFractalProfile.trailColor)).ToVector3();
			Vector3 vector6 = Vector3.Lerp(Vector3.One, vector5, 0.7f);
			Lighting.AddLight(base.Center, vector5 * 0.5f * Opacity);
			Lighting.AddLight(mountedCenter, vector6 * Opacity * 0.15f);
		}
		Opacity = Utils.GetLerpValue(0f, 5f, localAI[0], clamped: true) * Utils.GetLerpValue(120f, 115f, localAI[0], clamped: true);
	}

	private void AI_181_FairyQueenRangedItemShot()
	{
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		ai[0] += 1f;
		alpha = (int)MathHelper.Lerp(255f, 0f, Utils.GetLerpValue(0f, 10f, ai[0], clamped: true));
		rotation = velocity.ToRotation();
		if (Main.rand.Next(6) == 0)
		{
			Dust dust = Dust.NewDustPerfect(base.Center, 267);
			dust.fadeIn = 1f;
			dust.noGravity = true;
			dust.alpha = 100;
			dust.color = GetFairyQueenWeaponsColor(1f, Main.rand.NextFloat() * 0.4f);
			dust.noLightEmittence = true;
			dust.scale *= 1.5f;
		}
	}

	private void AI_009_MagicMissiles()
	{
		//IL_02ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0189: Unknown result type (might be due to invalid IL or missing references)
		//IL_018e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03de: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_025b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0260: Unknown result type (might be due to invalid IL or missing references)
		//IL_0265: Unknown result type (might be due to invalid IL or missing references)
		//IL_026c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0271: Unknown result type (might be due to invalid IL or missing references)
		//IL_0241: Unknown result type (might be due to invalid IL or missing references)
		//IL_0246: Unknown result type (might be due to invalid IL or missing references)
		//IL_024d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0252: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01da: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0402: Unknown result type (might be due to invalid IL or missing references)
		//IL_0407: Unknown result type (might be due to invalid IL or missing references)
		//IL_0409: Unknown result type (might be due to invalid IL or missing references)
		//IL_040b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0410: Unknown result type (might be due to invalid IL or missing references)
		//IL_0427: Unknown result type (might be due to invalid IL or missing references)
		//IL_042c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0347: Unknown result type (might be due to invalid IL or missing references)
		//IL_0354: Unknown result type (might be due to invalid IL or missing references)
		//IL_058a: Unknown result type (might be due to invalid IL or missing references)
		//IL_058f: Unknown result type (might be due to invalid IL or missing references)
		//IL_048e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0442: Unknown result type (might be due to invalid IL or missing references)
		//IL_0448: Unknown result type (might be due to invalid IL or missing references)
		//IL_044d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0452: Unknown result type (might be due to invalid IL or missing references)
		//IL_0462: Unknown result type (might be due to invalid IL or missing references)
		//IL_0468: Unknown result type (might be due to invalid IL or missing references)
		//IL_046a: Unknown result type (might be due to invalid IL or missing references)
		//IL_046f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0474: Unknown result type (might be due to invalid IL or missing references)
		//IL_047e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0483: Unknown result type (might be due to invalid IL or missing references)
		//IL_0488: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0542: Unknown result type (might be due to invalid IL or missing references)
		//IL_0548: Unknown result type (might be due to invalid IL or missing references)
		//IL_054d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0552: Unknown result type (might be due to invalid IL or missing references)
		//IL_0559: Unknown result type (might be due to invalid IL or missing references)
		//IL_0563: Unknown result type (might be due to invalid IL or missing references)
		//IL_0568: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_05fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0601: Unknown result type (might be due to invalid IL or missing references)
		//IL_0606: Unknown result type (might be due to invalid IL or missing references)
		//IL_0865: Unknown result type (might be due to invalid IL or missing references)
		//IL_086a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0871: Unknown result type (might be due to invalid IL or missing references)
		//IL_0876: Unknown result type (might be due to invalid IL or missing references)
		//IL_0889: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_08fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0904: Unknown result type (might be due to invalid IL or missing references)
		//IL_090a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0914: Unknown result type (might be due to invalid IL or missing references)
		//IL_0919: Unknown result type (might be due to invalid IL or missing references)
		//IL_091e: Unknown result type (might be due to invalid IL or missing references)
		//IL_068a: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0765: Unknown result type (might be due to invalid IL or missing references)
		//IL_0779: Unknown result type (might be due to invalid IL or missing references)
		//IL_077e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0783: Unknown result type (might be due to invalid IL or missing references)
		//IL_0667: Unknown result type (might be due to invalid IL or missing references)
		//IL_0932: Unknown result type (might be due to invalid IL or missing references)
		//IL_095e: Unknown result type (might be due to invalid IL or missing references)
		//IL_096c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0980: Unknown result type (might be due to invalid IL or missing references)
		//IL_0985: Unknown result type (might be due to invalid IL or missing references)
		//IL_098a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0990: Unknown result type (might be due to invalid IL or missing references)
		//IL_0996: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_09aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_07cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_07db: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0804: Unknown result type (might be due to invalid IL or missing references)
		//IL_0818: Unknown result type (might be due to invalid IL or missing references)
		//IL_081d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0822: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a06: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a10: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a15: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a22: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a32: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a46: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a50: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a64: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a71: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a76: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a87: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a91: Unknown result type (might be due to invalid IL or missing references)
		if (type == 491)
		{
			AI_009_MagicMissiles_Old();
			return;
		}
		int num = 32;
		Player player = Main.player[owner];
		int num4 = Main.maxTilesY * 16;
		int num5 = 0;
		if (ai[0] >= 0f)
		{
			num5 = (int)(ai[1] / (float)num4);
		}
		bool flag = ai[0] == -1f || ai[0] == -2f;
		if (type == 34)
		{
			if (frameCounter++ >= 4)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			if (penetrate == 1 && ai[0] >= 0f && num5 == 0)
			{
				ai[1] += num4;
				num5 = 1;
				netUpdate = true;
			}
			if (penetrate == 1 && ai[0] == -1f)
			{
				ai[0] = -2f;
				netUpdate = true;
			}
			if (num5 > 0 || ai[0] == -2f)
			{
				localAI[0] += 1f;
			}
		}
		if (owner == Main.myPlayer)
		{
			if (ai[0] >= 0f)
			{
				if (player.channel && player.HeldItem.shoot == type)
				{
					Vector2 pointPoisition = Main.MouseWorld;
					player.LimitPointToPlayerReachableArea(ref pointPoisition);
					if (ai[0] != pointPoisition.X || ai[1] != pointPoisition.Y)
					{
						netUpdate = true;
						ai[0] = pointPoisition.X;
						ai[1] = pointPoisition.Y + (float)(num4 * num5);
					}
				}
				else
				{
					netUpdate = true;
					ai[0] = -1f;
					ai[1] = -1f;
					int num6 = FindTargetWithLineOfSight();
					if (num6 != -1)
					{
						ai[1] = num6;
					}
					else if (((Vector2)(ref velocity)).Length() < 2f)
					{
						velocity = DirectionFrom(player.Center) * (float)num;
					}
					else
					{
						velocity = velocity.SafeNormalize(Vector2.Zero) * (float)num;
					}
				}
			}
			if (flag && ai[1] == -1f)
			{
				int num7 = FindTargetWithLineOfSight();
				if (num7 != -1)
				{
					ai[1] = num7;
					netUpdate = true;
				}
			}
		}
		Vector2? vector = null;
		float amount = 1f;
		if (ai[0] > 0f && ai[1] > 0f)
		{
			vector = new Vector2(ai[0], ai[1] % (float)num4);
		}
		if (flag && ai[1] >= 0f)
		{
			int num8 = (int)ai[1];
			if (Main.npc.IndexInRange(num8))
			{
				NPC nPC = Main.npc[num8];
				if (nPC.CanBeChasedBy(this))
				{
					vector = nPC.Center;
					float t = Distance(vector.Value);
					float num9 = Utils.GetLerpValue(0f, 100f, t, clamped: true) * Utils.GetLerpValue(600f, 400f, t, clamped: true);
					amount = MathHelper.Lerp(0f, 0.2f, Utils.GetLerpValue(200f, 20f, 1f - num9, clamped: true));
				}
				else
				{
					ai[1] = -1f;
					netUpdate = true;
				}
			}
		}
		bool flag2 = false;
		if (flag)
		{
			flag2 = true;
		}
		if (vector.HasValue)
		{
			Vector2 value = vector.Value;
			if (Distance(value) >= 64f)
			{
				flag2 = true;
				Vector2 v = value - base.Center;
				Vector2 val = v.SafeNormalize(Vector2.Zero);
				float num10 = Math.Min(num, ((Vector2)(ref v)).Length());
				Vector2 value2 = val * num10;
				if (((Vector2)(ref velocity)).Length() < 4f)
				{
					velocity += velocity.SafeNormalize(Vector2.Zero).RotatedBy(0.7853981852531433).SafeNormalize(Vector2.Zero) * 4f;
				}
				if (velocity.HasNaNs())
				{
					Kill();
				}
				velocity = Vector2.Lerp(velocity, value2, amount);
			}
			else
			{
				velocity *= 0.3f;
				velocity += (value - base.Center) * 0.3f;
				flag2 = ((Vector2)(ref velocity)).Length() >= 2f;
			}
			if (timeLeft < 60)
			{
				timeLeft = 60;
			}
		}
		if (flag && ai[1] < 0f)
		{
			if (((Vector2)(ref velocity)).Length() != (float)num)
			{
				velocity = velocity.MoveTowards(velocity.SafeNormalize(Vector2.UnitY) * (float)num, 4f);
			}
			if (timeLeft > 300)
			{
				timeLeft = 300;
			}
		}
		if (flag2 && velocity != Vector2.Zero)
		{
			rotation = rotation.AngleTowards(velocity.ToRotation(), (float)Math.PI / 4f);
		}
		else
		{
			rotation = rotation.AngleLerp(0f, 0.2f);
		}
		bool flag3 = ((Vector2)(ref velocity)).Length() > 0.1f && Vector2.Dot(oldVelocity.SafeNormalize(Vector2.Zero), velocity.SafeNormalize(Vector2.Zero)) < 0.2f;
		if (type == 16)
		{
			if (soundDelay == 0 && Math.Abs(velocity.X) + Math.Abs(velocity.Y) > 2f)
			{
				soundDelay = 10;
				SoundEngine.PlaySound(in SoundID.Item9, position);
			}
			if (Main.rand.Next(9) == 0)
			{
				int num11 = Dust.NewDust(position, width, height, 15, 0f, 0f, 100, default(Color), 2f);
				Dust obj = Main.dust[num11];
				obj.velocity *= 0.3f;
				Main.dust[num11].position.X = position.X + (float)(width / 2) + 4f + (float)Main.rand.Next(-4, 5);
				Main.dust[num11].position.Y = position.Y + (float)(height / 2) + (float)Main.rand.Next(-4, 5);
				Main.dust[num11].noGravity = true;
				Dust obj2 = Main.dust[num11];
				obj2.velocity += Main.rand.NextVector2Circular(2f, 2f);
			}
			if (flag3)
			{
				int num2 = Main.rand.Next(2, 5);
				for (int i = 0; i < num2; i++)
				{
					Dust dust5 = Dust.NewDustDirect(position, width, height, 15, 0f, 0f, 100, default(Color), 1.5f);
					dust5.velocity *= 0.3f;
					dust5.position = base.Center;
					dust5.noGravity = true;
					dust5.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
					dust5.fadeIn = 2.2f;
				}
			}
		}
		if (type != 34)
		{
			return;
		}
		float lerpValue = Utils.GetLerpValue(0f, 10f, localAI[0], clamped: true);
		Color newColor = Color.Lerp(Color.Transparent, Color.Crimson, lerpValue);
		if (Main.rand.Next(6) == 0)
		{
			Dust dust6 = Dust.NewDustDirect(base.Center, 0, 0, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, newColor, 3.5f);
			dust6.noGravity = true;
			dust6.velocity *= 1.4f;
			dust6.velocity += Main.rand.NextVector2Circular(1f, 1f);
			dust6.velocity += velocity * 0.15f;
		}
		if (Main.rand.Next(12) == 0)
		{
			Dust dust7 = Dust.NewDustDirect(base.Center, 0, 0, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, newColor, 1.5f);
			dust7.velocity += Main.rand.NextVector2Circular(1f, 1f);
			dust7.velocity += velocity * 0.15f;
		}
		if (flag3)
		{
			int num3 = Main.rand.Next(2, 5 + (int)(lerpValue * 4f));
			for (int j = 0; j < num3; j++)
			{
				Dust dust4 = Dust.NewDustDirect(position, width, height, 6, 0f, 0f, 100, newColor, 1.5f);
				dust4.velocity *= 0.3f;
				dust4.position = base.Center;
				dust4.noGravity = true;
				dust4.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
				dust4.fadeIn = 2.2f;
				dust4.position += (dust4.position - base.Center) * lerpValue * 10f;
			}
		}
	}

	private void AI_009_MagicMissiles_Old()
	{
		//IL_0567: Unknown result type (might be due to invalid IL or missing references)
		//IL_056d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0572: Unknown result type (might be due to invalid IL or missing references)
		//IL_0577: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0668: Unknown result type (might be due to invalid IL or missing references)
		//IL_0679: Unknown result type (might be due to invalid IL or missing references)
		//IL_0594: Unknown result type (might be due to invalid IL or missing references)
		//IL_059b: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_035e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0379: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c03: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c08: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0acf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aea: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b00: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b14: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b19: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b24: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b34: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b39: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a60: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a65: Unknown result type (might be due to invalid IL or missing references)
		//IL_095f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0980: Unknown result type (might be due to invalid IL or missing references)
		//IL_0986: Unknown result type (might be due to invalid IL or missing references)
		//IL_099d: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a53: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a58: Unknown result type (might be due to invalid IL or missing references)
		//IL_093c: Unknown result type (might be due to invalid IL or missing references)
		//IL_07df: Unknown result type (might be due to invalid IL or missing references)
		//IL_080d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0827: Unknown result type (might be due to invalid IL or missing references)
		//IL_0831: Unknown result type (might be due to invalid IL or missing references)
		//IL_0836: Unknown result type (might be due to invalid IL or missing references)
		//IL_0844: Unknown result type (might be due to invalid IL or missing references)
		//IL_084a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0854: Unknown result type (might be due to invalid IL or missing references)
		//IL_0859: Unknown result type (might be due to invalid IL or missing references)
		//IL_085e: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c16: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b55: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b83: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b89: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b97: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a73: Unknown result type (might be due to invalid IL or missing references)
		//IL_0462: Unknown result type (might be due to invalid IL or missing references)
		//IL_0485: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0705: Unknown result type (might be due to invalid IL or missing references)
		//IL_070b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0722: Unknown result type (might be due to invalid IL or missing references)
		//IL_072c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0731: Unknown result type (might be due to invalid IL or missing references)
		//IL_0746: Unknown result type (might be due to invalid IL or missing references)
		//IL_074c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0751: Unknown result type (might be due to invalid IL or missing references)
		//IL_075b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0760: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_015a: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_017f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0236: Unknown result type (might be due to invalid IL or missing references)
		//IL_0240: Unknown result type (might be due to invalid IL or missing references)
		//IL_0245: Unknown result type (might be due to invalid IL or missing references)
		//IL_0247: Unknown result type (might be due to invalid IL or missing references)
		//IL_0251: Unknown result type (might be due to invalid IL or missing references)
		//IL_0256: Unknown result type (might be due to invalid IL or missing references)
		if (Main.myPlayer == owner && ai[0] <= 0f)
		{
			if (Main.player[owner].channel && Main.player[owner].HeldItem.shoot == type)
			{
				float num = 12f;
				if (type == 16)
				{
					num = 15f;
				}
				if (type == 491)
				{
					num = 20f;
				}
				Vector2 vector = default(Vector2);
				((Vector2)(ref vector))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				Vector2 pointPoisition = Main.MouseWorld;
				Main.player[owner].LimitPointToPlayerReachableArea(ref pointPoisition);
				float num11 = pointPoisition.X - vector.X;
				float num12 = pointPoisition.Y - vector.Y;
				float num13 = (float)Math.Sqrt(num11 * num11 + num12 * num12);
				if (ai[0] < 0f)
				{
					ai[0] += 1f;
				}
				if (type == 491 && num13 < 100f)
				{
					if (((Vector2)(ref velocity)).Length() < num)
					{
						velocity *= 1.1f;
						if (((Vector2)(ref velocity)).Length() > num)
						{
							((Vector2)(ref velocity)).Normalize();
							velocity *= num;
						}
					}
					if (ai[0] == 0f)
					{
						ai[0] = -10f;
					}
				}
				else if (num13 > num)
				{
					num13 = num / num13;
					num11 *= num13;
					num12 *= num13;
					int num17 = (int)(num11 * 1000f);
					int num14 = (int)(velocity.X * 1000f);
					int num15 = (int)(num12 * 1000f);
					int num16 = (int)(velocity.Y * 1000f);
					if (num17 != num14 || num15 != num16)
					{
						netUpdate = true;
					}
					if (type == 491)
					{
						Vector2 vector2 = default(Vector2);
						((Vector2)(ref vector2))._002Ector(num11, num12);
						velocity = (velocity * 4f + vector2) / 5f;
					}
					else
					{
						velocity.X = num11;
						velocity.Y = num12;
					}
				}
				else
				{
					int num18 = (int)(num11 * 1000f);
					int num2 = (int)(velocity.X * 1000f);
					int num3 = (int)(num12 * 1000f);
					int num4 = (int)(velocity.Y * 1000f);
					if (num18 != num2 || num3 != num4)
					{
						netUpdate = true;
					}
					velocity.X = num11;
					velocity.Y = num12;
				}
			}
			else if (ai[0] <= 0f)
			{
				netUpdate = true;
				if (type != 491)
				{
					Vector2 vector3 = default(Vector2);
					((Vector2)(ref vector3))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num5 = (float)Main.mouseX + Main.screenPosition.X - vector3.X;
					float num6 = (float)Main.mouseY + Main.screenPosition.Y - vector3.Y;
					if (Main.player[owner].gravDir == -1f)
					{
						num6 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector3.Y;
					}
					float num7 = (float)Math.Sqrt(num5 * num5 + num6 * num6);
					if (num7 == 0f || ai[0] < 0f)
					{
						((Vector2)(ref vector3))._002Ector(Main.player[owner].position.X + (float)(Main.player[owner].width / 2), Main.player[owner].position.Y + (float)(Main.player[owner].height / 2));
						num5 = position.X + (float)width * 0.5f - vector3.X;
						num6 = position.Y + (float)height * 0.5f - vector3.Y;
						num7 = (float)Math.Sqrt(num5 * num5 + num6 * num6);
					}
					num7 = 12f / num7;
					num5 *= num7;
					num6 *= num7;
					velocity.X = num5;
					velocity.Y = num6;
					if (velocity.X == 0f && velocity.Y == 0f)
					{
						Kill();
					}
				}
				ai[0] = 1f;
			}
		}
		bool flag = false;
		if (type == 491)
		{
			localAI[0] += 1f;
			if (ai[0] > 0f && localAI[0] > 15f)
			{
				tileCollide = false;
				Vector2 vector4 = Main.player[owner].Center - base.Center;
				if (((Vector2)(ref vector4)).Length() < 20f)
				{
					Kill();
				}
				((Vector2)(ref vector4)).Normalize();
				vector4 *= 25f;
				velocity = (velocity * 5f + vector4) / 6f;
			}
			flag = true;
			if (ai[0] < 0f || (velocity.X == 0f && velocity.Y == 0f))
			{
				rotation += 0.3f;
			}
			else if (ai[0] > 0f)
			{
				rotation += 0.3f * (float)direction;
			}
			else
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
			}
			if (Vector2.Distance(base.Center, Main.player[owner].Center) > 2000f)
			{
				Kill();
			}
			if (Main.rand.Next(2) == 0)
			{
				int num19 = Main.rand.Next(3);
				int num8 = Dust.NewDust(position, width, height, num19 switch
				{
					0 => 15, 
					1 => 57, 
					_ => 58, 
				}, velocity.X * 0.25f, velocity.Y * 0.25f, 255, default(Color), 0.7f);
				Dust obj = Main.dust[num8];
				obj.velocity *= 0.25f;
				Main.dust[num8].position = (Main.dust[num8].position + position) / 2f;
			}
		}
		if (type == 79)
		{
			if (soundDelay == 0 && Math.Abs(velocity.X) + Math.Abs(velocity.Y) > 2f)
			{
				soundDelay = 10;
				SoundEngine.PlaySound(in SoundID.Item9, position);
			}
			for (int i = 0; i < 1; i++)
			{
				int num9 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 66, 0f, 0f, 100, new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 2.5f);
				Dust obj2 = Main.dust[num9];
				obj2.velocity *= 0.1f;
				Dust obj3 = Main.dust[num9];
				obj3.velocity += velocity * 0.2f;
				Main.dust[num9].position.X = position.X + (float)(width / 2) + 4f + (float)Main.rand.Next(-2, 3);
				Main.dust[num9].position.Y = position.Y + (float)(height / 2) + (float)Main.rand.Next(-2, 3);
				Main.dust[num9].noGravity = true;
			}
		}
		if (type == 16)
		{
			if (soundDelay == 0 && Math.Abs(velocity.X) + Math.Abs(velocity.Y) > 2f)
			{
				soundDelay = 10;
				SoundEngine.PlaySound(in SoundID.Item9, position);
			}
			if (Main.rand.Next(9) == 0)
			{
				int num10 = Dust.NewDust(position, width, height, 15, 0f, 0f, 100, default(Color), 2f);
				Dust obj4 = Main.dust[num10];
				obj4.velocity *= 0.3f;
				Main.dust[num10].position.X = position.X + (float)(width / 2) + 4f + (float)Main.rand.Next(-4, 5);
				Main.dust[num10].position.Y = position.Y + (float)(height / 2) + (float)Main.rand.Next(-4, 5);
				Main.dust[num10].noGravity = true;
				Dust obj5 = Main.dust[num10];
				obj5.velocity += Main.rand.NextVector2Circular(2f, 2f);
			}
			flag = true;
			if (velocity != Vector2.Zero)
			{
				rotation = velocity.ToRotation();
			}
		}
		if (type == 34)
		{
			if (Main.rand.Next(12) == 0)
			{
				Dust dust = Dust.NewDustDirect(base.Center, 0, 0, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 3.5f);
				dust.noGravity = true;
				dust.velocity *= 1.4f;
				dust.velocity += Main.rand.NextVector2Circular(1f, 1f);
				dust.velocity += velocity * 0.15f;
			}
			if (Main.rand.Next(24) == 0)
			{
				Dust dust2 = Dust.NewDustDirect(base.Center, 0, 0, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 1.5f);
				dust2.velocity += Main.rand.NextVector2Circular(1f, 1f);
				dust2.velocity += velocity * 0.15f;
			}
			flag = true;
			if (velocity != Vector2.Zero)
			{
				rotation = velocity.ToRotation();
			}
		}
		if (!flag && velocity != Vector2.Zero)
		{
			rotation = velocity.ToRotation() - (float)Math.PI + (float)Math.PI / 4f;
		}
		if (velocity.Y > 16f)
		{
			velocity.Y = 16f;
		}
	}

	private void AI_015_HandleMovementCollision(ref Vector2 wetVelocity, ref Vector2 lastVelocity)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_013e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_015d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0165: Unknown result type (might be due to invalid IL or missing references)
		//IL_016a: Unknown result type (might be due to invalid IL or missing references)
		//IL_016b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0170: Unknown result type (might be due to invalid IL or missing references)
		//IL_023b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0240: Unknown result type (might be due to invalid IL or missing references)
		//IL_0186: Unknown result type (might be due to invalid IL or missing references)
		//IL_018b: Unknown result type (might be due to invalid IL or missing references)
		int num = 10;
		int num2 = 0;
		Vector2 vector = velocity;
		float num3 = 0.2f;
		if (ai[0] == 1f || ai[0] == 5f)
		{
			num3 = 0.4f;
		}
		if (ai[0] == 6f)
		{
			num3 = 0f;
		}
		if (lastVelocity.X != velocity.X)
		{
			if (Math.Abs(lastVelocity.X) > 4f)
			{
				num2 = 1;
			}
			velocity.X = (0f - lastVelocity.X) * num3;
			localAI[0] += 1f;
		}
		if (lastVelocity.Y != velocity.Y)
		{
			if (Math.Abs(lastVelocity.Y) > 4f)
			{
				num2 = 1;
			}
			velocity.Y = (0f - lastVelocity.Y) * num3;
			localAI[0] += 1f;
		}
		if (ai[0] == 1f)
		{
			ai[0] = 5f;
			localNPCHitCooldown = num;
			netUpdate = true;
			Point scanAreaStart = base.TopLeft.ToTileCoordinates();
			Point scanAreaEnd = base.BottomRight.ToTileCoordinates();
			num2 = 2;
			CreateImpactExplosion(2, base.Center, ref scanAreaStart, ref scanAreaEnd, width, out var causedShockwaves);
			CreateImpactExplosion2_FlailTileCollision(base.Center, causedShockwaves, vector);
			position -= vector;
		}
		if (num2 > 0)
		{
			netUpdate = true;
			for (int i = 0; i < num2; i++)
			{
				Collision.HitTiles(position, vector, width, height);
			}
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
		}
		if (ai[0] != 3f && ai[0] != 0f && ai[0] != 5f && ai[0] != 6f && localAI[0] >= 10f)
		{
			ai[0] = 4f;
			netUpdate = true;
		}
		if (wet)
		{
			wetVelocity = velocity;
		}
	}

	public void ResetLocalNPCHitImmunity()
	{
		for (int i = 0; i < 200; i++)
		{
			localNPCImmunity[i] = 0;
		}
	}

	private void AI_015_Flails()
	{
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_046b: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_084d: Unknown result type (might be due to invalid IL or missing references)
		//IL_084e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0853: Unknown result type (might be due to invalid IL or missing references)
		//IL_0858: Unknown result type (might be due to invalid IL or missing references)
		//IL_085d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0860: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03da: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0300: Unknown result type (might be due to invalid IL or missing references)
		//IL_030c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0311: Unknown result type (might be due to invalid IL or missing references)
		//IL_0316: Unknown result type (might be due to invalid IL or missing references)
		//IL_0319: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0873: Unknown result type (might be due to invalid IL or missing references)
		//IL_087d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0882: Unknown result type (might be due to invalid IL or missing references)
		//IL_0889: Unknown result type (might be due to invalid IL or missing references)
		//IL_088e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0892: Unknown result type (might be due to invalid IL or missing references)
		//IL_0899: Unknown result type (might be due to invalid IL or missing references)
		//IL_089e: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_08aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_08af: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_08be: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_08cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0980: Unknown result type (might be due to invalid IL or missing references)
		//IL_098b: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_0412: Unknown result type (might be due to invalid IL or missing references)
		//IL_0413: Unknown result type (might be due to invalid IL or missing references)
		//IL_041a: Unknown result type (might be due to invalid IL or missing references)
		//IL_041f: Unknown result type (might be due to invalid IL or missing references)
		//IL_042a: Unknown result type (might be due to invalid IL or missing references)
		//IL_042f: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0549: Unknown result type (might be due to invalid IL or missing references)
		//IL_0553: Unknown result type (might be due to invalid IL or missing references)
		//IL_0558: Unknown result type (might be due to invalid IL or missing references)
		//IL_064e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0658: Unknown result type (might be due to invalid IL or missing references)
		//IL_065d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0664: Unknown result type (might be due to invalid IL or missing references)
		//IL_0669: Unknown result type (might be due to invalid IL or missing references)
		//IL_066d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0674: Unknown result type (might be due to invalid IL or missing references)
		//IL_0679: Unknown result type (might be due to invalid IL or missing references)
		//IL_0680: Unknown result type (might be due to invalid IL or missing references)
		//IL_068b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0633: Unknown result type (might be due to invalid IL or missing references)
		//IL_063d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0642: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a18: Unknown result type (might be due to invalid IL or missing references)
		//IL_0353: Unknown result type (might be due to invalid IL or missing references)
		//IL_0357: Unknown result type (might be due to invalid IL or missing references)
		//IL_035d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0362: Unknown result type (might be due to invalid IL or missing references)
		//IL_0367: Unknown result type (might be due to invalid IL or missing references)
		//IL_036d: Unknown result type (might be due to invalid IL or missing references)
		//IL_057e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0584: Unknown result type (might be due to invalid IL or missing references)
		//IL_077d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0787: Unknown result type (might be due to invalid IL or missing references)
		//IL_078c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0793: Unknown result type (might be due to invalid IL or missing references)
		//IL_0799: Unknown result type (might be due to invalid IL or missing references)
		//IL_079a: Unknown result type (might be due to invalid IL or missing references)
		//IL_079f: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_073c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0746: Unknown result type (might be due to invalid IL or missing references)
		//IL_074b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0752: Unknown result type (might be due to invalid IL or missing references)
		//IL_0758: Unknown result type (might be due to invalid IL or missing references)
		//IL_0759: Unknown result type (might be due to invalid IL or missing references)
		//IL_075e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0763: Unknown result type (might be due to invalid IL or missing references)
		//IL_076a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0771: Unknown result type (might be due to invalid IL or missing references)
		//IL_0776: Unknown result type (might be due to invalid IL or missing references)
		//IL_0820: Unknown result type (might be due to invalid IL or missing references)
		//IL_082b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ca0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ca1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c43: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b97: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ba2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ba7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bae: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b27: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b4d: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[owner];
		if (!player.active || player.dead || player.noItems || player.CCed || Vector2.Distance(base.Center, player.Center) > 900f)
		{
			Kill();
			return;
		}
		if (Main.myPlayer == owner && Main.mapFullscreen)
		{
			Kill();
			return;
		}
		if (type == 948 && wet && !lavaWet)
		{
			type = 947;
			netUpdate = true;
		}
		Vector2 mountedCenter = player.MountedCenter;
		bool doFastThrowDust = false;
		bool flag = true;
		bool flag2 = false;
		int num = 10;
		float num11 = 24f;
		float num16 = 800f;
		float num17 = 3f;
		float num18 = 16f;
		float num19 = 6f;
		float num20 = 48f;
		float num21 = 1f;
		float num22 = 14f;
		int num2 = 60;
		int num3 = 10;
		int num4 = 15;
		int num5 = 10;
		int num6 = num + 5;
		switch (type)
		{
		case 947:
		case 948:
			num = 13;
			num11 = 12f;
			num18 = 8f;
			num20 = 13f;
			break;
		case 25:
			num = 15;
			num11 = 14f;
			num18 = 10f;
			num20 = 15f;
			break;
		case 154:
			num = 15;
			num11 = 15f;
			num18 = 11f;
			num20 = 16f;
			break;
		case 26:
			num = 15;
			num11 = 16f;
			num18 = 12f;
			num20 = 16f;
			break;
		case 35:
			num = 15;
			num11 = 17f;
			num18 = 14f;
			num20 = 18f;
			break;
		case 63:
			num = 13;
			num11 = 21f;
			num18 = 20f;
			num20 = 24f;
			num4 = 12;
			break;
		case 757:
			num = 13;
			num11 = 22f;
			num18 = 22f;
			num20 = 26f;
			num4 = 12;
			break;
		case 247:
			num = 13;
			num11 = 23f;
			num4 = 12;
			break;
		}
		float num7 = 1f / player.inverseMeleeSpeed;
		num11 *= num7;
		num21 *= num7;
		num22 *= num7;
		num17 *= num7;
		num18 *= num7;
		num19 *= num7;
		num20 *= num7;
		float num8 = num11 * (float)num;
		float num9 = num8 + 160f;
		localNPCHitCooldown = num3;
		switch ((int)ai[0])
		{
		case 0:
		{
			flag2 = true;
			if (owner == Main.myPlayer)
			{
				Vector2 mouseWorld = Main.MouseWorld;
				Vector2 vector3 = mountedCenter.DirectionTo(mouseWorld).SafeNormalize(Vector2.UnitX * (float)player.direction);
				player.ChangeDir((vector3.X > 0f) ? 1 : (-1));
				if (!player.channel)
				{
					ai[0] = 1f;
					ai[1] = 0f;
					velocity = vector3 * num11 + player.velocity;
					base.Center = mountedCenter;
					netUpdate = true;
					ResetLocalNPCHitImmunity();
					localNPCHitCooldown = num5;
					break;
				}
			}
			localAI[1] += 1f;
			Vector2 vector4 = Utils.RotatedBy(new Vector2((float)player.direction), (float)Math.PI * 10f * (localAI[1] / 60f) * (float)player.direction);
			vector4.Y *= 0.8f;
			if (vector4.Y * player.gravDir > 0f)
			{
				vector4.Y *= 0.5f;
			}
			base.Center = mountedCenter + vector4 * 30f;
			velocity = Vector2.Zero;
			localNPCHitCooldown = num4;
			break;
		}
		case 1:
		{
			doFastThrowDust = true;
			bool flag3 = ai[1]++ >= (float)num;
			flag3 |= Distance(mountedCenter) >= num16;
			if (player.controlUseItem)
			{
				ai[0] = 6f;
				ai[1] = 0f;
				netUpdate = true;
				velocity *= 0.2f;
				if (Main.myPlayer == owner && type == 757)
				{
					NewProjectile(GetProjectileSource_FromThis(), base.Center, velocity, 928, damage, knockBack, Main.myPlayer);
				}
				break;
			}
			if (flag3)
			{
				ai[0] = 2f;
				ai[1] = 0f;
				netUpdate = true;
				velocity *= 0.3f;
				if (Main.myPlayer == owner && type == 757)
				{
					NewProjectile(GetProjectileSource_FromThis(), base.Center, velocity, 928, damage, knockBack, Main.myPlayer);
				}
			}
			player.ChangeDir((player.Center.X < base.Center.X) ? 1 : (-1));
			localNPCHitCooldown = num5;
			break;
		}
		case 2:
		{
			Vector2 vector = DirectionTo(mountedCenter).SafeNormalize(Vector2.Zero);
			if (Distance(mountedCenter) <= num18)
			{
				Kill();
				return;
			}
			if (player.controlUseItem)
			{
				ai[0] = 6f;
				ai[1] = 0f;
				netUpdate = true;
				velocity *= 0.2f;
			}
			else
			{
				velocity *= 0.98f;
				velocity = velocity.MoveTowards(vector * num18, num17);
				player.ChangeDir((player.Center.X < base.Center.X) ? 1 : (-1));
			}
			break;
		}
		case 3:
		{
			if (!player.controlUseItem)
			{
				ai[0] = 4f;
				ai[1] = 0f;
				netUpdate = true;
				break;
			}
			float num10 = Distance(mountedCenter);
			tileCollide = ai[1] == 1f;
			bool flag4 = num10 <= num8;
			if (flag4 != tileCollide)
			{
				tileCollide = flag4;
				ai[1] = (tileCollide ? 1 : 0);
				netUpdate = true;
			}
			if (num10 > (float)num2)
			{
				if (num10 >= num8)
				{
					velocity *= 0.5f;
					velocity = velocity.MoveTowards(DirectionTo(mountedCenter).SafeNormalize(Vector2.Zero) * num22, num22);
				}
				velocity *= 0.98f;
				velocity = velocity.MoveTowards(DirectionTo(mountedCenter).SafeNormalize(Vector2.Zero) * num22, num21);
			}
			else
			{
				if (((Vector2)(ref velocity)).Length() < 6f)
				{
					velocity.X *= 0.96f;
					velocity.Y += 0.2f;
				}
				if (player.velocity.X == 0f)
				{
					velocity.X *= 0.96f;
				}
			}
			player.ChangeDir((player.Center.X < base.Center.X) ? 1 : (-1));
			break;
		}
		case 4:
		{
			tileCollide = false;
			Vector2 vector2 = DirectionTo(mountedCenter).SafeNormalize(Vector2.Zero);
			if (Distance(mountedCenter) <= num20)
			{
				Kill();
				return;
			}
			velocity *= 0.98f;
			velocity = velocity.MoveTowards(vector2 * num20, num19);
			Vector2 target = base.Center + velocity;
			Vector2 value = mountedCenter.DirectionFrom(target).SafeNormalize(Vector2.Zero);
			if (Vector2.Dot(vector2, value) < 0f)
			{
				Kill();
				return;
			}
			player.ChangeDir((player.Center.X < base.Center.X) ? 1 : (-1));
			break;
		}
		case 5:
			if (ai[1]++ >= (float)num6)
			{
				ai[0] = 6f;
				ai[1] = 0f;
				netUpdate = true;
			}
			else
			{
				localNPCHitCooldown = num5;
				velocity.Y += 0.6f;
				velocity.X *= 0.95f;
				player.ChangeDir((player.Center.X < base.Center.X) ? 1 : (-1));
			}
			break;
		case 6:
			if (!player.controlUseItem || Distance(mountedCenter) > num9)
			{
				ai[0] = 4f;
				ai[1] = 0f;
				netUpdate = true;
				break;
			}
			if (!shimmerWet)
			{
				velocity.Y += 0.8f;
			}
			velocity.X *= 0.95f;
			player.ChangeDir((player.Center.X < base.Center.X) ? 1 : (-1));
			break;
		}
		if (type == 247)
		{
			flag = false;
			float num12 = (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f;
			rotation += ((velocity.X > 0f) ? num12 : (0f - num12));
			if (ai[0] == 0f)
			{
				rotation += (float)Math.PI * 2f / 15f * (float)player.direction;
			}
			float num13 = 600f;
			NPC nPC = null;
			if (owner == Main.myPlayer)
			{
				localAI[0] += 1f;
				if (localAI[0] >= 20f)
				{
					localAI[0] = 17f;
					for (int i = 0; i < 200; i++)
					{
						NPC nPC2 = Main.npc[i];
						if (nPC2.CanBeChasedBy(this))
						{
							float num14 = Distance(nPC2.Center);
							if (!(num14 >= num13) && Collision.CanHit(position, width, height, nPC2.position, nPC2.width, nPC2.height))
							{
								nPC = nPC2;
								num13 = num14;
							}
						}
					}
				}
				if (nPC != null)
				{
					localAI[0] = 0f;
					float num15 = 14f;
					Vector2 center = base.Center;
					Vector2 vector5 = center.DirectionTo(nPC.Center) * num15;
					NewProjectile(GetProjectileSource_FromThis(), center, vector5, 248, (int)((double)damage / 1.5), knockBack / 2f, Main.myPlayer);
				}
			}
		}
		direction = ((velocity.X > 0f) ? 1 : (-1));
		spriteDirection = direction;
		ownerHitCheck = flag2;
		if (flag)
		{
			if (((Vector2)(ref velocity)).Length() > 1f)
			{
				rotation = velocity.ToRotation() + velocity.X * 0.1f;
			}
			else
			{
				rotation += velocity.X * 0.1f;
			}
		}
		timeLeft = 2;
		player.heldProj = whoAmI;
		player.SetDummyItemTime(2);
		player.itemRotation = DirectionFrom(mountedCenter).ToRotation();
		if (base.Center.X < mountedCenter.X)
		{
			player.itemRotation += (float)Math.PI;
		}
		player.itemRotation = MathHelper.WrapAngle(player.itemRotation);
		AI_015_Flails_Dust(doFastThrowDust);
	}

	private void AI_015_HandleMovementCollision_Old(ref Vector2 wetVelocity, ref Vector2 lastVelocity)
	{
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0126: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		bool flag = false;
		if (lastVelocity.X != velocity.X)
		{
			if (Math.Abs(lastVelocity.X) > 4f)
			{
				flag = true;
			}
			position.X += velocity.X;
			velocity.X = (0f - lastVelocity.X) * 0.2f;
		}
		if (lastVelocity.Y != velocity.Y)
		{
			if (Math.Abs(lastVelocity.Y) > 4f)
			{
				flag = true;
			}
			position.Y += velocity.Y;
			velocity.Y = (0f - lastVelocity.Y) * 0.2f;
		}
		ai[0] = 1f;
		if (flag)
		{
			netUpdate = true;
			Collision.HitTiles(position, velocity, width, height);
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
		}
		if (wet)
		{
			wetVelocity = velocity;
		}
	}

	private void AI_015_Flails_Old()
	{
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0126: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_072e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0738: Unknown result type (might be due to invalid IL or missing references)
		//IL_076a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0770: Unknown result type (might be due to invalid IL or missing references)
		//IL_067f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0698: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c4: Unknown result type (might be due to invalid IL or missing references)
		AI_015_Flails_Dust(doFastThrowDust: false);
		bool flag = Main.player[owner].dead;
		if (!flag)
		{
			Vector2 val = Main.player[owner].Center - base.Center;
			flag = ((Vector2)(ref val)).Length() > 2000f;
		}
		if (flag)
		{
			Kill();
			return;
		}
		Main.player[owner].SetDummyItemTime(10);
		if (position.X + (float)(width / 2) > Main.player[owner].position.X + (float)(Main.player[owner].width / 2))
		{
			Main.player[owner].ChangeDir(1);
			direction = 1;
		}
		else
		{
			Main.player[owner].ChangeDir(-1);
			direction = -1;
		}
		Vector2 mountedCenter = Main.player[owner].MountedCenter;
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
		float num = mountedCenter.X - vector.X;
		float num10 = mountedCenter.Y - vector.Y;
		float num11 = (float)Math.Sqrt(num * num + num10 * num10);
		if (ai[0] == 0f)
		{
			float num12 = 160f;
			if (type == 63)
			{
				num12 *= 1.5f;
			}
			if (type == 247)
			{
				num12 *= 1.5f;
			}
			if (type == 757)
			{
				num12 *= 1.5f;
			}
			tileCollide = true;
			if (num11 > num12)
			{
				ai[0] = 1f;
				netUpdate = true;
			}
			else if (!Main.player[owner].channel)
			{
				if (velocity.Y < 0f)
				{
					velocity.Y *= 0.9f;
				}
				velocity.Y += 1f;
				velocity.X *= 0.9f;
			}
		}
		else if (ai[0] == 1f)
		{
			float meleeSpeed = Main.player[owner].inverseMeleeSpeed;
			float num13 = 14f / meleeSpeed;
			float num14 = 0.9f / meleeSpeed;
			float num15 = 300f / meleeSpeed;
			int num16 = 60;
			if (type == 63)
			{
				num15 *= 1.5f;
				num13 *= 1.5f;
				num14 *= 1.5f;
			}
			if (type == 247)
			{
				num15 *= 1.5f;
				num13 = 15.9f;
				num14 *= 2f;
				num16 = 100;
			}
			if (type == 757)
			{
				num15 *= 1.5f;
				num13 = 15.9f;
				num14 *= 2f;
				num16 = 100;
			}
			Math.Abs(num);
			Math.Abs(num10);
			if (ai[1] == 1f)
			{
				tileCollide = false;
			}
			if (!Main.player[owner].channel || num11 > num15 || !tileCollide)
			{
				ai[1] = 1f;
				if (tileCollide)
				{
					netUpdate = true;
				}
				tileCollide = false;
				if (num11 < 20f)
				{
					Kill();
				}
			}
			if (!tileCollide)
			{
				num14 *= 2f;
			}
			if (num11 > (float)num16 || !tileCollide)
			{
				num11 = num13 / num11;
				num *= num11;
				num10 *= num11;
				new Vector2(velocity.X, velocity.Y);
				float num17 = num - velocity.X;
				float num2 = num10 - velocity.Y;
				float num3 = (float)Math.Sqrt(num17 * num17 + num2 * num2);
				num3 = num14 / num3;
				num17 *= num3;
				num2 *= num3;
				velocity.X *= 0.98f;
				velocity.Y *= 0.98f;
				velocity.X += num17;
				velocity.Y += num2;
			}
			else
			{
				if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < 6f)
				{
					velocity.X *= 0.96f;
					velocity.Y += 0.2f;
				}
				if (Main.player[owner].velocity.X == 0f)
				{
					velocity.X *= 0.96f;
				}
			}
		}
		if (type == 247)
		{
			if (velocity.X < 0f)
			{
				rotation -= (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f;
			}
			else
			{
				rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f;
			}
			float num4 = position.X;
			float num5 = position.Y;
			float num6 = 600f;
			bool flag2 = false;
			if (owner == Main.myPlayer)
			{
				localAI[1] += 1f;
				if (localAI[1] > 20f)
				{
					localAI[1] = 20f;
					for (int i = 0; i < 200; i++)
					{
						if (Main.npc[i].CanBeChasedBy(this))
						{
							float num7 = Main.npc[i].position.X + (float)(Main.npc[i].width / 2);
							float num8 = Main.npc[i].position.Y + (float)(Main.npc[i].height / 2);
							float num9 = Math.Abs(position.X + (float)(width / 2) - num7) + Math.Abs(position.Y + (float)(height / 2) - num8);
							if (num9 < num6 && Collision.CanHit(position, width, height, Main.npc[i].position, Main.npc[i].width, Main.npc[i].height))
							{
								num6 = num9;
								num4 = num7;
								num5 = num8;
								flag2 = true;
							}
						}
					}
				}
			}
			if (flag2)
			{
				localAI[1] = 0f;
				((Vector2)(ref vector))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				num = num4 - vector.X;
				num10 = num5 - vector.Y;
				num11 = (float)Math.Sqrt(num * num + num10 * num10);
				num11 = 14f / num11;
				num *= num11;
				num10 *= num11;
				NewProjectile(GetProjectileSource_FromThis(), vector.X, vector.Y, num, num10, 248, (int)((double)damage / 1.5), knockBack / 2f, Main.myPlayer);
			}
		}
		else
		{
			rotation = (float)Math.Atan2(num10, num) - velocity.X * 0.1f;
		}
	}

	private void AI_015_Flails_Dust(bool doFastThrowDust)
	{
		//IL_01bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_033a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0372: Unknown result type (might be due to invalid IL or missing references)
		//IL_0378: Unknown result type (might be due to invalid IL or missing references)
		//IL_026d: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_030c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0312: Unknown result type (might be due to invalid IL or missing references)
		//IL_0317: Unknown result type (might be due to invalid IL or missing references)
		//IL_0321: Unknown result type (might be due to invalid IL or missing references)
		//IL_0326: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0414: Unknown result type (might be due to invalid IL or missing references)
		//IL_041a: Unknown result type (might be due to invalid IL or missing references)
		//IL_043e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0448: Unknown result type (might be due to invalid IL or missing references)
		//IL_044d: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_0141: Unknown result type (might be due to invalid IL or missing references)
		//IL_014b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0179: Unknown result type (might be due to invalid IL or missing references)
		//IL_017f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0189: Unknown result type (might be due to invalid IL or missing references)
		//IL_018e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0193: Unknown result type (might be due to invalid IL or missing references)
		if (type == 25)
		{
			int maxValue = 15;
			if (doFastThrowDust)
			{
				maxValue = 1;
			}
			if (Main.rand.Next(maxValue) == 0)
			{
				Dust.NewDust(position, width, height, 14, 0f, 0f, 150, default(Color), 1.3f);
			}
		}
		else if (type == 757)
		{
			int num = 4;
			if (((Vector2)(ref velocity)).Length() < 8f)
			{
				num = 10;
			}
			if (doFastThrowDust)
			{
				num /= 2;
			}
			for (int i = 0; i < 2; i++)
			{
				if (Main.rand.Next(num) == 0)
				{
					Dust dust = Dust.NewDustDirect(position, width, height, 5, 0f, 0f, 0, default(Color), 0.8f);
					dust.velocity += velocity / 4f;
					dust.fadeIn = 1.3f;
				}
			}
			num = 40;
			if (doFastThrowDust)
			{
				num /= 2;
			}
			for (float num2 = 0f; num2 < 1f; num2 += 0.1f)
			{
				if (Main.rand.Next(num) == 0)
				{
					Dust dust2 = Dust.NewDustDirect(Vector2.Lerp(Main.player[owner].Center, base.Center, Main.rand.NextFloat()) + new Vector2(-8f), 16, 16, 5, 0f, 0f, 0, default(Color), 1.3f);
					dust2.velocity += velocity / 4f;
				}
			}
		}
		else if (type == 26)
		{
			int num3 = Dust.NewDust(position, width, height, 172, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 1.5f);
			Main.dust[num3].noGravity = true;
			Main.dust[num3].velocity.X /= 2f;
			Main.dust[num3].velocity.Y /= 2f;
		}
		else if (type == 948 && !wet)
		{
			int num4 = Dust.NewDust(position, width, height, 6, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 1.2f);
			Main.dust[num4].noGravity = true;
			Main.dust[num4].velocity.X *= 4f;
			Main.dust[num4].velocity.Y *= 4f;
			Main.dust[num4].velocity = (Main.dust[num4].velocity + velocity) / 2f;
		}
		else if (type == 35)
		{
			int num5 = Dust.NewDust(position, width, height, 6, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 3f);
			Main.dust[num5].noGravity = true;
			Main.dust[num5].velocity.X *= 2f;
			Main.dust[num5].velocity.Y *= 2f;
		}
		else if (type == 154)
		{
			int num6 = Dust.NewDust(position, width, height, 115, velocity.X * 0.4f, velocity.Y * 0.4f, 140, default(Color), 1.5f);
			Main.dust[num6].noGravity = true;
			Dust obj = Main.dust[num6];
			obj.velocity *= 0.25f;
		}
	}

	private void AI_100_Medusa()
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_069a: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_06cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_06cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_06fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0701: Unknown result type (might be due to invalid IL or missing references)
		//IL_0706: Unknown result type (might be due to invalid IL or missing references)
		//IL_0707: Unknown result type (might be due to invalid IL or missing references)
		//IL_070c: Unknown result type (might be due to invalid IL or missing references)
		//IL_070d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0713: Unknown result type (might be due to invalid IL or missing references)
		//IL_0718: Unknown result type (might be due to invalid IL or missing references)
		//IL_071d: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0144: Unknown result type (might be due to invalid IL or missing references)
		//IL_0146: Unknown result type (might be due to invalid IL or missing references)
		//IL_0157: Unknown result type (might be due to invalid IL or missing references)
		//IL_015c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_019f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_063c: Unknown result type (might be due to invalid IL or missing references)
		//IL_025a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0274: Unknown result type (might be due to invalid IL or missing references)
		//IL_0279: Unknown result type (might be due to invalid IL or missing references)
		//IL_027e: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0347: Unknown result type (might be due to invalid IL or missing references)
		//IL_034c: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0374: Unknown result type (might be due to invalid IL or missing references)
		//IL_039f: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0415: Unknown result type (might be due to invalid IL or missing references)
		//IL_041a: Unknown result type (might be due to invalid IL or missing references)
		//IL_041c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0421: Unknown result type (might be due to invalid IL or missing references)
		//IL_0425: Unknown result type (might be due to invalid IL or missing references)
		//IL_043b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0442: Unknown result type (might be due to invalid IL or missing references)
		//IL_0449: Unknown result type (might be due to invalid IL or missing references)
		//IL_0450: Unknown result type (might be due to invalid IL or missing references)
		//IL_048a: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0521: Unknown result type (might be due to invalid IL or missing references)
		//IL_0526: Unknown result type (might be due to invalid IL or missing references)
		//IL_058b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0599: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0535: Unknown result type (might be due to invalid IL or missing references)
		//IL_0543: Unknown result type (might be due to invalid IL or missing references)
		//IL_054d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0553: Unknown result type (might be due to invalid IL or missing references)
		//IL_0555: Unknown result type (might be due to invalid IL or missing references)
		//IL_0564: Unknown result type (might be due to invalid IL or missing references)
		//IL_0569: Unknown result type (might be due to invalid IL or missing references)
		//IL_0584: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ea: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[owner];
		Vector2 zero = Vector2.Zero;
		if (type == 535)
		{
			zero.X = (float)player.direction * 6f;
			zero.Y = player.gravDir * -14f;
			bool flag = true;
			bool flag2 = ai[0] > 0f;
			if (!player.dead)
			{
				timeLeft = 3;
			}
			if (ai[0] > 0f)
			{
				ai[0] -= 1f;
			}
			if (flag2)
			{
				if (frame < 8)
				{
					frame = 8;
				}
				if (frame >= 12)
				{
					frame = 8;
				}
				frameCounter++;
				if (++frameCounter >= 5)
				{
					frameCounter = 0;
					if (++frame >= 12)
					{
						frame = 8;
					}
				}
			}
			else if (++frameCounter >= 5)
			{
				frameCounter = 0;
				if (++frame >= 8)
				{
					frame = 0;
				}
			}
			Vector2 center = player.Center;
			Vector2 vector = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - center;
			if (player.gravDir == -1f)
			{
				vector.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - center.Y;
			}
			Vector2 vector2 = default(Vector2);
			((Vector2)(ref vector2))._002Ector((float)Math.Sign((vector.X == 0f) ? ((float)player.direction) : vector.X), 0f);
			if (vector2.X != velocity.X || vector2.Y != velocity.Y)
			{
				netUpdate = true;
			}
			velocity = vector2;
			if (flag2 && soundDelay == 0)
			{
				SoundEngine.PlaySound(4, (int)base.position.X, (int)base.position.Y, 17);
			}
			soundDelay = (flag2 ? 4 : 0);
			if (Main.myPlayer == owner)
			{
				Vector2 position = player.Center + new Vector2((float)(player.direction * 4), player.gravDir * 2f);
				if (!player.channel)
				{
					Kill();
					return;
				}
				if (!flag2 || ai[0] % 15f == 0f)
				{
					bool flag3 = false;
					for (int i = 0; i < 200; i++)
					{
						NPC nPC = Main.npc[i];
						if (nPC.active && Distance(nPC.Center) < 320f && nPC.CanBeChasedBy(this) && Collision.CanHitLine(nPC.position, nPC.width, nPC.height, position, 0, 0))
						{
							flag3 = true;
							break;
						}
					}
					if (flag3 && (!flag || player.CheckMana(player.inventory[player.selectedItem], -1, pay: true)))
					{
						int num = damage;
						position = base.Center;
						int num2 = 0;
						float num3 = 0f;
						_medusaHeadTargetList.Clear();
						for (int j = 0; j < 200; j++)
						{
							NPC nPC2 = Main.npc[j];
							float num4 = Distance(nPC2.Center);
							if (nPC2.active && num4 < 320f && nPC2.CanBeChasedBy(this) && Collision.CanHitLine(nPC2.position, nPC2.width, nPC2.height, position, 0, 0))
							{
								_medusaHeadTargetList.Add(Tuple.Create(j, num4));
							}
						}
						_medusaHeadTargetList.Sort(_medusaTargetComparer);
						for (int k = 0; k < _medusaHeadTargetList.Count && k < 3; k++)
						{
							Tuple<int, float> tuple = _medusaHeadTargetList[k];
							NPC nPC3 = Main.npc[tuple.Item1];
							Vector2 v = nPC3.Center - position;
							num3 += v.ToRotation();
							num2++;
							int num5 = NewProjectile(GetProjectileSource_FromThis(), position.X, position.Y, v.X, v.Y, 536, 0, 0f, owner, whoAmI);
							Main.projectile[num5].Center = nPC3.Center;
							Main.projectile[num5].damage = num;
							Main.projectile[num5].Damage();
							Main.projectile[num5].damage = 0;
							Main.projectile[num5].Center = position;
							ai[0] = 180f;
						}
						num3 = ((num2 != 0) ? (num3 / (float)num2) : ((player.direction == 1) ? 0f : ((float)Math.PI)));
						for (int l = 0; l < 4; l++)
						{
							Vector2 zero2 = Vector2.Zero;
							zero2 = ((Main.rand.Next(4) == 0) ? (Vector2.UnitX.RotatedByRandom(6.2831854820251465) * new Vector2(200f, 50f) * (Main.rand.NextFloat() * 0.7f + 0.3f)) : (Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(num3) * new Vector2(200f, 50f) * (Main.rand.NextFloat() * 0.7f + 0.3f)));
							NewProjectile(GetProjectileSource_FromThis(), position.X, position.Y, zero2.X, zero2.Y, 536, 0, 0f, owner, whoAmI);
						}
						ai[0] = 60f;
						netUpdate = true;
					}
				}
			}
			Lighting.AddLight(base.Center, 0.9f, 0.75f, 0.1f);
		}
		rotation = ((player.gravDir == 1f) ? 0f : ((float)Math.PI));
		spriteDirection = direction;
		timeLeft = 2;
		Vector2 vector3 = Main.OffsetsPlayerOnhand[player.bodyFrame.Y / 56] * 2f;
		if (player.direction != 1)
		{
			vector3.X = (float)player.bodyFrame.Width - vector3.X;
		}
		vector3 -= (player.bodyFrame.Size() - new Vector2((float)player.width, 42f)) / 2f;
		base.Center = (player.position + vector3 + zero - velocity).Floor();
		player.ChangeDir(direction);
		player.heldProj = whoAmI;
		player.SetDummyItemTime(2);
	}

	private void AI_120_StardustGuardian()
	{
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0292: Unknown result type (might be due to invalid IL or missing references)
		//IL_0297: Unknown result type (might be due to invalid IL or missing references)
		//IL_029d: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0555: Unknown result type (might be due to invalid IL or missing references)
		//IL_055a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0323: Unknown result type (might be due to invalid IL or missing references)
		//IL_032d: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_057f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0589: Unknown result type (might be due to invalid IL or missing references)
		//IL_036b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0376: Unknown result type (might be due to invalid IL or missing references)
		//IL_0396: Unknown result type (might be due to invalid IL or missing references)
		//IL_039d: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0408: Unknown result type (might be due to invalid IL or missing references)
		//IL_0413: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_014f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0154: Unknown result type (might be due to invalid IL or missing references)
		//IL_018e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01de: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bca: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_042c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0433: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a30: Unknown result type (might be due to invalid IL or missing references)
		//IL_0796: Unknown result type (might be due to invalid IL or missing references)
		//IL_079d: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_060d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0618: Unknown result type (might be due to invalid IL or missing references)
		//IL_062a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0631: Unknown result type (might be due to invalid IL or missing references)
		//IL_0645: Unknown result type (might be due to invalid IL or missing references)
		//IL_0650: Unknown result type (might be due to invalid IL or missing references)
		//IL_0664: Unknown result type (might be due to invalid IL or missing references)
		//IL_066f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a86: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a91: Unknown result type (might be due to invalid IL or missing references)
		//IL_07cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0688: Unknown result type (might be due to invalid IL or missing references)
		//IL_068f: Unknown result type (might be due to invalid IL or missing references)
		//IL_084b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0856: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0876: Unknown result type (might be due to invalid IL or missing references)
		//IL_087d: Unknown result type (might be due to invalid IL or missing references)
		//IL_049c: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d66: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d93: Unknown result type (might be due to invalid IL or missing references)
		//IL_0db8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e33: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e39: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e50: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ee0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ee5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ef1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ef7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f02: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c05: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c32: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c57: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c61: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c66: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ca0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cca: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ceb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0acd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0add: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b11: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b16: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b23: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b28: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b32: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_08de: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ff: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[owner];
		if (!player.active)
		{
			active = false;
			return;
		}
		bool flag = type == 623;
		Vector2 vector = player.Center;
		float num = 100f;
		float num12 = 500f;
		float num15 = 500f;
		float num16 = 100f;
		bool flag2 = true;
		if (flag)
		{
			if (player.dead)
			{
				player.stardustGuardian = false;
			}
			if (player.stardustGuardian)
			{
				timeLeft = 2;
			}
			num = 150f;
			vector.X -= (5 + player.width / 2) * player.direction;
			vector.Y -= 25f;
			Lighting.AddLight(base.Center, 0.9f, 0.9f, 0.7f);
			if (ai[0] != 3f && alpha == 255)
			{
				alpha = 0;
				for (int i = 0; i < 30; i++)
				{
					int num17 = Dust.NewDust(position, width, height, 135, 0f, 0f, 200, default(Color), 1.7f);
					Main.dust[num17].noGravity = true;
					Dust obj = Main.dust[num17];
					obj.velocity *= 3f;
					Main.dust[num17].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
					num17 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100);
					Dust obj2 = Main.dust[num17];
					obj2.velocity *= 2f;
					Main.dust[num17].noGravity = true;
					Main.dust[num17].fadeIn = 2.5f;
					Main.dust[num17].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
				}
			}
		}
		if (ai[0] != 0f)
		{
			Main.player[owner].tankPet = whoAmI;
			Main.player[owner].tankPetReset = false;
		}
		if (ai[0] == 0f)
		{
			base.Center = Vector2.Lerp(base.Center, vector, 0.05f);
			velocity *= 0.5f;
			direction = (spriteDirection = player.direction);
			if (flag && ++frameCounter >= 9)
			{
				frameCounter = 0;
				if (++frame >= 8)
				{
					frame = 0;
				}
			}
			int targetNPCIndex = -1;
			float distanceToClosestTarget = num12;
			bool flag3 = flag2;
			if (flag && Math.Abs(base.Center.X - vector.X) > num + 20f)
			{
				flag3 = false;
			}
			if (flag3)
			{
				AI_120_StardustGuardian_FindTarget(num12, ref targetNPCIndex, ref distanceToClosestTarget);
			}
			if (targetNPCIndex != -1)
			{
				NPC nPC = Main.npc[targetNPCIndex];
				direction = (spriteDirection = (nPC.Center.X > base.Center.X).ToDirectionInt());
				float num18 = Math.Abs(vector.X - base.Center.X);
				float num19 = Math.Abs(nPC.Center.X - base.Center.X);
				float num20 = Math.Abs(vector.Y - base.Center.Y);
				float num21 = Math.Abs(nPC.Center.Y - base.Bottom.Y);
				float num2 = (nPC.Center.Y > base.Bottom.Y).ToDirectionInt();
				if ((num18 < num || (vector.X - base.Center.X) * (float)direction < 0f) && num19 > 20f && num19 < num - num18 + 100f)
				{
					velocity.X += 0.1f * (float)direction;
				}
				else
				{
					velocity.X *= 0.7f;
				}
				if ((num20 < num16 || (vector.Y - base.Bottom.Y) * num2 < 0f) && num21 > 10f && num21 < num16 - num20 + 10f)
				{
					velocity.Y += 0.1f * num2;
				}
				else
				{
					velocity.Y *= 0.7f;
				}
				if (owner == Main.myPlayer && num19 < num15)
				{
					ai[0] = 2f;
					ai[1] = targetNPCIndex;
					netUpdate = true;
				}
			}
		}
		else if (ai[0] == 1f)
		{
			if (player.HasMinionRestTarget)
			{
				vector = player.MinionRestTargetPoint;
			}
			else
			{
				ai[0] = 0f;
				netUpdate = true;
			}
			int targetNPCIndex2 = -1;
			float distanceToClosestTarget2 = num12;
			bool flag4 = true;
			if (flag && Math.Abs(base.Center.X - vector.X) > num + 20f)
			{
				flag4 = false;
			}
			if (flag4)
			{
				AI_120_StardustGuardian_FindTarget(num12, ref targetNPCIndex2, ref distanceToClosestTarget2);
			}
			if (targetNPCIndex2 != -1)
			{
				NPC nPC2 = Main.npc[targetNPCIndex2];
				direction = (spriteDirection = (nPC2.Center.X > base.Center.X).ToDirectionInt());
				float num3 = Math.Abs(vector.X - base.Center.X);
				float num4 = Math.Abs(nPC2.Center.X - base.Center.X);
				float num5 = Math.Abs(vector.Y - base.Center.Y);
				float num6 = Math.Abs(nPC2.Center.Y - base.Bottom.Y);
				float num7 = (nPC2.Center.Y > base.Bottom.Y).ToDirectionInt();
				if ((num3 < num || (vector.X - base.Center.X) * (float)direction < 0f) && num4 > 20f && num4 < num - num3 + 100f)
				{
					velocity.X += 0.1f * (float)direction;
				}
				else
				{
					velocity.X *= 0.7f;
				}
				if ((num5 < num16 || (vector.Y - base.Bottom.Y) * num7 < 0f) && num6 > 10f && num6 < num16 - num5 + 10f)
				{
					velocity.Y += 0.1f * num7;
				}
				else
				{
					velocity.Y *= 0.7f;
				}
				if (owner == Main.myPlayer && num4 < num15)
				{
					ai[0] = 2f;
					ai[1] = targetNPCIndex2;
					netUpdate = true;
				}
			}
			else
			{
				if (Math.Abs(vector.X - base.Center.X) > num + 40f)
				{
					ai[0] = 3f;
					netUpdate = true;
				}
				else if (Math.Abs(vector.X - base.Center.X) > 20f)
				{
					direction = (spriteDirection = (vector.X > base.Center.X).ToDirectionInt());
					velocity.X += 0.06f * (float)direction;
				}
				else
				{
					velocity.X *= 0.8f;
					direction = (spriteDirection = (player.Center.X < base.Center.X).ToDirectionInt());
				}
				if (Math.Abs(vector.Y - base.Center.Y) > num16)
				{
					ai[0] = 3f;
					netUpdate = true;
				}
				else if (Math.Abs(vector.Y - base.Center.Y) > 10f)
				{
					velocity.Y += 0.06f * (float)Math.Sign(vector.Y - base.Center.Y);
				}
				else
				{
					velocity.Y *= 0.8f;
				}
			}
			if (flag && ++frameCounter >= 9)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type] - 4)
				{
					frame = 0;
				}
			}
		}
		else if (ai[0] == 2f)
		{
			if (flag)
			{
				int num8 = 3;
				if (frame < 12)
				{
					frame = 12;
				}
				if (frame == 12 || frame == 13)
				{
					num8 = 8;
				}
				if (++frameCounter >= num8)
				{
					frameCounter = 0;
					if (++frame >= 19)
					{
						frame = 14;
					}
				}
			}
			bool flag5 = false;
			if (flag2)
			{
				flag5 = Distance(player.Center) < num12;
			}
			NPC nPC3 = null;
			int num9 = (int)ai[1];
			if (Main.npc.IndexInRange(num9))
			{
				nPC3 = Main.npc[num9];
				if (!nPC3.CanBeChasedBy(this) || Distance(nPC3.Center) > num15)
				{
					nPC3 = null;
				}
			}
			if (!flag5 || nPC3 == null)
			{
				ai[1] = 0f;
				ai[0] = 0f;
				netUpdate = true;
				if (frame < 18)
				{
					frame = 18;
				}
			}
			else
			{
				int num10 = (((nPC3.Center - player.Center).X > 1f) ? 1 : (-1));
				Vector2 targetPosition = nPC3.Center + new Vector2((float)(-num10) * ((float)nPC3.width * 0.5f + 70f), -10f) - base.Center;
				float maxAmountAllowedToMove = 6f * Utils.Remap(((Vector2)(ref targetPosition)).Length(), 50f, 400f, 1f, 4f);
				int num11 = 32;
				Vector2 targetPosition2 = Vector2.Zero.MoveTowards(targetPosition, maxAmountAllowedToMove);
				velocity = velocity.MoveTowards(targetPosition2, num11);
				direction = (spriteDirection = num10);
				if (localAI[0]++ >= 3f)
				{
					localAI[0] = 0f;
					int targetNPCIndex3 = -1;
					float distanceToClosestTarget3 = -1f;
					AI_120_StardustGuardian_FindTarget(num12, ref targetNPCIndex3, ref distanceToClosestTarget3);
					if (targetNPCIndex3 != -1)
					{
						ai[1] = targetNPCIndex3;
						netUpdate = true;
					}
				}
			}
		}
		else
		{
			_ = ai[0];
		}
		if (ai[0] != 3f)
		{
			return;
		}
		if (player.HasMinionRestTarget)
		{
			vector = player.MinionRestTargetPoint;
		}
		else
		{
			ai[0] = 0f;
			netUpdate = true;
		}
		if (alpha == 0)
		{
			alpha = 255;
			for (int j = 0; j < 30; j++)
			{
				int num13 = Dust.NewDust(position, width, height, 135, 0f, 0f, 200, default(Color), 1.7f);
				Main.dust[num13].noGravity = true;
				Dust obj3 = Main.dust[num13];
				obj3.velocity *= 3f;
				Main.dust[num13].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
				num13 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100);
				Dust obj4 = Main.dust[num13];
				obj4.velocity *= 2f;
				Main.dust[num13].noGravity = true;
				Main.dust[num13].fadeIn = 2.5f;
				Main.dust[num13].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
			}
		}
		else
		{
			for (int k = 0; k < 2; k++)
			{
				int num14 = Dust.NewDust(position, width, height, 135, 0f, 0f, 200, default(Color), 1.7f);
				Main.dust[num14].noGravity = true;
				Dust obj5 = Main.dust[num14];
				obj5.velocity *= 3f;
				Main.dust[num14].noLight = true;
				Main.dust[num14].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
				num14 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100);
				Dust obj6 = Main.dust[num14];
				obj6.velocity *= 2f;
				Main.dust[num14].noGravity = true;
				Main.dust[num14].fadeIn = 2.5f;
				Main.dust[num14].noLight = true;
				Main.dust[num14].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
			}
		}
		velocity *= 0.7f;
		base.Center = Vector2.Lerp(base.Center, vector, 0.2f);
		if (Distance(vector) < 10f)
		{
			ai[0] = 1f;
			netUpdate = true;
		}
	}

	private void AI_120_StardustGuardian_FindTarget(float lookupRange, ref int targetNPCIndex, ref float distanceToClosestTarget)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		Vector2 center = Main.player[owner].Center;
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = Main.npc[i];
			if (nPC.CanBeChasedBy(this))
			{
				float num = center.Distance(nPC.Center);
				if (num < lookupRange)
				{
					targetNPCIndex = i;
					distanceToClosestTarget = num;
					lookupRange = num;
				}
			}
		}
	}

	private void AI_180_FairyQueenSunDance()
	{
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_0170: Unknown result type (might be due to invalid IL or missing references)
		//IL_0175: Unknown result type (might be due to invalid IL or missing references)
		//IL_0179: Unknown result type (might be due to invalid IL or missing references)
		//IL_0184: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_01af: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ce: Unknown result type (might be due to invalid IL or missing references)
		if (localAI[0] == 0f)
		{
			SoundEngine.PlaySound(in SoundID.Item159, base.Center);
		}
		localAI[0] += 1f;
		float num = 180f;
		_ = ai[0] / ((float)Math.PI * 2f);
		float num2 = (float)Math.PI / 9f;
		if (localAI[0] >= num)
		{
			Kill();
			return;
		}
		alpha -= 15;
		if (alpha < 0)
		{
			alpha = 0;
		}
		scale = Utils.GetLerpValue(0f, 20f, localAI[0], clamped: true) * Utils.GetLerpValue(num, num - 60f, localAI[0], clamped: true);
		float lerpValue = Utils.GetLerpValue(50f, num, localAI[0], clamped: true);
		rotation = ai[0] + lerpValue * num2;
		int num3 = (int)ai[1];
		if (Main.npc.IndexInRange(num3))
		{
			NPC nPC = Main.npc[num3];
			if (nPC.active && nPC.type == 636)
			{
				base.Center = nPC.Center;
			}
			velocity = Vector2.Zero;
			Vector2 vector = rotation.ToRotationVector2();
			Color val = Main.hslToRgb((ai[0] / ((float)Math.PI * 2f) + localAI[0] / num) % 1f, 1f, 0.85f);
			Vector3 v3_ = ((Color)(ref val)).ToVector3() * scale;
			float num4 = 800f * scale;
			DelegateMethods.v3_1 = v3_;
			for (float num5 = 0f; num5 <= 1f; num5 += 1f / 12f)
			{
				Point point = (base.Center + vector * num4 * num5).ToTileCoordinates();
				DelegateMethods.CastLightOpen(point.X, point.Y);
			}
		}
		else
		{
			Kill();
		}
	}

	private void AI_179_FairyQueenLance()
	{
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		localAI[0] += 1f;
		if (localAI[0] >= 60f)
		{
			velocity = ai[0].ToRotationVector2() * 40f;
			if (Main.rand.Next(3) == 0)
			{
				Dust dust = Dust.NewDustPerfect(base.Center, 267);
				dust.fadeIn = 1f;
				dust.noGravity = true;
				dust.alpha = 100;
				dust.color = Color.Lerp(AI_171_GetColor(), Color.White, Main.rand.NextFloat() * 0.4f);
				dust.noLightEmittence = true;
				dust.scale *= 1.5f;
			}
		}
		if (localAI[0] >= 360f)
		{
			Kill();
			return;
		}
		alpha = (int)MathHelper.Lerp(255f, 0f, Utils.GetLerpValue(0f, 20f, localAI[0], clamped: true));
		rotation = ai[0];
	}

	private void AI_176_EdgyLightning()
	{
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		int num = (int)ai[0] - 1;
		if (num != -1 && (!Main.npc[num].CanBeChasedBy(this) || localNPCImmunity[num] != 0))
		{
			ai[0] = 0f;
			num = -1;
		}
		if (num == -1)
		{
			NPC nPC = FindTargetWithinRange(400f);
			if (nPC != null)
			{
				num = nPC.whoAmI;
				ai[0] = num + 1;
				netUpdate = true;
			}
		}
		if (num != -1)
		{
			NPC nPC2 = Main.npc[num];
			Vector2 vector = DirectionTo(nPC2.Center);
			float num2 = 10f;
			if (!vector.HasNaNs())
			{
				velocity = vector * num2;
				rotation = velocity.ToRotation();
			}
			if (++frameCounter >= 3)
			{
				frameCounter = 0;
				frame = Main.rand.Next(Main.projFrames[type]);
			}
		}
		else
		{
			Kill();
		}
	}

	public NPC FindTargetWithinRange(float maxRange, bool checkCanHit = false)
	{
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		NPC result = null;
		float num = maxRange;
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = Main.npc[i];
			if (nPC.CanBeChasedBy(this) && localNPCImmunity[i] == 0 && (!checkCanHit || Collision.CanHitLine(position, width, height, nPC.position, nPC.width, nPC.height)))
			{
				float num2 = Distance(nPC.Center);
				if (!(num <= num2))
				{
					num = num2;
					result = nPC;
				}
			}
		}
		return result;
	}

	private void AI_177_IceWhipSlicer()
	{
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0377: Unknown result type (might be due to invalid IL or missing references)
		//IL_0381: Unknown result type (might be due to invalid IL or missing references)
		//IL_0386: Unknown result type (might be due to invalid IL or missing references)
		//IL_0339: Unknown result type (might be due to invalid IL or missing references)
		//IL_033f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0344: Unknown result type (might be due to invalid IL or missing references)
		//IL_0349: Unknown result type (might be due to invalid IL or missing references)
		//IL_034e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0350: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_035b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0360: Unknown result type (might be due to invalid IL or missing references)
		//IL_0363: Unknown result type (might be due to invalid IL or missing references)
		//IL_0369: Unknown result type (might be due to invalid IL or missing references)
		//IL_036e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0310: Unknown result type (might be due to invalid IL or missing references)
		//IL_0315: Unknown result type (might be due to invalid IL or missing references)
		//IL_0318: Unknown result type (might be due to invalid IL or missing references)
		//IL_031e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0323: Unknown result type (might be due to invalid IL or missing references)
		//IL_05bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0601: Unknown result type (might be due to invalid IL or missing references)
		//IL_0606: Unknown result type (might be due to invalid IL or missing references)
		//IL_060a: Unknown result type (might be due to invalid IL or missing references)
		//IL_060f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0616: Unknown result type (might be due to invalid IL or missing references)
		//IL_061b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0620: Unknown result type (might be due to invalid IL or missing references)
		//IL_0625: Unknown result type (might be due to invalid IL or missing references)
		//IL_0627: Unknown result type (might be due to invalid IL or missing references)
		//IL_0407: Unknown result type (might be due to invalid IL or missing references)
		//IL_0434: Unknown result type (might be due to invalid IL or missing references)
		//IL_043a: Unknown result type (might be due to invalid IL or missing references)
		//IL_047f: Unknown result type (might be due to invalid IL or missing references)
		//IL_048e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0493: Unknown result type (might be due to invalid IL or missing references)
		//IL_0499: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_04bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_051c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0526: Unknown result type (might be due to invalid IL or missing references)
		//IL_0535: Unknown result type (might be due to invalid IL or missing references)
		//IL_053a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0540: Unknown result type (might be due to invalid IL or missing references)
		//IL_054a: Unknown result type (might be due to invalid IL or missing references)
		//IL_054f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0554: Unknown result type (might be due to invalid IL or missing references)
		//IL_055a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0560: Unknown result type (might be due to invalid IL or missing references)
		//IL_056a: Unknown result type (might be due to invalid IL or missing references)
		//IL_056f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0574: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[owner];
		if (type == 917 && (!player.active || player.dead))
		{
			player.coolWhipBuff = false;
			Kill();
			return;
		}
		if (type == 917 && player.coolWhipBuff)
		{
			timeLeft = 2;
		}
		if (type == 969)
		{
			if (soundDelay == 0)
			{
				soundDelay = -1;
				localAI[1] = SoundEngine.PlayTrackedSound(in SoundID.DD2_BookStaffTwisterLoop, base.Center).ToFloat();
			}
			ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
			if (activeSound != null)
			{
				activeSound.Position = base.Center;
				activeSound.Volume = 1f - Math.Max(ai[1] - 555f, 0f) / 15f;
			}
			else
			{
				localAI[1] = SlotId.Invalid.ToFloat();
			}
			ai[1] += 1f;
			if (ai[1] > 560f)
			{
				alpha = (int)MathHelper.Lerp(0f, 250f, (ai[1] - 560f) / 10f);
			}
			if (ai[1] >= 570f)
			{
				Kill();
			}
			float num = 555f;
			for (int i = 0; i < 1000; i++)
			{
				if (i != whoAmI && Main.projectile[i].active && Main.projectile[i].owner == owner && Main.projectile[i].type == type && timeLeft > Main.projectile[i].timeLeft && Main.projectile[i].ai[1] < num)
				{
					Main.projectile[i].ai[1] = num;
					Main.projectile[i].netUpdate = true;
				}
			}
		}
		int num2 = (int)ai[0] - 1;
		if (num2 != -1 && (!Main.npc[num2].CanBeChasedBy(this) || localNPCImmunity[num2] > 0))
		{
			ai[0] = 0f;
			num2 = -1;
		}
		if (num2 == -1)
		{
			bool checkCanHit = false;
			if (type == 969)
			{
				checkCanHit = true;
			}
			NPC nPC = FindTargetWithinRange(400f, checkCanHit);
			if (nPC != null)
			{
				num2 = nPC.whoAmI;
				ai[0] = num2 + 1;
				netUpdate = true;
			}
		}
		float num3 = 18f;
		float amount = 0.1f;
		float num4 = 0f;
		if (type == 969)
		{
			num3 = 8f;
			amount = 0.075f;
			num4 = 25f;
		}
		if (num2 != -1)
		{
			NPC nPC2 = Main.npc[num2];
			float num5 = Distance(nPC2.Center);
			if (num3 > num5)
			{
				num3 = num5;
			}
			Vector2 vector = DirectionTo(nPC2.Center);
			if (!vector.HasNaNs() && num5 >= num4)
			{
				velocity = Vector2.Lerp(velocity, vector * num3, amount);
			}
		}
		else if (type == 969)
		{
			Vector2 vector2 = DirectionTo(base.Center + velocity);
			if (!vector2.HasNaNs())
			{
				velocity = Vector2.Lerp(velocity, vector2 * num3, amount);
			}
		}
		else
		{
			velocity *= 0.92f;
		}
		if (type == 969)
		{
			rotation = velocity.X * 0.0125f;
			if (++frameCounter > 4)
			{
				frameCounter = 0;
				frame++;
				if (frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			if (timeLeft % 3 == 0)
			{
				int num6 = Dust.NewDust(position, width, height, 16, velocity.X, velocity.Y, 120, default(Color), 0.5f);
				Main.dust[num6].noGravity = true;
				Main.dust[num6].fadeIn = 0.9f;
				Main.dust[num6].velocity = Main.rand.NextVector2Circular(2f, 2f) + new Vector2(0f, -2f) + velocity * 0.75f;
				for (int j = 0; j < 2; j++)
				{
					Dust dust = Dust.NewDustDirect(position, width, height, 16, velocity.X, velocity.Y, 60, default(Color), 0.5f);
					dust.noGravity = true;
					dust.fadeIn = 0.7f;
					dust.velocity = Main.rand.NextVector2Circular(2f, 2f) * 0.2f + new Vector2(0f, -0.4f) + velocity * 1.5f;
					dust.position -= velocity * 3f;
				}
			}
		}
		else
		{
			rotation += 0.020943953f + Math.Abs(velocity.X) * 0.2f;
			if (Main.rand.Next(3) == 0)
			{
				Dust dust2 = Dust.NewDustDirect(base.Center, 0, 0, 43, velocity.X, velocity.Y, 254, Color.White, 0.5f);
				Vector2 vector3 = Main.rand.NextVector2Circular(1f, 1f);
				dust2.position = base.Center + vector3 * 10f;
				dust2.velocity = vector3;
			}
		}
	}

	private void AI_178_FireExplosion()
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0114: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_0135: Unknown result type (might be due to invalid IL or missing references)
		//IL_0143: Unknown result type (might be due to invalid IL or missing references)
		//IL_0153: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0169: Unknown result type (might be due to invalid IL or missing references)
		//IL_016e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0173: Unknown result type (might be due to invalid IL or missing references)
		//IL_018f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0199: Unknown result type (might be due to invalid IL or missing references)
		//IL_019e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01df: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0208: Unknown result type (might be due to invalid IL or missing references)
		//IL_0218: Unknown result type (might be due to invalid IL or missing references)
		//IL_0224: Unknown result type (might be due to invalid IL or missing references)
		//IL_022e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0233: Unknown result type (might be due to invalid IL or missing references)
		//IL_0238: Unknown result type (might be due to invalid IL or missing references)
		//IL_0246: Unknown result type (might be due to invalid IL or missing references)
		//IL_0250: Unknown result type (might be due to invalid IL or missing references)
		//IL_0255: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02df: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0305: Unknown result type (might be due to invalid IL or missing references)
		//IL_030b: Unknown result type (might be due to invalid IL or missing references)
		//IL_030d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0319: Unknown result type (might be due to invalid IL or missing references)
		//IL_0323: Unknown result type (might be due to invalid IL or missing references)
		//IL_0328: Unknown result type (might be due to invalid IL or missing references)
		//IL_032d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0349: Unknown result type (might be due to invalid IL or missing references)
		//IL_0353: Unknown result type (might be due to invalid IL or missing references)
		//IL_0358: Unknown result type (might be due to invalid IL or missing references)
		//IL_038a: Unknown result type (might be due to invalid IL or missing references)
		//IL_03aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03df: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0400: Unknown result type (might be due to invalid IL or missing references)
		//IL_040a: Unknown result type (might be due to invalid IL or missing references)
		//IL_040f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0414: Unknown result type (might be due to invalid IL or missing references)
		//IL_0430: Unknown result type (might be due to invalid IL or missing references)
		//IL_043a: Unknown result type (might be due to invalid IL or missing references)
		//IL_043f: Unknown result type (might be due to invalid IL or missing references)
		//IL_045c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0495: Unknown result type (might be due to invalid IL or missing references)
		//IL_049a: Unknown result type (might be due to invalid IL or missing references)
		//IL_049f: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0503: Unknown result type (might be due to invalid IL or missing references)
		//IL_050f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0519: Unknown result type (might be due to invalid IL or missing references)
		//IL_051e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0523: Unknown result type (might be due to invalid IL or missing references)
		//IL_0531: Unknown result type (might be due to invalid IL or missing references)
		//IL_053b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0540: Unknown result type (might be due to invalid IL or missing references)
		if (localAI[0] == 0f)
		{
			SoundEngine.PlaySound(in SoundID.Item14, position);
			for (int i = 0; i < 4; i++)
			{
				int num = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
			}
			for (int j = 0; j < 30; j++)
			{
				int num2 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 200, default(Color), 3.7f);
				Main.dust[num2].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				Main.dust[num2].noGravity = true;
				Dust obj = Main.dust[num2];
				obj.velocity *= 3f;
				num2 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num2].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				Dust obj2 = Main.dust[num2];
				obj2.velocity *= 2f;
				Main.dust[num2].noGravity = true;
				Main.dust[num2].fadeIn = 2.5f;
			}
			for (int k = 0; k < 10; k++)
			{
				int num3 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.7f);
				Main.dust[num3].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * (float)width / 2f;
				Main.dust[num3].noGravity = true;
				Dust obj3 = Main.dust[num3];
				obj3.velocity *= 3f;
			}
			for (int l = 0; l < 10; l++)
			{
				int num4 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
				Main.dust[num4].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * (float)width / 2f;
				Main.dust[num4].noGravity = true;
				Dust obj4 = Main.dust[num4];
				obj4.velocity *= 3f;
			}
			for (int m = 0; m < 2; m++)
			{
				int num5 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Main.gore[num5].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				Gore obj5 = Main.gore[num5];
				obj5.velocity *= 0.3f;
				Main.gore[num5].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num5].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
		}
		localAI[0] += 1f;
		if (localAI[0] >= 10f)
		{
			Kill();
		}
	}

	private void AI_175_TitaniumStormShards()
	{
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_010e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0113: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[owner];
		if (!player.active || player.dead || !player.hasTitaniumStormBuff)
		{
			Kill();
			return;
		}
		if (frameCounter == 0)
		{
			frameCounter = 1;
			frame = Main.rand.Next(12);
			rotation = Main.rand.NextFloat() * ((float)Math.PI * 2f);
		}
		rotation += (float)Math.PI / 200f;
		AI_GetMyGroupIndexAndFillBlackList(null, out var index, out var totalIndexesInGroup);
		float f = ((float)index / (float)totalIndexesInGroup + player.miscCounterNormalized * 6f) * ((float)Math.PI * 2f);
		float num = 24f + (float)totalIndexesInGroup * 6f;
		Vector2 vector = player.position - player.oldPosition;
		base.Center += vector;
		Vector2 vector2 = f.ToRotationVector2();
		localAI[0] = vector2.Y;
		Vector2 value = player.Center + vector2 * new Vector2(1f, 0.05f) * num;
		base.Center = Vector2.Lerp(base.Center, value, 0.3f);
	}

	private void AI_174_MultisegmentPet()
	{
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0114: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_013e: Unknown result type (might be due to invalid IL or missing references)
		//IL_017e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0187: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_0148: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0152: Unknown result type (might be due to invalid IL or missing references)
		//IL_015c: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_020e: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[owner];
		if (!player.active)
		{
			active = false;
			return;
		}
		if (type == 883)
		{
			if (player.dead)
			{
				player.petFlagEaterOfWorldsPet = false;
			}
			if (player.petFlagEaterOfWorldsPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 887)
		{
			if (player.dead)
			{
				player.petFlagDestroyerPet = false;
			}
			if (player.petFlagDestroyerPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 893)
		{
			if (player.dead)
			{
				player.petFlagLunaticCultistPet = false;
			}
			if (player.petFlagLunaticCultistPet)
			{
				timeLeft = 2;
			}
		}
		Vector2 center = player.Center;
		if (Distance(center) > 2000f)
		{
			base.Center = center;
			velocity = Vector2.Zero;
			netUpdate = true;
		}
		Vector2 val = center - base.Center;
		float num = ((Vector2)(ref val)).Length();
		float num2 = Math.Min(12f, Math.Max(4f, ((Vector2)(ref player.velocity)).Length()));
		((Vector2)(ref velocity)).Length();
		if (velocity == Vector2.Zero)
		{
			velocity.X = 2f * (float)player.direction;
			Vector2 vector = position;
			for (int i = 0; i < oldPos.Length; i++)
			{
				vector -= velocity;
				oldPos[i] = vector;
			}
		}
		if (!(num < 120f))
		{
			float targetAngle = AngleTo(center);
			float f = velocity.ToRotation().AngleTowards(targetAngle, MathHelper.ToRadians(5f));
			velocity = f.ToRotationVector2() * num2;
		}
		if (((Vector2)(ref velocity)).Length() > num2)
		{
			velocity = velocity.SafeNormalize(Vector2.Zero) * num2;
		}
		if (Math.Abs(velocity.Y) < 1f)
		{
			velocity.Y -= 0.1f;
		}
		rotation = velocity.ToRotation() + (float)Math.PI / 2f;
		int num3 = direction;
		direction = (spriteDirection = ((velocity.X > 0f) ? 1 : (-1)));
		if (num3 != direction)
		{
			netUpdate = true;
		}
		position.X = MathHelper.Clamp(position.X, 160f, (float)(Main.maxTilesX * 16 - 160));
		position.Y = MathHelper.Clamp(position.Y, 160f, (float)(Main.maxTilesY * 16 - 160));
	}

	private void AI_173_HallowBossRainbowTrail()
	{
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		Opacity = Utils.GetLerpValue(0f, 60f, timeLeft, clamped: true) * Utils.GetLerpValue(660f, 600f, timeLeft, clamped: true);
		float num = (float)Math.PI / 360f;
		float num2 = 30f;
		velocity = velocity.RotatedBy(ai[0]);
		if (ai[0] < num)
		{
			ai[0] += num / num2;
		}
		rotation = velocity.ToRotation() + (float)Math.PI / 2f;
	}

	public Color AI_173_GetColor()
	{
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		if (NPC.ShouldEmpressBeEnraged())
		{
			float lerpValue = Utils.GetLerpValue(0f, 60f, (int)Main.time, clamped: true);
			return Color.Lerp(Color.White, Main.OurFavoriteColor, lerpValue) * Opacity;
		}
		return Main.hslToRgb((ai[1] + 0f) % 1f, 1f, 0.5f) * Opacity;
	}

	private void AI_171_HallowBossRainbowStreak()
	{
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0184: Unknown result type (might be due to invalid IL or missing references)
		//IL_0189: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0377: Unknown result type (might be due to invalid IL or missing references)
		//IL_024c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0251: Unknown result type (might be due to invalid IL or missing references)
		//IL_0301: Unknown result type (might be due to invalid IL or missing references)
		//IL_0306: Unknown result type (might be due to invalid IL or missing references)
		//IL_030a: Unknown result type (might be due to invalid IL or missing references)
		//IL_030f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0276: Unknown result type (might be due to invalid IL or missing references)
		//IL_027b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0282: Unknown result type (might be due to invalid IL or missing references)
		//IL_0287: Unknown result type (might be due to invalid IL or missing references)
		//IL_0323: Unknown result type (might be due to invalid IL or missing references)
		//IL_034e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0353: Unknown result type (might be due to invalid IL or missing references)
		//IL_02be: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cf: Unknown result type (might be due to invalid IL or missing references)
		bool flag = false;
		bool flag2 = false;
		float num = 140f;
		float num2 = 30f;
		float num3 = 0.98f;
		float value = 0.05f;
		float value2 = 0.1f;
		float num4 = 30f;
		if (type == 931)
		{
			num = 180f;
			num2 = 20f;
			num4 = 30f;
			num3 = 0.97f;
			value = 0.075f;
			value2 = 0.125f;
			if (timeLeft == 238)
			{
				int num5 = alpha;
				alpha = 0;
				Color fairyQueenWeaponsColor = GetFairyQueenWeaponsColor();
				alpha = num5;
				for (int i = 0; i < 3; i++)
				{
					Dust dust = Dust.NewDustPerfect(base.Center, 267, Main.rand.NextVector2CircularEdge(3f, 3f) * (Main.rand.NextFloat() * 0.5f + 0.5f), 0, fairyQueenWeaponsColor);
					dust.scale *= 1.2f;
					dust.noGravity = true;
				}
			}
		}
		if ((float)timeLeft > num)
		{
			flag = true;
		}
		else if ((float)timeLeft > num2)
		{
			flag2 = true;
		}
		if (flag)
		{
			float num6 = (float)Math.Cos((float)whoAmI % 6f / 6f + position.X / 320f + position.Y / 160f);
			velocity *= num3;
			velocity = velocity.RotatedBy(num6 * ((float)Math.PI * 2f) * 0.125f * 1f / 30f);
		}
		if (friendly)
		{
			int num7 = (int)ai[0];
			if (Main.npc.IndexInRange(num7) && !Main.npc[num7].CanBeChasedBy(this))
			{
				num7 = -1;
				ai[0] = -1f;
				netUpdate = true;
			}
			if (num7 == -1)
			{
				int num8 = FindTargetWithLineOfSight();
				if (num8 != -1)
				{
					num7 = num8;
					ai[0] = num8;
					netUpdate = true;
				}
			}
		}
		if (flag2)
		{
			int num9 = (int)ai[0];
			Vector2 value3 = velocity;
			if (hostile && Main.player.IndexInRange(num9))
			{
				Player player = Main.player[num9];
				value3 = DirectionTo(player.Center) * num4;
			}
			if (friendly)
			{
				if (Main.npc.IndexInRange(num9))
				{
					if (timeLeft < 10)
					{
						timeLeft = 10;
					}
					NPC nPC = Main.npc[num9];
					value3 = DirectionTo(nPC.Center) * num4;
				}
				else
				{
					timeLeft--;
				}
			}
			float amount = MathHelper.Lerp(value, value2, Utils.GetLerpValue(num, 30f, timeLeft, clamped: true));
			velocity = Vector2.SmoothStep(velocity, value3, amount);
			if (type == 931)
			{
				velocity *= MathHelper.Lerp(0.85f, 1f, Utils.GetLerpValue(0f, 90f, timeLeft, clamped: true));
			}
		}
		Opacity = Utils.GetLerpValue(240f, 220f, timeLeft, clamped: true);
		rotation = velocity.ToRotation() + (float)Math.PI / 2f;
	}

	public Color AI_171_GetColor()
	{
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		if (NPC.ShouldEmpressBeEnraged())
		{
			float lerpValue = Utils.GetLerpValue(0f, 60f, (int)Main.time, clamped: true);
			return Color.Lerp(Color.White, Main.OurFavoriteColor, lerpValue) * Opacity;
		}
		return Main.hslToRgb((ai[1] + 0.5f) % 1f, 1f, 0.5f) * Opacity;
	}

	private void AI_172_HallowBossRainbowPelletStorm()
	{
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0114: Unknown result type (might be due to invalid IL or missing references)
		if (localAI[1] <= 90f)
		{
			localAI[1] += 1f;
			scale = 0.5f;
			Opacity = 0.5f;
			float lerpValue = Utils.GetLerpValue(0f, 90f, localAI[1]);
			scale = MathHelper.Lerp(5f, 1f, lerpValue);
			Opacity = 1f - (1f - lerpValue * lerpValue);
			return;
		}
		scale = 1f;
		Opacity = 1f;
		float num = 150f + 10f * (float)AI_172_GetPelletStormsCount();
		localAI[0] += 1f;
		if (localAI[0] >= num)
		{
			Kill();
			return;
		}
		velocity = Vector2.Zero;
		rotation = 0f;
		int num2 = AI_172_GetPelletStormsCount();
		for (int i = 0; i < num2; i++)
		{
			HallowBossPelletStormInfo hallowBossPelletStormInfo = AI_172_GetPelletStormInfo(i);
			for (int j = 0; j < hallowBossPelletStormInfo.BulletsInStorm; j++)
			{
				if (hallowBossPelletStormInfo.IsValid(j))
				{
					hallowBossPelletStormInfo.GetBulletPosition(j, base.Center);
				}
			}
		}
	}

	public int AI_172_GetPelletStormsCount()
	{
		return 6;
	}

	public HallowBossPelletStormInfo AI_172_GetPelletStormInfo(int stormIndex)
	{
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		float from = 0f + (float)stormIndex * 10f;
		float to = 90f + (float)stormIndex * 10f;
		HallowBossPelletStormInfo result = default(HallowBossPelletStormInfo);
		result.StartAngle = (float)stormIndex * ((float)Math.PI / 3f) - (float)Math.PI / 2f + (float)stormIndex * ((float)Math.PI / 5f);
		result.AnglePerBullet = (float)Math.PI * 2f / 3f;
		result.BulletsInStorm = 3;
		result.BulletsProgressInStormStartNormalized = Utils.GetLerpValue(from, to, localAI[0]);
		result.BulletsProgressInStormBonusByIndexNormalized = 0f;
		result.StormTotalRange = 500f;
		result.BulletSize = new Vector2(16f, 16f);
		return result;
	}

	/// <summary>
	/// Finds the closest NPC to this projectile which can be targeted and which it has line of sight to.
	/// </summary>
	/// <param name="maxRange">
	/// The maximum range at which this projectile should search out a target, measured in pixels.<br />
	/// Defaults to 800 (50 tiles). Each tile, for reference, measures out to be 16x16 pixels.
	/// </param>
	/// <returns>The index, in <see cref="F:Terraria.Main.npc" />, of the closest targetable NPC.</returns>
	public int FindTargetWithLineOfSight(float maxRange = 800f)
	{
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		float num = maxRange;
		int result = -1;
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = Main.npc[i];
			bool flag = nPC.CanBeChasedBy(this);
			if (localNPCImmunity[i] != 0)
			{
				flag = false;
			}
			if (flag)
			{
				float num2 = Distance(Main.npc[i].Center);
				if (num2 < num && Collision.CanHit(position, width, height, nPC.position, nPC.width, nPC.height))
				{
					num = num2;
					result = i;
				}
			}
		}
		return result;
	}

	private void AI_170_FairyGlowstick()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_0175: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_0189: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0192: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_0116: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0143: Unknown result type (might be due to invalid IL or missing references)
		//IL_0148: Unknown result type (might be due to invalid IL or missing references)
		//IL_014a: Unknown result type (might be due to invalid IL or missing references)
		//IL_014b: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0152: Unknown result type (might be due to invalid IL or missing references)
		Point p = base.Center.ToTileCoordinates();
		Vector2 vector = p.ToVector2();
		int num = 10;
		Vector2 zero = Vector2.Zero;
		int num2 = 0;
		float num3 = 3f;
		if (ai[1] == 1f)
		{
			SoundEngine.PlaySound(in SoundID.Item28, position);
			rotation = 0f;
			velocity.X = 0f;
			ai[1] = 2f;
		}
		frameCounter++;
		if (frameCounter > 4)
		{
			frameCounter = 0;
			frame++;
			if (frame >= Main.projFrames[type])
			{
				frame = 0;
			}
		}
		if (((Vector2)(ref velocity)).Length() > 1f && timeLeft % 10 == 0)
		{
			for (int i = p.X - num; i < p.X + num + 1; i++)
			{
				for (int j = p.Y - num; j < p.Y + num + 1; j++)
				{
					if (WorldGen.SolidTile(i, j))
					{
						Vector2 v = vector - new Vector2((float)i, (float)j);
						Vector2 vector2 = v.SafeNormalize(Vector2.Zero) * Math.Max((float)num - ((Vector2)(ref v)).Length(), 0f);
						vector2 *= num3;
						zero += vector2;
						num2++;
					}
				}
			}
			if (num2 > 0)
			{
				zero /= (float)num2;
			}
			if (((Vector2)(ref zero)).Length() > 1f)
			{
				velocity = zero;
			}
		}
		velocity *= 0.95f;
		if (((Vector2)(ref velocity)).Length() < 1f)
		{
			velocity = Vector2.Zero;
			netUpdate = true;
		}
	}

	private void AI_169_Smolstars()
	{
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_016a: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_0397: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0182: Unknown result type (might be due to invalid IL or missing references)
		//IL_0195: Unknown result type (might be due to invalid IL or missing references)
		//IL_019a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_0431: Unknown result type (might be due to invalid IL or missing references)
		//IL_01da: Unknown result type (might be due to invalid IL or missing references)
		//IL_01df: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0469: Unknown result type (might be due to invalid IL or missing references)
		//IL_046f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0474: Unknown result type (might be due to invalid IL or missing references)
		//IL_0479: Unknown result type (might be due to invalid IL or missing references)
		//IL_0483: Unknown result type (might be due to invalid IL or missing references)
		//IL_0485: Unknown result type (might be due to invalid IL or missing references)
		//IL_0286: Unknown result type (might be due to invalid IL or missing references)
		//IL_02be: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_032d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0341: Unknown result type (might be due to invalid IL or missing references)
		//IL_0346: Unknown result type (might be due to invalid IL or missing references)
		//IL_034b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0204: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04be: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_049b: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0304: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[owner];
		bool num9 = type == 864;
		Vector2 vector = player.Top + new Vector2(0f, -30f);
		if (num9)
		{
			if (player.dead)
			{
				player.smolstar = false;
			}
			if (player.smolstar)
			{
				timeLeft = 2;
			}
			if (ai[0] == 0f)
			{
				AI_GetMyGroupIndexAndFillBlackList(null, out var index, out var totalIndexesInGroup);
				float num2 = (float)Math.PI * 2f / (float)totalIndexesInGroup;
				float num3 = (float)totalIndexesInGroup * 0.66f;
				Vector2 vector2 = new Vector2(30f, 6f) / 5f * (float)(totalIndexesInGroup - 1);
				Vector2 vector3 = Vector2.UnitY.RotatedBy(num2 * (float)index + Main.GlobalTimeWrappedHourly % num3 / num3 * ((float)Math.PI * 2f));
				vector += vector3 * vector2;
				vector.Y += player.gfxOffY;
				vector = vector.Floor();
			}
		}
		if (ai[0] == 0f)
		{
			Vector2 vector4 = vector - base.Center;
			float num4 = 10f;
			float lerpValue = Utils.GetLerpValue(200f, 600f, ((Vector2)(ref vector4)).Length(), clamped: true);
			num4 += lerpValue * 30f;
			if (((Vector2)(ref vector4)).Length() >= 3000f)
			{
				base.Center = vector;
			}
			velocity = vector4;
			if (((Vector2)(ref velocity)).Length() > num4)
			{
				velocity *= num4 / ((Vector2)(ref velocity)).Length();
			}
			int startAttackRange = 800;
			int attackTarget = -1;
			Minion_FindTargetInRange(startAttackRange, ref attackTarget, skipIfCannotHitWithOwnBody: false);
			if (attackTarget != -1)
			{
				ai[0] = 60f;
				ai[1] = attackTarget;
				netUpdate = true;
			}
			float targetAngle = velocity.SafeNormalize(Vector2.UnitY).ToRotation() + (float)Math.PI / 2f;
			if (((Vector2)(ref vector4)).Length() < 40f)
			{
				targetAngle = Vector2.UnitY.ToRotation() + (float)Math.PI / 2f;
			}
			rotation = rotation.AngleLerp(targetAngle, 0.2f);
			return;
		}
		if (ai[0] == -1f)
		{
			if (ai[1] == 0f)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int i = 0; i < 2; i++)
				{
					Dust dust = Dust.NewDustDirect(position, width, height, 15, oldVelocity.X * 0.2f, oldVelocity.Y * 0.2f, 0, default(Color), 1.4f);
					if (Main.rand.Next(3) != 0)
					{
						dust.scale *= 1.3f;
						dust.velocity *= 1.1f;
					}
					dust.noGravity = true;
					dust.fadeIn = 0f;
				}
				velocity += Main.rand.NextVector2CircularEdge(4f, 4f);
			}
			ai[1] += 1f;
			rotation += velocity.X * 0.1f + velocity.Y * 0.05f;
			velocity *= 0.92f;
			if (ai[1] >= 9f)
			{
				ai[0] = 0f;
				ai[1] = 0f;
			}
			return;
		}
		NPC nPC = null;
		int num5 = (int)ai[1];
		if (Main.npc.IndexInRange(num5) && Main.npc[num5].CanBeChasedBy(this))
		{
			nPC = Main.npc[num5];
		}
		if (nPC == null)
		{
			ai[0] = -1f;
			ai[1] = 0f;
			netUpdate = true;
		}
		else if (player.Distance(nPC.Center) >= 900f)
		{
			ai[0] = 0f;
			ai[1] = 0f;
			netUpdate = true;
		}
		else
		{
			Vector2 vector5 = nPC.Center - base.Center;
			float num6 = 16f;
			velocity = vector5;
			if (((Vector2)(ref velocity)).Length() > num6)
			{
				velocity *= num6 / ((Vector2)(ref velocity)).Length();
			}
			float targetAngle2 = velocity.SafeNormalize(Vector2.UnitY).ToRotation() + (float)Math.PI / 2f;
			rotation = rotation.AngleLerp(targetAngle2, 0.4f);
		}
		float num7 = 0.1f;
		float num8 = width * 5;
		for (int j = 0; j < 1000; j++)
		{
			if (j != whoAmI && Main.projectile[j].active && Main.projectile[j].owner == owner && Main.projectile[j].type == type && Math.Abs(position.X - Main.projectile[j].position.X) + Math.Abs(position.Y - Main.projectile[j].position.Y) < num8)
			{
				if (position.X < Main.projectile[j].position.X)
				{
					velocity.X -= num7;
				}
				else
				{
					velocity.X += num7;
				}
				if (position.Y < Main.projectile[j].position.Y)
				{
					velocity.Y -= num7;
				}
				else
				{
					velocity.Y += num7;
				}
			}
		}
	}

	private void AI_019_Spears()
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_039c: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_043b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0472: Unknown result type (might be due to invalid IL or missing references)
		//IL_0478: Unknown result type (might be due to invalid IL or missing references)
		//IL_048f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0499: Unknown result type (might be due to invalid IL or missing references)
		//IL_049e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0753: Unknown result type (might be due to invalid IL or missing references)
		//IL_075e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0525: Unknown result type (might be due to invalid IL or missing references)
		//IL_0530: Unknown result type (might be due to invalid IL or missing references)
		//IL_0848: Unknown result type (might be due to invalid IL or missing references)
		//IL_084d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0859: Unknown result type (might be due to invalid IL or missing references)
		//IL_085e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0864: Unknown result type (might be due to invalid IL or missing references)
		//IL_0869: Unknown result type (might be due to invalid IL or missing references)
		//IL_0875: Unknown result type (might be due to invalid IL or missing references)
		//IL_087a: Unknown result type (might be due to invalid IL or missing references)
		//IL_067b: Unknown result type (might be due to invalid IL or missing references)
		//IL_068d: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_05df: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_05fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_06af: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0afd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b07: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b12: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b18: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b22: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b27: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b51: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b68: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b72: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b77: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a57: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a81: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bea: Unknown result type (might be due to invalid IL or missing references)
		//IL_0da8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dae: Unknown result type (might be due to invalid IL or missing references)
		//IL_0db8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e36: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e40: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e45: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cce: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c00: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c27: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d15: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d39: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d56: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d66: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d70: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d88: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0902: Unknown result type (might be due to invalid IL or missing references)
		//IL_0907: Unknown result type (might be due to invalid IL or missing references)
		//IL_0927: Unknown result type (might be due to invalid IL or missing references)
		//IL_092d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e86: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e96: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ea6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ef1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ef7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f18: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f31: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f40: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f45: Unknown result type (might be due to invalid IL or missing references)
		//IL_094c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0957: Unknown result type (might be due to invalid IL or missing references)
		//IL_095c: Unknown result type (might be due to invalid IL or missing references)
		//IL_099b: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_09db: Unknown result type (might be due to invalid IL or missing references)
		//IL_09e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_09eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a11: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a28: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a32: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a37: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[owner];
		Vector2 center = player.RotatedRelativePoint(player.MountedCenter);
		direction = player.direction;
		player.heldProj = whoAmI;
		player.MatchItemTimeToItemAnimation();
		base.Center = center;
		bool flag = Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3;
		int itemAnimationMax = player.itemAnimationMax;
		int itemAnimation = player.itemAnimation;
		int num = Main.player[owner].itemAnimationMax / 3;
		float num12 = MathHelper.Min((float)itemAnimation, (float)num);
		float num19 = (float)itemAnimation - num12;
		float num20 = 0f;
		float num21 = 0f;
		float num22 = 0f;
		bool flag2 = false;
		spriteDirection = -direction;
		switch (type)
		{
		case 46:
			num20 = 3f;
			num22 = 1.6f;
			num21 = 1.4f;
			break;
		case 105:
			num20 = 3f;
			num22 = 2.4f;
			num21 = 2.1f;
			break;
		case 367:
			num20 = 3f;
			num22 = 1.6f;
			num21 = 1.5f;
			break;
		case 368:
			num20 = 3f;
			num22 = 1.5f;
			num21 = 1.4f;
			break;
		case 222:
			num20 = 3f;
			num22 = 2.4f;
			num21 = 2.1f;
			break;
		case 342:
			num20 = 3f;
			num22 = 2.4f;
			num21 = 2.1f;
			break;
		case 47:
			num20 = 4f;
			num22 = 1.2f;
			num21 = 0.9f;
			break;
		case 153:
			num20 = 4f;
			num22 = 1.5f;
			num21 = 1.3f;
			break;
		case 49:
			num20 = 4f;
			num22 = 1.1f;
			num21 = 0.85f;
			break;
		case 730:
			num20 = 8f;
			num22 = 1.5f;
			num21 = 1.2f;
			break;
		case 877:
		case 878:
		case 879:
			alpha -= 40;
			if (alpha < 0)
			{
				alpha = 0;
			}
			num20 = 28f;
			num22 = 0.4f;
			num21 = 0.4f;
			flag2 = true;
			break;
		case 64:
		case 215:
			spriteDirection = -direction;
			num20 = 3f;
			num22 = 1.9f;
			num21 = 1.7f;
			break;
		case 66:
		case 97:
		case 212:
		case 218:
			num20 = 3f;
			num22 = 2.1f;
			num21 = 1.9f;
			break;
		case 130:
			num20 = 3f;
			num22 = 1.3f;
			num21 = 1f;
			break;
		}
		float num23 = (float)(itemAnimationMax - num) - num19;
		float num24 = (float)num - num12;
		float num25 = num20 + num21 * num23 - num22 * num24;
		position += velocity * num25;
		switch (type)
		{
		case 47:
			if (Main.player[owner].wet && Main.rand.Next(2) == 0)
			{
				int num2 = Dust.NewDust(Main.player[owner].position, Main.player[owner].width, Main.player[owner].height, 15, 0f, 0f, 100, default(Color), 0.8f);
				Dust obj = Main.dust[num2];
				obj.velocity *= 0.1f;
			}
			break;
		case 130:
			if ((localAI[0] == 0f || localAI[0] == 4f || localAI[0] == 8f || localAI[0] == 12f || localAI[0] == 16f || localAI[0] == 20f || localAI[0] == 24f) && owner == Main.myPlayer)
			{
				NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, velocity.X, velocity.Y, 131, damage / 3, 0f, owner);
			}
			localAI[0] += 1f;
			break;
		case 730:
			if (localAI[0] == 0f && Main.myPlayer == owner)
			{
				localAI[0] = 1f;
				Vector2 vector = velocity * 4f;
				NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector.X, vector.Y, 732, (int)((double)damage * 1.5), knockBack * 0.5f, owner);
			}
			break;
		case 342:
			if (flag && localAI[0] == 0f && Main.myPlayer == owner)
			{
				localAI[0] = 1f;
				if (Collision.CanHit(player.position, player.width, player.height, position, width, height))
				{
					NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, velocity.X * 2.4f, velocity.Y * 2.4f, 343, damage, knockBack * 0.85f, owner);
				}
			}
			break;
		case 222:
			if (flag && localAI[0] == 0f && Main.myPlayer == owner)
			{
				localAI[0] = 1f;
				NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, velocity.X, velocity.Y, 228, damage, knockBack, owner);
			}
			break;
		}
		if (flag2 && player.channel && player.itemAnimation < num)
		{
			player.SetDummyItemTime(num);
		}
		rotation = (float)Math.Atan2(velocity.Y, velocity.X) + (float)Math.PI / 2f + (float)Math.PI / 4f;
		if (spriteDirection == -1)
		{
			rotation -= (float)Math.PI / 2f;
		}
		AI_019_Spears_GetExtensionHitbox(out var _);
		if (type == 878 || type == 879)
		{
			float num3 = 6f;
			float num4 = 0.8f;
			float num5 = Vector2.Dot(velocity.SafeNormalize(Vector2.UnitX * (float)player.direction), player.velocity.SafeNormalize(Vector2.UnitX * (float)player.direction));
			float num6 = ((Vector2)(ref player.velocity)).Length();
			if (num6 > num3 && num5 > num4)
			{
				int num7 = 8;
				if (num6 > num3 + 1f)
				{
					num7 = 5;
				}
				if (num6 > num3 + 2f)
				{
					num7 = 2;
				}
				int num8 = 14;
				int num9 = 27;
				int num10 = 4;
				if (type == 879)
				{
					num8 = 43;
					num9 = 57;
				}
				if (Main.rand.Next(num7 + 3) == 0)
				{
					Dust.NewDust(base.Center - new Vector2((float)num10, (float)num10), num10 * 2, num10 * 2, num8, 0f, 0f, 150, default(Color), 1.4f);
				}
				if (Main.rand.Next(num7) == 0)
				{
					int num11 = Dust.NewDust(base.Center - new Vector2((float)num10, (float)num10), num10 * 2, num10 * 2, num9, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 1.2f);
					Main.dust[num11].noGravity = true;
					Dust obj2 = Main.dust[num11];
					obj2.velocity *= 0.25f;
					num11 = Dust.NewDust(base.Center - new Vector2((float)num10, (float)num10), num10 * 2, num10 * 2, num9, 0f, 0f, 150, default(Color), 1.4f);
					Dust obj3 = Main.dust[num11];
					obj3.velocity *= 0.25f;
				}
			}
		}
		if (type == 46)
		{
			if (Main.rand.Next(5) == 0)
			{
				Dust.NewDust(position, width, height, 14, 0f, 0f, 150, default(Color), 1.4f);
			}
			int num13 = Dust.NewDust(position, width, height, 27, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 1.2f);
			Main.dust[num13].noGravity = true;
			Dust obj4 = Main.dust[num13];
			obj4.velocity /= 2f;
			num13 = Dust.NewDust(position - velocity * 2f, width, height, 27, 0f, 0f, 150, default(Color), 1.4f);
			Dust obj5 = Main.dust[num13];
			obj5.velocity /= 5f;
		}
		if (type == 730)
		{
			if (Main.rand.Next(5) == 0)
			{
				Dust dust = Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 150, default(Color), 0.7f);
				dust.noGravity = true;
				dust.velocity *= 1.4f;
			}
			if (Main.rand.Next(5) == 0)
			{
				Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 150, default(Color), 0.5f).velocity.Y -= 0.5f;
			}
		}
		else if (type == 105)
		{
			if (Main.rand.Next(3) == 0)
			{
				int num14 = Dust.NewDust(position, width, height, 57, velocity.X * 0.2f, velocity.Y * 0.2f, 200, default(Color), 1.2f);
				Dust obj6 = Main.dust[num14];
				obj6.velocity += velocity * 0.3f;
				Dust obj7 = Main.dust[num14];
				obj7.velocity *= 0.2f;
			}
			if (Main.rand.Next(4) == 0)
			{
				int num15 = Dust.NewDust(position, width, height, 43, 0f, 0f, 254, default(Color), 0.3f);
				Dust obj8 = Main.dust[num15];
				obj8.velocity += velocity * 0.5f;
				Dust obj9 = Main.dust[num15];
				obj9.velocity *= 0.5f;
			}
		}
		else if (type == 153)
		{
			int num16 = Dust.NewDust(position - velocity * 3f, width, height, 115, velocity.X * 0.4f, velocity.Y * 0.4f, 140);
			Main.dust[num16].noGravity = true;
			Main.dust[num16].fadeIn = 1.25f;
			Dust obj10 = Main.dust[num16];
			obj10.velocity *= 0.25f;
		}
		if (type == 342)
		{
			Lighting.AddLight(base.Center, 0.65f, 0.9f, 1f);
			if (timeLeft % 2 == 0)
			{
				int num17 = 10;
				int num18 = Dust.NewDust(position - velocity * 3f - new Vector2((float)num17, (float)num17), width + num17 * 2, height + num17 * 2, 135, velocity.X * 0.4f, velocity.Y * 0.4f, 50, default(Color), 1.2f);
				Dust obj11 = Main.dust[num18];
				obj11.velocity *= 0.5f;
				Dust obj12 = Main.dust[num18];
				obj12.velocity += velocity * 0.25f;
			}
		}
		ai[0] += 1f;
		bool flag3 = ai[0] >= (float)itemAnimationMax;
		if (flag2)
		{
			flag3 &= !player.channel;
		}
		if (flag3)
		{
			Kill();
		}
	}

	public bool AI_019_Spears_GetExtensionHitbox(out Rectangle extensionBox)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		extensionBox = default(Rectangle);
		Player player = Main.player[owner];
		if (player.itemAnimation < player.itemAnimationMax / 3)
		{
			return false;
		}
		int itemAnimationMax = player.itemAnimationMax;
		int itemAnimation = player.itemAnimation;
		int num = player.itemAnimationMax / 3;
		float num2 = Utils.Remap(itemAnimation, itemAnimationMax, num, 0f, 1f);
		float num3 = 10f;
		float num4 = 30f;
		float num5 = 10f;
		float num6 = 10f;
		switch (type)
		{
		default:
			return false;
		case 105:
			num4 = 50f;
			num6 = 20f;
			break;
		case 46:
			num4 = 50f;
			num6 = 15f;
			break;
		case 153:
			num4 = 40f;
			num6 = 10f;
			break;
		}
		num4 *= 1f / player.inverseMeleeSpeed;
		float num7 = num3 + num4 * num2;
		float num8 = num5 + num6 * num2;
		float f = velocity.ToRotation();
		Vector2 center = base.Center + f.ToRotationVector2() * num7;
		extensionBox = Utils.CenteredRectangle(center, new Vector2(num8, num8));
		return true;
	}

	private void AI_019_Spears_Old()
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_097f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0985: Unknown result type (might be due to invalid IL or missing references)
		//IL_0992: Unknown result type (might be due to invalid IL or missing references)
		//IL_0997: Unknown result type (might be due to invalid IL or missing references)
		//IL_099c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b53: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b96: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0beb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c00: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c24: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b45: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c89: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cca: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ebf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ec9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ece: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f10: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f47: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f51: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f56: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0db1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dce: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ddd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0de2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d16: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e54: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e71: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e80: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e85: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e93: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ea2: Unknown result type (might be due to invalid IL or missing references)
		//IL_030b: Unknown result type (might be due to invalid IL or missing references)
		//IL_032b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0434: Unknown result type (might be due to invalid IL or missing references)
		//IL_045c: Unknown result type (might be due to invalid IL or missing references)
		//IL_047c: Unknown result type (might be due to invalid IL or missing references)
		//IL_049b: Unknown result type (might be due to invalid IL or missing references)
		//IL_04bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_04dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_072a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0734: Unknown result type (might be due to invalid IL or missing references)
		//IL_0739: Unknown result type (might be due to invalid IL or missing references)
		//IL_0741: Unknown result type (might be due to invalid IL or missing references)
		//IL_0761: Unknown result type (might be due to invalid IL or missing references)
		//IL_0780: Unknown result type (might be due to invalid IL or missing references)
		//IL_0786: Unknown result type (might be due to invalid IL or missing references)
		Vector2 vector = Main.player[owner].RotatedRelativePoint(Main.player[owner].MountedCenter);
		direction = Main.player[owner].direction;
		Main.player[owner].heldProj = whoAmI;
		Main.player[owner].MatchItemTimeToItemAnimation();
		position.X = vector.X - (float)(width / 2);
		position.Y = vector.Y - (float)(height / 2);
		bool flag = Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3;
		if (!Main.player[owner].frozen)
		{
			if (type == 46)
			{
				if (ai[0] == 0f)
				{
					ai[0] = 3f;
					netUpdate = true;
				}
				if (flag)
				{
					ai[0] -= 1.6f;
				}
				else
				{
					ai[0] += 1.4f;
				}
			}
			else if (type == 105)
			{
				if (ai[0] == 0f)
				{
					ai[0] = 3f;
					netUpdate = true;
				}
				if (flag)
				{
					ai[0] -= 2.4f;
				}
				else
				{
					ai[0] += 2.1f;
				}
			}
			else if (type == 367)
			{
				spriteDirection = -direction;
				if (ai[0] == 0f)
				{
					ai[0] = 3f;
					netUpdate = true;
				}
				if (flag)
				{
					ai[0] -= 1.6f;
				}
				else
				{
					ai[0] += 1.5f;
				}
			}
			else if (type == 368)
			{
				spriteDirection = -direction;
				if (ai[0] == 0f)
				{
					ai[0] = 3f;
					netUpdate = true;
				}
				if (flag)
				{
					ai[0] -= 1.5f;
				}
				else
				{
					ai[0] += 1.4f;
				}
			}
			else if (type == 222)
			{
				if (ai[0] == 0f)
				{
					ai[0] = 3f;
					netUpdate = true;
				}
				if (flag)
				{
					ai[0] -= 2.4f;
					if (localAI[0] == 0f && Main.myPlayer == owner)
					{
						localAI[0] = 1f;
						NewProjectile(GetProjectileSource_FromThis(), base.Center.X + velocity.X * ai[0], base.Center.Y + velocity.Y * ai[0], velocity.X, velocity.Y, 228, damage, knockBack, owner);
					}
				}
				else
				{
					ai[0] += 2.1f;
				}
			}
			else if (type == 342)
			{
				if (ai[0] == 0f)
				{
					ai[0] = 3f;
					netUpdate = true;
				}
				if (flag)
				{
					ai[0] -= 2.4f;
					if (localAI[0] == 0f && Main.myPlayer == owner)
					{
						localAI[0] = 1f;
						if (Collision.CanHit(Main.player[owner].position, Main.player[owner].width, Main.player[owner].height, new Vector2(base.Center.X + velocity.X * ai[0], base.Center.Y + velocity.Y * ai[0]), width, height))
						{
							NewProjectile(GetProjectileSource_FromThis(), base.Center.X + velocity.X * ai[0], base.Center.Y + velocity.Y * ai[0], velocity.X * 2.4f, velocity.Y * 2.4f, 343, (int)((double)damage * 0.8), knockBack * 0.85f, owner);
						}
					}
				}
				else
				{
					ai[0] += 2.1f;
				}
			}
			else if (type == 47)
			{
				if (ai[0] == 0f)
				{
					ai[0] = 4f;
					netUpdate = true;
				}
				if (flag)
				{
					ai[0] -= 1.2f;
				}
				else
				{
					ai[0] += 0.9f;
				}
			}
			else if (type == 153)
			{
				spriteDirection = -direction;
				if (ai[0] == 0f)
				{
					ai[0] = 4f;
					netUpdate = true;
				}
				if (flag)
				{
					ai[0] -= 1.5f;
				}
				else
				{
					ai[0] += 1.3f;
				}
			}
			else if (type == 49)
			{
				if (ai[0] == 0f)
				{
					ai[0] = 4f;
					netUpdate = true;
				}
				if (flag)
				{
					ai[0] -= 1.1f;
				}
				else
				{
					ai[0] += 0.85f;
				}
			}
			else if (type == 730)
			{
				spriteDirection = -direction;
				if (ai[0] == 0f)
				{
					ai[0] = 8f;
					netUpdate = true;
					if (localAI[0] == 0f && Main.myPlayer == owner)
					{
						localAI[0] = 1f;
						Vector2 vector2 = velocity * 4f;
						NewProjectile(GetProjectileSource_FromThis(), base.Center.X + velocity.X * ai[0], base.Center.Y + velocity.Y * ai[0], vector2.X, vector2.Y, 732, (int)((double)damage * 1.25), knockBack * 0.5f, owner);
					}
				}
				if (flag)
				{
					ai[0] -= 1.5f;
				}
				else
				{
					ai[0] += 1.2f;
				}
			}
			else if (type == 64 || type == 215)
			{
				spriteDirection = -direction;
				if (ai[0] == 0f)
				{
					ai[0] = 3f;
					netUpdate = true;
				}
				if (flag)
				{
					ai[0] -= 1.9f;
				}
				else
				{
					ai[0] += 1.7f;
				}
			}
			else if (type == 66 || type == 97 || type == 212 || type == 218)
			{
				spriteDirection = -direction;
				if (ai[0] == 0f)
				{
					ai[0] = 3f;
					netUpdate = true;
				}
				if (flag)
				{
					ai[0] -= 2.1f;
				}
				else
				{
					ai[0] += 1.9f;
				}
			}
			else if (type == 130)
			{
				spriteDirection = -direction;
				if (ai[0] == 0f)
				{
					ai[0] = 3f;
					netUpdate = true;
				}
				if (flag)
				{
					ai[0] -= 1.3f;
				}
				else
				{
					ai[0] += 1f;
				}
			}
		}
		position += velocity * ai[0];
		if (type == 130)
		{
			if (ai[1] == 0f || ai[1] == 4f || ai[1] == 8f || ai[1] == 12f || ai[1] == 16f || ai[1] == 20f || ai[1] == 24f)
			{
				NewProjectile(GetProjectileSource_FromThis(), position.X + (float)(width / 2), position.Y + (float)(height / 2), velocity.X, velocity.Y, 131, damage / 3, 0f, owner);
			}
			ai[1] += 1f;
		}
		if (Main.player[owner].ItemAnimationEndingOrEnded)
		{
			Kill();
		}
		rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 2.355f;
		if (spriteDirection == -1)
		{
			rotation -= 1.57f;
		}
		if (type == 46)
		{
			if (Main.rand.Next(5) == 0)
			{
				Dust.NewDust(position, width, height, 14, 0f, 0f, 150, default(Color), 1.4f);
			}
			int num = Dust.NewDust(position, width, height, 27, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 1.2f);
			Main.dust[num].noGravity = true;
			Main.dust[num].velocity.X /= 2f;
			Main.dust[num].velocity.Y /= 2f;
			num = Dust.NewDust(position - velocity * 2f, width, height, 27, 0f, 0f, 150, default(Color), 1.4f);
			Main.dust[num].velocity.X /= 5f;
			Main.dust[num].velocity.Y /= 5f;
		}
		if (type == 730)
		{
			if (Main.rand.Next(5) == 0)
			{
				Dust dust = Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 150, default(Color), 0.7f);
				dust.noGravity = true;
				dust.velocity *= 1.4f;
			}
			if (Main.rand.Next(5) == 0)
			{
				Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 150, default(Color), 0.5f).velocity.Y -= 0.5f;
			}
		}
		else if (type == 105)
		{
			if (Main.rand.Next(3) == 0)
			{
				int num2 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 57, velocity.X * 0.2f, velocity.Y * 0.2f, 200, default(Color), 1.2f);
				Dust obj = Main.dust[num2];
				obj.velocity += velocity * 0.3f;
				Dust obj2 = Main.dust[num2];
				obj2.velocity *= 0.2f;
			}
			if (Main.rand.Next(4) == 0)
			{
				int num3 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 43, 0f, 0f, 254, default(Color), 0.3f);
				Dust obj3 = Main.dust[num3];
				obj3.velocity += velocity * 0.5f;
				Dust obj4 = Main.dust[num3];
				obj4.velocity *= 0.5f;
			}
		}
		else if (type == 153)
		{
			int num4 = Dust.NewDust(position - velocity * 3f, width, height, 115, velocity.X * 0.4f, velocity.Y * 0.4f, 140);
			Main.dust[num4].noGravity = true;
			Main.dust[num4].fadeIn = 1.25f;
			Dust obj5 = Main.dust[num4];
			obj5.velocity *= 0.25f;
		}
	}

	private void AI_168_FirstFractal()
	{
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0173: Unknown result type (might be due to invalid IL or missing references)
		//IL_0196: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c5: Unknown result type (might be due to invalid IL or missing references)
		float num = 60f;
		if ((localAI[0] += 1f) >= num - 1f)
		{
			Kill();
			return;
		}
		if (frameCounter == 0)
		{
			frameCounter = 1;
			frame = Main.rand.Next(15);
		}
		velocity = velocity.RotatedBy(ai[0]);
		Opacity = Utils.GetLerpValue(0f, 12f, localAI[0], clamped: true) * Utils.GetLerpValue(num, num - 12f, localAI[0], clamped: true);
		direction = ((velocity.X > 0f) ? 1 : (-1));
		spriteDirection = direction;
		rotation = (float)Math.PI / 4f * (float)spriteDirection + velocity.ToRotation();
		if (spriteDirection == -1)
		{
			rotation += (float)Math.PI;
		}
		if (localAI[0] > 7f)
		{
			int num2 = 5;
			_ = base.Center - new Vector2((float)num2);
			if (Main.rand.Next(15) == 0)
			{
				Dust dust = Dust.NewDustPerfect(base.Center, 278, null, 100, Color.Lerp(GetFirstFractalColor(), Color.White, Main.rand.NextFloat() * 0.3f));
				dust.scale = 0.7f;
				dust.noGravity = true;
				dust.velocity *= 0.5f;
				dust.velocity += velocity * 2f;
			}
		}
	}

	private void AI_167_SparkleGuitar()
	{
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		float num = 90f;
		if ((localAI[0] += 1f) >= num - 1f)
		{
			Kill();
			return;
		}
		float num2 = localAI[0] / num;
		Vector2 center = Main.player[owner].Center;
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector(ai[0], ai[1]);
		Vector2 vector2 = -velocity;
		Vector2 value = center + vector2 * 2f;
		Vector2 value2 = vector + vector2 * (1f - num2 * 3f);
		base.Center = Vector2.CatmullRom(value, center, vector, value2, num2);
		if (type == 856)
		{
			Vector2 center2 = base.Center;
			Color hotPink = Color.HotPink;
			Lighting.AddLight(center2, ((Color)(ref hotPink)).ToVector3() * 0.3f);
			rotation = (float)Math.PI * 2f * num2 * 1f;
		}
	}

	private void AI_164_StormTigerGem()
	{
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_0143: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[owner];
		if (type == 831)
		{
			if (player.dead)
			{
				player.stormTiger = false;
			}
			if (player.stormTiger)
			{
				timeLeft = 2;
			}
			if (++frameCounter >= 4)
			{
				frameCounter = 0;
				if (++frame >= 6)
				{
					frame = 0;
				}
			}
		}
		if (type == 970)
		{
			if (player.ownedProjectileCounts[type] > 1 && localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(in SoundID.AbigailUpgrade, base.Center);
			}
			if (player.dead)
			{
				player.abigailMinion = false;
			}
			if (player.abigailMinion)
			{
				timeLeft = 2;
			}
			if (++frameCounter >= 4)
			{
				frameCounter = 0;
				if (++frame >= 6)
				{
					frame = 0;
				}
			}
		}
		List<int> ai164_blacklistedTargets = _ai164_blacklistedTargets;
		ai164_blacklistedTargets.Clear();
		AI_GetMyGroupIndexAndFillBlackList(ai164_blacklistedTargets, out var index, out var totalIndexesInGroup);
		Vector2 center = AI_164_GetHomeLocation(player, index, totalIndexesInGroup);
		base.Center = center;
	}

	public static Vector2 AI_164_GetHomeLocation(Player master, int stackedIndex, int totalIndexes)
	{
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_014a: Unknown result type (might be due to invalid IL or missing references)
		//IL_014c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0169: Unknown result type (might be due to invalid IL or missing references)
		//IL_016e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0173: Unknown result type (might be due to invalid IL or missing references)
		//IL_0174: Unknown result type (might be due to invalid IL or missing references)
		//IL_0179: Unknown result type (might be due to invalid IL or missing references)
		//IL_018c: Unknown result type (might be due to invalid IL or missing references)
		//IL_018e: Unknown result type (might be due to invalid IL or missing references)
		int num = master.bodyFrame.Height;
		if (num == 0)
		{
			num = 1;
		}
		Vector2 vector = Main.OffsetsPlayerHeadgear[master.bodyFrame.Y / num];
		vector.Y -= 2f;
		float num2 = master.miscCounterNormalized * 2f;
		int num3 = stackedIndex / 4;
		int num4 = totalIndexes / 4;
		if (totalIndexes % 4 > 0)
		{
			num4++;
		}
		int num5 = (totalIndexes - num3 * 4) % 4;
		if (num5 == 0)
		{
			num5 = 4;
		}
		if (num4 - 1 != num3)
		{
			num5 = 4;
		}
		int num6 = stackedIndex % num5;
		float num7 = (float)num6 / (float)num5;
		num2 += (float)num3 / 8f;
		if (stackedIndex >= (num4 - 1) * 4 && num3 > 0)
		{
			num2 = 0f;
			switch (num5)
			{
			case 1:
				num7 = 0f;
				break;
			case 2:
				num7 = 0.25f + (float)num6 * 0.5f;
				break;
			case 3:
				num7 = (float)(num6 - 1) / 6f;
				break;
			case 4:
				num7 = ((float)num6 - 1.5f) / 6f;
				break;
			}
		}
		Vector2 vector2 = Utils.RotatedBy(new Vector2(0f, (float)(-8 - 12 * num3)), (num2 + num7) * ((float)Math.PI * 2f));
		vector += vector2 + new Vector2(0f, master.gravDir * -40f);
		Vector2 mountedCenter = master.MountedCenter;
		_ = master.direction;
		Vector2 vec = mountedCenter + new Vector2(0f, master.gravDir * -21f) + vector;
		vec.Y += master.gfxOffY;
		return vec.Floor();
	}

	private void AI_162_TigerPounce()
	{
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		//IL_0189: Unknown result type (might be due to invalid IL or missing references)
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_018e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0193: Unknown result type (might be due to invalid IL or missing references)
		//IL_035b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01da: Unknown result type (might be due to invalid IL or missing references)
		//IL_01df: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0201: Unknown result type (might be due to invalid IL or missing references)
		//IL_0206: Unknown result type (might be due to invalid IL or missing references)
		//IL_021f: Unknown result type (might be due to invalid IL or missing references)
		//IL_022b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0235: Unknown result type (might be due to invalid IL or missing references)
		//IL_025a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0260: Unknown result type (might be due to invalid IL or missing references)
		//IL_026a: Unknown result type (might be due to invalid IL or missing references)
		//IL_026f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0274: Unknown result type (might be due to invalid IL or missing references)
		//IL_0286: Unknown result type (might be due to invalid IL or missing references)
		//IL_0289: Unknown result type (might be due to invalid IL or missing references)
		//IL_028e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0298: Unknown result type (might be due to invalid IL or missing references)
		//IL_029d: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_030a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0310: Unknown result type (might be due to invalid IL or missing references)
		//IL_0335: Unknown result type (might be due to invalid IL or missing references)
		//IL_033b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0345: Unknown result type (might be due to invalid IL or missing references)
		//IL_034a: Unknown result type (might be due to invalid IL or missing references)
		//IL_034f: Unknown result type (might be due to invalid IL or missing references)
		if (ai[0] < 0f)
		{
			Opacity = 0f;
			ai[0] += 1f;
			return;
		}
		bool flag = false;
		flag = true;
		if (frameCounter == 0)
		{
			frameCounter = 1;
			localAI[0] = base.Center.X;
			localAI[1] = base.Center.Y;
			flag = true;
		}
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector(localAI[0], localAI[1]);
		Vector2 vector2 = vector + velocity;
		float y = Vector2.Distance(vector, vector2) * 1.5f;
		float num = 0.1f;
		Vector2 val = Vector2.Lerp(vector, vector2, 0f - num) + new Vector2(0f, y);
		Vector2 value2 = Vector2.Lerp(vector, vector2, 1f + num) + new Vector2(0f, y);
		if (Opacity < 1f)
		{
			Opacity += 0.1f;
		}
		int num2 = Math.Sign(vector2.X - vector.X);
		rotation += (float)num2 * -0.2f;
		spriteDirection = num2;
		if (ai[1] < 1f)
		{
			ai[1] = 60f;
		}
		ai[0] += 1f / ai[1];
		float num4 = Utils.Clamp(ai[0], 0f, 1f);
		Vector2 vector3 = Vector2.CatmullRom(val, vector, vector2, value2, num4);
		if (flag)
		{
			for (float num3 = 0f; num3 < 1f; num3 += 0.5f)
			{
				if (Main.rand.Next(19) == 0)
				{
					Vector2 vector4 = base.Center + DirectionTo(vector3).SafeNormalize(Vector2.UnitY) * 100f;
					Dust dust = Dust.NewDustPerfect(base.Center + base.Size * Main.rand.NextVector2Square(0f, 1f), 278, Main.rand.NextVector2Circular(3f, 3f), 100, Color.White * 0.4f);
					dust.velocity.Y += -0.6f;
					dust.velocity += velocity * 0.1f;
					Main.rand.Next(5);
					dust.velocity = (vector4 - base.Center) * 0.05f;
					dust.fadeIn = 0f;
					dust.scale = 0.7f;
					dust.noGravity = true;
				}
			}
			if (Main.rand.Next(2) == 0)
			{
				Dust obj = Main.dust[Dust.NewDust(position, width, height, 269)];
				obj.fadeIn = 0.7f;
				obj.scale = 0.4f;
				obj.velocity += velocity * 0.001f;
				obj.noLight = true;
			}
		}
		base.Center = vector3;
		if (ai[0] >= 1f)
		{
			Kill();
		}
	}

	private void PrepareBombToBlow()
	{
		tileCollide = false;
		ai[1] = 0f;
		alpha = 255;
		if (type == 28 || type == 37 || type == 516 || type == 519)
		{
			Resize(128, 128);
			damage = 100;
			knockBack = 8f;
		}
		else if (type == 773)
		{
			Resize(48, 96);
			damage = 100;
			knockBack = 8f;
		}
		else if (type == 29 || type == 470 || type == 637)
		{
			Resize(250, 250);
			damage = 250;
			knockBack = 10f;
		}
		else if (type == 30 || type == 397 || type == 517 || type == 588)
		{
			Resize(128, 128);
			knockBack = 8f;
		}
		else if (type == 681)
		{
			Resize(80, 80);
			knockBack = 8f;
		}
		else if (type == 779 || type == 783 || type == 862 || type == 863)
		{
			Resize(48, 48);
			knockBack = 8f;
		}
		else if (type == 133 || type == 134 || type == 135 || type == 136 || type == 137 || type == 138 || type == 338 || type == 339 || type == 930)
		{
			Resize(128, 128);
			knockBack = 8f;
		}
		else if (type == 794 || type == 797 || type == 795 || type == 798 || type == 793 || type == 796 || type == 808 || type == 808)
		{
			Resize(250, 250);
			knockBack = 12f;
		}
		else if (type == 776 || type == 780 || type == 777 || type == 781 || type == 778 || type == 782 || type == 803 || type == 804)
		{
			Resize(128, 128);
			knockBack = 12f;
		}
		else if (type == 784 || type == 785 || type == 786 || type == 805 || type == 903 || type == 787 || type == 788 || type == 789 || type == 806 || type == 904 || type == 790 || type == 791 || type == 792 || type == 807 || type == 905 || type == 799 || type == 800 || type == 801 || type == 810 || type == 906 || type == 910 || type == 911)
		{
			if (type == 903 || type == 904 || type == 905 || type == 906 || type == 910 || type == 911)
			{
				damage = 100;
			}
			Resize(48, 48);
			knockBack = 12f;
		}
		else if (type == 139 || type == 140 || type == 141 || type == 142 || type == 143 || type == 144 || type == 340 || type == 341)
		{
			Resize(200, 200);
			knockBack = 10f;
		}
	}

	private void AI_016()
	{
		//IL_05e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0672: Unknown result type (might be due to invalid IL or missing references)
		//IL_0677: Unknown result type (might be due to invalid IL or missing references)
		//IL_067c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0689: Unknown result type (might be due to invalid IL or missing references)
		//IL_068e: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0606: Unknown result type (might be due to invalid IL or missing references)
		//IL_0612: Unknown result type (might be due to invalid IL or missing references)
		//IL_0618: Unknown result type (might be due to invalid IL or missing references)
		//IL_061d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0622: Unknown result type (might be due to invalid IL or missing references)
		//IL_0626: Unknown result type (might be due to invalid IL or missing references)
		//IL_062b: Unknown result type (might be due to invalid IL or missing references)
		//IL_062d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0632: Unknown result type (might be due to invalid IL or missing references)
		//IL_063c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0641: Unknown result type (might be due to invalid IL or missing references)
		//IL_06fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0701: Unknown result type (might be due to invalid IL or missing references)
		//IL_0708: Unknown result type (might be due to invalid IL or missing references)
		//IL_070d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0714: Unknown result type (might be due to invalid IL or missing references)
		//IL_071b: Unknown result type (might be due to invalid IL or missing references)
		//IL_072f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0734: Unknown result type (might be due to invalid IL or missing references)
		//IL_0741: Unknown result type (might be due to invalid IL or missing references)
		//IL_0747: Unknown result type (might be due to invalid IL or missing references)
		//IL_07aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_07af: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_07be: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_07cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_076d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0777: Unknown result type (might be due to invalid IL or missing references)
		//IL_077c: Unknown result type (might be due to invalid IL or missing references)
		//IL_080d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0812: Unknown result type (might be due to invalid IL or missing references)
		//IL_0819: Unknown result type (might be due to invalid IL or missing references)
		//IL_081e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0825: Unknown result type (might be due to invalid IL or missing references)
		//IL_082c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0840: Unknown result type (might be due to invalid IL or missing references)
		//IL_0845: Unknown result type (might be due to invalid IL or missing references)
		//IL_0852: Unknown result type (might be due to invalid IL or missing references)
		//IL_0858: Unknown result type (might be due to invalid IL or missing references)
		//IL_087e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0888: Unknown result type (might be due to invalid IL or missing references)
		//IL_088d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_028a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0297: Unknown result type (might be due to invalid IL or missing references)
		//IL_029c: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0901: Unknown result type (might be due to invalid IL or missing references)
		//IL_0906: Unknown result type (might be due to invalid IL or missing references)
		//IL_090b: Unknown result type (might be due to invalid IL or missing references)
		//IL_090d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0914: Unknown result type (might be due to invalid IL or missing references)
		//IL_091a: Unknown result type (might be due to invalid IL or missing references)
		//IL_091c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0921: Unknown result type (might be due to invalid IL or missing references)
		//IL_0924: Unknown result type (might be due to invalid IL or missing references)
		//IL_0929: Unknown result type (might be due to invalid IL or missing references)
		//IL_092b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0930: Unknown result type (might be due to invalid IL or missing references)
		//IL_0937: Unknown result type (might be due to invalid IL or missing references)
		//IL_093c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0943: Unknown result type (might be due to invalid IL or missing references)
		//IL_094a: Unknown result type (might be due to invalid IL or missing references)
		//IL_094f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0951: Unknown result type (might be due to invalid IL or missing references)
		//IL_095e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0964: Unknown result type (might be due to invalid IL or missing references)
		//IL_0478: Unknown result type (might be due to invalid IL or missing references)
		//IL_111a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1120: Unknown result type (might be due to invalid IL or missing references)
		//IL_112a: Unknown result type (might be due to invalid IL or missing references)
		//IL_112f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1153: Unknown result type (might be due to invalid IL or missing references)
		//IL_1159: Unknown result type (might be due to invalid IL or missing references)
		//IL_119d: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_0495: Unknown result type (might be due to invalid IL or missing references)
		//IL_1409: Unknown result type (might be due to invalid IL or missing references)
		//IL_140f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1419: Unknown result type (might be due to invalid IL or missing references)
		//IL_141e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1443: Unknown result type (might be due to invalid IL or missing references)
		//IL_1449: Unknown result type (might be due to invalid IL or missing references)
		//IL_1485: Unknown result type (might be due to invalid IL or missing references)
		//IL_148f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1494: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1205: Unknown result type (might be due to invalid IL or missing references)
		//IL_120a: Unknown result type (might be due to invalid IL or missing references)
		//IL_120f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1692: Unknown result type (might be due to invalid IL or missing references)
		//IL_1698: Unknown result type (might be due to invalid IL or missing references)
		//IL_169d: Unknown result type (might be due to invalid IL or missing references)
		//IL_16a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_16a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_16bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_16c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_16c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_16cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_124c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1252: Unknown result type (might be due to invalid IL or missing references)
		//IL_125c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1261: Unknown result type (might be due to invalid IL or missing references)
		//IL_1266: Unknown result type (might be due to invalid IL or missing references)
		//IL_04dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_15bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1307: Unknown result type (might be due to invalid IL or missing references)
		//IL_131a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1344: Unknown result type (might be due to invalid IL or missing references)
		//IL_1349: Unknown result type (might be due to invalid IL or missing references)
		//IL_1366: Unknown result type (might be due to invalid IL or missing references)
		//IL_1374: Unknown result type (might be due to invalid IL or missing references)
		//IL_1387: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_13bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0522: Unknown result type (might be due to invalid IL or missing references)
		//IL_052e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0533: Unknown result type (might be due to invalid IL or missing references)
		//IL_0538: Unknown result type (might be due to invalid IL or missing references)
		//IL_053b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0540: Unknown result type (might be due to invalid IL or missing references)
		//IL_2620: Unknown result type (might be due to invalid IL or missing references)
		//IL_2625: Unknown result type (might be due to invalid IL or missing references)
		//IL_054d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0553: Unknown result type (might be due to invalid IL or missing references)
		//IL_0558: Unknown result type (might be due to invalid IL or missing references)
		//IL_055d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0567: Unknown result type (might be due to invalid IL or missing references)
		//IL_056c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1826: Unknown result type (might be due to invalid IL or missing references)
		//IL_182c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1836: Unknown result type (might be due to invalid IL or missing references)
		//IL_183b: Unknown result type (might be due to invalid IL or missing references)
		//IL_185f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1865: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1901: Unknown result type (might be due to invalid IL or missing references)
		//IL_1907: Unknown result type (might be due to invalid IL or missing references)
		//IL_1911: Unknown result type (might be due to invalid IL or missing references)
		//IL_1916: Unknown result type (might be due to invalid IL or missing references)
		//IL_191b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1958: Unknown result type (might be due to invalid IL or missing references)
		//IL_195e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1968: Unknown result type (might be due to invalid IL or missing references)
		//IL_196d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1972: Unknown result type (might be due to invalid IL or missing references)
		//IL_19af: Unknown result type (might be due to invalid IL or missing references)
		//IL_19b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_19bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_19c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_19c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a05: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a13: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a26: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1af9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b09: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b33: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b39: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b75: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b84: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1abf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d16: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_271e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2728: Unknown result type (might be due to invalid IL or missing references)
		//IL_272d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e91: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ec5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ecb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f18: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1feb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff0: Unknown result type (might be due to invalid IL or missing references)
		//IL_200d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2052: Unknown result type (might be due to invalid IL or missing references)
		//IL_2058: Unknown result type (might be due to invalid IL or missing references)
		//IL_206d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2077: Unknown result type (might be due to invalid IL or missing references)
		//IL_207c: Unknown result type (might be due to invalid IL or missing references)
		//IL_236e: Unknown result type (might be due to invalid IL or missing references)
		//IL_238e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2394: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_23fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_2400: Unknown result type (might be due to invalid IL or missing references)
		//IL_240a: Unknown result type (might be due to invalid IL or missing references)
		//IL_240f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2414: Unknown result type (might be due to invalid IL or missing references)
		//IL_2176: Unknown result type (might be due to invalid IL or missing references)
		//IL_2197: Unknown result type (might be due to invalid IL or missing references)
		//IL_219d: Unknown result type (might be due to invalid IL or missing references)
		//IL_220c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2220: Unknown result type (might be due to invalid IL or missing references)
		//IL_222e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2234: Unknown result type (might be due to invalid IL or missing references)
		//IL_2236: Unknown result type (might be due to invalid IL or missing references)
		//IL_2240: Unknown result type (might be due to invalid IL or missing references)
		//IL_2245: Unknown result type (might be due to invalid IL or missing references)
		//IL_224a: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_22db: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2313: Unknown result type (might be due to invalid IL or missing references)
		//IL_2329: Unknown result type (might be due to invalid IL or missing references)
		//IL_2337: Unknown result type (might be due to invalid IL or missing references)
		//IL_233d: Unknown result type (might be due to invalid IL or missing references)
		//IL_233f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2349: Unknown result type (might be due to invalid IL or missing references)
		//IL_234e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2353: Unknown result type (might be due to invalid IL or missing references)
		if (wet && (type == 799 || type == 800 || type == 801 || type == 810 || type == 906 || type == 784 || type == 785 || type == 786 || type == 805 || type == 903 || type == 787 || type == 788 || type == 789 || type == 806 || type == 904 || type == 790 || type == 791 || type == 792 || type == 807 || type == 905))
		{
			timeLeft = 1;
		}
		if (type == 108 || type == 164 || type == 1002)
		{
			ai[0] += 1f;
			if (ai[0] > 3f)
			{
				Kill();
			}
		}
		if (type == 102)
		{
			int num = (int)(base.Center.X / 16f);
			int num12 = (int)(base.Center.Y / 16f);
			if (WorldGen.InWorld(num, num12))
			{
				Tile tile = Main.tile[num, num12];
				if (tile != null && tile.active() && (TileID.Sets.Platforms[tile.type] || tile.type == 380))
				{
					Kill();
					return;
				}
			}
		}
		Vector2 center;
		if (type == 75)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(66, (int)position.X, (int)position.Y);
			}
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && !Main.player[i].dead && !Main.player[i].ghost)
				{
					center = base.Center - Main.player[i].Center;
					if (((Vector2)(ref center)).Length() < 40f)
					{
						Kill();
						return;
					}
				}
			}
		}
		bool flag = false;
		if (type == 37 || type == 397 || type == 470 || type == 519 || type == 773 || type == 911)
		{
			try
			{
				int num23 = (int)(position.X / 16f) - 1;
				int num24 = (int)((position.X + (float)width) / 16f) + 2;
				int num25 = (int)(position.Y / 16f) - 1;
				int num26 = (int)((position.Y + (float)height) / 16f) + 2;
				if (num23 < 0)
				{
					num23 = 0;
				}
				if (num24 > Main.maxTilesX)
				{
					num24 = Main.maxTilesX;
				}
				if (num25 < 0)
				{
					num25 = 0;
				}
				if (num26 > Main.maxTilesY)
				{
					num26 = Main.maxTilesY;
				}
				Vector2 vector = default(Vector2);
				for (int j = num23; j < num24; j++)
				{
					for (int k = num25; k < num26; k++)
					{
						if (Main.tile[j, k] == null || !Main.tile[j, k].nactive() || !Main.tileSolid[Main.tile[j, k].type] || Main.tileSolidTop[Main.tile[j, k].type])
						{
							continue;
						}
						vector.X = j * 16;
						vector.Y = k * 16;
						if (!(position.X + (float)width - 4f > vector.X) || !(position.X + 4f < vector.X + 16f) || !(position.Y + (float)height - 4f > vector.Y) || !(position.Y + 4f < vector.Y + 16f))
						{
							continue;
						}
						if (type == 911 && owner == Main.myPlayer && localAI[0] == 0f)
						{
							float num27 = 12f;
							Vector2 value = vector + new Vector2(8f, 8f);
							if (Vector2.Distance(base.Center, value) < num27)
							{
								base.Center += velocity.SafeNormalize(Vector2.Zero) * -4f;
							}
							localAI[0] = 1f;
							netUpdate = true;
						}
						velocity.X = 0f;
						velocity.Y = -0.2f;
						flag = true;
					}
				}
			}
			catch
			{
			}
		}
		if (flag && type == 911)
		{
			Point p = base.Center.ToTileCoordinates();
			if (WorldGen.SolidOrSlopedTile(Framing.GetTileSafely(p.X, p.Y)))
			{
				Vector2 v = p.ToWorldCoordinates() - base.Center;
				base.Center += v.SafeNormalize(Vector2.Zero) * -4f;
			}
		}
		if (flag && type == 773)
		{
			Player player = Main.player[owner];
			Vector2 v2 = DirectionTo(player.Center).SafeNormalize(Vector2.UnitX * (float)player.direction);
			float num28 = rotation;
			float num29 = v2.ToRotation() + (float)Math.PI / 2f;
			rotation = rotation.AngleLerp(num29, 0.2f);
			rotation = rotation.AngleTowards(num29, 0.05f);
			Vector2 vector2 = (rotation - (float)Math.PI / 2f).ToRotationVector2();
			if (Main.rand.Next(3) == 0)
			{
				Dust dust = Dust.NewDustPerfect(base.Center + vector2 * 10f, 59, vector2 * 2f + Main.rand.NextVector2Circular(0.25f, 0.25f), 0, default(Color), 2f);
				dust.noGravity = true;
				if (Main.rand.Next(3) == 0)
				{
					dust.velocity *= 1.5f;
					dust.noGravity = false;
					dust.scale /= 2f;
				}
			}
			if (Main.rand.Next(3) == 0)
			{
				Point scarabBombDigDirectionSnap = GetScarabBombDigDirectionSnap8();
				Dust.NewDustPerfect(base.Center + vector2 * -10f, 59, scarabBombDigDirectionSnap.ToVector2() * 1.5f, 0, default(Color), 2f).noGravity = true;
			}
			if (Main.rand.Next(15) == 0)
			{
				Dust dust2 = Dust.NewDustPerfect(base.Center + vector2 * 10f, 88, vector2 * 3f + Main.rand.NextVector2Circular(0.25f, 0.25f), 0, default(Color), 2f);
				dust2.noGravity = true;
				if (Main.rand.Next(3) == 0)
				{
					dust2.velocity *= 1.5f;
				}
			}
			bool flag2 = Main.rand.Next(30) == 0;
			if (num28 != rotation && Main.rand.Next(40) == 0)
			{
				flag2 = true;
			}
			if (flag2)
			{
				float num2 = (float)Math.PI * 2f * Main.rand.NextFloat();
				for (float num3 = 0f; num3 < 1f; num3 += 1f / 7f)
				{
					Vector2 spinningpoint = (num3 * ((float)Math.PI * 2f) + num2).ToRotationVector2();
					spinningpoint *= new Vector2(1f, 0.3f);
					Vector2 spinningpoint2 = spinningpoint;
					double radians = num29;
					center = default(Vector2);
					spinningpoint = spinningpoint2.RotatedBy(radians, center);
					Dust dust5 = Dust.NewDustPerfect(base.Center + spinningpoint + vector2 * 8f, 59, vector2 * 3f + spinningpoint);
					dust5.noGravity = true;
					dust5.fadeIn = 1.6f;
				}
			}
			if (++frameCounter >= 3)
			{
				frameCounter = 0;
				if (++frame >= 4)
				{
					frame = 0;
				}
			}
		}
		if (type == 519)
		{
			localAI[1] += 1f;
			float num4 = 180f - localAI[1];
			if (num4 < 0f)
			{
				num4 = 0f;
			}
			frameCounter++;
			if (num4 < 15f)
			{
				frameCounter++;
			}
			if ((float)frameCounter >= (num4 / 10f + 6f) / 2f)
			{
				frame++;
				frameCounter = 0;
				if (frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
		}
		if (type == 681 && localAI[1] == 0f)
		{
			localAI[1] = 1f;
		}
		int num5 = 6;
		if (type == 776 || type == 780 || type == 803 || type == 804)
		{
			num5 = 228;
		}
		else if (type == 784 || type == 805)
		{
			num5 = ((Main.rand.Next(3) == 0) ? 6 : Dust.dustWater());
		}
		else if (type == 787 || type == 806)
		{
			num5 = ((Main.rand.Next(3) == 0) ? 6 : 35);
		}
		else if (type == 790 || type == 807)
		{
			num5 = ((Main.rand.Next(3) == 0) ? 6 : 152);
		}
		if (type == 102)
		{
			if (velocity.Y > 10f)
			{
				velocity.Y = 10f;
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(in SoundID.Item10, position);
			}
			frameCounter++;
			if (frameCounter > 3)
			{
				frame++;
				frameCounter = 0;
			}
			if (frame > 1)
			{
				frame = 0;
			}
			if (velocity.Y == 0f)
			{
				position.X += width / 2;
				position.Y += height / 2;
				width = 128;
				height = 128;
				position.X -= width / 2;
				position.Y -= height / 2;
				damage = 40;
				knockBack = 8f;
				timeLeft = 3;
				netUpdate = true;
			}
		}
		if (type == 303 && timeLeft <= 3 && hostile)
		{
			position.X += width / 2;
			position.Y += height / 2;
			width = 128;
			height = 128;
			position.X -= width / 2;
			position.Y -= height / 2;
		}
		if (owner == Main.myPlayer && timeLeft <= 3)
		{
			PrepareBombToBlow();
		}
		else
		{
			if (type != 30 && type != 75 && type != 517 && type != 681 && type != 588 && type != 397 && type != 108 && type != 1002 && type != 133 && type != 134 && type != 135 && type != 136 && type != 137 && type != 138 && type != 139 && type != 140 && type != 141 && type != 142 && type != 143 && type != 144 && type != 164 && type != 303 && type != 338 && type != 339 && type != 340 && type != 341 && (type < 776 || type > 801) && (type < 803 || type > 810) && type != 862 && type != 863 && type != 930)
			{
				damage = 0;
			}
			if (type == 338 || type == 339 || type == 340 || type == 341 || type == 803 || type == 804 || type == 808 || type == 809 || type == 810 || type == 805 || type == 806 || type == 807 || type == 930)
			{
				localAI[1] += 1f;
				if (localAI[1] > 6f)
				{
					alpha = 0;
				}
				else
				{
					alpha = (int)(255f - 42f * localAI[1]) + 100;
					if (alpha > 255)
					{
						alpha = 255;
					}
				}
				for (int l = 0; l < 2; l++)
				{
					float num6 = 0f;
					float num7 = 0f;
					if (l == 1)
					{
						num6 = velocity.X * 0.5f;
						num7 = velocity.Y * 0.5f;
					}
					if (!(localAI[1] > 9f))
					{
						continue;
					}
					if (Main.rand.Next(2) == 0)
					{
						int num8 = Dust.NewDust(new Vector2(position.X + 3f + num6, position.Y + 3f + num7) - velocity * 0.5f, width - 8, height - 8, num5, 0f, 0f, 100);
						Main.dust[num8].scale *= 1.4f + (float)Main.rand.Next(10) * 0.1f;
						Dust obj2 = Main.dust[num8];
						obj2.velocity *= 0.2f;
						Main.dust[num8].noGravity = true;
						if (Main.dust[num8].type == 152)
						{
							Main.dust[num8].scale *= 0.5f;
							Dust obj3 = Main.dust[num8];
							obj3.velocity += velocity * 0.1f;
						}
						else if (Main.dust[num8].type == 35)
						{
							Main.dust[num8].scale *= 0.5f;
							Dust obj4 = Main.dust[num8];
							obj4.velocity += velocity * 0.1f;
						}
						else if (Main.dust[num8].type == Dust.dustWater())
						{
							Main.dust[num8].scale *= 0.65f;
							Dust obj5 = Main.dust[num8];
							obj5.velocity += velocity * 0.1f;
						}
						if (type == 808 || type == 809)
						{
							Dust dust3 = Main.dust[num8];
							if (dust3.dustIndex != 6000)
							{
								dust3 = Dust.NewDustPerfect(dust3.position, dust3.type, dust3.velocity, dust3.alpha, dust3.color, dust3.scale + 0.5f);
								dust3.velocity = Main.rand.NextVector2Circular(3f, 3f);
								dust3.noGravity = true;
							}
							if (dust3.dustIndex != 6000)
							{
								dust3 = Dust.NewDustPerfect(dust3.position, dust3.type, dust3.velocity, dust3.alpha, dust3.color, dust3.scale + 0.5f);
								dust3.velocity = ((float)Math.PI * 2f * ((float)timeLeft / 20f)).ToRotationVector2() * 3f;
								dust3.noGravity = true;
							}
						}
					}
					if (Main.rand.Next(2) == 0)
					{
						int num9 = Dust.NewDust(new Vector2(position.X + 3f + num6, position.Y + 3f + num7) - velocity * 0.5f, width - 8, height - 8, 31, 0f, 0f, 100, default(Color), 0.5f);
						Main.dust[num9].fadeIn = 0.5f + (float)Main.rand.Next(5) * 0.1f;
						Dust obj6 = Main.dust[num9];
						obj6.velocity *= 0.05f;
					}
				}
				float x = position.X;
				float y = position.Y;
				float num10 = 600f;
				if (type == 930)
				{
					num10 = 650f;
				}
				bool flag3 = false;
				ai[0] += 1f;
				if (ai[0] > 30f)
				{
					ai[0] = 30f;
					for (int m = 0; m < 200; m++)
					{
						if (Main.npc[m].CanBeChasedBy(this))
						{
							float num11 = Main.npc[m].position.X + (float)(Main.npc[m].width / 2);
							float num13 = Main.npc[m].position.Y + (float)(Main.npc[m].height / 2);
							float num14 = Math.Abs(position.X + (float)(width / 2) - num11) + Math.Abs(position.Y + (float)(height / 2) - num13);
							if (num14 < num10 && Collision.CanHit(position, width, height, Main.npc[m].position, Main.npc[m].width, Main.npc[m].height))
							{
								num10 = num14;
								x = num11;
								y = num13;
								flag3 = true;
							}
						}
					}
				}
				if (!flag3)
				{
					x = position.X + (float)(width / 2) + velocity.X * 100f;
					y = position.Y + (float)(height / 2) + velocity.Y * 100f;
				}
				float num15 = 16f;
				if (type == 930)
				{
					num15 = 12f;
				}
				Vector2 value2 = (new Vector2(x, y) - base.Center).SafeNormalize(-Vector2.UnitY) * num15;
				velocity = Vector2.Lerp(velocity, value2, 1f / 12f);
			}
			else if (type == 134 || type == 137 || type == 140 || type == 143 || type == 303 || type == 776 || type == 780 || type == 793 || type == 796 || type == 799 || type == 784 || type == 787 || type == 790)
			{
				if (Math.Abs(velocity.X) >= 8f || Math.Abs(velocity.Y) >= 8f)
				{
					for (int n = 0; n < 2; n++)
					{
						float num16 = 0f;
						float num17 = 0f;
						if (n == 1)
						{
							num16 = velocity.X * 0.5f;
							num17 = velocity.Y * 0.5f;
						}
						int num18 = Dust.NewDust(new Vector2(position.X + 3f + num16, position.Y + 3f + num17) - velocity * 0.5f, width - 8, height - 8, num5, 0f, 0f, 100);
						Main.dust[num18].scale *= 2f + (float)Main.rand.Next(10) * 0.1f;
						Dust obj7 = Main.dust[num18];
						obj7.velocity *= 0.2f;
						Main.dust[num18].noGravity = true;
						if (Main.dust[num18].type == 152)
						{
							Main.dust[num18].scale *= 0.5f;
							Dust obj8 = Main.dust[num18];
							obj8.velocity += velocity * 0.1f;
						}
						else if (Main.dust[num18].type == 35)
						{
							Main.dust[num18].scale *= 0.5f;
							Dust obj9 = Main.dust[num18];
							obj9.velocity += velocity * 0.1f;
						}
						else if (Main.dust[num18].type == Dust.dustWater())
						{
							Main.dust[num18].scale *= 0.65f;
							Dust obj10 = Main.dust[num18];
							obj10.velocity += velocity * 0.1f;
						}
						if (type == 793 || type == 796)
						{
							Dust dust4 = Main.dust[num18];
							if (dust4.dustIndex != 6000)
							{
								dust4 = Dust.NewDustPerfect(dust4.position, dust4.type, dust4.velocity, dust4.alpha, dust4.color, dust4.scale);
								dust4.velocity = Main.rand.NextVector2Circular(3f, 3f);
								dust4.noGravity = true;
							}
							if (dust4.dustIndex != 6000)
							{
								dust4 = Dust.NewDustPerfect(dust4.position, dust4.type, dust4.velocity, dust4.alpha, dust4.color, dust4.scale);
								dust4.velocity = ((float)Math.PI * 2f * ((float)timeLeft / 20f)).ToRotationVector2() * 3f;
								dust4.noGravity = true;
							}
						}
						num18 = Dust.NewDust(new Vector2(position.X + 3f + num16, position.Y + 3f + num17) - velocity * 0.5f, width - 8, height - 8, 31, 0f, 0f, 100, default(Color), 0.5f);
						Main.dust[num18].fadeIn = 1f + (float)Main.rand.Next(5) * 0.1f;
						Dust obj11 = Main.dust[num18];
						obj11.velocity *= 0.05f;
					}
				}
				if (Math.Abs(velocity.X) < 15f && Math.Abs(velocity.Y) < 15f)
				{
					velocity *= 1.1f;
				}
			}
			else if (type == 133 || type == 136 || type == 139 || type == 142 || type == 777 || type == 781 || type == 794 || type == 797 || type == 800 || type == 785 || type == 788 || type == 791)
			{
				int num19 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100);
				Main.dust[num19].scale *= 1f + (float)Main.rand.Next(10) * 0.1f;
				Dust obj12 = Main.dust[num19];
				obj12.velocity *= 0.2f;
				Main.dust[num19].noGravity = true;
			}
			else if (type == 135 || type == 138 || type == 141 || type == 144 || type == 778 || type == 782 || type == 795 || type == 798 || type == 801 || type == 786 || type == 789 || type == 792)
			{
				if ((double)velocity.X > -0.2 && (double)velocity.X < 0.2 && (double)velocity.Y > -0.2 && (double)velocity.Y < 0.2)
				{
					alpha += 2;
					if (alpha > 200)
					{
						alpha = 200;
					}
				}
				else
				{
					alpha = 0;
					int num20 = Dust.NewDust(new Vector2(position.X + 3f, position.Y + 3f) - velocity * 0.5f, width - 8, height - 8, 31, 0f, 0f, 100);
					Main.dust[num20].scale *= 1.6f + (float)Main.rand.Next(5) * 0.1f;
					Dust obj13 = Main.dust[num20];
					obj13.velocity *= 0.05f;
					Main.dust[num20].noGravity = true;
				}
			}
			else if (type == 779 || type == 783 || type == 862 || type == 863)
			{
				if (Main.rand.Next(25) == 0)
				{
					Dust dust6 = Dust.NewDustDirect(position, width, height, 228, (0f - velocity.X) / 10f, (0f - velocity.Y) / 10f, 100);
					dust6.noGravity = true;
					dust6.velocity *= 0f;
					dust6.scale = 1.3f;
				}
				if (Main.rand.Next(5) == 0)
				{
					Dust dust7 = Dust.NewDustDirect(position, width, height, 31, (0f - velocity.X) / 10f, (0f - velocity.Y) / 10f, 100);
					dust7.noGravity = true;
					dust7.velocity *= 0f;
					dust7.scale = 1.3f;
				}
				if (frameCounter == 0)
				{
					frameCounter = 1;
					frame = Main.rand.Next(4);
				}
			}
			else if (type != 30 && type != 517 && type != 681 && type != 397 && type != 519 && type != 588 && type != 779 && type != 783 && type != 862 && type != 863 && Main.rand.Next(2) == 0)
			{
				int num21 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100);
				Main.dust[num21].scale = 0.1f + (float)Main.rand.Next(5) * 0.1f;
				Main.dust[num21].fadeIn = 1.5f + (float)Main.rand.Next(5) * 0.1f;
				Main.dust[num21].noGravity = true;
				Dust obj14 = Main.dust[num21];
				Vector2 center2 = base.Center;
				Vector2 spinningpoint3 = new Vector2(0f, (float)(-height / 2));
				double radians2 = rotation;
				center = default(Vector2);
				obj14.position = center2 + Utils.RotatedBy(spinningpoint3, radians2, center) * 1.1f;
				int num22 = 6;
				if (type == 773)
				{
					num22 = 59;
				}
				if (type == 903)
				{
					num22 = Dust.dustWater();
				}
				if (type == 904)
				{
					num22 = 35;
				}
				if (type == 905)
				{
					num22 = 152;
				}
				if (type == 910 || type == 911)
				{
					num22 = 0;
				}
				Dust dust8 = Dust.NewDustDirect(position, width, height, num22, 0f, 0f, 100);
				dust8.scale = 1f + (float)Main.rand.Next(5) * 0.1f;
				dust8.noGravity = true;
				Vector2 center3 = base.Center;
				Vector2 spinningpoint4 = new Vector2(0f, (float)(-height / 2 - 6));
				double radians3 = rotation;
				center = default(Vector2);
				dust8.position = center3 + Utils.RotatedBy(spinningpoint4, radians3, center) * 1.1f;
			}
			else if (type == 681)
			{
				Dust dust9 = Dust.NewDustDirect(position, width, height, 6, 0f, 0f, 100);
				dust9.scale = 1f + (float)Main.rand.Next(5) * 0.1f;
				dust9.noGravity = true;
				Vector2 center4 = base.Center;
				Vector2 spinningpoint5 = new Vector2((float)(6 * Math.Sign(velocity.X)), (float)(-height / 2 - 6));
				double radians4 = rotation;
				center = default(Vector2);
				dust9.position = center4 + Utils.RotatedBy(spinningpoint5, radians4, center) * 1.1f;
			}
		}
		ai[0] += 1f;
		if (type == 338 || type == 339 || type == 340 || type == 341 || type == 803 || type == 804 || type == 808 || type == 809 || type == 810 || type == 805 || type == 806 || type == 807 || type == 930)
		{
			if (velocity.X < 0f)
			{
				spriteDirection = -1;
				rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X) - 1.57f;
			}
			else
			{
				spriteDirection = 1;
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
			}
		}
		else if (type == 134 || type == 137 || type == 140 || type == 143 || type == 303 || type == 776 || type == 780 || type == 793 || type == 796 || type == 799 || type == 784 || type == 787 || type == 790)
		{
			if (velocity != Vector2.Zero)
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
			}
		}
		else if (type == 135 || type == 138 || type == 141 || type == 144 || type == 778 || type == 782 || type == 795 || type == 798 || type == 801 || type == 786 || type == 789 || type == 792)
		{
			velocity.Y += 0.2f;
			velocity *= 0.97f;
			if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
			{
				velocity.X = 0f;
			}
			if ((double)velocity.Y > -0.1 && (double)velocity.Y < 0.1)
			{
				velocity.Y = 0f;
			}
		}
		else if (type == 133 || type == 136 || type == 139 || type == 142 || type == 777 || type == 781 || type == 794 || type == 797 || type == 800 || type == 785 || type == 788 || type == 791)
		{
			if (ai[0] > 15f)
			{
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.95f;
				}
				velocity.Y += 0.2f;
			}
		}
		else if (((type == 30 || type == 397 || type == 517 || type == 681 || type == 588 || type == 779 || type == 783 || type == 862 || type == 863) && ai[0] > 10f) || (type != 30 && type != 397 && type != 517 && type != 588 && type != 779 && type != 783 && type != 862 && type != 863 && ai[0] > 5f))
		{
			ai[0] = 10f;
			if (velocity.Y == 0f && velocity.X != 0f)
			{
				velocity.X *= 0.97f;
				if (type == 29 || type == 470 || type == 637)
				{
					velocity.X *= 0.99f;
				}
				if ((double)velocity.X > -0.01 && (double)velocity.X < 0.01)
				{
					velocity.X = 0f;
					netUpdate = true;
				}
			}
			velocity.Y += 0.2f;
			if (type == 911)
			{
				velocity.X = MathHelper.Clamp(velocity.X, -8f, 8f);
				velocity.Y = MathHelper.Clamp(velocity.Y, -8f, 8f);
			}
		}
		if (type == 519)
		{
			rotation += velocity.X * 0.06f;
		}
		else if (type != 134 && type != 137 && type != 140 && type != 143 && type != 303 && (type < 338 || type > 341) && type != 776 && type != 780 && type != 793 && type != 796 && type != 799 && type != 784 && type != 787 && type != 790 && type != 803 && type != 804 && type != 808 && type != 809 && type != 810 && type != 805 && type != 806 && type != 807 && type != 930)
		{
			rotation += velocity.X * 0.1f;
		}
	}

	private void AI_166_Dove()
	{
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		bool num5 = type == 855;
		if (localAI[0] == 0f)
		{
			localAI[0] = 1f;
			frame = Main.rand.Next(4);
		}
		int num2 = 4;
		if (num5)
		{
			num2 = 6;
		}
		if (++frameCounter > num2)
		{
			frameCounter = 0;
			if (++frame > 3)
			{
				frame = 0;
			}
		}
		spriteDirection = -1;
		if (velocity.X > 0f)
		{
			spriteDirection = 1;
		}
		if (num5)
		{
			float num3 = 1f - (float)alpha / 255f;
			Vector3 rgb = new Vector3(1f, 0.6f, 0.1f) * num3;
			Lighting.AddLight(base.Center, rgb);
			rotation = velocity.X * 0.2f;
			if (velocity.Y < -1f)
			{
				velocity.Y *= 0.99f;
			}
			else
			{
				velocity.Y += (float)Math.Sin((float)(timeLeft % 200) / 200f * ((float)Math.PI * 2f)) * 0.25f;
				if (velocity.Y > 0.5f)
				{
					velocity.Y *= 0.8f;
				}
				velocity.Y = MathHelper.Clamp(velocity.Y, -1.5f, 1.5f);
			}
			float num4 = Main.WindForVisuals;
			if (num4 == 0f)
			{
				num4 = 0.1f;
			}
			velocity.X += 0.0525f * num4;
			velocity.X = MathHelper.Clamp(velocity.X, -2f, 2f);
		}
		else
		{
			rotation = velocity.X * 0.15f;
			velocity.Y -= 0.025f;
			if (velocity.Y < -3f)
			{
				velocity.Y = -3f;
			}
			velocity.X = MathHelper.Clamp(velocity.X, -5f, 5f);
		}
		if (timeLeft < 90)
		{
			alpha += 3;
		}
		if (alpha >= 255)
		{
			Kill();
		}
	}

	private void AI_161_RapierStabs()
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[owner];
		rotation = velocity.ToRotation() + (float)Math.PI / 2f;
		ai[0] += 1f;
		float opacity = Utils.GetLerpValue(0f, 7f, ai[0], clamped: true) * Utils.GetLerpValue(16f, 12f, ai[0], clamped: true);
		Opacity = opacity;
		base.Center = player.RotatedRelativePoint(player.MountedCenter, reverseRotation: false, addGfxOffY: false) + velocity * (ai[0] - 1f);
		spriteDirection = ((!(Vector2.Dot(velocity, Vector2.UnitX) < 0f)) ? 1 : (-1));
		if (ai[0] >= 16f)
		{
			Kill();
		}
		else
		{
			player.heldProj = whoAmI;
		}
	}

	private void AI_165_Whip()
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_030c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0311: Unknown result type (might be due to invalid IL or missing references)
		//IL_0316: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0215: Unknown result type (might be due to invalid IL or missing references)
		//IL_021b: Unknown result type (might be due to invalid IL or missing references)
		//IL_047c: Unknown result type (might be due to invalid IL or missing references)
		//IL_048b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0490: Unknown result type (might be due to invalid IL or missing references)
		//IL_0495: Unknown result type (might be due to invalid IL or missing references)
		//IL_04aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04da: Unknown result type (might be due to invalid IL or missing references)
		//IL_04df: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0505: Unknown result type (might be due to invalid IL or missing references)
		//IL_0519: Unknown result type (might be due to invalid IL or missing references)
		//IL_051e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0525: Unknown result type (might be due to invalid IL or missing references)
		//IL_052a: Unknown result type (might be due to invalid IL or missing references)
		//IL_052f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0604: Unknown result type (might be due to invalid IL or missing references)
		//IL_0613: Unknown result type (might be due to invalid IL or missing references)
		//IL_0618: Unknown result type (might be due to invalid IL or missing references)
		//IL_061d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0632: Unknown result type (might be due to invalid IL or missing references)
		//IL_064a: Unknown result type (might be due to invalid IL or missing references)
		//IL_064f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0654: Unknown result type (might be due to invalid IL or missing references)
		//IL_0659: Unknown result type (might be due to invalid IL or missing references)
		//IL_065e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0660: Unknown result type (might be due to invalid IL or missing references)
		//IL_0662: Unknown result type (might be due to invalid IL or missing references)
		//IL_0667: Unknown result type (might be due to invalid IL or missing references)
		//IL_066e: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_06cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0718: Unknown result type (might be due to invalid IL or missing references)
		//IL_071d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0724: Unknown result type (might be due to invalid IL or missing references)
		//IL_0729: Unknown result type (might be due to invalid IL or missing references)
		//IL_072e: Unknown result type (might be due to invalid IL or missing references)
		//IL_032d: Unknown result type (might be due to invalid IL or missing references)
		//IL_032f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0334: Unknown result type (might be due to invalid IL or missing references)
		//IL_033b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0350: Unknown result type (might be due to invalid IL or missing references)
		//IL_0368: Unknown result type (might be due to invalid IL or missing references)
		//IL_036d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0385: Unknown result type (might be due to invalid IL or missing references)
		//IL_0394: Unknown result type (might be due to invalid IL or missing references)
		//IL_0399: Unknown result type (might be due to invalid IL or missing references)
		//IL_039e: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_03de: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_057b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0580: Unknown result type (might be due to invalid IL or missing references)
		//IL_0594: Unknown result type (might be due to invalid IL or missing references)
		//IL_054d: Unknown result type (might be due to invalid IL or missing references)
		//IL_054f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0558: Unknown result type (might be due to invalid IL or missing references)
		//IL_055d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0562: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0abe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0add: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0afa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b04: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b09: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d06: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d15: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d34: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d51: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d56: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d60: Unknown result type (might be due to invalid IL or missing references)
		//IL_080e: Unknown result type (might be due to invalid IL or missing references)
		//IL_081d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0822: Unknown result type (might be due to invalid IL or missing references)
		//IL_0827: Unknown result type (might be due to invalid IL or missing references)
		//IL_083c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0854: Unknown result type (might be due to invalid IL or missing references)
		//IL_0859: Unknown result type (might be due to invalid IL or missing references)
		//IL_085e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0863: Unknown result type (might be due to invalid IL or missing references)
		//IL_0868: Unknown result type (might be due to invalid IL or missing references)
		//IL_086a: Unknown result type (might be due to invalid IL or missing references)
		//IL_086c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0871: Unknown result type (might be due to invalid IL or missing references)
		//IL_0878: Unknown result type (might be due to invalid IL or missing references)
		//IL_088e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0894: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_08cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0783: Unknown result type (might be due to invalid IL or missing references)
		//IL_0788: Unknown result type (might be due to invalid IL or missing references)
		//IL_094b: Unknown result type (might be due to invalid IL or missing references)
		//IL_095a: Unknown result type (might be due to invalid IL or missing references)
		//IL_095f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0964: Unknown result type (might be due to invalid IL or missing references)
		//IL_0979: Unknown result type (might be due to invalid IL or missing references)
		//IL_0991: Unknown result type (might be due to invalid IL or missing references)
		//IL_0996: Unknown result type (might be due to invalid IL or missing references)
		//IL_099b: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_09cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b10: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b12: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b17: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b34: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b53: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b64: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a13: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a18: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a24: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a29: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b79: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b80: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b87: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ba3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e33: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e55: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e66: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e72: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e77: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d91: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d98: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dae: Unknown result type (might be due to invalid IL or missing references)
		//IL_0db4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dea: Unknown result type (might be due to invalid IL or missing references)
		//IL_0def: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e00: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c68: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c81: Unknown result type (might be due to invalid IL or missing references)
		//IL_0beb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bed: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c10: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c21: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c26: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c32: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c37: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c48: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c4d: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[owner];
		rotation = velocity.ToRotation() + (float)Math.PI / 2f;
		ai[0] += 1f;
		GetWhipSettings(this, out var timeToFlyOut, out var _, out var _);
		base.Center = Main.GetPlayerArmPosition(this) + velocity * (ai[0] - 1f);
		spriteDirection = ((!(Vector2.Dot(velocity, Vector2.UnitX) < 0f)) ? 1 : (-1));
		if (ai[0] >= timeToFlyOut)
		{
			Kill();
			return;
		}
		player.heldProj = whoAmI;
		player.MatchItemTimeToItemAnimation();
		if (ai[0] == (float)(int)(timeToFlyOut / 2f))
		{
			WhipPointsForCollision.Clear();
			FillWhipControlPoints(this, WhipPointsForCollision);
			Vector2 vector = WhipPointsForCollision[WhipPointsForCollision.Count - 1];
			SoundEngine.PlaySound(in SoundID.Item153, vector);
		}
		switch (type)
		{
		case 848:
		{
			float t3 = ai[0] / timeToFlyOut;
			float num5 = Utils.GetLerpValue(0.1f, 0.7f, t3, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t3, clamped: true);
			if (num5 > 0.1f && Main.rand.NextFloat() < num5 / 2f)
			{
				WhipPointsForCollision.Clear();
				FillWhipControlPoints(this, WhipPointsForCollision);
				Rectangle r4 = Utils.CenteredRectangle(WhipPointsForCollision[WhipPointsForCollision.Count - 1], new Vector2(30f, 30f));
				int num6 = Dust.NewDust(r4.TopLeft(), r4.Width, r4.Height, 172, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num6].noGravity = true;
				Main.dust[num6].velocity.X /= 2f;
				Main.dust[num6].velocity.Y /= 2f;
			}
			break;
		}
		case 847:
		{
			float t2 = ai[0] / timeToFlyOut;
			if (Utils.GetLerpValue(0.1f, 0.7f, t2, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t2, clamped: true) > 0.5f && Main.rand.Next(3) != 0)
			{
				WhipPointsForCollision.Clear();
				FillWhipControlPoints(this, WhipPointsForCollision);
				int num2 = Main.rand.Next(WhipPointsForCollision.Count - 10, WhipPointsForCollision.Count);
				Rectangle r2 = Utils.CenteredRectangle(WhipPointsForCollision[num2], new Vector2(30f, 30f));
				int num3 = 57;
				if (Main.rand.Next(3) == 0)
				{
					num3 = 43;
				}
				Dust dust14 = Dust.NewDustDirect(r2.TopLeft(), r2.Width, r2.Height, num3, 0f, 0f, 100, Color.White);
				dust14.position = WhipPointsForCollision[num2];
				dust14.fadeIn = 0.3f;
				Vector2 spinningpoint = WhipPointsForCollision[num2] - WhipPointsForCollision[num2 - 1];
				dust14.noGravity = true;
				dust14.velocity *= 0.5f;
				dust14.velocity += spinningpoint.RotatedBy((float)player.direction * ((float)Math.PI / 2f));
				dust14.velocity *= 0.5f;
			}
			break;
		}
		case 849:
		{
			float num4 = ai[0] / timeToFlyOut;
			Utils.GetLerpValue(0.1f, 0.7f, num4, clamped: true);
			Utils.GetLerpValue(0.9f, 0.7f, num4, clamped: true);
			if (num4 > 0.4f && Main.rand.Next(9) != 0)
			{
				WhipPointsForCollision.Clear();
				FillWhipControlPoints(this, WhipPointsForCollision);
				Rectangle r3 = Utils.CenteredRectangle(WhipPointsForCollision[WhipPointsForCollision.Count - 1], new Vector2(30f, 30f));
				Vector2 vector3 = WhipPointsForCollision[WhipPointsForCollision.Count - 2].DirectionTo(WhipPointsForCollision[WhipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
				Dust dust15 = Dust.NewDustDirect(r3.TopLeft(), r3.Width, r3.Height, 191, 0f, 0f, 0, default(Color), 1.3f);
				dust15.noGravity = true;
				dust15.velocity += vector3 * 2f;
				if (Main.rand.Next(2) == 0)
				{
					ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.BlackLightningSmall, new ParticleOrchestraSettings
					{
						MovementVector = vector3,
						PositionInWorld = ((Rectangle)(ref r3)).Center.ToVector2()
					}, owner);
				}
				Lighting.AddLight(((Rectangle)(ref r3)).Center.ToVector2(), new Vector3(0.2f, 0f, 0.4f));
			}
			break;
		}
		case 915:
		{
			float t5 = ai[0] / timeToFlyOut;
			if (Utils.GetLerpValue(0.1f, 0.7f, t5, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t5, clamped: true) > 0.1f)
			{
				WhipPointsForCollision.Clear();
				FillWhipControlPoints(this, WhipPointsForCollision);
				Rectangle r6 = Utils.CenteredRectangle(WhipPointsForCollision[WhipPointsForCollision.Count - 1], new Vector2(30f, 30f));
				Vector2 vector5 = WhipPointsForCollision[WhipPointsForCollision.Count - 2].DirectionTo(WhipPointsForCollision[WhipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
				Dust dust12 = Dust.NewDustDirect(r6.TopLeft(), r6.Width, r6.Height, 267, 0f, 0f, 0, Main.hslToRgb(player.miscCounterNormalized * 9f % 1f, 1f, 0.5f), 1.3f);
				dust12.velocity *= Main.rand.NextFloat() * 0.8f;
				dust12.noGravity = true;
				dust12.scale = 0.9f + Main.rand.NextFloat() * 0.9f;
				dust12.fadeIn = Main.rand.NextFloat() * 0.9f;
				dust12.velocity += vector5 * 2f;
				if (dust12.dustIndex != 6000)
				{
					Dust dust19 = Dust.CloneDust(dust12);
					dust19.scale /= 2f;
					dust19.fadeIn *= 0.85f;
					dust19.color = new Color(255, 255, 255, 255);
				}
			}
			break;
		}
		case 914:
		{
			float t6 = ai[0] / timeToFlyOut;
			float num8 = Utils.GetLerpValue(0.1f, 0.7f, t6, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t6, clamped: true);
			if (num8 > 0.1f && Main.rand.NextFloat() < num8 / 2f)
			{
				WhipPointsForCollision.Clear();
				FillWhipControlPoints(this, WhipPointsForCollision);
				Rectangle r7 = Utils.CenteredRectangle(WhipPointsForCollision[WhipPointsForCollision.Count - 1], new Vector2(30f, 30f));
				Vector2 vector6 = WhipPointsForCollision[WhipPointsForCollision.Count - 2].DirectionTo(WhipPointsForCollision[WhipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
				Dust dust20 = Dust.NewDustDirect(r7.TopLeft(), r7.Width, r7.Height, 39, 0f, 0f, 0, default(Color), 1.2f);
				dust20.noGravity = Main.rand.Next(3) == 0;
				dust20.velocity += vector6 * 2f;
			}
			break;
		}
		case 952:
		{
			float t7 = ai[0] / timeToFlyOut;
			float num9 = Utils.GetLerpValue(0.1f, 0.7f, t7, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t7, clamped: true);
			if (num9 > 0.15f && Main.rand.NextFloat() < num9)
			{
				WhipPointsForCollision.Clear();
				FillWhipControlPoints(this, WhipPointsForCollision);
				Rectangle r8 = Utils.CenteredRectangle(WhipPointsForCollision[WhipPointsForCollision.Count - 1], new Vector2(30f, 30f));
				Vector2 vector7 = WhipPointsForCollision[WhipPointsForCollision.Count - 2].DirectionTo(WhipPointsForCollision[WhipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
				Dust dust10 = Dust.NewDustDirect(r8.TopLeft(), r8.Width, r8.Height, 26, 0f, 0f, 0, default(Color), 0.7f);
				dust10.noGravity = Main.rand.Next(3) == 0;
				if (dust10.noGravity)
				{
					dust10.scale += 0.4f;
				}
				dust10.velocity += vector7 * 2f;
			}
			break;
		}
		case 912:
		{
			float t4 = ai[0] / timeToFlyOut;
			float num7 = Utils.GetLerpValue(0.1f, 0.7f, t4, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t4, clamped: true);
			if (!(num7 > 0.1f) || !(Main.rand.NextFloat() < num7 / 2f))
			{
				break;
			}
			WhipPointsForCollision.Clear();
			FillWhipControlPoints(this, WhipPointsForCollision);
			Rectangle r5 = Utils.CenteredRectangle(WhipPointsForCollision[WhipPointsForCollision.Count - 1], new Vector2(30f, 30f));
			Vector2 vector4 = WhipPointsForCollision[WhipPointsForCollision.Count - 2].DirectionTo(WhipPointsForCollision[WhipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
			for (int j = 0; j < 3; j++)
			{
				Dust dust16 = Dust.NewDustDirect(r5.TopLeft(), r5.Width, r5.Height, 16, 0f, 0f, 0, default(Color), 1.2f);
				dust16.noGravity = true;
				dust16.velocity += vector4 * 2f;
			}
			for (int k = 0; k < 1; k++)
			{
				Dust dust17 = Dust.NewDustDirect(r5.TopLeft(), r5.Width, r5.Height, 13, 0f, 0f, 0, default(Color), 0.8f);
				dust17.velocity += vector4 * 2f;
			}
			for (int l = 0; l < 3; l++)
			{
				if (Main.rand.Next(2) != 0)
				{
					Dust dust18 = Dust.NewDustDirect(r5.TopLeft(), r5.Width, r5.Height, 261, 0f, 0f, 0, Color.Transparent, 0.8f);
					dust18.velocity += vector4 * 2f;
					dust18.velocity *= 0.3f;
					dust18.noGravity = true;
				}
			}
			Lighting.AddLight(((Rectangle)(ref r5)).Center.ToVector2(), new Vector3(0.1f, 0.1f, 0.2f));
			break;
		}
		case 913:
		{
			float t = ai[0] / timeToFlyOut;
			float num = Utils.GetLerpValue(0.1f, 0.7f, t, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t, clamped: true);
			if (!(num > 0.1f) || !(Main.rand.NextFloat() < num))
			{
				break;
			}
			WhipPointsForCollision.Clear();
			FillWhipControlPoints(this, WhipPointsForCollision);
			Rectangle r = Utils.CenteredRectangle(WhipPointsForCollision[WhipPointsForCollision.Count - 1], new Vector2(20f, 20f));
			Vector2 vector2 = WhipPointsForCollision[WhipPointsForCollision.Count - 2].DirectionTo(WhipPointsForCollision[WhipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
			for (int i = 0; i < 3; i++)
			{
				if (Main.rand.Next(3) != 0)
				{
					continue;
				}
				if (Main.rand.Next(7) == 0)
				{
					Dust dust13 = Dust.NewDustDirect(r.TopLeft(), r.Width, r.Height, 31);
					dust13.velocity.X /= 2f;
					dust13.velocity.Y /= 2f;
					dust13.velocity += vector2 * 2f;
					dust13.fadeIn = 1f + Main.rand.NextFloat() * 0.6f;
					dust13.noGravity = true;
					continue;
				}
				Dust dust11 = Dust.NewDustDirect(r.TopLeft(), r.Width, r.Height, 6, 0f, 0f, 0, default(Color), 1.2f);
				dust11.velocity += vector2 * 2f;
				if (Main.rand.Next(3) != 0)
				{
					dust11.fadeIn = 0.7f + Main.rand.NextFloat() * 0.9f;
					dust11.scale = 0.6f;
					dust11.noGravity = true;
				}
			}
			break;
		}
		}
	}

	public static void FillWhipControlPoints(Projectile proj, List<Vector2> controlPoints)
	{
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_011d: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0129: Unknown result type (might be due to invalid IL or missing references)
		//IL_014a: Unknown result type (might be due to invalid IL or missing references)
		//IL_014e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0155: Unknown result type (might be due to invalid IL or missing references)
		//IL_015a: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_0165: Unknown result type (might be due to invalid IL or missing references)
		//IL_0172: Unknown result type (might be due to invalid IL or missing references)
		//IL_0177: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_017e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0182: Unknown result type (might be due to invalid IL or missing references)
		//IL_018f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0194: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_01da: Unknown result type (might be due to invalid IL or missing references)
		//IL_01df: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0225: Unknown result type (might be due to invalid IL or missing references)
		//IL_0227: Unknown result type (might be due to invalid IL or missing references)
		//IL_022c: Unknown result type (might be due to invalid IL or missing references)
		//IL_022f: Unknown result type (might be due to invalid IL or missing references)
		//IL_024b: Unknown result type (might be due to invalid IL or missing references)
		//IL_024d: Unknown result type (might be due to invalid IL or missing references)
		//IL_024f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0251: Unknown result type (might be due to invalid IL or missing references)
		//IL_0253: Unknown result type (might be due to invalid IL or missing references)
		GetWhipSettings(proj, out var timeToFlyOut, out var segments, out var rangeMultiplier);
		float num = proj.ai[0] / timeToFlyOut;
		float num10 = 0.5f;
		float num11 = 1f + num10;
		float num12 = (float)Math.PI * 10f * (1f - num * num11) * (float)(-proj.spriteDirection) / (float)segments;
		float num13 = num * num11;
		float num14 = 0f;
		if (num13 > 1f)
		{
			num14 = (num13 - 1f) / num10;
			num13 = MathHelper.Lerp(1f, 0f, num14);
		}
		float num15 = proj.ai[0] - 1f;
		Player player = Main.player[proj.owner];
		Item heldItem = Main.player[proj.owner].HeldItem;
		num15 = (float)(ContentSamples.ItemsByType[heldItem.type].useAnimation * 2) * num * player.whipRangeMultiplier;
		float num16 = ((Vector2)(ref proj.velocity)).Length() * num15 * num13 * rangeMultiplier / (float)segments;
		float num17 = 1f;
		Vector2 playerArmPosition = Main.GetPlayerArmPosition(proj);
		Vector2 vector = playerArmPosition;
		float num2 = -(float)Math.PI / 2f;
		Vector2 vector2 = vector;
		float num3 = (float)Math.PI / 2f + (float)Math.PI / 2f * (float)proj.spriteDirection;
		Vector2 vector3 = vector;
		float num4 = (float)Math.PI / 2f;
		controlPoints.Add(playerArmPosition);
		for (int i = 0; i < segments; i++)
		{
			float num5 = (float)i / (float)segments;
			float num6 = num12 * num5 * num17;
			Vector2 vector4 = vector + num2.ToRotationVector2() * num16;
			Vector2 vector5 = vector3 + num4.ToRotationVector2() * (num16 * 2f);
			Vector2 val = vector2 + num3.ToRotationVector2() * (num16 * 2f);
			float num7 = 1f - num13;
			float num8 = 1f - num7 * num7;
			Vector2 value = Vector2.Lerp(vector5, vector4, num8 * 0.9f + 0.1f);
			Vector2 vector6 = Vector2.Lerp(val, value, num8 * 0.7f + 0.3f);
			Vector2 spinningpoint = playerArmPosition + (vector6 - playerArmPosition) * new Vector2(1f, num11);
			float num9 = num14;
			num9 *= num9;
			Vector2 item = spinningpoint.RotatedBy(proj.rotation + 4.712389f * num9 * (float)proj.spriteDirection, playerArmPosition);
			controlPoints.Add(item);
			num2 += num6;
			num4 += num6;
			num3 += num6;
			vector = vector4;
			vector3 = vector5;
			vector2 = val;
		}
	}

	public static void GetWhipSettings(Projectile proj, out float timeToFlyOut, out int segments, out float rangeMultiplier)
	{
		timeToFlyOut = Main.player[proj.owner].itemAnimationMax * proj.MaxUpdates;
		segments = proj.WhipSettings.Segments;
		rangeMultiplier = proj.WhipSettings.RangeMultiplier;
	}

	private static void VanillaWhipSettings(Projectile proj, out int segments, out float rangeMultiplier)
	{
		segments = 20;
		rangeMultiplier = 1f;
		switch (proj.type)
		{
		case 913:
			rangeMultiplier *= 1.4f;
			break;
		case 912:
			rangeMultiplier *= 1.5f;
			break;
		case 841:
			rangeMultiplier *= 0.75f;
			break;
		case 914:
			rangeMultiplier *= 1f;
			break;
		case 847:
			segments = 20;
			rangeMultiplier *= 1.75f;
			break;
		case 849:
			segments = 30;
			rangeMultiplier = 2.15f;
			break;
		case 915:
			segments = 40;
			rangeMultiplier = 2.2f;
			break;
		case 848:
			segments = 40;
			rangeMultiplier = 1.6f;
			break;
		case 952:
			rangeMultiplier *= 0.95f;
			break;
		}
	}

	private void AI_160_Kites()
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0155: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01db: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_020b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0210: Unknown result type (might be due to invalid IL or missing references)
		//IL_0224: Unknown result type (might be due to invalid IL or missing references)
		//IL_021c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0221: Unknown result type (might be due to invalid IL or missing references)
		//IL_0407: Unknown result type (might be due to invalid IL or missing references)
		//IL_0408: Unknown result type (might be due to invalid IL or missing references)
		//IL_040d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0411: Unknown result type (might be due to invalid IL or missing references)
		//IL_0416: Unknown result type (might be due to invalid IL or missing references)
		//IL_041d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0427: Unknown result type (might be due to invalid IL or missing references)
		//IL_042c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0432: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0259: Unknown result type (might be due to invalid IL or missing references)
		//IL_025e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0268: Unknown result type (might be due to invalid IL or missing references)
		//IL_026d: Unknown result type (might be due to invalid IL or missing references)
		//IL_045b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0460: Unknown result type (might be due to invalid IL or missing references)
		//IL_0461: Unknown result type (might be due to invalid IL or missing references)
		//IL_0466: Unknown result type (might be due to invalid IL or missing references)
		//IL_0468: Unknown result type (might be due to invalid IL or missing references)
		//IL_033b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0357: Unknown result type (might be due to invalid IL or missing references)
		//IL_0358: Unknown result type (might be due to invalid IL or missing references)
		//IL_035d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0368: Unknown result type (might be due to invalid IL or missing references)
		//IL_036d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0371: Unknown result type (might be due to invalid IL or missing references)
		//IL_0376: Unknown result type (might be due to invalid IL or missing references)
		//IL_0380: Unknown result type (might be due to invalid IL or missing references)
		//IL_0382: Unknown result type (might be due to invalid IL or missing references)
		//IL_047c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0488: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03de: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[owner];
		Vector2 vector = player.RotatedRelativePoint(player.MountedCenter);
		timeLeft = 60;
		bool flag = false;
		if (player.CCed || player.noItems)
		{
			flag = true;
		}
		else if (player.inventory[player.selectedItem].shoot != type)
		{
			flag = true;
		}
		else if (player.pulley)
		{
			flag = true;
		}
		else if (player.dead)
		{
			flag = true;
		}
		if (!flag)
		{
			Vector2 val = player.Center - base.Center;
			flag = ((Vector2)(ref val)).Length() > 2000f;
		}
		if (flag)
		{
			Kill();
			return;
		}
		float num = 4f;
		float num7 = 500f;
		float num8 = num7 / 2f;
		if (owner == Main.myPlayer && extraUpdates == 0)
		{
			float num14 = ai[0];
			if (ai[0] == 0f)
			{
				ai[0] = num8;
			}
			float num9 = ai[0];
			if (Main.mouseRight)
			{
				num9 -= 5f;
			}
			if (Main.mouseLeft)
			{
				num9 += 5f;
			}
			ai[0] = MathHelper.Clamp(num9, num, num7);
			if (num14 != num9)
			{
				netUpdate = true;
			}
		}
		if (numUpdates == 1)
		{
			extraUpdates = 0;
		}
		int num10 = 0;
		float cloudAlpha = Main.cloudAlpha;
		float num11 = 0f;
		if (WorldGen.InAPlaceWithWind(position, width, height))
		{
			num11 = Main.WindForVisuals;
		}
		float num12 = Utils.GetLerpValue(0.2f, 0.5f, Math.Abs(num11), clamped: true) * 0.5f;
		switch (num10)
		{
		case 0:
		{
			Vector2 mouseWorld = Main.MouseWorld;
			mouseWorld = base.Center;
			mouseWorld += new Vector2(num11, (float)Math.Sin(Main.GlobalTimeWrappedHourly) + cloudAlpha * 5f) * 25f;
			Vector2 v = mouseWorld - base.Center;
			v = v.SafeNormalize(Vector2.Zero) * (3f + cloudAlpha * 7f);
			if (num12 == 0f)
			{
				v = velocity;
			}
			float num13 = Distance(mouseWorld);
			float lerpValue = Utils.GetLerpValue(5f, 10f, num13, clamped: true);
			float y = velocity.Y;
			if (num13 > 10f)
			{
				velocity = Vector2.Lerp(velocity, v, 0.075f * lerpValue);
			}
			velocity.Y = y;
			velocity.Y -= num12;
			velocity.Y += 0.02f + num12 * 0.25f;
			velocity.Y = MathHelper.Clamp(velocity.Y, -2f, 2f);
			if (base.Center.Y + velocity.Y < mouseWorld.Y)
			{
				velocity.Y = MathHelper.Lerp(velocity.Y, velocity.Y + num12 + 0.01f, 0.75f);
			}
			velocity.X *= 0.98f;
			float num2 = Distance(vector);
			float num3 = ai[0];
			if (num2 > num3)
			{
				Vector2 vector3 = DirectionTo(vector);
				float num4 = num2 - num3;
				base.Center += vector3 * num4;
				bool num15 = Vector2.Dot(vector3, Vector2.UnitY) < 0.8f || num12 > 0f;
				velocity.Y += vector3.Y * 0.05f;
				if (num15)
				{
					velocity.Y -= 0.15f;
				}
				velocity.X += vector3.X * 0.2f;
				if (num3 == num && owner == Main.myPlayer)
				{
					Kill();
					return;
				}
			}
			break;
		}
		case 1:
		{
			Vector2 vector2 = DirectionTo(vector);
			velocity = Vector2.Lerp(velocity, vector2 * 16f, 1f);
			if (Distance(vector) < 10f && owner == Main.myPlayer)
			{
				Kill();
				return;
			}
			break;
		}
		}
		timeLeft = 2;
		Vector2 vector4 = base.Center - vector;
		int dir = ((vector4.X > 0f) ? 1 : (-1));
		if (Math.Abs(vector4.X) > Math.Abs(vector4.Y) / 2f)
		{
			player.ChangeDir(dir);
		}
		Vector2 vector5 = DirectionTo(vector).SafeNormalize(Vector2.Zero);
		if (num12 == 0f && velocity.Y > -0.02f)
		{
			rotation *= 0.95f;
		}
		else
		{
			float num5 = (-vector5).ToRotation() + (float)Math.PI / 4f;
			if (spriteDirection == -1)
			{
				num5 -= (float)Math.PI / 2f * (float)player.direction;
			}
			rotation = num5 + velocity.X * 0.05f;
		}
		float num6 = ((Vector2)(ref velocity)).Length();
		switch (type)
		{
		case 771:
		case 822:
		case 823:
		case 827:
		case 830:
		case 838:
		case 843:
		case 844:
		case 845:
		case 846:
		case 850:
		case 852:
			frame = 0;
			break;
		case 828:
		case 829:
			if (num6 < 6f)
			{
				frame = 1;
			}
			else
			{
				frame = 0;
			}
			break;
		case 826:
			frame = (int)ai[1];
			break;
		case 824:
		case 839:
		case 840:
		case 853:
			if (num12 < 0.15f)
			{
				frame = 0;
				break;
			}
			frameCounter++;
			if ((float)frameCounter > (1f - num12) * 10f)
			{
				frameCounter = 0;
				frame = Main.rand.Next(4);
			}
			break;
		default:
			if (num6 < 3f)
			{
				frame = 0;
			}
			else if (num6 < 5f)
			{
				frame = 1;
			}
			else if (num6 < 7f)
			{
				frame = 2;
			}
			else
			{
				frame = 3;
			}
			break;
		}
		spriteDirection = player.direction;
	}

	private void AI_159_PaperAirplanes()
	{
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0102: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_019d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01be: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fd: Unknown result type (might be due to invalid IL or missing references)
		if (ai[1] == 0f)
		{
			direction = ((velocity.X > 0f) ? 1 : (-1));
			rotation = velocity.ToRotation();
			ai[1] = 1f;
			ai[0] = -Main.rand.Next(30, 80);
			netUpdate = true;
		}
		if (wet && owner == Main.myPlayer)
		{
			Kill();
		}
		ai[0] += 1f;
		Vector2 vector = rotation.ToRotationVector2() * 8f;
		float y = (float)Math.Sin((float)Math.PI * 2f * (float)(Main.timeForVisualEffects % 90.0 / 90.0)) * (float)direction * Main.WindForVisuals;
		Vector2 v = vector + new Vector2(Main.WindForVisuals, y);
		_ = Vector2.UnitX * (float)direction;
		bool flag = direction == Math.Sign(Main.WindForVisuals) && ((Vector2)(ref velocity)).Length() > 3f;
		bool num4 = ai[0] >= 20f && ai[0] <= 69f;
		if (ai[0] == 70f)
		{
			ai[0] = -Main.rand.Next(120, 600);
		}
		bool num5 = num4 && flag;
		if (num5)
		{
			float lerpValue = Utils.GetLerpValue(0f, 30f, ai[0], clamped: true);
			v = vector.RotatedBy((float)(-direction) * ((float)Math.PI * 2f) * 0.02f * lerpValue);
		}
		velocity = v.SafeNormalize(Vector2.UnitY) * ((Vector2)(ref velocity)).Length();
		if (!num5)
		{
			float num3 = MathHelper.Lerp(0.15f, 0.05f, Math.Abs(Main.WindForVisuals));
			if (timeLeft % 40 < 20)
			{
				velocity.Y -= num3;
			}
			else
			{
				velocity.Y += num3;
			}
			if (velocity.Y < -2f)
			{
				velocity.Y = -2f;
			}
			if (velocity.Y > 2f)
			{
				velocity.Y = 2f;
			}
			velocity.X = MathHelper.Clamp(velocity.X + Main.WindForVisuals * 0.006f, -6f, 6f);
			if (velocity.X * oldVelocity.X < 0f)
			{
				direction *= -1;
				ai[0] = -Main.rand.Next(120, 300);
				netUpdate = true;
			}
		}
		rotation = velocity.ToRotation();
		spriteDirection = direction;
	}

	private void AI_158_BabyBird()
	{
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_0465: Unknown result type (might be due to invalid IL or missing references)
		//IL_046a: Unknown result type (might be due to invalid IL or missing references)
		//IL_046d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_04cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0225: Unknown result type (might be due to invalid IL or missing references)
		//IL_022a: Unknown result type (might be due to invalid IL or missing references)
		//IL_022f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0233: Unknown result type (might be due to invalid IL or missing references)
		//IL_0238: Unknown result type (might be due to invalid IL or missing references)
		//IL_0245: Unknown result type (might be due to invalid IL or missing references)
		//IL_0252: Unknown result type (might be due to invalid IL or missing references)
		//IL_025c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0261: Unknown result type (might be due to invalid IL or missing references)
		//IL_0266: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0202: Unknown result type (might be due to invalid IL or missing references)
		//IL_0205: Unknown result type (might be due to invalid IL or missing references)
		//IL_020f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0214: Unknown result type (might be due to invalid IL or missing references)
		//IL_019e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_0515: Unknown result type (might be due to invalid IL or missing references)
		//IL_0517: Unknown result type (might be due to invalid IL or missing references)
		//IL_051c: Unknown result type (might be due to invalid IL or missing references)
		//IL_051e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0541: Unknown result type (might be due to invalid IL or missing references)
		//IL_0546: Unknown result type (might be due to invalid IL or missing references)
		//IL_054a: Unknown result type (might be due to invalid IL or missing references)
		//IL_054f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0553: Unknown result type (might be due to invalid IL or missing references)
		//IL_055d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0562: Unknown result type (might be due to invalid IL or missing references)
		//IL_027b: Unknown result type (might be due to invalid IL or missing references)
		//IL_028d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0292: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_074b: Unknown result type (might be due to invalid IL or missing references)
		//IL_074d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0752: Unknown result type (might be due to invalid IL or missing references)
		//IL_0756: Unknown result type (might be due to invalid IL or missing references)
		//IL_075b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0768: Unknown result type (might be due to invalid IL or missing references)
		//IL_0775: Unknown result type (might be due to invalid IL or missing references)
		//IL_077f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0784: Unknown result type (might be due to invalid IL or missing references)
		//IL_0789: Unknown result type (might be due to invalid IL or missing references)
		//IL_0578: Unknown result type (might be due to invalid IL or missing references)
		//IL_058b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0590: Unknown result type (might be due to invalid IL or missing references)
		//IL_080f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0832: Unknown result type (might be due to invalid IL or missing references)
		//IL_0837: Unknown result type (might be due to invalid IL or missing references)
		//IL_079e: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b5: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[owner];
		int totalIndexesInGroup;
		if (type == 759)
		{
			if (player.dead)
			{
				player.babyBird = false;
			}
			if (player.babyBird)
			{
				timeLeft = 2;
			}
			totalIndexesInGroup = ++frameCounter;
			if (totalIndexesInGroup >= 6)
			{
				frameCounter = 0;
				totalIndexesInGroup = ++frame;
				if (totalIndexesInGroup >= Main.projFrames[type] - 1)
				{
					frame = 0;
				}
			}
		}
		float num = 6f;
		float num4 = 8f;
		int num5 = 800;
		float num6 = 150f;
		int attackTarget = -1;
		Minion_FindTargetInRange(num5, ref attackTarget, skipIfCannotHitWithOwnBody: false);
		if (attackTarget != -1)
		{
			NPC nPC = Main.npc[attackTarget];
			if (player.Distance(nPC.Center) > (float)num5)
			{
				attackTarget = -1;
			}
		}
		if (attackTarget != -1)
		{
			if (!Collision.SolidCollision(position, width, height))
			{
				tileCollide = true;
			}
			NPC nPC2 = Main.npc[attackTarget];
			float num7 = Distance(nPC2.Center);
			Rectangle rectangle = default(Rectangle);
			((Rectangle)(ref rectangle))._002Ector((int)position.X, (int)position.Y, width, height);
			Rectangle value = default(Rectangle);
			((Rectangle)(ref value))._002Ector((int)nPC2.position.X, (int)nPC2.position.Y, nPC2.width, nPC2.height);
			if (((Rectangle)(ref rectangle)).Intersects(value))
			{
				tileCollide = false;
				if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < num4)
				{
					velocity *= 1.1f;
				}
				if (((Vector2)(ref velocity)).Length() > num4)
				{
					velocity *= num4 / ((Vector2)(ref velocity)).Length();
				}
			}
			else if (num7 > num6)
			{
				Vector2 vector = DirectionTo(nPC2.Center);
				velocity = Vector2.Lerp(velocity, vector * num, 0.15f);
			}
			else
			{
				tileCollide = false;
				Vector2 vector2 = DirectionTo(nPC2.Center);
				velocity += new Vector2((float)Math.Sign(vector2.X), (float)Math.Sign(vector2.Y)) * 0.35f;
				if (((Vector2)(ref velocity)).Length() > num4)
				{
					velocity *= num4 / ((Vector2)(ref velocity)).Length();
				}
			}
			float num8 = 0.025f;
			float num9 = width * 3;
			for (int i = 0; i < 1000; i++)
			{
				if (i != whoAmI && Main.projectile[i].active && Main.projectile[i].owner == owner && Main.projectile[i].type == type && Math.Abs(position.X - Main.projectile[i].position.X) + Math.Abs(position.Y - Main.projectile[i].position.Y) < num9)
				{
					if (position.X < Main.projectile[i].position.X)
					{
						velocity.X -= num8;
					}
					else
					{
						velocity.X += num8;
					}
					if (position.Y < Main.projectile[i].position.Y)
					{
						velocity.Y -= num8;
					}
					else
					{
						velocity.Y += num8;
					}
				}
			}
			rotation = velocity.X * 0.1f;
			direction = ((velocity.X > 0f) ? 1 : (-1));
			spriteDirection = ((velocity.X > 0f) ? 1 : (-1));
			return;
		}
		tileCollide = false;
		List<int> ai158_blacklistedTargets = _ai158_blacklistedTargets;
		ai158_blacklistedTargets.Clear();
		AI_GetMyGroupIndexAndFillBlackList(ai158_blacklistedTargets, out var index, out totalIndexesInGroup);
		localAI[0] = index;
		Vector2 vector3 = AI_158_GetHomeLocation(player, index);
		float num10 = Distance(vector3);
		bool flag = player.gravDir > 0f && player.fullRotation == 0f && player.headRotation == 0f;
		if (num10 > 2000f)
		{
			base.Center = vector3;
			frame = Main.projFrames[type] - 1;
			frameCounter = 0;
			velocity = Vector2.Zero;
			direction = (spriteDirection = player.direction);
			rotation = 0f;
		}
		else if (num10 > 40f)
		{
			float num11 = num + num10 * 0.006f;
			Vector2 vector4 = DirectionTo(vector3);
			vector4 *= MathHelper.Lerp(1f, 5f, Utils.GetLerpValue(40f, 800f, num10, clamped: true));
			velocity = Vector2.Lerp(velocity, vector4 * num11, 0.025f);
			if (((Vector2)(ref velocity)).Length() > num11)
			{
				velocity *= num11 / ((Vector2)(ref velocity)).Length();
			}
			float num2 = 0.05f;
			float num3 = width;
			for (int j = 0; j < 1000; j++)
			{
				if (j != whoAmI && Main.projectile[j].active && Main.projectile[j].owner == owner && Main.projectile[j].type == type && Math.Abs(position.X - Main.projectile[j].position.X) + Math.Abs(position.Y - Main.projectile[j].position.Y) < num3)
				{
					if (position.X < Main.projectile[j].position.X)
					{
						velocity.X -= num2;
					}
					else
					{
						velocity.X += num2;
					}
					if (position.Y < Main.projectile[j].position.Y)
					{
						velocity.Y -= num2;
					}
					else
					{
						velocity.Y += num2;
					}
				}
			}
			rotation = velocity.X * 0.04f;
			direction = ((velocity.X > 0f) ? 1 : (-1));
			spriteDirection = ((velocity.X > 0f) ? 1 : (-1));
		}
		else if (num10 > 8f + ((Vector2)(ref player.velocity)).Length())
		{
			Vector2 vector5 = DirectionTo(vector3);
			velocity += new Vector2((float)Math.Sign(vector5.X), (float)Math.Sign(vector5.Y)) * 0.05f;
			if (((Vector2)(ref velocity)).Length() > num)
			{
				velocity *= num / ((Vector2)(ref velocity)).Length();
			}
			rotation = velocity.X * 0.1f;
			direction = ((velocity.X > 0f) ? 1 : (-1));
			spriteDirection = ((velocity.X > 0f) ? 1 : (-1));
		}
		else if (flag)
		{
			base.Center = vector3;
			frame = Main.projFrames[type] - 1;
			frameCounter = 0;
			velocity = Vector2.Zero;
			direction = (spriteDirection = player.direction);
			rotation = 0f;
		}
	}

	public static Vector2 AI_158_GetHomeLocation(Player master, int stackedIndex)
	{
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0131: Unknown result type (might be due to invalid IL or missing references)
		//IL_014a: Unknown result type (might be due to invalid IL or missing references)
		//IL_014f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0154: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_0129: Unknown result type (might be due to invalid IL or missing references)
		//IL_012e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0155: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_0170: Unknown result type (might be due to invalid IL or missing references)
		//IL_0175: Unknown result type (might be due to invalid IL or missing references)
		//IL_017a: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0184: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b1: Unknown result type (might be due to invalid IL or missing references)
		int num = master.bodyFrame.Height;
		if (num == 0)
		{
			num = 1;
		}
		Vector2 vector = Main.OffsetsPlayerHeadgear[master.bodyFrame.Y / num];
		vector.Y -= 2f;
		if (master.mount.Active && master.mount.Type == 52)
		{
			vector.Y += 6f;
			vector.X -= master.direction * 10;
		}
		switch (stackedIndex % 6)
		{
		case 1:
			vector += new Vector2((float)(master.direction * 8), master.gravDir * -2f);
			break;
		case 2:
			vector += new Vector2((float)(master.direction * -10), master.gravDir * -2f);
			break;
		case 4:
			vector += new Vector2((float)(master.direction * 10), master.gravDir * -10f);
			break;
		case 5:
			vector += new Vector2((float)(master.direction * -12), master.gravDir * -10f);
			break;
		case 3:
		{
			Vector2 val = vector;
			_ = master.direction;
			vector = val + new Vector2(0f, master.gravDir * -10f);
			break;
		}
		}
		vector += new Vector2(0f, master.gravDir * -16f) * (float)(stackedIndex / 6);
		Vector2 val2 = master.RotatedRelativePoint(master.MountedCenter);
		_ = master.direction;
		return (val2 + new Vector2(0f, master.gravDir * -21f) + vector).Floor();
	}

	public void Minion_FindTargetInRange(int startAttackRange, ref int attackTarget, bool skipIfCannotHitWithOwnBody, Func<Entity, int, bool> customEliminationCheck = null)
	{
		float num = startAttackRange;
		float num2 = num;
		float num3 = num;
		NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
		if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this) && IsInRangeOfMeOrMyOwner(ownerMinionAttackTargetNPC, num, out var _, out var _, out var _))
		{
			attackTarget = ownerMinionAttackTargetNPC.whoAmI;
		}
		else
		{
			if (attackTarget >= 0)
			{
				return;
			}
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.CanBeChasedBy(this) && IsInRangeOfMeOrMyOwner(nPC, num, out var myDistance2, out var playerDistance2, out var closerIsMe2) && (!skipIfCannotHitWithOwnBody || CanHitWithOwnBody(nPC)) && (customEliminationCheck == null || customEliminationCheck(nPC, attackTarget)))
				{
					attackTarget = i;
					num = (closerIsMe2 ? myDistance2 : playerDistance2);
					if (num2 > myDistance2)
					{
						num2 = myDistance2;
					}
					if (num3 > playerDistance2)
					{
						num3 = playerDistance2;
					}
					num = Math.Max(num2, num3);
				}
			}
		}
	}

	private bool AI_067_CustomEliminationCheck_Pirates(Entity otherEntity, int currentTarget)
	{
		return true;
	}

	private bool AI_067_TigerSpecialAttack()
	{
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_0157: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0180: Unknown result type (might be due to invalid IL or missing references)
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0194: Unknown result type (might be due to invalid IL or missing references)
		//IL_0199: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_0236: Unknown result type (might be due to invalid IL or missing references)
		//IL_023b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0200: Unknown result type (might be due to invalid IL or missing references)
		//IL_0206: Unknown result type (might be due to invalid IL or missing references)
		//IL_0210: Unknown result type (might be due to invalid IL or missing references)
		//IL_0215: Unknown result type (might be due to invalid IL or missing references)
		//IL_022f: Unknown result type (might be due to invalid IL or missing references)
		//IL_026b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0270: Unknown result type (might be due to invalid IL or missing references)
		//IL_027b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0282: Unknown result type (might be due to invalid IL or missing references)
		//IL_0333: Unknown result type (might be due to invalid IL or missing references)
		//IL_0299: Unknown result type (might be due to invalid IL or missing references)
		//IL_029b: Unknown result type (might be due to invalid IL or missing references)
		//IL_029d: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02da: Unknown result type (might be due to invalid IL or missing references)
		//IL_02dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0312: Unknown result type (might be due to invalid IL or missing references)
		//IL_0314: Unknown result type (might be due to invalid IL or missing references)
		List<NPC> list = new List<NPC>();
		Vector2 center = Main.player[owner].Center;
		Rectangle value = Utils.CenteredRectangle(center, new Vector2(1600f, 800f));
		int num = Main.player[owner].ownedProjectileCounts[831] + 1;
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = Main.npc[i];
			if (nPC.CanBeChasedBy(this))
			{
				Rectangle hitbox = nPC.Hitbox;
				if (((Rectangle)(ref hitbox)).Intersects(value))
				{
					list.Add(nPC);
				}
			}
		}
		if (list.Count == 0)
		{
			return false;
		}
		NPC nPC2 = list[0];
		for (int j = 1; j < list.Count; j++)
		{
			if (Vector2.Distance(nPC2.Center, center) > Vector2.Distance(list[j].Center, center))
			{
				nPC2 = list[j];
			}
		}
		list.Remove(nPC2);
		NPC nPC3 = null;
		if (list.Count > 0)
		{
			nPC3 = list[0];
			for (int k = 1; k < list.Count; k++)
			{
				if (Distance(nPC3.Center) > Distance(list[k].Center))
				{
					nPC3 = list[k];
				}
			}
			list.Remove(nPC3);
		}
		List<Vector2> list2 = new List<Vector2>();
		if (nPC3 != null)
		{
			list2.Add(nPC3.Center);
		}
		int num2 = 0;
		while (list.Count > 0 && list2.Count < num - 1)
		{
			int index = Main.rand.Next(list.Count);
			Vector2 vector = list[index].velocity * 4f * (float)(num2 + 1);
			list2.Add(list[index].Center + vector);
			list.RemoveAt(index);
			num2++;
		}
		if (nPC2 != null)
		{
			list2.Add(nPC2.Center);
		}
		if (list2.Count > 0 && Collision.SolidCollision(list2[list2.Count - 1] - base.Size / 2f, width, height))
		{
			list2.Add(center);
		}
		Vector2 vector2 = base.Center;
		float num3 = Math.Min(20, 30 / list2.Count);
		float num4 = 0f;
		for (int l = 0; l < list2.Count; l++)
		{
			float num5 = 20f;
			Vector2 vector3 = list2[l];
			vector3.X += ((vector2.X < vector3.X) ? num5 : (0f - num5));
			Vector2 vector4 = vector3 - vector2;
			int num6 = (int)Math.Min(num3, 4.0 + Math.Ceiling(((Vector2)(ref vector4)).Length() / 50f));
			if (num6 < 5)
			{
				num6 = 5;
			}
			NewProjectile(GetProjectileSource_FromThis(), vector2, vector4, 818, damage, 0f, owner, (0f - num4) * 4f, num6 * 4);
			vector2 = vector3;
			num4 += (float)num6;
		}
		base.Center = vector2;
		ai[0] = 4f;
		ai[1] = num4;
		netUpdate = true;
		return true;
	}

	private void AI_067_FreakingPirates()
	{
		//IL_222d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2235: Unknown result type (might be due to invalid IL or missing references)
		//IL_224a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2252: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_23fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_2403: Unknown result type (might be due to invalid IL or missing references)
		//IL_241a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2420: Unknown result type (might be due to invalid IL or missing references)
		//IL_2471: Unknown result type (might be due to invalid IL or missing references)
		//IL_247f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2484: Unknown result type (might be due to invalid IL or missing references)
		//IL_253d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2548: Unknown result type (might be due to invalid IL or missing references)
		//IL_0157: Unknown result type (might be due to invalid IL or missing references)
		//IL_015c: Unknown result type (might be due to invalid IL or missing references)
		//IL_043e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0443: Unknown result type (might be due to invalid IL or missing references)
		//IL_0200: Unknown result type (might be due to invalid IL or missing references)
		//IL_0205: Unknown result type (might be due to invalid IL or missing references)
		//IL_020f: Unknown result type (might be due to invalid IL or missing references)
		//IL_017f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03de: Unknown result type (might be due to invalid IL or missing references)
		//IL_0227: Unknown result type (might be due to invalid IL or missing references)
		//IL_022c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0236: Unknown result type (might be due to invalid IL or missing references)
		//IL_024e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0253: Unknown result type (might be due to invalid IL or missing references)
		//IL_0258: Unknown result type (might be due to invalid IL or missing references)
		//IL_0262: Unknown result type (might be due to invalid IL or missing references)
		//IL_0267: Unknown result type (might be due to invalid IL or missing references)
		//IL_026b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0275: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0678: Unknown result type (might be due to invalid IL or missing references)
		//IL_067d: Unknown result type (might be due to invalid IL or missing references)
		//IL_068b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0691: Unknown result type (might be due to invalid IL or missing references)
		//IL_0693: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_06bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_071a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0725: Unknown result type (might be due to invalid IL or missing references)
		//IL_072f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0734: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0831: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ba7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bac: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2be1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2beb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c12: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c29: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c33: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c38: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c63: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c70: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c84: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0beb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_092c: Unknown result type (might be due to invalid IL or missing references)
		//IL_093b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0949: Unknown result type (might be due to invalid IL or missing references)
		//IL_094e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0952: Unknown result type (might be due to invalid IL or missing references)
		//IL_0957: Unknown result type (might be due to invalid IL or missing references)
		//IL_095a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0969: Unknown result type (might be due to invalid IL or missing references)
		//IL_0977: Unknown result type (might be due to invalid IL or missing references)
		//IL_097c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0980: Unknown result type (might be due to invalid IL or missing references)
		//IL_0985: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e56: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e61: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e66: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c21: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c26: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c30: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e79: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e96: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ea0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c40: Unknown result type (might be due to invalid IL or missing references)
		//IL_14e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_14e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f48: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f51: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ca2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ca8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a25: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1506: Unknown result type (might be due to invalid IL or missing references)
		//IL_1511: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fac: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ee9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d09: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_17af: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1737: Unknown result type (might be due to invalid IL or missing references)
		//IL_173f: Unknown result type (might be due to invalid IL or missing references)
		//IL_155b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1563: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ffa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d52: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d55: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a72: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1905: Unknown result type (might be due to invalid IL or missing references)
		//IL_1908: Unknown result type (might be due to invalid IL or missing references)
		//IL_190d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1912: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_17cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_17de: Unknown result type (might be due to invalid IL or missing references)
		//IL_17e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_17ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_17f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_157a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1582: Unknown result type (might be due to invalid IL or missing references)
		//IL_1048: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d83: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d88: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d91: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d73: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_18cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_18eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1807: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_15dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1919: Unknown result type (might be due to invalid IL or missing references)
		//IL_191b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1920: Unknown result type (might be due to invalid IL or missing references)
		//IL_1927: Unknown result type (might be due to invalid IL or missing references)
		//IL_195f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1965: Unknown result type (might be due to invalid IL or missing references)
		//IL_196f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1974: Unknown result type (might be due to invalid IL or missing references)
		//IL_1979: Unknown result type (might be due to invalid IL or missing references)
		//IL_197c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1981: Unknown result type (might be due to invalid IL or missing references)
		//IL_1995: Unknown result type (might be due to invalid IL or missing references)
		//IL_199a: Unknown result type (might be due to invalid IL or missing references)
		//IL_199d: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_19b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_19b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_19b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_19be: Unknown result type (might be due to invalid IL or missing references)
		//IL_19c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_18fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1903: Unknown result type (might be due to invalid IL or missing references)
		//IL_183d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1666: Unknown result type (might be due to invalid IL or missing references)
		//IL_166b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1670: Unknown result type (might be due to invalid IL or missing references)
		//IL_1675: Unknown result type (might be due to invalid IL or missing references)
		//IL_19fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a01: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a03: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a08: Unknown result type (might be due to invalid IL or missing references)
		//IL_19d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_19d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_19df: Unknown result type (might be due to invalid IL or missing references)
		//IL_19e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_186d: Unknown result type (might be due to invalid IL or missing references)
		//IL_163b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1643: Unknown result type (might be due to invalid IL or missing references)
		//IL_15fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1611: Unknown result type (might be due to invalid IL or missing references)
		//IL_1616: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a29: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a34: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a39: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a43: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a48: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a51: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a15: Unknown result type (might be due to invalid IL or missing references)
		//IL_19f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_19f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1685: Unknown result type (might be due to invalid IL or missing references)
		//IL_1240: Unknown result type (might be due to invalid IL or missing references)
		//IL_124d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1252: Unknown result type (might be due to invalid IL or missing references)
		//IL_1273: Unknown result type (might be due to invalid IL or missing references)
		//IL_1279: Unknown result type (might be due to invalid IL or missing references)
		//IL_1288: Unknown result type (might be due to invalid IL or missing references)
		//IL_128d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1297: Unknown result type (might be due to invalid IL or missing references)
		//IL_129c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c04: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c19: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c21: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c26: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a63: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a67: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a71: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a73: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a75: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a83: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a88: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1acb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fca: Unknown result type (might be due to invalid IL or missing references)
		//IL_1de9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e14: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[owner];
		if (!player.active)
		{
			active = false;
			return;
		}
		bool flag = type == 393 || type == 394 || type == 395;
		bool flag8 = type == 758;
		bool flag9 = type == 833 || type == 834 || type == 835;
		bool flag10 = type == 834 || type == 835;
		bool flag11 = type == 951;
		int num = 450;
		float num12 = 500f;
		float num21 = 300f;
		int num32 = 15;
		if (flag11)
		{
			if (player.dead)
			{
				player.flinxMinion = false;
			}
			if (player.flinxMinion)
			{
				timeLeft = 2;
			}
			num = 800;
		}
		if (flag)
		{
			if (player.dead)
			{
				player.pirateMinion = false;
			}
			if (player.pirateMinion)
			{
				timeLeft = 2;
			}
			num = 800;
		}
		Color newColor;
		if (flag9)
		{
			if (player.dead)
			{
				player.stormTiger = false;
			}
			if (player.stormTiger)
			{
				timeLeft = 2;
			}
			num = 800;
			if (ai[0] != 4f)
			{
				if (velocity != Vector2.Zero && Main.rand.Next(18) == 0)
				{
					Dust[] dust = Main.dust;
					Vector2 val = position;
					int num53 = width;
					int num54 = height;
					newColor = default(Color);
					Dust obj = dust[Dust.NewDust(val, num53, num54, 269, 0f, 0f, 0, newColor)];
					obj.fadeIn = 0.5f;
					obj.scale = 0.3f;
					obj.noLight = true;
					obj.velocity += velocity * 0.005f;
				}
				if (type == 833)
				{
					Lighting.AddLight(base.Center, Vector3.One * 0.5f);
				}
				if (type == 834)
				{
					Lighting.AddLight(base.Center, Vector3.One * 0.8f);
				}
				if (type == 835)
				{
					Vector2 center2 = base.Center;
					newColor = Color.Lerp(Main.OurFavoriteColor, Color.White, 0.8f);
					Lighting.AddLight(center2, ((Color)(ref newColor)).ToVector3() * 1f);
				}
			}
			if (owner == Main.myPlayer)
			{
				if (localAI[0] <= 0f)
				{
					int num43 = type switch
					{
						834 => 300, 
						835 => 240, 
						_ => 360, 
					};
					if (damage != 0)
					{
						bool flag12 = AI_067_TigerSpecialAttack();
						localAI[0] = (flag12 ? num43 : 10);
					}
				}
				else
				{
					localAI[0] -= 1f;
				}
			}
		}
		if (flag8)
		{
			if (player.dead)
			{
				player.vampireFrog = false;
			}
			if (player.vampireFrog)
			{
				timeLeft = 2;
			}
			num = 800;
		}
		if (type == 500)
		{
			num12 = 200f;
			if (player.dead)
			{
				player.crimsonHeart = false;
			}
			if (player.crimsonHeart)
			{
				timeLeft = 2;
			}
		}
		if (type == 653)
		{
			num12 = 300f;
			if (player.dead)
			{
				player.companionCube = false;
			}
			if (player.companionCube)
			{
				timeLeft = 2;
			}
		}
		if (type == 1018)
		{
			num12 = 200f;
			if (player.dead)
			{
				player.petFlagDirtiestBlock = false;
			}
			if (player.petFlagDirtiestBlock)
			{
				timeLeft = 2;
			}
		}
		if (flag9 && ai[0] == 4f)
		{
			velocity = Vector2.Zero;
			frame = 9;
			if (flag10)
			{
				frame = 11;
			}
			ai[1] -= 1f;
			if (!(ai[1] <= 0f))
			{
				return;
			}
			ai[0] = 0f;
			ai[1] = 0f;
			netUpdate = true;
		}
		Vector2 vector = player.Center;
		if (flag11)
		{
			vector.X -= (45 + player.width / 2) * player.direction;
			vector.X -= minionPos * 30 * player.direction;
		}
		else if (flag)
		{
			vector.X -= (15 + player.width / 2) * player.direction;
			vector.X -= minionPos * 20 * player.direction;
		}
		else if (flag9)
		{
			vector.X -= (15 + player.width / 2) * player.direction;
			vector.X -= minionPos * 40 * player.direction;
		}
		else if (flag8)
		{
			vector.X -= (35 + player.width / 2) * player.direction;
			vector.X -= minionPos * 40 * player.direction;
		}
		else if (type == 500)
		{
			vector.X -= (15 + player.width / 2) * player.direction;
			vector.X -= 40 * player.direction;
		}
		else if (type == 1018)
		{
			vector.X = player.Center.X;
		}
		else if (type == 653)
		{
			vector.X = player.Center.X;
		}
		if (type == 500)
		{
			Lighting.AddLight(base.Center, 0.9f, 0.1f, 0.3f);
			int num49 = 6;
			if (frame == 0 || frame == 2)
			{
				num49 = 12;
			}
			if (++frameCounter >= num49)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			rotation += velocity.X / 20f;
			Vector2 vector6 = (-Vector2.UnitY).RotatedBy(rotation).RotatedBy((float)direction * 0.2f);
			int num50 = Dust.NewDust(base.Center + vector6 * 10f - new Vector2(4f), 0, 0, 5, vector6.X, vector6.Y, 0, Color.Transparent);
			Main.dust[num50].scale = 1f;
			Main.dust[num50].velocity = vector6.RotatedByRandom(0.7853981852531433) * 3.5f;
			Main.dust[num50].noGravity = true;
			Main.dust[num50].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cLight, Main.player[owner]);
		}
		if (type == 1018)
		{
			rotation += velocity.X / 20f;
		}
		if (type == 653)
		{
			rotation += velocity.X / 20f;
			bool flag13 = owner >= 0 && owner < 255;
			if (flag13)
			{
				_CompanionCubeScreamCooldown[owner] -= 1f;
				if (_CompanionCubeScreamCooldown[owner] < 0f)
				{
					_CompanionCubeScreamCooldown[owner] = 0f;
				}
			}
			Tile tileSafely = Framing.GetTileSafely(base.Center);
			if (tileSafely.liquid > 0 && tileSafely.lava())
			{
				localAI[0] += 1f;
			}
			else
			{
				localAI[0] -= 1f;
			}
			localAI[0] = MathHelper.Clamp(localAI[0], 0f, 20f);
			if (localAI[0] >= 20f)
			{
				if (flag13 && _CompanionCubeScreamCooldown[owner] == 0f)
				{
					_CompanionCubeScreamCooldown[owner] = 3600f;
					SoundStyle style = ((Main.rand.Next(10) == 0) ? SoundID.NPCDeath61 : SoundID.NPCDeath59);
					SoundEngine.PlaySound(in style, position);
				}
				Kill();
			}
			if (flag13 && owner == Main.myPlayer && Main.netMode != 2)
			{
				newColor = Lighting.GetColor((int)base.Center.X / 16, (int)base.Center.Y / 16);
				Vector3 vector7 = ((Color)(ref newColor)).ToVector3();
				newColor = Lighting.GetColor((int)player.Center.X / 16, (int)player.Center.Y / 16);
				Vector3 vector8 = ((Color)(ref newColor)).ToVector3();
				if (((Vector3)(ref vector7)).Length() < 0.15f && ((Vector3)(ref vector8)).Length() < 0.15f)
				{
					localAI[1] += 1f;
				}
				else if (localAI[1] > 0f)
				{
					localAI[1] -= 1f;
				}
				localAI[1] = MathHelper.Clamp(localAI[1], -3600f, 120f);
				if (localAI[1] > (float)Main.rand.Next(30, 120) && !player.immune && player.velocity == Vector2.Zero)
				{
					if (Main.rand.Next(5) == 0)
					{
						SoundEngine.PlaySound(in SoundID.Item16, base.Center);
						localAI[1] = -600f;
					}
					else
					{
						SoundEngine.PlaySound(in SoundID.Item1, base.Center);
						player.Hurt(PlayerDeathReason.ByOther(6), 3, 0);
						player.immune = false;
						player.immuneTime = 0;
						localAI[1] = -300 + Main.rand.Next(30) * -10;
					}
				}
			}
		}
		bool flag14 = true;
		if (type == 500 || type == 653 || type == 1018)
		{
			flag14 = false;
		}
		shouldFallThrough = player.position.Y + (float)player.height - 12f > position.Y + (float)height;
		friendly = false;
		int num51 = 0;
		int num52 = 15;
		int attackTarget = -1;
		bool flag15 = true;
		bool flag2 = ai[0] == 5f;
		if (flag11)
		{
			flag15 = false;
			friendly = true;
		}
		if (flag8)
		{
			friendly = true;
			num52 = 20;
			num51 = 60;
		}
		if (flag9)
		{
			flag15 = false;
			friendly = true;
			originalDamage = player.highestStormTigerGemOriginalDamage;
		}
		bool flag3 = ai[0] == 0f;
		if (flag9 && flag2)
		{
			flag3 = true;
		}
		if (flag3 && flag14)
		{
			Minion_FindTargetInRange(num, ref attackTarget, skipIfCannotHitWithOwnBody: true, AI_067_CustomEliminationCheck_Pirates);
		}
		float playerDistance;
		float myDistance;
		bool closerIsMe;
		Rectangle hitbox;
		if (flag9 && flag2)
		{
			if (attackTarget >= 0)
			{
				float maxDistance = num;
				NPC nPC = Main.npc[attackTarget];
				vector = nPC.Center;
				if (!IsInRangeOfMeOrMyOwner(nPC, maxDistance, out playerDistance, out myDistance, out closerIsMe))
				{
					ai[0] = 0f;
					ai[1] = 0f;
					return;
				}
				Point point = nPC.Top.ToTileCoordinates();
				int num2 = 0;
				int num3 = point.Y;
				while (num2 < num32)
				{
					Tile tile = Main.tile[point.X, num3];
					if (tile == null || tile.active())
					{
						break;
					}
					num2++;
					num3++;
				}
				int num4 = num32 / 2;
				if (num2 < num4)
				{
					ai[0] = 0f;
					ai[1] = 0f;
					return;
				}
				hitbox = base.Hitbox;
				if (((Rectangle)(ref hitbox)).Intersects(nPC.Hitbox) && velocity.Y >= 0f)
				{
					velocity.Y = -8f;
					velocity.X = direction * 10;
				}
				float num5 = 20f;
				float maxAmountAllowedToMove = 4f;
				float num6 = 40f;
				float num7 = 40f;
				Vector2 top = nPC.Top;
				float num8 = (float)Math.Cos(Main.timeForVisualEffects / (double)num6 * 6.2831854820251465);
				if (num8 > 0f)
				{
					num8 *= -1f;
				}
				num8 *= num7;
				top.Y += num8;
				Vector2 vector9 = top - base.Center;
				if (((Vector2)(ref vector9)).Length() > num5)
				{
					vector9 = vector9.SafeNormalize(Vector2.Zero) * num5;
				}
				velocity = velocity.MoveTowards(vector9, maxAmountAllowedToMove);
				frame = 8;
				if (flag10)
				{
					frame = 10;
				}
				rotation += 0.6f * (float)spriteDirection;
			}
			else
			{
				ai[0] = 0f;
				ai[1] = 0f;
			}
			return;
		}
		if (ai[0] == 1f)
		{
			tileCollide = false;
			float num9 = 0.2f;
			float num10 = 10f;
			int num11 = 200;
			if (num10 < Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y))
			{
				num10 = Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y);
			}
			Vector2 vector10 = player.Center - base.Center;
			float num55 = ((Vector2)(ref vector10)).Length();
			if (num55 > 2000f)
			{
				position = player.Center - new Vector2((float)width, (float)height) / 2f;
			}
			if (num55 < (float)num11 && player.velocity.Y == 0f && position.Y + (float)height <= player.position.Y + (float)player.height && !Collision.SolidCollision(position, width, height))
			{
				ai[0] = 0f;
				netUpdate = true;
				if (velocity.Y < -6f)
				{
					velocity.Y = -6f;
				}
			}
			if (!(num55 < 60f))
			{
				((Vector2)(ref vector10)).Normalize();
				vector10 *= num10;
				if (velocity.X < vector10.X)
				{
					velocity.X += num9;
					if (velocity.X < 0f)
					{
						velocity.X += num9 * 1.5f;
					}
				}
				if (velocity.X > vector10.X)
				{
					velocity.X -= num9;
					if (velocity.X > 0f)
					{
						velocity.X -= num9 * 1.5f;
					}
				}
				if (velocity.Y < vector10.Y)
				{
					velocity.Y += num9;
					if (velocity.Y < 0f)
					{
						velocity.Y += num9 * 1.5f;
					}
				}
				if (velocity.Y > vector10.Y)
				{
					velocity.Y -= num9;
					if (velocity.Y > 0f)
					{
						velocity.Y -= num9 * 1.5f;
					}
				}
			}
			if (velocity.X != 0f)
			{
				spriteDirection = Math.Sign(velocity.X);
			}
			if (flag11)
			{
				frameCounter++;
				if (frameCounter > 3)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 2 || frame >= Main.projFrames[type])
				{
					frame = 2;
				}
				rotation = rotation.AngleTowards(rotation + 0.25f * (float)spriteDirection, 0.25f);
			}
			if (flag)
			{
				frameCounter++;
				if (frameCounter > 3)
				{
					frame++;
					frameCounter = 0;
				}
				if ((frame < 10) | (frame > 13))
				{
					frame = 10;
				}
				rotation = velocity.X * 0.1f;
			}
			if (flag8)
			{
				int num13 = 3;
				if (++frameCounter >= num13 * 4)
				{
					frameCounter = 0;
				}
				frame = 14 + frameCounter / num13;
				rotation = velocity.X * 0.15f;
			}
			if (flag9)
			{
				frame = 8;
				if (flag10)
				{
					frame = 10;
				}
				rotation += 0.6f * (float)spriteDirection;
			}
			if (type == 1018 && Main.LocalPlayer.miscCounter % 3 == 0)
			{
				int num14 = 2;
				Dust[] dust2 = Main.dust;
				Vector2 val2 = position + new Vector2((float)(-num14), (float)(-num14));
				int num56 = 16 + num14 * 2;
				int num57 = 16 + num14 * 2;
				newColor = default(Color);
				Dust obj2 = dust2[Dust.NewDust(val2, num56, num57, 0, 0f, 0f, 0, newColor, 0.8f)];
				obj2.velocity = -velocity * 0.25f;
				obj2.velocity = obj2.velocity.RotatedByRandom(0.2617993950843811);
			}
		}
		if (ai[0] == 2f && ai[1] < 0f)
		{
			friendly = false;
			ai[1] += 1f;
			if (num52 >= 0)
			{
				ai[1] = 0f;
				ai[0] = 0f;
				netUpdate = true;
				return;
			}
		}
		else if (ai[0] == 2f)
		{
			spriteDirection = direction;
			rotation = 0f;
			if (flag)
			{
				friendly = true;
				frame = 4 + (int)((float)num52 - ai[1]) / (num52 / 3);
				if (velocity.Y != 0f)
				{
					frame += 3;
				}
			}
			if (flag8)
			{
				float num15 = ((float)num52 - ai[1]) / (float)num52;
				if ((double)num15 > 0.25 && (double)num15 < 0.75)
				{
					friendly = true;
				}
				int num16 = (int)(num15 * 5f);
				if (num16 > 2)
				{
					num16 = 4 - num16;
				}
				if (velocity.Y != 0f)
				{
					frame = 21 + num16;
				}
				else
				{
					frame = 18 + num16;
				}
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.8f;
				}
			}
			velocity.Y += 0.4f;
			if (velocity.Y > 10f)
			{
				velocity.Y = 10f;
			}
			ai[1] -= 1f;
			if (ai[1] <= 0f)
			{
				if (num51 <= 0)
				{
					ai[1] = 0f;
					ai[0] = 0f;
					netUpdate = true;
					return;
				}
				ai[1] = -num51;
			}
		}
		if (attackTarget >= 0)
		{
			float maxDistance2 = num;
			float num17 = 20f;
			if (flag8)
			{
				num17 = 50f;
			}
			NPC nPC2 = Main.npc[attackTarget];
			Vector2 center = nPC2.Center;
			vector = center;
			if (IsInRangeOfMeOrMyOwner(nPC2, maxDistance2, out myDistance, out playerDistance, out closerIsMe))
			{
				shouldFallThrough = nPC2.Center.Y > base.Bottom.Y;
				bool flag4 = velocity.Y == 0f;
				if (wet && velocity.Y > 0f && !shouldFallThrough)
				{
					flag4 = true;
				}
				if (center.Y < base.Center.Y - 30f && flag4)
				{
					float num58 = (center.Y - base.Center.Y) * -1f;
					float num18 = 0.4f;
					float num19 = (float)Math.Sqrt(num58 * 2f * num18);
					if (num19 > 26f)
					{
						num19 = 26f;
					}
					velocity.Y = 0f - num19;
				}
				if (flag15 && Vector2.Distance(base.Center, vector) < num17)
				{
					if (((Vector2)(ref velocity)).Length() > 10f)
					{
						velocity /= ((Vector2)(ref velocity)).Length() / 10f;
					}
					ai[0] = 2f;
					ai[1] = num52;
					netUpdate = true;
					direction = ((center.X - base.Center.X > 0f) ? 1 : (-1));
				}
				if (flag9)
				{
					Point point2 = nPC2.Top.ToTileCoordinates();
					int num20 = 0;
					int num22 = point2.Y;
					while (num20 < num32)
					{
						Tile tile2 = Main.tile[point2.X, num22];
						if (tile2 == null || tile2.active())
						{
							break;
						}
						num20++;
						num22++;
					}
					if (num20 >= num32)
					{
						ai[0] = 5f;
						ai[1] = 0f;
						netUpdate = true;
						return;
					}
					hitbox = base.Hitbox;
					if (((Rectangle)(ref hitbox)).Intersects(nPC2.Hitbox) && velocity.Y >= 0f)
					{
						velocity.Y = -4f;
						velocity.X = direction * 10;
					}
				}
			}
			if (flag8)
			{
				int num23 = 1;
				if (center.X - base.Center.X < 0f)
				{
					num23 = -1;
				}
				vector.X += 20 * -num23;
			}
		}
		if (ai[0] == 0f && attackTarget < 0)
		{
			if (Main.player[owner].rocketDelay2 > 0)
			{
				ai[0] = 1f;
				netUpdate = true;
			}
			Vector2 vector11 = player.Center - base.Center;
			if (((Vector2)(ref vector11)).Length() > 2000f)
			{
				position = player.Center - new Vector2((float)width, (float)height) / 2f;
			}
			else if (((Vector2)(ref vector11)).Length() > num12 || Math.Abs(vector11.Y) > num21)
			{
				ai[0] = 1f;
				netUpdate = true;
				if (velocity.Y > 0f && vector11.Y < 0f)
				{
					velocity.Y = 0f;
				}
				if (velocity.Y < 0f && vector11.Y > 0f)
				{
					velocity.Y = 0f;
				}
			}
		}
		if (ai[0] == 0f)
		{
			if (attackTarget < 0)
			{
				if (Distance(player.Center) > 60f && Distance(vector) > 60f && Math.Sign(vector.X - player.Center.X) != Math.Sign(base.Center.X - player.Center.X))
				{
					vector = player.Center;
				}
				Rectangle r = Utils.CenteredRectangle(vector, base.Size);
				for (int i = 0; i < 20; i++)
				{
					if (Collision.SolidCollision(r.TopLeft(), r.Width, r.Height))
					{
						break;
					}
					r.Y += 16;
					vector.Y += 16f;
				}
				Vector2 vector12 = Collision.TileCollision(player.Center - base.Size / 2f, vector - player.Center, width, height);
				vector = player.Center - base.Size / 2f + vector12;
				if (Distance(vector) < 32f)
				{
					float num24 = player.Center.Distance(vector);
					if (player.Center.Distance(base.Center) < num24)
					{
						vector = base.Center;
					}
				}
				Vector2 vector13 = player.Center - vector;
				if (((Vector2)(ref vector13)).Length() > num12 || Math.Abs(vector13.Y) > num21)
				{
					Rectangle r2 = Utils.CenteredRectangle(player.Center, base.Size);
					Vector2 vector2 = vector - player.Center;
					Vector2 vector3 = r2.TopLeft();
					for (float num25 = 0f; num25 < 1f; num25 += 0.05f)
					{
						Vector2 vector4 = r2.TopLeft() + vector2 * num25;
						if (Collision.SolidCollision(r2.TopLeft() + vector2 * num25, r.Width, r.Height))
						{
							break;
						}
						vector3 = vector4;
					}
					vector = vector3 + base.Size / 2f;
				}
			}
			tileCollide = true;
			float num26 = 0.5f;
			float num27 = 4f;
			float num28 = 4f;
			float num29 = 0.1f;
			if (flag11 && attackTarget != -1)
			{
				num26 = 0.65f;
				num27 = 5.5f;
				num28 = 5.5f;
			}
			if (flag && attackTarget != -1)
			{
				num26 = 1f;
				num27 = 8f;
				num28 = 8f;
			}
			if (flag8 && attackTarget != -1)
			{
				num26 = 0.7f;
				num27 = 6f;
				num28 = 6f;
			}
			if (flag9 && attackTarget != -1)
			{
				num26 = 1f;
				num27 = 8f;
				num28 = 8f;
			}
			if (num28 < Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y))
			{
				num28 = Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y);
				num26 = 0.7f;
			}
			if (type == 653 || type == 1018)
			{
				float num30 = ((Vector2)(ref player.velocity)).Length();
				if (num30 < 0.1f)
				{
					num30 = 0f;
				}
				if (num30 != 0f && num30 < num28)
				{
					num28 = num30;
				}
			}
			int num31 = 0;
			bool flag5 = false;
			float num33 = vector.X - base.Center.X;
			Vector2 vector5 = vector - base.Center;
			if (type == 1018 && Math.Abs(num33) < 50f)
			{
				rotation = rotation.AngleTowards(0f, 0.2f);
				velocity.X *= 0.9f;
				if ((double)Math.Abs(velocity.X) < 0.1)
				{
					velocity.X = 0f;
				}
			}
			else if (type == 653 && Math.Abs(num33) < 150f)
			{
				rotation = rotation.AngleTowards(0f, 0.2f);
				velocity.X *= 0.9f;
				if ((double)Math.Abs(velocity.X) < 0.1)
				{
					velocity.X = 0f;
				}
			}
			else if (Math.Abs(num33) > 5f)
			{
				if (num33 < 0f)
				{
					num31 = -1;
					if (velocity.X > 0f - num27)
					{
						velocity.X -= num26;
					}
					else
					{
						velocity.X -= num29;
					}
				}
				else
				{
					num31 = 1;
					if (velocity.X < num27)
					{
						velocity.X += num26;
					}
					else
					{
						velocity.X += num29;
					}
				}
				bool flag6 = true;
				if (flag)
				{
					flag6 = false;
				}
				if (type == 653)
				{
					flag6 = false;
				}
				if (type == 1018)
				{
					flag6 = false;
				}
				if (flag8 && attackTarget == -1)
				{
					flag6 = false;
				}
				if (flag9)
				{
					flag6 = vector5.Y < -80f;
				}
				if (flag11)
				{
					int num59;
					if (attackTarget > -1)
					{
						hitbox = Main.npc[attackTarget].Hitbox;
						num59 = (((Rectangle)(ref hitbox)).Intersects(base.Hitbox) ? 1 : 0);
					}
					else
					{
						num59 = 0;
					}
					flag6 = (byte)num59 != 0;
				}
				if (flag6)
				{
					flag5 = true;
				}
			}
			else
			{
				velocity.X *= 0.9f;
				if (Math.Abs(velocity.X) < num26 * 2f)
				{
					velocity.X = 0f;
				}
			}
			bool flag7 = Math.Abs(vector5.X) >= 64f || (vector5.Y <= -48f && Math.Abs(vector5.X) >= 8f);
			if (num31 != 0 && flag7)
			{
				int num34 = (int)(position.X + (float)(width / 2)) / 16;
				int num35 = (int)position.Y / 16;
				num34 += num31;
				num34 += (int)velocity.X;
				for (int j = num35; j < num35 + height / 16 + 1; j++)
				{
					if (WorldGen.SolidTile(num34, j))
					{
						flag5 = true;
					}
				}
			}
			if (type == 500 && velocity.X != 0f)
			{
				flag5 = true;
			}
			if (type == 653 && Math.Abs(velocity.X) > 3f)
			{
				flag5 = true;
			}
			if (type == 1018 && Math.Abs(velocity.X) > 3f)
			{
				flag5 = true;
			}
			Collision.StepUp(ref position, ref velocity, width, height, ref stepSpeed, ref gfxOffY);
			float num36 = Utils.GetLerpValue(0f, 100f, vector5.Y, clamped: true) * Utils.GetLerpValue(-2f, -6f, velocity.Y, clamped: true);
			if (velocity.Y == 0f)
			{
				if (flag5)
				{
					for (int k = 0; k < 3; k++)
					{
						int num37 = (int)(position.X + (float)(width / 2)) / 16;
						if (k == 0)
						{
							num37 = (int)position.X / 16;
						}
						if (k == 2)
						{
							num37 = (int)(position.X + (float)width) / 16;
						}
						int num38 = (int)(position.Y + (float)height) / 16;
						if (!WorldGen.SolidTile(num37, num38) && !Main.tile[num37, num38].halfBrick() && Main.tile[num37, num38].slope() <= 0 && (!TileID.Sets.Platforms[Main.tile[num37, num38].type] || !Main.tile[num37, num38].active() || Main.tile[num37, num38].inActive()))
						{
							continue;
						}
						try
						{
							num37 = (int)(position.X + (float)(width / 2)) / 16;
							num38 = (int)(position.Y + (float)(height / 2)) / 16;
							num37 += num31;
							num37 += (int)velocity.X;
							if (!WorldGen.SolidTile(num37, num38 - 1) && !WorldGen.SolidTile(num37, num38 - 2))
							{
								velocity.Y = -5.1f;
							}
							else if (!WorldGen.SolidTile(num37, num38 - 2))
							{
								velocity.Y = -7.1f;
							}
							else if (WorldGen.SolidTile(num37, num38 - 5))
							{
								velocity.Y = -11.1f;
							}
							else if (WorldGen.SolidTile(num37, num38 - 4))
							{
								velocity.Y = -10.1f;
							}
							else
							{
								velocity.Y = -9.1f;
							}
						}
						catch
						{
							velocity.Y = -9.1f;
						}
					}
					if (vector.Y - base.Center.Y < -48f)
					{
						float num39 = vector.Y - base.Center.Y;
						num39 *= -1f;
						if (num39 < 60f)
						{
							velocity.Y = -6f;
						}
						else if (num39 < 80f)
						{
							velocity.Y = -7f;
						}
						else if (num39 < 100f)
						{
							velocity.Y = -8f;
						}
						else if (num39 < 120f)
						{
							velocity.Y = -9f;
						}
						else if (num39 < 140f)
						{
							velocity.Y = -10f;
						}
						else if (num39 < 160f)
						{
							velocity.Y = -11f;
						}
						else if (num39 < 190f)
						{
							velocity.Y = -12f;
						}
						else if (num39 < 210f)
						{
							velocity.Y = -13f;
						}
						else if (num39 < 270f)
						{
							velocity.Y = -14f;
						}
						else if (num39 < 310f)
						{
							velocity.Y = -15f;
						}
						else
						{
							velocity.Y = -16f;
						}
					}
					if (wet && num36 == 0f)
					{
						velocity.Y *= 2f;
					}
				}
				if (type == 1018 && localAI[2] == 0f)
				{
					localAI[2] = 1f;
					for (int l = 0; l < 6; l++)
					{
						Dust[] dust3 = Main.dust;
						Vector2 val3 = position + velocity;
						newColor = default(Color);
						Dust obj4 = dust3[Dust.NewDust(val3, 16, 16, 0, 0f, 0f, 0, newColor, 0.8f)];
						obj4.velocity.X = velocity.X * 0.25f;
						obj4.velocity.Y = -2f + Math.Abs(velocity.Y) * 0.25f;
						obj4.velocity = obj4.velocity.RotatedByRandom(0.2617993950843811);
					}
				}
			}
			else if (type == 1018)
			{
				localAI[2] = 0f;
			}
			if (velocity.X > num28)
			{
				velocity.X = num28;
			}
			if (velocity.X < 0f - num28)
			{
				velocity.X = 0f - num28;
			}
			if (velocity.X < 0f)
			{
				direction = -1;
			}
			if (velocity.X > 0f)
			{
				direction = 1;
			}
			if (velocity.X == 0f)
			{
				direction = ((player.Center.X > base.Center.X) ? 1 : (-1));
			}
			if (velocity.X > num26 && num31 == 1)
			{
				direction = 1;
			}
			if (velocity.X < 0f - num26 && num31 == -1)
			{
				direction = -1;
			}
			spriteDirection = direction;
			if (flag11)
			{
				if (velocity.Y == 0f)
				{
					rotation = rotation.AngleTowards(0f, 0.3f);
					if (velocity.X == 0f)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if (Math.Abs(velocity.X) >= 0.5f)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 10)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 2 || frame >= Main.projFrames[type])
						{
							frame = 2;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y != 0f)
				{
					rotation = Math.Min(4f, velocity.Y) * -0.1f;
					if (spriteDirection == -1)
					{
						rotation -= (float)Math.PI * 2f;
					}
					frameCounter = 0;
					frame = 1;
				}
			}
			if (flag)
			{
				rotation = 0f;
				if (velocity.Y == 0f)
				{
					if (velocity.X == 0f)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if (Math.Abs(velocity.X) >= 0.5f)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 10)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 4)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y != 0f)
				{
					frameCounter = 0;
					frame = 14;
				}
			}
			if (flag8)
			{
				rotation = 0f;
				if (velocity.Y == 0f)
				{
					if (velocity.X == 0f)
					{
						int num40 = 4;
						if (++frameCounter >= 7 * num40 && Main.rand.Next(50) == 0)
						{
							frameCounter = 0;
						}
						int num41 = frameCounter / num40;
						if (num41 >= 4)
						{
							num41 = 6 - num41;
						}
						if (num41 < 0)
						{
							num41 = 0;
						}
						frame = 1 + num41;
					}
					else if (Math.Abs(velocity.X) >= 0.5f)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						int num42 = 15;
						int num44 = 8;
						if (frameCounter >= num44 * num42)
						{
							frameCounter = 0;
						}
						int num45 = frameCounter / num42;
						frame = num45 + 5;
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y != 0f)
				{
					if (velocity.Y < 0f)
					{
						if (frame > 9 || frame < 5)
						{
							frame = 5;
							frameCounter = 0;
						}
						if (++frameCounter >= 1 && frame < 9)
						{
							frame++;
							frameCounter = 0;
						}
					}
					else
					{
						if (frame > 13 || frame < 9)
						{
							frame = 9;
							frameCounter = 0;
						}
						if (++frameCounter >= 2 && frame < 11)
						{
							frame++;
							frameCounter = 0;
						}
					}
				}
			}
			if (flag9)
			{
				int num46 = 8;
				if (flag10)
				{
					num46 = 10;
				}
				rotation = 0f;
				if (velocity.Y == 0f)
				{
					if (velocity.X == 0f)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if (Math.Abs(velocity.X) >= 0.5f)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 10)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= num46 || frame < 2)
						{
							frame = 2;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y != 0f)
				{
					frameCounter = 0;
					frame = 1;
					if (flag10)
					{
						frame = 9;
					}
				}
			}
			velocity.Y += 0.4f + num36 * 1f;
			if (velocity.Y > 10f)
			{
				velocity.Y = 10f;
			}
		}
		if (!flag)
		{
			return;
		}
		localAI[0] += 1f;
		if (velocity.X == 0f)
		{
			localAI[0] += 1f;
		}
		if (localAI[0] >= (float)Main.rand.Next(900, 1200))
		{
			localAI[0] = 0f;
			for (int m = 0; m < 6; m++)
			{
				Vector2 val4 = base.Center + Vector2.UnitX * (float)(-direction) * 8f - Vector2.One * 5f + Vector2.UnitY * 8f;
				float speedX = -direction;
				newColor = default(Color);
				int num47 = Dust.NewDust(val4, 3, 6, 216, speedX, 1f, 0, newColor);
				Dust obj5 = Main.dust[num47];
				obj5.velocity /= 2f;
				Main.dust[num47].scale = 0.8f;
			}
			int num48 = Gore.NewGore(base.Center + Vector2.UnitX * (float)(-direction) * 8f, Vector2.Zero, Main.rand.Next(580, 583));
			Gore obj6 = Main.gore[num48];
			obj6.velocity /= 2f;
			Main.gore[num48].velocity.Y = Math.Abs(Main.gore[num48].velocity.Y);
			Main.gore[num48].velocity.X = (0f - Math.Abs(Main.gore[num48].velocity.X)) * (float)direction;
		}
	}

	private void AI_157_SharpTears()
	{
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0129: Unknown result type (might be due to invalid IL or missing references)
		//IL_0136: Unknown result type (might be due to invalid IL or missing references)
		//IL_013c: Unknown result type (might be due to invalid IL or missing references)
		//IL_014a: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0301: Unknown result type (might be due to invalid IL or missing references)
		//IL_0308: Unknown result type (might be due to invalid IL or missing references)
		//IL_030e: Unknown result type (might be due to invalid IL or missing references)
		//IL_032c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0339: Unknown result type (might be due to invalid IL or missing references)
		//IL_033f: Unknown result type (might be due to invalid IL or missing references)
		//IL_034d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0361: Unknown result type (might be due to invalid IL or missing references)
		//IL_0366: Unknown result type (might be due to invalid IL or missing references)
		//IL_036b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0372: Unknown result type (might be due to invalid IL or missing references)
		//IL_037c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0381: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0416: Unknown result type (might be due to invalid IL or missing references)
		//IL_0423: Unknown result type (might be due to invalid IL or missing references)
		//IL_0429: Unknown result type (might be due to invalid IL or missing references)
		//IL_0437: Unknown result type (might be due to invalid IL or missing references)
		//IL_044b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0450: Unknown result type (might be due to invalid IL or missing references)
		//IL_0455: Unknown result type (might be due to invalid IL or missing references)
		//IL_045c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0466: Unknown result type (might be due to invalid IL or missing references)
		//IL_046b: Unknown result type (might be due to invalid IL or missing references)
		//IL_019f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0209: Unknown result type (might be due to invalid IL or missing references)
		//IL_020f: Unknown result type (might be due to invalid IL or missing references)
		//IL_021d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0231: Unknown result type (might be due to invalid IL or missing references)
		//IL_0236: Unknown result type (might be due to invalid IL or missing references)
		//IL_023b: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0287: Unknown result type (might be due to invalid IL or missing references)
		int num = 5;
		float num2 = 1f;
		int num3 = 30;
		int num4 = 30;
		int num5 = 2;
		int num6 = 2;
		int num7 = 20;
		int num8 = 30;
		int num9 = 35;
		int maxValue = 6;
		if (type == 961)
		{
			num = 16;
			num2 = 0.75f;
			num3 = 5;
			num4 = 5;
			num5 = 0;
			num6 = 0;
			num7 = 10;
			num8 = 10;
			num9 = 20;
			maxValue = 5;
		}
		bool flag = ai[0] < (float)num7;
		bool flag2 = ai[0] >= (float)num8;
		bool flag3 = ai[0] >= (float)num9;
		ai[0] += 1f;
		if (localAI[0] == 0f)
		{
			localAI[0] = 1f;
			rotation = velocity.ToRotation();
			frame = Main.rand.Next(maxValue);
			for (int i = 0; i < num3; i++)
			{
				Dust dust = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(24f, 24f), num, velocity * num2 * MathHelper.Lerp(0.2f, 0.7f, Main.rand.NextFloat()));
				dust.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
				dust.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
			}
			for (int j = 0; j < num4; j++)
			{
				Dust dust2 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(24f, 24f), num, Main.rand.NextVector2Circular(2f, 2f) + velocity * num2 * MathHelper.Lerp(0.2f, 0.5f, Main.rand.NextFloat()));
				dust2.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
				dust2.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
				dust2.fadeIn = 1f;
			}
			if (type == 961)
			{
				SoundEngine.PlaySound(in SoundID.DeerclopsIceAttack, base.Center);
			}
			else
			{
				SoundEngine.PlaySound(in SoundID.Item60, base.Center);
			}
		}
		if (flag)
		{
			Opacity += 0.1f;
			scale = Opacity * ai[1];
			for (int k = 0; k < num5; k++)
			{
				Dust dust3 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(16f, 16f), num, velocity * num2 * MathHelper.Lerp(0.2f, 0.5f, Main.rand.NextFloat()));
				dust3.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
				dust3.velocity *= 0.5f;
				dust3.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
			}
		}
		if (flag2)
		{
			Opacity -= 0.2f;
			for (int l = 0; l < num6; l++)
			{
				Dust dust4 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(16f, 16f), num, velocity * num2 * MathHelper.Lerp(0.2f, 0.5f, Main.rand.NextFloat()));
				dust4.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
				dust4.velocity *= 0.5f;
				dust4.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
			}
		}
		if (flag3)
		{
			Kill();
		}
		if (type == 756)
		{
			Lighting.AddLight(base.Center, new Vector3(0.5f, 0.1f, 0.1f) * scale);
		}
	}

	public bool IsInRangeOfMeOrMyOwner(Entity entity, float maxDistance, out float myDistance, out float playerDistance, out bool closerIsMe)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		myDistance = Vector2.Distance(entity.Center, base.Center);
		if (myDistance < maxDistance && !CanHitWithOwnBody(entity))
		{
			myDistance = float.PositiveInfinity;
		}
		playerDistance = Vector2.Distance(entity.Center, Main.player[owner].Center);
		if (playerDistance < maxDistance && !CanHitWithMeleeWeapon(entity))
		{
			playerDistance = float.PositiveInfinity;
		}
		closerIsMe = myDistance < playerDistance;
		if (closerIsMe)
		{
			return myDistance <= maxDistance;
		}
		return playerDistance <= maxDistance;
	}

	private void AI_156_BatOfLight()
	{
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_0136: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		List<int> ai156_blacklistedTargets = _ai156_blacklistedTargets;
		Player player = Main.player[owner];
		bool num3 = type == 755;
		bool flag = type == 946;
		Color val;
		if (num3)
		{
			if (player.dead)
			{
				player.batsOfLight = false;
			}
			if (player.batsOfLight)
			{
				timeLeft = 2;
			}
			val = AI_156_GetColor();
			DelegateMethods.v3_1 = ((Color)(ref val)).ToVector3();
			Point point = base.Center.ToTileCoordinates();
			DelegateMethods.CastLightOpen(point.X, point.Y);
			if (++frameCounter >= 6)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type] - 1)
				{
					frame = 0;
				}
			}
			int num2 = player.direction;
			if (velocity.X != 0f)
			{
				num2 = Math.Sign(velocity.X);
			}
			spriteDirection = num2;
		}
		if (flag)
		{
			if (player.dead)
			{
				player.empressBlade = false;
			}
			if (player.empressBlade)
			{
				timeLeft = 2;
			}
			val = AI_156_GetColor();
			DelegateMethods.v3_1 = ((Color)(ref val)).ToVector3();
			Point point2 = base.Center.ToTileCoordinates();
			DelegateMethods.CastLightOpen(point2.X, point2.Y);
		}
		ai156_blacklistedTargets.Clear();
		AI_156_Think(ai156_blacklistedTargets);
	}

	public Color AI_156_GetColor()
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		if (aiStyle != 156)
		{
			return Color.Transparent;
		}
		bool num = type == 755;
		_ = type;
		if (num)
		{
			return Color.Crimson;
		}
		return Color.Transparent;
	}

	private void AI_156_Think(List<int> blacklist)
	{
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_015c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0174: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0304: Unknown result type (might be due to invalid IL or missing references)
		//IL_0309: Unknown result type (might be due to invalid IL or missing references)
		//IL_038d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0392: Unknown result type (might be due to invalid IL or missing references)
		//IL_0394: Unknown result type (might be due to invalid IL or missing references)
		//IL_0396: Unknown result type (might be due to invalid IL or missing references)
		//IL_0398: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0384: Unknown result type (might be due to invalid IL or missing references)
		//IL_0389: Unknown result type (might be due to invalid IL or missing references)
		//IL_0322: Unknown result type (might be due to invalid IL or missing references)
		//IL_0335: Unknown result type (might be due to invalid IL or missing references)
		//IL_0645: Unknown result type (might be due to invalid IL or missing references)
		//IL_0651: Unknown result type (might be due to invalid IL or missing references)
		//IL_03da: Unknown result type (might be due to invalid IL or missing references)
		//IL_03df: Unknown result type (might be due to invalid IL or missing references)
		//IL_0406: Unknown result type (might be due to invalid IL or missing references)
		//IL_040d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0413: Unknown result type (might be due to invalid IL or missing references)
		//IL_0415: Unknown result type (might be due to invalid IL or missing references)
		//IL_041a: Unknown result type (might be due to invalid IL or missing references)
		//IL_041c: Unknown result type (might be due to invalid IL or missing references)
		//IL_041e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0420: Unknown result type (might be due to invalid IL or missing references)
		//IL_0425: Unknown result type (might be due to invalid IL or missing references)
		//IL_0436: Unknown result type (might be due to invalid IL or missing references)
		//IL_0438: Unknown result type (might be due to invalid IL or missing references)
		//IL_043f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0444: Unknown result type (might be due to invalid IL or missing references)
		//IL_0448: Unknown result type (might be due to invalid IL or missing references)
		//IL_044d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0452: Unknown result type (might be due to invalid IL or missing references)
		//IL_0455: Unknown result type (might be due to invalid IL or missing references)
		//IL_046c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0476: Unknown result type (might be due to invalid IL or missing references)
		//IL_047b: Unknown result type (might be due to invalid IL or missing references)
		//IL_047e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0480: Unknown result type (might be due to invalid IL or missing references)
		//IL_0487: Unknown result type (might be due to invalid IL or missing references)
		//IL_048d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0492: Unknown result type (might be due to invalid IL or missing references)
		//IL_0497: Unknown result type (might be due to invalid IL or missing references)
		//IL_084b: Unknown result type (might be due to invalid IL or missing references)
		//IL_086a: Unknown result type (might be due to invalid IL or missing references)
		//IL_086f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0874: Unknown result type (might be due to invalid IL or missing references)
		//IL_0878: Unknown result type (might be due to invalid IL or missing references)
		//IL_087d: Unknown result type (might be due to invalid IL or missing references)
		//IL_087f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0884: Unknown result type (might be due to invalid IL or missing references)
		//IL_0886: Unknown result type (might be due to invalid IL or missing references)
		//IL_0888: Unknown result type (might be due to invalid IL or missing references)
		//IL_088d: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_08bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_0919: Unknown result type (might be due to invalid IL or missing references)
		//IL_091d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0924: Unknown result type (might be due to invalid IL or missing references)
		//IL_06fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0701: Unknown result type (might be due to invalid IL or missing references)
		//IL_0703: Unknown result type (might be due to invalid IL or missing references)
		//IL_0705: Unknown result type (might be due to invalid IL or missing references)
		//IL_0707: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_093a: Unknown result type (might be due to invalid IL or missing references)
		//IL_093f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0943: Unknown result type (might be due to invalid IL or missing references)
		//IL_067b: Unknown result type (might be due to invalid IL or missing references)
		//IL_068e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0742: Unknown result type (might be due to invalid IL or missing references)
		//IL_0747: Unknown result type (might be due to invalid IL or missing references)
		//IL_0784: Unknown result type (might be due to invalid IL or missing references)
		//IL_078b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0791: Unknown result type (might be due to invalid IL or missing references)
		//IL_0793: Unknown result type (might be due to invalid IL or missing references)
		//IL_0798: Unknown result type (might be due to invalid IL or missing references)
		//IL_079a: Unknown result type (might be due to invalid IL or missing references)
		//IL_079c: Unknown result type (might be due to invalid IL or missing references)
		//IL_079e: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_07bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_07cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_07fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0806: Unknown result type (might be due to invalid IL or missing references)
		//IL_080b: Unknown result type (might be due to invalid IL or missing references)
		//IL_080e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0810: Unknown result type (might be due to invalid IL or missing references)
		//IL_0817: Unknown result type (might be due to invalid IL or missing references)
		//IL_081d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0822: Unknown result type (might be due to invalid IL or missing references)
		//IL_0827: Unknown result type (might be due to invalid IL or missing references)
		bool flag = type == 755;
		bool flag2 = type == 946;
		int num = 60;
		int num12 = num - 1;
		int num19 = num + 60;
		int num20 = num19 - 1;
		int num21 = num + 1;
		if (flag)
		{
			num = 66;
		}
		if (flag2)
		{
			num = 40;
			num12 = num - 1;
			num19 = num + 40;
			num20 = num19 - 1;
			num21 = num + 1;
		}
		Player player = Main.player[owner];
		if (player.active && Vector2.Distance(player.Center, base.Center) > 2000f)
		{
			ai[0] = 0f;
			ai[1] = 0f;
			netUpdate = true;
		}
		if (ai[0] == -1f)
		{
			AI_GetMyGroupIndexAndFillBlackList(blacklist, out var index, out var totalIndexesInGroup);
			AI_156_GetIdlePosition(index, totalIndexesInGroup, out var idleSpot, out var idleRotation);
			velocity = Vector2.Zero;
			base.Center = base.Center.MoveTowards(idleSpot, 32f);
			rotation = rotation.AngleLerp(idleRotation, 0.2f);
			if (Distance(idleSpot) < 2f)
			{
				ai[0] = 0f;
				netUpdate = true;
			}
			return;
		}
		if (ai[0] == 0f)
		{
			if (flag)
			{
				AI_GetMyGroupIndexAndFillBlackList(blacklist, out var index2, out var totalIndexesInGroup2);
				AI_156_GetIdlePosition(index2, totalIndexesInGroup2, out var idleSpot2, out var _);
				velocity = Vector2.Zero;
				base.Center = Vector2.SmoothStep(base.Center, idleSpot2, 0.45f);
				if (Main.rand.Next(20) == 0)
				{
					int num22 = AI_156_TryAttackingNPCs(blacklist);
					if (num22 != -1)
					{
						AI_156_StartAttack();
						ai[0] = num;
						ai[1] = num22;
						netUpdate = true;
						return;
					}
				}
			}
			if (!flag2)
			{
				return;
			}
			AI_GetMyGroupIndexAndFillBlackList(blacklist, out var index3, out var totalIndexesInGroup3);
			AI_156_GetIdlePosition(index3, totalIndexesInGroup3, out var idleSpot3, out var idleRotation2);
			velocity = Vector2.Zero;
			base.Center = Vector2.SmoothStep(base.Center, idleSpot3, 0.45f);
			rotation = rotation.AngleLerp(idleRotation2, 0.45f);
			if (Main.rand.Next(20) == 0)
			{
				int num23 = AI_156_TryAttackingNPCs(blacklist);
				if (num23 != -1)
				{
					AI_156_StartAttack();
					ai[0] = Main.rand.NextFromList<int>(num, num19);
					ai[0] = num19;
					ai[1] = num23;
					netUpdate = true;
				}
			}
			return;
		}
		Vector2 center5;
		if (flag)
		{
			int num24 = (int)ai[1];
			if (!Main.npc.IndexInRange(num24))
			{
				ai[0] = 0f;
				netUpdate = true;
				return;
			}
			NPC nPC = Main.npc[num24];
			if (!nPC.CanBeChasedBy(this))
			{
				ai[0] = 0f;
				netUpdate = true;
				return;
			}
			ai[0] -= 1f;
			if (ai[0] >= (float)num12)
			{
				velocity *= 0.8f;
				if (ai[0] == (float)num12)
				{
					localAI[0] = base.Center.X;
					localAI[1] = base.Center.Y;
				}
				return;
			}
			float lerpValue = Utils.GetLerpValue(num12, 0f, ai[0], clamped: true);
			Vector2 vector = default(Vector2);
			((Vector2)(ref vector))._002Ector(localAI[0], localAI[1]);
			if (lerpValue >= 0.5f)
			{
				vector = Main.player[owner].Center;
			}
			Vector2 center = nPC.Center;
			float num25 = (center - vector).ToRotation();
			float num2 = ((center.X > vector.X) ? (-(float)Math.PI) : ((float)Math.PI));
			float num3 = num2 + (0f - num2) * lerpValue * 2f;
			Vector2 spinningpoint = num3.ToRotationVector2();
			spinningpoint.Y *= (float)Math.Sin((float)identity * 2.3f) * 0.5f;
			Vector2 spinningpoint3 = spinningpoint;
			double radians = num25;
			center5 = default(Vector2);
			spinningpoint = spinningpoint3.RotatedBy(radians, center5);
			center5 = center - vector;
			float num4 = ((Vector2)(ref center5)).Length() / 2f;
			Vector2 center2 = Vector2.Lerp(vector, center, 0.5f) + spinningpoint * num4;
			base.Center = center2;
			Vector2 vector2 = MathHelper.WrapAngle(num25 + num3 + 0f).ToRotationVector2() * 10f;
			velocity = vector2;
			position -= velocity;
			if (ai[0] == 0f)
			{
				int num5 = AI_156_TryAttackingNPCs(blacklist);
				if (num5 != -1)
				{
					ai[0] = num;
					ai[1] = num5;
					AI_156_StartAttack();
					netUpdate = true;
					return;
				}
				ai[1] = 0f;
				netUpdate = true;
			}
		}
		if (!flag2)
		{
			return;
		}
		bool skipBodyCheck = true;
		int num6 = 0;
		int num7 = num12;
		int num8 = 0;
		if (ai[0] >= (float)num21)
		{
			num6 = 1;
			num7 = num20;
			num8 = num21;
		}
		int num9 = (int)ai[1];
		if (!Main.npc.IndexInRange(num9))
		{
			int num10 = AI_156_TryAttackingNPCs(blacklist, skipBodyCheck);
			if (num10 != -1)
			{
				ai[0] = Main.rand.NextFromList<int>(num, num19);
				ai[1] = num10;
				AI_156_StartAttack();
				netUpdate = true;
			}
			else
			{
				ai[0] = -1f;
				ai[1] = 0f;
				netUpdate = true;
			}
			return;
		}
		NPC nPC2 = Main.npc[num9];
		if (!nPC2.CanBeChasedBy(this))
		{
			int num11 = AI_156_TryAttackingNPCs(blacklist, skipBodyCheck);
			if (num11 != -1)
			{
				ai[0] = Main.rand.NextFromList<int>(num, num19);
				AI_156_StartAttack();
				ai[1] = num11;
				netUpdate = true;
			}
			else
			{
				ai[0] = -1f;
				ai[1] = 0f;
				netUpdate = true;
			}
			return;
		}
		ai[0] -= 1f;
		if (ai[0] >= (float)num7)
		{
			direction = ((base.Center.X < nPC2.Center.X) ? 1 : (-1));
			if (ai[0] == (float)num7)
			{
				localAI[0] = base.Center.X;
				localAI[1] = base.Center.Y;
			}
		}
		float lerpValue2 = Utils.GetLerpValue(num7, num8, ai[0], clamped: true);
		if (num6 == 0)
		{
			Vector2 vector3 = default(Vector2);
			((Vector2)(ref vector3))._002Ector(localAI[0], localAI[1]);
			if (lerpValue2 >= 0.5f)
			{
				vector3 = Vector2.Lerp(nPC2.Center, Main.player[owner].Center, 0.5f);
			}
			Vector2 center3 = nPC2.Center;
			float num13 = (center3 - vector3).ToRotation();
			float num14 = ((direction == 1) ? (-(float)Math.PI) : ((float)Math.PI));
			float num15 = num14 + (0f - num14) * lerpValue2 * 2f;
			Vector2 spinningpoint2 = num15.ToRotationVector2();
			spinningpoint2.Y *= 0.5f;
			spinningpoint2.Y *= 0.8f + (float)Math.Sin((float)identity * 2.3f) * 0.2f;
			Vector2 spinningpoint4 = spinningpoint2;
			double radians2 = num13;
			center5 = default(Vector2);
			spinningpoint2 = spinningpoint4.RotatedBy(radians2, center5);
			center5 = center3 - vector3;
			float num16 = ((Vector2)(ref center5)).Length() / 2f;
			Vector2 center4 = Vector2.Lerp(vector3, center3, 0.5f) + spinningpoint2 * num16;
			base.Center = center4;
			float num17 = MathHelper.WrapAngle(num13 + num15 + 0f);
			rotation = num17 + (float)Math.PI / 2f;
			Vector2 vector4 = num17.ToRotationVector2() * 10f;
			velocity = vector4;
			position -= velocity;
		}
		if (num6 == 1)
		{
			Vector2 vector5 = default(Vector2);
			((Vector2)(ref vector5))._002Ector(localAI[0], localAI[1]);
			vector5 += new Vector2(0f, Utils.GetLerpValue(0f, 0.4f, lerpValue2, clamped: true) * -100f);
			Vector2 v = nPC2.Center - vector5;
			Vector2 vector6 = v.SafeNormalize(Vector2.Zero) * MathHelper.Clamp(((Vector2)(ref v)).Length(), 60f, 150f);
			Vector2 value = nPC2.Center + vector6;
			float lerpValue3 = Utils.GetLerpValue(0.4f, 0.6f, lerpValue2, clamped: true);
			float lerpValue4 = Utils.GetLerpValue(0.6f, 1f, lerpValue2, clamped: true);
			float targetAngle = v.SafeNormalize(Vector2.Zero).ToRotation() + (float)Math.PI / 2f;
			rotation = rotation.AngleTowards(targetAngle, (float)Math.PI / 5f);
			base.Center = Vector2.Lerp(vector5, nPC2.Center, lerpValue3);
			if (lerpValue4 > 0f)
			{
				base.Center = Vector2.Lerp(nPC2.Center, value, lerpValue4);
			}
		}
		if (ai[0] == (float)num8)
		{
			int num18 = AI_156_TryAttackingNPCs(blacklist, skipBodyCheck);
			if (num18 != -1)
			{
				ai[0] = Main.rand.NextFromList<int>(num, num19);
				ai[1] = num18;
				AI_156_StartAttack();
				netUpdate = true;
			}
			else
			{
				ai[0] = -1f;
				ai[1] = 0f;
				netUpdate = true;
			}
		}
	}

	private void AI_156_StartAttack()
	{
		for (int i = 0; i < localNPCImmunity.Length; i++)
		{
			localNPCImmunity[i] = 0;
		}
	}

	private int AI_156_TryAttackingNPCs(List<int> blackListedTargets, bool skipBodyCheck = false)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		Vector2 center = Main.player[owner].Center;
		int result = -1;
		float num = -1f;
		NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
		if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
		{
			bool flag = true;
			if (!ownerMinionAttackTargetNPC.boss && blackListedTargets.Contains(ownerMinionAttackTargetNPC.whoAmI))
			{
				flag = false;
			}
			if (ownerMinionAttackTargetNPC.Distance(center) > 1000f)
			{
				flag = false;
			}
			if (!skipBodyCheck && !CanHitWithOwnBody(ownerMinionAttackTargetNPC))
			{
				flag = false;
			}
			if (flag)
			{
				return ownerMinionAttackTargetNPC.whoAmI;
			}
		}
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = Main.npc[i];
			if (nPC.CanBeChasedBy(this) && (nPC.boss || !blackListedTargets.Contains(i)))
			{
				float num2 = nPC.Distance(center);
				if (!(num2 > 1000f) && (!(num2 > num) || num == -1f) && (skipBodyCheck || CanHitWithOwnBody(nPC)))
				{
					num = num2;
					result = i;
				}
			}
		}
		return result;
	}

	private void AI_GetMyGroupIndexAndFillBlackList(List<int> blackListedTargets, out int index, out int totalIndexesInGroup)
	{
		index = 0;
		totalIndexesInGroup = 0;
		for (int i = 0; i < 1000; i++)
		{
			Projectile projectile = Main.projectile[i];
			if (projectile.active && projectile.owner == owner && projectile.type == type && (projectile.type != 759 || projectile.frame == Main.projFrames[projectile.type] - 1))
			{
				if (whoAmI > i)
				{
					index++;
				}
				totalIndexesInGroup++;
			}
		}
	}

	private void AI_156_GetIdlePosition(int stackedIndex, int totalIndexes, out Vector2 idleSpot, out float idleRotation)
	{
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0174: Unknown result type (might be due to invalid IL or missing references)
		//IL_0179: Unknown result type (might be due to invalid IL or missing references)
		//IL_017b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0180: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[owner];
		bool num5 = type == 755;
		bool flag = type == 946;
		idleRotation = 0f;
		idleSpot = Vector2.Zero;
		if (num5)
		{
			float num2 = ((float)totalIndexes - 1f) / 2f;
			idleSpot = player.Center + -Vector2.UnitY.RotatedBy(4.3982296f / (float)totalIndexes * ((float)stackedIndex - num2)) * 40f;
			idleRotation = 0f;
		}
		if (flag)
		{
			int num3 = stackedIndex + 1;
			idleRotation = (float)num3 * ((float)Math.PI * 2f) * (1f / 60f) * (float)player.direction + (float)Math.PI / 2f;
			idleRotation = MathHelper.WrapAngle(idleRotation);
			int num4 = num3 % totalIndexes;
			Vector2 vector = Utils.RotatedBy(new Vector2(0f, 0.5f), (player.miscCounterNormalized * (2f + (float)num4) + (float)num4 * 0.5f + (float)player.direction * 1.3f) * ((float)Math.PI * 2f)) * 4f;
			idleSpot = idleRotation.ToRotationVector2() * 10f + player.MountedCenter + new Vector2((float)(player.direction * (num3 * -6 - 16)), player.gravDir * -15f);
			idleSpot += vector;
			idleRotation += (float)Math.PI / 2f;
		}
	}

	private void AI_155_MysticSnakeCoil()
	{
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0613: Unknown result type (might be due to invalid IL or missing references)
		//IL_0618: Unknown result type (might be due to invalid IL or missing references)
		//IL_061d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0621: Unknown result type (might be due to invalid IL or missing references)
		//IL_0634: Unknown result type (might be due to invalid IL or missing references)
		//IL_0645: Unknown result type (might be due to invalid IL or missing references)
		//IL_06bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_066a: Unknown result type (might be due to invalid IL or missing references)
		//IL_077a: Unknown result type (might be due to invalid IL or missing references)
		//IL_06af: Unknown result type (might be due to invalid IL or missing references)
		//IL_078f: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_019c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01de: Unknown result type (might be due to invalid IL or missing references)
		//IL_0249: Unknown result type (might be due to invalid IL or missing references)
		//IL_0267: Unknown result type (might be due to invalid IL or missing references)
		//IL_026d: Unknown result type (might be due to invalid IL or missing references)
		//IL_026f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0284: Unknown result type (might be due to invalid IL or missing references)
		//IL_0289: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0712: Unknown result type (might be due to invalid IL or missing references)
		//IL_072c: Unknown result type (might be due to invalid IL or missing references)
		//IL_073d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0747: Unknown result type (might be due to invalid IL or missing references)
		//IL_074c: Unknown result type (might be due to invalid IL or missing references)
		//IL_07fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0309: Unknown result type (might be due to invalid IL or missing references)
		//IL_0318: Unknown result type (might be due to invalid IL or missing references)
		//IL_031d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0337: Unknown result type (might be due to invalid IL or missing references)
		//IL_0348: Unknown result type (might be due to invalid IL or missing references)
		//IL_0352: Unknown result type (might be due to invalid IL or missing references)
		//IL_0357: Unknown result type (might be due to invalid IL or missing references)
		//IL_0820: Unknown result type (might be due to invalid IL or missing references)
		//IL_0822: Unknown result type (might be due to invalid IL or missing references)
		//IL_040f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0414: Unknown result type (might be due to invalid IL or missing references)
		//IL_0419: Unknown result type (might be due to invalid IL or missing references)
		//IL_041d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0431: Unknown result type (might be due to invalid IL or missing references)
		//IL_0443: Unknown result type (might be due to invalid IL or missing references)
		//IL_044a: Unknown result type (might be due to invalid IL or missing references)
		//IL_045a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0465: Unknown result type (might be due to invalid IL or missing references)
		//IL_0477: Unknown result type (might be due to invalid IL or missing references)
		//IL_048e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0511: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_058f: Unknown result type (might be due to invalid IL or missing references)
		//IL_05bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05da: Unknown result type (might be due to invalid IL or missing references)
		if (Main.netMode != 1 && !Main.player[owner].active)
		{
			float num = ai[0];
			float y = position.Y;
			Point point = base.Center.ToTileCoordinates();
			Point end = default(Point);
			((Point)(ref end))._002Ector(point.X, (int)y / 16);
			Point start = default(Point);
			((Point)(ref start))._002Ector(point.X, (int)num / 16);
			AI_155_RemoveRope(start, end);
			Kill();
			return;
		}
		int num6 = 100;
		int num7 = 1800;
		if (ai[1] == 0f)
		{
			spriteDirection = ((!(Main.player[owner].Center.X > base.Center.X)) ? 1 : (-1));
			ai[1] = 1f;
			velocity.Y = -5f;
		}
		if (ai[1] == 1f)
		{
			localAI[1] += 1f;
			float num8 = Utils.Remap(localAI[1], 15f, 30f, 0f, 1f);
			int num9 = ((localAI[1] >= 60f) ? 1 : 0);
			velocity.Y = -3f * (1f - num8) + (float)(-32 * num9);
			velocity.Y = (int)velocity.Y;
			if (localAI[1] == 60f)
			{
				for (int i = 0; i < 30; i++)
				{
					Dust dust = Dust.NewDustDirect(base.TopLeft + new Vector2(-6f, 0f), 24, 16, 27, 0f, 0f, 150, Color.Transparent, 0.6f);
					dust.velocity *= 1f;
					dust.velocity.X *= 0.5f;
					dust.velocity.Y = -3f;
					dust.fadeIn = 1.2f;
					dust.noGravity = true;
					dust.position.X += Main.rand.NextFloatDirection() * 8f;
					dust.velocity = Utils.RotatedBy(new Vector2(0f, -1f), (float)Math.PI / 4f * Main.rand.NextFloatDirection() * 0f) * (Main.rand.NextFloatDirection() * 9f);
					if (dust.velocity.Y < 0f)
					{
						dust.velocity.Y *= 1f + Main.rand.NextFloat() * 3f;
					}
				}
			}
			bool flag = num8 > 0f && num9 <= 0;
			if ((Main.rand.Next(6) == 0 || num9 > 0) && !flag)
			{
				Dust dust2 = Dust.NewDustDirect(base.TopLeft + new Vector2(-6f, 0f), 24, 16, 27, 0f, 0f, 150, Color.Transparent, 0.6f);
				dust2.velocity *= 1f;
				dust2.velocity.X *= 0.5f;
				dust2.velocity.Y = -3f;
				dust2.fadeIn = 1.2f;
				dust2.noGravity = true;
			}
			alpha = Utils.Clamp(alpha - 5, 0, 255);
			if (++frameCounter >= 12)
			{
				frameCounter = 0;
				if (++frame >= 4)
				{
					frame = 0;
				}
			}
			if (Main.myPlayer == owner)
			{
				float num10 = ai[0];
				float y2 = position.Y;
				Point point2 = base.Center.ToTileCoordinates();
				Point point3 = default(Point);
				((Point)(ref point3))._002Ector(point2.X, (int)y2 / 16);
				Point point4 = default(Point);
				((Point)(ref point4))._002Ector(point2.X, (int)num10 / 16);
				bool flag2 = point4.Y - point3.Y >= num6;
				int x = point4.X;
				if (!WorldGen.InWorld(x, point3.Y, 40) || !WorldGen.InWorld(x, point4.Y, 40))
				{
					flag2 = true;
				}
				if (!flag2)
				{
					for (int num11 = point4.Y; num11 >= point3.Y; num11--)
					{
						if (Main.tile[x, num11].active() && !Main.tileCut[Main.tile[x, num11].type] && Main.tile[x, num11].type != 504)
						{
							flag2 = true;
							break;
						}
					}
				}
				if (flag2)
				{
					int num12 = 0;
					for (int num13 = point4.Y; num13 > point3.Y; num13--)
					{
						if ((WorldGen.TileEmpty(x, num13) || Main.tileCut[Main.tile[x, num13].type]) && WorldGen.PlaceTile(x, num13, 504, mute: false, forced: false, owner))
						{
							num12++;
							if (Main.netMode == 1)
							{
								NetMessage.SendData(17, -1, -1, null, 1, x, num13, 504f);
							}
						}
					}
					timeLeft = num7;
					ai[1] = 2f;
					netUpdate = true;
					base.Top = new Vector2((float)(x * 16 + 8), (float)(point3.Y * 16 + 16));
					velocity = Vector2.Zero;
				}
			}
		}
		if (ai[1] != 2f)
		{
			return;
		}
		alpha = 0;
		_ = timeLeft;
		float num2 = ai[0];
		float y3 = position.Y;
		Point point5 = base.Center.ToTileCoordinates();
		Point end2 = default(Point);
		((Point)(ref end2))._002Ector(point5.X, (int)y3 / 16);
		Point start2 = default(Point);
		((Point)(ref start2))._002Ector(point5.X, (int)num2 / 16);
		int x2 = start2.X;
		if (localAI[0] == 0f)
		{
			localAI[0] = 1f;
			for (int num3 = start2.Y; num3 >= end2.Y; num3--)
			{
				Tile tile = Main.tile[x2, num3];
				if (tile.active() && tile.type == 504)
				{
					AI_155_SpawnRopeIn(x2, num3);
				}
			}
		}
		else
		{
			for (int num4 = start2.Y; num4 >= end2.Y; num4--)
			{
				Tile tile2 = Main.tile[x2, num4];
				if (tile2.active() && tile2.type == 504 && Main.rand.Next(80) == 0)
				{
					Dust dust3 = Dust.NewDustDirect(new Vector2((float)(x2 * 16 - 6), (float)(num4 * 16)), 28, 16, 27, 0f, 0f, 150, Color.Transparent, 0.6f);
					dust3.velocity *= 1f;
					dust3.velocity.X = 0f;
					dust3.fadeIn = 1.2f;
					dust3.noGravity = true;
				}
			}
		}
		if (timeLeft == 4)
		{
			for (int num5 = start2.Y; num5 >= end2.Y; num5--)
			{
				Tile tile3 = Main.tile[x2, num5];
				if (tile3.active() && tile3.type == 504)
				{
					AI_155_SpawnRopeIn(x2, num5);
				}
			}
		}
		if (timeLeft > 4)
		{
			return;
		}
		if (!WorldGen.InWorld(x2, end2.Y, 20) || !WorldGen.InWorld(x2, start2.Y, 20))
		{
			Kill();
			return;
		}
		if (Main.myPlayer == owner)
		{
			AI_155_RemoveRope(start2, end2);
		}
		Kill();
	}

	private void AI_155_RemoveRope(Point start, Point end)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		int x = start.X;
		for (int num = start.Y; num >= end.Y; num--)
		{
			Tile tile = Main.tile[x, num];
			if (tile.active() && tile.type == 504)
			{
				WorldGen.KillTile(x, num);
				if (Main.netMode != 0)
				{
					NetMessage.SendData(17, -1, -1, null, 0, x, num);
				}
			}
		}
	}

	private void AI_155_SpawnRopeIn(int x, int y)
	{
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0147: Unknown result type (might be due to invalid IL or missing references)
		//IL_014c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector((float)(x * 16 + 8), (float)(y * 16 + 8));
		if (Main.rand.Next(4) != 0)
		{
			Gore gore = Gore.NewGoreDirect(vector, Vector2.Zero, Main.rand.Next(61, 64));
			gore.velocity = Main.rand.NextVector2Circular(1.5f, 0.8f);
			gore.velocity.X += 0.1f * (float)((gore.velocity.X > 0f) ? 1 : (-1));
			gore.position = vector - new Vector2(16f, 16f);
			gore.alpha = 170;
		}
		for (int i = 0; i < 5; i++)
		{
			if (Main.rand.Next(8) == 0)
			{
				Dust dust = Dust.NewDustDirect(vector + new Vector2(-8f), 16, 16, 31, 0f, 0f, 100, Color.Transparent);
				dust.velocity *= 0.4f;
			}
			Dust dust2 = Dust.NewDustDirect(vector + new Vector2(-8f), 16, 16, 27, 0f, 0f, 100, Color.Transparent, 1.7f);
			dust2.velocity *= 2f;
			dust2.noGravity = true;
		}
	}

	private void AI_154_VoidLens()
	{
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		Main.CurrentFrameFlags.HadAnActiveInteractibleProjectile = true;
		if (owner == Main.myPlayer)
		{
			for (int i = 0; i < 1000; i++)
			{
				if (i == whoAmI)
				{
					continue;
				}
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.owner == owner && projectile.type == type)
				{
					if (timeLeft < Main.projectile[i].timeLeft)
					{
						Kill();
						return;
					}
					Main.projectile[i].Kill();
				}
			}
		}
		velocity *= 0.94f;
		direction = 1;
		if (++frameCounter >= 5)
		{
			frameCounter = 0;
			if (++frame >= Main.projFrames[type])
			{
				frame = 0;
			}
		}
		if (Opacity < 1f)
		{
			Opacity += 0.03f;
			if (Opacity > 1f)
			{
				Opacity = 1f;
			}
		}
		new VoidLensHelper(this).Update();
	}

	private void AI_153_ToiletPop()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		Vector2 center = base.Center;
		float speedY = -2f;
		int num = 0;
		int num2 = 0;
		if (ai[0] == 0f)
		{
			num = 6;
			num2 = 1;
		}
		else
		{
			if (!(ai[0] <= 10f))
			{
				Kill();
				return;
			}
			if (Main.rand.Next(5) == 0)
			{
				num2 = 1;
			}
			num = 2;
		}
		ai[0] += 1f;
		for (int i = 0; i < num; i++)
		{
			Dust dust = Dust.NewDustDirect(center, 3, 6, 216, 0f, speedY);
			dust.velocity.X *= 0.5f;
			dust.velocity.Y = 0f - Math.Abs(dust.velocity.Y);
			dust.position -= dust.velocity;
			dust.scale = 0.8f;
		}
		for (int j = 0; j < num2; j++)
		{
			Gore gore = Gore.NewGoreDirect(center, Vector2.UnitY * -3f + Main.rand.NextVector2Circular(1f, 1f), Main.rand.Next(580, 583));
			gore.velocity.Y = 0f - Math.Abs(gore.velocity.Y);
		}
	}

	private void AI_150_GolfClubHelper()
	{
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_030e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0313: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03de: Unknown result type (might be due to invalid IL or missing references)
		//IL_0374: Unknown result type (might be due to invalid IL or missing references)
		//IL_0379: Unknown result type (might be due to invalid IL or missing references)
		//IL_037b: Unknown result type (might be due to invalid IL or missing references)
		//IL_037e: Unknown result type (might be due to invalid IL or missing references)
		//IL_012e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0135: Unknown result type (might be due to invalid IL or missing references)
		//IL_013a: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0419: Unknown result type (might be due to invalid IL or missing references)
		//IL_041e: Unknown result type (might be due to invalid IL or missing references)
		//IL_03eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0392: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0224: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0202: Unknown result type (might be due to invalid IL or missing references)
		//IL_024c: Unknown result type (might be due to invalid IL or missing references)
		//IL_024e: Unknown result type (might be due to invalid IL or missing references)
		//IL_025a: Unknown result type (might be due to invalid IL or missing references)
		//IL_025f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0263: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[owner];
		if (!player.active)
		{
			Kill();
			return;
		}
		if (player.gravDir == -1f)
		{
			player.SetDummyItemTime(0);
			Kill();
			return;
		}
		bool flag = false;
		Rectangle rectangle = Utils.CenteredRectangle(player.Center, new Vector2(500f, 500f));
		for (int i = 0; i < 1000; i++)
		{
			Projectile projectile = Main.projectile[i];
			if (projectile.active && projectile.owner == Main.myPlayer && ProjectileID.Sets.IsAGolfBall[projectile.type] && ((Rectangle)(ref rectangle)).Contains(projectile.Center.ToPoint()))
			{
				flag = true;
				break;
			}
		}
		if (!flag && owner == Main.myPlayer && ai[0] == 0f)
		{
			player.TryPlacingAGolfBallNearANearbyTee(Main.player[owner].Center);
		}
		if (!player.channel && ai[0] == 0f)
		{
			SoundEngine.PlaySound(in SoundID.Item1, player.Center);
			for (int j = 0; j < 1000; j++)
			{
				Projectile projectile2 = Main.projectile[j];
				Vector2 shotVector = Main.MouseWorld - projectile2.Center;
				if (!projectile2.active || !ProjectileID.Sets.IsAGolfBall[projectile2.type] || projectile2.owner != owner || !GolfHelper.ValidateShot(projectile2, player, ref shotVector))
				{
					continue;
				}
				float num = Main.rand.NextFloatDirection();
				for (float num2 = 0f; num2 < 1f; num2 += 0.1f)
				{
					Dust dust = Dust.NewDustPerfect(projectile2.Center, 31, ((float)Math.PI * 2f * num2 + num).ToRotationVector2() * 0.8f, 127);
					dust.fadeIn = 0f;
					if (num2 % 0.2f == 0f)
					{
						dust.velocity *= 0.4f;
					}
				}
				SoundEngine.PlaySound(in SoundID.Item126, projectile2.Center);
				if (owner == Main.myPlayer)
				{
					GolfHelper.ShotStrength shotStrength = GolfHelper.CalculateShotStrength(this, projectile2);
					Vector2 vector = Vector2.Normalize(shotVector) * shotStrength.AbsoluteStrength;
					GolfHelper.HitGolfBall(projectile2, vector, shotStrength.RoughLandResistance);
					NetMessage.SendData(27, -1, -1, null, j);
				}
			}
			ai[0] = 1f;
			ai[1] = 0f;
			netUpdate = true;
		}
		if (ai[0] == 1f)
		{
			ai[1] += 1f;
			float num3 = player.HeldItem.useAnimation + 30;
			if (ai[1] >= num3)
			{
				Kill();
				return;
			}
			velocity = Vector2.Zero;
			player.ChangeDir(direction);
			player.heldProj = whoAmI;
			int num4 = player.HeldItem.useAnimation - (int)ai[1];
			if (num4 < 2)
			{
				num4 = 2;
			}
			player.SetDummyItemTime(num4);
		}
		if (ai[0] != 0f)
		{
			return;
		}
		if (owner == Main.myPlayer)
		{
			Vector2 mouseWorld = Main.MouseWorld;
			if (mouseWorld != base.Center)
			{
				netUpdate = true;
				base.Center = mouseWorld;
			}
			if (Main.mouseRight && Main.mouseRightRelease)
			{
				Kill();
				player.mouseInterface = true;
				Main.blockMouse = true;
				player.SetItemTime(0);
				player.itemAnimation = 0;
				player.itemAnimationMax = 0;
				player.reuseDelay = 0;
				return;
			}
		}
		if (position != oldPosition)
		{
			if (base.Center.X - player.Center.X > 0f)
			{
				direction = 1;
			}
			else
			{
				direction = -1;
			}
		}
		velocity = Vector2.Zero;
		player.ChangeDir(direction);
		player.heldProj = whoAmI;
		ai[1] += 1f;
		int num5 = player.HeldItem.useAnimation * 4;
		if (ai[1] > (float)(num5 * 3))
		{
			ai[1] = num5;
		}
		int num6 = player.HeldItem.useAnimation + Math.Min(num5, (int)ai[1]);
		if (num6 < 2)
		{
			num6 = 2;
		}
		player.SetDummyItemTime(num6);
	}

	public Color GetCeleb2Color()
	{
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		return (Color)((int)ai[0] switch
		{
			0 => Color.Red, 
			1 => Color.DarkOrange, 
			2 => Color.Gold, 
			3 => Color.LimeGreen, 
			4 => Color.RoyalBlue, 
			5 => new Color(80, 20, 180), 
			6 => Color.HotPink, 
			_ => Color.Transparent, 
		});
	}

	private void AI_007_GrapplingHooks()
	{
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_0146: Unknown result type (might be due to invalid IL or missing references)
		//IL_022e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0283: Unknown result type (might be due to invalid IL or missing references)
		//IL_0288: Unknown result type (might be due to invalid IL or missing references)
		//IL_028e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0293: Unknown result type (might be due to invalid IL or missing references)
		//IL_031f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0324: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e16: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e20: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e27: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e68: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e47: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0650: Unknown result type (might be due to invalid IL or missing references)
		//IL_065a: Unknown result type (might be due to invalid IL or missing references)
		//IL_065f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0664: Unknown result type (might be due to invalid IL or missing references)
		//IL_0667: Unknown result type (might be due to invalid IL or missing references)
		//IL_0671: Unknown result type (might be due to invalid IL or missing references)
		//IL_0676: Unknown result type (might be due to invalid IL or missing references)
		//IL_067b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0682: Unknown result type (might be due to invalid IL or missing references)
		//IL_0687: Unknown result type (might be due to invalid IL or missing references)
		//IL_068c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0691: Unknown result type (might be due to invalid IL or missing references)
		//IL_0698: Unknown result type (might be due to invalid IL or missing references)
		//IL_069d: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0801: Unknown result type (might be due to invalid IL or missing references)
		//IL_0749: Unknown result type (might be due to invalid IL or missing references)
		//IL_074e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0753: Unknown result type (might be due to invalid IL or missing references)
		//IL_0755: Unknown result type (might be due to invalid IL or missing references)
		//IL_0861: Unknown result type (might be due to invalid IL or missing references)
		//IL_086e: Unknown result type (might be due to invalid IL or missing references)
		//IL_087a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0881: Unknown result type (might be due to invalid IL or missing references)
		//IL_078b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0795: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0893: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_0928: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c23: Unknown result type (might be due to invalid IL or missing references)
		if (Main.player[owner].dead || Main.player[owner].stoned || Main.player[owner].webbed || Main.player[owner].frozen)
		{
			Kill();
			return;
		}
		Vector2 mountedCenter = Main.player[owner].MountedCenter;
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
		float num = mountedCenter.X - vector.X;
		float num12 = mountedCenter.Y - vector.Y;
		float num13 = (float)Math.Sqrt(num * num + num12 * num12);
		rotation = (float)Math.Atan2(num12, num) - 1.57f;
		if (ai[0] == 2f && type == 865)
		{
			float num14 = (float)Math.PI / 2f;
			int num15 = (int)Math.Round(rotation / num14);
			rotation = (float)num15 * num14;
		}
		if (Main.myPlayer == owner)
		{
			int num16 = (int)(base.Center.X / 16f);
			int num17 = (int)(base.Center.Y / 16f);
			if (num16 > 0 && num17 > 0 && num16 < Main.maxTilesX && num17 < Main.maxTilesY && Main.tile[num16, num17].nactive() && TileID.Sets.CrackedBricks[Main.tile[num16, num17].type] && Main.rand.Next(16) == 0)
			{
				WorldGen.KillTile(num16, num17);
				if (Main.netMode != 0)
				{
					NetMessage.SendData(17, -1, -1, null, 20, num16, num17);
				}
			}
		}
		if (num13 > 2500f)
		{
			Kill();
		}
		if (type == 256)
		{
			rotation = (float)Math.Atan2(num12, num) + 3.9250002f;
		}
		if (type == 446)
		{
			Lighting.AddLight(mountedCenter, 0f, 0.4f, 0.3f);
			localAI[0] += 1f;
			if (localAI[0] >= 28f)
			{
				localAI[0] = 0f;
			}
			DelegateMethods.v3_1 = new Vector3(0f, 0.4f, 0.3f);
			Utils.PlotTileLine(base.Center, mountedCenter, 8f, DelegateMethods.CastLightOpen);
		}
		if (type == 652 && ++frameCounter >= 7)
		{
			frameCounter = 0;
			if (++frame >= Main.projFrames[type])
			{
				frame = 0;
			}
		}
		if (type >= 646 && type <= 649)
		{
			Vector3 vector2 = Vector3.Zero;
			switch (type)
			{
			case 646:
				((Vector3)(ref vector2))._002Ector(0.7f, 0.5f, 0.1f);
				break;
			case 647:
				((Vector3)(ref vector2))._002Ector(0f, 0.6f, 0.7f);
				break;
			case 648:
				((Vector3)(ref vector2))._002Ector(0.6f, 0.2f, 0.6f);
				break;
			case 649:
				((Vector3)(ref vector2))._002Ector(0.6f, 0.6f, 0.9f);
				break;
			}
			Lighting.AddLight(mountedCenter, vector2);
			Lighting.AddLight(base.Center, vector2);
			DelegateMethods.v3_1 = vector2;
			Utils.PlotTileLine(base.Center, mountedCenter, 8f, DelegateMethods.CastLightOpen);
		}
		if (ai[0] == 0f)
		{
			if ((num13 > 300f && type == 13) || (num13 > 400f && type == 32) || (num13 > 440f && type == 73) || (num13 > 440f && type == 74) || (num13 > 375f && type == 165) || (num13 > 350f && type == 256) || (num13 > 500f && type == 315) || (num13 > 550f && type == 322) || (num13 > 400f && type == 331) || (num13 > 550f && type == 332) || (num13 > 400f && type == 372) || (num13 > 300f && type == 396) || (num13 > 550f && type >= 646 && type <= 649) || (num13 > 600f && type == 652) || (num13 > 300f && type == 865) || (num13 > 500f && type == 935) || (num13 > 480f && type >= 486 && type <= 489) || (num13 > 500f && type == 446))
			{
				ai[0] = 1f;
			}
			else if (type >= 230 && type <= 235)
			{
				int num18 = 300 + (type - 230) * 30;
				if (num13 > (float)num18)
				{
					ai[0] = 1f;
				}
			}
			else if (type == 753)
			{
				int num19 = 420;
				if (num13 > (float)num19)
				{
					ai[0] = 1f;
				}
			}
			else if (ProjectileLoader.GrappleOutOfRange(num13, this))
			{
				ai[0] = 1f;
			}
			Vector2 vector3 = base.Center - new Vector2(5f);
			Vector2 val = base.Center + new Vector2(5f);
			Point point = (vector3 - new Vector2(16f)).ToTileCoordinates();
			Point val2 = (val + new Vector2(32f)).ToTileCoordinates();
			int num2 = point.X;
			int num3 = val2.X;
			int num4 = point.Y;
			int num5 = val2.Y;
			if (num2 < 0)
			{
				num2 = 0;
			}
			if (num3 > Main.maxTilesX)
			{
				num3 = Main.maxTilesX;
			}
			if (num4 < 0)
			{
				num4 = 0;
			}
			if (num5 > Main.maxTilesY)
			{
				num5 = Main.maxTilesY;
			}
			Player player = Main.player[owner];
			List<Point> list = new List<Point>();
			Point point2 = default(Point);
			for (int i = 0; i < player.grapCount; i++)
			{
				Projectile projectile = Main.projectile[player.grappling[i]];
				if (projectile.aiStyle != 7 || projectile.ai[0] != 2f)
				{
					continue;
				}
				Point pt = projectile.Center.ToTileCoordinates();
				Tile tileSafely = Framing.GetTileSafely(pt);
				if (tileSafely.type != 314 && !TileID.Sets.Platforms[tileSafely.type])
				{
					continue;
				}
				for (int j = -2; j <= 2; j++)
				{
					for (int k = -2; k <= 2; k++)
					{
						((Point)(ref point2))._002Ector(pt.X + j, pt.Y + k);
						Tile tileSafely2 = Framing.GetTileSafely(point2);
						if (tileSafely2.type == 314 || TileID.Sets.Platforms[tileSafely2.type])
						{
							list.Add(point2);
						}
					}
				}
			}
			Vector2 vector4 = default(Vector2);
			for (int l = num2; l < num3; l++)
			{
				for (int m = num4; m < num5; m++)
				{
					if (Main.tile[l, m] == null)
					{
						Main.tile[l, m] = default(Tile);
					}
					vector4.X = l * 16;
					vector4.Y = m * 16;
					if (!(vector3.X + 10f > vector4.X) || !(vector3.X < vector4.X + 16f) || !(vector3.Y + 10f > vector4.Y) || !(vector3.Y < vector4.Y + 16f))
					{
						continue;
					}
					Tile tile = Main.tile[l, m];
					if (!AI_007_GrapplingHooks_CanTileBeLatchedOnTo(l, m) || list.Contains(new Point(l, m)) || (type == 403 && tile.type != 314) || Main.player[owner].IsBlacklistedForGrappling(new Point(l, m)))
					{
						continue;
					}
					if (Main.player[owner].grapCount < 10)
					{
						Main.player[owner].grappling[Main.player[owner].grapCount] = whoAmI;
						Main.player[owner].grapCount++;
					}
					if (Main.myPlayer != owner)
					{
						continue;
					}
					int num6 = 0;
					int num7 = -1;
					int num8 = 100000;
					if (type == 73 || type == 74)
					{
						for (int n = 0; n < 1000; n++)
						{
							if (n != whoAmI && Main.projectile[n].active && Main.projectile[n].owner == owner && Main.projectile[n].aiStyle == 7 && Main.projectile[n].ai[0] == 2f)
							{
								Main.projectile[n].Kill();
							}
						}
					}
					else
					{
						int num9 = 3;
						if (type == 165)
						{
							num9 = 8;
						}
						if (type == 256)
						{
							num9 = 2;
						}
						if (type == 372)
						{
							num9 = 2;
						}
						if (type == 652)
						{
							num9 = 1;
						}
						if (type >= 646 && type <= 649)
						{
							num9 = 4;
						}
						ProjectileLoader.NumGrappleHooks(this, Main.player[owner], ref num9);
						for (int num10 = 0; num10 < 1000; num10++)
						{
							if (Main.projectile[num10].active && Main.projectile[num10].owner == owner && Main.projectile[num10].aiStyle == 7)
							{
								if (Main.projectile[num10].timeLeft < num8)
								{
									num7 = num10;
									num8 = Main.projectile[num10].timeLeft;
								}
								num6++;
							}
						}
						if (num6 > num9)
						{
							Main.projectile[num7].Kill();
						}
					}
					WorldGen.KillTile(l, m, fail: true, effectOnly: true);
					SoundEngine.PlaySound(0, l * 16, m * 16);
					velocity.X = 0f;
					velocity.Y = 0f;
					ai[0] = 2f;
					position.X = l * 16 + 8 - width / 2;
					position.Y = m * 16 + 8 - height / 2;
					Rectangle? tileVisualHitbox = WorldGen.GetTileVisualHitbox(l, m);
					if (tileVisualHitbox.HasValue)
					{
						Rectangle value = tileVisualHitbox.Value;
						base.Center = ((Rectangle)(ref value)).Center.ToVector2();
					}
					damage = 0;
					netUpdate = true;
					if (Main.myPlayer == owner)
					{
						if (type == 935)
						{
							Main.player[owner].DoQueenSlimeHookTeleport(base.Center);
						}
						NetMessage.SendData(13, -1, -1, null, owner);
					}
					break;
				}
				if (ai[0] == 2f)
				{
					break;
				}
			}
		}
		else if (ai[0] == 1f)
		{
			float num11 = 11f;
			if (type == 32)
			{
				num11 = 15f;
			}
			if (type == 73 || type == 74)
			{
				num11 = 17f;
			}
			if (type == 315)
			{
				num11 = 20f;
			}
			if (type == 322)
			{
				num11 = 22f;
			}
			if (type >= 230 && type <= 235)
			{
				num11 = 11f + (float)(type - 230) * 0.75f;
			}
			if (type == 753)
			{
				num11 = 15f;
			}
			if (type == 446)
			{
				num11 = 20f;
			}
			if (type >= 486 && type <= 489)
			{
				num11 = 18f;
			}
			if (type >= 646 && type <= 649)
			{
				num11 = 24f;
			}
			if (type == 652)
			{
				num11 = 24f;
			}
			if (type == 332)
			{
				num11 = 17f;
			}
			ProjectileLoader.GrappleRetreatSpeed(this, Main.player[owner], ref num11);
			if (num13 < 24f)
			{
				Kill();
			}
			num13 = num11 / num13;
			num *= num13;
			num12 *= num13;
			velocity.X = num;
			velocity.Y = num12;
		}
		else if (ai[0] == 2f)
		{
			Point point3 = base.Center.ToTileCoordinates();
			if (Main.tile[point3.X, point3.Y] == null)
			{
				Main.tile[point3.X, point3.Y] = default(Tile);
			}
			bool flag = true;
			if (AI_007_GrapplingHooks_CanTileBeLatchedOnTo(point3.X, point3.Y))
			{
				flag = false;
			}
			if (flag)
			{
				ai[0] = 1f;
			}
			else if (Main.player[owner].grapCount < 10)
			{
				Main.player[owner].grappling[Main.player[owner].grapCount] = whoAmI;
				Main.player[owner].grapCount++;
			}
		}
	}

	private bool AI_007_GrapplingHooks_CanTileBeLatchedOnTo(int x, int y)
	{
		Tile theTile = Main.tile[x, y];
		bool vanilla = Main.tileSolid[theTile.type] | (theTile.type == 314) | (type == 865 && TileID.Sets.IsATreeTrunk[theTile.type]) | (type == 865 && theTile.type == 323);
		vanilla &= theTile.nactive();
		return ProjectileLoader.GrappleCanLatchOnTo(this, Main.player[owner], x, y) ?? vanilla;
	}

	private void AI_147_Celeb2Rocket()
	{
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_083f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0844: Unknown result type (might be due to invalid IL or missing references)
		//IL_0849: Unknown result type (might be due to invalid IL or missing references)
		//IL_085f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0865: Unknown result type (might be due to invalid IL or missing references)
		//IL_0867: Unknown result type (might be due to invalid IL or missing references)
		//IL_0874: Unknown result type (might be due to invalid IL or missing references)
		//IL_0879: Unknown result type (might be due to invalid IL or missing references)
		//IL_087e: Unknown result type (might be due to invalid IL or missing references)
		//IL_088e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0894: Unknown result type (might be due to invalid IL or missing references)
		//IL_0896: Unknown result type (might be due to invalid IL or missing references)
		//IL_089b: Unknown result type (might be due to invalid IL or missing references)
		//IL_089f: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_08bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0784: Unknown result type (might be due to invalid IL or missing references)
		//IL_0790: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0204: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_020c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0211: Unknown result type (might be due to invalid IL or missing references)
		//IL_0220: Unknown result type (might be due to invalid IL or missing references)
		//IL_0225: Unknown result type (might be due to invalid IL or missing references)
		//IL_022a: Unknown result type (might be due to invalid IL or missing references)
		//IL_022f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0231: Unknown result type (might be due to invalid IL or missing references)
		//IL_0242: Unknown result type (might be due to invalid IL or missing references)
		//IL_0248: Unknown result type (might be due to invalid IL or missing references)
		//IL_024a: Unknown result type (might be due to invalid IL or missing references)
		//IL_024f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0252: Unknown result type (might be due to invalid IL or missing references)
		//IL_026a: Unknown result type (might be due to invalid IL or missing references)
		//IL_026f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0284: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0305: Unknown result type (might be due to invalid IL or missing references)
		//IL_030a: Unknown result type (might be due to invalid IL or missing references)
		//IL_030f: Unknown result type (might be due to invalid IL or missing references)
		//IL_031d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0328: Unknown result type (might be due to invalid IL or missing references)
		//IL_032d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0349: Unknown result type (might be due to invalid IL or missing references)
		//IL_034c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0359: Unknown result type (might be due to invalid IL or missing references)
		//IL_035f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0361: Unknown result type (might be due to invalid IL or missing references)
		//IL_036b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0370: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b4: Unknown result type (might be due to invalid IL or missing references)
		int num = 0;
		int num11 = 1;
		int num16 = 1;
		localAI[num] += 1f;
		alpha = 0;
		rotation = velocity.ToRotation() + (float)Math.PI / 2f;
		int num17 = (int)ai[0];
		Vector2 center = base.Center;
		Color celeb2Color = GetCeleb2Color();
		Lighting.AddLight(center, ((Color)(ref celeb2Color)).ToVector3() * 0.5f);
		switch (num17)
		{
		case 0:
			if (localAI[num] >= 20f)
			{
				velocity.Y += 0.12f;
				penetrate = (maxPenetrate = -1);
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
			if (localAI[num] > 20f && localAI[num] % 20f == 0f)
			{
				AI_147_Explosion();
			}
			break;
		case 1:
		{
			if (localAI[num] == 10f)
			{
				velocity.Y -= 10f;
			}
			if (localAI[num] >= 10f)
			{
				velocity.Y += 0.25f;
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
			if (!(localAI[num] >= 10f))
			{
				break;
			}
			scale += 0.015f;
			if (scale > 2.5f)
			{
				scale = 2.5f;
			}
			if (localAI[num] % 10f != 0f)
			{
				break;
			}
			_ = velocity;
			for (float num18 = 0f; num18 < 1f; num18 += 0.12f)
			{
				Vector2 spinningpoint = Vector2.UnitX * -8f;
				spinningpoint += -Vector2.UnitY.RotatedBy(num18 * ((float)Math.PI * 2f)) * new Vector2(2f, 4f);
				spinningpoint = spinningpoint.RotatedBy(rotation - (float)Math.PI / 2f);
				int num19 = Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 0, Color.Lerp(GetCeleb2Color(), Color.White, Main.rand.NextFloat() * 0.3f));
				Main.dust[num19].scale = 0.9f;
				Main.dust[num19].fadeIn = 1.1f;
				Main.dust[num19].noGravity = true;
				Main.dust[num19].position = base.Center + spinningpoint;
				Main.dust[num19].velocity = -velocity * 0.35f + spinningpoint * 0.35f;
				Dust obj = Main.dust[num19];
				obj.velocity *= scale;
				if (localAI[num] == 10f)
				{
					Main.dust[num19].velocity = spinningpoint.RotatedBy(velocity.ToRotation()) * 0.3f;
				}
			}
			break;
		}
		case 2:
			if (localAI[num] >= 60f)
			{
				velocity.Y += 0.15f;
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
			break;
		case 3:
		{
			float num20 = localAI[num11];
			if (num20 == 0f)
			{
				float num21 = ((Vector2)(ref velocity)).Length();
				localAI[num11] = num21;
				num20 = num21;
			}
			if (localAI[num] >= 25f && ai[num16] == 0f)
			{
				if (localAI[num] >= 20f)
				{
					velocity.Y += 0.15f;
				}
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
			}
			if (!(localAI[num] >= 20f))
			{
				break;
			}
			float num22 = position.X;
			float num2 = position.Y;
			float num3 = 800f;
			bool flag = false;
			int num4 = 0;
			if (ai[num16] == 0f)
			{
				for (int i = 0; i < 200; i++)
				{
					if (Main.npc[i].CanBeChasedBy(this) && (ai[num16] == 0f || ai[num16] == (float)(i + 1)))
					{
						float num5 = Main.npc[i].position.X + (float)(Main.npc[i].width / 2);
						float num6 = Main.npc[i].position.Y + (float)(Main.npc[i].height / 2);
						float num7 = Math.Abs(position.X + (float)(width / 2) - num5) + Math.Abs(position.Y + (float)(height / 2) - num6);
						if (num7 < num3 && Collision.CanHit(new Vector2(position.X + (float)(width / 2), position.Y + (float)(height / 2)), 1, 1, Main.npc[i].position, Main.npc[i].width, Main.npc[i].height))
						{
							num3 = num7;
							num22 = num5;
							num2 = num6;
							flag = true;
							num4 = i;
						}
					}
				}
				if (flag)
				{
					ai[1] = num4 + 1;
				}
				flag = false;
			}
			if (ai[num16] != 0f)
			{
				int num8 = (int)(ai[num16] - 1f);
				if (Main.npc[num8].active && Main.npc[num8].CanBeChasedBy(this, ignoreDontTakeDamage: true))
				{
					float num9 = Main.npc[num8].position.X + (float)(Main.npc[num8].width / 2);
					float num10 = Main.npc[num8].position.Y + (float)(Main.npc[num8].height / 2);
					if (Math.Abs(position.X + (float)(width / 2) - num9) + Math.Abs(position.Y + (float)(height / 2) - num10) < 1000f)
					{
						flag = true;
						num22 = Main.npc[num8].position.X + (float)(Main.npc[num8].width / 2);
						num2 = Main.npc[num8].position.Y + (float)(Main.npc[num8].height / 2);
					}
				}
			}
			if (!friendly)
			{
				flag = false;
			}
			if (flag)
			{
				float num23 = num20;
				Vector2 vector2 = default(Vector2);
				((Vector2)(ref vector2))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num12 = num22 - vector2.X;
				float num13 = num2 - vector2.Y;
				float num14 = (float)Math.Sqrt(num12 * num12 + num13 * num13);
				num14 = num23 / num14;
				num12 *= num14;
				num13 *= num14;
				int num15 = 8;
				velocity.X = (velocity.X * (float)(num15 - 1) + num12) / (float)num15;
				velocity.Y = (velocity.Y * (float)(num15 - 1) + num13) / (float)num15;
			}
			break;
		}
		case 4:
		{
			if (localAI[num] == 1f && ai[1] == 1f)
			{
				localAI[num] += 45f;
			}
			float x = velocity.SafeNormalize(Vector2.Zero).RotatedBy(localAI[num] * ((float)Math.PI / 45f)).X;
			Vector2 vector = velocity.SafeNormalize(Vector2.Zero).RotatedBy(1.5707963705062866);
			position += vector * x * 3f;
			scale = 2f;
			if (localAI[num] >= 10f)
			{
				velocity.Y += 0.04f;
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
			break;
		}
		case 5:
			if (localAI[num] >= 40f)
			{
				velocity.Y += 0.08f;
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
			break;
		case 6:
			if (localAI[num] >= 30f)
			{
				velocity.Y += 0.1f;
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
			break;
		}
	}

	private void AI_148_StarSpawner()
	{
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		if (Main.dayTime && !Main.remixWorld)
		{
			Kill();
			return;
		}
		ai[0] += (float)Main.desiredWorldEventsUpdateRate;
		if (localAI[0] == 0f && Main.netMode != 2)
		{
			localAI[0] = 1f;
			if ((double)Main.LocalPlayer.position.Y < Main.worldSurface * 16.0)
			{
				Star.StarFall(position.X);
			}
		}
		if (owner != Main.myPlayer || !(ai[0] >= 180f))
		{
			return;
		}
		if (ai[1] > -1f)
		{
			velocity.X *= 0.35f;
			if (base.Center.X < Main.player[(int)ai[1]].Center.X)
			{
				velocity.X = Math.Abs(velocity.X);
			}
			else
			{
				velocity.X = 0f - Math.Abs(velocity.X);
			}
		}
		NewProjectile(GetProjectileSource_FromThis(), position.X, position.Y, velocity.X, velocity.Y, 12, 1000, 10f, Main.myPlayer);
		Kill();
	}

	private void AI_147_Explosion()
	{
		//IL_0292: Unknown result type (might be due to invalid IL or missing references)
		//IL_0297: Unknown result type (might be due to invalid IL or missing references)
		//IL_029a: Unknown result type (might be due to invalid IL or missing references)
		//IL_029f: Unknown result type (might be due to invalid IL or missing references)
		//IL_04bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b69: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b71: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b76: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e09: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e10: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e15: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ff7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ffc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1133: Unknown result type (might be due to invalid IL or missing references)
		//IL_1138: Unknown result type (might be due to invalid IL or missing references)
		//IL_113b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1140: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0311: Unknown result type (might be due to invalid IL or missing references)
		//IL_032c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0331: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b93: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bba: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e46: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e74: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e94: Unknown result type (might be due to invalid IL or missing references)
		//IL_1023: Unknown result type (might be due to invalid IL or missing references)
		//IL_1048: Unknown result type (might be due to invalid IL or missing references)
		//IL_104a: Unknown result type (might be due to invalid IL or missing references)
		//IL_105f: Unknown result type (might be due to invalid IL or missing references)
		//IL_109d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1100: Unknown result type (might be due to invalid IL or missing references)
		//IL_110a: Unknown result type (might be due to invalid IL or missing references)
		//IL_110f: Unknown result type (might be due to invalid IL or missing references)
		//IL_115d: Unknown result type (might be due to invalid IL or missing references)
		//IL_117e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1184: Unknown result type (might be due to invalid IL or missing references)
		//IL_0363: Unknown result type (might be due to invalid IL or missing references)
		//IL_036d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0372: Unknown result type (might be due to invalid IL or missing references)
		//IL_034c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0356: Unknown result type (might be due to invalid IL or missing references)
		//IL_035b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0523: Unknown result type (might be due to invalid IL or missing references)
		//IL_0525: Unknown result type (might be due to invalid IL or missing references)
		//IL_0535: Unknown result type (might be due to invalid IL or missing references)
		//IL_053b: Unknown result type (might be due to invalid IL or missing references)
		//IL_053d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0542: Unknown result type (might be due to invalid IL or missing references)
		//IL_0547: Unknown result type (might be due to invalid IL or missing references)
		//IL_0549: Unknown result type (might be due to invalid IL or missing references)
		//IL_054b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0561: Unknown result type (might be due to invalid IL or missing references)
		//IL_0567: Unknown result type (might be due to invalid IL or missing references)
		//IL_0569: Unknown result type (might be due to invalid IL or missing references)
		//IL_056e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0573: Unknown result type (might be due to invalid IL or missing references)
		//IL_0575: Unknown result type (might be due to invalid IL or missing references)
		//IL_0577: Unknown result type (might be due to invalid IL or missing references)
		//IL_058d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0593: Unknown result type (might be due to invalid IL or missing references)
		//IL_0595: Unknown result type (might be due to invalid IL or missing references)
		//IL_059f: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ec6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ebe: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0141: Unknown result type (might be due to invalid IL or missing references)
		//IL_0147: Unknown result type (might be due to invalid IL or missing references)
		//IL_015d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0396: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_041a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0424: Unknown result type (might be due to invalid IL or missing references)
		//IL_0429: Unknown result type (might be due to invalid IL or missing references)
		//IL_0beb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c00: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c15: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c79: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ef9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f32: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f37: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f46: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f52: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f58: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f87: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_11bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_11bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_11da: Unknown result type (might be due to invalid IL or missing references)
		//IL_11df: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1212: Unknown result type (might be due to invalid IL or missing references)
		//IL_1219: Unknown result type (might be due to invalid IL or missing references)
		//IL_121e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1238: Unknown result type (might be due to invalid IL or missing references)
		//IL_1242: Unknown result type (might be due to invalid IL or missing references)
		//IL_1247: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0194: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0218: Unknown result type (might be due to invalid IL or missing references)
		//IL_0222: Unknown result type (might be due to invalid IL or missing references)
		//IL_0227: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0917: Unknown result type (might be due to invalid IL or missing references)
		//IL_0938: Unknown result type (might be due to invalid IL or missing references)
		//IL_093e: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_06cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cee: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d44: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d49: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d58: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d64: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d99: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_126e: Unknown result type (might be due to invalid IL or missing references)
		//IL_127e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1284: Unknown result type (might be due to invalid IL or missing references)
		//IL_1286: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_12eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1311: Unknown result type (might be due to invalid IL or missing references)
		//IL_131b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1320: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_05da: Unknown result type (might be due to invalid IL or missing references)
		//IL_05df: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0604: Unknown result type (might be due to invalid IL or missing references)
		//IL_0606: Unknown result type (might be due to invalid IL or missing references)
		//IL_060d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0618: Unknown result type (might be due to invalid IL or missing references)
		//IL_0636: Unknown result type (might be due to invalid IL or missing references)
		//IL_0638: Unknown result type (might be due to invalid IL or missing references)
		//IL_063a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0641: Unknown result type (might be due to invalid IL or missing references)
		//IL_0648: Unknown result type (might be due to invalid IL or missing references)
		//IL_064d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0973: Unknown result type (might be due to invalid IL or missing references)
		//IL_099a: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a15: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a31: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a40: Unknown result type (might be due to invalid IL or missing references)
		//IL_0707: Unknown result type (might be due to invalid IL or missing references)
		//IL_072e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0734: Unknown result type (might be due to invalid IL or missing references)
		//IL_0758: Unknown result type (might be due to invalid IL or missing references)
		//IL_0762: Unknown result type (might be due to invalid IL or missing references)
		//IL_0767: Unknown result type (might be due to invalid IL or missing references)
		//IL_0782: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07af: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_07cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1347: Unknown result type (might be due to invalid IL or missing references)
		//IL_1357: Unknown result type (might be due to invalid IL or missing references)
		//IL_135d: Unknown result type (might be due to invalid IL or missing references)
		//IL_135f: Unknown result type (might be due to invalid IL or missing references)
		//IL_137a: Unknown result type (might be due to invalid IL or missing references)
		//IL_137f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1381: Unknown result type (might be due to invalid IL or missing references)
		//IL_1383: Unknown result type (might be due to invalid IL or missing references)
		//IL_1385: Unknown result type (might be due to invalid IL or missing references)
		//IL_138f: Unknown result type (might be due to invalid IL or missing references)
		//IL_139a: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_13cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aae: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0abd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aca: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0afe: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0838: Unknown result type (might be due to invalid IL or missing references)
		//IL_083d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0842: Unknown result type (might be due to invalid IL or missing references)
		//IL_084c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0851: Unknown result type (might be due to invalid IL or missing references)
		//IL_0858: Unknown result type (might be due to invalid IL or missing references)
		//IL_085e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0883: Unknown result type (might be due to invalid IL or missing references)
		//IL_088d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0892: Unknown result type (might be due to invalid IL or missing references)
		//IL_141d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1456: Unknown result type (might be due to invalid IL or missing references)
		//IL_145b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1460: Unknown result type (might be due to invalid IL or missing references)
		//IL_146a: Unknown result type (might be due to invalid IL or missing references)
		//IL_146f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1476: Unknown result type (might be due to invalid IL or missing references)
		//IL_147c: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b0: Unknown result type (might be due to invalid IL or missing references)
		switch ((int)ai[0])
		{
		case 0:
		{
			for (int k = 0; k < 4; k++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
			}
			for (int l = 0; l < 20; l++)
			{
				int num30 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 130, 0f, 0f, 200, default(Color), 1.2f);
				Main.dust[num30].noGravity = true;
				Dust obj2 = Main.dust[num30];
				obj2.velocity *= 3f;
				num30 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 130, 0f, 0f, 200, default(Color), 0.5f);
				Dust obj3 = Main.dust[num30];
				obj3.velocity *= 1.2f;
				Main.dust[num30].noGravity = true;
			}
			for (int m = 0; m < 1; m++)
			{
				int num31 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Gore obj4 = Main.gore[num31];
				obj4.velocity *= 0.3f;
				Main.gore[num31].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num31].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
			break;
		}
		case 1:
		{
			Color celeb2Color2 = GetCeleb2Color();
			Vector2 center2 = base.Center;
			Main.rand.NextFloat();
			for (float num32 = 0f; num32 < 1f; num32 += 0.0125f)
			{
				Dust dust4 = Dust.NewDustPerfect(center2, 278, null, 200, Color.Lerp(celeb2Color2, Color.White, Main.rand.NextFloat() * 0.6f));
				dust4.scale = 1.1f;
				dust4.fadeIn = 1.3f;
				dust4.velocity *= Main.rand.NextFloat() * 2f + 2f;
				if (dust4.velocity.Y > 0f)
				{
					dust4.velocity *= 0.3f;
				}
				dust4.velocity *= 2f;
			}
			for (int n = 0; n < 3; n++)
			{
				int num33 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Gore obj5 = Main.gore[num33];
				obj5.velocity *= 0.3f;
				Main.gore[num33].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num33].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
			int fluff = 20;
			int distFluff = 100;
			int layerStart = 2;
			int layerEnd = 10;
			int layerJump = 2;
			CreateGroundExplosion(40f, fluff, distFluff, layerStart, layerEnd, layerJump);
			break;
		}
		case 2:
		{
			Vector2 center3 = base.Center;
			Color celeb2Color3 = GetCeleb2Color();
			float num34 = 0.05f;
			float num2 = 0.13f;
			bool flag = Main.rand.Next(4) == 0;
			if (flag)
			{
				num34 = 0.1f;
				num2 = 0.1f;
			}
			float num3 = Main.rand.NextFloatDirection();
			Vector2 spinningpoint = default(Vector2);
			for (float num4 = 0f; num4 < 5f; num4 += 1f)
			{
				((Vector2)(ref spinningpoint))._002Ector(0f, -100f);
				Vector2 vector4 = center3 + spinningpoint.RotatedBy(num3 + num4 * ((float)Math.PI * 2f / 5f));
				Vector2 vector5 = center3 + spinningpoint.RotatedBy(num3 + (num4 + 1f) * ((float)Math.PI * 2f / 5f));
				Vector2 vector6 = center3 + spinningpoint.RotatedBy(num3 + (num4 + 0.5f) * ((float)Math.PI * 2f / 5f)) * 0.4f;
				for (int num5 = 0; num5 < 2; num5++)
				{
					Vector2 value = vector4;
					Vector2 value2 = vector6;
					if (num5 == 1)
					{
						value = vector6;
						value2 = vector5;
					}
					for (float num6 = 0f; num6 < 1f; num6 += num2)
					{
						Vector2 vector7 = Vector2.Lerp(value, value2, num6);
						Vector2 vector8 = Vector2.Lerp(vector7, center3, 0.9f);
						Vector2 vector9 = (vector7 - vector8).SafeNormalize(Vector2.Zero);
						Dust dust10 = Dust.NewDustPerfect(vector8, 267, Vector2.Zero, 0, celeb2Color3, 0.5f);
						dust10.fadeIn = 1.2f;
						dust10.noGravity = true;
						dust10.velocity = vector9 * Vector2.Distance(vector7, vector8) * num34;
					}
				}
			}
			if (flag)
			{
				for (int num7 = 0; num7 < 4; num7++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (int num8 = 0; num8 < 60; num8++)
				{
					int num9 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 200, default(Color), 2.5f);
					Main.dust[num9].noGravity = true;
					Dust obj6 = Main.dust[num9];
					obj6.velocity *= 8f;
					num9 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 200, default(Color), 1.5f);
					Dust obj7 = Main.dust[num9];
					obj7.velocity *= 4.2f;
					Main.dust[num9].noGravity = true;
				}
				for (int num10 = 0; num10 < 1; num10++)
				{
					int num11 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Gore obj8 = Main.gore[num11];
					obj8.velocity *= 0.3f;
					Main.gore[num11].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num11].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
			}
			else
			{
				for (int num13 = 0; num13 < 4; num13++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (int num14 = 0; num14 < 40; num14++)
				{
					int num15 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 200, default(Color), 2.5f);
					Main.dust[num15].noGravity = true;
					Dust obj9 = Main.dust[num15];
					obj9.velocity *= 4f;
					num15 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 200, default(Color), 1.5f);
					Dust obj10 = Main.dust[num15];
					obj10.velocity *= 2.2f;
					Main.dust[num15].noGravity = true;
				}
				for (int num16 = 0; num16 < 1; num16++)
				{
					int num17 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Gore obj11 = Main.gore[num17];
					obj11.velocity *= 0.3f;
					Main.gore[num17].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num17].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
			}
			break;
		}
		case 3:
		{
			Color celeb2Color5 = GetCeleb2Color();
			Vector2 center4 = base.Center;
			for (int num20 = 0; num20 < 4; num20++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
			}
			float num21 = Main.rand.NextFloat() * ((float)Math.PI * 2f);
			for (int num22 = 0; num22 < 40; num22++)
			{
				Dust dust5 = Dust.NewDustPerfect(center4, 278, null, 100, Color.Lerp(celeb2Color5, Color.White, Main.rand.NextFloat() * 0.3f));
				dust5.scale = 1.3f * (((Vector2)(ref dust5.velocity)).Length() / 2f);
				dust5.fadeIn = 1.5f * (((Vector2)(ref dust5.velocity)).Length() / 2f);
				dust5.noGravity = true;
				dust5.velocity *= 6f;
				if (Math.Abs(dust5.velocity.X) > Math.Abs(dust5.velocity.Y))
				{
					dust5.velocity.Y *= 0.1f;
				}
				else
				{
					dust5.velocity.X *= 0.1f;
				}
				dust5.velocity = dust5.velocity.RotatedBy(num21);
			}
			for (int num24 = 0; num24 < 1; num24++)
			{
				int num25 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Gore obj14 = Main.gore[num25];
				obj14.velocity *= 0.3f;
				Main.gore[num25].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num25].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
			break;
		}
		case 4:
		{
			GetCeleb2Color();
			Vector2 center5 = base.Center;
			Main.rand.NextFloat();
			for (float num26 = 0f; num26 < 1f; num26 += 0.025f)
			{
				Dust dust6 = Dust.NewDustPerfect(center5, 132, null, 200);
				dust6.scale = 1.1f;
				dust6.fadeIn = 1.5f;
				dust6.velocity *= Main.rand.NextFloat() * 2f + 2f;
				if (dust6.velocity.Y > 0f)
				{
					dust6.velocity *= 0.3f;
				}
				dust6.velocity *= 2f;
			}
			for (int num27 = 0; num27 < 3; num27++)
			{
				int num28 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Gore obj15 = Main.gore[num28];
				obj15.velocity *= 0.3f;
				Main.gore[num28].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num28].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
			break;
		}
		case 5:
		{
			Color celeb2Color4 = GetCeleb2Color();
			_ = base.Center;
			for (int num18 = 0; num18 < 20; num18++)
			{
				int num19 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 278, 0f, 0f, 200, Color.Lerp(celeb2Color4, Color.White, Main.rand.NextFloat() * 0.4f), 2.5f);
				Main.dust[num19].fadeIn = 1.3f;
				Main.dust[num19].scale = 1.1f;
				Dust obj12 = Main.dust[num19];
				obj12.velocity *= 2f;
				num19 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, 0f, 0f, 200, celeb2Color4, 2.5f);
				Dust obj13 = Main.dust[num19];
				obj13.velocity *= 1.2f;
				Main.dust[num19].noGravity = true;
			}
			break;
		}
		case 6:
		{
			Color celeb2Color = GetCeleb2Color();
			Vector2 center = base.Center;
			for (int i = 0; i < 4; i++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
			}
			for (float num = 0f; num < 1f; num += 0.015f)
			{
				Vector2 vector = Vector2.UnitY.RotatedBy(num * ((float)Math.PI * 2f)) * (1f + Main.rand.NextFloatDirection() * 0.1f);
				Dust dust7 = Dust.NewDustPerfect(center + vector, 134, Vector2.Zero, 0, celeb2Color);
				dust7.scale = 1.4f;
				dust7.velocity = vector * 5f;
				dust7.velocity.Y += -3f;
				dust7.velocity *= 2f;
			}
			for (float num12 = 0f; num12 < 1f; num12 += 0.025f)
			{
				Vector2 vector2 = Vector2.UnitY.RotatedBy(num12 * ((float)Math.PI * 2f)) * (1f + Main.rand.NextFloatDirection() * 0.2f);
				Dust dust8 = Dust.NewDustPerfect(center + vector2, 267, Vector2.Zero, 0, celeb2Color);
				dust8.noGravity = true;
				dust8.scale = 0.4f;
				dust8.fadeIn = 1.2f;
				dust8.velocity = vector2 * 4f;
				dust8.velocity.Y += -3f;
				dust8.velocity *= 2f;
			}
			for (float num23 = 0f; num23 < 1f; num23 += 0.07f)
			{
				Vector2 vector3 = Vector2.UnitY.RotatedBy(num23 * ((float)Math.PI * 2f)) * (1f + Main.rand.NextFloatDirection() * 0.3f);
				Dust dust9 = Dust.NewDustPerfect(center + vector3, 267, Vector2.Zero, 0, celeb2Color);
				dust9.noGravity = true;
				dust9.scale = 0.4f;
				dust9.fadeIn = 1.3f;
				dust9.velocity = vector3 * 7f;
				dust9.velocity.Y += -3f;
				dust9.velocity *= 2f;
			}
			for (int j = 0; j < 1; j++)
			{
				int num29 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Gore obj = Main.gore[num29];
				obj.velocity *= 0.3f;
				Main.gore[num29].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num29].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
			break;
		}
		}
	}

	private void CreateGroundExplosion(float MAX_SPREAD, int fluff, int distFluff, int layerStart, int layerEnd, int layerJump)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_0248: Unknown result type (might be due to invalid IL or missing references)
		//IL_024d: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d8: Unknown result type (might be due to invalid IL or missing references)
		Point point = base.TopLeft.ToTileCoordinates();
		Point point2 = base.BottomRight.ToTileCoordinates();
		point.X -= fluff;
		point.Y -= fluff;
		point2.X += fluff;
		point2.Y += fluff;
		int num = point.X / 2 + point2.X / 2;
		int num2 = width / 2 + distFluff;
		for (int i = layerStart; i < layerEnd; i += layerJump)
		{
			int num3 = i;
			for (int j = point.X; j <= point2.X; j++)
			{
				for (int k = point.Y; k <= point2.Y; k++)
				{
					if (!WorldGen.InWorld(j, k, 10))
					{
						return;
					}
					if (Vector2.Distance(base.Center, new Vector2((float)(j * 16), (float)(k * 16))) > (float)num2)
					{
						continue;
					}
					Tile tileSafely = Framing.GetTileSafely(j, k);
					if (!tileSafely.active() || !Main.tileSolid[tileSafely.type] || Main.tileSolidTop[tileSafely.type] || Main.tileFrameImportant[tileSafely.type])
					{
						continue;
					}
					Tile tileSafely2 = Framing.GetTileSafely(j, k - 1);
					if (tileSafely2.active() && Main.tileSolid[tileSafely2.type] && !Main.tileSolidTop[tileSafely2.type])
					{
						continue;
					}
					int num4 = WorldGen.KillTile_GetTileDustAmount(fail: true, tileSafely, j, k);
					for (int l = 0; l < num4; l++)
					{
						Dust obj = Main.dust[WorldGen.KillTile_MakeTileDust(j, k, tileSafely)];
						obj.velocity.Y -= 3f + (float)num3 * 1.5f;
						obj.velocity.Y *= Main.rand.NextFloat();
						obj.scale += (float)num3 * 0.03f;
					}
					if (num3 >= 2)
					{
						for (int m = 0; m < num4 - 1; m++)
						{
							Dust obj2 = Main.dust[WorldGen.KillTile_MakeTileDust(j, k, tileSafely)];
							obj2.velocity.Y -= 1f + (float)num3;
							obj2.velocity.Y *= Main.rand.NextFloat();
						}
					}
					if (num4 > 0 && Main.rand.Next(3) != 0)
					{
						float num5 = (float)Math.Abs(num - j) / (MAX_SPREAD / 2f);
						Gore gore = Gore.NewGoreDirect(position, Vector2.Zero, 61 + Main.rand.Next(3), 1f - (float)num3 * 0.15f + num5 * 0.5f);
						gore.velocity.Y -= 0.1f + (float)num3 * 0.5f + num5 * (float)num3 * 1f;
						gore.velocity.Y *= Main.rand.NextFloat();
						gore.position = new Vector2((float)(j * 16 + 20), (float)(k * 16 + 20));
					}
				}
			}
		}
	}

	public void CheckUsability(Player player, ref bool currentlyUsable)
	{
		if (aiStyle == 160)
		{
			currentlyUsable = false;
		}
	}

	private void AI_163_Chum()
	{
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_0174: Unknown result type (might be due to invalid IL or missing references)
		//IL_0238: Unknown result type (might be due to invalid IL or missing references)
		//IL_024c: Unknown result type (might be due to invalid IL or missing references)
		//IL_026c: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03de: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0411: Unknown result type (might be due to invalid IL or missing references)
		//IL_0416: Unknown result type (might be due to invalid IL or missing references)
		//IL_0634: Unknown result type (might be due to invalid IL or missing references)
		//IL_0639: Unknown result type (might be due to invalid IL or missing references)
		//IL_0643: Unknown result type (might be due to invalid IL or missing references)
		//IL_0648: Unknown result type (might be due to invalid IL or missing references)
		//IL_064d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0466: Unknown result type (might be due to invalid IL or missing references)
		//IL_046b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0475: Unknown result type (might be due to invalid IL or missing references)
		//IL_047a: Unknown result type (might be due to invalid IL or missing references)
		//IL_047f: Unknown result type (might be due to invalid IL or missing references)
		//IL_04be: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0584: Unknown result type (might be due to invalid IL or missing references)
		//IL_0589: Unknown result type (might be due to invalid IL or missing references)
		//IL_0593: Unknown result type (might be due to invalid IL or missing references)
		//IL_0598: Unknown result type (might be due to invalid IL or missing references)
		//IL_059d: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_05fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_069a: Unknown result type (might be due to invalid IL or missing references)
		float num = 0.05f;
		float num2 = width / 2;
		for (int i = 0; i < 1000; i++)
		{
			if (i != whoAmI && Main.projectile[i].active && Main.projectile[i].type == type && Math.Abs(position.X - Main.projectile[i].position.X) + Math.Abs(position.Y - Main.projectile[i].position.Y) < num2)
			{
				if (position.X < Main.projectile[i].position.X)
				{
					velocity.X -= num;
				}
				else
				{
					velocity.X += num;
				}
				if (position.Y < Main.projectile[i].position.Y)
				{
					velocity.Y -= num;
				}
				else
				{
					velocity.Y += num;
				}
			}
		}
		if (wet)
		{
			velocity.X *= 0.9f;
			int num3 = (int)(base.Center.X + (float)((width / 2 + 8) * direction)) / 16;
			int num4 = (int)(base.Center.Y / 16f);
			_ = position.Y / 16f;
			int num5 = (int)((position.Y + (float)height) / 16f);
			if (Main.tile[num3, num4] == null)
			{
				Main.tile[num3, num4] = default(Tile);
			}
			if (Main.tile[num3, num5] == null)
			{
				Main.tile[num3, num5] = default(Tile);
			}
			if (velocity.Y > 0f)
			{
				velocity.Y *= 0.5f;
			}
			num3 = (int)(base.Center.X / 16f);
			num4 = (int)(base.Center.Y / 16f);
			float num6 = AI_061_FishingBobber_GetWaterLine(num3, num4);
			if (base.Center.Y > num6)
			{
				velocity.Y -= 0.1f;
				if (velocity.Y < -8f)
				{
					velocity.Y = -8f;
				}
				if (base.Center.Y + velocity.Y < num6)
				{
					velocity.Y = num6 - base.Center.Y;
				}
			}
			else
			{
				velocity.Y = num6 - base.Center.Y;
			}
		}
		else
		{
			if (velocity.Y == 0f)
			{
				velocity.X *= 0.95f;
			}
			velocity.X *= 0.98f;
			velocity.Y += 0.3f;
			if (velocity.Y > 15.9f)
			{
				velocity.Y = 15.9f;
			}
		}
		if (frameCounter == 0)
		{
			frameCounter = 1;
			frame = Main.rand.Next(4);
		}
		if (frameCounter < 10 && wet)
		{
			frameCounter++;
			for (float num7 = 0f; num7 < 1f; num7 += 0.5f)
			{
				Gore gore = Gore.NewGoreDirect(position + Vector2.UnitY * 6f, Vector2.Zero, 1201, scale * 0.7f);
				gore.velocity = Main.rand.NextVector2CircularEdge(10f, 10f);
				if (gore.velocity.Y > 0f)
				{
					gore.velocity.Y *= -1f;
				}
			}
			for (float num8 = 0f; num8 < 2f; num8 += 1f)
			{
				Gore gore2 = Gore.NewGoreDirect(position + Vector2.UnitY * 6f, Vector2.Zero, 1208, scale * 0.7f + Main.rand.NextFloat() * 0.15f);
				gore2.velocity = Main.rand.NextVector2CircularEdge(4f, 4f);
				if (gore2.velocity.Y > 0f)
				{
					gore2.velocity.Y *= -1f;
				}
			}
		}
		scale = Utils.GetLerpValue(0f, 60f, timeLeft, clamped: true);
		rotation += velocity.X * 0.14f;
		bool flag = !wet && ((Vector2)(ref velocity)).Length() < 0.8f;
		int maxValue = (wet ? 90 : 5);
		if (Main.rand.Next(maxValue) == 0 && !flag)
		{
			Gore gore3 = Gore.NewGoreDirect(position + Vector2.UnitY * 6f, Vector2.Zero, 1201, scale * 0.7f);
			if (wet)
			{
				gore3.velocity = Vector2.UnitX * Main.rand.NextFloatDirection() * 0.75f + Vector2.UnitY * Main.rand.NextFloat();
			}
			else if (gore3.velocity.Y < 0f)
			{
				gore3.velocity.Y = 0f - gore3.velocity.Y;
			}
		}
		Vector2 spot = base.Center + Vector2.UnitY * 16f;
		if (ai[0] >= 10f && timeLeft > 60)
		{
			timeLeft = 60;
			netUpdate = true;
		}
		if (ai[0] < 10f && timeLeft > 60)
		{
			Main.instance.ChumBucketProjectileHelper.AddChumLocation(spot);
		}
	}

	private void ReduceRemainingChumsInPool()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		int x = (int)base.Center.X / 16;
		int num = (int)base.Center.Y / 16;
		List<Tuple<int, Point>> list = new List<Tuple<int, Point>>();
		List<int> list2 = new List<int>();
		for (int i = 0; i < 1000; i++)
		{
			Projectile projectile = Main.projectile[i];
			if (projectile.active && projectile.owner == Main.myPlayer && projectile.timeLeft > 60 && projectile.type == 820)
			{
				list.Add(new Tuple<int, Point>(i, (projectile.Center + Vector2.UnitY * 16f).ToTileCoordinates()));
			}
		}
		if (list.Count == 0)
		{
			return;
		}
		GetFishingPondWidth(x, num, out var minX, out var maxX);
		Point point = default(Point);
		for (int j = minX; j <= maxX; j++)
		{
			point.X = j;
			int num2 = num;
			while (Main.tile[j, num2].liquid > 0 && !WorldGen.SolidTile(j, num2) && num2 < Main.maxTilesY - 10)
			{
				num2 = (point.Y = num2 + 1);
				for (int num3 = list.Count - 1; num3 >= 0; num3--)
				{
					if (list[num3].Item2 == point)
					{
						list2.Add(list[num3].Item1);
						list.RemoveAt(num3);
					}
				}
				if (list.Count == 0)
				{
					break;
				}
			}
			if (list.Count == 0)
			{
				break;
			}
		}
		for (int k = 0; k < list2.Count; k++)
		{
			Projectile obj = Main.projectile[list2[k]];
			obj.ai[0] += 1f;
			obj.netUpdate = true;
		}
	}

	private void AI_061_FishingBobber()
	{
		//IL_0326: Unknown result type (might be due to invalid IL or missing references)
		//IL_0345: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0447: Unknown result type (might be due to invalid IL or missing references)
		//IL_046b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02be: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_052f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0543: Unknown result type (might be due to invalid IL or missing references)
		//IL_0563: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cb: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[owner];
		bool flag = type >= 986 && type <= 993;
		timeLeft = 60;
		bool flag2 = false;
		if (player.inventory[player.selectedItem].fishingPole == 0 || player.CCed || player.noItems)
		{
			flag2 = true;
		}
		else if (player.inventory[player.selectedItem].shoot != type && !flag)
		{
			flag2 = true;
		}
		else if (player.pulley)
		{
			flag2 = true;
		}
		else if (player.dead)
		{
			flag2 = true;
		}
		if (flag2)
		{
			Kill();
			return;
		}
		if (ai[1] > 0f && localAI[1] != 0f)
		{
			localAI[1] = 0f;
			if (!lavaWet && !honeyWet)
			{
				AI_061_FishingBobber_DoASplash();
			}
		}
		if (ai[0] >= 1f)
		{
			if (ai[0] == 2f)
			{
				ai[0] += 1f;
				SoundEngine.PlaySound(in SoundID.Item17, position);
				if (!lavaWet && !honeyWet)
				{
					AI_061_FishingBobber_DoASplash();
				}
			}
			if (localAI[0] < 100f)
			{
				localAI[0] += 1f;
			}
			if (frameCounter == 0)
			{
				frameCounter = 1;
				ReduceRemainingChumsInPool();
			}
			tileCollide = false;
			int num = 10;
			Vector2 vector = default(Vector2);
			((Vector2)(ref vector))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num3 = player.position.X + (float)(player.width / 2) - vector.X;
			float num4 = player.position.Y + (float)(player.height / 2) - vector.Y;
			float num5 = (float)Math.Sqrt(num3 * num3 + num4 * num4);
			if (num5 > 3000f)
			{
				Kill();
			}
			num5 = 15.9f / num5;
			num3 *= num5;
			num4 *= num5;
			velocity.X = (velocity.X * (float)(num - 1) + num3) / (float)num;
			velocity.Y = (velocity.Y * (float)(num - 1) + num4) / (float)num;
			rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
			if (Main.myPlayer == owner)
			{
				Rectangle hitbox = base.Hitbox;
				if (((Rectangle)(ref hitbox)).Intersects(player.Hitbox))
				{
					Kill();
				}
			}
			return;
		}
		bool flag3 = false;
		Vector2 vector2 = default(Vector2);
		((Vector2)(ref vector2))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
		float num6 = player.position.X + (float)(player.width / 2) - vector2.X;
		float num7 = player.position.Y + (float)(player.height / 2) - vector2.Y;
		rotation = (float)Math.Atan2(num7, num6) + 1.57f;
		if ((float)Math.Sqrt(num6 * num6 + num7 * num7) > 900f)
		{
			ai[0] = 1f;
		}
		if (wet)
		{
			if (shimmerWet)
			{
				if (Main.myPlayer == owner)
				{
					Main.player[owner].AddBuff(353, 60);
				}
				if (localAI[2] == 0f)
				{
					localAI[2] = 1f;
					SoundEngine.PlaySound(19, (int)Main.player[owner].position.X, (int)Main.player[owner].position.Y, 2);
				}
			}
			rotation = 0f;
			velocity.X *= 0.9f;
			int num8 = (int)(base.Center.X + (float)((width / 2 + 8) * direction)) / 16;
			int num9 = (int)(base.Center.Y / 16f);
			_ = position.Y / 16f;
			int num10 = (int)((position.Y + (float)height) / 16f);
			if (Main.tile[num8, num9] == null)
			{
				Main.tile[num8, num9] = default(Tile);
			}
			if (Main.tile[num8, num10] == null)
			{
				Main.tile[num8, num10] = default(Tile);
			}
			if (velocity.Y > 0f)
			{
				velocity.Y *= 0.5f;
			}
			num8 = (int)(base.Center.X / 16f);
			num9 = (int)(base.Center.Y / 16f);
			float num2 = AI_061_FishingBobber_GetWaterLine(num8, num9);
			if (base.Center.Y > num2)
			{
				velocity.Y -= 0.1f;
				if (velocity.Y < -8f)
				{
					velocity.Y = -8f;
				}
				if (base.Center.Y + velocity.Y < num2)
				{
					velocity.Y = num2 - base.Center.Y;
				}
			}
			else
			{
				velocity.Y = num2 - base.Center.Y;
			}
			if ((double)velocity.Y >= -0.01 && (double)velocity.Y <= 0.01)
			{
				flag3 = true;
			}
		}
		else
		{
			if (velocity.Y == 0f)
			{
				velocity.X *= 0.95f;
			}
			velocity.X *= 0.98f;
			velocity.Y += 0.2f;
			if (velocity.Y > 15.9f)
			{
				velocity.Y = 15.9f;
			}
		}
		if (Main.myPlayer == owner && player.GetFishingConditions().BaitItemType == 2673)
		{
			player.displayedFishingInfo = Language.GetTextValue("GameUI.FishingWarning");
		}
		if (ai[1] != 0f)
		{
			flag3 = true;
		}
		if (!flag3)
		{
			return;
		}
		if (ai[1] == 0f && Main.myPlayer == owner)
		{
			int finalFishingLevel = player.GetFishingConditions().FinalFishingLevel;
			if (Main.rand.Next(300) < finalFishingLevel)
			{
				localAI[1] += Main.rand.Next(1, 3);
			}
			localAI[1] += finalFishingLevel / 30;
			localAI[1] += Main.rand.Next(1, 3);
			if (Main.rand.Next(60) == 0)
			{
				localAI[1] += 60f;
			}
			if (localAI[1] > 660f)
			{
				localAI[1] = 0f;
				FishingCheck();
			}
		}
		else if (ai[1] < 0f)
		{
			if (velocity.Y == 0f || (honeyWet && Math.Abs(velocity.Y) <= 0.01f))
			{
				velocity.Y = (float)Main.rand.Next(100, 500) * 0.015f;
				velocity.X = (float)Main.rand.Next(-100, 101) * 0.015f;
				wet = false;
				lavaWet = false;
				honeyWet = false;
			}
			ai[1] += Main.rand.Next(1, 5);
			if (ai[1] >= 0f)
			{
				ai[1] = 0f;
				localAI[1] = 0f;
				netUpdate = true;
			}
		}
	}

	private float AI_061_FishingBobber_GetWaterLine(int X, int Y)
	{
		float result = position.Y + (float)height;
		if (Main.tile[X, Y - 1] == null)
		{
			Main.tile[X, Y - 1] = default(Tile);
		}
		if (Main.tile[X, Y] == null)
		{
			Main.tile[X, Y] = default(Tile);
		}
		if (Main.tile[X, Y + 1] == null)
		{
			Main.tile[X, Y + 1] = default(Tile);
		}
		if (Main.tile[X, Y - 1].liquid > 0)
		{
			result = Y * 16;
			result -= (float)(Main.tile[X, Y - 1].liquid / 16);
		}
		else if (Main.tile[X, Y].liquid > 0)
		{
			result = (Y + 1) * 16;
			result -= (float)(Main.tile[X, Y].liquid / 16);
		}
		else if (Main.tile[X, Y + 1].liquid > 0)
		{
			result = (Y + 2) * 16;
			result -= (float)(Main.tile[X, Y + 1].liquid / 16);
		}
		return result;
	}

	private void AI_061_FishingBobber_DoASplash()
	{
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		for (int i = 0; i < 100; i++)
		{
			int num = Dust.NewDust(new Vector2(position.X - 6f, position.Y - 10f), width + 12, 24, Dust.dustWater());
			Main.dust[num].velocity.Y -= 4f;
			Main.dust[num].velocity.X *= 2.5f;
			Main.dust[num].scale = 0.8f;
			Main.dust[num].alpha = 100;
			Main.dust[num].noGravity = true;
		}
		SoundEngine.PlaySound(19, (int)position.X, (int)position.Y, 0);
	}

	private void AI_061_FishingBobber_GiveItemToPlayer(Player thePlayer, int itemType)
	{
		//IL_01f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0210: Unknown result type (might be due to invalid IL or missing references)
		Item item = new Item();
		item.SetDefaults(itemType);
		if (itemType == 3196)
		{
			int finalFishingLevel = thePlayer.GetFishingConditions().FinalFishingLevel;
			int minValue = (finalFishingLevel / 20 + 3) / 2;
			int num = (finalFishingLevel / 10 + 6) / 2;
			if (Main.rand.Next(50) < finalFishingLevel)
			{
				num++;
			}
			if (Main.rand.Next(100) < finalFishingLevel)
			{
				num++;
			}
			if (Main.rand.Next(150) < finalFishingLevel)
			{
				num++;
			}
			if (Main.rand.Next(200) < finalFishingLevel)
			{
				num++;
			}
			int stack = Main.rand.Next(minValue, num + 1);
			item.stack = stack;
		}
		if (itemType == 3197)
		{
			int finalFishingLevel2 = thePlayer.GetFishingConditions().FinalFishingLevel;
			int minValue2 = (finalFishingLevel2 / 4 + 15) / 2;
			int num2 = (finalFishingLevel2 / 2 + 40) / 2;
			if (Main.rand.Next(50) < finalFishingLevel2)
			{
				num2 += 6;
			}
			if (Main.rand.Next(100) < finalFishingLevel2)
			{
				num2 += 6;
			}
			if (Main.rand.Next(150) < finalFishingLevel2)
			{
				num2 += 6;
			}
			if (Main.rand.Next(200) < finalFishingLevel2)
			{
				num2 += 6;
			}
			int stack2 = Main.rand.Next(minValue2, num2 + 1);
			item.stack = stack2;
		}
		PlayerLoader.ModifyCaughtFish(thePlayer, item);
		ItemLoader.CaughtFishStack(item);
		item.newAndShiny = true;
		Item item2 = thePlayer.GetItem(owner, item, default(GetItemSettings));
		if (item2.stack > 0)
		{
			int number = Item.NewItem(new EntitySource_OverfullInventory(thePlayer), (int)position.X, (int)position.Y, width, height, itemType, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number, 1f);
			}
		}
		else
		{
			item.position.X = base.Center.X - (float)(item.width / 2);
			item.position.Y = base.Center.Y - (float)(item.height / 2);
			item.active = true;
			PopupText.NewText(PopupTextContext.RegularItemPickup, item, 0);
		}
	}

	private void AI_146_DD2Victory()
	{
	}

	private void BetsySharpnel(int npcIndex)
	{
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		if (ai[1] != -1f && owner == Main.myPlayer)
		{
			Vector2 spinningpoint = default(Vector2);
			((Vector2)(ref spinningpoint))._002Ector(0f, 6f);
			Vector2 center = base.Center;
			float num = (float)Math.PI / 4f;
			int num2 = 5;
			float num3 = (0f - num * 2f) / (float)(num2 - 1);
			for (int i = 0; i < num2; i++)
			{
				int num4 = NewProjectile(GetProjectileSource_FromThis(), center, spinningpoint.RotatedBy(num + num3 * (float)i), 710, damage, knockBack, owner, 0f, -1f);
				Projectile p = Main.projectile[num4];
				CopyLocalNPCImmunityTimes(p);
			}
		}
	}

	private void CopyLocalNPCImmunityTimes(Projectile p)
	{
		for (int i = 0; i < localNPCImmunity.Length; i++)
		{
			p.localNPCImmunity[i] = localNPCImmunity[i];
		}
	}

	private void AI_001()
	{
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0308: Unknown result type (might be due to invalid IL or missing references)
		//IL_030e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0318: Unknown result type (might be due to invalid IL or missing references)
		//IL_031d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0322: Unknown result type (might be due to invalid IL or missing references)
		//IL_034c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0366: Unknown result type (might be due to invalid IL or missing references)
		//IL_0386: Unknown result type (might be due to invalid IL or missing references)
		//IL_038c: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03de: Unknown result type (might be due to invalid IL or missing references)
		//IL_0213: Unknown result type (might be due to invalid IL or missing references)
		//IL_0214: Unknown result type (might be due to invalid IL or missing references)
		//IL_0228: Unknown result type (might be due to invalid IL or missing references)
		//IL_0241: Unknown result type (might be due to invalid IL or missing references)
		//IL_0247: Unknown result type (might be due to invalid IL or missing references)
		//IL_0256: Unknown result type (might be due to invalid IL or missing references)
		//IL_025b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0262: Unknown result type (might be due to invalid IL or missing references)
		//IL_026c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0271: Unknown result type (might be due to invalid IL or missing references)
		//IL_0277: Unknown result type (might be due to invalid IL or missing references)
		//IL_0279: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_0129: Unknown result type (might be due to invalid IL or missing references)
		//IL_058e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0194: Unknown result type (might be due to invalid IL or missing references)
		//IL_017b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d32: Unknown result type (might be due to invalid IL or missing references)
		//IL_052b: Unknown result type (might be due to invalid IL or missing references)
		//IL_053a: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0850: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fce: Unknown result type (might be due to invalid IL or missing references)
		//IL_2001: Unknown result type (might be due to invalid IL or missing references)
		//IL_200c: Unknown result type (might be due to invalid IL or missing references)
		//IL_201b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ff4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0706: Unknown result type (might be due to invalid IL or missing references)
		//IL_071a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0720: Unknown result type (might be due to invalid IL or missing references)
		//IL_0725: Unknown result type (might be due to invalid IL or missing references)
		//IL_072a: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_22cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_22de: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ebe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ec4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ec9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ece: Unknown result type (might be due to invalid IL or missing references)
		//IL_0741: Unknown result type (might be due to invalid IL or missing references)
		//IL_074a: Unknown result type (might be due to invalid IL or missing references)
		//IL_074c: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_05fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_05fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0600: Unknown result type (might be due to invalid IL or missing references)
		//IL_1745: Unknown result type (might be due to invalid IL or missing references)
		//IL_1758: Unknown result type (might be due to invalid IL or missing references)
		//IL_175e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1763: Unknown result type (might be due to invalid IL or missing references)
		//IL_1768: Unknown result type (might be due to invalid IL or missing references)
		//IL_187f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1884: Unknown result type (might be due to invalid IL or missing references)
		//IL_188d: Unknown result type (might be due to invalid IL or missing references)
		//IL_220f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ee5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eee: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ef0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0da1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0da4: Unknown result type (might be due to invalid IL or missing references)
		//IL_077d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0787: Unknown result type (might be due to invalid IL or missing references)
		//IL_078d: Unknown result type (might be due to invalid IL or missing references)
		//IL_078f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0794: Unknown result type (might be due to invalid IL or missing references)
		//IL_0618: Unknown result type (might be due to invalid IL or missing references)
		//IL_061f: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_08bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_08dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_08fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0902: Unknown result type (might be due to invalid IL or missing references)
		//IL_0907: Unknown result type (might be due to invalid IL or missing references)
		//IL_0909: Unknown result type (might be due to invalid IL or missing references)
		//IL_091a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0920: Unknown result type (might be due to invalid IL or missing references)
		//IL_0922: Unknown result type (might be due to invalid IL or missing references)
		//IL_0927: Unknown result type (might be due to invalid IL or missing references)
		//IL_092a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0943: Unknown result type (might be due to invalid IL or missing references)
		//IL_0949: Unknown result type (might be due to invalid IL or missing references)
		//IL_0980: Unknown result type (might be due to invalid IL or missing references)
		//IL_0985: Unknown result type (might be due to invalid IL or missing references)
		//IL_0987: Unknown result type (might be due to invalid IL or missing references)
		//IL_098c: Unknown result type (might be due to invalid IL or missing references)
		//IL_099a: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_09bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_09cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_09de: Unknown result type (might be due to invalid IL or missing references)
		//IL_09e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_177f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1781: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f21: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f31: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f33: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f38: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1049: Unknown result type (might be due to invalid IL or missing references)
		//IL_1056: Unknown result type (might be due to invalid IL or missing references)
		//IL_1060: Unknown result type (might be due to invalid IL or missing references)
		//IL_1065: Unknown result type (might be due to invalid IL or missing references)
		//IL_1067: Unknown result type (might be due to invalid IL or missing references)
		//IL_1069: Unknown result type (might be due to invalid IL or missing references)
		//IL_1080: Unknown result type (might be due to invalid IL or missing references)
		//IL_1086: Unknown result type (might be due to invalid IL or missing references)
		//IL_1088: Unknown result type (might be due to invalid IL or missing references)
		//IL_108d: Unknown result type (might be due to invalid IL or missing references)
		//IL_109c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_10be: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_1125: Unknown result type (might be due to invalid IL or missing references)
		//IL_112a: Unknown result type (might be due to invalid IL or missing references)
		//IL_112c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1131: Unknown result type (might be due to invalid IL or missing references)
		//IL_113f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1149: Unknown result type (might be due to invalid IL or missing references)
		//IL_114e: Unknown result type (might be due to invalid IL or missing references)
		//IL_115c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1162: Unknown result type (might be due to invalid IL or missing references)
		//IL_116c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1171: Unknown result type (might be due to invalid IL or missing references)
		//IL_117e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1183: Unknown result type (might be due to invalid IL or missing references)
		//IL_1188: Unknown result type (might be due to invalid IL or missing references)
		//IL_1192: Unknown result type (might be due to invalid IL or missing references)
		//IL_1197: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a32: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a45: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a47: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a51: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a54: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a75: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a92: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0abd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0acc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad1: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_17ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_17bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_17c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_17c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1794: Unknown result type (might be due to invalid IL or missing references)
		//IL_1798: Unknown result type (might be due to invalid IL or missing references)
		//IL_179d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1645: Unknown result type (might be due to invalid IL or missing references)
		//IL_164a: Unknown result type (might be due to invalid IL or missing references)
		//IL_164c: Unknown result type (might be due to invalid IL or missing references)
		//IL_164f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2513: Unknown result type (might be due to invalid IL or missing references)
		//IL_2522: Unknown result type (might be due to invalid IL or missing references)
		//IL_2717: Unknown result type (might be due to invalid IL or missing references)
		//IL_2726: Unknown result type (might be due to invalid IL or missing references)
		//IL_233c: Unknown result type (might be due to invalid IL or missing references)
		//IL_234b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2081: Unknown result type (might be due to invalid IL or missing references)
		//IL_20aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_20b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_20cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_20db: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_210e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2118: Unknown result type (might be due to invalid IL or missing references)
		//IL_211d: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_121a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1220: Unknown result type (might be due to invalid IL or missing references)
		//IL_1237: Unknown result type (might be due to invalid IL or missing references)
		//IL_1241: Unknown result type (might be due to invalid IL or missing references)
		//IL_1246: Unknown result type (might be due to invalid IL or missing references)
		//IL_1254: Unknown result type (might be due to invalid IL or missing references)
		//IL_1259: Unknown result type (might be due to invalid IL or missing references)
		//IL_1262: Unknown result type (might be due to invalid IL or missing references)
		//IL_126c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1271: Unknown result type (might be due to invalid IL or missing references)
		//IL_1276: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b23: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b30: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b36: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b38: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b42: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b45: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b69: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b86: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b90: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b95: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ba3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ba8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2552: Unknown result type (might be due to invalid IL or missing references)
		//IL_2561: Unknown result type (might be due to invalid IL or missing references)
		//IL_2759: Unknown result type (might be due to invalid IL or missing references)
		//IL_2768: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_12db: Unknown result type (might be due to invalid IL or missing references)
		//IL_12dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_130e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1314: Unknown result type (might be due to invalid IL or missing references)
		//IL_132b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1335: Unknown result type (might be due to invalid IL or missing references)
		//IL_133a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1348: Unknown result type (might be due to invalid IL or missing references)
		//IL_134d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1356: Unknown result type (might be due to invalid IL or missing references)
		//IL_1360: Unknown result type (might be due to invalid IL or missing references)
		//IL_1365: Unknown result type (might be due to invalid IL or missing references)
		//IL_136a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c23: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c30: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c36: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c38: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c42: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c45: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c64: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c81: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c90: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cac: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cba: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cce: Unknown result type (might be due to invalid IL or missing references)
		//IL_1667: Unknown result type (might be due to invalid IL or missing references)
		//IL_166e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1916: Unknown result type (might be due to invalid IL or missing references)
		//IL_191c: Unknown result type (might be due to invalid IL or missing references)
		//IL_191e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1923: Unknown result type (might be due to invalid IL or missing references)
		//IL_1928: Unknown result type (might be due to invalid IL or missing references)
		//IL_192a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1935: Unknown result type (might be due to invalid IL or missing references)
		//IL_193f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1944: Unknown result type (might be due to invalid IL or missing references)
		//IL_1949: Unknown result type (might be due to invalid IL or missing references)
		//IL_194c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1966: Unknown result type (might be due to invalid IL or missing references)
		//IL_196c: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_19b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_19bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_19c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_19cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_19d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_19df: Unknown result type (might be due to invalid IL or missing references)
		//IL_19e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_19fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a00: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a05: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a15: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a24: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a29: Unknown result type (might be due to invalid IL or missing references)
		//IL_2591: Unknown result type (might be due to invalid IL or missing references)
		//IL_28cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_28db: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_13db: Unknown result type (might be due to invalid IL or missing references)
		//IL_13dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_140a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1410: Unknown result type (might be due to invalid IL or missing references)
		//IL_1427: Unknown result type (might be due to invalid IL or missing references)
		//IL_1431: Unknown result type (might be due to invalid IL or missing references)
		//IL_1436: Unknown result type (might be due to invalid IL or missing references)
		//IL_1452: Unknown result type (might be due to invalid IL or missing references)
		//IL_1457: Unknown result type (might be due to invalid IL or missing references)
		//IL_1460: Unknown result type (might be due to invalid IL or missing references)
		//IL_146a: Unknown result type (might be due to invalid IL or missing references)
		//IL_146f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1474: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a55: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a63: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a69: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a76: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a83: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a88: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aac: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ad3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ad8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1af4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1afe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b03: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b09: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b13: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b18: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_290e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2928: Unknown result type (might be due to invalid IL or missing references)
		//IL_292e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2961: Unknown result type (might be due to invalid IL or missing references)
		//IL_2966: Unknown result type (might be due to invalid IL or missing references)
		//IL_2974: Unknown result type (might be due to invalid IL or missing references)
		//IL_2979: Unknown result type (might be due to invalid IL or missing references)
		//IL_2983: Unknown result type (might be due to invalid IL or missing references)
		//IL_2988: Unknown result type (might be due to invalid IL or missing references)
		//IL_298d: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_27fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2802: Unknown result type (might be due to invalid IL or missing references)
		//IL_2809: Unknown result type (might be due to invalid IL or missing references)
		//IL_280e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2827: Unknown result type (might be due to invalid IL or missing references)
		//IL_282d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2843: Unknown result type (might be due to invalid IL or missing references)
		//IL_2848: Unknown result type (might be due to invalid IL or missing references)
		//IL_284f: Unknown result type (might be due to invalid IL or missing references)
		//IL_285a: Unknown result type (might be due to invalid IL or missing references)
		//IL_285f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2864: Unknown result type (might be due to invalid IL or missing references)
		//IL_286a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2877: Unknown result type (might be due to invalid IL or missing references)
		//IL_287d: Unknown result type (might be due to invalid IL or missing references)
		//IL_287f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2889: Unknown result type (might be due to invalid IL or missing references)
		//IL_288e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2894: Unknown result type (might be due to invalid IL or missing references)
		//IL_2899: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_23bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_23d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_23d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_23db: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_23fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_2400: Unknown result type (might be due to invalid IL or missing references)
		//IL_2411: Unknown result type (might be due to invalid IL or missing references)
		//IL_2417: Unknown result type (might be due to invalid IL or missing references)
		//IL_2419: Unknown result type (might be due to invalid IL or missing references)
		//IL_241e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2421: Unknown result type (might be due to invalid IL or missing references)
		//IL_243a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2440: Unknown result type (might be due to invalid IL or missing references)
		//IL_2477: Unknown result type (might be due to invalid IL or missing references)
		//IL_247c: Unknown result type (might be due to invalid IL or missing references)
		//IL_247e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2483: Unknown result type (might be due to invalid IL or missing references)
		//IL_2491: Unknown result type (might be due to invalid IL or missing references)
		//IL_249b: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b69: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b82: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b84: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b89: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b91: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bef: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c07: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c11: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d82: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d95: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d97: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1da1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1da4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1de2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dec: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e04: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e17: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e21: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c69: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c82: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c84: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c89: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c91: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cce: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d07: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d11: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d16: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a13: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e66: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e74: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e87: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e94: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e99: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ebd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ec3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eda: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ee4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ee9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ef7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1efc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f05: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f14: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f19: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c30: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2625: Unknown result type (might be due to invalid IL or missing references)
		//IL_262b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2635: Unknown result type (might be due to invalid IL or missing references)
		//IL_263a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2654: Unknown result type (might be due to invalid IL or missing references)
		//IL_265a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2671: Unknown result type (might be due to invalid IL or missing references)
		//IL_267b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2680: Unknown result type (might be due to invalid IL or missing references)
		//IL_268e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2694: Unknown result type (might be due to invalid IL or missing references)
		//IL_269e: Unknown result type (might be due to invalid IL or missing references)
		//IL_26a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_26a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a75: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a99: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aa9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aae: Unknown result type (might be due to invalid IL or missing references)
		//IL_2adc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ae6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2af9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aff: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b09: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b13: Unknown result type (might be due to invalid IL or missing references)
		//IL_3035: Unknown result type (might be due to invalid IL or missing references)
		//IL_3059: Unknown result type (might be due to invalid IL or missing references)
		//IL_305f: Unknown result type (might be due to invalid IL or missing references)
		//IL_30b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_30c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_30c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_30d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_30da: Unknown result type (might be due to invalid IL or missing references)
		//IL_30e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_30e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_30ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e69: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d29: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d52: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d63: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d72: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d80: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d94: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dda: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ddf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b41: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b70: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b87: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ef2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f01: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f06: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f10: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f23: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f25: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f43: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f49: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f75: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f84: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f90: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f92: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f97: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fba: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2baf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2be6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2beb: Unknown result type (might be due to invalid IL or missing references)
		//IL_317f: Unknown result type (might be due to invalid IL or missing references)
		//IL_319f: Unknown result type (might be due to invalid IL or missing references)
		//IL_31a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_31dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_31e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_31eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_320c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3212: Unknown result type (might be due to invalid IL or missing references)
		//IL_321c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3221: Unknown result type (might be due to invalid IL or missing references)
		//IL_3242: Unknown result type (might be due to invalid IL or missing references)
		//IL_3248: Unknown result type (might be due to invalid IL or missing references)
		//IL_327b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3285: Unknown result type (might be due to invalid IL or missing references)
		//IL_328a: Unknown result type (might be due to invalid IL or missing references)
		//IL_32d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_368e: Unknown result type (might be due to invalid IL or missing references)
		//IL_369d: Unknown result type (might be due to invalid IL or missing references)
		//IL_391e: Unknown result type (might be due to invalid IL or missing references)
		//IL_392d: Unknown result type (might be due to invalid IL or missing references)
		//IL_355a: Unknown result type (might be due to invalid IL or missing references)
		//IL_353e: Unknown result type (might be due to invalid IL or missing references)
		//IL_33d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_358c: Unknown result type (might be due to invalid IL or missing references)
		//IL_35ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_35b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_35e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_35f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_35f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_38dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_36de: Unknown result type (might be due to invalid IL or missing references)
		//IL_36ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_3701: Unknown result type (might be due to invalid IL or missing references)
		//IL_3707: Unknown result type (might be due to invalid IL or missing references)
		//IL_3711: Unknown result type (might be due to invalid IL or missing references)
		//IL_3716: Unknown result type (might be due to invalid IL or missing references)
		//IL_3732: Unknown result type (might be due to invalid IL or missing references)
		//IL_3738: Unknown result type (might be due to invalid IL or missing references)
		//IL_377c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3786: Unknown result type (might be due to invalid IL or missing references)
		//IL_378b: Unknown result type (might be due to invalid IL or missing references)
		//IL_37b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_37bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_37c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_37ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_37cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_33e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_33ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4989: Unknown result type (might be due to invalid IL or missing references)
		//IL_49aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_49b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_49e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a02: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a08: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b45: Unknown result type (might be due to invalid IL or missing references)
		//IL_396e: Unknown result type (might be due to invalid IL or missing references)
		//IL_397d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3991: Unknown result type (might be due to invalid IL or missing references)
		//IL_3997: Unknown result type (might be due to invalid IL or missing references)
		//IL_39a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_39a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_39c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_39c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a16: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a45: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a55: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_37e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_37f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3808: Unknown result type (might be due to invalid IL or missing references)
		//IL_380e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3818: Unknown result type (might be due to invalid IL or missing references)
		//IL_381d: Unknown result type (might be due to invalid IL or missing references)
		//IL_383a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3840: Unknown result type (might be due to invalid IL or missing references)
		//IL_387f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3889: Unknown result type (might be due to invalid IL or missing references)
		//IL_388e: Unknown result type (might be due to invalid IL or missing references)
		//IL_389c: Unknown result type (might be due to invalid IL or missing references)
		//IL_38a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_38ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_38b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_38b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_343a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3445: Unknown result type (might be due to invalid IL or missing references)
		//IL_344a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3450: Unknown result type (might be due to invalid IL or missing references)
		//IL_3455: Unknown result type (might be due to invalid IL or missing references)
		//IL_347e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3492: Unknown result type (might be due to invalid IL or missing references)
		//IL_349c: Unknown result type (might be due to invalid IL or missing references)
		//IL_34a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_34af: Unknown result type (might be due to invalid IL or missing references)
		//IL_34b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_34bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_34c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_34c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3426: Unknown result type (might be due to invalid IL or missing references)
		//IL_342b: Unknown result type (might be due to invalid IL or missing references)
		//IL_364d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a49: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a69: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a75: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a84: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a98: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aad: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aca: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ad0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b19: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aae: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ab4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ab9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4adc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ae2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d02: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d47: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c34: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c65: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c79: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c83: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c88: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b19: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b24: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b47: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b61: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b67: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b71: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b76: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e48: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ddf: Unknown result type (might be due to invalid IL or missing references)
		//IL_4de5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e14: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e19: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ccc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d10: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d25: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d34: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b92: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b98: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bda: Unknown result type (might be due to invalid IL or missing references)
		//IL_4be4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4be9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e42: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e29: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e54: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e59: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ff2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ff8: Unknown result type (might be due to invalid IL or missing references)
		//IL_500f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5019: Unknown result type (might be due to invalid IL or missing references)
		//IL_501e: Unknown result type (might be due to invalid IL or missing references)
		//IL_51de: Unknown result type (might be due to invalid IL or missing references)
		//IL_51fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_5204: Unknown result type (might be due to invalid IL or missing references)
		//IL_5229: Unknown result type (might be due to invalid IL or missing references)
		//IL_5233: Unknown result type (might be due to invalid IL or missing references)
		//IL_5238: Unknown result type (might be due to invalid IL or missing references)
		//IL_525f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5265: Unknown result type (might be due to invalid IL or missing references)
		//IL_526a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5274: Unknown result type (might be due to invalid IL or missing references)
		//IL_5279: Unknown result type (might be due to invalid IL or missing references)
		//IL_5287: Unknown result type (might be due to invalid IL or missing references)
		//IL_528d: Unknown result type (might be due to invalid IL or missing references)
		//IL_52a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_52aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_52af: Unknown result type (might be due to invalid IL or missing references)
		//IL_52b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fe4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4eb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ef1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ef7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4026: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e78: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e92: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e98: Unknown result type (might be due to invalid IL or missing references)
		//IL_3eca: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ecf: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ed6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3edb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ee0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3eee: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ef3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3efd: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f02: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f07: Unknown result type (might be due to invalid IL or missing references)
		//IL_4068: Unknown result type (might be due to invalid IL or missing references)
		//IL_40ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_5385: Unknown result type (might be due to invalid IL or missing references)
		//IL_538f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5394: Unknown result type (might be due to invalid IL or missing references)
		//IL_539a: Unknown result type (might be due to invalid IL or missing references)
		//IL_53a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_53a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_53b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_53b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_40f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_5569: Unknown result type (might be due to invalid IL or missing references)
		//IL_5573: Unknown result type (might be due to invalid IL or missing references)
		//IL_5578: Unknown result type (might be due to invalid IL or missing references)
		//IL_557e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5584: Unknown result type (might be due to invalid IL or missing references)
		//IL_558a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5594: Unknown result type (might be due to invalid IL or missing references)
		//IL_5599: Unknown result type (might be due to invalid IL or missing references)
		//IL_53e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4137: Unknown result type (might be due to invalid IL or missing references)
		//IL_417c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5427: Unknown result type (might be due to invalid IL or missing references)
		//IL_5431: Unknown result type (might be due to invalid IL or missing references)
		//IL_5436: Unknown result type (might be due to invalid IL or missing references)
		//IL_5438: Unknown result type (might be due to invalid IL or missing references)
		//IL_543a: Unknown result type (might be due to invalid IL or missing references)
		//IL_544e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5454: Unknown result type (might be due to invalid IL or missing references)
		//IL_5456: Unknown result type (might be due to invalid IL or missing references)
		//IL_545b: Unknown result type (might be due to invalid IL or missing references)
		//IL_546a: Unknown result type (might be due to invalid IL or missing references)
		//IL_546f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5474: Unknown result type (might be due to invalid IL or missing references)
		//IL_5479: Unknown result type (might be due to invalid IL or missing references)
		//IL_547b: Unknown result type (might be due to invalid IL or missing references)
		//IL_547e: Unknown result type (might be due to invalid IL or missing references)
		//IL_548b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5491: Unknown result type (might be due to invalid IL or missing references)
		//IL_5493: Unknown result type (might be due to invalid IL or missing references)
		//IL_5498: Unknown result type (might be due to invalid IL or missing references)
		//IL_549b: Unknown result type (might be due to invalid IL or missing references)
		//IL_54b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_54ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_54f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_54f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_54f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_54fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_550b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5515: Unknown result type (might be due to invalid IL or missing references)
		//IL_551a: Unknown result type (might be due to invalid IL or missing references)
		//IL_551c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5521: Unknown result type (might be due to invalid IL or missing references)
		//IL_552b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5530: Unknown result type (might be due to invalid IL or missing references)
		//IL_5535: Unknown result type (might be due to invalid IL or missing references)
		//IL_41c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4200: Unknown result type (might be due to invalid IL or missing references)
		//IL_5a63: Unknown result type (might be due to invalid IL or missing references)
		//IL_5833: Unknown result type (might be due to invalid IL or missing references)
		//IL_5856: Unknown result type (might be due to invalid IL or missing references)
		//IL_585c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5881: Unknown result type (might be due to invalid IL or missing references)
		//IL_588b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5890: Unknown result type (might be due to invalid IL or missing references)
		//IL_60d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_60d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b66: Unknown result type (might be due to invalid IL or missing references)
		//IL_5660: Unknown result type (might be due to invalid IL or missing references)
		//IL_566a: Unknown result type (might be due to invalid IL or missing references)
		//IL_566f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5671: Unknown result type (might be due to invalid IL or missing references)
		//IL_5673: Unknown result type (might be due to invalid IL or missing references)
		//IL_5687: Unknown result type (might be due to invalid IL or missing references)
		//IL_568d: Unknown result type (might be due to invalid IL or missing references)
		//IL_568f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5694: Unknown result type (might be due to invalid IL or missing references)
		//IL_56a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_56a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_56ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_56b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_56b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_56b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_56c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_56ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_56cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_56d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_56d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_56ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_56f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_5727: Unknown result type (might be due to invalid IL or missing references)
		//IL_572c: Unknown result type (might be due to invalid IL or missing references)
		//IL_572e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5734: Unknown result type (might be due to invalid IL or missing references)
		//IL_5739: Unknown result type (might be due to invalid IL or missing references)
		//IL_573e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5748: Unknown result type (might be due to invalid IL or missing references)
		//IL_574d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5752: Unknown result type (might be due to invalid IL or missing references)
		//IL_5767: Unknown result type (might be due to invalid IL or missing references)
		//IL_5771: Unknown result type (might be due to invalid IL or missing references)
		//IL_5776: Unknown result type (might be due to invalid IL or missing references)
		//IL_5778: Unknown result type (might be due to invalid IL or missing references)
		//IL_577d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5787: Unknown result type (might be due to invalid IL or missing references)
		//IL_578c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5792: Unknown result type (might be due to invalid IL or missing references)
		//IL_5797: Unknown result type (might be due to invalid IL or missing references)
		//IL_579c: Unknown result type (might be due to invalid IL or missing references)
		//IL_57a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_57ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_57b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_57be: Unknown result type (might be due to invalid IL or missing references)
		//IL_57c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_57cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_57db: Unknown result type (might be due to invalid IL or missing references)
		//IL_57e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_57f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_57f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_57fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4245: Unknown result type (might be due to invalid IL or missing references)
		//IL_58f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_5900: Unknown result type (might be due to invalid IL or missing references)
		//IL_5905: Unknown result type (might be due to invalid IL or missing references)
		//IL_5907: Unknown result type (might be due to invalid IL or missing references)
		//IL_5909: Unknown result type (might be due to invalid IL or missing references)
		//IL_591d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5923: Unknown result type (might be due to invalid IL or missing references)
		//IL_5925: Unknown result type (might be due to invalid IL or missing references)
		//IL_592a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5939: Unknown result type (might be due to invalid IL or missing references)
		//IL_593e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5943: Unknown result type (might be due to invalid IL or missing references)
		//IL_5948: Unknown result type (might be due to invalid IL or missing references)
		//IL_594a: Unknown result type (might be due to invalid IL or missing references)
		//IL_594d: Unknown result type (might be due to invalid IL or missing references)
		//IL_595a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5960: Unknown result type (might be due to invalid IL or missing references)
		//IL_5962: Unknown result type (might be due to invalid IL or missing references)
		//IL_5967: Unknown result type (might be due to invalid IL or missing references)
		//IL_596a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5980: Unknown result type (might be due to invalid IL or missing references)
		//IL_5986: Unknown result type (might be due to invalid IL or missing references)
		//IL_59cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_59d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_59d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_59d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_59ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_59f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_59fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_5a06: Unknown result type (might be due to invalid IL or missing references)
		//IL_5a0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5a10: Unknown result type (might be due to invalid IL or missing references)
		//IL_428a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5aaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ab0: Unknown result type (might be due to invalid IL or missing references)
		//IL_5aba: Unknown result type (might be due to invalid IL or missing references)
		//IL_5abf: Unknown result type (might be due to invalid IL or missing references)
		//IL_5afc: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b02: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b17: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b21: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b26: Unknown result type (might be due to invalid IL or missing references)
		//IL_42dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_431a: Unknown result type (might be due to invalid IL or missing references)
		//IL_603c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6041: Unknown result type (might be due to invalid IL or missing references)
		//IL_6047: Unknown result type (might be due to invalid IL or missing references)
		//IL_604d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6053: Unknown result type (might be due to invalid IL or missing references)
		//IL_605d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6062: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c77: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c81: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c86: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c88: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c93: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c99: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ca0: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ca3: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ca8: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cad: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_6186: Unknown result type (might be due to invalid IL or missing references)
		//IL_61a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_61a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_61bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_61c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_61cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_61f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_61fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_6200: Unknown result type (might be due to invalid IL or missing references)
		//IL_6205: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c04: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c29: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4334: Unknown result type (might be due to invalid IL or missing references)
		//IL_4339: Unknown result type (might be due to invalid IL or missing references)
		//IL_6137: Unknown result type (might be due to invalid IL or missing references)
		//IL_613c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6140: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ccd: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d10: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d15: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d17: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d23: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d32: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d56: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d66: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d70: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d76: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d82: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d87: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d92: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d98: Unknown result type (might be due to invalid IL or missing references)
		//IL_5da2: Unknown result type (might be due to invalid IL or missing references)
		//IL_5da7: Unknown result type (might be due to invalid IL or missing references)
		//IL_5dca: Unknown result type (might be due to invalid IL or missing references)
		//IL_5dd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_5de5: Unknown result type (might be due to invalid IL or missing references)
		//IL_5dea: Unknown result type (might be due to invalid IL or missing references)
		//IL_5dec: Unknown result type (might be due to invalid IL or missing references)
		//IL_5df1: Unknown result type (might be due to invalid IL or missing references)
		//IL_5df8: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e02: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e07: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e31: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e40: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e45: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e52: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e61: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e66: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e71: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e78: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e82: Unknown result type (might be due to invalid IL or missing references)
		//IL_463b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4640: Unknown result type (might be due to invalid IL or missing references)
		//IL_45a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_45b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_44a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_44c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_44c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_44ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_44f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_44fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_450a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4510: Unknown result type (might be due to invalid IL or missing references)
		//IL_4515: Unknown result type (might be due to invalid IL or missing references)
		//IL_451a: Unknown result type (might be due to invalid IL or missing references)
		//IL_445e: Unknown result type (might be due to invalid IL or missing references)
		//IL_447f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4485: Unknown result type (might be due to invalid IL or missing references)
		//IL_5eff: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f09: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f10: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f12: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f26: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f33: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f42: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f47: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f51: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f53: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f56: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f63: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f69: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f70: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f73: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f88: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5fd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_5fd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_5fda: Unknown result type (might be due to invalid IL or missing references)
		//IL_5fdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ff4: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ffe: Unknown result type (might be due to invalid IL or missing references)
		//IL_6004: Unknown result type (might be due to invalid IL or missing references)
		//IL_600e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6013: Unknown result type (might be due to invalid IL or missing references)
		//IL_6018: Unknown result type (might be due to invalid IL or missing references)
		//IL_466c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4678: Unknown result type (might be due to invalid IL or missing references)
		//IL_4374: Unknown result type (might be due to invalid IL or missing references)
		//IL_4379: Unknown result type (might be due to invalid IL or missing references)
		//IL_437e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4385: Unknown result type (might be due to invalid IL or missing references)
		//IL_4399: Unknown result type (might be due to invalid IL or missing references)
		//IL_43a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_43a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_43ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_43b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_43c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_43f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_43f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_43f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_43f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4915: Unknown result type (might be due to invalid IL or missing references)
		//IL_4921: Unknown result type (might be due to invalid IL or missing references)
		//IL_4928: Unknown result type (might be due to invalid IL or missing references)
		//IL_4932: Unknown result type (might be due to invalid IL or missing references)
		//IL_4938: Unknown result type (might be due to invalid IL or missing references)
		//IL_46ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_46bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_6801: Unknown result type (might be due to invalid IL or missing references)
		//IL_6741: Unknown result type (might be due to invalid IL or missing references)
		//IL_6755: Unknown result type (might be due to invalid IL or missing references)
		//IL_675a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6765: Unknown result type (might be due to invalid IL or missing references)
		//IL_676f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6793: Unknown result type (might be due to invalid IL or missing references)
		//IL_67d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_67d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_68d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_68e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_68e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_685a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6860: Unknown result type (might be due to invalid IL or missing references)
		//IL_6865: Unknown result type (might be due to invalid IL or missing references)
		//IL_686a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6873: Unknown result type (might be due to invalid IL or missing references)
		//IL_6877: Unknown result type (might be due to invalid IL or missing references)
		//IL_687c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6880: Unknown result type (might be due to invalid IL or missing references)
		//IL_688a: Unknown result type (might be due to invalid IL or missing references)
		//IL_688f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6891: Unknown result type (might be due to invalid IL or missing references)
		//IL_689b: Unknown result type (might be due to invalid IL or missing references)
		//IL_68a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_68b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_68b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_68be: Unknown result type (might be due to invalid IL or missing references)
		//IL_6910: Unknown result type (might be due to invalid IL or missing references)
		//IL_47c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_47d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_47de: Unknown result type (might be due to invalid IL or missing references)
		//IL_47e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_47f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4802: Unknown result type (might be due to invalid IL or missing references)
		//IL_4807: Unknown result type (might be due to invalid IL or missing references)
		//IL_480a: Unknown result type (might be due to invalid IL or missing references)
		//IL_480f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4811: Unknown result type (might be due to invalid IL or missing references)
		//IL_4816: Unknown result type (might be due to invalid IL or missing references)
		//IL_4820: Unknown result type (might be due to invalid IL or missing references)
		//IL_4825: Unknown result type (might be due to invalid IL or missing references)
		//IL_483c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4842: Unknown result type (might be due to invalid IL or missing references)
		//IL_4859: Unknown result type (might be due to invalid IL or missing references)
		//IL_4863: Unknown result type (might be due to invalid IL or missing references)
		//IL_4868: Unknown result type (might be due to invalid IL or missing references)
		//IL_6fe9: Unknown result type (might be due to invalid IL or missing references)
		//IL_6fee: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ec8: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f04: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f21: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f27: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f31: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f36: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a66: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a92: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a98: Unknown result type (might be due to invalid IL or missing references)
		//IL_6abd: Unknown result type (might be due to invalid IL or missing references)
		//IL_6aca: Unknown result type (might be due to invalid IL or missing references)
		//IL_6acf: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ad4: Unknown result type (might be due to invalid IL or missing references)
		//IL_6af4: Unknown result type (might be due to invalid IL or missing references)
		//IL_6afe: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b03: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b11: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b17: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b21: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b26: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4757: Unknown result type (might be due to invalid IL or missing references)
		//IL_4763: Unknown result type (might be due to invalid IL or missing references)
		//IL_476a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4774: Unknown result type (might be due to invalid IL or missing references)
		//IL_477a: Unknown result type (might be due to invalid IL or missing references)
		//IL_693f: Unknown result type (might be due to invalid IL or missing references)
		//IL_696a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6970: Unknown result type (might be due to invalid IL or missing references)
		//IL_6995: Unknown result type (might be due to invalid IL or missing references)
		//IL_69a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_69a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_69ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_69cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_69d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_69db: Unknown result type (might be due to invalid IL or missing references)
		//IL_69e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_69ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_69f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_69fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a03: Unknown result type (might be due to invalid IL or missing references)
		//IL_703b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6bc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_6bc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_6bcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_6bd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_6bd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_6bdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_731e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d54: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d90: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d96: Unknown result type (might be due to invalid IL or missing references)
		//IL_6dad: Unknown result type (might be due to invalid IL or missing references)
		//IL_6db3: Unknown result type (might be due to invalid IL or missing references)
		//IL_6dbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_6dc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_6dc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c60: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c77: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c87: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c91: Unknown result type (might be due to invalid IL or missing references)
		//IL_7540: Unknown result type (might be due to invalid IL or missing references)
		//IL_7414: Unknown result type (might be due to invalid IL or missing references)
		//IL_7055: Unknown result type (might be due to invalid IL or missing references)
		//IL_707f: Unknown result type (might be due to invalid IL or missing references)
		//IL_70a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_70b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_70b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_70bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_70db: Unknown result type (might be due to invalid IL or missing references)
		//IL_70e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_70ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_70f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_70fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_7108: Unknown result type (might be due to invalid IL or missing references)
		//IL_710d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7112: Unknown result type (might be due to invalid IL or missing references)
		//IL_756f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7172: Unknown result type (might be due to invalid IL or missing references)
		//IL_71ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_71c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_71c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_71e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_71ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_71f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_7443: Unknown result type (might be due to invalid IL or missing references)
		//IL_7470: Unknown result type (might be due to invalid IL or missing references)
		//IL_7476: Unknown result type (might be due to invalid IL or missing references)
		//IL_748d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7497: Unknown result type (might be due to invalid IL or missing references)
		//IL_749c: Unknown result type (might be due to invalid IL or missing references)
		//IL_74aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_74b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_74b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_74ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_74c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_74d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_74d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_7505: Unknown result type (might be due to invalid IL or missing references)
		//IL_750b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7510: Unknown result type (might be due to invalid IL or missing references)
		//IL_751a: Unknown result type (might be due to invalid IL or missing references)
		//IL_751f: Unknown result type (might be due to invalid IL or missing references)
		//IL_766a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7596: Unknown result type (might be due to invalid IL or missing references)
		//IL_75c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_75cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_75da: Unknown result type (might be due to invalid IL or missing references)
		//IL_75df: Unknown result type (might be due to invalid IL or missing references)
		//IL_75e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_75ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_75f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_75fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_7603: Unknown result type (might be due to invalid IL or missing references)
		//IL_7608: Unknown result type (might be due to invalid IL or missing references)
		//IL_869f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7976: Unknown result type (might be due to invalid IL or missing references)
		//IL_76a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_76d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_76d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_76e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_76f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_76f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_7702: Unknown result type (might be due to invalid IL or missing references)
		//IL_7707: Unknown result type (might be due to invalid IL or missing references)
		//IL_770c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7725: Unknown result type (might be due to invalid IL or missing references)
		//IL_772a: Unknown result type (might be due to invalid IL or missing references)
		//IL_86ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_86f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_86f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_870f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8719: Unknown result type (might be due to invalid IL or missing references)
		//IL_871e: Unknown result type (might be due to invalid IL or missing references)
		//IL_872c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8732: Unknown result type (might be due to invalid IL or missing references)
		//IL_873c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8741: Unknown result type (might be due to invalid IL or missing references)
		//IL_8746: Unknown result type (might be due to invalid IL or missing references)
		//IL_77a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_77ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_77d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_77f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_77fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_7802: Unknown result type (might be due to invalid IL or missing references)
		//IL_7807: Unknown result type (might be due to invalid IL or missing references)
		//IL_780c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7816: Unknown result type (might be due to invalid IL or missing references)
		//IL_781b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7820: Unknown result type (might be due to invalid IL or missing references)
		//IL_7844: Unknown result type (might be due to invalid IL or missing references)
		//IL_7849: Unknown result type (might be due to invalid IL or missing references)
		//IL_87c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_8802: Unknown result type (might be due to invalid IL or missing references)
		//IL_8808: Unknown result type (might be due to invalid IL or missing references)
		//IL_881f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8829: Unknown result type (might be due to invalid IL or missing references)
		//IL_882e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7dce: Unknown result type (might be due to invalid IL or missing references)
		//IL_79a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_79ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_79d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_79f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_79fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a02: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a07: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a16: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a20: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a41: Unknown result type (might be due to invalid IL or missing references)
		//IL_78ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_78d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_78df: Unknown result type (might be due to invalid IL or missing references)
		//IL_78ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_78f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_78fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_7908: Unknown result type (might be due to invalid IL or missing references)
		//IL_790d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7912: Unknown result type (might be due to invalid IL or missing references)
		//IL_792b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7930: Unknown result type (might be due to invalid IL or missing references)
		//IL_80d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b75: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ba1: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ba7: Unknown result type (might be due to invalid IL or missing references)
		//IL_7bc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_7bcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_7bd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_7bda: Unknown result type (might be due to invalid IL or missing references)
		//IL_7bdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_7be9: Unknown result type (might be due to invalid IL or missing references)
		//IL_7bee: Unknown result type (might be due to invalid IL or missing references)
		//IL_7bf3: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c14: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a81: Unknown result type (might be due to invalid IL or missing references)
		//IL_7aad: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ab3: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ac2: Unknown result type (might be due to invalid IL or missing references)
		//IL_7acc: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ad2: Unknown result type (might be due to invalid IL or missing references)
		//IL_7adc: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ae1: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ae6: Unknown result type (might be due to invalid IL or missing references)
		//IL_7af7: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b07: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b16: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b20: Unknown result type (might be due to invalid IL or missing references)
		//IL_813e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7dfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e26: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e54: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e64: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e73: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e78: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e94: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e99: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c54: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c74: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c89: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c93: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c99: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ca3: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ca8: Unknown result type (might be due to invalid IL or missing references)
		//IL_7cad: Unknown result type (might be due to invalid IL or missing references)
		//IL_7cb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_7cbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_7cc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_7cd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_7cda: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ce2: Unknown result type (might be due to invalid IL or missing references)
		//IL_7cec: Unknown result type (might be due to invalid IL or missing references)
		//IL_7cf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_7cf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d22: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d52: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d58: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d95: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b65: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b95: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8bc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_8bca: Unknown result type (might be due to invalid IL or missing references)
		//IL_8bcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_8bdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_8be3: Unknown result type (might be due to invalid IL or missing references)
		//IL_8bed: Unknown result type (might be due to invalid IL or missing references)
		//IL_8bf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_8bf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_8305: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ed9: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f05: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f24: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f34: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f39: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f64: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f73: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f78: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d88: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d17: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d27: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d37: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d41: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d67: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a49: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a66: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a76: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a80: Unknown result type (might be due to invalid IL or missing references)
		//IL_891e: Unknown result type (might be due to invalid IL or missing references)
		//IL_895a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8960: Unknown result type (might be due to invalid IL or missing references)
		//IL_8977: Unknown result type (might be due to invalid IL or missing references)
		//IL_897d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8982: Unknown result type (might be due to invalid IL or missing references)
		//IL_8987: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c55: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c85: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8cb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_8cba: Unknown result type (might be due to invalid IL or missing references)
		//IL_8cbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ccd: Unknown result type (might be due to invalid IL or missing references)
		//IL_8cd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_8cdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ce2: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ce7: Unknown result type (might be due to invalid IL or missing references)
		//IL_8351: Unknown result type (might be due to invalid IL or missing references)
		//IL_8375: Unknown result type (might be due to invalid IL or missing references)
		//IL_837b: Unknown result type (might be due to invalid IL or missing references)
		//IL_839a: Unknown result type (might be due to invalid IL or missing references)
		//IL_83a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_83aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_83af: Unknown result type (might be due to invalid IL or missing references)
		//IL_83b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_808d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8092: Unknown result type (might be due to invalid IL or missing references)
		//IL_8e11: Unknown result type (might be due to invalid IL or missing references)
		//IL_8e2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8e30: Unknown result type (might be due to invalid IL or missing references)
		//IL_8e82: Unknown result type (might be due to invalid IL or missing references)
		//IL_8e8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8e91: Unknown result type (might be due to invalid IL or missing references)
		//IL_856e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8592: Unknown result type (might be due to invalid IL or missing references)
		//IL_8598: Unknown result type (might be due to invalid IL or missing references)
		//IL_85b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_85bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_85c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_85cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_85d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_849a: Unknown result type (might be due to invalid IL or missing references)
		//IL_84be: Unknown result type (might be due to invalid IL or missing references)
		//IL_84c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_84e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_84ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_84f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_84fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_8500: Unknown result type (might be due to invalid IL or missing references)
		//IL_850a: Unknown result type (might be due to invalid IL or missing references)
		//IL_850f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8514: Unknown result type (might be due to invalid IL or missing references)
		//IL_83d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_83d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_81aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_81d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_81dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_81f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_81fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_8200: Unknown result type (might be due to invalid IL or missing references)
		//IL_820a: Unknown result type (might be due to invalid IL or missing references)
		//IL_820f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8214: Unknown result type (might be due to invalid IL or missing references)
		//IL_8239: Unknown result type (might be due to invalid IL or missing references)
		//IL_823e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8246: Unknown result type (might be due to invalid IL or missing references)
		//IL_8259: Unknown result type (might be due to invalid IL or missing references)
		//IL_8271: Unknown result type (might be due to invalid IL or missing references)
		//IL_8277: Unknown result type (might be due to invalid IL or missing references)
		//IL_8279: Unknown result type (might be due to invalid IL or missing references)
		//IL_8288: Unknown result type (might be due to invalid IL or missing references)
		//IL_828d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8292: Unknown result type (might be due to invalid IL or missing references)
		//IL_85ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_85f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_83ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_840e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8414: Unknown result type (might be due to invalid IL or missing references)
		//IL_8434: Unknown result type (might be due to invalid IL or missing references)
		//IL_843a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8444: Unknown result type (might be due to invalid IL or missing references)
		//IL_8449: Unknown result type (might be due to invalid IL or missing references)
		//IL_844e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8453: Unknown result type (might be due to invalid IL or missing references)
		//IL_8458: Unknown result type (might be due to invalid IL or missing references)
		//IL_82b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_82bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_7fb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_7fdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_7fe2: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ff1: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ffb: Unknown result type (might be due to invalid IL or missing references)
		//IL_8001: Unknown result type (might be due to invalid IL or missing references)
		//IL_800b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8010: Unknown result type (might be due to invalid IL or missing references)
		//IL_8015: Unknown result type (might be due to invalid IL or missing references)
		//IL_802d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8033: Unknown result type (might be due to invalid IL or missing references)
		//IL_803d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8042: Unknown result type (might be due to invalid IL or missing references)
		//IL_8052: Unknown result type (might be due to invalid IL or missing references)
		//IL_8057: Unknown result type (might be due to invalid IL or missing references)
		//IL_8061: Unknown result type (might be due to invalid IL or missing references)
		//IL_8066: Unknown result type (might be due to invalid IL or missing references)
		//IL_806b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_8faa: Unknown result type (might be due to invalid IL or missing references)
		//IL_9018: Unknown result type (might be due to invalid IL or missing references)
		//IL_9022: Unknown result type (might be due to invalid IL or missing references)
		//IL_9027: Unknown result type (might be due to invalid IL or missing references)
		//IL_8607: Unknown result type (might be due to invalid IL or missing references)
		//IL_8628: Unknown result type (might be due to invalid IL or missing references)
		//IL_862e: Unknown result type (might be due to invalid IL or missing references)
		//IL_864e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8654: Unknown result type (might be due to invalid IL or missing references)
		//IL_865e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8663: Unknown result type (might be due to invalid IL or missing references)
		//IL_8668: Unknown result type (might be due to invalid IL or missing references)
		//IL_866d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8672: Unknown result type (might be due to invalid IL or missing references)
		//IL_94de: Unknown result type (might be due to invalid IL or missing references)
		//IL_94f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_924e: Unknown result type (might be due to invalid IL or missing references)
		//IL_9261: Unknown result type (might be due to invalid IL or missing references)
		//IL_9728: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a58: Unknown result type (might be due to invalid IL or missing references)
		//IL_9744: Unknown result type (might be due to invalid IL or missing references)
		//IL_9758: Unknown result type (might be due to invalid IL or missing references)
		//IL_975d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9765: Unknown result type (might be due to invalid IL or missing references)
		//IL_9783: Unknown result type (might be due to invalid IL or missing references)
		//IL_9790: Unknown result type (might be due to invalid IL or missing references)
		//IL_9796: Unknown result type (might be due to invalid IL or missing references)
		//IL_97a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_97b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_97bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_97c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_9aae: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ad1: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ad7: Unknown result type (might be due to invalid IL or missing references)
		//IL_9af1: Unknown result type (might be due to invalid IL or missing references)
		//IL_9af6: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b01: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b06: Unknown result type (might be due to invalid IL or missing references)
		//IL_99a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_99cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_99d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_99f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_99fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a00: Unknown result type (might be due to invalid IL or missing references)
		//IL_9809: Unknown result type (might be due to invalid IL or missing references)
		//IL_981d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9822: Unknown result type (might be due to invalid IL or missing references)
		//IL_9838: Unknown result type (might be due to invalid IL or missing references)
		//IL_983e: Unknown result type (might be due to invalid IL or missing references)
		//IL_985c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9861: Unknown result type (might be due to invalid IL or missing references)
		//IL_986e: Unknown result type (might be due to invalid IL or missing references)
		//IL_9874: Unknown result type (might be due to invalid IL or missing references)
		//IL_9882: Unknown result type (might be due to invalid IL or missing references)
		//IL_9896: Unknown result type (might be due to invalid IL or missing references)
		//IL_989b: Unknown result type (might be due to invalid IL or missing references)
		//IL_98a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_9da7: Unknown result type (might be due to invalid IL or missing references)
		//IL_9dad: Unknown result type (might be due to invalid IL or missing references)
		//IL_9db2: Unknown result type (might be due to invalid IL or missing references)
		//IL_9dbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_9dc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_9dc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_9dd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_9df1: Unknown result type (might be due to invalid IL or missing references)
		//IL_9df7: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e05: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e12: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e22: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e28: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e34: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e44: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e49: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e55: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e71: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e73: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e78: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e99: Unknown result type (might be due to invalid IL or missing references)
		//IL_9eb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ebe: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ecc: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ed2: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ed9: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ee9: Unknown result type (might be due to invalid IL or missing references)
		//IL_9eef: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ef1: Unknown result type (might be due to invalid IL or missing references)
		//IL_9efb: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f01: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f10: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f15: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f22: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f32: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f38: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f44: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b52: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b67: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b89: Unknown result type (might be due to invalid IL or missing references)
		//IL_bacd: Unknown result type (might be due to invalid IL or missing references)
		//IL_a351: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb35: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9fa1: Unknown result type (might be due to invalid IL or missing references)
		//IL_9fc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_9fca: Unknown result type (might be due to invalid IL or missing references)
		//IL_9fcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_a167: Unknown result type (might be due to invalid IL or missing references)
		//IL_a16c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c68: Unknown result type (might be due to invalid IL or missing references)
		//IL_a4db: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c87: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c94: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb76: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbac: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_a1e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_a1eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_a1f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_a1f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_a25b: Unknown result type (might be due to invalid IL or missing references)
		//IL_a5e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_a607: Unknown result type (might be due to invalid IL or missing references)
		//IL_a60d: Unknown result type (might be due to invalid IL or missing references)
		//IL_a612: Unknown result type (might be due to invalid IL or missing references)
		//IL_a617: Unknown result type (might be due to invalid IL or missing references)
		//IL_a628: Unknown result type (might be due to invalid IL or missing references)
		//IL_a634: Unknown result type (might be due to invalid IL or missing references)
		//IL_a639: Unknown result type (might be due to invalid IL or missing references)
		//IL_a649: Unknown result type (might be due to invalid IL or missing references)
		//IL_a657: Unknown result type (might be due to invalid IL or missing references)
		//IL_a65c: Unknown result type (might be due to invalid IL or missing references)
		//IL_a662: Unknown result type (might be due to invalid IL or missing references)
		//IL_a66e: Unknown result type (might be due to invalid IL or missing references)
		//IL_a673: Unknown result type (might be due to invalid IL or missing references)
		//IL_a794: Unknown result type (might be due to invalid IL or missing references)
		//IL_a7c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_a7c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_a7f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_a802: Unknown result type (might be due to invalid IL or missing references)
		//IL_a807: Unknown result type (might be due to invalid IL or missing references)
		//IL_a697: Unknown result type (might be due to invalid IL or missing references)
		//IL_a6a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_a6a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc38: Unknown result type (might be due to invalid IL or missing references)
		//IL_be9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_bea6: Unknown result type (might be due to invalid IL or missing references)
		//IL_beab: Unknown result type (might be due to invalid IL or missing references)
		//IL_beb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_bebb: Unknown result type (might be due to invalid IL or missing references)
		//IL_bec0: Unknown result type (might be due to invalid IL or missing references)
		//IL_bec6: Unknown result type (might be due to invalid IL or missing references)
		//IL_bee5: Unknown result type (might be due to invalid IL or missing references)
		//IL_beeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf26: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf48: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf53: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf62: Unknown result type (might be due to invalid IL or missing references)
		//IL_abd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_abdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_c02f: Unknown result type (might be due to invalid IL or missing references)
		//IL_c034: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa11: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa16: Unknown result type (might be due to invalid IL or missing references)
		//IL_acb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_acca: Unknown result type (might be due to invalid IL or missing references)
		//IL_acd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_acef: Unknown result type (might be due to invalid IL or missing references)
		//IL_acf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad00: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad11: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad16: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad28: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad32: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad37: Unknown result type (might be due to invalid IL or missing references)
		//IL_c06b: Unknown result type (might be due to invalid IL or missing references)
		//IL_c045: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa94: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_aaa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_aaaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_aaaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_aac0: Unknown result type (might be due to invalid IL or missing references)
		//IL_aacc: Unknown result type (might be due to invalid IL or missing references)
		//IL_aad1: Unknown result type (might be due to invalid IL or missing references)
		//IL_aade: Unknown result type (might be due to invalid IL or missing references)
		//IL_aae9: Unknown result type (might be due to invalid IL or missing references)
		//IL_aaf3: Unknown result type (might be due to invalid IL or missing references)
		//IL_aafe: Unknown result type (might be due to invalid IL or missing references)
		//IL_b41b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b448: Unknown result type (might be due to invalid IL or missing references)
		//IL_b44e: Unknown result type (might be due to invalid IL or missing references)
		//IL_b47f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b489: Unknown result type (might be due to invalid IL or missing references)
		//IL_b48e: Unknown result type (might be due to invalid IL or missing references)
		//IL_b505: Unknown result type (might be due to invalid IL or missing references)
		//IL_b26e: Unknown result type (might be due to invalid IL or missing references)
		//IL_b286: Unknown result type (might be due to invalid IL or missing references)
		//IL_afeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_affe: Unknown result type (might be due to invalid IL or missing references)
		if (type == 469 && wet && !honeyWet && !shimmerWet)
		{
			Kill();
		}
		if (type == 601)
		{
			Color portalColor = PortalHelper.GetPortalColor(owner, (int)ai[0]);
			Vector3 rgb = ((Color)(ref portalColor)).ToVector3();
			rgb *= 0.5f;
			Lighting.AddLight(base.Center + velocity * 3f, rgb);
			if (alpha > 0 && alpha <= 15)
			{
				Color color = portalColor;
				((Color)(ref color)).A = byte.MaxValue;
				for (int i = 0; i < 4; i++)
				{
					Dust obj = Main.dust[Dust.NewDust(base.Center, 0, 0, 264)];
					obj.position = base.Center;
					obj.velocity = velocity * 2f + Utils.RandomVector2(Main.rand, -1f, 1f);
					obj.color = color;
					obj.scale = 1.2f;
					obj.noLight = true;
					obj.noGravity = true;
					obj.customData = Main.player[owner];
				}
				if (ai[0] != 0f)
				{
					SoundEngine.PlaySound(in SoundID.Item114, position);
				}
				else
				{
					SoundEngine.PlaySound(in SoundID.Item115, position);
				}
			}
			alpha -= 15;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (++frameCounter >= 4)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			if (alpha == 0)
			{
				Color color2 = portalColor;
				((Color)(ref color2)).A = byte.MaxValue;
				Dust obj2 = Main.dust[Dust.NewDust(base.Center, 0, 0, 263)];
				obj2.position = base.Center;
				obj2.velocity = velocity / 4f;
				obj2.color = color2;
				obj2.noGravity = true;
				obj2.scale = 0.6f;
			}
		}
		if (type == 472)
		{
			int num = Dust.NewDust(position, width, height, 30);
			Main.dust[num].noGravity = true;
			Dust obj3 = Main.dust[num];
			obj3.velocity *= 0.25f;
			Dust obj4 = Main.dust[num];
			obj4.velocity += velocity * 0.75f;
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(in SoundID.Item17, position);
				for (int j = 0; j < 20; j++)
				{
					num = Dust.NewDust(position, width, height, 30);
					Main.dust[num].noGravity = true;
					Dust obj5 = Main.dust[num];
					obj5.velocity *= 0.25f;
					Dust obj6 = Main.dust[num];
					obj6.velocity += velocity;
					Main.dust[num].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				}
			}
		}
		if (type == 323)
		{
			alpha -= 50;
			if (alpha < 0)
			{
				alpha = 0;
			}
		}
		if (type == 436)
		{
			if (ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(in SoundID.Item12, position);
			}
			alpha -= 40;
			if (alpha < 0)
			{
				alpha = 0;
			}
			spriteDirection = direction;
			frameCounter++;
			if (frameCounter >= 3)
			{
				frame++;
				frameCounter = 0;
				if (frame >= 4)
				{
					frame = 0;
				}
			}
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 1.1f, 0.5f);
		}
		if (type == 467)
		{
			if (ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(in SoundID.Item34, position);
			}
			else if (ai[1] == 1f && Main.netMode != 1)
			{
				int num110 = -1;
				float num166 = 2000f;
				for (int k = 0; k < 255; k++)
				{
					if (Main.player[k].active && !Main.player[k].dead)
					{
						Vector2 center = Main.player[k].Center;
						float num177 = Vector2.Distance(center, base.Center);
						if ((num177 < num166 || num110 == -1) && Collision.CanHit(base.Center, 1, 1, center, 1, 1))
						{
							num166 = num177;
							num110 = k;
						}
					}
				}
				if (num166 < 20f)
				{
					Kill();
					return;
				}
				if (num110 != -1)
				{
					ai[1] = 21f;
					ai[0] = num110;
					netUpdate = true;
				}
			}
			else if (ai[1] > 20f && ai[1] < 200f)
			{
				ai[1] += 1f;
				int num188 = (int)ai[0];
				if (!Main.player[num188].active || Main.player[num188].dead)
				{
					ai[1] = 1f;
					ai[0] = 0f;
					netUpdate = true;
				}
				else
				{
					float num199 = velocity.ToRotation();
					Vector2 vector = Main.player[num188].Center - base.Center;
					if (((Vector2)(ref vector)).Length() < 20f)
					{
						Kill();
						return;
					}
					float targetAngle = vector.ToRotation();
					if (vector == Vector2.Zero)
					{
						targetAngle = num199;
					}
					float num210 = num199.AngleLerp(targetAngle, 0.008f);
					velocity = Utils.RotatedBy(new Vector2(((Vector2)(ref velocity)).Length(), 0f), num210);
				}
			}
			if (ai[1] >= 1f && ai[1] < 20f)
			{
				ai[1] += 1f;
				if (ai[1] == 20f)
				{
					ai[1] = 1f;
				}
			}
			alpha -= 40;
			if (alpha < 0)
			{
				alpha = 0;
			}
			spriteDirection = direction;
			frameCounter++;
			if (frameCounter >= 3)
			{
				frame++;
				frameCounter = 0;
				if (frame >= 4)
				{
					frame = 0;
				}
			}
			Lighting.AddLight(base.Center, 1.1f, 0.9f, 0.4f);
			localAI[0] += 1f;
			if (localAI[0] == 12f)
			{
				localAI[0] = 0f;
				for (int l = 0; l < 12; l++)
				{
					Vector2 spinningpoint = Vector2.UnitX * (float)(-width) / 2f;
					spinningpoint += -Vector2.UnitY.RotatedBy((float)l * (float)Math.PI / 6f) * new Vector2(8f, 16f);
					spinningpoint = spinningpoint.RotatedBy(rotation - (float)Math.PI / 2f);
					int num221 = Dust.NewDust(base.Center, 0, 0, 6, 0f, 0f, 160);
					Main.dust[num221].scale = 1.1f;
					Main.dust[num221].noGravity = true;
					Main.dust[num221].position = base.Center + spinningpoint;
					Main.dust[num221].velocity = velocity * 0.1f;
					Main.dust[num221].velocity = Vector2.Normalize(base.Center - velocity * 3f - Main.dust[num221].position) * 1.25f;
				}
			}
			if (Main.rand.Next(4) == 0)
			{
				for (int m = 0; m < 1; m++)
				{
					Vector2 vector12 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(velocity.ToRotation());
					int num232 = Dust.NewDust(position, width, height, 31, 0f, 0f, 100);
					Dust obj7 = Main.dust[num232];
					obj7.velocity *= 0.1f;
					Main.dust[num232].position = base.Center + vector12 * (float)width / 2f;
					Main.dust[num232].fadeIn = 0.9f;
				}
			}
			if (Main.rand.Next(32) == 0)
			{
				for (int n = 0; n < 1; n++)
				{
					Vector2 vector23 = -Vector2.UnitX.RotatedByRandom(0.39269909262657166).RotatedBy(velocity.ToRotation());
					int num2 = Dust.NewDust(position, width, height, 31, 0f, 0f, 155, default(Color), 0.8f);
					Dust obj8 = Main.dust[num2];
					obj8.velocity *= 0.3f;
					Main.dust[num2].position = base.Center + vector23 * (float)width / 2f;
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num2].fadeIn = 1.4f;
					}
				}
			}
			if (Main.rand.Next(2) == 0)
			{
				for (int num12 = 0; num12 < 2; num12++)
				{
					Vector2 vector29 = -Vector2.UnitX.RotatedByRandom(0.7853981852531433).RotatedBy(velocity.ToRotation());
					int num23 = Dust.NewDust(position, width, height, 6, 0f, 0f, 0, default(Color), 1.2f);
					Dust obj9 = Main.dust[num23];
					obj9.velocity *= 0.3f;
					Main.dust[num23].noGravity = true;
					Main.dust[num23].position = base.Center + vector29 * (float)width / 2f;
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num23].fadeIn = 1.4f;
					}
				}
			}
		}
		if (type == 468)
		{
			if (ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(in SoundID.Item34, position);
			}
			else if (ai[1] == 1f && Main.netMode != 1)
			{
				int num34 = -1;
				float num45 = 2000f;
				for (int num56 = 0; num56 < 255; num56++)
				{
					if (Main.player[num56].active && !Main.player[num56].dead)
					{
						Vector2 center2 = Main.player[num56].Center;
						float num67 = Vector2.Distance(center2, base.Center);
						if ((num67 < num45 || num34 == -1) && Collision.CanHit(base.Center, 1, 1, center2, 1, 1))
						{
							num45 = num67;
							num34 = num56;
						}
					}
				}
				if (num45 < 20f)
				{
					Kill();
					return;
				}
				if (num34 != -1)
				{
					ai[1] = 21f;
					ai[0] = num34;
					netUpdate = true;
				}
			}
			else if (ai[1] > 20f && ai[1] < 200f)
			{
				ai[1] += 1f;
				int num78 = (int)ai[0];
				if (!Main.player[num78].active || Main.player[num78].dead)
				{
					ai[1] = 1f;
					ai[0] = 0f;
					netUpdate = true;
				}
				else
				{
					float num89 = velocity.ToRotation();
					Vector2 vector30 = Main.player[num78].Center - base.Center;
					if (((Vector2)(ref vector30)).Length() < 20f)
					{
						Kill();
						return;
					}
					float targetAngle2 = vector30.ToRotation();
					if (vector30 == Vector2.Zero)
					{
						targetAngle2 = num89;
					}
					float num100 = num89.AngleLerp(targetAngle2, 0.01f);
					velocity = Utils.RotatedBy(new Vector2(((Vector2)(ref velocity)).Length(), 0f), num100);
				}
			}
			if (ai[1] >= 1f && ai[1] < 20f)
			{
				ai[1] += 1f;
				if (ai[1] == 20f)
				{
					ai[1] = 1f;
				}
			}
			alpha -= 40;
			if (alpha < 0)
			{
				alpha = 0;
			}
			spriteDirection = direction;
			frameCounter++;
			if (frameCounter >= 3)
			{
				frame++;
				frameCounter = 0;
				if (frame >= 4)
				{
					frame = 0;
				}
			}
			Lighting.AddLight(base.Center, 0.2f, 0.1f, 0.6f);
			localAI[0] += 1f;
			if (localAI[0] == 12f)
			{
				localAI[0] = 0f;
				for (int num111 = 0; num111 < 12; num111++)
				{
					Vector2 spinningpoint2 = Vector2.UnitX * (float)(-width) / 2f;
					spinningpoint2 += -Vector2.UnitY.RotatedBy((float)num111 * (float)Math.PI / 6f) * new Vector2(8f, 16f);
					spinningpoint2 = spinningpoint2.RotatedBy(rotation - (float)Math.PI / 2f);
					int num121 = Dust.NewDust(base.Center, 0, 0, 27, 0f, 0f, 160);
					Main.dust[num121].scale = 1.1f;
					Main.dust[num121].noGravity = true;
					Main.dust[num121].position = base.Center + spinningpoint2;
					Main.dust[num121].velocity = velocity * 0.1f;
					Main.dust[num121].velocity = Vector2.Normalize(base.Center - velocity * 3f - Main.dust[num121].position) * 1.25f;
				}
			}
			if (Main.rand.Next(4) == 0)
			{
				for (int num132 = 0; num132 < 1; num132++)
				{
					Vector2 vector31 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(velocity.ToRotation());
					int num143 = Dust.NewDust(position, width, height, 31, 0f, 0f, 100);
					Dust obj10 = Main.dust[num143];
					obj10.velocity *= 0.1f;
					Main.dust[num143].position = base.Center + vector31 * (float)width / 2f;
					Main.dust[num143].fadeIn = 0.9f;
				}
			}
			if (Main.rand.Next(32) == 0)
			{
				for (int num154 = 0; num154 < 1; num154++)
				{
					Vector2 vector32 = -Vector2.UnitX.RotatedByRandom(0.39269909262657166).RotatedBy(velocity.ToRotation());
					int num161 = Dust.NewDust(position, width, height, 31, 0f, 0f, 155, default(Color), 0.8f);
					Dust obj11 = Main.dust[num161];
					obj11.velocity *= 0.3f;
					Main.dust[num161].position = base.Center + vector32 * (float)width / 2f;
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num161].fadeIn = 1.4f;
					}
				}
			}
			if (Main.rand.Next(2) == 0)
			{
				for (int num162 = 0; num162 < 2; num162++)
				{
					Vector2 vector33 = -Vector2.UnitX.RotatedByRandom(0.7853981852531433).RotatedBy(velocity.ToRotation());
					int num163 = Dust.NewDust(position, width, height, 27, 0f, 0f, 0, default(Color), 1.2f);
					Dust obj12 = Main.dust[num163];
					obj12.velocity *= 0.3f;
					Main.dust[num163].noGravity = true;
					Main.dust[num163].position = base.Center + vector33 * (float)width / 2f;
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num163].fadeIn = 1.4f;
					}
				}
			}
		}
		if (type == 634 || type == 635)
		{
			float num164 = 5f;
			float num165 = 250f;
			float num167 = 6f;
			Vector2 vector34 = default(Vector2);
			((Vector2)(ref vector34))._002Ector(8f, 10f);
			float num168 = 1.2f;
			Vector3 rgb2 = default(Vector3);
			((Vector3)(ref rgb2))._002Ector(0.7f, 0.1f, 0.5f);
			int num169 = 4 * MaxUpdates;
			int num170 = Utils.SelectRandom<int>(Main.rand, 242, 73, 72, 71, 255);
			int num171 = 255;
			if (type == 635)
			{
				((Vector2)(ref vector34))._002Ector(10f, 20f);
				num168 = 1f;
				num165 = 500f;
				num171 = 88;
				num169 = 3 * MaxUpdates;
				((Vector3)(ref rgb2))._002Ector(0.4f, 0.6f, 0.9f);
				num170 = Utils.SelectRandom<int>(Main.rand, 242, 59, 88);
			}
			if (ai[1] == 0f)
			{
				ai[1] = 1f;
				localAI[0] = -Main.rand.Next(48);
				SoundEngine.PlaySound(in SoundID.Item34, position);
			}
			else if (ai[1] == 1f && owner == Main.myPlayer)
			{
				int num172 = -1;
				float num173 = num165;
				for (int num174 = 0; num174 < 200; num174++)
				{
					if (Main.npc[num174].active && Main.npc[num174].CanBeChasedBy(this))
					{
						Vector2 center3 = Main.npc[num174].Center;
						float num175 = Vector2.Distance(center3, base.Center);
						if (num175 < num173 && num172 == -1 && Collision.CanHitLine(base.Center, 1, 1, center3, 1, 1))
						{
							num173 = num175;
							num172 = num174;
						}
					}
				}
				if (num173 < 20f)
				{
					Kill();
					return;
				}
				if (num172 != -1)
				{
					ai[1] = num164 + 1f;
					ai[0] = num172;
					netUpdate = true;
				}
			}
			else if (ai[1] > num164)
			{
				ai[1] += 1f;
				int num176 = (int)ai[0];
				if (!Main.npc[num176].active || !Main.npc[num176].CanBeChasedBy(this))
				{
					ai[1] = 1f;
					ai[0] = 0f;
					netUpdate = true;
				}
				else
				{
					velocity.ToRotation();
					Vector2 vector2 = Main.npc[num176].Center - base.Center;
					if (((Vector2)(ref vector2)).Length() < 20f)
					{
						Kill();
						return;
					}
					if (vector2 != Vector2.Zero)
					{
						((Vector2)(ref vector2)).Normalize();
						vector2 *= num167;
					}
					float num178 = 30f;
					velocity = (velocity * (num178 - 1f) + vector2) / num178;
				}
			}
			if (ai[1] >= 1f && ai[1] < num164)
			{
				ai[1] += 1f;
				if (ai[1] == num164)
				{
					ai[1] = 1f;
				}
			}
			alpha -= 40;
			if (alpha < 0)
			{
				alpha = 0;
			}
			spriteDirection = direction;
			frameCounter++;
			if (frameCounter >= num169)
			{
				frame++;
				frameCounter = 0;
				if (frame >= 4)
				{
					frame = 0;
				}
			}
			Lighting.AddLight(base.Center, rgb2);
			rotation = velocity.ToRotation();
			localAI[0] += 1f;
			if (localAI[0] == 48f)
			{
				localAI[0] = 0f;
			}
			else if (alpha == 0)
			{
				for (int num179 = 0; num179 < 2; num179++)
				{
					Vector2 vector3 = Vector2.UnitX * -30f;
					vector3 = -Vector2.UnitY.RotatedBy(localAI[0] * ((float)Math.PI / 24f) + (float)num179 * (float)Math.PI) * vector34 - rotation.ToRotationVector2() * 10f;
					int num180 = Dust.NewDust(base.Center, 0, 0, num171, 0f, 0f, 160);
					Main.dust[num180].scale = num168;
					Main.dust[num180].noGravity = true;
					Main.dust[num180].position = base.Center + vector3 + velocity * 2f;
					Main.dust[num180].velocity = Vector2.Normalize(base.Center + velocity * 2f * 8f - Main.dust[num180].position) * 2f + velocity * 2f;
				}
			}
			if (Main.rand.Next(12) == 0)
			{
				for (int num181 = 0; num181 < 1; num181++)
				{
					Vector2 vector4 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(velocity.ToRotation());
					int num182 = Dust.NewDust(position, width, height, 31, 0f, 0f, 100);
					Dust obj13 = Main.dust[num182];
					obj13.velocity *= 0.1f;
					Main.dust[num182].position = base.Center + vector4 * (float)width / 2f + velocity * 2f;
					Main.dust[num182].fadeIn = 0.9f;
				}
			}
			if (Main.rand.Next(64) == 0)
			{
				for (int num183 = 0; num183 < 1; num183++)
				{
					Vector2 vector5 = -Vector2.UnitX.RotatedByRandom(0.39269909262657166).RotatedBy(velocity.ToRotation());
					int num184 = Dust.NewDust(position, width, height, 31, 0f, 0f, 155, default(Color), 0.8f);
					Dust obj14 = Main.dust[num184];
					obj14.velocity *= 0.3f;
					Main.dust[num184].position = base.Center + vector5 * (float)width / 2f;
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num184].fadeIn = 1.4f;
					}
				}
			}
			if (Main.rand.Next(4) == 0)
			{
				for (int num185 = 0; num185 < 2; num185++)
				{
					Vector2 vector6 = -Vector2.UnitX.RotatedByRandom(0.7853981852531433).RotatedBy(velocity.ToRotation());
					int num186 = Dust.NewDust(position, width, height, num170, 0f, 0f, 0, default(Color), 1.2f);
					Dust obj15 = Main.dust[num186];
					obj15.velocity *= 0.3f;
					Main.dust[num186].noGravity = true;
					Main.dust[num186].position = base.Center + vector6 * (float)width / 2f;
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num186].fadeIn = 1.4f;
					}
				}
			}
			if (Main.rand.Next(12) == 0 && type == 634)
			{
				Vector2 vector7 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(velocity.ToRotation());
				int num187 = Dust.NewDust(position, width, height, num171, 0f, 0f, 100);
				Dust obj16 = Main.dust[num187];
				obj16.velocity *= 0.3f;
				Main.dust[num187].position = base.Center + vector7 * (float)width / 2f;
				Main.dust[num187].fadeIn = 0.9f;
				Main.dust[num187].noGravity = true;
			}
			if (Main.rand.Next(3) == 0 && type == 635)
			{
				Vector2 vector8 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(velocity.ToRotation());
				int num189 = Dust.NewDust(position, width, height, num171, 0f, 0f, 100);
				Dust obj17 = Main.dust[num189];
				obj17.velocity *= 0.3f;
				Main.dust[num189].position = base.Center + vector8 * (float)width / 2f;
				Main.dust[num189].fadeIn = 1.2f;
				Main.dust[num189].scale = 1.5f;
				Main.dust[num189].noGravity = true;
			}
		}
		if (type == 459)
		{
			alpha -= 30;
			if (alpha < 0)
			{
				alpha = 0;
			}
			spriteDirection = direction;
			frameCounter++;
			if (frameCounter >= 3)
			{
				frame++;
				frameCounter = 0;
				if (frame >= 3)
				{
					frame = 0;
				}
			}
			position = base.Center;
			scale = ai[1];
			width = (height = (int)(22f * scale));
			base.Center = position;
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.85f, 0.9f);
			int num190 = 0;
			if ((double)scale < 0.85)
			{
				num190 = ((Main.rand.Next(3) == 0) ? 1 : 0);
			}
			else
			{
				num190 = 1;
				penetrate = -1;
				maxPenetrate = -1;
			}
			for (int num191 = 0; num191 < num190; num191++)
			{
				int num192 = Dust.NewDust(position, width, height, 226, velocity.X);
				Dust obj18 = Main.dust[num192];
				obj18.position -= Vector2.One * 3f;
				Main.dust[num192].scale = 0.5f;
				Main.dust[num192].noGravity = true;
				Main.dust[num192].velocity = velocity / 3f;
				Main.dust[num192].alpha = 255 - (int)(255f * scale);
			}
		}
		if (type == 709)
		{
			alpha -= 30;
			if (alpha < 0)
			{
				alpha = 0;
			}
			spriteDirection = direction;
			frameCounter++;
			if (frameCounter >= 3)
			{
				frame++;
				frameCounter = 0;
				if (frame >= 3)
				{
					frame = 0;
				}
			}
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.85f, 0.9f);
			if (ai[1] == 0f)
			{
				SoundEngine.PlayTrackedSound(in SoundID.DD2_SkyDragonsFuryShot, base.Center);
			}
			ai[1] += 1f;
			if (ai[1] >= 30f)
			{
				Kill();
				return;
			}
		}
		if (type == 442)
		{
			frame = 0;
			if (alpha != 0)
			{
				localAI[0] += 1f;
				if (localAI[0] >= 4f)
				{
					alpha -= 90;
					if (alpha < 0)
					{
						alpha = 0;
						localAI[0] = 2f;
					}
				}
			}
			if (Vector2.Distance(base.Center, new Vector2(ai[0], ai[1]) * 16f + Vector2.One * 8f) <= 16f)
			{
				Kill();
				return;
			}
			if (alpha == 0)
			{
				localAI[1] += 1f;
				if (localAI[1] >= 120f)
				{
					Kill();
					return;
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 0.45f, 0.8f);
				localAI[0] += 1f;
				if (localAI[0] == 3f)
				{
					localAI[0] = 0f;
					for (int num193 = 0; num193 < 8; num193++)
					{
						Vector2 spinningpoint3 = Vector2.UnitX * -8f;
						spinningpoint3 += -Vector2.UnitY.RotatedBy((float)num193 * (float)Math.PI / 4f) * new Vector2(2f, 4f);
						spinningpoint3 = spinningpoint3.RotatedBy(rotation - (float)Math.PI / 2f);
						int num194 = Dust.NewDust(base.Center, 0, 0, 135);
						Main.dust[num194].scale = 1.5f;
						Main.dust[num194].noGravity = true;
						Main.dust[num194].position = base.Center + spinningpoint3;
						Main.dust[num194].velocity = velocity * 0.66f;
					}
				}
			}
		}
		if (type == 440 || type == 449 || type == 606)
		{
			if (alpha > 0)
			{
				alpha -= 25;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (type == 440)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.25f, 0.4f, 0.7f);
			}
			if (type == 449)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.7f, 0.65f, 0.3f);
			}
			if (type == 606)
			{
				Lighting.AddLight(base.Center, 0.7f, 0.3f, 0.3f);
			}
			float num195 = 100f;
			float num196 = 3f;
			if (type == 606)
			{
				num195 = 150f;
				num196 = 5f;
			}
			if (ai[1] == 0f)
			{
				localAI[0] += num196;
				if (localAI[0] == num196 * 1f && type == 606)
				{
					for (int num197 = 0; num197 < 4; num197++)
					{
						int num198 = Dust.NewDust(base.Center - velocity / 2f, 0, 0, 182, 0f, 0f, 100, default(Color), 1.4f);
						Dust obj19 = Main.dust[num198];
						obj19.velocity *= 0.2f;
						Dust obj20 = Main.dust[num198];
						obj20.velocity += velocity / 10f;
						Main.dust[num198].noGravity = true;
					}
				}
				if (localAI[0] > num195)
				{
					localAI[0] = num195;
				}
			}
			else
			{
				localAI[0] -= num196;
				if (localAI[0] <= 0f)
				{
					Kill();
					return;
				}
			}
		}
		if (type == 438)
		{
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.1f, 0.2f);
		}
		if (type == 593)
		{
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.1f, 0.3f);
			if (++frameCounter >= 12)
			{
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
				frameCounter = 0;
			}
			if (Main.rand.Next(2) == 0)
			{
				Vector2 vector9 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
				Dust obj21 = Main.dust[Dust.NewDust(base.Center - vector9 * 8f, 0, 0, 240)];
				obj21.noGravity = true;
				obj21.position = base.Center - vector9 * 8f * scale;
				obj21.velocity = vector9.RotatedBy(-1.5707963705062866) * 2f;
				obj21.velocity = Vector2.Zero;
				obj21.scale = 0.5f + Main.rand.NextFloat();
				obj21.fadeIn = 0.5f;
			}
		}
		if (type == 592)
		{
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.15f, 0.15f, 0.4f);
		}
		if (type == 462)
		{
			int num200 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100);
			Main.dust[num200].noLight = true;
			Main.dust[num200].noGravity = true;
			Main.dust[num200].velocity = velocity;
			Dust obj22 = Main.dust[num200];
			obj22.position -= Vector2.One * 4f;
			Main.dust[num200].scale = 0.8f;
			if (++frameCounter >= 9)
			{
				frameCounter = 0;
				if (++frame >= 5)
				{
					frame = 0;
				}
			}
		}
		if (type == 437)
		{
			if (ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(in SoundID.Item12, position);
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				for (int num201 = 0; num201 < 4; num201++)
				{
					int num202 = Dust.NewDust(position, width, height, 226, velocity.X);
					Main.dust[num202].position = Vector2.Lerp(Main.dust[num202].position, base.Center, 0.25f);
					Main.dust[num202].scale = 0.5f;
					Main.dust[num202].noGravity = true;
					Dust obj23 = Main.dust[num202];
					obj23.velocity /= 2f;
					Dust obj24 = Main.dust[num202];
					obj24.velocity += velocity * 0.66f;
				}
			}
			if (ai[0] < 16f)
			{
				for (int num203 = 0; num203 < 2; num203++)
				{
					int num204 = Dust.NewDust(position, width, height, 226, velocity.X);
					Main.dust[num204].position = position + new Vector2((float)(((direction == 1) ? 1 : 0) * width), (float)(2 + (height - 4) * num203));
					Main.dust[num204].scale = 0.3f;
					Main.dust[num204].noGravity = true;
					Main.dust[num204].velocity = Vector2.Zero;
				}
			}
		}
		if (type == 435)
		{
			if (ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(in SoundID.Item12, position);
			}
			alpha -= 40;
			if (alpha < 0)
			{
				alpha = 0;
			}
			spriteDirection = direction;
			frameCounter++;
			if (frameCounter >= 3)
			{
				frame++;
				frameCounter = 0;
				if (frame >= 4)
				{
					frame = 0;
				}
			}
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 0.8f, 1.1f);
		}
		if (type == 682)
		{
			if (ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(in SoundID.DD2_LightningBugZap, position);
				for (int num205 = 0; num205 < 8; num205++)
				{
					Dust dust = Dust.NewDustDirect(position, width, height, 272);
					dust.velocity *= 1f;
					dust.velocity += velocity * 0.65f;
					dust.scale = 0.6f;
					dust.fadeIn = 0.8f;
					dust.noGravity = true;
					dust.noLight = true;
					dust.position += dust.velocity * 3f;
				}
			}
			alpha -= 40;
			if (alpha < 0)
			{
				alpha = 0;
			}
			spriteDirection = direction;
			frameCounter++;
			if (frameCounter >= 3)
			{
				frame++;
				frameCounter = 0;
				if (frame >= 4)
				{
					frame = 0;
				}
			}
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.5f, 0.2f, 1.1f);
		}
		if (type == 684)
		{
			alpha -= 40;
			if (alpha < 0)
			{
				alpha = 0;
			}
			spriteDirection = direction;
			localAI[0] += 1f;
			for (int num206 = 0; num206 < 1; num206++)
			{
				Vector2 spinningpoint4 = Utils.RandomVector2(Main.rand, -0.5f, 0.5f) * new Vector2(20f, 80f);
				spinningpoint4 = spinningpoint4.RotatedBy(velocity.ToRotation());
				Dust dust4 = Dust.NewDustDirect(base.Center, 0, 0, 60);
				dust4.alpha = 127;
				dust4.fadeIn = 1.5f;
				dust4.scale = 1.3f;
				dust4.velocity *= 0.3f;
				dust4.position = base.Center + spinningpoint4;
				dust4.noGravity = true;
				dust4.noLight = true;
				dust4.color = new Color(255, 255, 255, 0);
			}
			Lighting.AddLight(base.Center, 1.1f, 0.3f, 0.4f);
		}
		if (type == 408)
		{
			alpha -= 40;
			if (alpha < 0)
			{
				alpha = 0;
			}
			spriteDirection = direction;
		}
		if (type == 282)
		{
			int num207 = Dust.NewDust(position, width, height, 171, 0f, 0f, 100);
			Main.dust[num207].scale = (float)Main.rand.Next(1, 10) * 0.1f;
			Main.dust[num207].noGravity = true;
			Main.dust[num207].fadeIn = 1.5f;
			Dust obj25 = Main.dust[num207];
			obj25.velocity *= 0.25f;
			Dust obj26 = Main.dust[num207];
			obj26.velocity += velocity * 0.25f;
		}
		if (type == 275 || type == 276)
		{
			frameCounter++;
			if (frameCounter > 1)
			{
				frameCounter = 0;
				frame++;
				if (frame > 1)
				{
					frame = 0;
				}
			}
		}
		if (type == 225 && Main.rand.Next(2) == 0)
		{
			int num208 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 40);
			Main.dust[num208].noGravity = true;
			Main.dust[num208].scale = 1.3f;
			Dust obj27 = Main.dust[num208];
			obj27.velocity *= 0.5f;
		}
		if (type == 174)
		{
			if (alpha == 0)
			{
				int num209 = Dust.NewDust(oldPosition - velocity * 3f, width, height, 76, 0f, 0f, 50);
				Main.dust[num209].noGravity = true;
				Main.dust[num209].noLight = true;
				Dust obj28 = Main.dust[num209];
				obj28.velocity *= 0.5f;
			}
			alpha -= 50;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(in SoundID.Item17, position);
			}
		}
		else if (type == 605 || type == 920 || type == 921 || type == 926 || type == 937)
		{
			if (type == 920 && frameCounter == 0)
			{
				frameCounter = 1;
				frame = Main.rand.Next(3);
			}
			if (type != 920 && type != 921 && alpha == 0 && Main.rand.Next(3) == 0)
			{
				int num211 = 4;
				Color newColor = default(Color);
				((Color)(ref newColor))._002Ector(78, 136, 255, 150);
				float num212 = 1.2f;
				bool noGravity = true;
				int num213 = 0;
				if (type == 921)
				{
					num211 = 243;
					newColor = default(Color);
				}
				if (type == 926)
				{
					num211 = 4;
					newColor = NPC.AI_121_QueenSlime_GetDustColor();
					((Color)(ref newColor)).A = 150;
					num212 = 1.2f;
					num213 = 8;
					noGravity = Main.rand.Next(2) == 0;
				}
				if (type == 937)
				{
					num211 = 4;
					newColor = NPC.AI_121_QueenSlime_GetDustColor();
					((Color)(ref newColor)).A = 150;
				}
				int num214 = Dust.NewDust(position - new Vector2((float)num213, (float)num213) + velocity, width + num213 * 2, height + num213 * 2, num211, 0f, 0f, 50, newColor, num212);
				Dust obj29 = Main.dust[num214];
				obj29.velocity *= 0.3f;
				Dust obj30 = Main.dust[num214];
				obj30.velocity += velocity * 0.3f;
				Main.dust[num214].noGravity = noGravity;
			}
			alpha -= 50;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (type != 937 && ai[1] == 0f)
			{
				ai[1] = 1f;
				if (type == 926)
				{
					SoundEngine.PlaySound(in SoundID.Item155, position);
				}
				else
				{
					SoundEngine.PlaySound(in SoundID.Item154, position);
				}
			}
		}
		else if (type == 176)
		{
			if (alpha == 0)
			{
				int num215 = Dust.NewDust(oldPosition, width, height, 22, 0f, 0f, 100, default(Color), 0.5f);
				Main.dust[num215].noGravity = true;
				Main.dust[num215].noLight = true;
				Dust obj31 = Main.dust[num215];
				obj31.velocity *= 0.15f;
				Main.dust[num215].fadeIn = 0.8f;
			}
			alpha -= 50;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(in SoundID.Item17, position);
			}
		}
		if (type == 350)
		{
			alpha -= 100;
			if (alpha < 0)
			{
				alpha = 0;
			}
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.9f, 0.6f, 0.2f);
			if (alpha == 0)
			{
				int num216 = 2;
				if (Main.rand.Next(3) != 0)
				{
					int num217 = Dust.NewDust(new Vector2(base.Center.X - (float)num216, base.Center.Y - (float)num216 - 2f) - velocity * 0.5f, num216 * 2, num216 * 2, 6, 0f, 0f, 100);
					Main.dust[num217].scale *= 1.3f + (float)Main.rand.Next(10) * 0.05f;
					Dust obj32 = Main.dust[num217];
					obj32.velocity *= 0.2f;
					Main.dust[num217].noGravity = true;
					Main.dust[num217].noLight = true;
					Dust obj33 = Main.dust[num217];
					obj33.velocity += velocity * 0.25f;
				}
				if (Main.rand.Next(4) == 0)
				{
					int num218 = (num218 = Dust.NewDust(new Vector2(base.Center.X - (float)num216, base.Center.Y - (float)num216 - 2f) - velocity * 0.5f, num216 * 2, num216 * 2, 31, 0f, 0f, 100, default(Color), 0.5f));
					Main.dust[num218].fadeIn = 0.6f + (float)Main.rand.Next(5) * 0.1f;
					Dust obj34 = Main.dust[num218];
					obj34.velocity *= 0.05f;
					Dust obj35 = Main.dust[num218];
					obj35.velocity += velocity * 0.25f;
				}
			}
			if (ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(in SoundID.Item42, position);
			}
		}
		if (type == 325)
		{
			alpha -= 100;
			if (alpha < 0)
			{
				alpha = 0;
			}
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.9f, 0.6f, 0.2f);
			if (alpha == 0)
			{
				int num219 = 2;
				if (Main.rand.Next(3) != 0)
				{
					int num220 = Dust.NewDust(new Vector2(base.Center.X - (float)num219, base.Center.Y - (float)num219 - 2f) - velocity * 0.5f, num219 * 2, num219 * 2, 6, 0f, 0f, 100);
					Main.dust[num220].scale *= 1.2f + (float)Main.rand.Next(10) * 0.05f;
					Dust obj36 = Main.dust[num220];
					obj36.velocity *= 0.2f;
					Main.dust[num220].noGravity = true;
					Main.dust[num220].noLight = true;
					Dust obj37 = Main.dust[num220];
					obj37.velocity += velocity * 0.25f;
				}
				if (Main.rand.Next(4) == 0)
				{
					int num222 = (num222 = Dust.NewDust(new Vector2(base.Center.X - (float)num219, base.Center.Y - (float)num219 - 2f) - velocity * 0.5f, num219 * 2, num219 * 2, 31, 0f, 0f, 100, default(Color), 0.5f));
					Main.dust[num222].fadeIn = 0.5f + (float)Main.rand.Next(5) * 0.05f;
					Dust obj38 = Main.dust[num222];
					obj38.velocity *= 0.05f;
				}
			}
			if (ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(in SoundID.Item42, position);
			}
		}
		if (type == 469)
		{
			localAI[1] += 1f;
			if (localAI[1] > 2f)
			{
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
		}
		else if (type == 83 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(in SoundID.Item33, position);
		}
		else if (type == 408 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 19);
		}
		else if (type == 259 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(in SoundID.Item33, position);
		}
		else if (type == 110 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(in SoundID.Item11, position);
		}
		else if (type == 302 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(in SoundID.Item11, position);
		}
		else if (type == 438 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(in SoundID.Item12, position);
		}
		else if (type == 593 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(in SoundID.Item11, position);
		}
		else if (type == 592 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(in SoundID.Item12, position);
		}
		else if (type == 462 && ai[1] == 0f)
		{
			ai[1] = 1f;
			if (Main.rand.Next(2) == 0)
			{
				SoundEngine.PlaySound(in SoundID.Item124, position);
			}
			else
			{
				SoundEngine.PlaySound(in SoundID.Item125, position);
			}
			Vector2 vector10 = Vector2.Normalize(velocity);
			int num223 = Main.rand.Next(5, 10);
			for (int num224 = 0; num224 < num223; num224++)
			{
				int num225 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100);
				Main.dust[num225].velocity.Y -= 1f;
				Dust obj39 = Main.dust[num225];
				obj39.velocity += vector10 * 2f;
				Dust obj40 = Main.dust[num225];
				obj40.position -= Vector2.One * 4f;
				Main.dust[num225].noGravity = true;
			}
		}
		else if (type == 84 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(in SoundID.Item12, position);
		}
		else if (type == 389 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(in SoundID.Item12, position);
		}
		else if (type == 257 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(in SoundID.Item12, position);
		}
		else if (type == 100 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(in SoundID.Item33, position);
		}
		else if (type == 98 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(in SoundID.Item17, position);
		}
		else if (type == 184 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(in SoundID.Item17, position);
		}
		else if (type == 980 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(in SoundID.Item17, position);
		}
		else if (type == 195 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(in SoundID.Item17, position);
		}
		else if (type == 275 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(in SoundID.Item17, position);
		}
		else if (type == 276 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(in SoundID.Item17, position);
		}
		else if ((type == 81 || type == 82) && ai[1] == 0f)
		{
			SoundEngine.PlaySound(in SoundID.Item5, position);
			ai[1] = 1f;
		}
		else if (type == 180 && ai[1] == 0f)
		{
			SoundEngine.PlaySound(in SoundID.Item11, position);
			ai[1] = 1f;
		}
		else if (type == 248 && ai[1] == 0f)
		{
			SoundEngine.PlaySound(in SoundID.Item17, position);
			ai[1] = 1f;
		}
		else if (type == 576 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(in SoundID.Item12, position);
		}
		else if (type == 577 && soundDelay == 0)
		{
			soundDelay = -1;
			SoundEngine.PlaySound(in SoundID.Item36, position);
			for (int num226 = 0; num226 < 5; num226++)
			{
				Vector2 center4 = base.Center;
				int num227 = ((num226 != 0) ? 3 : 0);
				float num228 = ((num226 == 0) ? (12f + 8f * Main.rand.NextFloat()) : (12f * Main.rand.NextFloat()));
				Vector2 vector11 = velocity.SafeNormalize(Vector2.Zero) * num228 + Main.rand.NextVector2Circular(1f, 1f) * (float)num227;
				Dust obj41 = Main.dust[Dust.NewDust(center4, 8, 8, 229, 0f, 0f, 100, Color.Transparent, 1f + Main.rand.NextFloat() * 0.5f)];
				obj41.noGravity = true;
				obj41.velocity = vector11;
				obj41.position = center4;
			}
		}
		else if (type == 710)
		{
			alpha -= 25;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (Main.rand.Next(4) == 0)
			{
				int num229;
				if (Main.rand.Next(2) == 0)
				{
					num229 = Dust.NewDust(position, width, height, 31, 0f, 0f, 100, default(Color), 1.6f);
					Main.dust[num229].noGravity = true;
				}
				num229 = Dust.NewDust(position, width, height, 6, 0f, 0f, 100, default(Color), 1.2f);
				Main.dust[num229].noGravity = true;
				Dust obj42 = Main.dust[num229];
				obj42.velocity *= 2f;
				Dust obj43 = Main.dust[num229];
				obj43.velocity += velocity;
				if (ai[1] == -1f)
				{
					Main.dust[num229].fadeIn = 1.5f;
				}
				else
				{
					Main.dust[num229].fadeIn = 1.22f;
				}
				if (wet)
				{
					Kill();
				}
			}
		}
		else if (type == 639)
		{
			if (localAI[0] == 0f && localAI[1] == 0f)
			{
				localAI[0] = base.Center.X;
				localAI[1] = base.Center.Y;
				ai[0] = velocity.X;
				ai[1] = velocity.Y;
			}
			alpha -= 25;
			if (alpha < 0)
			{
				alpha = 0;
			}
		}
		else if (type == 640)
		{
			alpha -= 25;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (velocity == Vector2.Zero)
			{
				ai[0] = 0f;
				bool flag = true;
				for (int num230 = 1; num230 < oldPos.Length; num230++)
				{
					if (oldPos[num230] != oldPos[0])
					{
						flag = false;
					}
				}
				if (flag)
				{
					Kill();
					return;
				}
				if (Main.rand.Next(extraUpdates) == 0 && (velocity != Vector2.Zero || Main.rand.Next((localAI[1] == 2f) ? 2 : 6) == 0))
				{
					Vector2 vector13 = default(Vector2);
					for (int num231 = 0; num231 < 2; num231++)
					{
						float num233 = rotation + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
						float num234 = (float)Main.rand.NextDouble() * 0.8f + 1f;
						((Vector2)(ref vector13))._002Ector((float)Math.Cos(num233) * num234, (float)Math.Sin(num233) * num234);
						int num235 = Dust.NewDust(base.Center, 0, 0, 229, vector13.X, vector13.Y);
						Main.dust[num235].noGravity = true;
						Main.dust[num235].scale = 1.2f;
					}
					if (Main.rand.Next(10) == 0)
					{
						Vector2 vector14 = velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * (float)width;
						int num236 = Dust.NewDust(base.Center + vector14 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust obj44 = Main.dust[num236];
						obj44.velocity *= 0.5f;
						Main.dust[num236].velocity.Y = 0f - Math.Abs(Main.dust[num236].velocity.Y);
					}
				}
			}
			else if (numUpdates == 1)
			{
				float num237 = rotation + (float)Math.PI / 2f + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
				float num238 = (float)Main.rand.NextDouble() * 0.25f + 0.25f;
				Vector2 vector15 = default(Vector2);
				((Vector2)(ref vector15))._002Ector((float)Math.Cos(num237) * num238, (float)Math.Sin(num237) * num238);
				int num239 = Dust.NewDust(position, 0, 0, 229, vector15.X, vector15.Y);
				Main.dust[num239].noGravity = true;
				Main.dust[num239].scale = 1.2f;
			}
		}
		if (type == 41)
		{
			int num240 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.6f);
			Main.dust[num240].noGravity = true;
			num240 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
			Main.dust[num240].noGravity = true;
		}
		else if (type == 55)
		{
			int num241 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 18, 0f, 0f, 0, default(Color), 0.9f);
			Main.dust[num241].noGravity = true;
		}
		else if (type == 719)
		{
			if (Main.rand.Next(2) == 0)
			{
				Dust.NewDustDirect(position - velocity, width, height, 147, 0f, 0f, 0, default(Color), 0.9f).noGravity = true;
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				for (int num242 = 0; num242 < 20; num242++)
				{
					Dust dust5 = Dust.NewDustDirect(position - velocity, width, height, 147, 0f, 0f, 0, default(Color), 1.3f);
					dust5.noGravity = true;
					dust5.velocity += velocity * 0.75f;
				}
				for (int num3 = 0; num3 < 10; num3++)
				{
					Dust dust6 = Dust.NewDustDirect(position - velocity, width, height, 147, 0f, 0f, 0, default(Color), 1.3f);
					dust6.noGravity = true;
					dust6.velocity *= 2f;
				}
			}
		}
		else if (type == 763)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				for (int num4 = 0; num4 < 5; num4++)
				{
					Dust dust7 = Dust.NewDustDirect(position - velocity, width, height, 40, 0f, 0f, 0, default(Color), 1.1f);
					dust7.noGravity = true;
					dust7.velocity *= 1.5f;
				}
			}
		}
		else if (type == 772)
		{
			if (Main.rand.Next(7) == 0)
			{
				for (int num5 = 0; num5 < 1; num5++)
				{
					Dust dust8 = Dust.NewDustDirect(position - velocity, width, height, Main.rand.NextFromList<int>(86, 87, 88, 89, 90, 91, 138), 0f, 0f, 0, default(Color), 0.7f);
					dust8.noGravity = true;
					dust8.velocity = velocity * 0.6f;
					dust8.fadeIn = 0.8f;
				}
			}
		}
		else if (type == 374)
		{
			if (localAI[0] == 0f)
			{
				SoundEngine.PlaySound(in SoundID.Item17, position);
				localAI[0] = 1f;
			}
			if (Main.rand.Next(2) == 0)
			{
				int num6 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 18, 0f, 0f, 0, default(Color), 0.9f);
				Main.dust[num6].noGravity = true;
				Dust obj45 = Main.dust[num6];
				obj45.velocity *= 0.5f;
			}
		}
		else if (type == 376)
		{
			if (localAI[0] == 0f)
			{
				SoundEngine.PlaySound(in SoundID.Item20, position);
			}
			localAI[0] += 1f;
			if (localAI[0] > 3f)
			{
				int num7 = 1;
				if (localAI[0] > 5f)
				{
					num7 = 2;
				}
				for (int num8 = 0; num8 < num7; num8++)
				{
					int num9 = Dust.NewDust(new Vector2(position.X, position.Y + 2f), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
					Main.dust[num9].noGravity = true;
					Main.dust[num9].velocity.X *= 0.3f;
					Main.dust[num9].velocity.Y *= 0.3f;
					Main.dust[num9].noLight = true;
				}
				if (wet && !lavaWet)
				{
					Kill();
					return;
				}
			}
		}
		else if (type == 91 && Main.rand.Next(2) == 0)
		{
			int num243 = ((Main.rand.Next(2) != 0) ? 58 : 15);
			int num10 = Dust.NewDust(position, width, height, num243, velocity.X * 0.25f, velocity.Y * 0.25f, 150, default(Color), 0.9f);
			Dust obj46 = Main.dust[num10];
			obj46.velocity *= 0.25f;
		}
		if (type == 163 || type == 310 || type == 1008 || type == 1010 || type == 1009 || type == 1011)
		{
			if (alpha > 0)
			{
				alpha -= 25;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
		}
		switch (type)
		{
		case 14:
		case 20:
		case 36:
		case 83:
		case 84:
		case 89:
		case 100:
		case 104:
		case 110:
		case 158:
		case 159:
		case 160:
		case 161:
		case 180:
		case 279:
		case 283:
		case 284:
		case 285:
		case 286:
		case 287:
		case 389:
			if (alpha > 0)
			{
				alpha -= 15;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			break;
		case 576:
		case 577:
			localAI[1] += 1f;
			if (localAI[1] > 2f)
			{
				if (alpha > 0)
				{
					alpha -= 15;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			break;
		}
		if (type == 484)
		{
			int num11 = Dust.NewDust(position, width, height, 78);
			Main.dust[num11].noGravity = true;
			Dust obj47 = Main.dust[num11];
			obj47.velocity *= 0.1f;
			Main.dust[num11].scale = 0.75f;
			Main.dust[num11].position = (Main.dust[num11].position + base.Center) / 2f;
			Dust obj48 = Main.dust[num11];
			obj48.position += velocity * (float)Main.rand.Next(0, 101) * 0.01f;
		}
		if (type == 242 || type == 302 || type == 438 || type == 462 || type == 592)
		{
			float num13 = (float)Math.Sqrt(velocity.X * velocity.X + velocity.Y * velocity.Y);
			if (alpha > 0)
			{
				alpha -= (byte)((double)num13 * 0.9);
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
		}
		if (type == 660)
		{
			DelegateMethods.v3_1 = new Vector3(0.6f, 1f, 1f) * 0.2f;
			Utils.PlotTileLine(base.Center, base.Center + velocity * 10f, 8f, DelegateMethods.CastLightOpen);
			if (alpha > 0)
			{
				SoundEngine.PlaySound(in SoundID.Item9, base.Center);
				alpha = 0;
				scale = 1.1f;
				frame = Main.rand.Next(14);
				float num14 = 16f;
				for (int num15 = 0; (float)num15 < num14; num15++)
				{
					Vector2 spinningpoint5 = Vector2.UnitX * 0f;
					spinningpoint5 += -Vector2.UnitY.RotatedBy((float)num15 * ((float)Math.PI * 2f / num14)) * new Vector2(1f, 4f);
					spinningpoint5 = spinningpoint5.RotatedBy(velocity.ToRotation());
					int num16 = Dust.NewDust(base.Center, 0, 0, 180);
					Main.dust[num16].scale = 1.5f;
					Main.dust[num16].noGravity = true;
					Main.dust[num16].position = base.Center + spinningpoint5;
					Main.dust[num16].velocity = velocity * 0f + spinningpoint5.SafeNormalize(Vector2.UnitY) * 1f;
				}
			}
		}
		if (type == 712)
		{
			DelegateMethods.v3_1 = new Vector3(0.4f, 0.4f, 0.4f) * 0.7f;
			Utils.PlotTileLine(base.Center, base.Center + velocity * 10f, 8f, DelegateMethods.CastLightOpen);
			if (alpha == 255)
			{
				frame = Main.rand.Next(2) * 4;
			}
			if (++frameCounter >= 4)
			{
				frameCounter = 0;
				frame++;
				if (frame == 4)
				{
					frame = 0;
				}
				if (frame >= 8)
				{
					frame = 4;
				}
			}
			if (alpha > 0)
			{
				alpha = 0;
				scale = 1.1f;
				frame = Main.rand.Next(14);
				float num17 = 4f;
				for (int num18 = 0; (float)num18 < num17; num18++)
				{
					Vector2 spinningpoint6 = Vector2.UnitX * 0f;
					spinningpoint6 += -Vector2.UnitY.RotatedBy((float)num18 * ((float)Math.PI * 2f / num17)) * new Vector2(1f, 4f);
					spinningpoint6 = spinningpoint6.RotatedBy(velocity.ToRotation());
					int num19 = Dust.NewDust(base.Center, 0, 0, 15);
					Main.dust[num19].scale = 1.7f;
					Main.dust[num19].noGravity = true;
					Main.dust[num19].position = base.Center + spinningpoint6 + velocity.SafeNormalize(Vector2.Zero) * 50f;
					Main.dust[num19].velocity = Main.dust[num19].velocity * 2f + spinningpoint6.SafeNormalize(Vector2.UnitY) * 0.3f + velocity.SafeNormalize(Vector2.Zero) * 3f;
					Dust obj49 = Main.dust[num19];
					obj49.velocity *= 0.7f;
					Dust obj50 = Main.dust[num19];
					obj50.position += Main.dust[num19].velocity * 5f;
				}
			}
		}
		if (type == 661)
		{
			if (alpha <= 0)
			{
				for (int num20 = 0; num20 < 3; num20++)
				{
					int num21 = Dust.NewDust(position, width, height, 240);
					Main.dust[num21].noGravity = true;
					Dust obj51 = Main.dust[num21];
					obj51.velocity *= 0.3f;
					Main.dust[num21].noLight = true;
				}
			}
			if (alpha > 0)
			{
				alpha -= 55;
				scale = 1.3f;
				if (alpha < 0)
				{
					alpha = 0;
					float num22 = 16f;
					for (int num24 = 0; (float)num24 < num22; num24++)
					{
						Vector2 spinningpoint7 = Vector2.UnitX * 0f;
						spinningpoint7 += -Vector2.UnitY.RotatedBy((float)num24 * ((float)Math.PI * 2f / num22)) * new Vector2(1f, 4f);
						spinningpoint7 = spinningpoint7.RotatedBy(velocity.ToRotation());
						int num25 = Dust.NewDust(base.Center, 0, 0, 62);
						Main.dust[num25].scale = 1.5f;
						Main.dust[num25].noLight = true;
						Main.dust[num25].noGravity = true;
						Main.dust[num25].position = base.Center + spinningpoint7;
						Main.dust[num25].velocity = Main.dust[num25].velocity * 4f + velocity * 0.3f;
					}
				}
			}
		}
		if (type == 706)
		{
			if (wet)
			{
				Kill();
				return;
			}
			if (localAI[1] == 0f)
			{
				localAI[0] = SoundEngine.PlayTrackedSound(in SoundID.DD2_PhantomPhoenixShot, base.Center).ToFloat();
				localAI[1] += 1f;
				for (int num26 = 0; num26 < 15; num26++)
				{
					if (Main.rand.Next(4) != 0)
					{
						Dust dust9 = Dust.NewDustDirect(base.Center - base.Size / 4f, width / 2, height / 2, Utils.SelectRandom<int>(Main.rand, 6, 31, 31));
						dust9.noGravity = true;
						dust9.velocity *= 2.3f;
						dust9.fadeIn = 1.5f;
						dust9.noLight = true;
					}
				}
			}
			ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[0]));
			if (activeSound != null)
			{
				activeSound.Position = base.Center;
			}
			else
			{
				localAI[0] = SlotId.Invalid.ToFloat();
			}
			if (alpha <= 0)
			{
				for (int num27 = 0; num27 < 2; num27++)
				{
					if (Main.rand.Next(4) != 0)
					{
						Dust dust10 = Dust.NewDustDirect(base.Center - base.Size / 4f, width / 2, height / 2, Utils.SelectRandom<int>(Main.rand, 6, 31, 31));
						dust10.noGravity = true;
						dust10.velocity *= 2.3f;
						dust10.fadeIn = 1.5f;
						dust10.noLight = true;
					}
				}
				Vector2 spinningpoint8 = new Vector2(0f, (float)Math.Cos((float)frameCounter * ((float)Math.PI * 2f) / 40f - (float)Math.PI / 2f)) * 16f;
				spinningpoint8 = spinningpoint8.RotatedBy(rotation);
				Vector2 vector16 = velocity.SafeNormalize(Vector2.Zero);
				for (int num28 = 0; num28 < 1; num28++)
				{
					Dust dust11 = Dust.NewDustDirect(base.Center - base.Size / 4f, width / 2, height / 2, 6);
					dust11.noGravity = true;
					dust11.position = base.Center + spinningpoint8;
					dust11.velocity *= 0f;
					dust11.fadeIn = 1.4f;
					dust11.scale = 1.15f;
					dust11.noLight = true;
					dust11.position += velocity * 1.2f;
					dust11.velocity += vector16 * 2f;
					Dust dust12 = Dust.NewDustDirect(base.Center - base.Size / 4f, width / 2, height / 2, 6);
					dust12.noGravity = true;
					dust12.position = base.Center + spinningpoint8;
					dust12.velocity *= 0f;
					dust12.fadeIn = 1.4f;
					dust12.scale = 1.15f;
					dust12.noLight = true;
					dust12.position += velocity * 0.5f;
					dust12.position += velocity * 1.2f;
					dust12.velocity += vector16 * 2f;
				}
			}
			if (++frameCounter >= 40)
			{
				frameCounter = 0;
			}
			frame = frameCounter / 5;
			if (alpha > 0)
			{
				alpha -= 55;
				if (alpha < 0)
				{
					alpha = 0;
					float num29 = 16f;
					for (int num30 = 0; (float)num30 < num29; num30++)
					{
						Vector2 spinningpoint9 = Vector2.UnitX * 0f;
						spinningpoint9 += -Vector2.UnitY.RotatedBy((float)num30 * ((float)Math.PI * 2f / num29)) * new Vector2(1f, 4f);
						spinningpoint9 = spinningpoint9.RotatedBy(velocity.ToRotation());
						int num31 = Dust.NewDust(base.Center, 0, 0, 6);
						Main.dust[num31].scale = 1.5f;
						Main.dust[num31].noLight = true;
						Main.dust[num31].noGravity = true;
						Main.dust[num31].position = base.Center + spinningpoint9;
						Main.dust[num31].velocity = Main.dust[num31].velocity * 4f + velocity * 0.3f;
					}
				}
			}
			DelegateMethods.v3_1 = new Vector3(1f, 0.6f, 0.2f);
			Utils.PlotTileLine(base.Center, base.Center + velocity * 4f, 40f, DelegateMethods.CastLightOpen);
		}
		if (type == 638)
		{
			float num32 = ((Vector2)(ref velocity)).Length();
			if (alpha > 0)
			{
				alpha -= (byte)((double)num32 * 0.3);
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			Rectangle hitbox = base.Hitbox;
			((Rectangle)(ref hitbox)).Offset((int)velocity.X, (int)velocity.Y);
			bool flag2 = false;
			for (int num33 = 0; num33 < 200; num33++)
			{
				NPC nPC = Main.npc[num33];
				if (nPC.active && !nPC.dontTakeDamage && nPC.immune[owner] == 0 && localNPCImmunity[num33] == 0)
				{
					Rectangle hitbox2 = nPC.Hitbox;
					if (((Rectangle)(ref hitbox2)).Intersects(hitbox) && !nPC.friendly)
					{
						flag2 = true;
						break;
					}
				}
			}
			if (flag2)
			{
				int num35 = Main.rand.Next(15, 31);
				for (int num36 = 0; num36 < num35; num36++)
				{
					int num37 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, default(Color), 0.8f);
					Dust obj52 = Main.dust[num37];
					obj52.velocity *= 1.6f;
					Main.dust[num37].velocity.Y -= 1f;
					Dust obj53 = Main.dust[num37];
					obj53.velocity += velocity;
					Main.dust[num37].noGravity = true;
				}
			}
		}
		if (type == 257 || type == 593)
		{
			if (alpha > 0)
			{
				alpha -= 10;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
		}
		if (type == 876)
		{
			if (ai[1] == 0f)
			{
				tileCollide = true;
			}
			else
			{
				tileCollide = false;
			}
			if (alpha > 0)
			{
				alpha -= 10;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
		}
		if (type == 88)
		{
			if (alpha > 0)
			{
				alpha -= 10;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
		}
		if (type == 532)
		{
			ai[0] += 1f;
		}
		bool flag3 = true;
		bool flag4 = false;
		switch (type)
		{
		case 5:
		case 14:
		case 20:
		case 36:
		case 38:
		case 55:
		case 83:
		case 84:
		case 88:
		case 89:
		case 98:
		case 100:
		case 104:
		case 110:
		case 158:
		case 159:
		case 160:
		case 161:
		case 180:
		case 184:
		case 242:
		case 248:
		case 257:
		case 259:
		case 265:
		case 270:
		case 279:
		case 283:
		case 284:
		case 285:
		case 286:
		case 287:
		case 299:
		case 302:
		case 323:
		case 325:
		case 348:
		case 349:
		case 350:
		case 355:
		case 374:
		case 376:
		case 389:
		case 435:
		case 436:
		case 438:
		case 440:
		case 442:
		case 449:
		case 459:
		case 462:
		case 467:
		case 468:
		case 469:
		case 472:
		case 483:
		case 484:
		case 485:
		case 498:
		case 576:
		case 577:
		case 585:
		case 592:
		case 593:
		case 601:
		case 606:
		case 616:
		case 634:
		case 635:
		case 638:
		case 639:
		case 660:
		case 661:
		case 682:
		case 684:
		case 706:
		case 709:
		case 710:
		case 712:
		case 876:
		case 980:
		case 981:
			flag3 = false;
			break;
		case 1006:
			flag4 = true;
			break;
		}
		if (flag3)
		{
			ai[0] += 1f;
		}
		if (type == 1006 && Main.rand.Next(8) == 0)
		{
			Dust dust13 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(4f, 4f), 306, velocity * 1.25f, 0, Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f), 1f + Main.rand.NextFloat() * 0.4f);
			dust13.noGravity = true;
			dust13.fadeIn = dust13.scale + 0.05f;
			Dust dust14 = Dust.CloneDust(dust13);
			dust14.color = Color.White;
			dust14.scale -= 0.3f;
		}
		if (type == 270)
		{
			int num38 = 0;
			num38 = Player.FindClosest(base.Center, 1, 1);
			ai[1] += 1f;
			if (ai[1] < 110f && ai[1] > 30f)
			{
				float num39 = ((Vector2)(ref velocity)).Length();
				Vector2 vector17 = Main.player[num38].Center - base.Center;
				((Vector2)(ref vector17)).Normalize();
				vector17 *= num39;
				velocity = (velocity * 24f + vector17) / 25f;
				((Vector2)(ref velocity)).Normalize();
				velocity *= num39;
			}
			if (((Vector2)(ref velocity)).Length() < 18f)
			{
				velocity *= 1.02f;
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(in SoundID.Item8, position);
				for (int num40 = 0; num40 < 10; num40++)
				{
					int num41 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 5, velocity.X, velocity.Y, 0, default(Color), 2f);
					Main.dust[num41].noGravity = true;
					Main.dust[num41].velocity = base.Center - Main.dust[num41].position;
					((Vector2)(ref Main.dust[num41].velocity)).Normalize();
					Dust obj54 = Main.dust[num41];
					obj54.velocity *= -5f;
					Dust obj55 = Main.dust[num41];
					obj55.velocity += velocity / 2f;
				}
			}
		}
		if (type == 585)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(in SoundID.Item8, position);
				for (int num42 = 0; num42 < 3; num42++)
				{
					int num43 = Dust.NewDust(position, width, height, 27, velocity.X, velocity.Y, 0, default(Color), 2f);
					Main.dust[num43].noGravity = true;
					Main.dust[num43].velocity = base.Center - Main.dust[num43].position;
					((Vector2)(ref Main.dust[num43].velocity)).Normalize();
					Dust obj56 = Main.dust[num43];
					obj56.velocity *= -5f;
					Dust obj57 = Main.dust[num43];
					obj57.velocity += velocity / 2f;
					Main.dust[num43].noLight = true;
				}
			}
			if (alpha > 0)
			{
				alpha -= 50;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			frameCounter++;
			if (frameCounter >= 12)
			{
				frameCounter = 0;
			}
			frame = frameCounter / 2;
			if (frame > 3)
			{
				frame = 6 - frame;
			}
			Vector3 vector18 = ((Color)(ref NPCID.Sets.MagicAuraColor[54])).ToVector3();
			Lighting.AddLight(base.Center, vector18.X, vector18.Y, vector18.Z);
			if (Main.rand.Next(3) == 0)
			{
				int num44 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, 27, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
				Dust obj58 = Main.dust[num44];
				obj58.position -= velocity * 2f;
				Main.dust[num44].noLight = true;
				Main.dust[num44].noGravity = true;
				Main.dust[num44].velocity.X *= 0.3f;
				Main.dust[num44].velocity.Y *= 0.3f;
			}
		}
		if (type == 594)
		{
			int num46 = (int)(43f - ai[1]) / 13;
			if (num46 < 1)
			{
				num46 = 1;
			}
			int num47 = ((ai[1] < 20f) ? 6 : 31);
			for (int num48 = 0; num48 < num46; num48++)
			{
				int num49 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, num47, velocity.X * 0.2f, velocity.Y * 0.2f, 0, default(Color), 2f);
				Dust obj59 = Main.dust[num49];
				obj59.position -= velocity * 2f;
				Main.dust[num49].noLight = true;
				Main.dust[num49].noGravity = true;
				Main.dust[num49].velocity.X *= 0.3f;
				Main.dust[num49].velocity.Y *= 0.3f;
				if (num47 == 6)
				{
					Main.dust[num49].fadeIn = Main.rand.NextFloat() * 2f;
				}
			}
			ai[1] += 1f;
			if (ai[1] > (float)(43 * MaxUpdates))
			{
				Kill();
				return;
			}
		}
		if (type == 622)
		{
			int num50 = 229;
			if (Main.rand.Next(3) != 0)
			{
				int num51 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, num50, velocity.X * 0.2f, velocity.Y * 0.2f, 0, default(Color), 1.2f);
				Dust obj60 = Main.dust[num51];
				obj60.position -= velocity * 2f;
				Main.dust[num51].noLight = true;
				Main.dust[num51].noGravity = true;
				Main.dust[num51].velocity.X *= 0.3f;
				Main.dust[num51].velocity.Y *= 0.3f;
			}
			ai[1] += 1f;
			if (ai[1] > (float)(23 * MaxUpdates))
			{
				Kill();
				return;
			}
		}
		if (type == 587)
		{
			Color newColor2 = Main.hslToRgb(ai[1], 1f, 0.5f);
			((Color)(ref newColor2)).A = 200;
			localAI[0] += 1f;
			if (!(localAI[0] < 2f))
			{
				if (localAI[0] == 2f)
				{
					SoundEngine.PlaySound(in SoundID.Item5, position);
					for (int num52 = 0; num52 < 4; num52++)
					{
						int num53 = Dust.NewDust(position, width, height, 76, velocity.X, velocity.Y, 0, newColor2, 1.1f);
						Main.dust[num53].noGravity = true;
						Main.dust[num53].velocity = base.Center - Main.dust[num53].position;
						((Vector2)(ref Main.dust[num53].velocity)).Normalize();
						Dust obj61 = Main.dust[num53];
						obj61.velocity *= -3f;
						Dust obj62 = Main.dust[num53];
						obj62.velocity += velocity / 2f;
					}
				}
				else
				{
					frame++;
					if (frame > 2)
					{
						frame = 0;
					}
					for (int num54 = 0; num54 < 1; num54++)
					{
						int num55 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, 76, velocity.X * 0.2f, velocity.Y * 0.2f, 0, newColor2, 0.9f);
						Main.dust[num55].position = base.Center;
						Main.dust[num55].noGravity = true;
						Main.dust[num55].velocity = velocity * 0.5f;
					}
				}
			}
		}
		if (type == 349)
		{
			frame = (int)ai[0];
			velocity.Y += 0.2f;
			if (localAI[0] == 0f || localAI[0] == 2f)
			{
				scale += 0.01f;
				alpha -= 50;
				if (alpha <= 0)
				{
					localAI[0] = 1f;
					alpha = 0;
				}
			}
			else if (localAI[0] == 1f)
			{
				scale -= 0.01f;
				alpha += 50;
				if (alpha >= 255)
				{
					localAI[0] = 2f;
					alpha = 255;
				}
			}
		}
		if (type == 348)
		{
			if (localAI[1] == 0f)
			{
				localAI[1] = 1f;
				SoundEngine.PlaySound(in SoundID.Item8, position);
			}
			if (ai[0] == 0f || ai[0] == 2f)
			{
				scale += 0.01f;
				alpha -= 50;
				if (alpha <= 0)
				{
					ai[0] = 1f;
					alpha = 0;
				}
			}
			else if (ai[0] == 1f)
			{
				scale -= 0.01f;
				alpha += 50;
				if (alpha >= 255)
				{
					ai[0] = 2f;
					alpha = 255;
				}
			}
		}
		if (type == 572)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(in SoundID.Item17, position);
			}
			for (int num57 = 0; num57 < 2; num57++)
			{
				int num58 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 40, velocity.X, velocity.Y, 100);
				Dust obj63 = Main.dust[num58];
				obj63.velocity *= 0.5f;
				Dust obj64 = Main.dust[num58];
				obj64.velocity += velocity;
				Dust obj65 = Main.dust[num58];
				obj65.velocity *= 0.5f;
				Main.dust[num58].noGravity = true;
				Main.dust[num58].scale = 1.2f;
				Main.dust[num58].position = (base.Center + position) / 2f;
			}
		}
		if (type == 577)
		{
			Lighting.AddLight(base.Center, 0.1f, 0.3f, 0.4f);
		}
		else if (type == 576)
		{
			Lighting.AddLight(base.Center, 0.4f, 0.2f, 0.4f);
			for (int num59 = 0; num59 < 5; num59++)
			{
				Dust obj66 = Main.dust[Dust.NewDust(position, width, height, 242, velocity.X, velocity.Y, 100)];
				obj66.velocity = Vector2.Zero;
				obj66.position -= velocity / 5f * (float)num59;
				obj66.noGravity = true;
				obj66.scale = 0.8f;
				obj66.noLight = true;
			}
		}
		else if (type == 581)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(in SoundID.Item17, base.Center);
			}
			for (int num60 = 0; num60 < 2; num60++)
			{
				int num61 = Utils.SelectRandom<int>(Main.rand, 229, 161, 161);
				Dust obj67 = Main.dust[Dust.NewDust(position, width, height, num61, velocity.X, velocity.Y, 100)];
				obj67.velocity = obj67.velocity / 4f + velocity / 2f;
				obj67.noGravity = true;
				obj67.scale = 1.2f;
				obj67.position = base.Center;
				obj67.noLight = true;
			}
		}
		else if (type == 671)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				for (int num62 = 0; num62 < 8; num62++)
				{
					int num63 = Utils.SelectRandom<int>(Main.rand, 27, 62);
					Dust obj68 = Main.dust[Dust.NewDust(position, width, height, num63, velocity.X, velocity.Y, 100)];
					obj68.velocity = (Main.rand.NextFloatDirection() * (float)Math.PI).ToRotationVector2() * 2f + velocity.SafeNormalize(Vector2.Zero) * 3f;
					obj68.noGravity = true;
					obj68.scale = 1.5f;
					obj68.fadeIn = 1.2f;
					obj68.position = base.Center;
					obj68.noLight = true;
				}
			}
			alpha -= 20;
			if (alpha < 0)
			{
				alpha = 0;
			}
			for (int num64 = 0; num64 < 2; num64++)
			{
				int num65 = Utils.SelectRandom<int>(Main.rand, 27, 27, 62);
				Dust obj69 = Main.dust[Dust.NewDust(position, width, height, num65, velocity.X, velocity.Y, 100)];
				obj69.velocity = obj69.velocity / 4f + velocity / 2f;
				obj69.noGravity = true;
				obj69.scale = 1.2f;
				obj69.position = base.Center;
				obj69.noLight = true;
			}
		}
		else if (type == 811)
		{
			if (localAI[0] == 0f)
			{
				SoundEngine.PlaySound(in SoundID.Item17, base.Center);
				localAI[0] = 1f;
				for (int num66 = 0; num66 < 8; num66++)
				{
					Dust obj70 = Main.dust[Dust.NewDust(position, width, height, 5, velocity.X, velocity.Y, 100)];
					obj70.velocity = (Main.rand.NextFloatDirection() * (float)Math.PI).ToRotationVector2() * 2f + velocity.SafeNormalize(Vector2.Zero) * 3f;
					obj70.scale = 1.5f;
					obj70.fadeIn = 1.7f;
					obj70.position = base.Center;
				}
			}
			alpha -= 20;
			if (alpha < 0)
			{
				alpha = 0;
			}
			for (int num68 = 0; num68 < 2; num68++)
			{
				Dust obj71 = Main.dust[Dust.NewDust(position, width, height, 5, velocity.X, velocity.Y, 100)];
				obj71.velocity = obj71.velocity / 4f + velocity / 2f;
				obj71.scale = 1.2f;
				obj71.position = base.Center + Main.rand.NextFloat() * velocity * 2f;
			}
		}
		else if (type == 819)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				for (int num69 = 0; num69 < 8; num69++)
				{
					Dust obj72 = Main.dust[Dust.NewDust(position, width, height, 5, velocity.X, velocity.Y, 100)];
					obj72.velocity = (Main.rand.NextFloatDirection() * (float)Math.PI).ToRotationVector2() * 2f + velocity.SafeNormalize(Vector2.Zero) * 2f;
					obj72.scale = 0.9f;
					obj72.fadeIn = 1.3f;
					obj72.position = base.Center;
				}
			}
			alpha -= 20;
			if (alpha < 0)
			{
				alpha = 0;
			}
			for (int num70 = 1; num70 < 6; num70++)
			{
				Dust obj73 = Main.dust[Dust.NewDust(position, width, height, 5, 0f, 0f, 100)];
				obj73.velocity = obj73.velocity * 0.5f + velocity * 0.5f;
				obj73.velocity *= 0.25f;
				obj73.scale = 0.9f;
				obj73.position = base.Center - velocity * (float)num70 / 5f;
			}
			if (Main.rand.Next(2) == 0)
			{
				Dust dust15 = Dust.NewDustPerfect(base.Center - velocity * 3f, 267, velocity * 0.5f, 0, Color.Red * (Main.rand.NextFloat() * 0.3f + 0.1f));
				dust15.noGravity = true;
				dust15.scale = 0.7f;
			}
			Lighting.AddLight(base.Center, 0.3f, 0.05f, 0.05f);
		}
		else if (type == 814)
		{
			if (localAI[0] == 0f)
			{
				SoundEngine.PlaySound(in SoundID.Item171, base.Center);
				localAI[0] = 1f;
				for (int num71 = 0; num71 < 8; num71++)
				{
					Dust obj74 = Main.dust[Dust.NewDust(position, width, height, 5, velocity.X, velocity.Y, 100)];
					obj74.velocity = (Main.rand.NextFloatDirection() * (float)Math.PI).ToRotationVector2() * 2f + velocity.SafeNormalize(Vector2.Zero) * 2f;
					obj74.scale = 0.9f;
					obj74.fadeIn = 1.1f;
					obj74.position = base.Center;
				}
			}
			alpha -= 20;
			if (alpha < 0)
			{
				alpha = 0;
			}
			for (int num72 = 0; num72 < 2; num72++)
			{
				Dust obj75 = Main.dust[Dust.NewDust(position, width, height, 5, velocity.X, velocity.Y, 100)];
				obj75.velocity = obj75.velocity / 4f + velocity / 2f;
				obj75.scale = 1.2f;
				obj75.position = base.Center + Main.rand.NextFloat() * velocity * 2f;
			}
			for (int num73 = 1; num73 < oldPos.Length && !(oldPos[num73] == Vector2.Zero); num73++)
			{
				if (Main.rand.Next(3) == 0)
				{
					Dust obj76 = Main.dust[Dust.NewDust(oldPos[num73], width, height, 5, velocity.X, velocity.Y, 100)];
					obj76.velocity = obj76.velocity / 4f + velocity / 2f;
					obj76.scale = 1.2f;
					obj76.position = oldPos[num73] + base.Size / 2f + Main.rand.NextFloat() * velocity * 2f;
				}
			}
		}
		else if (type == 675)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlayTrackedSound(in SoundID.DD2_DarkMageAttack, base.Center);
			}
			alpha -= 20;
			if (alpha < 0)
			{
				alpha = 0;
			}
		}
		else if (type == 676)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(in SoundID.Item17, base.Center);
			}
			alpha -= 20;
			if (alpha < 0)
			{
				alpha = 0;
			}
			for (int num74 = 0; num74 < 2; num74++)
			{
				if (Main.rand.Next(5) != 0)
				{
					int num75 = Utils.SelectRandom<int>(Main.rand, 4, 256);
					Dust dust2 = Main.dust[Dust.NewDust(position, width, height, num75, velocity.X, velocity.Y, 100)];
					dust2.velocity = dust2.velocity / 4f + velocity / 2f;
					dust2.scale = 0.8f + Main.rand.NextFloat() * 0.4f;
					dust2.position = base.Center;
					dust2.position += Utils.RotatedBy(new Vector2((float)(width * 2), 0f), (float)Math.PI * 2f * Main.rand.NextFloat()) * Main.rand.NextFloat();
					dust2.noLight = true;
					if (dust2.type == 4)
					{
						dust2.color = new Color(80, 170, 40, 120);
					}
				}
			}
		}
		else if (type == 686)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlayTrackedSound(in SoundID.DD2_BetsyFireballShot, base.Center);
			}
			if (ai[0] >= 2f)
			{
				alpha -= 25;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (Main.rand.Next(4) == 0)
			{
				Dust dust16 = Dust.NewDustDirect(position, width, height, 55, 0f, 0f, 200);
				dust16.scale *= 0.7f;
				dust16.velocity += velocity * 1f;
			}
			if (Main.rand.Next(3) == 0 && oldPos[9] != Vector2.Zero)
			{
				Dust dust17 = Dust.NewDustDirect(oldPos[9], width, height, 55, 0f, 0f, 50);
				dust17.scale *= 0.85f;
				dust17.velocity += velocity * 0.85f;
				dust17.color = Color.Purple;
			}
		}
		else if (type == 711)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				for (int num76 = 0; num76 < 10; num76++)
				{
					Dust dust18 = Dust.NewDustDirect(position, width, height, 55, 0f, 0f, 200);
					dust18.scale *= 0.65f;
					dust18.velocity *= 1.5f;
					dust18.velocity += velocity * 0.3f;
					dust18.fadeIn = 0.7f;
				}
			}
			if (ai[0] >= 2f)
			{
				alpha -= 25;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (Main.rand.Next(4) == 0)
			{
				Dust dust19 = Dust.NewDustDirect(position, width, height, 55, 0f, 0f, 200);
				dust19.scale *= 0.7f;
				dust19.velocity += velocity * 1f;
			}
			if (Main.rand.Next(3) == 0 && oldPos[9] != Vector2.Zero)
			{
				Dust dust20 = Dust.NewDustDirect(oldPos[9], width, height, 55, 0f, 0f, 50);
				dust20.scale *= 0.85f;
				dust20.velocity += velocity * 0.85f;
				dust20.color = Color.Purple;
			}
		}
		if (type == 299)
		{
			if (localAI[0] == 6f)
			{
				SoundEngine.PlaySound(in SoundID.Item8, position);
				for (int num77 = 0; num77 < 40; num77++)
				{
					int num79 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 181, 0f, 0f, 100);
					Dust obj77 = Main.dust[num79];
					obj77.velocity *= 3f;
					Dust obj78 = Main.dust[num79];
					obj78.velocity += velocity * 0.75f;
					Main.dust[num79].scale *= 1.2f;
					Main.dust[num79].noGravity = true;
				}
			}
			localAI[0] += 1f;
			if (localAI[0] > 6f)
			{
				for (int num80 = 0; num80 < 3; num80++)
				{
					int num81 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 181, velocity.X * 0.2f, velocity.Y * 0.2f, 100);
					Dust obj79 = Main.dust[num81];
					obj79.velocity *= 0.6f;
					Main.dust[num81].scale *= 1.4f;
					Main.dust[num81].noGravity = true;
				}
			}
		}
		else if (type == 270 || type == 837)
		{
			if (type == 270)
			{
				alpha = 0;
			}
			if (alpha > 0)
			{
				alpha -= 50;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			frame++;
			if (frame > 2)
			{
				frame = 0;
			}
			if (type == 270)
			{
				for (int num82 = 0; num82 < 2; num82++)
				{
					int num83 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, 5, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 1.5f);
					Dust obj80 = Main.dust[num83];
					obj80.position -= velocity;
					Main.dust[num83].noGravity = true;
					Main.dust[num83].velocity.X *= 0.3f;
					Main.dust[num83].velocity.Y *= 0.3f;
				}
			}
			else
			{
				for (int num84 = 0; num84 < 2; num84++)
				{
					int num85 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
					Dust obj81 = Main.dust[num85];
					obj81.position -= velocity * 2f;
					Main.dust[num85].noGravity = true;
					Main.dust[num85].velocity.X *= 0.3f;
					Main.dust[num85].velocity.Y *= 0.3f;
				}
			}
		}
		if (type == 259)
		{
			if (alpha > 0)
			{
				alpha -= 10;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
		}
		if (type == 265)
		{
			if (alpha > 0)
			{
				alpha -= 50;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (alpha == 0)
			{
				int num86 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 163, velocity.X, velocity.Y, 100, default(Color), 1.2f);
				Main.dust[num86].noGravity = true;
				Dust obj82 = Main.dust[num86];
				obj82.velocity *= 0.3f;
				Dust obj83 = Main.dust[num86];
				obj83.velocity -= velocity * 0.4f;
			}
		}
		if (type == 355)
		{
			if (alpha > 0)
			{
				alpha -= 50;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (alpha == 0)
			{
				int num87 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 205, velocity.X, velocity.Y, 100, default(Color), 1.2f);
				Main.dust[num87].noGravity = true;
				Dust obj84 = Main.dust[num87];
				obj84.velocity *= 0.3f;
				Dust obj85 = Main.dust[num87];
				obj85.velocity -= velocity * 0.4f;
			}
		}
		if (type == 981 && Main.rand.Next(6) == 0)
		{
			int num88 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 279, velocity.X, velocity.Y, 100, default(Color), 1.2f);
			Main.dust[num88].noLightEmittence = true;
			Main.dust[num88].noGravity = true;
			Dust obj86 = Main.dust[num88];
			obj86.velocity *= 0.2f;
		}
		if (type == 357)
		{
			if (alpha < 170)
			{
				for (int num90 = 0; num90 < 10; num90++)
				{
					float x = position.X - velocity.X / 10f * (float)num90;
					float y = position.Y - velocity.Y / 10f * (float)num90;
					int num91 = Dust.NewDust(new Vector2(x, y), 1, 1, 206);
					Main.dust[num91].alpha = alpha;
					Main.dust[num91].position.X = x;
					Main.dust[num91].position.Y = y;
					Dust obj87 = Main.dust[num91];
					obj87.velocity *= 0f;
					Main.dust[num91].noGravity = true;
				}
			}
			if (alpha > 0)
			{
				alpha -= 25;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
		}
		else if (type == 207 || type == 837)
		{
			if (type == 207 && alpha < 170)
			{
				for (int num92 = 0; num92 < 10; num92++)
				{
					float x2 = position.X - velocity.X / 10f * (float)num92;
					float y2 = position.Y - velocity.Y / 10f * (float)num92;
					int num93 = Dust.NewDust(new Vector2(x2, y2), 1, 1, 75);
					Main.dust[num93].alpha = alpha;
					Main.dust[num93].position.X = x2;
					Main.dust[num93].position.Y = y2;
					Dust obj88 = Main.dust[num93];
					obj88.velocity *= 0f;
					Main.dust[num93].noGravity = true;
				}
			}
			float num94 = (float)Math.Sqrt(velocity.X * velocity.X + velocity.Y * velocity.Y);
			float num95 = localAI[0];
			if (num95 == 0f)
			{
				localAI[0] = num94;
				num95 = num94;
			}
			if (alpha > 0)
			{
				alpha -= 25;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			float num96 = position.X;
			float num97 = position.Y;
			float num98 = 300f;
			bool flag5 = false;
			int num99 = 0;
			if (ai[1] == 0f)
			{
				for (int num101 = 0; num101 < 200; num101++)
				{
					if (Main.npc[num101].CanBeChasedBy(this) && (ai[1] == 0f || ai[1] == (float)(num101 + 1)))
					{
						float num102 = Main.npc[num101].position.X + (float)(Main.npc[num101].width / 2);
						float num103 = Main.npc[num101].position.Y + (float)(Main.npc[num101].height / 2);
						float num104 = Math.Abs(position.X + (float)(width / 2) - num102) + Math.Abs(position.Y + (float)(height / 2) - num103);
						if (num104 < num98 && Collision.CanHit(new Vector2(position.X + (float)(width / 2), position.Y + (float)(height / 2)), 1, 1, Main.npc[num101].position, Main.npc[num101].width, Main.npc[num101].height))
						{
							num98 = num104;
							num96 = num102;
							num97 = num103;
							flag5 = true;
							num99 = num101;
						}
					}
				}
				if (flag5)
				{
					ai[1] = num99 + 1;
				}
				flag5 = false;
			}
			if (ai[1] > 0f)
			{
				int num105 = (int)(ai[1] - 1f);
				if (Main.npc[num105].active && Main.npc[num105].CanBeChasedBy(this, ignoreDontTakeDamage: true) && !Main.npc[num105].dontTakeDamage)
				{
					float num106 = Main.npc[num105].position.X + (float)(Main.npc[num105].width / 2);
					float num107 = Main.npc[num105].position.Y + (float)(Main.npc[num105].height / 2);
					if (Math.Abs(position.X + (float)(width / 2) - num106) + Math.Abs(position.Y + (float)(height / 2) - num107) < 1000f)
					{
						flag5 = true;
						num96 = Main.npc[num105].position.X + (float)(Main.npc[num105].width / 2);
						num97 = Main.npc[num105].position.Y + (float)(Main.npc[num105].height / 2);
					}
				}
				else
				{
					ai[1] = 0f;
				}
			}
			if (!friendly)
			{
				flag5 = false;
			}
			if (flag5)
			{
				float num244 = num95;
				Vector2 vector19 = default(Vector2);
				((Vector2)(ref vector19))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num108 = num96 - vector19.X;
				float num109 = num97 - vector19.Y;
				float num112 = (float)Math.Sqrt(num108 * num108 + num109 * num109);
				num112 = num244 / num112;
				num108 *= num112;
				num109 *= num112;
				int num113 = 8;
				if (type == 837)
				{
					num113 = 32;
				}
				velocity.X = (velocity.X * (float)(num113 - 1) + num108) / (float)num113;
				velocity.Y = (velocity.Y * (float)(num113 - 1) + num109) / (float)num113;
			}
		}
		else if (type == 81 || type == 91)
		{
			if (ai[0] >= 20f)
			{
				ai[0] = 20f;
				velocity.Y += 0.07f;
			}
		}
		else if (type == 174 || type == 605 || type == 920 || type == 921 || type == 926)
		{
			if (ai[0] >= 5f)
			{
				ai[0] = 5f;
				velocity.Y += 0.15f;
			}
		}
		else if (type == 937)
		{
			if (ai[0] >= 5f)
			{
				ai[0] = 5f;
				velocity.Y += 0.07f;
			}
		}
		else if (type == 962)
		{
			frame = (int)ai[1];
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				rotation = velocity.ToRotation();
				for (int num114 = 0; num114 < 5; num114++)
				{
					Dust dust21 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(24f, 24f), 16, velocity * MathHelper.Lerp(0.2f, 0.7f, Main.rand.NextFloat()));
					dust21.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
					dust21.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
				}
				for (int num115 = 0; num115 < 5; num115++)
				{
					Dust dust22 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(24f, 24f), 16, Main.rand.NextVector2Circular(2f, 2f) + velocity * MathHelper.Lerp(0.2f, 0.5f, Main.rand.NextFloat()));
					dust22.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
					dust22.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
					dust22.fadeIn = 1f;
				}
			}
			if (ai[0] >= 5f)
			{
				velocity.Y += 0.15f;
			}
		}
		else if (type == 337)
		{
			if (position.Y > Main.player[owner].position.Y - 300f)
			{
				tileCollide = true;
			}
			if ((double)position.Y < Main.worldSurface * 16.0)
			{
				tileCollide = true;
			}
			frame = (int)ai[1];
			if (Main.rand.Next(2) == 0)
			{
				int num116 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 197);
				Dust obj89 = Main.dust[num116];
				obj89.velocity *= 0.5f;
				Main.dust[num116].noGravity = true;
			}
		}
		else if (type == 645)
		{
			if (ai[1] != -1f && position.Y > ai[1])
			{
				tileCollide = true;
			}
			if (position.HasNaNs())
			{
				Kill();
				return;
			}
			bool num245 = WorldGen.SolidTile(Framing.GetTileSafely((int)position.X / 16, (int)position.Y / 16));
			Dust dust3 = Main.dust[Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229)];
			dust3.position = base.Center;
			dust3.velocity = Vector2.Zero;
			dust3.noGravity = true;
			if (num245)
			{
				dust3.noLight = true;
			}
			if (ai[1] == -1f)
			{
				ai[0] += 1f;
				velocity = Vector2.Zero;
				tileCollide = false;
				penetrate = -1;
				position = base.Center;
				width = (height = 140);
				base.Center = position;
				alpha -= 10;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (++frameCounter >= MaxUpdates * 3)
				{
					frameCounter = 0;
					frame++;
				}
				if (ai[0] >= (float)(Main.projFrames[type] * MaxUpdates * 3))
				{
					Kill();
				}
				return;
			}
			alpha = 255;
			if (numUpdates == 0)
			{
				int num117 = -1;
				float num118 = 60f;
				for (int num119 = 0; num119 < 200; num119++)
				{
					NPC nPC2 = Main.npc[num119];
					if (nPC2.CanBeChasedBy(this))
					{
						float num120 = Distance(nPC2.Center);
						if (num120 < num118 && Collision.CanHitLine(base.Center, 0, 0, nPC2.Center, 0, 0))
						{
							num118 = num120;
							num117 = num119;
						}
					}
				}
				if (num117 != -1)
				{
					ai[0] = 0f;
					ai[1] = -1f;
					netUpdate = true;
					return;
				}
			}
		}
		else if (type >= 424 && type <= 426)
		{
			if (position.Y > Main.player[owner].position.Y - 300f)
			{
				tileCollide = true;
			}
			if ((double)position.Y < Main.worldSurface * 16.0)
			{
				tileCollide = true;
			}
			scale = ai[1];
			rotation += velocity.X * 2f;
			Vector2 vector20 = base.Center + Vector2.Normalize(velocity) * 10f;
			Dust obj90 = Main.dust[Dust.NewDust(position, width, height, 6)];
			obj90.position = vector20;
			obj90.velocity = velocity.RotatedBy(1.5707963705062866) * 0.33f + velocity / 4f;
			obj90.position += velocity.RotatedBy(1.5707963705062866);
			obj90.fadeIn = 0.5f;
			obj90.noGravity = true;
			Dust obj91 = Main.dust[Dust.NewDust(position, width, height, 6)];
			obj91.position = vector20;
			obj91.velocity = velocity.RotatedBy(-1.5707963705062866) * 0.33f + velocity / 4f;
			obj91.position += velocity.RotatedBy(-1.5707963705062866);
			obj91.fadeIn = 0.5f;
			obj91.noGravity = true;
			for (int num122 = 0; num122 < 1; num122++)
			{
				int num123 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6);
				Dust obj92 = Main.dust[num123];
				obj92.velocity *= 0.5f;
				Main.dust[num123].scale *= 1.3f;
				Main.dust[num123].fadeIn = 1f;
				Main.dust[num123].noGravity = true;
			}
		}
		else if (type == 344)
		{
			if (WorldGen.SolidTile((int)position.X / 16, (int)(position.Y + velocity.Y) / 16 + 1) || WorldGen.SolidTile((int)(position.X + (float)width) / 16, (int)(position.Y + velocity.Y) / 16 + 1))
			{
				Kill();
				return;
			}
			localAI[1] += 1f;
			if (localAI[1] > 5f)
			{
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			frame = (int)ai[1];
			if (localAI[1] >= 20f)
			{
				velocity.Y += 0.15f;
				velocity.X *= 0.96f;
			}
			if (localAI[1] >= 25f)
			{
				localAI[1] = 20f;
				Vector2 zero = Vector2.Zero;
				float num124 = 0f;
				int num125 = 60;
				for (int num126 = 0; num126 < 1000; num126++)
				{
					Projectile projectile = Main.projectile[num126];
					if (projectile.whoAmI != whoAmI && projectile.active && projectile.type == type)
					{
						Vector2 vector21 = projectile.position - position;
						if (!(((Vector2)(ref vector21)).Length() > (float)num125))
						{
							num124 += 1f;
							float num127 = Utils.Remap(((Vector2)(ref vector21)).Length(), 0f, num125, 1f, 0f);
							zero.X += (float)(-Math.Sign(vector21.X)) * num127;
						}
					}
				}
				if (num124 > 0f)
				{
					Vector2 vector22 = zero;
					vector22.Y = 0f;
					if (vector22.X == 0f)
					{
						vector22.X = 1f;
					}
					velocity += vector22 * 0.25f;
				}
			}
		}
		else if (type == 336 || type == 345)
		{
			if (type == 345 && localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(in SoundID.Item1, position);
			}
			if (ai[0] >= 50f)
			{
				ai[0] = 50f;
				velocity.Y += 0.5f;
			}
		}
		else if (type == 246)
		{
			alpha -= 20;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (ai[0] >= 60f)
			{
				ai[0] = 60f;
				velocity.Y += 0.15f;
			}
		}
		else if (type == 311)
		{
			if (alpha > 0)
			{
				alpha -= 50;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (ai[0] >= 30f)
			{
				ai[0] = 30f;
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
				}
				velocity.Y += 0.5f;
			}
		}
		else if (type == 312)
		{
			if (ai[0] >= 5f)
			{
				alpha = 0;
			}
			if (ai[0] >= 20f)
			{
				ai[0] = 30f;
				velocity.Y += 0.5f;
			}
			Lighting.AddLight(base.Center, 0.6f, 0.4f, 0.3f);
		}
		else if (type != 239 && type != 264)
		{
			if (type == 176)
			{
				if (ai[0] >= 15f)
				{
					ai[0] = 15f;
					velocity.Y += 0.05f;
				}
			}
			else if (type == 275 || type == 276)
			{
				if (alpha > 0)
				{
					alpha -= 30;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (ai[0] >= 35f)
				{
					ai[0] = 35f;
					velocity.Y += 0.025f;
				}
				if (Main.expertMode)
				{
					float num128 = 18f;
					int num129 = Player.FindClosest(base.Center, 1, 1);
					Vector2 vector24 = Main.player[num129].Center - base.Center;
					((Vector2)(ref vector24)).Normalize();
					vector24 *= num128;
					int num130 = 70;
					velocity = (velocity * (float)(num130 - 1) + vector24) / (float)num130;
					if (((Vector2)(ref velocity)).Length() < 14f)
					{
						((Vector2)(ref velocity)).Normalize();
						velocity *= 14f;
					}
					tileCollide = false;
					if (timeLeft > 180)
					{
						timeLeft = 180;
					}
				}
			}
			else if (type == 172)
			{
				if (ai[0] >= 17f)
				{
					ai[0] = 17f;
					velocity.Y += 0.085f;
				}
			}
			else if (type == 117)
			{
				if (ai[0] >= 35f)
				{
					ai[0] = 35f;
					velocity.Y += 0.06f;
				}
			}
			else if (type == 120)
			{
				int num131 = Dust.NewDust(new Vector2(position.X - velocity.X, position.Y - velocity.Y), width, height, 67, velocity.X, velocity.Y, 100, default(Color), 1.2f);
				Main.dust[num131].noGravity = true;
				Dust obj93 = Main.dust[num131];
				obj93.velocity *= 0.3f;
				if (ai[0] >= 30f)
				{
					ai[0] = 30f;
					velocity.Y += 0.05f;
				}
			}
			else if (type == 195)
			{
				int num133 = 40;
				if (ai[0] >= (float)num133)
				{
					ai[0] = num133;
					velocity.Y += 0.15f;
					tileCollide = true;
				}
				else
				{
					tileCollide = velocity.Y > 0f;
				}
			}
			else if (type == 267 || type == 477 || type == 478 || type == 479)
			{
				localAI[0] += 1f;
				if (localAI[0] > 3f)
				{
					alpha = 0;
				}
				if (ai[0] >= 20f)
				{
					ai[0] = 20f;
					if (type != 477)
					{
						velocity.Y += 0.075f;
					}
				}
				if (type == 479 && Main.myPlayer == owner)
				{
					if (ai[1] >= 0f)
					{
						maxPenetrate = (penetrate = -1);
					}
					else if (penetrate < 0)
					{
						maxPenetrate = (penetrate = 1);
					}
					if (ai[1] >= 0f)
					{
						ai[1] += 1f;
					}
					if (ai[1] > (float)Main.rand.Next(5, 30))
					{
						ai[1] = -1000f;
						float num134 = ((Vector2)(ref velocity)).Length();
						Vector2 vector25 = velocity;
						((Vector2)(ref vector25)).Normalize();
						int num135 = Main.rand.Next(2, 4);
						if (Main.rand.Next(4) == 0)
						{
							num135++;
						}
						Vector2 vector26 = default(Vector2);
						for (int num136 = 0; num136 < num135; num136++)
						{
							((Vector2)(ref vector26))._002Ector((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
							((Vector2)(ref vector26)).Normalize();
							vector26 += vector25 * 2f;
							((Vector2)(ref vector26)).Normalize();
							vector26 *= num134;
							NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector26.X, vector26.Y, type, damage, knockBack, owner, 0f, -1000f);
						}
					}
				}
				if (type == 478 && Main.myPlayer == owner)
				{
					ai[1] += 1f;
					if (ai[1] > (float)Main.rand.Next(5, 20))
					{
						if (timeLeft > 40)
						{
							timeLeft -= 20;
						}
						ai[1] = 0f;
						NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 480, (int)((double)damage * 0.8), knockBack * 0.5f, owner);
					}
				}
			}
			else if (type == 408)
			{
				if (ai[0] >= 45f)
				{
					ai[0] = 45f;
					velocity.Y += 0.05f;
				}
			}
			else if (type == 616)
			{
				if (alpha < 170)
				{
					float num137 = 3f;
					for (int num138 = 0; (float)num138 < num137; num138++)
					{
						int num139 = Dust.NewDust(position, 1, 1, 229);
						Main.dust[num139].position = base.Center - velocity / num137 * (float)num138;
						Dust obj94 = Main.dust[num139];
						obj94.velocity *= 0f;
						Main.dust[num139].noGravity = true;
						Main.dust[num139].alpha = 200;
						Main.dust[num139].scale = 0.5f;
					}
				}
				float num140 = (float)Math.Sqrt(velocity.X * velocity.X + velocity.Y * velocity.Y);
				float num141 = localAI[0];
				if (num141 == 0f)
				{
					localAI[0] = num140;
					num141 = num140;
				}
				if (alpha > 0)
				{
					alpha -= 25;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				float num142 = position.X;
				float num144 = position.Y;
				float num145 = 800f;
				bool flag6 = false;
				int num146 = 0;
				ai[0] += 1f;
				if (ai[0] > 20f)
				{
					ai[0] -= 1f;
					if (ai[1] == 0f)
					{
						for (int num147 = 0; num147 < 200; num147++)
						{
							if (Main.npc[num147].CanBeChasedBy(this) && (ai[1] == 0f || ai[1] == (float)(num147 + 1)))
							{
								float num148 = Main.npc[num147].position.X + (float)(Main.npc[num147].width / 2);
								float num149 = Main.npc[num147].position.Y + (float)(Main.npc[num147].height / 2);
								float num150 = Math.Abs(position.X + (float)(width / 2) - num148) + Math.Abs(position.Y + (float)(height / 2) - num149);
								if (num150 < num145 && Collision.CanHit(new Vector2(position.X + (float)(width / 2), position.Y + (float)(height / 2)), 1, 1, Main.npc[num147].position, Main.npc[num147].width, Main.npc[num147].height))
								{
									num145 = num150;
									num142 = num148;
									num144 = num149;
									flag6 = true;
									num146 = num147;
								}
							}
						}
						if (flag6)
						{
							ai[1] = num146 + 1;
						}
						flag6 = false;
					}
					if (ai[1] != 0f)
					{
						int num151 = (int)(ai[1] - 1f);
						if (Main.npc[num151].active && Main.npc[num151].CanBeChasedBy(this, ignoreDontTakeDamage: true))
						{
							float num152 = Main.npc[num151].position.X + (float)(Main.npc[num151].width / 2);
							float num153 = Main.npc[num151].position.Y + (float)(Main.npc[num151].height / 2);
							if (Math.Abs(position.X + (float)(width / 2) - num152) + Math.Abs(position.Y + (float)(height / 2) - num153) < 1000f)
							{
								flag6 = true;
								num142 = Main.npc[num151].position.X + (float)(Main.npc[num151].width / 2);
								num144 = Main.npc[num151].position.Y + (float)(Main.npc[num151].height / 2);
							}
						}
					}
					if (!friendly)
					{
						flag6 = false;
					}
					if (flag6)
					{
						float num246 = num141;
						Vector2 vector27 = default(Vector2);
						((Vector2)(ref vector27))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num155 = num142 - vector27.X;
						float num156 = num144 - vector27.Y;
						float num157 = (float)Math.Sqrt(num155 * num155 + num156 * num156);
						num157 = num246 / num157;
						num155 *= num157;
						num156 *= num157;
						int num158 = 8;
						velocity.X = (velocity.X * (float)(num158 - 1) + num155) / (float)num158;
						velocity.Y = (velocity.Y * (float)(num158 - 1) + num156) / (float)num158;
					}
				}
			}
			else if (type == 507 || type == 508 || type == 662 || type == 680 || type == 685)
			{
				if (ai[0] > 60f)
				{
					velocity.X *= 0.98f;
					velocity.Y += 0.3f;
				}
			}
			else if (type == 495)
			{
				int num159 = Dust.NewDust(new Vector2(position.X - velocity.X, position.Y - velocity.Y), width, height, 27, velocity.X, velocity.Y, 100, default(Color), 1.2f);
				Main.dust[num159].noGravity = true;
				Dust obj95 = Main.dust[num159];
				obj95.velocity *= 0.3f;
				if (ai[0] >= 30f)
				{
					ai[0] = 30f;
					velocity.Y += 0.04f;
				}
			}
			else if (type == 498)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] += 1f;
					SoundEngine.PlaySound(in SoundID.Item17, position);
				}
				ai[0] += 1f;
				if (ai[0] >= 50f)
				{
					velocity.X *= 0.98f;
					velocity.Y += 0.15f;
					rotation += (float)direction * 0.5f;
				}
				else
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
			}
			else if (type == 437)
			{
				if (ai[0] >= 12f)
				{
					if (ai[0] >= 20f)
					{
						Kill();
					}
					alpha += 30;
				}
			}
			else if (type != 442 && type != 634 && type != 635 && type != 675)
			{
				if (type == 686 || type == 711)
				{
					if (ai[0] >= 10f)
					{
						velocity.Y += 0.1f;
					}
					if (ai[0] >= 20f)
					{
						velocity.Y += 0.1f;
					}
					if (ai[0] > 20f)
					{
						ai[0] = 20f;
					}
					velocity.X *= 0.99f;
					if (velocity.Y > 32f)
					{
						velocity.Y = 32f;
					}
				}
				else if (type == 639)
				{
					if (timeLeft <= MaxUpdates * 45 - 14)
					{
						velocity.Y += 0.1f;
					}
				}
				else if (type == 710)
				{
					if (ai[0] >= 0f)
					{
						ai[0] += 1f;
						if (ai[0] >= 20f)
						{
							velocity.Y += 0.2f;
							if (velocity.Y > 0f)
							{
								velocity.X *= 0.98f;
							}
							if (velocity.Y > 12f)
							{
								velocity.Y = 12f;
							}
						}
					}
				}
				else if (ai[0] >= 15f)
				{
					ai[0] = 15f;
					if (flag4)
					{
						velocity.Y -= 0.1f;
					}
					else
					{
						velocity.Y += 0.1f;
					}
				}
			}
		}
		if (type == 921 || type == 926 || type == 937)
		{
			rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.05f;
		}
		else if (type == 248)
		{
			if (velocity.X < 0f)
			{
				rotation -= (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.05f;
			}
			else
			{
				rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.05f;
			}
		}
		else if (type == 270 || type == 585 || type == 601 || type == 706 || type == 837)
		{
			spriteDirection = direction;
			if (direction < 0)
			{
				rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
			}
			else
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X);
			}
		}
		else if (type == 311)
		{
			if (ai[1] != 0f)
			{
				rotation += velocity.X * 0.1f + (float)Main.rand.Next(-10, 11) * 0.025f;
			}
			else
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
			}
		}
		else if (type == 312)
		{
			rotation += velocity.X * 0.02f;
		}
		else if (type == 675)
		{
			rotation += velocity.X * 0.03f;
		}
		else if (type != 676)
		{
			if (type == 408)
			{
				rotation = velocity.ToRotation();
				if (direction == -1)
				{
					rotation += (float)Math.PI;
				}
			}
			else if (type == 435 || type == 459 || type == 682 || type == 709)
			{
				rotation = velocity.ToRotation();
				if (direction == -1)
				{
					rotation += (float)Math.PI;
				}
			}
			else if (type == 660)
			{
				rotation = velocity.ToRotation() + (float)Math.PI / 4f;
			}
			else if (type == 662 || type == 685)
			{
				rotation = velocity.ToRotation() - (float)Math.PI - (float)Math.PI / 4f;
			}
			else if (type == 680 || type == 684 || type == 686 || type == 711 || type == 712)
			{
				rotation = velocity.ToRotation() + (float)Math.PI / 2f;
			}
			else if (type == 436)
			{
				rotation = velocity.ToRotation();
				rotation += (float)Math.PI;
				if (direction == -1)
				{
					rotation += (float)Math.PI;
				}
			}
			else if (type == 469)
			{
				if (velocity.X > 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
				else
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
			}
			else if (type == 477)
			{
				if (localAI[1] < 5f)
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
					localAI[1] += 1f;
				}
				else
				{
					rotation = (rotation * 2f + (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f) / 3f;
				}
			}
			else if (type == 532)
			{
				rotation += 0.2f + Math.Abs(velocity.X) * 0.1f;
			}
			else if (type == 483)
			{
				rotation += velocity.X * 0.05f;
			}
			else if (type == 772)
			{
				rotation += (float)Math.Sign(velocity.X) * (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.05f;
			}
			else if (type == 485)
			{
				Vector2 vector28 = default(Vector2);
				((Vector2)(ref vector28))._002Ector(ai[0], ai[1]);
				velocity = (velocity * 39f + vector28) / 40f;
				int num160 = Dust.NewDust(position, width, height, 6);
				Main.dust[num160].noGravity = true;
				Dust obj96 = Main.dust[num160];
				obj96.velocity *= 0.2f;
				Main.dust[num160].position = (Main.dust[num160].position + base.Center) / 2f;
				frameCounter++;
				if (frameCounter >= 2)
				{
					frameCounter = 0;
					frame++;
					if (frame >= 5)
					{
						frame = 0;
					}
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
				}
				else
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
				}
			}
			else if (type == 640)
			{
				if (velocity != Vector2.Zero)
				{
					rotation = velocity.ToRotation() + (float)Math.PI / 2f;
				}
			}
			else if (type == 325)
			{
				rotation = velocity.ToRotation() - (float)Math.PI / 2f;
			}
			else if (type != 344 && type != 498)
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
			}
		}
		bool flag7 = true;
		if (type == 577)
		{
			flag7 = false;
		}
		if (flag7)
		{
			if (flag4 && velocity.Y < -16f)
			{
				velocity.Y = -16f;
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
		}
	}

	private void AI_010()
	{
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_0254: Unknown result type (might be due to invalid IL or missing references)
		//IL_0280: Unknown result type (might be due to invalid IL or missing references)
		//IL_0286: Unknown result type (might be due to invalid IL or missing references)
		//IL_029c: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_030f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0315: Unknown result type (might be due to invalid IL or missing references)
		//IL_037c: Unknown result type (might be due to invalid IL or missing references)
		//IL_039c: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0203: Unknown result type (might be due to invalid IL or missing references)
		//IL_020d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0212: Unknown result type (might be due to invalid IL or missing references)
		//IL_0217: Unknown result type (might be due to invalid IL or missing references)
		//IL_085b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0876: Unknown result type (might be due to invalid IL or missing references)
		//IL_0409: Unknown result type (might be due to invalid IL or missing references)
		//IL_0429: Unknown result type (might be due to invalid IL or missing references)
		//IL_042f: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_048c: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0512: Unknown result type (might be due to invalid IL or missing references)
		//IL_0535: Unknown result type (might be due to invalid IL or missing references)
		//IL_053b: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0700: Unknown result type (might be due to invalid IL or missing references)
		//IL_0706: Unknown result type (might be due to invalid IL or missing references)
		//IL_062d: Unknown result type (might be due to invalid IL or missing references)
		//IL_065d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0663: Unknown result type (might be due to invalid IL or missing references)
		//IL_0688: Unknown result type (might be due to invalid IL or missing references)
		//IL_0692: Unknown result type (might be due to invalid IL or missing references)
		//IL_0698: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ac: Unknown result type (might be due to invalid IL or missing references)
		if (type == 31 && ai[0] != 2f)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 32, 0f, velocity.Y / 2f);
				Main.dust[num].velocity.X *= 0.4f;
			}
		}
		else if (type == 39)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num9 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 38, 0f, velocity.Y / 2f);
				Main.dust[num9].velocity.X *= 0.4f;
			}
		}
		else if (type >= 411 && type <= 414)
		{
			if (Main.rand.Next(3) == 0)
			{
				int num10 = 9;
				if (type == 412 || type == 414)
				{
					num10 = 11;
				}
				if (type == 413)
				{
					num10 = 19;
				}
				int num11 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num10, 0f, velocity.Y / 2f);
				Main.dust[num11].noGravity = true;
				Dust obj = Main.dust[num11];
				obj.velocity -= velocity * 0.5f;
			}
		}
		else if (type == 40)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num12 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 36, 0f, velocity.Y / 2f);
				Dust obj2 = Main.dust[num12];
				obj2.velocity *= 0.4f;
			}
		}
		else if (type == 42 || type == 31)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num13 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 32);
				Main.dust[num13].velocity.X *= 0.4f;
			}
		}
		else if (type == 56 || type == 65)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num14 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 14);
				Main.dust[num14].velocity.X *= 0.4f;
			}
		}
		else if (type == 67 || type == 68)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num15 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 51);
				Main.dust[num15].velocity.X *= 0.4f;
			}
		}
		else if (type == 71)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num16 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 53);
				Main.dust[num16].velocity.X *= 0.4f;
			}
		}
		else if (type == 179)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num2 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 149);
				Main.dust[num2].velocity.X *= 0.4f;
			}
		}
		else if (type == 241 || type == 354)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num3 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 36);
				Main.dust[num3].velocity.X *= 0.4f;
			}
		}
		else if (type >= 736 && type <= 738)
		{
			if (Main.rand.Next(40) == 0)
			{
				int num4 = Dust.NewDust(position, width, height, type - 736 + 275);
				if (num4 >= 0)
				{
					Main.dust[num4].velocity = Main.dust[num4].velocity * 0.5f + velocity * 0.5f;
				}
			}
		}
		else if (type != 109 && Main.rand.Next(20) == 0)
		{
			Dust.NewDust(new Vector2(position.X, position.Y), width, height, 0);
		}
		if (type >= 736 && type <= 738)
		{
			if (localAI[0] == 0f)
			{
				frame = Main.rand.Next(3);
				scale = 1f - (float)Main.rand.Next(30) * 0.01f;
			}
			localAI[0] += 1f;
		}
		tileCollide = true;
		localAI[1] = 0f;
		if (Main.myPlayer == owner && ai[0] == 0f)
		{
			tileCollide = false;
			if (Main.player[owner].channel && (type < 736 || type > 738) && type != 40)
			{
				localAI[1] = -1f;
				float num5 = 12f;
				Vector2 vector = default(Vector2);
				((Vector2)(ref vector))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num6 = (float)Main.mouseX + Main.screenPosition.X - vector.X;
				float num7 = (float)Main.mouseY + Main.screenPosition.Y - vector.Y;
				if (Main.player[owner].gravDir == -1f)
				{
					num7 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector.Y;
				}
				float num8 = (float)Math.Sqrt(num6 * num6 + num7 * num7);
				num8 = (float)Math.Sqrt(num6 * num6 + num7 * num7);
				if (num8 > num5)
				{
					num8 = num5 / num8;
					num6 *= num8;
					num7 *= num8;
					if (num6 != velocity.X || num7 != velocity.Y)
					{
						netUpdate = true;
					}
					velocity.X = num6;
					velocity.Y = num7;
				}
				else
				{
					if (num6 != velocity.X || num7 != velocity.Y)
					{
						netUpdate = true;
					}
					velocity.X = num6;
					velocity.Y = num7;
				}
			}
			else
			{
				ai[0] = 1f;
				netUpdate = true;
			}
		}
		if (ai[0] == 1f && type != 109)
		{
			if (type == 42 || type == 65 || type == 68 || type == 354)
			{
				ai[1] += 1f;
				if (ai[1] >= 60f)
				{
					ai[1] = 60f;
					velocity.Y += 0.2f;
				}
			}
			else
			{
				velocity.Y += 0.41f;
			}
		}
		else if (ai[0] == 2f && type != 109)
		{
			velocity.Y += 0.2f;
			if ((double)velocity.X < -0.04)
			{
				velocity.X += 0.04f;
			}
			else if ((double)velocity.X > 0.04)
			{
				velocity.X -= 0.04f;
			}
			else
			{
				velocity.X = 0f;
			}
		}
		if (owner == Main.myPlayer && tileCollide)
		{
			for (int i = (int)(position.X / 16f); i <= (int)((position.X + (float)width) / 16f); i++)
			{
				for (int j = (int)(position.Y / 16f); j <= (int)((position.Y + (float)height) / 16f); j++)
				{
					if (!WorldGen.InWorld(i, j))
					{
						continue;
					}
					Tile tile = Main.tile[i, j];
					if (tile == null || !tile.active())
					{
						continue;
					}
					if ((tile.type >= 185 && tile.type <= 187) || tile.type == 165 || tile.type == 12 || tile.type == 665 || tile.type == 639 || tile.type == 105 || tile.type == 178)
					{
						WorldGen.KillTile(i, j);
					}
					else if (tile.topSlope() && !TileID.Sets.Platforms[tile.type])
					{
						WorldGen.SlopeTile(i, j);
						if (Main.netMode != 0)
						{
							NetMessage.SendData(17, -1, -1, null, 14, i, j);
						}
						position.Y -= 16f;
					}
				}
			}
		}
		if (type >= 736 && type <= 738)
		{
			if (frame == 0)
			{
				rotation -= 0.1f;
			}
			else if (frame == 1)
			{
				rotation += 0.1f;
			}
			else
			{
				rotation += 0.15f;
			}
			if (velocity.Y > 10f)
			{
				velocity.Y = 10f;
			}
		}
		else
		{
			rotation += 0.1f;
			if (velocity.Y > 10f)
			{
				velocity.Y = 10f;
			}
		}
	}

	private void AI_026()
	{
		//IL_9340: Unknown result type (might be due to invalid IL or missing references)
		//IL_936b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9371: Unknown result type (might be due to invalid IL or missing references)
		//IL_954f: Unknown result type (might be due to invalid IL or missing references)
		//IL_955a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9440: Unknown result type (might be due to invalid IL or missing references)
		//IL_944b: Unknown result type (might be due to invalid IL or missing references)
		//IL_96df: Unknown result type (might be due to invalid IL or missing references)
		//IL_96ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_97dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_97e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_98db: Unknown result type (might be due to invalid IL or missing references)
		//IL_98e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_99da: Unknown result type (might be due to invalid IL or missing references)
		//IL_99e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ad9: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ae4: Unknown result type (might be due to invalid IL or missing references)
		//IL_a307: Unknown result type (might be due to invalid IL or missing references)
		//IL_a312: Unknown result type (might be due to invalid IL or missing references)
		//IL_a4b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_a4bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f22: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c42: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_a5c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_a5cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_e072: Unknown result type (might be due to invalid IL or missing references)
		//IL_e07c: Unknown result type (might be due to invalid IL or missing references)
		//IL_e081: Unknown result type (might be due to invalid IL or missing references)
		//IL_e087: Unknown result type (might be due to invalid IL or missing references)
		//IL_e08d: Unknown result type (might be due to invalid IL or missing references)
		//IL_e093: Unknown result type (might be due to invalid IL or missing references)
		//IL_e09d: Unknown result type (might be due to invalid IL or missing references)
		//IL_e0a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_e0bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_e0c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_a6f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_a6ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_a824: Unknown result type (might be due to invalid IL or missing references)
		//IL_a82f: Unknown result type (might be due to invalid IL or missing references)
		//IL_aca3: Unknown result type (might be due to invalid IL or missing references)
		//IL_acae: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa68: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa73: Unknown result type (might be due to invalid IL or missing references)
		//IL_a178: Unknown result type (might be due to invalid IL or missing references)
		//IL_a188: Unknown result type (might be due to invalid IL or missing references)
		//IL_a18d: Unknown result type (might be due to invalid IL or missing references)
		//IL_a1e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_a1eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_abb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_abbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_aeff: Unknown result type (might be due to invalid IL or missing references)
		//IL_af0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_b004: Unknown result type (might be due to invalid IL or missing references)
		//IL_b00f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b16e: Unknown result type (might be due to invalid IL or missing references)
		//IL_b179: Unknown result type (might be due to invalid IL or missing references)
		//IL_b452: Unknown result type (might be due to invalid IL or missing references)
		//IL_b45d: Unknown result type (might be due to invalid IL or missing references)
		//IL_bcff: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd11: Unknown result type (might be due to invalid IL or missing references)
		//IL_b826: Unknown result type (might be due to invalid IL or missing references)
		//IL_c29a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c2ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc10: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_be80: Unknown result type (might be due to invalid IL or missing references)
		//IL_be8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_bea8: Unknown result type (might be due to invalid IL or missing references)
		//IL_beb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_c401: Unknown result type (might be due to invalid IL or missing references)
		//IL_c406: Unknown result type (might be due to invalid IL or missing references)
		//IL_c40b: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf88: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf92: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf97: Unknown result type (might be due to invalid IL or missing references)
		//IL_c42b: Unknown result type (might be due to invalid IL or missing references)
		//IL_c43e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c415: Unknown result type (might be due to invalid IL or missing references)
		//IL_c417: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba04: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba24: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba43: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba49: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba53: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba65: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba74: Unknown result type (might be due to invalid IL or missing references)
		//IL_c46e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c478: Unknown result type (might be due to invalid IL or missing references)
		//IL_c47d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c681: Unknown result type (might be due to invalid IL or missing references)
		//IL_c694: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4df: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_c504: Unknown result type (might be due to invalid IL or missing references)
		//IL_c509: Unknown result type (might be due to invalid IL or missing references)
		//IL_c513: Unknown result type (might be due to invalid IL or missing references)
		//IL_c518: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_c556: Unknown result type (might be due to invalid IL or missing references)
		//IL_c53e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6da: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_c701: Unknown result type (might be due to invalid IL or missing references)
		//IL_c713: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1569: Unknown result type (might be due to invalid IL or missing references)
		//IL_17aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_17df: Unknown result type (might be due to invalid IL or missing references)
		//IL_15ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_15f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d07: Unknown result type (might be due to invalid IL or missing references)
		//IL_1809: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d31: Unknown result type (might be due to invalid IL or missing references)
		//IL_1637: Unknown result type (might be due to invalid IL or missing references)
		//IL_1649: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_241c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1927: Unknown result type (might be due to invalid IL or missing references)
		//IL_1931: Unknown result type (might be due to invalid IL or missing references)
		//IL_1936: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1663: Unknown result type (might be due to invalid IL or missing references)
		//IL_2498: Unknown result type (might be due to invalid IL or missing references)
		//IL_249d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e85: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2586: Unknown result type (might be due to invalid IL or missing references)
		//IL_19eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a05: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a51: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a61: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e91: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ed8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f59: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_353d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3572: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a43: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a59: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a63: Unknown result type (might be due to invalid IL or missing references)
		//IL_35b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b47: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b64: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b69: Unknown result type (might be due to invalid IL or missing references)
		//IL_3af8: Unknown result type (might be due to invalid IL or missing references)
		//IL_364f: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2750: Unknown result type (might be due to invalid IL or missing references)
		//IL_275a: Unknown result type (might be due to invalid IL or missing references)
		//IL_275f: Unknown result type (might be due to invalid IL or missing references)
		//IL_372f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3749: Unknown result type (might be due to invalid IL or missing references)
		//IL_374f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3795: Unknown result type (might be due to invalid IL or missing references)
		//IL_37a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_37a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2768: Unknown result type (might be due to invalid IL or missing references)
		//IL_2772: Unknown result type (might be due to invalid IL or missing references)
		//IL_2777: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7da0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c11: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c17: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c53: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c63: Unknown result type (might be due to invalid IL or missing references)
		//IL_445b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4486: Unknown result type (might be due to invalid IL or missing references)
		//IL_448c: Unknown result type (might be due to invalid IL or missing references)
		//IL_32c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_32cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_32d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_32d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_32dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_32e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_32eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4657: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e83: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e91: Unknown result type (might be due to invalid IL or missing references)
		//IL_881a: Unknown result type (might be due to invalid IL or missing references)
		//IL_882e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7969: Unknown result type (might be due to invalid IL or missing references)
		//IL_797c: Unknown result type (might be due to invalid IL or missing references)
		//IL_418b: Unknown result type (might be due to invalid IL or missing references)
		//IL_41be: Unknown result type (might be due to invalid IL or missing references)
		//IL_807f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ef8: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4859: Unknown result type (might be due to invalid IL or missing references)
		//IL_3171: Unknown result type (might be due to invalid IL or missing references)
		//IL_318c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3192: Unknown result type (might be due to invalid IL or missing references)
		//IL_31a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_31b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_31b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_80c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_80c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_80cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_80d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4883: Unknown result type (might be due to invalid IL or missing references)
		//IL_7aa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_7abc: Unknown result type (might be due to invalid IL or missing references)
		//IL_8003: Unknown result type (might be due to invalid IL or missing references)
		//IL_801c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4799: Unknown result type (might be due to invalid IL or missing references)
		//IL_47b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_8259: Unknown result type (might be due to invalid IL or missing references)
		//IL_811e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8270: Unknown result type (might be due to invalid IL or missing references)
		//IL_8276: Unknown result type (might be due to invalid IL or missing references)
		//IL_827b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8280: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c86: Unknown result type (might be due to invalid IL or missing references)
		//IL_7cca: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d28: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b40: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b60: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ba6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_8294: Unknown result type (might be due to invalid IL or missing references)
		//IL_82c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_82fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_86a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_8330: Unknown result type (might be due to invalid IL or missing references)
		//IL_8382: Unknown result type (might be due to invalid IL or missing references)
		//IL_839d: Unknown result type (might be due to invalid IL or missing references)
		//IL_83a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_83ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_83ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_83b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_83bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_8367: Unknown result type (might be due to invalid IL or missing references)
		//IL_836e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8373: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b21: Unknown result type (might be due to invalid IL or missing references)
		//IL_86e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f14: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f27: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c00: Unknown result type (might be due to invalid IL or missing references)
		//IL_8425: Unknown result type (might be due to invalid IL or missing references)
		//IL_842b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8430: Unknown result type (might be due to invalid IL or missing references)
		//IL_8435: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c97: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c45: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8450: Unknown result type (might be due to invalid IL or missing references)
		//IL_8462: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dce: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d29: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d33: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d38: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ce0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e06: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e10: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e15: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d73: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d82: Unknown result type (might be due to invalid IL or missing references)
		//IL_84c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_84d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_535f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5364: Unknown result type (might be due to invalid IL or missing references)
		//IL_536e: Unknown result type (might be due to invalid IL or missing references)
		//IL_52a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_52a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_52b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_53fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_5403: Unknown result type (might be due to invalid IL or missing references)
		//IL_540d: Unknown result type (might be due to invalid IL or missing references)
		//IL_55d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_55ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_55f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_55fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_5563: Unknown result type (might be due to invalid IL or missing references)
		//IL_5568: Unknown result type (might be due to invalid IL or missing references)
		//IL_5572: Unknown result type (might be due to invalid IL or missing references)
		//IL_578f: Unknown result type (might be due to invalid IL or missing references)
		//IL_57a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_57aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_57b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_56cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_56d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_56dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_5653: Unknown result type (might be due to invalid IL or missing references)
		//IL_5658: Unknown result type (might be due to invalid IL or missing references)
		//IL_5662: Unknown result type (might be due to invalid IL or missing references)
		//IL_588e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5893: Unknown result type (might be due to invalid IL or missing references)
		//IL_589d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5812: Unknown result type (might be due to invalid IL or missing references)
		//IL_5817: Unknown result type (might be due to invalid IL or missing references)
		//IL_5821: Unknown result type (might be due to invalid IL or missing references)
		//IL_5997: Unknown result type (might be due to invalid IL or missing references)
		//IL_599c: Unknown result type (might be due to invalid IL or missing references)
		//IL_59a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b92: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c19: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c23: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c32: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c68: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ca4: Unknown result type (might be due to invalid IL or missing references)
		//IL_5caa: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cec: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d00: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d25: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d37: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d41: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d46: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d55: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d64: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d69: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e82: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e91: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e96: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ea6: Unknown result type (might be due to invalid IL or missing references)
		//IL_6eab: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ee1: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ee7: Unknown result type (might be due to invalid IL or missing references)
		//IL_608f: Unknown result type (might be due to invalid IL or missing references)
		//IL_60a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f87: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f96: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6fa1: Unknown result type (might be due to invalid IL or missing references)
		//IL_6fab: Unknown result type (might be due to invalid IL or missing references)
		//IL_6fb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_6fe6: Unknown result type (might be due to invalid IL or missing references)
		//IL_6fec: Unknown result type (might be due to invalid IL or missing references)
		//IL_71ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_71f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_71f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_722c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7232: Unknown result type (might be due to invalid IL or missing references)
		//IL_72a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_72d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_72dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_72e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_72e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_7088: Unknown result type (might be due to invalid IL or missing references)
		//IL_70c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_70c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_70ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_70d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_710d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7113: Unknown result type (might be due to invalid IL or missing references)
		//IL_711d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7122: Unknown result type (might be due to invalid IL or missing references)
		//IL_7127: Unknown result type (might be due to invalid IL or missing references)
		//IL_7129: Unknown result type (might be due to invalid IL or missing references)
		//IL_7130: Unknown result type (might be due to invalid IL or missing references)
		//IL_7135: Unknown result type (might be due to invalid IL or missing references)
		//IL_7138: Unknown result type (might be due to invalid IL or missing references)
		//IL_713e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7148: Unknown result type (might be due to invalid IL or missing references)
		//IL_714d: Unknown result type (might be due to invalid IL or missing references)
		//IL_715c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7161: Unknown result type (might be due to invalid IL or missing references)
		//IL_716f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7176: Unknown result type (might be due to invalid IL or missing references)
		//IL_7180: Unknown result type (might be due to invalid IL or missing references)
		//IL_7186: Unknown result type (might be due to invalid IL or missing references)
		//IL_60ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_7358: Unknown result type (might be due to invalid IL or missing references)
		//IL_735e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7363: Unknown result type (might be due to invalid IL or missing references)
		//IL_7399: Unknown result type (might be due to invalid IL or missing references)
		//IL_739f: Unknown result type (might be due to invalid IL or missing references)
		//IL_743c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7450: Unknown result type (might be due to invalid IL or missing references)
		//IL_745e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7464: Unknown result type (might be due to invalid IL or missing references)
		//IL_7466: Unknown result type (might be due to invalid IL or missing references)
		//IL_746b: Unknown result type (might be due to invalid IL or missing references)
		//IL_747a: Unknown result type (might be due to invalid IL or missing references)
		//IL_747f: Unknown result type (might be due to invalid IL or missing references)
		//IL_74b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_74bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_7557: Unknown result type (might be due to invalid IL or missing references)
		//IL_7561: Unknown result type (might be due to invalid IL or missing references)
		//IL_7566: Unknown result type (might be due to invalid IL or missing references)
		//IL_759e: Unknown result type (might be due to invalid IL or missing references)
		//IL_75cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_75d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_75d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_75e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_649f: Unknown result type (might be due to invalid IL or missing references)
		//IL_64ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_64dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_64eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_64f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_64ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_6509: Unknown result type (might be due to invalid IL or missing references)
		//IL_650e: Unknown result type (might be due to invalid IL or missing references)
		//IL_652a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6530: Unknown result type (might be due to invalid IL or missing references)
		//IL_6574: Unknown result type (might be due to invalid IL or missing references)
		//IL_657e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6583: Unknown result type (might be due to invalid IL or missing references)
		//IL_65c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_65d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_65e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_65e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_65f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_65f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_6613: Unknown result type (might be due to invalid IL or missing references)
		//IL_6619: Unknown result type (might be due to invalid IL or missing references)
		//IL_6655: Unknown result type (might be due to invalid IL or missing references)
		//IL_665f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6664: Unknown result type (might be due to invalid IL or missing references)
		//IL_6596: Unknown result type (might be due to invalid IL or missing references)
		//IL_659c: Unknown result type (might be due to invalid IL or missing references)
		//IL_65a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_65ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_65b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_6677: Unknown result type (might be due to invalid IL or missing references)
		//IL_667d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6687: Unknown result type (might be due to invalid IL or missing references)
		//IL_668c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6691: Unknown result type (might be due to invalid IL or missing references)
		//IL_7760: Unknown result type (might be due to invalid IL or missing references)
		//IL_7766: Unknown result type (might be due to invalid IL or missing references)
		//IL_776b: Unknown result type (might be due to invalid IL or missing references)
		//IL_77a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_77a6: Unknown result type (might be due to invalid IL or missing references)
		if (!Main.player[owner].active)
		{
			active = false;
			return;
		}
		bool flag = false;
		bool flag9 = false;
		bool flag10 = false;
		bool flag11 = false;
		bool flag12 = false;
		int num = 85;
		bool flag13 = type >= 191 && type <= 194;
		if (type == 324)
		{
			num = 120;
		}
		if (type == 112)
		{
			num = 100;
		}
		if (type == 127)
		{
			num = 50;
		}
		switch (type)
		{
		case 816:
		case 821:
		case 825:
		case 854:
		case 858:
		case 859:
		case 860:
		case 885:
		case 889:
		case 891:
		case 897:
		case 899:
		case 900:
		case 934:
			num = 95;
			break;
		case 884:
		case 890:
			num = 80;
			break;
		case 881:
			num = 95;
			if (Main.player[owner].ownedProjectileCounts[881] > 0)
			{
				num = 120;
			}
			break;
		}
		if (type == 960)
		{
			Main.CurrentFrameFlags.HadAnActiveInteractibleProjectile = true;
			flag = true;
		}
		if (flag13)
		{
			if (lavaWet)
			{
				ai[0] = 1f;
				ai[1] = 0f;
			}
			num = 60 + 30 * minionPos;
		}
		else if (type == 266)
		{
			num = 60 + 30 * minionPos;
		}
		bool flag14 = ai[0] == -1f || ai[0] == -2f;
		bool num201 = ai[0] == -1f;
		bool flag15 = ai[0] == -2f;
		if (type == 111)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].bunny = false;
			}
			if (Main.player[owner].bunny)
			{
				timeLeft = 2;
			}
		}
		if (type == 112)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].penguin = false;
			}
			if (Main.player[owner].penguin)
			{
				timeLeft = 2;
			}
		}
		if (type == 334)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].puppy = false;
			}
			if (Main.player[owner].puppy)
			{
				timeLeft = 2;
			}
		}
		if (type == 353)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].grinch = false;
			}
			if (Main.player[owner].grinch)
			{
				timeLeft = 2;
			}
		}
		if (type == 127)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].turtle = false;
			}
			if (Main.player[owner].turtle)
			{
				timeLeft = 2;
			}
		}
		if (type == 175)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].eater = false;
			}
			if (Main.player[owner].eater)
			{
				timeLeft = 2;
			}
		}
		if (type == 197)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].skeletron = false;
			}
			if (Main.player[owner].skeletron)
			{
				timeLeft = 2;
			}
		}
		if (type == 198)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].hornet = false;
			}
			if (Main.player[owner].hornet)
			{
				timeLeft = 2;
			}
		}
		if (type == 199)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].tiki = false;
			}
			if (Main.player[owner].tiki)
			{
				timeLeft = 2;
			}
		}
		if (type == 200)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].lizard = false;
			}
			if (Main.player[owner].lizard)
			{
				timeLeft = 2;
			}
		}
		if (type == 208)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].parrot = false;
			}
			if (Main.player[owner].parrot)
			{
				timeLeft = 2;
			}
		}
		if (type == 209)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].truffle = false;
			}
			if (Main.player[owner].truffle)
			{
				timeLeft = 2;
			}
		}
		if (type == 210)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].sapling = false;
			}
			if (Main.player[owner].sapling)
			{
				timeLeft = 2;
			}
		}
		if (type == 324)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].cSapling = false;
			}
			if (Main.player[owner].cSapling)
			{
				timeLeft = 2;
			}
		}
		if (type == 313)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].spider = false;
			}
			if (Main.player[owner].spider)
			{
				timeLeft = 2;
			}
		}
		if (type == 314)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].squashling = false;
			}
			if (Main.player[owner].squashling)
			{
				timeLeft = 2;
			}
		}
		if (type == 211)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].wisp = false;
			}
			if (Main.player[owner].wisp)
			{
				timeLeft = 2;
			}
		}
		if (type == 236)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].dino = false;
			}
			if (Main.player[owner].dino)
			{
				timeLeft = 2;
			}
		}
		if (type == 499)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].babyFaceMonster = false;
			}
			if (Main.player[owner].babyFaceMonster)
			{
				timeLeft = 2;
			}
		}
		if (type == 765)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagSugarGlider = false;
			}
			if (Main.player[owner].petFlagSugarGlider)
			{
				timeLeft = 2;
			}
		}
		if (type == 266)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].slime = false;
			}
			if (Main.player[owner].slime)
			{
				timeLeft = 2;
			}
		}
		if (type == 268)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].eyeSpring = false;
			}
			if (Main.player[owner].eyeSpring)
			{
				timeLeft = 2;
			}
		}
		if (type == 269)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].snowman = false;
			}
			if (Main.player[owner].snowman)
			{
				timeLeft = 2;
			}
		}
		if (type == 319)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].blackCat = false;
			}
			if (Main.player[owner].blackCat)
			{
				timeLeft = 2;
			}
		}
		if (type == 380)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].zephyrfish = false;
			}
			if (Main.player[owner].zephyrfish)
			{
				timeLeft = 2;
			}
		}
		if (type == 774)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagBabyShark = false;
			}
			if (Main.player[owner].petFlagBabyShark)
			{
				timeLeft = 2;
			}
		}
		if (type == 815)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagLilHarpy = false;
			}
			if (Main.player[owner].petFlagLilHarpy)
			{
				timeLeft = 2;
			}
		}
		if (type == 816)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagFennecFox = false;
			}
			if (Main.player[owner].petFlagFennecFox)
			{
				timeLeft = 2;
			}
		}
		if (type == 817)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagGlitteryButterfly = false;
			}
			if (Main.player[owner].petFlagGlitteryButterfly)
			{
				timeLeft = 2;
			}
		}
		if (type == 821)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagBabyImp = false;
			}
			if (Main.player[owner].petFlagBabyImp)
			{
				timeLeft = 2;
			}
		}
		if (type == 825)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagBabyRedPanda = false;
			}
			if (Main.player[owner].petFlagBabyRedPanda)
			{
				timeLeft = 2;
			}
		}
		if (type == 854)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagPlantero = false;
			}
			if (Main.player[owner].petFlagPlantero)
			{
				timeLeft = 2;
			}
		}
		if (type == 858)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagDynamiteKitten = false;
			}
			if (Main.player[owner].petFlagDynamiteKitten)
			{
				timeLeft = 2;
			}
		}
		if (type == 859)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagBabyWerewolf = false;
			}
			if (Main.player[owner].petFlagBabyWerewolf)
			{
				timeLeft = 2;
			}
		}
		if (type == 860)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagShadowMimic = false;
			}
			if (Main.player[owner].petFlagShadowMimic)
			{
				timeLeft = 2;
			}
		}
		if (type == 875)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagVoltBunny = false;
			}
			if (Main.player[owner].petFlagVoltBunny)
			{
				timeLeft = 2;
			}
		}
		if (type == 881)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagKingSlimePet = false;
			}
			if (Main.player[owner].petFlagKingSlimePet)
			{
				timeLeft = 2;
			}
		}
		if (type == 884)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagBrainOfCthulhuPet = false;
			}
			if (Main.player[owner].petFlagBrainOfCthulhuPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 885)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagSkeletronPet = false;
			}
			if (Main.player[owner].petFlagSkeletronPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 886)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagQueenBeePet = false;
			}
			if (Main.player[owner].petFlagQueenBeePet)
			{
				timeLeft = 2;
			}
		}
		if (type == 889)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagSkeletronPrimePet = false;
			}
			if (Main.player[owner].petFlagSkeletronPrimePet)
			{
				timeLeft = 2;
			}
		}
		if (type == 890)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagPlanteraPet = false;
			}
			if (Main.player[owner].petFlagPlanteraPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 891)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagGolemPet = false;
			}
			if (Main.player[owner].petFlagGolemPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 892)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagDukeFishronPet = false;
			}
			if (Main.player[owner].petFlagDukeFishronPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 894)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagMoonLordPet = false;
			}
			if (Main.player[owner].petFlagMoonLordPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 897)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagEverscreamPet = false;
			}
			if (Main.player[owner].petFlagEverscreamPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 899)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagMartianPet = false;
			}
			if (Main.player[owner].petFlagMartianPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 900)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagDD2OgrePet = false;
			}
			if (Main.player[owner].petFlagDD2OgrePet)
			{
				timeLeft = 2;
			}
		}
		if (type == 901)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagDD2BetsyPet = false;
			}
			if (Main.player[owner].petFlagDD2BetsyPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 934)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagQueenSlimePet = false;
			}
			if (Main.player[owner].petFlagQueenSlimePet)
			{
				timeLeft = 2;
			}
		}
		if (type == 956)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagBerniePet = false;
			}
			if (Main.player[owner].petFlagBerniePet)
			{
				timeLeft = 2;
			}
		}
		if (type == 958)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagDeerclopsPet = false;
			}
			if (Main.player[owner].petFlagDeerclopsPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 959)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagPigPet = false;
			}
			if (Main.player[owner].petFlagPigPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 960)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagChesterPet = false;
			}
			if (Main.player[owner].petFlagChesterPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 994)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagJunimoPet = false;
			}
			if (Main.player[owner].petFlagJunimoPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 998)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagBlueChickenPet = false;
			}
			if (Main.player[owner].petFlagBlueChickenPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 1003)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagSpiffo = false;
			}
			if (Main.player[owner].petFlagSpiffo)
			{
				timeLeft = 2;
			}
		}
		if (type == 1004)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagCaveling = false;
			}
			if (Main.player[owner].petFlagCaveling)
			{
				timeLeft = 2;
			}
		}
		if (flag13)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].pygmy = false;
			}
			if (Main.player[owner].pygmy)
			{
				timeLeft = Main.rand.Next(2, 10);
			}
		}
		if (type >= 390 && type <= 392)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].spiderMinion = false;
			}
			if (Main.player[owner].spiderMinion)
			{
				timeLeft = 2;
			}
		}
		if (type == 398)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].miniMinotaur = false;
			}
			if (Main.player[owner].miniMinotaur)
			{
				timeLeft = 2;
			}
		}
		if (flag14)
		{
			timeLeft = 2;
		}
		if (flag13 || type == 266 || (type >= 390 && type <= 392))
		{
			num = 10;
			int num127 = 40 * (minionPos + 1) * Main.player[owner].direction;
			if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) < position.X + (float)(width / 2) - (float)num + (float)num127)
			{
				flag9 = true;
			}
			else if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) > position.X + (float)(width / 2) + (float)num + (float)num127)
			{
				flag10 = true;
			}
		}
		else if (type == 891)
		{
			num = 30;
			float num138 = -50 * -Main.player[owner].direction;
			float num149 = Main.player[owner].Center.X + num138;
			if (num149 < position.X + (float)(width / 2) - (float)num)
			{
				flag9 = true;
			}
			else if (num149 > position.X + (float)(width / 2) + (float)num)
			{
				flag10 = true;
			}
		}
		else if (type == 960 && !flag14)
		{
			num = 10;
			Player player = Main.player[owner];
			int num160 = ((player.Center.X - base.Center.X > 0f) ? 1 : (-1));
			if (player.velocity.X != 0f)
			{
				num160 = player.direction;
			}
			float num170 = -70 * num160;
			float num179 = player.Center.X + num170;
			if (num179 < base.Center.X - (float)num)
			{
				flag9 = true;
			}
			else if (num179 > base.Center.X + (float)num)
			{
				flag10 = true;
			}
		}
		else if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) < position.X + (float)(width / 2) - (float)num)
		{
			flag9 = true;
		}
		else if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) > position.X + (float)(width / 2) + (float)num)
		{
			flag10 = true;
		}
		if (num201)
		{
			flag9 = false;
			flag10 = true;
			num = 30;
		}
		if (flag15)
		{
			flag9 = false;
			flag10 = false;
		}
		if (type == 175)
		{
			float num190 = 0.1f;
			tileCollide = false;
			int num2 = 300;
			Vector2 vector = default(Vector2);
			((Vector2)(ref vector))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num13 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector.X;
			float num24 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector.Y;
			if (type == 127)
			{
				num24 = Main.player[owner].position.Y - vector.Y;
			}
			float num35 = (float)Math.Sqrt(num13 * num13 + num24 * num24);
			float num46 = 7f;
			float num57 = 2000f;
			bool num202 = num35 > num57;
			if (num35 < (float)num2 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
			{
				ai[0] = 0f;
				if (velocity.Y < -6f)
				{
					velocity.Y = -6f;
				}
			}
			if (num35 < 150f)
			{
				if (Math.Abs(velocity.X) > 2f || Math.Abs(velocity.Y) > 2f)
				{
					velocity *= 0.99f;
				}
				num190 = 0.01f;
				if (num13 < -2f)
				{
					num13 = -2f;
				}
				if (num13 > 2f)
				{
					num13 = 2f;
				}
				if (num24 < -2f)
				{
					num24 = -2f;
				}
				if (num24 > 2f)
				{
					num24 = 2f;
				}
			}
			else
			{
				if (num35 > 300f)
				{
					num190 = 0.2f;
				}
				num35 = num46 / num35;
				num13 *= num35;
				num24 *= num35;
			}
			if (num202)
			{
				int num78 = 17;
				for (int i = 0; i < 12; i++)
				{
					float speedX = 1f - Main.rand.NextFloat() * 2f;
					float speedY = 1f - Main.rand.NextFloat() * 2f;
					int num89 = Dust.NewDust(position, width, height, num78, speedX, speedY);
					Main.dust[num89].noLightEmittence = true;
					Main.dust[num89].noGravity = true;
				}
				base.Center = Main.player[owner].Center;
				velocity = Vector2.Zero;
				if (Main.myPlayer == owner)
				{
					netUpdate = true;
				}
			}
			if (Math.Abs(num13) > Math.Abs(num24) || num190 == 0.05f)
			{
				if (velocity.X < num13)
				{
					velocity.X += num190;
					if (num190 > 0.05f && velocity.X < 0f)
					{
						velocity.X += num190;
					}
				}
				if (velocity.X > num13)
				{
					velocity.X -= num190;
					if (num190 > 0.05f && velocity.X > 0f)
					{
						velocity.X -= num190;
					}
				}
			}
			if (Math.Abs(num13) <= Math.Abs(num24) || num190 == 0.05f)
			{
				if (velocity.Y < num24)
				{
					velocity.Y += num190;
					if (num190 > 0.05f && velocity.Y < 0f)
					{
						velocity.Y += num190;
					}
				}
				if (velocity.Y > num24)
				{
					velocity.Y -= num190;
					if (num190 > 0.05f && velocity.Y > 0f)
					{
						velocity.Y -= num190;
					}
				}
			}
			rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
			frameCounter++;
			if (frameCounter > 6)
			{
				frame++;
				frameCounter = 0;
			}
			if (frame > 1)
			{
				frame = 0;
			}
			return;
		}
		if (type == 197)
		{
			float num100 = 0.1f;
			tileCollide = false;
			int num110 = 300;
			Vector2 vector7 = default(Vector2);
			((Vector2)(ref vector7))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num119 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector7.X;
			float num120 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector7.Y;
			if (type == 127)
			{
				num120 = Main.player[owner].position.Y - vector7.Y;
			}
			float num121 = (float)Math.Sqrt(num119 * num119 + num120 * num120);
			float num122 = 3f;
			if (num121 > 500f)
			{
				localAI[0] = 10000f;
			}
			if (localAI[0] >= 10000f)
			{
				num122 = 14f;
			}
			float num123 = 2000f;
			bool num203 = num121 > num123;
			if (num121 < (float)num110 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
			{
				ai[0] = 0f;
				if (velocity.Y < -6f)
				{
					velocity.Y = -6f;
				}
			}
			if (num121 < 150f)
			{
				if (Math.Abs(velocity.X) > 2f || Math.Abs(velocity.Y) > 2f)
				{
					velocity *= 0.99f;
				}
				num100 = 0.01f;
				if (num119 < -2f)
				{
					num119 = -2f;
				}
				if (num119 > 2f)
				{
					num119 = 2f;
				}
				if (num120 < -2f)
				{
					num120 = -2f;
				}
				if (num120 > 2f)
				{
					num120 = 2f;
				}
			}
			else
			{
				if (num121 > 300f)
				{
					num100 = 0.2f;
				}
				num121 = num122 / num121;
				num119 *= num121;
				num120 *= num121;
			}
			if (num203)
			{
				int num124 = 26;
				for (int j = 0; j < 12; j++)
				{
					float speedX2 = 1f - Main.rand.NextFloat() * 2f;
					float speedY2 = 1f - Main.rand.NextFloat() * 2f;
					int num125 = Dust.NewDust(position, width, height, num124, speedX2, speedY2);
					Main.dust[num125].noLightEmittence = true;
					Main.dust[num125].noGravity = true;
				}
				base.Center = Main.player[owner].Center;
				velocity = Vector2.Zero;
				if (Main.myPlayer == owner)
				{
					netUpdate = true;
				}
			}
			if (velocity.X < num119)
			{
				velocity.X += num100;
				if (num100 > 0.05f && velocity.X < 0f)
				{
					velocity.X += num100;
				}
			}
			if (velocity.X > num119)
			{
				velocity.X -= num100;
				if (num100 > 0.05f && velocity.X > 0f)
				{
					velocity.X -= num100;
				}
			}
			if (velocity.Y < num120)
			{
				velocity.Y += num100;
				if (num100 > 0.05f && velocity.Y < 0f)
				{
					velocity.Y += num100;
				}
			}
			if (velocity.Y > num120)
			{
				velocity.Y -= num100;
				if (num100 > 0.05f && velocity.Y > 0f)
				{
					velocity.Y -= num100;
				}
			}
			localAI[0] += Main.rand.Next(10);
			if (localAI[0] > 10000f)
			{
				if (localAI[1] == 0f)
				{
					if (velocity.X < 0f)
					{
						localAI[1] = -1f;
					}
					else
					{
						localAI[1] = 1f;
					}
				}
				rotation += 0.25f * localAI[1];
				if (localAI[0] > 12000f)
				{
					localAI[0] = 0f;
				}
			}
			else
			{
				localAI[1] = 0f;
				float num126 = velocity.X * 0.1f;
				if (rotation > num126)
				{
					rotation -= (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f;
					if (rotation < num126)
					{
						rotation = num126;
					}
				}
				if (rotation < num126)
				{
					rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f;
					if (rotation > num126)
					{
						rotation = num126;
					}
				}
			}
			if ((double)rotation > 6.28)
			{
				rotation -= 6.28f;
			}
			if ((double)rotation < -6.28)
			{
				rotation += 6.28f;
			}
			return;
		}
		Vector2 center2;
		if (type == 198 || type == 380 || type == 774 || type == 815 || type == 817 || type == 886 || type == 892 || type == 894 || type == 901)
		{
			float num128 = 0.4f;
			if (type == 380)
			{
				num128 = 0.3f;
			}
			if (type == 774)
			{
				num128 = 0.3f;
			}
			tileCollide = false;
			int num129 = 100;
			float num130 = 50f;
			float num131 = 400f;
			float num132 = num131 / 2f;
			float num133 = 2000f;
			bool flag16 = false;
			Vector2 vector8 = default(Vector2);
			((Vector2)(ref vector8))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num134 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector8.X;
			float num135 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector8.Y;
			if (type == 774)
			{
				num130 = 2f;
				float num136 = (float)Math.Sin((float)Math.PI * 2f * ((float)Main.player[owner].miscCounter / 60f));
				float num137 = Utils.GetLerpValue(0.5f, 1f, num136, clamped: true);
				center2 = new Vector2(num134 - (float)(70 * Main.player[owner].direction), num135 - 60f);
				if (((Vector2)(ref center2)).Length() > 50f)
				{
					num136 = 0f;
					num137 = 0f;
				}
				num135 += -60f + num137 * -8f + num136 * 8f;
				num134 += (float)(70 * -Main.player[owner].direction);
			}
			else
			{
				if (type != 892 && type != 894)
				{
					num135 += (float)Main.rand.Next(-10, 21);
					num134 += (float)Main.rand.Next(-10, 21);
				}
				num134 += (float)(60 * -Main.player[owner].direction);
				num135 -= 60f;
			}
			Vector2 vector9 = default(Vector2);
			((Vector2)(ref vector9))._002Ector(num134, num135);
			if (type == 127)
			{
				num135 = Main.player[owner].position.Y - vector8.Y;
			}
			float num139 = (float)Math.Sqrt(num134 * num134 + num135 * num135);
			float num140 = num139;
			float num141 = 14f;
			if (type == 380)
			{
				num141 = 6f;
			}
			if (type == 815 || type == 817)
			{
				num141 = ((!(num139 < num131)) ? 10f : 6f);
			}
			if (type == 892 || type == 894 || type == 901)
			{
				if (num139 < num132)
				{
					num141 = 6f;
				}
				num141 = ((!(num139 < num131)) ? 12f : 9f);
			}
			if (type == 774)
			{
				num141 = 5f;
			}
			if (num139 < (float)num129 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
			{
				ai[0] = 0f;
				if (velocity.Y < -6f)
				{
					velocity.Y = -6f;
				}
			}
			if (num139 < num130)
			{
				if (Math.Abs(velocity.X) > 2f || Math.Abs(velocity.Y) > 2f)
				{
					if (type == 892 || type == 892)
					{
						velocity *= 0.95f;
					}
					else
					{
						velocity *= 0.99f;
					}
				}
				num128 = 0.01f;
			}
			else
			{
				if (type == 892 || type == 894 || type == 901)
				{
					if (num139 < 100f)
					{
						num128 = 0.1f;
					}
					if (num139 > num133)
					{
						flag16 = true;
					}
					else if (num139 > num131)
					{
						num128 = 0.7f;
					}
					else if (num139 > num132)
					{
						num128 = 0.5f;
					}
				}
				else if (type == 815 || type == 817)
				{
					if (num139 < 100f)
					{
						num128 = 0.1f;
					}
					if (num139 > num133)
					{
						flag16 = true;
					}
					else if (type != 815 && num139 > num131)
					{
						num128 = 0.5f;
					}
				}
				else if (type == 380)
				{
					if (num139 < 100f)
					{
						num128 = 0.1f;
					}
					if (num139 > 300f)
					{
						num128 = 0.4f;
					}
					if (num139 > num133)
					{
						flag16 = true;
					}
				}
				else if (type == 198 || type == 886)
				{
					if (num139 < 100f)
					{
						num128 = 0.1f;
					}
					if (num139 > 300f)
					{
						num128 = 0.6f;
					}
					if (num139 > num133)
					{
						flag16 = true;
					}
				}
				else if (type == 774)
				{
					if (num139 < 40f)
					{
						num128 = 0.1f;
					}
					if (num139 > 300f)
					{
						num128 = 0.6f;
					}
					if (num139 > num133)
					{
						flag16 = true;
					}
				}
				num139 = num141 / num139;
				num134 *= num139;
				num135 *= num139;
			}
			if (velocity.X < num134)
			{
				velocity.X += num128;
				if (num128 > 0.05f && velocity.X < 0f)
				{
					velocity.X += num128;
				}
			}
			if (velocity.X > num134)
			{
				velocity.X -= num128;
				if (num128 > 0.05f && velocity.X > 0f)
				{
					velocity.X -= num128;
				}
			}
			if (velocity.Y < num135)
			{
				velocity.Y += num128;
				if (num128 > 0.05f && velocity.Y < 0f)
				{
					velocity.Y += num128 * 2f;
				}
			}
			if (velocity.Y > num135)
			{
				velocity.Y -= num128;
				if (num128 > 0.05f && velocity.Y > 0f)
				{
					velocity.Y -= num128 * 2f;
				}
			}
			if ((double)velocity.X > 0.25)
			{
				direction = -1;
			}
			else if ((double)velocity.X < -0.25)
			{
				direction = 1;
			}
			spriteDirection = direction;
			rotation = velocity.X * 0.05f;
			if (flag16)
			{
				int num142 = 33;
				if (type == 198 || type == 886)
				{
					num142 = 147;
				}
				if (type == 815)
				{
					num142 = 31;
				}
				if (type == 817)
				{
					num142 = 21;
				}
				for (int k = 0; k < 12; k++)
				{
					float speedX3 = 1f - Main.rand.NextFloat() * 2f;
					float speedY3 = 1f - Main.rand.NextFloat() * 2f;
					int num143 = Dust.NewDust(position, width, height, num142, speedX3, speedY3);
					Main.dust[num143].noLightEmittence = true;
					Main.dust[num143].noGravity = true;
				}
				base.Center = Main.player[owner].Center;
				velocity = Vector2.Zero;
				if (Main.myPlayer == owner)
				{
					netUpdate = true;
				}
			}
			bool flag2 = false;
			int num144 = 3;
			int num145 = 0;
			int num146 = 3;
			if (type == 380)
			{
				num144 = 6;
			}
			if (type == 815)
			{
				num144 = 5;
				num145 = 0;
				num146 = 5;
				if (num140 > num131)
				{
					num145 = 6;
					num146 = 9;
				}
			}
			if (type == 817)
			{
				num144 = 5;
				num145 = 0;
				num146 = 2;
				flag2 = true;
			}
			if (type == 901)
			{
				num144 = 4;
				num145 = 0;
				num146 = 5;
				if (num140 > num131 / 2f)
				{
					num144 = 3;
					num145 = 6;
					num146 = 11;
				}
			}
			if (type == 892)
			{
				num144 = 6;
				num145 = 0;
				num146 = Main.projFrames[type] - 1;
			}
			if (type == 886 || type == 894)
			{
				num144 = 4;
				num145 = 0;
				num146 = Main.projFrames[type] - 1;
			}
			if (type == 774)
			{
				if (((Vector2)(ref Main.player[owner].velocity)).Length() < 2f && ((Vector2)(ref vector9)).Length() < 10f)
				{
					direction = -Main.player[owner].direction;
					spriteDirection = direction;
				}
				num144 = 6;
				if (!wet)
				{
					num145 += 4;
					num146 += 4;
				}
				rotation = velocity.X * 0.05f + Math.Abs(velocity.Y * -0.05f);
			}
			if (flag2)
			{
				int num147 = num144 * (num146 - num145) * 2;
				frameCounter++;
				if (frameCounter >= num147)
				{
					frameCounter = 0;
				}
				frame = frameCounter / num144;
				if (frame > num146)
				{
					frame = num146 + (num146 - frame);
				}
				frame = (int)MathHelper.Clamp((float)frame, (float)num145, (float)num146);
			}
			else if (++frameCounter >= num144)
			{
				frameCounter = 0;
				frame++;
				if (frame < num145 || frame > num146)
				{
					frame = num145;
				}
			}
			return;
		}
		if (type == 211)
		{
			float num148 = 0.2f;
			float num150 = 5f;
			tileCollide = false;
			Vector2 vector10 = default(Vector2);
			((Vector2)(ref vector10))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num151 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector10.X;
			float num152 = Main.player[owner].position.Y + Main.player[owner].gfxOffY + (float)(Main.player[owner].height / 2) - vector10.Y;
			if (Main.player[owner].controlLeft)
			{
				num151 -= 120f;
			}
			else if (Main.player[owner].controlRight)
			{
				num151 += 120f;
			}
			if (Main.player[owner].controlDown)
			{
				num152 += 120f;
			}
			else
			{
				if (Main.player[owner].controlUp)
				{
					num152 -= 120f;
				}
				num152 -= 60f;
			}
			float num153 = (float)Math.Sqrt(num151 * num151 + num152 * num152);
			if (num153 > 1000f)
			{
				position.X += num151;
				position.Y += num152;
			}
			if (localAI[0] == 1f)
			{
				if (num153 < 10f)
				{
					Player player2 = Main.player[owner];
					if (Math.Abs(player2.velocity.X) + Math.Abs(player2.velocity.Y) < num150 && (player2.velocity.Y == 0f || (player2.mount.Active && player2.mount.CanFly())))
					{
						localAI[0] = 0f;
					}
				}
				num150 = 12f;
				if (num153 < num150)
				{
					velocity.X = num151;
					velocity.Y = num152;
				}
				else
				{
					num153 = num150 / num153;
					velocity.X = num151 * num153;
					velocity.Y = num152 * num153;
				}
				if ((double)velocity.X > 0.5)
				{
					direction = -1;
				}
				else if ((double)velocity.X < -0.5)
				{
					direction = 1;
				}
				spriteDirection = direction;
				rotation -= (0.2f + Math.Abs(velocity.X) * 0.025f) * (float)direction;
				frameCounter++;
				if (frameCounter > 3)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 5)
				{
					frame = 5;
				}
				if (frame > 9)
				{
					frame = 5;
				}
				for (int l = 0; l < 2; l++)
				{
					int num154 = Dust.NewDust(new Vector2(position.X + 3f, position.Y + 4f), 14, 14, 156);
					Dust obj = Main.dust[num154];
					obj.velocity *= 0.2f;
					Main.dust[num154].noGravity = true;
					Main.dust[num154].scale = 1.25f;
					Main.dust[num154].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cLight, Main.player[owner]);
				}
				return;
			}
			if (num153 > 200f)
			{
				localAI[0] = 1f;
			}
			if ((double)velocity.X > 0.5)
			{
				direction = -1;
			}
			else if ((double)velocity.X < -0.5)
			{
				direction = 1;
			}
			spriteDirection = direction;
			if (num153 < 10f)
			{
				velocity.X = num151;
				velocity.Y = num152;
				rotation = velocity.X * 0.05f;
				if (num153 < num150)
				{
					position += velocity;
					velocity *= 0f;
					num148 = 0f;
				}
				direction = -Main.player[owner].direction;
			}
			num153 = num150 / num153;
			num151 *= num153;
			num152 *= num153;
			if (velocity.X < num151)
			{
				velocity.X += num148;
				if (velocity.X < 0f)
				{
					velocity.X *= 0.99f;
				}
			}
			if (velocity.X > num151)
			{
				velocity.X -= num148;
				if (velocity.X > 0f)
				{
					velocity.X *= 0.99f;
				}
			}
			if (velocity.Y < num152)
			{
				velocity.Y += num148;
				if (velocity.Y < 0f)
				{
					velocity.Y *= 0.99f;
				}
			}
			if (velocity.Y > num152)
			{
				velocity.Y -= num148;
				if (velocity.Y > 0f)
				{
					velocity.Y *= 0.99f;
				}
			}
			if (velocity.X != 0f || velocity.Y != 0f)
			{
				rotation = velocity.X * 0.05f;
			}
			frameCounter++;
			if (frameCounter > 3)
			{
				frame++;
				frameCounter = 0;
			}
			if (frame > 4)
			{
				frame = 0;
			}
			return;
		}
		if (type == 199)
		{
			float num155 = 0.1f;
			tileCollide = false;
			int num156 = 200;
			Vector2 vector11 = default(Vector2);
			((Vector2)(ref vector11))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num157 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector11.X;
			float num158 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector11.Y;
			num158 -= 60f;
			num157 -= 2f;
			if (type == 127)
			{
				num158 = Main.player[owner].position.Y - vector11.Y;
			}
			float num159 = (float)Math.Sqrt(num157 * num157 + num158 * num158);
			float num161 = 4f;
			float num162 = num159;
			float num163 = 2000f;
			bool num204 = num159 > num163;
			if (num159 < (float)num156 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
			{
				ai[0] = 0f;
				if (velocity.Y < -6f)
				{
					velocity.Y = -6f;
				}
			}
			if (num159 < 4f)
			{
				velocity.X = num157;
				velocity.Y = num158;
				num155 = 0f;
			}
			else
			{
				if (num159 > 350f)
				{
					num155 = 0.2f;
					num161 = 10f;
				}
				num159 = num161 / num159;
				num157 *= num159;
				num158 *= num159;
			}
			if (num204)
			{
				int num164 = 2;
				for (int m = 0; m < 12; m++)
				{
					float speedX4 = 1f - Main.rand.NextFloat() * 2f;
					float speedY4 = 1f - Main.rand.NextFloat() * 2f;
					int num165 = Dust.NewDust(position, width, height, num164, speedX4, speedY4);
					Main.dust[num165].noLightEmittence = true;
					Main.dust[num165].noGravity = true;
				}
				base.Center = Main.player[owner].Center;
				velocity = Vector2.Zero;
				if (Main.myPlayer == owner)
				{
					netUpdate = true;
				}
			}
			if (velocity.X < num157)
			{
				velocity.X += num155;
				if (velocity.X < 0f)
				{
					velocity.X += num155;
				}
			}
			if (velocity.X > num157)
			{
				velocity.X -= num155;
				if (velocity.X > 0f)
				{
					velocity.X -= num155;
				}
			}
			if (velocity.Y < num158)
			{
				velocity.Y += num155;
				if (velocity.Y < 0f)
				{
					velocity.Y += num155;
				}
			}
			if (velocity.Y > num158)
			{
				velocity.Y -= num155;
				if (velocity.Y > 0f)
				{
					velocity.Y -= num155;
				}
			}
			direction = -Main.player[owner].direction;
			spriteDirection = 1;
			rotation = velocity.Y * 0.05f * (float)(-direction);
			if (num162 >= 50f)
			{
				frameCounter++;
				if (frameCounter <= 6)
				{
					return;
				}
				frameCounter = 0;
				if (velocity.X < 0f)
				{
					if (frame < 2)
					{
						frame++;
					}
					if (frame > 2)
					{
						frame--;
					}
				}
				else
				{
					if (frame < 6)
					{
						frame++;
					}
					if (frame > 6)
					{
						frame--;
					}
				}
			}
			else
			{
				frameCounter++;
				if (frameCounter > 6)
				{
					frame += direction;
					frameCounter = 0;
				}
				if (frame > 7)
				{
					frame = 0;
				}
				if (frame < 0)
				{
					frame = 7;
				}
			}
			return;
		}
		if (type == 885 || type == 889)
		{
			Player player3 = Main.player[owner];
			float num166 = 0.15f;
			tileCollide = false;
			int num167 = 150;
			Vector2 center = base.Center;
			float num168 = player3.Center.X - center.X;
			float num169 = player3.Center.Y - center.Y;
			num169 -= 65f;
			num168 -= (float)(30 * player3.direction);
			float num171 = (float)Math.Sqrt(num168 * num168 + num169 * num169);
			float num172 = 8f;
			float num173 = num171;
			float num174 = 2000f;
			bool num205 = num171 > num174;
			if (num171 < (float)num167 && player3.velocity.Y == 0f && position.Y + (float)height <= player3.position.Y + (float)player3.height && !Collision.SolidCollision(position, width, height) && velocity.Y < -6f)
			{
				velocity.Y = -6f;
			}
			if (num171 < 10f)
			{
				velocity *= 0.9f;
				if (((Vector2)(ref velocity)).Length() < 0.5f)
				{
					velocity = Vector2.Zero;
				}
				num166 = 0f;
			}
			else
			{
				if (num171 > (float)num167)
				{
					num166 = 0.2f;
					num172 = 12f;
				}
				num171 = num172 / num171;
				num168 *= num171;
				num169 *= num171;
			}
			if (num205)
			{
				int num175 = 234;
				if (type == 889)
				{
					num175 = 60;
				}
				for (int n = 0; n < 12; n++)
				{
					float speedX5 = 1f - Main.rand.NextFloat() * 2f;
					float speedY5 = 1f - Main.rand.NextFloat() * 2f;
					int num176 = Dust.NewDust(position, width, height, num175, speedX5, speedY5);
					Main.dust[num176].noLightEmittence = true;
					Main.dust[num176].noGravity = true;
				}
				base.Center = player3.Center;
				velocity = Vector2.Zero;
				if (Main.myPlayer == owner)
				{
					netUpdate = true;
				}
			}
			if (velocity.X < num168)
			{
				velocity.X += num166;
				if (velocity.X < 0f)
				{
					velocity.X += num166;
				}
			}
			if (velocity.X > num168)
			{
				velocity.X -= num166;
				if (velocity.X > 0f)
				{
					velocity.X -= num166;
				}
			}
			if (velocity.Y < num169)
			{
				velocity.Y += num166;
				if (velocity.Y < 0f)
				{
					velocity.Y += num166;
				}
			}
			if (velocity.Y > num169)
			{
				velocity.Y -= num166;
				if (velocity.Y > 0f)
				{
					velocity.Y -= num166;
				}
			}
			direction = -player3.direction;
			spriteDirection = -direction;
			int num177 = 100;
			if (num173 >= (float)num167)
			{
				rotation += 0.5f;
				if (rotation > (float)Math.PI * 2f)
				{
					rotation -= (float)Math.PI * 2f;
				}
				frame = 6;
				frameCounter = 0;
				if (type == 885)
				{
					localAI[0] = 0f;
				}
				if (type == 889)
				{
					localAI[0] += 3f;
					if (localAI[0] > (float)num177)
					{
						localAI[0] = num177;
					}
				}
				return;
			}
			rotation *= 0.95f;
			if (rotation < 0.05f)
			{
				rotation = 0f;
			}
			frameCounter++;
			if (type == 885)
			{
				switch (frameCounter)
				{
				case 10:
					localAI[0] = 0f;
					break;
				case 20:
					localAI[0] = 1f;
					break;
				case 30:
					localAI[0] = 2f;
					break;
				case 40:
					localAI[0] = 1f;
					break;
				}
			}
			if (type == 889)
			{
				localAI[0] -= 3f;
				if (localAI[0] < 0f)
				{
					localAI[0] = 0f;
				}
			}
			if (frameCounter % 5 == 0)
			{
				frame++;
				if (frame > 5)
				{
					frame = 0;
				}
			}
			if (frameCounter >= 40)
			{
				frameCounter = 0;
			}
			return;
		}
		bool flag3 = ai[1] == 0f;
		if (flag)
		{
			flag3 = true;
		}
		if (flag3)
		{
			int num178 = 500;
			if (type == 127)
			{
				num178 = 200;
			}
			if (type == 208)
			{
				num178 = 300;
			}
			switch (type)
			{
			case 816:
			case 825:
			case 854:
			case 858:
			case 859:
			case 860:
			case 881:
			case 884:
			case 890:
			case 891:
			case 897:
			case 900:
			case 934:
				num178 = 400;
				break;
			case 821:
			case 899:
				num178 = 500;
				break;
			}
			if (flag13 || type == 266 || (type >= 390 && type <= 392))
			{
				num178 += 40 * minionPos;
				if (localAI[0] > 0f)
				{
					num178 += 500;
				}
				if (type == 266 && localAI[0] > 0f)
				{
					num178 += 100;
				}
				if (type >= 390 && type <= 392 && localAI[0] > 0f)
				{
					num178 += 400;
				}
			}
			if (Main.player[owner].rocketDelay2 > 0)
			{
				ai[0] = 1f;
			}
			Vector2 vector12 = default(Vector2);
			((Vector2)(ref vector12))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num206 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector12.X;
			float num180 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector12.Y;
			float num181 = (float)Math.Sqrt(num206 * num206 + num180 * num180);
			if (!flag14)
			{
				if (num181 > 2000f)
				{
					position.X = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - (float)(width / 2);
					position.Y = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - (float)(height / 2);
				}
				else if (num181 > (float)num178 || (Math.Abs(num180) > 300f && ((!flag13 && type != 266 && (type < 390 || type > 392)) || !(localAI[0] > 0f))))
				{
					if (type != 324)
					{
						if (num180 > 0f && velocity.Y < 0f)
						{
							velocity.Y = 0f;
						}
						if (num180 < 0f && velocity.Y > 0f)
						{
							velocity.Y = 0f;
						}
					}
					ai[0] = 1f;
				}
			}
		}
		if ((type == 209 || type == 956) && ai[0] != 0f)
		{
			if (Main.player[owner].velocity.Y == 0f && alpha >= 100)
			{
				position.X = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - (float)(width / 2);
				position.Y = Main.player[owner].position.Y + (float)Main.player[owner].height - (float)height;
				ai[0] = 0f;
			}
			else
			{
				velocity.X = 0f;
				velocity.Y = 0f;
				if (type == 956 && alpha < 100)
				{
					int num182 = Dust.NewDust(position, width, height, 6, velocity.X, velocity.Y, 0, default(Color), 1.2f);
					Main.dust[num182].velocity.X += Main.rand.NextFloat() - 0.5f;
					Main.dust[num182].velocity.Y += (Main.rand.NextFloat() + 0.5f) * -1f;
					if (Main.rand.Next(3) != 0)
					{
						Main.dust[num182].noGravity = true;
					}
				}
				alpha += 5;
				if (alpha > 255)
				{
					alpha = 255;
				}
			}
		}
		else if (ai[0] != 0f && !flag14)
		{
			float num183 = 0.2f;
			int num184 = 200;
			if (type == 127)
			{
				num184 = 100;
			}
			if (flag13 || type == 816 || type == 821 || type == 825 || type == 854 || type == 858 || type == 859 || type == 860)
			{
				num183 = 0.5f;
				num184 = 100;
			}
			if (type == 875)
			{
				num183 = 2f;
				num184 = 100;
			}
			tileCollide = false;
			Vector2 vector13 = default(Vector2);
			((Vector2)(ref vector13))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num185 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector13.X;
			if (flag13 || type == 266 || (type >= 390 && type <= 392))
			{
				num185 -= (float)(40 * Main.player[owner].direction);
				float num186 = 700f;
				if (flag13)
				{
					num186 += 100f;
				}
				bool flag4 = false;
				int num187 = -1;
				for (int num188 = 0; num188 < 200; num188++)
				{
					if (!Main.npc[num188].CanBeChasedBy(this))
					{
						continue;
					}
					float num189 = Main.npc[num188].position.X + (float)(Main.npc[num188].width / 2);
					float num191 = Main.npc[num188].position.Y + (float)(Main.npc[num188].height / 2);
					if (Math.Abs(Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - num189) + Math.Abs(Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - num191) < num186)
					{
						if (Collision.CanHit(position, width, height, Main.npc[num188].position, Main.npc[num188].width, Main.npc[num188].height))
						{
							num187 = num188;
						}
						flag4 = true;
						break;
					}
				}
				if (!flag4)
				{
					num185 -= (float)(40 * minionPos * Main.player[owner].direction);
				}
				if (flag4 && num187 >= 0)
				{
					ai[0] = 0f;
				}
			}
			float num192 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector13.Y;
			if (type == 127)
			{
				num192 = Main.player[owner].position.Y - vector13.Y;
			}
			float num193 = (float)Math.Sqrt(num185 * num185 + num192 * num192);
			float num194 = num193;
			float num195 = 10f;
			float num196 = num193;
			if (type == 111)
			{
				num195 = 11f;
			}
			if (type == 127)
			{
				num195 = 9f;
			}
			if (type == 875)
			{
				num183 = 1.8f;
				num195 = 16f;
			}
			if (type == 324)
			{
				num195 = 20f;
			}
			if (flag13 || type == 816 || type == 821 || type == 825 || type == 854 || type == 858 || type == 859 || type == 860 || type == 956 || type == 958 || type == 959 || type == 960 || type == 994 || type == 998 || type == 1003 || type == 1004)
			{
				num183 = 0.4f;
				num195 = 12f;
				if (flag13)
				{
					num183 = 0.8f;
				}
				if (num195 < Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y))
				{
					num195 = Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y);
				}
			}
			if (type == 208 && Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y) > 4f)
			{
				num184 = -1;
			}
			if (num193 < (float)num184 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
			{
				ai[0] = 0f;
				if (velocity.Y < -6f)
				{
					velocity.Y = -6f;
				}
			}
			if (num193 < 60f)
			{
				num185 = velocity.X;
				num192 = velocity.Y;
			}
			else
			{
				num193 = num195 / num193;
				num185 *= num193;
				num192 *= num193;
			}
			if (type == 324)
			{
				if (num196 > 1000f)
				{
					if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num195 - 1.25)
					{
						velocity *= 1.025f;
					}
					if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) > (double)num195 + 1.25)
					{
						velocity *= 0.975f;
					}
				}
				else if (num196 > 600f)
				{
					if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < num195 - 1f)
					{
						velocity *= 1.05f;
					}
					if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) > num195 + 1f)
					{
						velocity *= 0.95f;
					}
				}
				else if (num196 > 400f)
				{
					if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num195 - 0.5)
					{
						velocity *= 1.075f;
					}
					if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) > (double)num195 + 0.5)
					{
						velocity *= 0.925f;
					}
				}
				else
				{
					if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num195 - 0.25)
					{
						velocity *= 1.1f;
					}
					if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) > (double)num195 + 0.25)
					{
						velocity *= 0.9f;
					}
				}
				velocity.X = (velocity.X * 34f + num185) / 35f;
				velocity.Y = (velocity.Y * 34f + num192) / 35f;
			}
			else if (type == 875)
			{
				if (num194 < (float)num184)
				{
					if (velocity.X < num185)
					{
						velocity.X += num183;
					}
					else if (velocity.X > num185)
					{
						velocity.X -= num183;
					}
					if (velocity.Y < num192)
					{
						velocity.Y += num183;
					}
					else if (velocity.Y > num192)
					{
						velocity.Y -= num183;
					}
				}
				else
				{
					velocity = Vector2.Lerp(velocity, new Vector2(num185, num192), 0.75f);
				}
			}
			else
			{
				if (velocity.X < num185)
				{
					velocity.X += num183;
					if (velocity.X < 0f)
					{
						velocity.X += num183 * 1.5f;
					}
				}
				if (velocity.X > num185)
				{
					velocity.X -= num183;
					if (velocity.X > 0f)
					{
						velocity.X -= num183 * 1.5f;
					}
				}
				if (velocity.Y < num192)
				{
					velocity.Y += num183;
					if (velocity.Y < 0f)
					{
						velocity.Y += num183 * 1.5f;
					}
				}
				if (velocity.Y > num192)
				{
					velocity.Y -= num183;
					if (velocity.Y > 0f)
					{
						velocity.Y -= num183 * 1.5f;
					}
				}
			}
			if (type == 111)
			{
				frame = 7;
			}
			if (flag13 && frame < 12)
			{
				frame = Main.rand.Next(12, 18);
				frameCounter = 0;
			}
			if (type != 313)
			{
				if ((double)velocity.X > 0.5)
				{
					spriteDirection = -1;
				}
				else if ((double)velocity.X < -0.5)
				{
					spriteDirection = 1;
				}
			}
			if (type == 112)
			{
				frameCounter++;
				if (frame < 3)
				{
					frame = 3;
					frameCounter = 0;
				}
				if (frameCounter > 3)
				{
					frameCounter = 0;
					frame++;
					if (frame >= Main.projFrames[type])
					{
						frame = 3;
					}
				}
				rotation = velocity.X * 0.125f;
			}
			else if (type == 900)
			{
				spriteDirection = -1;
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				frameCounter++;
				if (frame < 10)
				{
					frame = 10;
					frameCounter = 0;
				}
				if (frameCounter > 3)
				{
					frameCounter = 0;
					frame++;
					if (frame >= Main.projFrames[type])
					{
						frame = 10;
					}
				}
				rotation = velocity.X * 0.125f;
			}
			else if (type == 899)
			{
				spriteDirection = -1;
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				frameCounter++;
				if (frame < 10)
				{
					frame = 10;
					frameCounter = 0;
				}
				if (frameCounter > 3)
				{
					frameCounter = 0;
					frame++;
					if (frame >= Main.projFrames[type])
					{
						frame = 10;
					}
				}
				Vector2 v = velocity;
				((Vector2)(ref v)).Normalize();
				rotation = v.ToRotation();
				if (velocity.X < 0f)
				{
					rotation += (float)Math.PI;
				}
			}
			else if (type == 897)
			{
				spriteDirection = 1;
				frameCounter++;
				if (frame < 8)
				{
					frame = 8;
					frameCounter = 0;
				}
				if (frameCounter > 3)
				{
					frameCounter = 0;
					frame++;
					if (frame >= Main.projFrames[type])
					{
						frame = 8;
					}
				}
				Vector2 v4 = velocity;
				((Vector2)(ref v4)).Normalize();
				rotation = v4.ToRotation() + (float)Math.PI / 2f;
			}
			else if (type == 891)
			{
				spriteDirection = 1;
				frameCounter++;
				if (frame < 9)
				{
					frame = 9;
					frameCounter = 0;
				}
				if (frameCounter > 3)
				{
					frameCounter = 0;
					frame++;
					if (frame >= Main.projFrames[type])
					{
						frame = 9;
					}
				}
				Vector2 v5 = velocity;
				((Vector2)(ref v5)).Normalize();
				rotation = v5.ToRotation() + (float)Math.PI / 2f;
			}
			else if (type == 890)
			{
				spriteDirection = -1;
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				frameCounter++;
				if (frame < 9)
				{
					frame = 9;
					frameCounter = 0;
				}
				if (frameCounter > 3)
				{
					frameCounter = 0;
					frame++;
					if (frame >= Main.projFrames[type])
					{
						frame = 9;
					}
				}
				rotation = velocity.X * 0.025f;
			}
			else if (type == 884)
			{
				spriteDirection = -1;
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				frameCounter++;
				if (frame < 9)
				{
					frame = 9;
					frameCounter = 0;
				}
				if (frameCounter > 3)
				{
					frameCounter = 0;
					frame++;
					if (frame >= Main.projFrames[type])
					{
						frame = 9;
					}
				}
				Vector2 v6 = velocity;
				((Vector2)(ref v6)).Normalize();
				rotation = v6.ToRotation() + (float)Math.PI / 2f;
			}
			else if (type == 881 || type == 934)
			{
				int num197 = 1226;
				if (type == 934)
				{
					num197 = 1261;
				}
				if (frame < 6 || frame > 11)
				{
					Gore.NewGore(new Vector2(base.Center.X, position.Y), velocity * 0.5f, num197);
				}
				frameCounter++;
				if (frameCounter > 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 6 || frame > 11)
				{
					frame = 6;
				}
				Vector2 v7 = velocity;
				((Vector2)(ref v7)).Normalize();
				rotation = v7.ToRotation() + (float)Math.PI / 2f;
			}
			else if (type == 875)
			{
				if (++frameCounter > 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 7 || frame > 10)
				{
					frame = 7;
				}
				Vector2 v8 = velocity;
				((Vector2)(ref v8)).Normalize();
				rotation = v8.ToRotation() + ((spriteDirection == -1) ? 0f : ((float)Math.PI));
			}
			else if (type == 825)
			{
				if (++frameCounter > 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 21 || frame > 25)
				{
					frame = 21;
				}
				rotation = velocity.X * 0.025f;
			}
			else if (type == 854)
			{
				if (frame < 13)
				{
					Gore.NewGore(new Vector2(base.Center.X, position.Y), velocity * 0.5f, 1269);
				}
				if (++frameCounter > 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 13 || frame > 18)
				{
					frame = 13;
				}
				Vector2 v9 = velocity;
				((Vector2)(ref v9)).Normalize();
				rotation = v9.ToRotation() + (float)Math.PI / 2f;
			}
			else if (type == 858)
			{
				if (++frameCounter > 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 10 || frame > 13)
				{
					frame = 10;
				}
				Vector2 v10 = velocity;
				((Vector2)(ref v10)).Normalize();
				rotation = v10.ToRotation() + ((spriteDirection == -1) ? 0f : ((float)Math.PI));
			}
			else if (type == 859)
			{
				if (++frameCounter > 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 18 || frame > 23)
				{
					frame = 18;
				}
				rotation = velocity.X * 0.025f;
			}
			else if (type == 860)
			{
				if (frame < 6)
				{
					frame = 8;
					frameCounter = 0;
				}
				if (++frameCounter > 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 13)
				{
					frame = 6;
				}
				Vector2 v11 = velocity;
				((Vector2)(ref v11)).Normalize();
				rotation = v11.ToRotation() + (float)Math.PI / 2f;
			}
			else if (type == 816)
			{
				if (++frameCounter > 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 11 || frame > 16)
				{
					frame = 11;
				}
				rotation = velocity.X * 0.025f;
			}
			else if (type == 821)
			{
				if (++frameCounter > 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 19 || frame > 22)
				{
					frame = 19;
				}
				rotation = velocity.X * 0.025f;
			}
			else if (type == 958)
			{
				spriteDirection = -1;
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				if (frame < 13)
				{
					frame = 13;
					frameCounter = 0;
				}
				if (++frameCounter > 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 16)
				{
					frame = 13;
				}
				rotation = MathHelper.Clamp(velocity.X * 0.025f, -0.4f, 0.4f);
			}
			else if (type == 960)
			{
				spriteDirection = -1;
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				frame = 4;
				frameCounter = 0;
				Vector2 v2 = velocity;
				((Vector2)(ref v2)).Normalize();
				rotation = v2.ToRotation() + (float)Math.PI / 2f;
			}
			else if (type == 959)
			{
				spriteDirection = -1;
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				frame = 11;
				frameCounter = 0;
				rotation = MathHelper.Clamp(velocity.X * 0.025f, -0.4f, 0.4f);
				float num198 = Vector2.Dot(velocity.SafeNormalize(Vector2.UnitX), new Vector2(0f, -1f));
				if (num198 > 0f && Main.rand.NextFloat() < 0.3f + num198 * 0.3f)
				{
					Dust dust = Dust.NewDustDirect(position, width, height, 16, velocity.X * 0.7f, velocity.Y * 1.2f, 150, default(Color), 0.6f);
					dust.noGravity = true;
					dust.fadeIn = 1f;
					dust.velocity.X = velocity.X * 0.3f;
					dust.position = base.Top + new Vector2(0f, -10f) + new Vector2(Main.rand.NextFloatDirection() * 30f, Main.rand.NextFloatDirection() * 10f);
					dust.velocity *= 0.7f;
					dust.position += dust.velocity * 2f;
				}
			}
			else if (type == 994)
			{
				spriteDirection = -1;
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				frameCounter++;
				if (frameCounter > 5)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 13 || frame > 15)
				{
					frame = 13;
				}
				rotation = MathHelper.Clamp(velocity.X * 0.025f, -0.4f, 0.4f);
			}
			else if (type == 998)
			{
				spriteDirection = 1;
				if (velocity.X > 0f)
				{
					spriteDirection = -1;
				}
				frameCounter++;
				if (frameCounter > 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 6 || frame > 9)
				{
					frame = 6;
				}
				rotation = MathHelper.Clamp(velocity.X * 0.025f, -0.4f, 0.4f);
			}
			else if (type == 1003)
			{
				spriteDirection = 1;
				if (velocity.X > 0f)
				{
					spriteDirection = -1;
				}
				frameCounter++;
				if (frameCounter > 3)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 12 || frame > 15)
				{
					frame = 12;
				}
				rotation = MathHelper.Clamp(velocity.X * 0.025f, -0.35f, 0.35f);
			}
			else if (type == 1004)
			{
				spriteDirection = 1;
				if (velocity.X > 0f)
				{
					spriteDirection = -1;
				}
				frameCounter++;
				if (frameCounter > 3)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 10 || frame > 14)
				{
					frame = 10;
				}
				rotation = MathHelper.Clamp(velocity.X * 0.025f, -0.35f, 0.35f);
			}
			else if (type == 112)
			{
				if (spriteDirection == -1)
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
				else
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
			}
			else if (type >= 390 && type <= 392)
			{
				int num199 = (int)(base.Center.X / 16f);
				int num200 = (int)(base.Center.Y / 16f);
				if (Main.tile[num199, num200] != null && Main.tile[num199, num200].wall > 0)
				{
					rotation = velocity.ToRotation() + (float)Math.PI / 2f;
					frameCounter += (int)(Math.Abs(velocity.X) + Math.Abs(velocity.Y));
					if (frameCounter > 5)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 7)
					{
						frame = 4;
					}
					if (frame < 4)
					{
						frame = 7;
					}
				}
				else
				{
					frameCounter++;
					if (frameCounter > 2)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 8 || frame > 10)
					{
						frame = 8;
					}
					rotation = velocity.X * 0.1f;
				}
			}
			else if (type == 334)
			{
				frameCounter++;
				if (frameCounter > 1)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 7 || frame > 10)
				{
					frame = 7;
				}
				rotation = velocity.X * 0.1f;
			}
			else if (type == 353)
			{
				frameCounter++;
				if (frameCounter > 6)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 10 || frame > 13)
				{
					frame = 10;
				}
				rotation = velocity.X * 0.05f;
			}
			else if (type == 127)
			{
				frameCounter += 3;
				if (frameCounter > 6)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame <= 5 || frame > 15)
				{
					frame = 6;
				}
				rotation = velocity.X * 0.1f;
			}
			else if (type == 269)
			{
				if (frame == 6)
				{
					frameCounter = 0;
				}
				else if (frame < 4 || frame > 6)
				{
					frameCounter = 0;
					frame = 4;
				}
				else
				{
					frameCounter++;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
				}
				rotation = velocity.X * 0.05f;
			}
			else if (type == 266)
			{
				frameCounter++;
				if (frameCounter > 6)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 2 || frame > 5)
				{
					frame = 2;
				}
				rotation = velocity.X * 0.1f;
			}
			else if (type == 324)
			{
				frameCounter++;
				if (frameCounter > 1)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 6 || frame > 9)
				{
					frame = 6;
				}
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.58f;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.9f, 0.6f, 0.2f);
				for (int num3 = 0; num3 < 2; num3++)
				{
					int num4 = 4;
					int num5 = Dust.NewDust(new Vector2(base.Center.X - (float)num4, base.Center.Y - (float)num4) - velocity * 0f, num4 * 2, num4 * 2, 6, 0f, 0f, 100);
					Main.dust[num5].scale *= 1.8f + (float)Main.rand.Next(10) * 0.1f;
					Dust obj2 = Main.dust[num5];
					obj2.velocity *= 0.2f;
					if (num3 == 1)
					{
						Dust obj3 = Main.dust[num5];
						obj3.position -= velocity * 0.5f;
					}
					Main.dust[num5].noGravity = true;
					num5 = Dust.NewDust(new Vector2(base.Center.X - (float)num4, base.Center.Y - (float)num4) - velocity * 0f, num4 * 2, num4 * 2, 31, 0f, 0f, 100, default(Color), 0.5f);
					Main.dust[num5].fadeIn = 1f + (float)Main.rand.Next(5) * 0.1f;
					Dust obj4 = Main.dust[num5];
					obj4.velocity *= 0.05f;
					if (num3 == 1)
					{
						Dust obj5 = Main.dust[num5];
						obj5.position -= velocity * 0.5f;
					}
				}
			}
			else if (type == 268)
			{
				frameCounter++;
				if (frameCounter > 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 6 || frame > 7)
				{
					frame = 6;
				}
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.58f;
			}
			else if (type == 200)
			{
				frameCounter += 3;
				if (frameCounter > 6)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame <= 5 || frame > 9)
				{
					frame = 6;
				}
				rotation = velocity.X * 0.1f;
			}
			else if (type == 208)
			{
				rotation = velocity.X * 0.075f;
				frameCounter++;
				if (frameCounter > 6)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 4)
				{
					frame = 1;
				}
				if (frame < 1)
				{
					frame = 1;
				}
			}
			else if (type == 236)
			{
				rotation = velocity.Y * 0.05f * (float)direction;
				if (velocity.Y < 0f)
				{
					frameCounter += 2;
				}
				else
				{
					frameCounter++;
				}
				if (frameCounter >= 6)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 12)
				{
					frame = 9;
				}
				if (frame < 9)
				{
					frame = 9;
				}
			}
			else if (type == 499)
			{
				rotation = velocity.Y * 0.05f * (float)direction;
				if (velocity.Y < 0f)
				{
					frameCounter += 2;
				}
				else
				{
					frameCounter++;
				}
				if (frameCounter >= 6)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame >= 12)
				{
					frame = 8;
				}
				if (frame < 8)
				{
					frame = 8;
				}
			}
			else if (type == 765)
			{
				rotation = velocity.Y * 0.05f * (float)direction;
				frameCounter++;
				if (frameCounter >= 8)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame >= 10)
				{
					frame = 8;
				}
				if (frame < 6)
				{
					frame = 6;
				}
			}
			else if (type == 314)
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.58f;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 12)
				{
					frame = 7;
				}
				if (frame < 7)
				{
					frame = 7;
				}
			}
			else if (type == 319)
			{
				rotation = velocity.X * 0.05f;
				frameCounter++;
				if (frameCounter >= 6)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 10)
				{
					frame = 6;
				}
				if (frame < 6)
				{
					frame = 6;
				}
			}
			else if (type == 210)
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.58f;
				frameCounter += 3;
				if (frameCounter > 6)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 11)
				{
					frame = 7;
				}
				if (frame < 7)
				{
					frame = 7;
				}
			}
			else if (type == 313)
			{
				position.Y += height;
				height = 54;
				position.Y -= height;
				position.X += width / 2;
				width = 54;
				position.X -= width / 2;
				rotation += velocity.X * 0.01f;
				frameCounter = 0;
				frame = 11;
			}
			else if (type == 398)
			{
				if ((double)velocity.X > 0.5)
				{
					spriteDirection = 1;
				}
				else if ((double)velocity.X < -0.5)
				{
					spriteDirection = -1;
				}
				frameCounter++;
				if (frameCounter > 1)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 6 || frame > 9)
				{
					frame = 6;
				}
				rotation = velocity.X * 0.1f;
			}
			else if (spriteDirection == -1)
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X);
			}
			else
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 3.14f;
			}
			if (!flag13 && type != 499 && type != 765 && type != 816 && type != 821 && type != 825 && type != 859 && type != 881 && type != 884 && type != 890 && type != 891 && type != 900 && type != 934 && type != 958 && type != 959 && type != 960 && type != 994 && type != 998 && type != 1003 && type != 1004)
			{
				if (type == 899)
				{
					int num6 = 6;
					if (Main.rand.Next(4) == 0)
					{
						num6 = 31;
					}
					int num7 = Dust.NewDust(base.Center + new Vector2(-8f, 0f) - velocity * 0.25f, 15, 15, num6, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 0, default(Color), 1.3f);
					Main.dust[num7].velocity.X = Main.dust[num7].velocity.X * 0.2f;
					Main.dust[num7].velocity.Y = Main.dust[num7].velocity.Y * 0.2f - 0.2f;
					Main.dust[num7].noGravity = true;
				}
				else if (type == 897)
				{
					int num8 = 6;
					if (Main.rand.Next(4) == 0)
					{
						num8 = 31;
					}
					int num9 = Dust.NewDust(base.Center + new Vector2(-8f, -8f) - velocity * 0.25f, 15, 15, num8, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 0, default(Color), 1.3f);
					Main.dust[num9].velocity.X = Main.dust[num9].velocity.X * 0.2f;
					Main.dust[num9].velocity.Y = Main.dust[num9].velocity.Y * 0.2f - 0.2f;
					Main.dust[num9].noGravity = true;
				}
				else if (type == 875)
				{
					if (Main.rand.Next(3) == 0)
					{
						Gore.NewGorePerfect(base.Center + new Vector2(-10f + (float)Main.rand.Next(-20, 20) * 0.5f, -10f + (float)Main.rand.Next(-20, 20) * 0.5f), velocity * 0.1f, 1225, 0.5f + Main.rand.NextFloat() * 1f);
						Vector2 vector14 = Main.rand.NextVector2CircularEdge(2f, 2f) + velocity * -0.5f;
						vector14 *= 0.5f;
						int num10 = Dust.NewDust(base.Center - velocity * 1.5f - new Vector2(7f, 7f), 15, 15, 226, vector14.X, vector14.Y, 0, default(Color), 0.65f);
						Main.dust[num10].noGravity = true;
					}
				}
				else if (type == 860)
				{
					int num11 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) - 4f, position.Y + (float)(height / 2) - 4f) + velocity, 8, 8, 27, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f);
					Main.dust[num11].velocity.X = Main.dust[num11].velocity.X * 0.2f;
					Main.dust[num11].velocity.Y = Main.dust[num11].velocity.Y * 0.2f - 0.2f;
					Dust obj6 = Main.dust[num11];
					obj6.velocity += new Vector2((float)Main.rand.Next(-10, 10) * 0.4f, (float)Main.rand.Next(-10, 10) * 0.4f) * 0.5f;
					Main.dust[num11].noGravity = true;
				}
				else if (type == 858)
				{
					int num12 = 6;
					if (Main.rand.Next(4) == 0)
					{
						num12 = 31;
					}
					int num14 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) - 4f, position.Y + (float)(height / 2) - 4f) - velocity, 10, 10, num12, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 0, default(Color), 1.3f);
					Main.dust[num14].velocity.X = Main.dust[num14].velocity.X * 0.2f;
					Main.dust[num14].velocity.Y = Main.dust[num14].velocity.Y * 0.2f - 0.2f;
					Main.dust[num14].noGravity = true;
				}
				else if (type == 112)
				{
					int num15 = 6;
					if (Main.rand.Next(4) == 0)
					{
						num15 = 31;
					}
					Vector2 center3 = base.Center;
					Vector2 spinningpoint = new Vector2((float)(12 * spriteDirection), 4f);
					double radians = rotation;
					center2 = default(Vector2);
					int num16 = Dust.NewDust(center3 + Utils.RotatedBy(spinningpoint, radians, center2) + new Vector2(-5f, -5f), 10, 10, num15, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 0, default(Color), 1.3f);
					Main.dust[num16].velocity.X = Main.dust[num16].velocity.X * 0.2f;
					Main.dust[num16].velocity.Y = Main.dust[num16].velocity.Y * 0.2f - 0.2f;
					Main.dust[num16].noGravity = true;
				}
				else if (type == 854)
				{
					if (Main.rand.Next(6) == 0)
					{
						Vector2 val2 = base.Center / 16f;
						int i2 = (int)val2.X;
						int num17 = (int)val2.Y;
						Tile tileSafely = Framing.GetTileSafely(i2, num17 + 1);
						if (!WorldGen.SolidTile(tileSafely) && tileSafely.liquid == 0)
						{
							Gore gore = Gore.NewGorePerfect(base.Center + new Vector2((float)Main.rand.Next(-30, 30) * 0.5f, (float)Main.rand.Next(-30, 30) * 0.5f), velocity * -0.2f, 910);
							gore.Frame.CurrentColumn = 0;
							gore.timeLeft = 1;
						}
					}
				}
				else if (type != 398 && type != 390 && type != 391 && type != 392 && type != 127 && type != 200 && type != 208 && type != 210 && type != 236 && type != 266 && type != 268 && type != 269 && type != 313 && type != 314 && type != 319 && type != 324 && type != 334 && type != 353)
				{
					int num18 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) - 4f, position.Y + (float)(height / 2) - 4f) - velocity, 8, 8, 16, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 50, default(Color), 1.7f);
					Main.dust[num18].velocity.X = Main.dust[num18].velocity.X * 0.2f;
					Main.dust[num18].velocity.Y = Main.dust[num18].velocity.Y * 0.2f;
					Main.dust[num18].noGravity = true;
				}
			}
		}
		else
		{
			if (flag13)
			{
				float num19 = 40 * minionPos;
				int num20 = 30;
				int num21 = 60;
				localAI[0] -= 1f;
				if (localAI[0] < 0f)
				{
					localAI[0] = 0f;
				}
				if (ai[1] > 0f)
				{
					ai[1] -= 1f;
				}
				else
				{
					float num22 = position.X;
					float num23 = position.Y;
					float num25 = 100000f;
					float num26 = num25;
					int num27 = -1;
					float num28 = 20f;
					NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
					if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
					{
						float num29 = ownerMinionAttackTargetNPC.position.X + (float)(ownerMinionAttackTargetNPC.width / 2);
						float num30 = ownerMinionAttackTargetNPC.position.Y + (float)(ownerMinionAttackTargetNPC.height / 2);
						float num31 = Math.Abs(position.X + (float)(width / 2) - num29) + Math.Abs(position.Y + (float)(height / 2) - num30);
						if (num31 < num25)
						{
							if (num27 == -1 && num31 <= num26)
							{
								num26 = num31;
								num22 = num29;
								num23 = num30;
							}
							if (Collision.CanHit(position, width, height, ownerMinionAttackTargetNPC.position, ownerMinionAttackTargetNPC.width, ownerMinionAttackTargetNPC.height))
							{
								num25 = num31;
								num22 = num29;
								num23 = num30;
								num27 = ownerMinionAttackTargetNPC.whoAmI;
							}
						}
					}
					if (num27 == -1)
					{
						for (int num32 = 0; num32 < 200; num32++)
						{
							if (!Main.npc[num32].CanBeChasedBy(this))
							{
								continue;
							}
							float num33 = Main.npc[num32].position.X + (float)(Main.npc[num32].width / 2);
							float num34 = Main.npc[num32].position.Y + (float)(Main.npc[num32].height / 2);
							float num36 = Math.Abs(position.X + (float)(width / 2) - num33) + Math.Abs(position.Y + (float)(height / 2) - num34);
							if (num36 < num25)
							{
								if (num27 == -1 && num36 <= num26)
								{
									num26 = num36;
									num22 = num33 + Main.npc[num32].velocity.X * num28;
									num23 = num34 + Main.npc[num32].velocity.Y * num28;
								}
								if (Collision.CanHit(position, width, height, Main.npc[num32].position, Main.npc[num32].width, Main.npc[num32].height))
								{
									num25 = num36;
									num22 = num33 + Main.npc[num32].velocity.X * num28;
									num23 = num34 + Main.npc[num32].velocity.Y * num28;
									num27 = num32;
								}
							}
						}
					}
					if (num27 == -1 && num26 < num25)
					{
						num25 = num26;
					}
					float num37 = 400f;
					if ((double)position.Y > Main.worldSurface * 16.0)
					{
						num37 = 200f;
					}
					if (num25 < num37 + num19 && num27 == -1)
					{
						float num38 = num22 - (position.X + (float)(width / 2));
						if (num38 < -5f)
						{
							flag9 = true;
							flag10 = false;
						}
						else if (num38 > 5f)
						{
							flag10 = true;
							flag9 = false;
						}
					}
					else if (num27 >= 0 && num25 < 800f + num19)
					{
						localAI[0] = num21;
						float num39 = num22 - (position.X + (float)(width / 2));
						if (num39 > 450f || num39 < -450f)
						{
							if (num39 < -50f)
							{
								flag9 = true;
								flag10 = false;
							}
							else if (num39 > 50f)
							{
								flag10 = true;
								flag9 = false;
							}
						}
						else if (owner == Main.myPlayer)
						{
							ai[1] = num20;
							Vector2 vector2 = default(Vector2);
							((Vector2)(ref vector2))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)(height / 2) - 8f);
							float num40 = num22 - vector2.X + (float)Main.rand.Next(-20, 21);
							float num41 = Math.Abs(num40) * 0.1f;
							num41 = num41 * (float)Main.rand.Next(0, 100) * 0.001f;
							float num42 = num23 - vector2.Y + (float)Main.rand.Next(-20, 21) - num41;
							float num43 = (float)Math.Sqrt(num40 * num40 + num42 * num42);
							num43 = 11f / num43;
							num40 *= num43;
							num42 *= num43;
							int num44 = damage;
							int num45 = 195;
							int num47 = NewProjectile(GetProjectileSource_FromThis(), vector2.X, vector2.Y, num40, num42, num45, num44, knockBack, Main.myPlayer);
							Main.projectile[num47].timeLeft = 300;
							if (num40 < 0f)
							{
								direction = -1;
							}
							if (num40 > 0f)
							{
								direction = 1;
							}
							netUpdate = true;
						}
					}
				}
			}
			bool flag5 = false;
			Vector2 vector3 = Vector2.Zero;
			bool flag6 = false;
			if (type == 266 || (type >= 390 && type <= 392))
			{
				float num48 = 40 * minionPos;
				int num49 = 60;
				localAI[0] -= 1f;
				if (localAI[0] < 0f)
				{
					localAI[0] = 0f;
				}
				if (ai[1] > 0f)
				{
					ai[1] -= 1f;
				}
				else
				{
					float num50 = position.X;
					float num51 = position.Y;
					float num52 = 100000f;
					float num53 = num52;
					int num54 = -1;
					NPC ownerMinionAttackTargetNPC2 = OwnerMinionAttackTargetNPC;
					if (ownerMinionAttackTargetNPC2 != null && ownerMinionAttackTargetNPC2.CanBeChasedBy(this))
					{
						float x = ownerMinionAttackTargetNPC2.Center.X;
						float y = ownerMinionAttackTargetNPC2.Center.Y;
						float num55 = Math.Abs(position.X + (float)(width / 2) - x) + Math.Abs(position.Y + (float)(height / 2) - y);
						if (num55 < num52)
						{
							if (num54 == -1 && num55 <= num53)
							{
								num53 = num55;
								num50 = x;
								num51 = y;
							}
							if (Collision.CanHit(position, width, height, ownerMinionAttackTargetNPC2.position, ownerMinionAttackTargetNPC2.width, ownerMinionAttackTargetNPC2.height))
							{
								num52 = num55;
								num50 = x;
								num51 = y;
								num54 = ownerMinionAttackTargetNPC2.whoAmI;
							}
						}
					}
					if (num54 == -1)
					{
						for (int num56 = 0; num56 < 200; num56++)
						{
							if (!Main.npc[num56].CanBeChasedBy(this))
							{
								continue;
							}
							float num58 = Main.npc[num56].position.X + (float)(Main.npc[num56].width / 2);
							float num59 = Main.npc[num56].position.Y + (float)(Main.npc[num56].height / 2);
							float num60 = Math.Abs(position.X + (float)(width / 2) - num58) + Math.Abs(position.Y + (float)(height / 2) - num59);
							if (num60 < num52)
							{
								if (num54 == -1 && num60 <= num53)
								{
									num53 = num60;
									num50 = num58;
									num51 = num59;
								}
								if (Collision.CanHit(position, width, height, Main.npc[num56].position, Main.npc[num56].width, Main.npc[num56].height))
								{
									num52 = num60;
									num50 = num58;
									num51 = num59;
									num54 = num56;
								}
							}
						}
					}
					if (type >= 390 && type <= 392 && !Collision.SolidCollision(position, width, height))
					{
						tileCollide = true;
					}
					if (num54 == -1 && num53 < num52)
					{
						num52 = num53;
					}
					else if (num54 >= 0)
					{
						flag5 = true;
						vector3 = new Vector2(num50, num51) - base.Center;
						if (type >= 390 && type <= 392)
						{
							if (Main.npc[num54].position.Y > position.Y + (float)height)
							{
								int num61 = (int)(base.Center.X / 16f);
								int num62 = (int)((position.Y + (float)height + 1f) / 16f);
								if (Main.tile[num61, num62] != null && Main.tile[num61, num62].active() && TileID.Sets.Platforms[Main.tile[num61, num62].type])
								{
									tileCollide = false;
								}
							}
							Rectangle rectangle = default(Rectangle);
							((Rectangle)(ref rectangle))._002Ector((int)position.X, (int)position.Y, width, height);
							Rectangle value = default(Rectangle);
							((Rectangle)(ref value))._002Ector((int)Main.npc[num54].position.X, (int)Main.npc[num54].position.Y, Main.npc[num54].width, Main.npc[num54].height);
							int num63 = 10;
							value.X -= num63;
							value.Y -= num63;
							value.Width += num63 * 2;
							value.Height += num63 * 2;
							if (((Rectangle)(ref rectangle)).Intersects(value))
							{
								flag6 = true;
								Vector2 vector4 = Main.npc[num54].Center - base.Center;
								if (velocity.Y > 0f && vector4.Y < 0f)
								{
									velocity.Y *= 0.5f;
								}
								if (velocity.Y < 0f && vector4.Y > 0f)
								{
									velocity.Y *= 0.5f;
								}
								if (velocity.X > 0f && vector4.X < 0f)
								{
									velocity.X *= 0.5f;
								}
								if (velocity.X < 0f && vector4.X > 0f)
								{
									velocity.X *= 0.5f;
								}
								if (((Vector2)(ref vector4)).Length() > 14f)
								{
									((Vector2)(ref vector4)).Normalize();
									vector4 *= 14f;
								}
								rotation = (rotation * 5f + vector4.ToRotation() + (float)Math.PI / 2f) / 6f;
								velocity = (velocity * 9f + vector4) / 10f;
								for (int num64 = 0; num64 < 1000; num64++)
								{
									if (whoAmI == num64 || owner != Main.projectile[num64].owner || Main.projectile[num64].type < 390 || Main.projectile[num64].type > 392)
									{
										continue;
									}
									center2 = Main.projectile[num64].Center - base.Center;
									if (((Vector2)(ref center2)).Length() < 15f)
									{
										float num65 = 0.5f;
										if (base.Center.Y > Main.projectile[num64].Center.Y)
										{
											Main.projectile[num64].velocity.Y -= num65;
											velocity.Y += num65;
										}
										else
										{
											Main.projectile[num64].velocity.Y += num65;
											velocity.Y -= num65;
										}
										if (base.Center.X > Main.projectile[num64].Center.X)
										{
											velocity.X += num65;
											Main.projectile[num64].velocity.X -= num65;
										}
										else
										{
											velocity.X -= num65;
											Main.projectile[num64].velocity.Y += num65;
										}
									}
								}
							}
						}
					}
					float num66 = 300f;
					if ((double)position.Y > Main.worldSurface * 16.0)
					{
						num66 = 150f;
					}
					if (type >= 390 && type <= 392)
					{
						num66 = 500f;
						if ((double)position.Y > Main.worldSurface * 16.0)
						{
							num66 = 250f;
						}
					}
					if (num52 < num66 + num48 && num54 == -1)
					{
						float num67 = num50 - (position.X + (float)(width / 2));
						if (num67 < -5f)
						{
							flag9 = true;
							flag10 = false;
						}
						else if (num67 > 5f)
						{
							flag10 = true;
							flag9 = false;
						}
					}
					bool flag7 = false;
					if (type >= 390 && type <= 392 && localAI[1] > 0f)
					{
						flag7 = true;
						localAI[1] -= 1f;
					}
					if (num54 >= 0 && num52 < 800f + num48)
					{
						friendly = true;
						localAI[0] = num49;
						float num68 = num50 - (position.X + (float)(width / 2));
						if (num68 < -10f)
						{
							flag9 = true;
							flag10 = false;
						}
						else if (num68 > 10f)
						{
							flag10 = true;
							flag9 = false;
						}
						if (num51 < base.Center.Y - 100f && num68 > -50f && num68 < 50f && velocity.Y == 0f)
						{
							float num69 = Math.Abs(num51 - base.Center.Y);
							if (num69 < 120f)
							{
								velocity.Y = -10f;
							}
							else if (num69 < 210f)
							{
								velocity.Y = -13f;
							}
							else if (num69 < 270f)
							{
								velocity.Y = -15f;
							}
							else if (num69 < 310f)
							{
								velocity.Y = -17f;
							}
							else if (num69 < 380f)
							{
								velocity.Y = -18f;
							}
						}
						if (flag7)
						{
							friendly = false;
							if (velocity.X < 0f)
							{
								flag9 = true;
							}
							else if (velocity.X > 0f)
							{
								flag10 = true;
							}
						}
					}
					else
					{
						friendly = false;
					}
				}
			}
			if (ai[1] != 0f)
			{
				flag9 = false;
				flag10 = false;
			}
			else if (flag13 && localAI[0] == 0f)
			{
				direction = Main.player[owner].direction;
			}
			else if (type >= 390 && type <= 392)
			{
				int num70 = (int)(base.Center.X / 16f);
				int num71 = (int)(base.Center.Y / 16f);
				if (Main.tile[num70, num71] != null && Main.tile[num70, num71].wall > 0)
				{
					flag9 = (flag10 = false);
				}
			}
			if (type == 127)
			{
				if ((double)rotation > -0.1 && (double)rotation < 0.1)
				{
					rotation = 0f;
				}
				else if (rotation < 0f)
				{
					rotation += 0.1f;
				}
				else
				{
					rotation -= 0.1f;
				}
			}
			else if (type != 313 && !flag6)
			{
				rotation = 0f;
			}
			if (type < 390 || type > 392)
			{
				tileCollide = true;
			}
			float num72 = 0.08f;
			float num73 = 6.5f;
			if (type == 127)
			{
				num73 = 2f;
				num72 = 0.04f;
			}
			if (type == 112)
			{
				num73 = 6f;
				num72 = 0.06f;
			}
			if (type == 334)
			{
				num73 = 8f;
				num72 = 0.08f;
			}
			if (type == 268)
			{
				num73 = 8f;
				num72 = 0.4f;
			}
			if (type == 324)
			{
				num72 = 0.1f;
				num73 = 3f;
			}
			if (type == 858)
			{
				num72 = 0.3f;
				num73 = 7f;
			}
			if (flag13 || type == 266 || (type >= 390 && type <= 392) || type == 816 || type == 821 || type == 825 || type == 859 || type == 860 || type == 881 || type == 884 || type == 890 || type == 891 || type == 897 || type == 899 || type == 900 || type == 934 || type == 956 || type == 958 || type == 959 || type == 960 || type == 994 || type == 998 || type == 1003 || type == 1004)
			{
				num73 = 6f;
				num72 = 0.2f;
				if (num73 < Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y))
				{
					num73 = Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y);
					num72 = 0.3f;
				}
				if (flag13)
				{
					num72 *= 2f;
				}
			}
			if (type == 875)
			{
				num73 = 7f;
				num72 = 0.25f;
				if (num73 < Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y))
				{
					num73 = Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y);
					num72 = 0.35f;
				}
			}
			if (type >= 390 && type <= 392)
			{
				num72 *= 2f;
			}
			if (flag14)
			{
				num73 = 6f;
			}
			if (flag9)
			{
				if ((double)velocity.X > -3.5)
				{
					velocity.X -= num72;
				}
				else
				{
					velocity.X -= num72 * 0.25f;
				}
			}
			else if (flag10)
			{
				if ((double)velocity.X < 3.5)
				{
					velocity.X += num72;
				}
				else
				{
					velocity.X += num72 * 0.25f;
				}
			}
			else
			{
				velocity.X *= 0.9f;
				if (velocity.X >= 0f - num72 && velocity.X <= num72)
				{
					velocity.X = 0f;
				}
			}
			if (type == 208)
			{
				velocity.X *= 0.95f;
				if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
				{
					velocity.X = 0f;
				}
				flag9 = false;
				flag10 = false;
			}
			if (flag9 || flag10)
			{
				int num74 = (int)(position.X + (float)(width / 2)) / 16;
				int j2 = (int)(position.Y + (float)(height / 2)) / 16;
				if (type == 236)
				{
					num74 += direction;
				}
				if (flag9)
				{
					num74--;
				}
				if (flag10)
				{
					num74++;
				}
				num74 += (int)velocity.X;
				if (WorldGen.SolidTile(num74, j2))
				{
					flag12 = true;
				}
			}
			if (Main.player[owner].position.Y + (float)Main.player[owner].height - 8f > position.Y + (float)height)
			{
				flag11 = true;
			}
			if (type == 268 && frameCounter < 10)
			{
				flag12 = false;
			}
			if (type == 860 && velocity.X != 0f)
			{
				flag12 = true;
			}
			if ((type == 881 || type == 934) && velocity.X != 0f)
			{
				flag12 = true;
			}
			Collision.StepUp(ref position, ref velocity, width, height, ref stepSpeed, ref gfxOffY);
			if (velocity.Y == 0f || type == 200)
			{
				if (!flag11 && (velocity.X < 0f || velocity.X > 0f))
				{
					int num75 = (int)(position.X + (float)(width / 2)) / 16;
					int j3 = (int)(position.Y + (float)(height / 2)) / 16 + 1;
					if (flag9)
					{
						num75--;
					}
					if (flag10)
					{
						num75++;
					}
					WorldGen.SolidTile(num75, j3);
				}
				if (flag12)
				{
					int num76 = (int)(position.X + (float)(width / 2)) / 16;
					int num77 = (int)(position.Y + (float)height) / 16;
					if (WorldGen.SolidTileAllowBottomSlope(num76, num77) || Main.tile[num76, num77].halfBrick() || Main.tile[num76, num77].slope() > 0 || type == 200)
					{
						if (type == 200)
						{
							velocity.Y = -3.1f;
						}
						else
						{
							try
							{
								num76 = (int)(position.X + (float)(width / 2)) / 16;
								num77 = (int)(position.Y + (float)(height / 2)) / 16;
								if (flag9)
								{
									num76--;
								}
								if (flag10)
								{
									num76++;
								}
								num76 += (int)velocity.X;
								if (!WorldGen.SolidTile(num76, num77 - 1) && !WorldGen.SolidTile(num76, num77 - 2))
								{
									velocity.Y = -5.1f;
								}
								else if (!WorldGen.SolidTile(num76, num77 - 2))
								{
									velocity.Y = -7.1f;
								}
								else if (WorldGen.SolidTile(num76, num77 - 5))
								{
									velocity.Y = -11.1f;
								}
								else if (WorldGen.SolidTile(num76, num77 - 4))
								{
									velocity.Y = -10.1f;
								}
								else
								{
									velocity.Y = -9.1f;
								}
							}
							catch
							{
								velocity.Y = -9.1f;
							}
						}
						if (type == 127)
						{
							ai[0] = 1f;
						}
					}
				}
				else if (type == 266 && (flag9 || flag10))
				{
					velocity.Y -= 6f;
				}
			}
			if (velocity.X > num73)
			{
				velocity.X = num73;
			}
			if (velocity.X < 0f - num73)
			{
				velocity.X = 0f - num73;
			}
			if (velocity.X < 0f)
			{
				direction = -1;
			}
			if (velocity.X > 0f)
			{
				direction = 1;
			}
			if (velocity.X > num72 && flag10)
			{
				direction = 1;
			}
			if (velocity.X < 0f - num72 && flag9)
			{
				direction = -1;
			}
			if (type != 313)
			{
				if (direction == -1)
				{
					spriteDirection = 1;
				}
				if (direction == 1)
				{
					spriteDirection = -1;
				}
			}
			if (type == 398 || type == 958 || type == 960 || type == 956 || type == 959 || type == 994)
			{
				spriteDirection = direction;
			}
			bool flag8 = position.X - oldPosition.X == 0f;
			if (type == 956)
			{
				if (alpha > 0)
				{
					int num79 = Dust.NewDust(position, width, height, 6, velocity.X, velocity.Y, 0, default(Color), 1.2f);
					Main.dust[num79].velocity.X += Main.rand.NextFloat() - 0.5f;
					Main.dust[num79].velocity.Y += (Main.rand.NextFloat() + 0.5f) * -1f;
					if (Main.rand.Next(3) != 0)
					{
						Main.dust[num79].noGravity = true;
					}
					alpha -= 5;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				if (velocity.Y != 0f)
				{
					frame = 10;
				}
				else if (flag8)
				{
					spriteDirection = 1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = -1;
					}
					frame = 0;
				}
				else
				{
					float num80 = ((Vector2)(ref velocity)).Length();
					frameCounter += (int)num80;
					if (frameCounter > 7)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 1 || frame > 9)
					{
						frame = 1;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 958)
			{
				if (velocity.Y != 0f)
				{
					localAI[0] = 0f;
					frame = 4;
				}
				else if (flag8)
				{
					spriteDirection = 1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = -1;
					}
					localAI[0] += 1f;
					if (localAI[0] > 200f)
					{
						frame = 1 + (int)(localAI[0] - 200f) / 6;
						if (localAI[0] >= 218f)
						{
							frame = 0;
							localAI[0] = Main.rand.Next(100);
						}
					}
					else
					{
						frame = 0;
					}
				}
				else
				{
					localAI[0] = 0f;
					float num81 = ((Vector2)(ref velocity)).Length();
					frameCounter += (int)num81;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 5 || frame > 12)
					{
						frame = 5;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 959)
			{
				if (velocity.Y != 0f)
				{
					frame = ((velocity.Y > 0f) ? 10 : 9);
				}
				else if (flag8)
				{
					spriteDirection = 1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = -1;
					}
					frame = 0;
				}
				else
				{
					float num82 = ((Vector2)(ref velocity)).Length();
					frameCounter += (int)num82;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 1 || frame > 8)
					{
						frame = 1;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 998)
			{
				if (velocity.Y != 0f)
				{
					frame = 1;
				}
				else if (flag8)
				{
					spriteDirection = -1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = 1;
					}
					frame = 0;
				}
				else
				{
					float num83 = ((Vector2)(ref velocity)).Length();
					frameCounter += (int)num83;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 0 || frame > 5)
					{
						frame = 0;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 1003)
			{
				if (velocity.Y != 0f)
				{
					frame = 1;
				}
				else if (flag8)
				{
					spriteDirection = -1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = 1;
					}
					frame = 0;
				}
				else
				{
					float num84 = ((Vector2)(ref velocity)).Length();
					frameCounter += (int)num84;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 2 || frame > 11)
					{
						frame = 2;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 1004)
			{
				if (velocity.Y != 0f)
				{
					frame = 1;
				}
				else if (flag8)
				{
					spriteDirection = -1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = 1;
					}
					frame = 0;
				}
				else
				{
					float num85 = ((Vector2)(ref velocity)).Length();
					frameCounter += (int)num85;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 2 || frame > 9)
					{
						frame = 2;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 994)
			{
				if (velocity.Y != 0f)
				{
					frame = 4;
				}
				else if (flag8)
				{
					spriteDirection = 1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = -1;
					}
					frameCounter++;
					if (frameCounter > 5)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 3)
					{
						frame = 0;
					}
				}
				else
				{
					float num86 = ((Vector2)(ref velocity)).Length();
					frameCounter += (int)num86;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 5 || frame > 12)
					{
						frame = 5;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 960)
			{
				_ = Main.player[owner];
				if (velocity.Y != 0f)
				{
					localAI[0] = 0f;
					localAI[1] = 0f;
					frameCounter = 0;
					frame = 4;
				}
				else if (flag8)
				{
					if (!flag14)
					{
						spriteDirection = 1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = -1;
						}
					}
					if (frame >= 5 && frame < 12)
					{
						frameCounter++;
						if (frameCounter > 3)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 12)
						{
							frame = 0;
						}
					}
					else if (Chester_IsAnyPlayerTrackingThisProjectile())
					{
						if (localAI[0] == 0f)
						{
							if (localAI[1] == 0f)
							{
								localAI[1] = 1f;
								frameCounter = 0;
							}
							frame = 13;
							frameCounter++;
							if (frameCounter > 6)
							{
								localAI[0] = 1f;
								frame = 14;
								frameCounter = 0;
							}
						}
						else
						{
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								if (frame > 18)
								{
									frame = 14;
								}
								frameCounter = 0;
							}
						}
					}
					else
					{
						localAI[0] = 0f;
						if (localAI[1] == 1f)
						{
							localAI[1] = 0f;
							frameCounter = 0;
						}
						if (frame >= 12 && frame <= 19)
						{
							frame = 19;
							frameCounter++;
							if (frameCounter > 6)
							{
								frame = 0;
								frameCounter = 0;
							}
						}
						else
						{
							frameCounter++;
							if (frameCounter >= 24)
							{
								frameCounter = 0;
							}
							frame = frameCounter / 6;
						}
					}
				}
				else
				{
					localAI[0] = 0f;
					localAI[1] = 0f;
					float val = ((Vector2)(ref velocity)).Length();
					frameCounter += (int)Math.Max(2f, val);
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 5 || frame > 12)
					{
						frame = 5;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 816)
			{
				if (velocity.Y != 0f)
				{
					frame = 4;
				}
				else if (flag8)
				{
					spriteDirection = -1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = 1;
					}
					if (++frameCounter > 5)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 0 || frame > 3)
					{
						frame = 0;
					}
				}
				else
				{
					int num87 = 5;
					float num88 = ((Vector2)(ref velocity)).Length();
					if (num88 > 4f)
					{
						num87 = 3;
					}
					else if (num88 > 2f)
					{
						num87 = 4;
					}
					if (++frameCounter > num87)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 4 || frame > 10)
					{
						frame = 4;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			if (type == 860)
			{
				if (velocity.Y != 0f)
				{
					localAI[0] = 0f;
					if (frame >= 5)
					{
						frame = 5;
						frameCounter = 0;
					}
					else if (++frameCounter > 5)
					{
						frame++;
						frameCounter = 0;
					}
				}
				else if (Math.Abs(velocity.X) < 1f)
				{
					if (localAI[0] > 800f)
					{
						frameCounter++;
						if (frameCounter > 3)
						{
							frameCounter = 0;
							frame++;
							if (frame > 3)
							{
								frame = 3;
							}
						}
						localAI[0] += 1f;
						if (localAI[0] > 850f)
						{
							localAI[0] = 0f;
						}
						if (frame == 3 && localAI[0] == 820f)
						{
							for (int num90 = 0; num90 < 3 + Main.rand.Next(3); num90++)
							{
								int num91 = Gore.NewGore(new Vector2(position.X, base.Center.Y - 10f), Vector2.Zero, 1218);
								Main.gore[num91].velocity = new Vector2((float)Main.rand.Next(1, 10) * 0.3f * (float)(-spriteDirection), 0f - (2f + (float)Main.rand.Next(4) * 0.3f));
							}
						}
					}
					else if (frame == 0)
					{
						localAI[0] += 1f;
						frame = 0;
						frameCounter = 0;
					}
					else
					{
						localAI[0] = 0f;
						if (frame > 5)
						{
							frame = 5;
							frameCounter = 0;
						}
						if (++frameCounter > 4)
						{
							frame--;
							frameCounter = 0;
						}
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			if (type == 859)
			{
				if (velocity.Y != 0f)
				{
					frame = 4;
				}
				else if (flag8)
				{
					spriteDirection = -1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = 1;
					}
					if (frame == 6)
					{
						if (++frameCounter > 5)
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else if (frame > 3)
					{
						frame = 6;
						frameCounter = 0;
					}
					else
					{
						if (++frameCounter > 5)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 0 || frame > 3)
						{
							frame = 0;
						}
					}
				}
				else
				{
					float num92 = ((Vector2)(ref velocity)).Length();
					int num93 = 8;
					if (num92 < 3f)
					{
						num93 = 4;
					}
					if (num92 < 1f)
					{
						num93 = 2;
					}
					frameCounter += (int)num92;
					if (frameCounter > num93)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 5 || frame > 17)
					{
						frame = 5;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 858)
			{
				if (velocity.Y != 0f)
				{
					frame = 1;
				}
				else if (flag8)
				{
					spriteDirection = -1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = 1;
					}
					frame = 0;
				}
				else
				{
					float num94 = ((Vector2)(ref velocity)).Length();
					frameCounter += (int)num94;
					if (frameCounter > 3)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 2 || frame > 9)
					{
						frame = 2;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 900)
			{
				spriteDirection = direction;
				if (velocity.Y != 0f)
				{
					frame = 1;
					frameCounter = 0;
				}
				else if (flag8)
				{
					spriteDirection = 1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = -1;
					}
					frame = 0;
					frameCounter = 0;
				}
				else
				{
					frameCounter += 1 + (int)Math.Abs(velocity.X * 0.3f);
					if (frame < 2)
					{
						frame = 2;
						frameCounter = 0;
					}
					if (frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 9)
					{
						frame = 2;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 899)
			{
				spriteDirection = direction;
				if (velocity.Y != 0f)
				{
					frame = 1;
					frameCounter = 0;
				}
				else if (flag8)
				{
					spriteDirection = 1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = -1;
					}
					frame = 0;
					frameCounter = 0;
				}
				else
				{
					frameCounter += 1 + (int)Math.Abs(velocity.X * 0.3f);
					if (frame < 2)
					{
						frame = 2;
						frameCounter = 0;
					}
					if (frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 9)
					{
						frame = 2;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 897)
			{
				spriteDirection = direction;
				if (velocity.Y != 0f)
				{
					frame = 1;
					frameCounter = 0;
				}
				else if (flag8)
				{
					spriteDirection = 1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = -1;
					}
					frame = 0;
					frameCounter = 0;
				}
				else
				{
					frameCounter += 1 + (int)Math.Abs(velocity.X * 0.3f);
					if (frame < 2)
					{
						frame = 2;
						frameCounter = 0;
					}
					if (frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 7)
					{
						frame = 2;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 891)
			{
				spriteDirection = direction;
				if (velocity.Y != 0f)
				{
					frame = 1;
					frameCounter = 0;
				}
				else if (flag8)
				{
					spriteDirection = Main.player[owner].direction;
					frame = 0;
					frameCounter = 0;
				}
				else
				{
					frameCounter += 1 + (int)Math.Abs(velocity.X * 0.3f);
					if (frame < 2)
					{
						frame = 2;
						frameCounter = 0;
					}
					if (frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 8)
					{
						frame = 2;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 890)
			{
				spriteDirection = direction;
				if (velocity.Y != 0f)
				{
					frame = 1;
					frameCounter = 0;
				}
				else if (flag8)
				{
					spriteDirection = 1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = -1;
					}
					frame = 0;
					frameCounter = 0;
				}
				else
				{
					frameCounter += 1 + (int)Math.Abs(velocity.X * 0.3f);
					if (frame < 2)
					{
						frame = 2;
						frameCounter = 0;
					}
					if (frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 7)
					{
						frame = 2;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 884)
			{
				spriteDirection = direction;
				if (velocity.Y != 0f)
				{
					if (velocity.Y < 0f)
					{
						frame = 9;
					}
					else
					{
						frame = 1;
					}
					frameCounter = 0;
				}
				else if (flag8)
				{
					spriteDirection = 1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = -1;
					}
					frame = 0;
					frameCounter = 0;
				}
				else
				{
					frameCounter += 1 + (int)Math.Abs(velocity.X * 0.5f);
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 8)
					{
						frame = 2;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 881 || type == 934)
			{
				spriteDirection = 1;
				if (Main.player[owner].Center.X < base.Center.X)
				{
					spriteDirection = -1;
				}
				if (velocity.Y > 0f)
				{
					frameCounter++;
					if (frameCounter > 2)
					{
						frame++;
						if (frame >= 2)
						{
							frame = 2;
						}
						frameCounter = 0;
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter++;
					if (frameCounter > 2)
					{
						frame++;
						if (frame >= 5)
						{
							frame = 0;
						}
						frameCounter = 0;
					}
				}
				else if (frame == 0)
				{
					frame = 0;
				}
				else if (++frameCounter > 3)
				{
					frame++;
					if (frame >= 6)
					{
						frame = 0;
					}
					frameCounter = 0;
				}
				if (wet && Main.player[owner].position.Y + (float)Main.player[owner].height < position.Y + (float)height && localAI[0] == 0f)
				{
					if (velocity.Y > -4f)
					{
						velocity.Y -= 0.2f;
					}
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.95f;
					}
				}
				else
				{
					velocity.Y += 0.4f;
				}
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 875)
			{
				if (velocity.Y != 0f)
				{
					if (velocity.Y < 0f)
					{
						frame = 3;
					}
					else
					{
						frame = 6;
					}
					frameCounter = 0;
				}
				else if (flag8)
				{
					spriteDirection = -1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = 1;
					}
					frame = 0;
					frameCounter = 0;
				}
				else
				{
					frameCounter += 1 + (int)Math.Abs(velocity.X * 0.75f);
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 6)
					{
						frame = 0;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 854)
			{
				if (velocity.Y != 0f)
				{
					frame = 7;
				}
				else if (flag8)
				{
					spriteDirection = -1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = 1;
					}
					if (++frameCounter > 5)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 0 || frame > 3)
					{
						frame = 0;
					}
				}
				else
				{
					int num95 = 3;
					float num96 = ((Vector2)(ref velocity)).Length();
					if (num96 > 4f)
					{
						num95 = 1;
					}
					else if (num96 > 2f)
					{
						num95 = 2;
					}
					if (++frameCounter > num95)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 4 || frame > 12)
					{
						frame = 4;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 825)
			{
				if (velocity.Y != 0f)
				{
					localAI[0] = 0f;
					frame = 12;
				}
				else if (flag8)
				{
					spriteDirection = -1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = 1;
					}
					if (frame >= 1 && frame <= 2)
					{
						localAI[0] = 0f;
						if (++frameCounter > 5)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 2)
						{
							frame = 0;
						}
					}
					else if (frame >= 3 && frame <= 11)
					{
						localAI[0] = 0f;
						if (++frameCounter > 5)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 11)
						{
							frame = 0;
						}
					}
					else
					{
						if (frame == 13)
						{
							if (++frameCounter > 8)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame == 14)
							{
								frame = 0;
							}
						}
						if (frame != 0)
						{
							frame = 13;
						}
						else
						{
							frame = 0;
						}
						if (frame == 0)
						{
							localAI[0] += 1f;
							if (localAI[0] > 300f && Main.rand.Next(50) == 0)
							{
								switch (Main.rand.Next(2))
								{
								case 0:
									frame = 1;
									break;
								case 1:
									frame = 3;
									break;
								}
							}
						}
					}
				}
				else
				{
					localAI[0] = 0f;
					int num97 = 3;
					float num98 = ((Vector2)(ref velocity)).Length();
					if (num98 > 4f)
					{
						num97 = 2;
					}
					else if (num98 > 2f)
					{
						num97 = 1;
					}
					if (++frameCounter > num97)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 13)
					{
						frame = 13;
					}
					if (frame > 19)
					{
						frame = 14;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 821)
			{
				if (velocity.Y != 0f)
				{
					localAI[0] = 0f;
					frame = 12;
				}
				else if (flag8)
				{
					spriteDirection = -1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = 1;
					}
					localAI[0] += 1f;
					if (localAI[0] > 400f)
					{
						int num99 = 7;
						if (frame == 9)
						{
							num99 = 25;
						}
						if (++frameCounter > num99)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 5)
						{
							frame = 5;
						}
						if (frame > 11)
						{
							localAI[0] = 0f;
							frame = 0;
						}
					}
					else
					{
						if (++frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 0 || frame > 4)
						{
							frame = 0;
						}
					}
				}
				else
				{
					localAI[0] = 0f;
					int num101 = 4;
					float num207 = ((Vector2)(ref velocity)).Length();
					if (num207 > 3f)
					{
						num101 = 3;
					}
					if (num207 > 5f)
					{
						num101 = 2;
					}
					if (++frameCounter > num101)
					{
						frame++;
						if (num101 == 0)
						{
							frame++;
						}
						frameCounter = 0;
					}
					if (frame < 13 || frame > 18)
					{
						frame = 13;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (flag13)
			{
				if (ai[1] > 0f)
				{
					if (localAI[1] == 0f)
					{
						localAI[1] = 1f;
						frame = 1;
					}
					if (frame != 0)
					{
						frameCounter++;
						if (frameCounter > 4)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 4)
						{
							frame = 0;
						}
					}
				}
				else if (velocity.Y == 0f)
				{
					localAI[1] = 0f;
					if (flag8)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 5)
						{
							frame = 5;
						}
						if (frame >= 11)
						{
							frame = 5;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0;
					frame = 4;
				}
				else if (velocity.Y > 0f)
				{
					frameCounter = 0;
					frame = 4;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
				_ = velocity;
			}
			else if (type == 268)
			{
				if (velocity.Y == 0f)
				{
					if (frame > 5)
					{
						frameCounter = 0;
					}
					if (flag8)
					{
						int num102 = 3;
						frameCounter++;
						if (frameCounter < num102)
						{
							frame = 0;
						}
						else if (frameCounter < num102 * 2)
						{
							frame = 1;
						}
						else if (frameCounter < num102 * 3)
						{
							frame = 2;
						}
						else if (frameCounter < num102 * 4)
						{
							frame = 3;
						}
						else
						{
							frameCounter = num102 * 4;
						}
					}
					else
					{
						velocity.X *= 0.8f;
						frameCounter++;
						int num103 = 3;
						if (frameCounter < num103)
						{
							frame = 0;
						}
						else if (frameCounter < num103 * 2)
						{
							frame = 1;
						}
						else if (frameCounter < num103 * 3)
						{
							frame = 2;
						}
						else if (frameCounter < num103 * 4)
						{
							frame = 3;
						}
						else if (flag9 || flag10)
						{
							velocity.X *= 2f;
							frame = 4;
							velocity.Y = -6.1f;
							frameCounter = 0;
							for (int num104 = 0; num104 < 4; num104++)
							{
								int num105 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height - 2f), width, 4, 5);
								Dust obj8 = Main.dust[num105];
								obj8.velocity += velocity;
								Dust obj9 = Main.dust[num105];
								obj9.velocity *= 0.4f;
							}
						}
						else
						{
							frameCounter = num103 * 4;
						}
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0;
					frame = 5;
				}
				else
				{
					frame = 4;
					frameCounter = 3;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 269)
			{
				if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
				{
					if (flag8)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						int num106 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height - 2f), width, 6, 76);
						Main.dust[num106].noGravity = true;
						Dust obj10 = Main.dust[num106];
						obj10.velocity *= 0.3f;
						Main.dust[num106].noLight = true;
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 3)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frameCounter = 0;
					frame = 2;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 313)
			{
				int i3 = (int)(base.Center.X / 16f);
				int num107 = (int)(base.Center.Y / 16f);
				int num108 = 0;
				Tile tileSafely2 = Framing.GetTileSafely(i3, num107);
				Tile tileSafely3 = Framing.GetTileSafely(i3, num107 - 1);
				Tile tileSafely4 = Framing.GetTileSafely(i3, num107 + 1);
				if (tileSafely2.wall > 0)
				{
					num108++;
				}
				if (tileSafely3.wall > 0)
				{
					num108++;
				}
				if (tileSafely4.wall > 0)
				{
					num108++;
				}
				if (num108 > 1)
				{
					position.Y += height;
					height = 34;
					position.Y -= height;
					position.X += width / 2;
					width = 34;
					position.X -= width / 2;
					Vector2 vector5 = default(Vector2);
					((Vector2)(ref vector5))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num109 = Main.player[owner].Center.X - vector5.X;
					float num111 = Main.player[owner].Center.Y - vector5.Y;
					float num112 = (float)Math.Sqrt(num109 * num109 + num111 * num111);
					float num113 = 4f / num112;
					num109 *= num113;
					num111 *= num113;
					if (num112 < 120f)
					{
						velocity.X *= 0.9f;
						velocity.Y *= 0.9f;
						if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < 0.1)
						{
							velocity *= 0f;
						}
					}
					else
					{
						velocity.X = (velocity.X * 9f + num109) / 10f;
						velocity.Y = (velocity.Y * 9f + num111) / 10f;
					}
					if (num112 >= 120f)
					{
						spriteDirection = direction;
						rotation = (float)Math.Atan2(velocity.Y * (float)(-direction), velocity.X * (float)(-direction));
					}
					frameCounter += (int)(Math.Abs(velocity.X) + Math.Abs(velocity.Y));
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 10)
					{
						frame = 5;
					}
					if (frame < 5)
					{
						frame = 10;
					}
				}
				else
				{
					rotation = 0f;
					if (direction == -1)
					{
						spriteDirection = 1;
					}
					if (direction == 1)
					{
						spriteDirection = -1;
					}
					position.Y += height;
					height = 30;
					position.Y -= height;
					position.X += width / 2;
					width = 30;
					position.X -= width / 2;
					if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
					{
						if (flag8)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
						{
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 3)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						frameCounter = 0;
						frame = 4;
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
			}
			else if (type >= 390 && type <= 392)
			{
				int i4 = (int)(base.Center.X / 16f);
				int num114 = (int)(base.Center.Y / 16f);
				int num115 = 0;
				Tile tileSafely5 = Framing.GetTileSafely(i4, num114);
				Tile tileSafely6 = Framing.GetTileSafely(i4, num114 - 1);
				Tile tileSafely7 = Framing.GetTileSafely(i4, num114 + 1);
				if (tileSafely5.wall > 0)
				{
					num115++;
				}
				if (tileSafely6.wall > 0)
				{
					num115++;
				}
				if (tileSafely7.wall > 0)
				{
					num115++;
				}
				if (num115 > 1)
				{
					position.Y += height;
					height = 34;
					position.Y -= height;
					position.X += width / 2;
					width = 34;
					position.X -= width / 2;
					float num116 = 9f;
					float num117 = 40 * (minionPos + 1);
					Vector2 v3 = Main.player[owner].Center - base.Center;
					if (flag5)
					{
						v3 = vector3;
						num117 = 10f;
					}
					else if (!Collision.CanHitLine(base.Center, 1, 1, Main.player[owner].Center, 1, 1))
					{
						ai[0] = 1f;
					}
					if (((Vector2)(ref v3)).Length() < num117)
					{
						velocity *= 0.9f;
						if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < 0.1)
						{
							velocity *= 0f;
						}
					}
					else if (((Vector2)(ref v3)).Length() < 800f || !flag5)
					{
						velocity = (velocity * 9f + v3.SafeNormalize(Vector2.Zero) * num116) / 10f;
					}
					if (((Vector2)(ref v3)).Length() >= num117)
					{
						spriteDirection = direction;
						rotation = velocity.ToRotation() + (float)Math.PI / 2f;
					}
					else
					{
						rotation = v3.ToRotation() + (float)Math.PI / 2f;
					}
					frameCounter += (int)(Math.Abs(velocity.X) + Math.Abs(velocity.Y));
					if (frameCounter > 5)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 7)
					{
						frame = 4;
					}
					if (frame < 4)
					{
						frame = 7;
					}
				}
				else
				{
					if (!flag6)
					{
						rotation = 0f;
					}
					if (direction == -1)
					{
						spriteDirection = 1;
					}
					if (direction == 1)
					{
						spriteDirection = -1;
					}
					position.Y += height;
					height = 30;
					position.Y -= height;
					position.X += width / 2;
					width = 30;
					position.X -= width / 2;
					if (!flag5 && !Collision.CanHitLine(base.Center, 1, 1, Main.player[owner].Center, 1, 1))
					{
						ai[0] = 1f;
					}
					if (!flag6 && frame >= 4 && frame <= 7)
					{
						Vector2 vector6 = Main.player[owner].Center - base.Center;
						if (flag5)
						{
							vector6 = vector3;
						}
						float num118 = 0f - vector6.Y;
						if (!(vector6.Y > 0f))
						{
							if (num118 < 120f)
							{
								velocity.Y = -10f;
							}
							else if (num118 < 210f)
							{
								velocity.Y = -13f;
							}
							else if (num118 < 270f)
							{
								velocity.Y = -15f;
							}
							else if (num118 < 310f)
							{
								velocity.Y = -17f;
							}
							else if (num118 < 380f)
							{
								velocity.Y = -18f;
							}
						}
					}
					if (flag6)
					{
						frameCounter++;
						if (frameCounter > 3)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 8)
						{
							frame = 4;
						}
						if (frame <= 3)
						{
							frame = 7;
						}
					}
					else if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
					{
						if (flag8)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
						{
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 5)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 2)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						frameCounter = 0;
						frame = 3;
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
			}
			else if (type == 314)
			{
				if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
				{
					if (flag8)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 6)
						{
							frame = 1;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frameCounter = 0;
					frame = 7;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 319)
			{
				if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
				{
					if (flag8)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 8)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 5)
						{
							frame = 2;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frameCounter = 0;
					frame = 1;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 236)
			{
				if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
				{
					if (flag8)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						if (frame < 2)
						{
							frame = 2;
						}
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 8)
						{
							frame = 2;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frameCounter = 0;
					frame = 1;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 499)
			{
				if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
				{
					if (flag8)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						if (frame < 2)
						{
							frame = 2;
						}
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 8)
						{
							frame = 2;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frameCounter = 0;
					frame = 1;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 765)
			{
				if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
				{
					if (flag8)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						if (frame < 1)
						{
							frame = 1;
						}
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 6)
						{
							frame = 1;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frame = 0;
					frameCounter = 0;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 266)
			{
				if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
				{
					if (flag8)
					{
						frameCounter++;
					}
					else
					{
						frameCounter += 3;
					}
				}
				else
				{
					frameCounter += 5;
				}
				if (frameCounter >= 20)
				{
					frameCounter -= 20;
					frame++;
				}
				if (frame > 1)
				{
					frame = 0;
				}
				if (wet && Main.player[owner].position.Y + (float)Main.player[owner].height < position.Y + (float)height && localAI[0] == 0f)
				{
					if (velocity.Y > -4f)
					{
						velocity.Y -= 0.2f;
					}
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.95f;
					}
				}
				else
				{
					velocity.Y += 0.4f;
				}
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 334)
			{
				if (velocity.Y == 0f)
				{
					if (flag8)
					{
						if (frame > 0)
						{
							frameCounter += 2;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= 7)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs((double)velocity.X * 0.75);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 7 || frame < 1)
						{
							frame = 1;
						}
					}
					else if (frame > 0)
					{
						frameCounter += 2;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 7)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0;
					frame = 2;
				}
				else if (velocity.Y > 0f)
				{
					frameCounter = 0;
					frame = 4;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 353)
			{
				if (velocity.Y == 0f)
				{
					if (flag8)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 9)
						{
							frame = 2;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0;
					frame = 1;
				}
				else if (velocity.Y > 0f)
				{
					frameCounter = 0;
					frame = 1;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 111)
			{
				if (velocity.Y == 0f)
				{
					if (flag8)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 7)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0;
					frame = 4;
				}
				else if (velocity.Y > 0f)
				{
					frameCounter = 0;
					frame = 6;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 112)
			{
				if (velocity.Y == 0f)
				{
					if (flag8)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 3)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y != 0f)
				{
					frameCounter = 0;
					frame = 1;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 127)
			{
				if (velocity.Y == 0f)
				{
					if (flag8)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.1 || (double)velocity.X > 0.1)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 5)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frame = 0;
					frameCounter = 0;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 200)
			{
				if (velocity.Y == 0f)
				{
					if (flag8)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.1 || (double)velocity.X > 0.1)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 5)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					rotation = velocity.X * 0.1f;
					frameCounter++;
					if (velocity.Y < 0f)
					{
						frameCounter += 2;
					}
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 9)
					{
						frame = 6;
					}
					if (frame < 6)
					{
						frame = 6;
					}
				}
				velocity.Y += 0.1f;
				if (velocity.Y > 4f)
				{
					velocity.Y = 4f;
				}
			}
			else if (type == 208)
			{
				if (velocity.Y == 0f && flag8)
				{
					if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) < position.X + (float)(width / 2))
					{
						direction = -1;
					}
					else if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) > position.X + (float)(width / 2))
					{
						direction = 1;
					}
					rotation = 0f;
					frame = 0;
				}
				else
				{
					rotation = velocity.X * 0.075f;
					frameCounter++;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 4)
					{
						frame = 1;
					}
					if (frame < 1)
					{
						frame = 1;
					}
				}
				velocity.Y += 0.1f;
				if (velocity.Y > 4f)
				{
					velocity.Y = 4f;
				}
			}
			else if (type == 209)
			{
				if (alpha > 0)
				{
					alpha -= 5;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				if (velocity.Y == 0f)
				{
					if (flag8)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.1 || (double)velocity.X > 0.1)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 11)
						{
							frame = 2;
						}
						if (frame < 2)
						{
							frame = 2;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frame = 1;
					frameCounter = 0;
					rotation = 0f;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 324)
			{
				if (velocity.Y == 0f)
				{
					if ((double)velocity.X < -0.1 || (double)velocity.X > 0.1)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 5)
						{
							frame = 2;
						}
						if (frame < 2)
						{
							frame = 2;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frameCounter = 0;
					frame = 1;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 14f)
				{
					velocity.Y = 14f;
				}
			}
			else if (type == 210)
			{
				if (velocity.Y == 0f)
				{
					if ((double)velocity.X < -0.1 || (double)velocity.X > 0.1)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 6)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					rotation = velocity.X * 0.05f;
					frameCounter++;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 11)
					{
						frame = 7;
					}
					if (frame < 7)
					{
						frame = 7;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 398)
			{
				if (velocity.Y == 0f)
				{
					if (flag8)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 5)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y != 0f)
				{
					frameCounter = 0;
					frame = 5;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
		}
		if (type == 891)
		{
			_ = Main.player[owner];
			DelegateMethods.v3_1 = new Vector3(1f, 0.61f, 0.16f) * 1.5f;
			Utils.PlotTileLine(base.Center, base.Center + velocity * 6f, 20f, DelegateMethods.CastLightOpen);
			Utils.PlotTileLine(base.Left, base.Right, 20f, DelegateMethods.CastLightOpen);
		}
	}

	private bool Chester_IsAnyPlayerTrackingThisProjectile()
	{
		for (int i = 0; i < 255; i++)
		{
			Player player = Main.player[i];
			if (player.active && player.piggyBankProjTracker.IsTracking(this))
			{
				return true;
			}
		}
		return false;
	}

	private void AI_062()
	{
		//IL_0278: Unknown result type (might be due to invalid IL or missing references)
		//IL_0306: Unknown result type (might be due to invalid IL or missing references)
		//IL_0338: Unknown result type (might be due to invalid IL or missing references)
		//IL_033e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0379: Unknown result type (might be due to invalid IL or missing references)
		//IL_0383: Unknown result type (might be due to invalid IL or missing references)
		//IL_0388: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_069c: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aca: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_070d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0713: Unknown result type (might be due to invalid IL or missing references)
		//IL_072d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0733: Unknown result type (might be due to invalid IL or missing references)
		//IL_073d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0742: Unknown result type (might be due to invalid IL or missing references)
		//IL_0747: Unknown result type (might be due to invalid IL or missing references)
		//IL_074f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0759: Unknown result type (might be due to invalid IL or missing references)
		//IL_075e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0766: Unknown result type (might be due to invalid IL or missing references)
		//IL_076c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0776: Unknown result type (might be due to invalid IL or missing references)
		//IL_077b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0780: Unknown result type (might be due to invalid IL or missing references)
		//IL_04bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_04de: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0506: Unknown result type (might be due to invalid IL or missing references)
		//IL_0510: Unknown result type (might be due to invalid IL or missing references)
		//IL_0515: Unknown result type (might be due to invalid IL or missing references)
		//IL_051c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0522: Unknown result type (might be due to invalid IL or missing references)
		//IL_052c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0531: Unknown result type (might be due to invalid IL or missing references)
		//IL_0536: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_058d: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0600: Unknown result type (might be due to invalid IL or missing references)
		//IL_0602: Unknown result type (might be due to invalid IL or missing references)
		//IL_0610: Unknown result type (might be due to invalid IL or missing references)
		//IL_0615: Unknown result type (might be due to invalid IL or missing references)
		//IL_061b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0626: Unknown result type (might be due to invalid IL or missing references)
		//IL_062b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0630: Unknown result type (might be due to invalid IL or missing references)
		//IL_0637: Unknown result type (might be due to invalid IL or missing references)
		//IL_0641: Unknown result type (might be due to invalid IL or missing references)
		//IL_0646: Unknown result type (might be due to invalid IL or missing references)
		//IL_07eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_080e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0814: Unknown result type (might be due to invalid IL or missing references)
		//IL_082e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0833: Unknown result type (might be due to invalid IL or missing references)
		//IL_083b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0845: Unknown result type (might be due to invalid IL or missing references)
		//IL_084a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0852: Unknown result type (might be due to invalid IL or missing references)
		//IL_0858: Unknown result type (might be due to invalid IL or missing references)
		//IL_0862: Unknown result type (might be due to invalid IL or missing references)
		//IL_0867: Unknown result type (might be due to invalid IL or missing references)
		//IL_086c: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_08af: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c33: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c38: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c44: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c50: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c52: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d71: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c66: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c79: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ccd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c97: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c99: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f23: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e26: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0db7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dca: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0da8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e64: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e77: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e55: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dea: Unknown result type (might be due to invalid IL or missing references)
		//IL_0def: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e97: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1017: Unknown result type (might be due to invalid IL or missing references)
		//IL_184f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1862: Unknown result type (might be due to invalid IL or missing references)
		//IL_1160: Unknown result type (might be due to invalid IL or missing references)
		//IL_1163: Unknown result type (might be due to invalid IL or missing references)
		//IL_1168: Unknown result type (might be due to invalid IL or missing references)
		//IL_116d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1178: Unknown result type (might be due to invalid IL or missing references)
		//IL_117a: Unknown result type (might be due to invalid IL or missing references)
		//IL_117f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1184: Unknown result type (might be due to invalid IL or missing references)
		//IL_107c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1196: Unknown result type (might be due to invalid IL or missing references)
		//IL_1198: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_1345: Unknown result type (might be due to invalid IL or missing references)
		//IL_1347: Unknown result type (might be due to invalid IL or missing references)
		//IL_134a: Unknown result type (might be due to invalid IL or missing references)
		//IL_134f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1351: Unknown result type (might be due to invalid IL or missing references)
		//IL_1356: Unknown result type (might be due to invalid IL or missing references)
		//IL_1358: Unknown result type (might be due to invalid IL or missing references)
		//IL_135a: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_112d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1134: Unknown result type (might be due to invalid IL or missing references)
		//IL_1139: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_18cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_18cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_1372: Unknown result type (might be due to invalid IL or missing references)
		//IL_1374: Unknown result type (might be due to invalid IL or missing references)
		//IL_1379: Unknown result type (might be due to invalid IL or missing references)
		//IL_137e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1380: Unknown result type (might be due to invalid IL or missing references)
		//IL_1382: Unknown result type (might be due to invalid IL or missing references)
		//IL_1389: Unknown result type (might be due to invalid IL or missing references)
		//IL_138e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1393: Unknown result type (might be due to invalid IL or missing references)
		//IL_1395: Unknown result type (might be due to invalid IL or missing references)
		//IL_1366: Unknown result type (might be due to invalid IL or missing references)
		//IL_136b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1370: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_18fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_190a: Unknown result type (might be due to invalid IL or missing references)
		//IL_190f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1914: Unknown result type (might be due to invalid IL or missing references)
		//IL_1597: Unknown result type (might be due to invalid IL or missing references)
		//IL_159b: Unknown result type (might be due to invalid IL or missing references)
		//IL_15a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_15bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_156f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1579: Unknown result type (might be due to invalid IL or missing references)
		//IL_157e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1539: Unknown result type (might be due to invalid IL or missing references)
		//IL_153d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1542: Unknown result type (might be due to invalid IL or missing references)
		//IL_1546: Unknown result type (might be due to invalid IL or missing references)
		//IL_1550: Unknown result type (might be due to invalid IL or missing references)
		//IL_1555: Unknown result type (might be due to invalid IL or missing references)
		//IL_1557: Unknown result type (might be due to invalid IL or missing references)
		//IL_1561: Unknown result type (might be due to invalid IL or missing references)
		//IL_1566: Unknown result type (might be due to invalid IL or missing references)
		//IL_13af: Unknown result type (might be due to invalid IL or missing references)
		//IL_1101: Unknown result type (might be due to invalid IL or missing references)
		//IL_1104: Unknown result type (might be due to invalid IL or missing references)
		//IL_1109: Unknown result type (might be due to invalid IL or missing references)
		//IL_110e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1923: Unknown result type (might be due to invalid IL or missing references)
		//IL_193f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1944: Unknown result type (might be due to invalid IL or missing references)
		//IL_1949: Unknown result type (might be due to invalid IL or missing references)
		//IL_1487: Unknown result type (might be due to invalid IL or missing references)
		//IL_148a: Unknown result type (might be due to invalid IL or missing references)
		//IL_148f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1494: Unknown result type (might be due to invalid IL or missing references)
		//IL_149f: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_1971: Unknown result type (might be due to invalid IL or missing references)
		//IL_1976: Unknown result type (might be due to invalid IL or missing references)
		//IL_1978: Unknown result type (might be due to invalid IL or missing references)
		//IL_197d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1654: Unknown result type (might be due to invalid IL or missing references)
		//IL_1658: Unknown result type (might be due to invalid IL or missing references)
		//IL_165d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1661: Unknown result type (might be due to invalid IL or missing references)
		//IL_1667: Unknown result type (might be due to invalid IL or missing references)
		//IL_166c: Unknown result type (might be due to invalid IL or missing references)
		//IL_166e: Unknown result type (might be due to invalid IL or missing references)
		//IL_167a: Unknown result type (might be due to invalid IL or missing references)
		//IL_167f: Unknown result type (might be due to invalid IL or missing references)
		//IL_161c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1626: Unknown result type (might be due to invalid IL or missing references)
		//IL_162b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1316: Unknown result type (might be due to invalid IL or missing references)
		//IL_131d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1322: Unknown result type (might be due to invalid IL or missing references)
		//IL_121b: Unknown result type (might be due to invalid IL or missing references)
		//IL_121d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1227: Unknown result type (might be due to invalid IL or missing references)
		//IL_122c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1231: Unknown result type (might be due to invalid IL or missing references)
		//IL_1238: Unknown result type (might be due to invalid IL or missing references)
		//IL_1243: Unknown result type (might be due to invalid IL or missing references)
		//IL_1755: Unknown result type (might be due to invalid IL or missing references)
		//IL_175f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1764: Unknown result type (might be due to invalid IL or missing references)
		//IL_14fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1504: Unknown result type (might be due to invalid IL or missing references)
		//IL_1509: Unknown result type (might be due to invalid IL or missing references)
		//IL_1402: Unknown result type (might be due to invalid IL or missing references)
		//IL_1404: Unknown result type (might be due to invalid IL or missing references)
		//IL_140e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1413: Unknown result type (might be due to invalid IL or missing references)
		//IL_1418: Unknown result type (might be due to invalid IL or missing references)
		//IL_141f: Unknown result type (might be due to invalid IL or missing references)
		//IL_142a: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_16de: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_16fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1702: Unknown result type (might be due to invalid IL or missing references)
		//IL_1707: Unknown result type (might be due to invalid IL or missing references)
		//IL_1713: Unknown result type (might be due to invalid IL or missing references)
		//IL_17fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1804: Unknown result type (might be due to invalid IL or missing references)
		//IL_1809: Unknown result type (might be due to invalid IL or missing references)
		//IL_178e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1798: Unknown result type (might be due to invalid IL or missing references)
		//IL_179d: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_17e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2270: Unknown result type (might be due to invalid IL or missing references)
		//IL_2294: Unknown result type (might be due to invalid IL or missing references)
		//IL_229a: Unknown result type (might be due to invalid IL or missing references)
		//IL_22b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_22bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_22c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_21f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_173b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1288: Unknown result type (might be due to invalid IL or missing references)
		//IL_128a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1294: Unknown result type (might be due to invalid IL or missing references)
		//IL_1299: Unknown result type (might be due to invalid IL or missing references)
		//IL_129e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2054: Unknown result type (might be due to invalid IL or missing references)
		//IL_2059: Unknown result type (might be due to invalid IL or missing references)
		//IL_205b: Unknown result type (might be due to invalid IL or missing references)
		//IL_206b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2070: Unknown result type (might be due to invalid IL or missing references)
		//IL_2072: Unknown result type (might be due to invalid IL or missing references)
		//IL_208a: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_20b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_20be: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_20cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1afc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b27: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab5: Unknown result type (might be due to invalid IL or missing references)
		//IL_146f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1471: Unknown result type (might be due to invalid IL or missing references)
		//IL_147b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1480: Unknown result type (might be due to invalid IL or missing references)
		//IL_1485: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b66: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b68: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b72: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b87: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b90: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b94: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1baf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c00: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ceb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ced: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d02: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d06: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d10: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d15: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d17: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d21: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d26: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c26: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c28: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c32: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c34: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c38: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c50: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c55: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c59: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c63: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c68: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c74: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c79: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c13: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d73: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d82: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2701: Unknown result type (might be due to invalid IL or missing references)
		//IL_2704: Unknown result type (might be due to invalid IL or missing references)
		//IL_2709: Unknown result type (might be due to invalid IL or missing references)
		//IL_2767: Unknown result type (might be due to invalid IL or missing references)
		//IL_272e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2731: Unknown result type (might be due to invalid IL or missing references)
		//IL_2736: Unknown result type (might be due to invalid IL or missing references)
		//IL_2790: Unknown result type (might be due to invalid IL or missing references)
		//IL_2793: Unknown result type (might be due to invalid IL or missing references)
		//IL_2798: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ebc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ec1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ec8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ecd: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_27fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_27bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_27be: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_27d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_27d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_27dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_27eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b82: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b87: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_28eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_28ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_28f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_28f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bba: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bca: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bde: Unknown result type (might be due to invalid IL or missing references)
		//IL_2be8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bef: Unknown result type (might be due to invalid IL or missing references)
		//IL_2847: Unknown result type (might be due to invalid IL or missing references)
		//IL_284a: Unknown result type (might be due to invalid IL or missing references)
		//IL_284f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2854: Unknown result type (might be due to invalid IL or missing references)
		//IL_2856: Unknown result type (might be due to invalid IL or missing references)
		//IL_2858: Unknown result type (might be due to invalid IL or missing references)
		//IL_285d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2862: Unknown result type (might be due to invalid IL or missing references)
		//IL_2864: Unknown result type (might be due to invalid IL or missing references)
		//IL_2868: Unknown result type (might be due to invalid IL or missing references)
		//IL_286d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2876: Unknown result type (might be due to invalid IL or missing references)
		//IL_2881: Unknown result type (might be due to invalid IL or missing references)
		//IL_288b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2892: Unknown result type (might be due to invalid IL or missing references)
		//IL_293d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2940: Unknown result type (might be due to invalid IL or missing references)
		//IL_2945: Unknown result type (might be due to invalid IL or missing references)
		//IL_294a: Unknown result type (might be due to invalid IL or missing references)
		//IL_294c: Unknown result type (might be due to invalid IL or missing references)
		//IL_294e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2953: Unknown result type (might be due to invalid IL or missing references)
		//IL_2958: Unknown result type (might be due to invalid IL or missing references)
		//IL_295a: Unknown result type (might be due to invalid IL or missing references)
		//IL_295e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2963: Unknown result type (might be due to invalid IL or missing references)
		//IL_296c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2977: Unknown result type (might be due to invalid IL or missing references)
		//IL_2981: Unknown result type (might be due to invalid IL or missing references)
		//IL_2988: Unknown result type (might be due to invalid IL or missing references)
		//IL_29d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_29dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_29e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_29e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_29ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a31: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a42: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a47: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a54: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a70: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a76: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a90: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a96: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ab4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ab9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ac4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ac9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ad3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ad8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2add: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b15: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b17: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b35: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aea: Unknown result type (might be due to invalid IL or missing references)
		//IL_2af8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b02: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b07: Unknown result type (might be due to invalid IL or missing references)
		float num = 0f;
		float num12 = 0f;
		float num23 = 20f;
		float num34 = 40f;
		float num45 = 0.69f;
		if (type == 963)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].abigailMinion = false;
			}
			if (Main.player[owner].abigailMinion)
			{
				timeLeft = 2;
			}
			originalDamage = Main.player[owner].highestAbigailCounterOriginalDamage;
			num12 = Main.player[owner].ownedProjectileCounts[970] - 1;
			num23 = Math.Max(4f, 18f - num12 * 1.75f);
			num = 1.4f;
			num34 = Math.Max(5f, num34 - num12 * 4f);
			num45 = Math.Min(1f, num45 + num12 * 0.03f);
		}
		if (type == 423)
		{
			num34 = 5f;
		}
		if (type == 373)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].hornetMinion = false;
			}
			if (Main.player[owner].hornetMinion)
			{
				timeLeft = 2;
			}
		}
		if (type == 375)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].impMinion = false;
			}
			if (Main.player[owner].impMinion)
			{
				timeLeft = 2;
			}
		}
		if (type == 407)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].sharknadoMinion = false;
			}
			if (Main.player[owner].sharknadoMinion)
			{
				timeLeft = 2;
			}
		}
		if (type == 423)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].UFOMinion = false;
			}
			if (Main.player[owner].UFOMinion)
			{
				timeLeft = 2;
			}
		}
		if (type == 613)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].stardustMinion = false;
			}
			if (Main.player[owner].stardustMinion)
			{
				timeLeft = 2;
			}
			Lighting.AddLight(base.Center, 0.2f, 0.6f, 0.7f);
			if (localAI[1] > 0f)
			{
				localAI[1] -= 1f;
			}
		}
		if (type == 423)
		{
			if (ai[0] == 2f)
			{
				ai[1] -= 1f;
				tileCollide = false;
				if (ai[1] > 3f)
				{
					int num48 = Dust.NewDust(base.Center, 0, 0, 220 + Main.rand.Next(2), velocity.X, velocity.Y, 100);
					Main.dust[num48].scale = 0.5f + (float)Main.rand.NextDouble() * 0.3f;
					Dust obj = Main.dust[num48];
					obj.velocity /= 2.5f;
					Main.dust[num48].noGravity = true;
					Main.dust[num48].noLight = true;
					Main.dust[num48].frame.Y = 80;
				}
				if (ai[1] != 0f)
				{
					return;
				}
				ai[1] = 30f;
				ai[0] = 0f;
				velocity /= 5f;
				velocity.Y = 0f;
				extraUpdates = 0;
				numUpdates = 0;
				netUpdate = true;
				extraUpdates = 0;
				numUpdates = 0;
			}
			if (extraUpdates > 1)
			{
				extraUpdates = 0;
			}
			if (numUpdates > 1)
			{
				numUpdates = 0;
			}
		}
		Vector2 center4;
		if (type == 613)
		{
			if (ai[0] == 2f)
			{
				ai[1] -= 1f;
				tileCollide = false;
				if (ai[1] > 3f)
				{
					if (numUpdates < 20)
					{
						for (int i = 0; i < 3; i++)
						{
							Dust obj2 = Main.dust[Dust.NewDust(position, width, height, 229)];
							obj2.noGravity = true;
							obj2.position = base.Center;
							obj2.velocity *= 3f;
							obj2.velocity += velocity * 3f;
							obj2.fadeIn = 1f;
						}
					}
					float num49 = 2f - (float)numUpdates / 30f;
					if (scale > 0f)
					{
						float num50 = 2f;
						for (int j = 0; (float)j < num50; j++)
						{
							Dust obj3 = Main.dust[Dust.NewDust(position, width, height, 229)];
							obj3.noGravity = true;
							Vector2 center3 = base.Center;
							Vector2 unitY = Vector2.UnitY;
							double radians = (float)numUpdates * ((float)Math.PI / 30f) + (float)whoAmI * ((float)Math.PI / 4f) + (float)Math.PI / 2f;
							center4 = default(Vector2);
							obj3.position = center3 + unitY.RotatedBy(radians, center4) * (float)(height / 2) - velocity * ((float)j / num50);
							obj3.velocity = velocity / 3f;
							obj3.fadeIn = num49 / 2f;
							obj3.scale = num49;
						}
					}
				}
				if (ai[1] != 0f)
				{
					return;
				}
				ai[1] = 30f;
				ai[0] = 0f;
				velocity /= 5f;
				velocity.Y = 0f;
				extraUpdates = 0;
				numUpdates = 0;
				netUpdate = true;
				float num51 = 15f;
				for (int k = 0; (float)k < num51; k++)
				{
					Dust dust = Main.dust[Dust.NewDust(position, width, height, 229)];
					dust.noGravity = true;
					dust.position = base.Center - velocity * 5f;
					dust.velocity *= 3f;
					dust.velocity += velocity * 3f;
					dust.fadeIn = 1f;
					if (Main.rand.Next(3) != 0)
					{
						dust.fadeIn = 2f;
						dust.scale = 2f;
						dust.velocity /= 8f;
					}
				}
				for (int l = 0; (float)l < num51; l++)
				{
					Dust dust2 = Main.dust[Dust.NewDust(position, width, height, 229)];
					dust2.noGravity = true;
					dust2.position = base.Center;
					dust2.velocity *= 3f;
					dust2.velocity += velocity * 3f;
					dust2.fadeIn = 1f;
					if (Main.rand.Next(3) != 0)
					{
						dust2.fadeIn = 2f;
						dust2.scale = 2f;
						dust2.velocity /= 8f;
					}
				}
				extraUpdates = 0;
				numUpdates = 0;
			}
			if (extraUpdates > 1)
			{
				extraUpdates = 0;
			}
			if (numUpdates > 1)
			{
				numUpdates = 0;
			}
		}
		if (type == 423 && localAI[0] > 0f)
		{
			localAI[0] -= 1f;
		}
		if (type == 613 && localAI[0] > 0f)
		{
			localAI[0] -= 1f;
		}
		float num2 = 0.05f;
		float num3 = width;
		if (type == 407)
		{
			num2 = 0.1f;
			num3 *= 2f;
		}
		for (int m = 0; m < 1000; m++)
		{
			if (m != whoAmI && Main.projectile[m].active && Main.projectile[m].owner == owner && Main.projectile[m].type == type && Math.Abs(position.X - Main.projectile[m].position.X) + Math.Abs(position.Y - Main.projectile[m].position.Y) < num3)
			{
				if (position.X < Main.projectile[m].position.X)
				{
					velocity.X -= num2;
				}
				else
				{
					velocity.X += num2;
				}
				if (position.Y < Main.projectile[m].position.Y)
				{
					velocity.Y -= num2;
				}
				else
				{
					velocity.Y += num2;
				}
			}
		}
		Vector2 vector = position;
		float num4 = 400f;
		if (type == 423)
		{
			num4 = 300f;
		}
		if (type == 613)
		{
			num4 = 300f;
		}
		num4 = 2000f;
		if (type == 963)
		{
			num4 = 700f;
		}
		bool flag = false;
		int num5 = -1;
		tileCollide = true;
		if (type == 963)
		{
			tileCollide = false;
		}
		if (type == 407)
		{
			tileCollide = false;
			if (Collision.SolidCollision(position, width, height))
			{
				alpha += 20;
				if (alpha > 150)
				{
					alpha = 150;
				}
			}
			else
			{
				alpha -= 50;
				if (alpha < 60)
				{
					alpha = 60;
				}
			}
		}
		if (type == 407 || type == 613 || type == 423)
		{
			Vector2 center = Main.player[owner].Center;
			Vector2 vector2 = default(Vector2);
			((Vector2)(ref vector2))._002Ector(0.5f);
			if (type == 423)
			{
				vector2.Y = 0f;
			}
			NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
			if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
			{
				Vector2 vector3 = ownerMinionAttackTargetNPC.position + ownerMinionAttackTargetNPC.Size * vector2;
				float num6 = num4 * 3f;
				float num7 = Vector2.Distance(vector3, center);
				if (num7 < num6 && !flag && Collision.CanHitLine(position, width, height, ownerMinionAttackTargetNPC.position, ownerMinionAttackTargetNPC.width, ownerMinionAttackTargetNPC.height))
				{
					num4 = num7;
					vector = vector3;
					flag = true;
					num5 = ownerMinionAttackTargetNPC.whoAmI;
				}
			}
			if (!flag)
			{
				for (int n = 0; n < 200; n++)
				{
					NPC nPC = Main.npc[n];
					if (nPC.CanBeChasedBy(this))
					{
						Vector2 vector4 = nPC.position + nPC.Size * vector2;
						float num8 = Vector2.Distance(vector4, center);
						if (!(num8 >= num4) && Collision.CanHitLine(position, width, height, nPC.position, nPC.width, nPC.height))
						{
							num4 = num8;
							vector = vector4;
							flag = true;
							num5 = n;
						}
					}
				}
			}
		}
		else
		{
			NPC ownerMinionAttackTargetNPC2 = OwnerMinionAttackTargetNPC;
			if (ownerMinionAttackTargetNPC2 != null && ownerMinionAttackTargetNPC2.CanBeChasedBy(this))
			{
				float num9 = Vector2.Distance(ownerMinionAttackTargetNPC2.Center, base.Center);
				float num10 = num4 * 3f;
				if (num9 < num10 && !flag && ((type != 963) ? Collision.CanHitLine(position, width, height, ownerMinionAttackTargetNPC2.position, ownerMinionAttackTargetNPC2.width, ownerMinionAttackTargetNPC2.height) : Collision.CanHit(base.Center, 1, 1, ownerMinionAttackTargetNPC2.Center, 1, 1)))
				{
					num4 = num9;
					vector = ownerMinionAttackTargetNPC2.Center;
					flag = true;
					num5 = ownerMinionAttackTargetNPC2.whoAmI;
				}
			}
			if (!flag)
			{
				for (int num11 = 0; num11 < 200; num11++)
				{
					NPC nPC2 = Main.npc[num11];
					if (nPC2.CanBeChasedBy(this))
					{
						float num13 = Vector2.Distance(nPC2.Center, base.Center);
						if (!(num13 >= num4) && ((type != 963) ? Collision.CanHitLine(position, width, height, nPC2.position, nPC2.width, nPC2.height) : Collision.CanHit(base.Center, 1, 1, nPC2.Center, 1, 1)))
						{
							num4 = num13;
							vector = nPC2.Center;
							flag = true;
							num5 = num11;
						}
					}
				}
			}
		}
		int num14 = 500;
		if (type == 963)
		{
			num14 = 800;
		}
		if (flag)
		{
			num14 = 1000;
		}
		if (flag && type == 423)
		{
			num14 = 1200;
		}
		if (flag && type == 613)
		{
			num14 = 1350;
		}
		Player player = Main.player[owner];
		if (Vector2.Distance(player.Center, base.Center) > (float)num14)
		{
			ai[0] = 1f;
			netUpdate = true;
		}
		if (ai[0] == 1f)
		{
			tileCollide = false;
		}
		bool flag2 = false;
		if (type == 963)
		{
			flag2 = true;
		}
		if (flag2)
		{
			if (ai[0] <= 1f && localAI[1] <= 0f)
			{
				localAI[1] = -1f;
			}
			else
			{
				localAI[1] = Utils.Clamp(localAI[1] + 0.05f, 0f, 1f);
				if (localAI[1] == 1f)
				{
					localAI[1] = -1f;
				}
			}
		}
		if (type == 963 && ((Vector2)(ref velocity)).Length() > 0.1f && Main.rand.Next(1500) == 0)
		{
			SoundEngine.PlaySound(in SoundID.AbigailCry, base.Center);
		}
		bool flag3 = false;
		if (type == 423 || type == 407)
		{
			flag3 = true;
		}
		if (ai[0] >= 2f)
		{
			if (ai[0] == 2f && type == 963)
			{
				SoundEngine.PlaySound(in SoundID.AbigailAttack, base.Center);
			}
			ai[0] += 1f;
			if (flag2)
			{
				localAI[1] = ai[0] / num34;
			}
			if (!flag)
			{
				ai[0] += 1f;
			}
			if (ai[0] > num34)
			{
				ai[0] = 0f;
				netUpdate = true;
				if (flag && type == 963)
				{
					center4 = vector - base.Center;
					if (((Vector2)(ref center4)).Length() < 50f)
					{
						ai[0] = 2f;
					}
				}
			}
			velocity *= num45;
		}
		else if (flag && (flag3 || ai[0] == 0f))
		{
			Vector2 v = vector - base.Center;
			float num15 = ((Vector2)(ref v)).Length();
			v = v.SafeNormalize(Vector2.Zero);
			if (type == 423)
			{
				v = vector - Vector2.UnitY * 80f;
				int num16 = (int)v.Y / 16;
				if (num16 < 0)
				{
					num16 = 0;
				}
				Tile tile = Main.tile[(int)v.X / 16, num16];
				if (tile != null && tile.active() && Main.tileSolid[tile.type] && !Main.tileSolidTop[tile.type])
				{
					v += Vector2.UnitY * 16f;
					tile = Main.tile[(int)v.X / 16, (int)v.Y / 16];
					if (tile != null && tile.active() && Main.tileSolid[tile.type] && !Main.tileSolidTop[tile.type])
					{
						v += Vector2.UnitY * 16f;
					}
				}
				v -= base.Center;
				num15 = ((Vector2)(ref v)).Length();
				v = v.SafeNormalize(Vector2.Zero);
				if (num15 > 300f && num15 <= 800f && localAI[0] == 0f)
				{
					ai[0] = 2f;
					ai[1] = (int)(num15 / 10f);
					extraUpdates = (int)ai[1];
					velocity = v * 10f;
					localAI[0] = 60f;
					return;
				}
			}
			if (type == 613)
			{
				v = vector;
				Vector2 vector5 = base.Center - v;
				if (vector5 == Vector2.Zero)
				{
					vector5 = -Vector2.UnitY;
				}
				vector5 = vector5.SafeNormalize(Vector2.Zero);
				v += vector5 * 60f;
				int num17 = (int)v.Y / 16;
				if (num17 < 0)
				{
					num17 = 0;
				}
				Tile tile2 = Main.tile[(int)v.X / 16, num17];
				if (tile2 != null && tile2.active() && Main.tileSolid[tile2.type] && !Main.tileSolidTop[tile2.type])
				{
					v += Vector2.UnitY * 16f;
					tile2 = Main.tile[(int)v.X / 16, (int)v.Y / 16];
					if (tile2 != null && tile2.active() && Main.tileSolid[tile2.type] && !Main.tileSolidTop[tile2.type])
					{
						v += Vector2.UnitY * 16f;
					}
				}
				v -= base.Center;
				num15 = ((Vector2)(ref v)).Length();
				v = v.SafeNormalize(Vector2.Zero);
				if (num15 > 400f && num15 <= 800f && localAI[0] == 0f)
				{
					ai[0] = 2f;
					ai[1] = (int)(num15 / 10f);
					extraUpdates = (int)ai[1];
					velocity = v * 10f;
					localAI[0] = 60f;
					return;
				}
			}
			if (type == 407)
			{
				if (num15 > 400f)
				{
					float num18 = 3f;
					v *= num18;
					velocity = (velocity * 20f + v) / 21f;
				}
				else
				{
					velocity *= 0.96f;
				}
			}
			if (num15 > 200f)
			{
				float num19 = 6f + num12 * num;
				v *= num19;
				float num20 = num23 * 2f;
				velocity.X = (velocity.X * num20 + v.X) / (num20 + 1f);
				velocity.Y = (velocity.Y * num20 + v.Y) / (num20 + 1f);
			}
			else if (type == 963)
			{
				if (num15 < 50f)
				{
					velocity *= 0.5f;
					ai[0] = 2f;
					netUpdate = true;
				}
				else
				{
					float num21 = 4f + num12 * num;
					v *= num21;
					velocity = (velocity * num23 + v) / (num23 + 1f);
				}
			}
			else if (type == 423 || type == 613)
			{
				if (num15 > 70f && num15 < 130f)
				{
					float num22 = 7f;
					if (num15 < 100f)
					{
						num22 = -3f;
					}
					v *= num22;
					velocity = (velocity * 20f + v) / 21f;
					if (Math.Abs(v.X) > Math.Abs(v.Y))
					{
						velocity.X = (velocity.X * 10f + v.X) / 11f;
					}
				}
				else
				{
					velocity *= 0.97f;
				}
			}
			else if (type == 375)
			{
				if (num15 < 150f)
				{
					float num24 = 4f;
					v *= 0f - num24;
					velocity.X = (velocity.X * 40f + v.X) / 41f;
					velocity.Y = (velocity.Y * 40f + v.Y) / 41f;
				}
				else
				{
					velocity *= 0.97f;
				}
			}
			else if (velocity.Y > -1f)
			{
				velocity.Y -= 0.1f;
			}
		}
		else
		{
			if (type != 963 && !Collision.CanHitLine(base.Center, 1, 1, Main.player[owner].Center, 1, 1))
			{
				ai[0] = 1f;
			}
			float num25 = 6f;
			if (ai[0] == 1f)
			{
				num25 = 15f;
			}
			if (type == 407)
			{
				num25 = 9f;
			}
			if (type == 963)
			{
				num25 *= 0.8f;
			}
			Vector2 center2 = base.Center;
			Vector2 v2 = player.Center - center2 + new Vector2(0f, -60f);
			if (type == 407)
			{
				v2 += new Vector2(0f, 40f);
			}
			if (type == 963)
			{
				v2 += new Vector2((float)(-40 * Main.player[owner].direction), 40f);
			}
			if (type == 375)
			{
				ai[1] = 80f;
				netUpdate = true;
				v2 = player.Center - center2;
				int num26 = 1;
				for (int num27 = 0; num27 < whoAmI; num27++)
				{
					if (Main.projectile[num27].active && Main.projectile[num27].owner == owner && Main.projectile[num27].type == type)
					{
						num26++;
					}
				}
				v2.X -= 10 * Main.player[owner].direction;
				v2.X -= num26 * 40 * Main.player[owner].direction;
				v2.Y -= 10f;
			}
			float num28 = ((Vector2)(ref v2)).Length();
			if (num28 > 200f && num25 < 9f)
			{
				num25 = 9f;
			}
			if ((type == 423 || type == 407) && num28 > 300f && num25 < 12f)
			{
				num25 = 12f;
			}
			if (type == 375)
			{
				num25 = (int)((double)num25 * 0.75);
			}
			if (num28 < 100f && ai[0] == 1f && !Collision.SolidCollision(position, width, height))
			{
				ai[0] = 0f;
				netUpdate = true;
			}
			if (num28 > 2000f)
			{
				position.X = Main.player[owner].Center.X - (float)(width / 2);
				position.Y = Main.player[owner].Center.Y - (float)(width / 2);
			}
			if (type == 375 || type == 963)
			{
				if (num28 > 10f)
				{
					v2 = v2.SafeNormalize(Vector2.Zero);
					if (num28 < 50f)
					{
						num25 /= 2f;
					}
					v2 *= num25;
					velocity = (velocity * 20f + v2) / 21f;
				}
				else
				{
					direction = Main.player[owner].direction;
					velocity *= 0.9f;
				}
			}
			else if (type == 407)
			{
				if (Math.Abs(v2.X) > 40f || Math.Abs(v2.Y) > 10f)
				{
					v2 = v2.SafeNormalize(Vector2.Zero);
					v2 *= num25;
					v2 *= new Vector2(1.25f, 0.65f);
					velocity = (velocity * 20f + v2) / 21f;
				}
				else
				{
					if (velocity.X == 0f && velocity.Y == 0f)
					{
						velocity.X = -0.15f;
						velocity.Y = -0.05f;
					}
					velocity *= 1.01f;
				}
			}
			else if (num28 > 70f)
			{
				v2 = v2.SafeNormalize(Vector2.Zero);
				v2 *= num25;
				velocity = (velocity * 20f + v2) / 21f;
			}
			else
			{
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					velocity.X = -0.15f;
					velocity.Y = -0.05f;
				}
				velocity *= 1.01f;
			}
			if (num28 > 250f && (type == 423 || type == 407))
			{
				float x = Main.player[owner].velocity.X;
				float y = Main.player[owner].velocity.Y;
				if ((velocity.X < 0f && x >= 0f) || (velocity.X >= 0f && x < 0f))
				{
					velocity.X *= 0.95f;
				}
				else
				{
					velocity.X += x * 0.125f;
				}
				if ((velocity.Y < 0f && y >= 0f) || (velocity.Y >= 0f && y < 0f))
				{
					velocity.Y *= 0.95f;
				}
				else
				{
					velocity.Y += y * 0.125f;
				}
				if (((Vector2)(ref velocity)).Length() > num25)
				{
					velocity = velocity.SafeNormalize(Vector2.Zero) * num25;
				}
			}
		}
		rotation = velocity.X * 0.05f;
		frameCounter++;
		if (type == 373)
		{
			if (frameCounter > 1)
			{
				frame++;
				frameCounter = 0;
			}
			if (frame > 2)
			{
				frame = 0;
			}
		}
		if (type == 963)
		{
			if (ai[0] >= 2f)
			{
				int num29 = 12;
				if (frame < 8)
				{
					frameCounter = 0;
				}
				frameCounter++;
				frame = frameCounter / num29;
				if (frame > 6)
				{
					frameCounter = 0;
					frame = 5;
				}
				switch (frame)
				{
				case 0:
				case 1:
				case 2:
					frame = 8 + frame;
					break;
				case 3:
				case 5:
				case 7:
					frame = 11;
					break;
				default:
					frame = 12;
					break;
				}
				if (Main.rand.Next(2) == 0)
				{
					float num30 = 1.1f + Main.rand.NextFloat() * 0.3f;
					float num31 = 1.4f + Main.rand.NextFloat() * 0.4f;
					Vector2 vector6 = Main.rand.NextVector2CircularEdge((float)width * num30, (0f - (float)height) * 0.25f * num30);
					float num32 = vector6.ToRotation() + (float)Math.PI / 2f;
					int num33 = Dust.NewDust(base.Bottom + vector6, 1, 1, 303, 0f, 0f, 50, Color.GhostWhite, num31);
					Main.dust[num33].velocity = vector6 * 0.0125f + Utils.RotatedBy(new Vector2(1f, 0f), num32, Vector2.Zero);
					Main.dust[num33].noGravity = true;
				}
			}
			else
			{
				if (frame > 7)
				{
					frame = 0;
					frameCounter = 0;
				}
				if (frameCounter > 6)
				{
					frameCounter = 0;
					frame++;
					if (frame > 7)
					{
						frame = 0;
					}
				}
			}
		}
		if (type == 375)
		{
			if (frameCounter >= 16)
			{
				frameCounter = 0;
			}
			frame = frameCounter / 4;
			if (ai[1] > 0f && ai[1] < 16f)
			{
				frame += 4;
			}
			if (Main.rand.Next(6) == 0)
			{
				int num35 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
				Dust obj4 = Main.dust[num35];
				obj4.velocity *= 0.3f;
				Main.dust[num35].noGravity = true;
				Main.dust[num35].noLight = true;
			}
		}
		if (type == 407)
		{
			int num36 = 2;
			if (frameCounter >= 6 * num36)
			{
				frameCounter = 0;
			}
			frame = frameCounter / num36;
			if (Main.rand.Next(5) == 0)
			{
				int num37 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 217, 0f, 0f, 100, default(Color), 2f);
				Dust obj5 = Main.dust[num37];
				obj5.velocity *= 0.3f;
				Main.dust[num37].noGravity = true;
				Main.dust[num37].noLight = true;
			}
		}
		if (type == 423 || type == 613)
		{
			int num38 = 3;
			if (frameCounter >= 4 * num38)
			{
				frameCounter = 0;
			}
			frame = frameCounter / num38;
		}
		if (velocity.X > 0f)
		{
			spriteDirection = (direction = -1);
		}
		else if (velocity.X < 0f)
		{
			spriteDirection = (direction = 1);
		}
		if (type == 963)
		{
			spriteDirection = (direction *= -1);
			if (!flag && Math.Abs(velocity.X) < 0.1f)
			{
				spriteDirection = ((Main.player[owner].Center.X > base.Center.X) ? 1 : (-1));
			}
		}
		if (type == 373)
		{
			if (ai[1] > 0f)
			{
				ai[1] += Main.rand.Next(1, 4);
			}
			int num39 = 90;
			if (Main.player[owner].strongBees)
			{
				num39 = 70;
			}
			if (ai[1] > (float)num39)
			{
				ai[1] = 0f;
				netUpdate = true;
			}
		}
		else if (type == 375)
		{
			if (ai[1] > 0f)
			{
				ai[1] += 1f;
				if (Main.rand.Next(3) == 0)
				{
					ai[1] += 1f;
				}
			}
			if (ai[1] > 90f)
			{
				ai[1] = 0f;
				netUpdate = true;
			}
		}
		else if (type == 407)
		{
			if (ai[1] > 0f)
			{
				ai[1] += 1f;
				if (Main.rand.Next(3) != 0)
				{
					ai[1] += 1f;
				}
			}
			if (ai[1] > 50f)
			{
				ai[1] = 0f;
				netUpdate = true;
			}
		}
		else if (type == 423)
		{
			if (ai[1] > 0f)
			{
				ai[1] += 1f;
				if (Main.rand.Next(3) != 0)
				{
					ai[1] += 1f;
				}
			}
			if (ai[1] > 40f)
			{
				ai[1] = 0f;
				netUpdate = true;
			}
		}
		else if (type == 613)
		{
			if (ai[1] > 0f)
			{
				ai[1] += 1f;
				if (Main.rand.Next(3) != 0)
				{
					ai[1] += 1f;
				}
			}
			if (ai[1] > 60f)
			{
				ai[1] = 0f;
				netUpdate = true;
			}
		}
		if (!flag3 && ai[0] != 0f)
		{
			return;
		}
		float num40 = 0f;
		int num41 = 0;
		if (type == 373)
		{
			num40 = 10f;
			num41 = 374;
		}
		else if (type == 375)
		{
			num40 = 11f;
			num41 = 376;
		}
		else if (type == 407)
		{
			num40 = 20f;
			num41 = 408;
		}
		else if (type == 423)
		{
			num40 = 4f;
			num41 = 433;
		}
		else if (type == 613)
		{
			num40 = 14f;
			num41 = 614;
		}
		if (!flag)
		{
			return;
		}
		if (type == 375)
		{
			if ((vector - base.Center).X > 0f)
			{
				spriteDirection = (direction = -1);
			}
			else if ((vector - base.Center).X < 0f)
			{
				spriteDirection = (direction = 1);
			}
		}
		if (type == 407 && Collision.SolidCollision(position, width, height))
		{
			return;
		}
		if (type == 423)
		{
			if (Math.Abs((vector - base.Center).ToRotation() - (float)Math.PI / 2f) > (float)Math.PI / 4f)
			{
				velocity += (vector - base.Center - Vector2.UnitY * 80f).SafeNormalize(Vector2.Zero);
			}
			center4 = vector - base.Center;
			if (!(((Vector2)(ref center4)).Length() > 400f) && ai[1] == 0f)
			{
				ai[1] += 1f;
				if (Main.myPlayer == owner)
				{
					Vector2 v3 = vector - base.Center;
					v3 = v3.SafeNormalize(Vector2.Zero);
					v3 *= num40;
					NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, v3.X, v3.Y, num41, damage, knockBack, Main.myPlayer);
					netUpdate = true;
				}
			}
		}
		else if (ai[1] == 0f && type == 613)
		{
			center4 = vector - base.Center;
			if (((Vector2)(ref center4)).Length() > 500f || ai[1] != 0f)
			{
				return;
			}
			ai[1] += 1f;
			if (Main.myPlayer == owner)
			{
				Vector2 v4 = vector - base.Center;
				v4 = v4.SafeNormalize(Vector2.Zero);
				v4 *= num40;
				int num42 = NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, v4.X, v4.Y, num41, damage, knockBack, Main.myPlayer, 0f, num5);
				Main.projectile[num42].timeLeft = 300;
				Main.projectile[num42].netUpdate = true;
				velocity -= v4 / 3f;
				netUpdate = true;
			}
			for (int num43 = 0; num43 < 5; num43++)
			{
				int num44 = width / 4;
				_ = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (float)Main.rand.Next(24, 41) / 8f;
				int num46 = Dust.NewDust(base.Center - Vector2.One * (float)num44, num44 * 2, num44 * 2, 88);
				Dust dust3 = Main.dust[num46];
				Vector2 vector7 = (dust3.position - base.Center).SafeNormalize(Vector2.Zero);
				dust3.position = base.Center + vector7 * (float)num44 * scale - new Vector2(4f);
				if (num43 < 30)
				{
					dust3.velocity = vector7 * ((Vector2)(ref dust3.velocity)).Length() * 2f;
				}
				else
				{
					dust3.velocity = 2f * vector7 * (float)Main.rand.Next(45, 91) / 10f;
				}
				dust3.noGravity = true;
				dust3.scale = 0.7f + Main.rand.NextFloat();
			}
		}
		else if (ai[1] == 0f)
		{
			Vector2 v5 = vector - base.Center;
			ai[1] += 1f;
			if (Main.myPlayer == owner)
			{
				v5 = v5.SafeNormalize(Vector2.Zero);
				v5 *= num40;
				int num47 = NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, v5.X, v5.Y, num41, damage, knockBack, Main.myPlayer);
				Main.projectile[num47].timeLeft = 300;
				Main.projectile[num47].netUpdate = true;
				netUpdate = true;
			}
		}
	}

	private void AI_075()
	{
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0521: Unknown result type (might be due to invalid IL or missing references)
		//IL_0523: Unknown result type (might be due to invalid IL or missing references)
		//IL_0569: Unknown result type (might be due to invalid IL or missing references)
		//IL_0584: Unknown result type (might be due to invalid IL or missing references)
		//IL_0594: Unknown result type (might be due to invalid IL or missing references)
		//IL_059e: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0624: Unknown result type (might be due to invalid IL or missing references)
		//IL_0633: Unknown result type (might be due to invalid IL or missing references)
		//IL_0641: Unknown result type (might be due to invalid IL or missing references)
		//IL_0648: Unknown result type (might be due to invalid IL or missing references)
		//IL_064f: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_05be: Unknown result type (might be due to invalid IL or missing references)
		//IL_05bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_05fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0601: Unknown result type (might be due to invalid IL or missing references)
		//IL_0607: Unknown result type (might be due to invalid IL or missing references)
		//IL_163f: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1abb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1869: Unknown result type (might be due to invalid IL or missing references)
		//IL_1740: Unknown result type (might be due to invalid IL or missing references)
		//IL_1746: Unknown result type (might be due to invalid IL or missing references)
		//IL_1750: Unknown result type (might be due to invalid IL or missing references)
		//IL_1755: Unknown result type (might be due to invalid IL or missing references)
		//IL_175a: Unknown result type (might be due to invalid IL or missing references)
		//IL_175c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0174: Unknown result type (might be due to invalid IL or missing references)
		//IL_017e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0183: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		//IL_0196: Unknown result type (might be due to invalid IL or missing references)
		//IL_019c: Unknown result type (might be due to invalid IL or missing references)
		//IL_019e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c84: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c85: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c87: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c98: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bde: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bee: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_196a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1970: Unknown result type (might be due to invalid IL or missing references)
		//IL_197a: Unknown result type (might be due to invalid IL or missing references)
		//IL_197f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1984: Unknown result type (might be due to invalid IL or missing references)
		//IL_1986: Unknown result type (might be due to invalid IL or missing references)
		//IL_177f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1782: Unknown result type (might be due to invalid IL or missing references)
		//IL_178c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1791: Unknown result type (might be due to invalid IL or missing references)
		//IL_17be: Unknown result type (might be due to invalid IL or missing references)
		//IL_17c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_17e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_17ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_17f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_17f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1335: Unknown result type (might be due to invalid IL or missing references)
		//IL_1336: Unknown result type (might be due to invalid IL or missing references)
		//IL_1338: Unknown result type (might be due to invalid IL or missing references)
		//IL_1349: Unknown result type (might be due to invalid IL or missing references)
		//IL_134e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1353: Unknown result type (might be due to invalid IL or missing references)
		//IL_1355: Unknown result type (might be due to invalid IL or missing references)
		//IL_135a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e33: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cde: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ce0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ce5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ce7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_19af: Unknown result type (might be due to invalid IL or missing references)
		//IL_19b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_19be: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_19f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a19: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a24: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a29: Unknown result type (might be due to invalid IL or missing references)
		//IL_138f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1391: Unknown result type (might be due to invalid IL or missing references)
		//IL_1396: Unknown result type (might be due to invalid IL or missing references)
		//IL_1398: Unknown result type (might be due to invalid IL or missing references)
		//IL_1382: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_06dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01be: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0201: Unknown result type (might be due to invalid IL or missing references)
		//IL_0207: Unknown result type (might be due to invalid IL or missing references)
		//IL_021e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0228: Unknown result type (might be due to invalid IL or missing references)
		//IL_022d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d03: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d08: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_13be: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0711: Unknown result type (might be due to invalid IL or missing references)
		//IL_34e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_34e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_34ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_34f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_34fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_3501: Unknown result type (might be due to invalid IL or missing references)
		//IL_3508: Unknown result type (might be due to invalid IL or missing references)
		//IL_253c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2541: Unknown result type (might be due to invalid IL or missing references)
		//IL_254b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2550: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d13: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d18: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_16c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_16cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_13dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_13de: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b37: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b38: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b50: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b55: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b57: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0782: Unknown result type (might be due to invalid IL or missing references)
		//IL_0785: Unknown result type (might be due to invalid IL or missing references)
		//IL_078f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0794: Unknown result type (might be due to invalid IL or missing references)
		//IL_0796: Unknown result type (might be due to invalid IL or missing references)
		//IL_0749: Unknown result type (might be due to invalid IL or missing references)
		//IL_0753: Unknown result type (might be due to invalid IL or missing references)
		//IL_0758: Unknown result type (might be due to invalid IL or missing references)
		//IL_0762: Unknown result type (might be due to invalid IL or missing references)
		//IL_0767: Unknown result type (might be due to invalid IL or missing references)
		//IL_076c: Unknown result type (might be due to invalid IL or missing references)
		//IL_076e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0773: Unknown result type (might be due to invalid IL or missing references)
		//IL_35b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_35c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_35c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b39: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b44: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_18fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1903: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_16fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1700: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_13fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b91: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b93: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b98: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b84: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_07bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_35df: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d60: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d65: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d68: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d74: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d79: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b69: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b72: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b74: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b56: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b62: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b67: Unknown result type (might be due to invalid IL or missing references)
		//IL_191f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1923: Unknown result type (might be due to invalid IL or missing references)
		//IL_1928: Unknown result type (might be due to invalid IL or missing references)
		//IL_192a: Unknown result type (might be due to invalid IL or missing references)
		//IL_190c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1918: Unknown result type (might be due to invalid IL or missing references)
		//IL_191d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1714: Unknown result type (might be due to invalid IL or missing references)
		//IL_1419: Unknown result type (might be due to invalid IL or missing references)
		//IL_141b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dde: Unknown result type (might be due to invalid IL or missing references)
		//IL_0de8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ded: Unknown result type (might be due to invalid IL or missing references)
		//IL_0def: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e00: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e06: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e08: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e10: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e15: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e17: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c69: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c73: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c78: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c91: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c93: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c98: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ca0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ca2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ca7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ba8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0328: Unknown result type (might be due to invalid IL or missing references)
		//IL_032a: Unknown result type (might be due to invalid IL or missing references)
		//IL_032f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0331: Unknown result type (might be due to invalid IL or missing references)
		//IL_031b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3614: Unknown result type (might be due to invalid IL or missing references)
		//IL_3638: Unknown result type (might be due to invalid IL or missing references)
		//IL_3642: Unknown result type (might be due to invalid IL or missing references)
		//IL_3647: Unknown result type (might be due to invalid IL or missing references)
		//IL_364c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3651: Unknown result type (might be due to invalid IL or missing references)
		//IL_3660: Unknown result type (might be due to invalid IL or missing references)
		//IL_366a: Unknown result type (might be due to invalid IL or missing references)
		//IL_366f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3674: Unknown result type (might be due to invalid IL or missing references)
		//IL_3676: Unknown result type (might be due to invalid IL or missing references)
		//IL_367d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3683: Unknown result type (might be due to invalid IL or missing references)
		//IL_3688: Unknown result type (might be due to invalid IL or missing references)
		//IL_3607: Unknown result type (might be due to invalid IL or missing references)
		//IL_29b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_29b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_29c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_29cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_29d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_29d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_29d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_29d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_29e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_29ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_29ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_29f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a19: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a30: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a34: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a41: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a47: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a54: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a56: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a77: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a88: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ac0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ad0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ad6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ad8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2add: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ae7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aec: Unknown result type (might be due to invalid IL or missing references)
		//IL_2af1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2af5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b02: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b08: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b15: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b17: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b50: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b52: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b57: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b61: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b66: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f04: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d97: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1da1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d89: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b88: Unknown result type (might be due to invalid IL or missing references)
		//IL_193e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1730: Unknown result type (might be due to invalid IL or missing references)
		//IL_1732: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_082b: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07de: Unknown result type (might be due to invalid IL or missing references)
		//IL_034d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0352: Unknown result type (might be due to invalid IL or missing references)
		//IL_0357: Unknown result type (might be due to invalid IL or missing references)
		//IL_033f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b80: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b82: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b89: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b90: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ba3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c09: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c12: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c19: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c26: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c39: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c42: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c47: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c51: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c56: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c82: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c87: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c92: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c94: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2caf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ccb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cda: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ce5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ce7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d04: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d10: Unknown result type (might be due to invalid IL or missing references)
		//IL_25db: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f52: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f54: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f59: Unknown result type (might be due to invalid IL or missing references)
		//IL_1da9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1db0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1db7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba6: Unknown result type (might be due to invalid IL or missing references)
		//IL_195a: Unknown result type (might be due to invalid IL or missing references)
		//IL_195c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0840: Unknown result type (might be due to invalid IL or missing references)
		//IL_0359: Unknown result type (might be due to invalid IL or missing references)
		//IL_035d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0362: Unknown result type (might be due to invalid IL or missing references)
		//IL_0364: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f81: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f92: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f97: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e55: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e72: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e81: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e86: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e98: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ecd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ee9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eed: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ef2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ef7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f22: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f27: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d01: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d03: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d05: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d14: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d44: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d60: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d62: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d64: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d69: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d73: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d87: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d91: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d96: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0855: Unknown result type (might be due to invalid IL or missing references)
		//IL_0378: Unknown result type (might be due to invalid IL or missing references)
		//IL_086a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0394: Unknown result type (might be due to invalid IL or missing references)
		//IL_0396: Unknown result type (might be due to invalid IL or missing references)
		//IL_3206: Unknown result type (might be due to invalid IL or missing references)
		//IL_370b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3711: Unknown result type (might be due to invalid IL or missing references)
		//IL_371b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3720: Unknown result type (might be due to invalid IL or missing references)
		//IL_373e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3757: Unknown result type (might be due to invalid IL or missing references)
		//IL_3761: Unknown result type (might be due to invalid IL or missing references)
		//IL_3766: Unknown result type (might be due to invalid IL or missing references)
		//IL_376d: Unknown result type (might be due to invalid IL or missing references)
		//IL_377a: Unknown result type (might be due to invalid IL or missing references)
		//IL_377f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3784: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_26fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2700: Unknown result type (might be due to invalid IL or missing references)
		//IL_2705: Unknown result type (might be due to invalid IL or missing references)
		//IL_2707: Unknown result type (might be due to invalid IL or missing references)
		//IL_270c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1527: Unknown result type (might be due to invalid IL or missing references)
		//IL_152c: Unknown result type (might be due to invalid IL or missing references)
		//IL_152f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1534: Unknown result type (might be due to invalid IL or missing references)
		//IL_1539: Unknown result type (might be due to invalid IL or missing references)
		//IL_153b: Unknown result type (might be due to invalid IL or missing references)
		//IL_099d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0886: Unknown result type (might be due to invalid IL or missing references)
		//IL_0888: Unknown result type (might be due to invalid IL or missing references)
		//IL_088d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0896: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03de: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0420: Unknown result type (might be due to invalid IL or missing references)
		//IL_0426: Unknown result type (might be due to invalid IL or missing references)
		//IL_0428: Unknown result type (might be due to invalid IL or missing references)
		//IL_042d: Unknown result type (might be due to invalid IL or missing references)
		//IL_042f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e78: Unknown result type (might be due to invalid IL or missing references)
		//IL_2741: Unknown result type (might be due to invalid IL or missing references)
		//IL_2743: Unknown result type (might be due to invalid IL or missing references)
		//IL_2748: Unknown result type (might be due to invalid IL or missing references)
		//IL_274a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2734: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_21f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2201: Unknown result type (might be due to invalid IL or missing references)
		//IL_2206: Unknown result type (might be due to invalid IL or missing references)
		//IL_220b: Unknown result type (might be due to invalid IL or missing references)
		//IL_220d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2212: Unknown result type (might be due to invalid IL or missing references)
		//IL_1557: Unknown result type (might be due to invalid IL or missing references)
		//IL_155c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1561: Unknown result type (might be due to invalid IL or missing references)
		//IL_1549: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_044b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0450: Unknown result type (might be due to invalid IL or missing references)
		//IL_0455: Unknown result type (might be due to invalid IL or missing references)
		//IL_043d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2766: Unknown result type (might be due to invalid IL or missing references)
		//IL_276b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2770: Unknown result type (might be due to invalid IL or missing references)
		//IL_2758: Unknown result type (might be due to invalid IL or missing references)
		//IL_2247: Unknown result type (might be due to invalid IL or missing references)
		//IL_2249: Unknown result type (might be due to invalid IL or missing references)
		//IL_224e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2250: Unknown result type (might be due to invalid IL or missing references)
		//IL_223a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fe7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ff4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ff9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ffb: Unknown result type (might be due to invalid IL or missing references)
		//IL_09cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_09cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0914: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_08cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_045d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0464: Unknown result type (might be due to invalid IL or missing references)
		//IL_046b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0472: Unknown result type (might be due to invalid IL or missing references)
		//IL_37c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_37c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_37cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_37d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_37dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_37e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_37e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_37ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_3809: Unknown result type (might be due to invalid IL or missing references)
		//IL_382d: Unknown result type (might be due to invalid IL or missing references)
		//IL_383a: Unknown result type (might be due to invalid IL or missing references)
		//IL_383f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3844: Unknown result type (might be due to invalid IL or missing references)
		//IL_333c: Unknown result type (might be due to invalid IL or missing references)
		//IL_333d: Unknown result type (might be due to invalid IL or missing references)
		//IL_333f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3350: Unknown result type (might be due to invalid IL or missing references)
		//IL_3355: Unknown result type (might be due to invalid IL or missing references)
		//IL_335a: Unknown result type (might be due to invalid IL or missing references)
		//IL_335c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3361: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f52: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f53: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f55: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f66: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f70: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f72: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f77: Unknown result type (might be due to invalid IL or missing references)
		//IL_2772: Unknown result type (might be due to invalid IL or missing references)
		//IL_2776: Unknown result type (might be due to invalid IL or missing references)
		//IL_277b: Unknown result type (might be due to invalid IL or missing references)
		//IL_277d: Unknown result type (might be due to invalid IL or missing references)
		//IL_27a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_27af: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_226c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2271: Unknown result type (might be due to invalid IL or missing references)
		//IL_2276: Unknown result type (might be due to invalid IL or missing references)
		//IL_225e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1017: Unknown result type (might be due to invalid IL or missing references)
		//IL_101c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1021: Unknown result type (might be due to invalid IL or missing references)
		//IL_1009: Unknown result type (might be due to invalid IL or missing references)
		//IL_0953: Unknown result type (might be due to invalid IL or missing references)
		//IL_092b: Unknown result type (might be due to invalid IL or missing references)
		//IL_090a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3396: Unknown result type (might be due to invalid IL or missing references)
		//IL_3398: Unknown result type (might be due to invalid IL or missing references)
		//IL_339d: Unknown result type (might be due to invalid IL or missing references)
		//IL_339f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3389: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fac: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fae: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_27cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2278: Unknown result type (might be due to invalid IL or missing references)
		//IL_227c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2281: Unknown result type (might be due to invalid IL or missing references)
		//IL_2283: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_22b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_22b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1576: Unknown result type (might be due to invalid IL or missing references)
		//IL_157d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1584: Unknown result type (might be due to invalid IL or missing references)
		//IL_158b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1039: Unknown result type (might be due to invalid IL or missing references)
		//IL_1040: Unknown result type (might be due to invalid IL or missing references)
		//IL_1047: Unknown result type (might be due to invalid IL or missing references)
		//IL_104e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0992: Unknown result type (might be due to invalid IL or missing references)
		//IL_0996: Unknown result type (might be due to invalid IL or missing references)
		//IL_099b: Unknown result type (might be due to invalid IL or missing references)
		//IL_096a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0949: Unknown result type (might be due to invalid IL or missing references)
		//IL_33bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_33c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_33c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_33ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_22c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0988: Unknown result type (might be due to invalid IL or missing references)
		//IL_33c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_33cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_33d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_33d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fe1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fe6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fe8: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_33e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ffc: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_27fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2804: Unknown result type (might be due to invalid IL or missing references)
		//IL_2809: Unknown result type (might be due to invalid IL or missing references)
		//IL_280b: Unknown result type (might be due to invalid IL or missing references)
		//IL_282d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2833: Unknown result type (might be due to invalid IL or missing references)
		//IL_2835: Unknown result type (might be due to invalid IL or missing references)
		//IL_283a: Unknown result type (might be due to invalid IL or missing references)
		//IL_283c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1146: Unknown result type (might be due to invalid IL or missing references)
		//IL_1147: Unknown result type (might be due to invalid IL or missing references)
		//IL_1158: Unknown result type (might be due to invalid IL or missing references)
		//IL_115d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1160: Unknown result type (might be due to invalid IL or missing references)
		//IL_1165: Unknown result type (might be due to invalid IL or missing references)
		//IL_116c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1171: Unknown result type (might be due to invalid IL or missing references)
		//IL_1173: Unknown result type (might be due to invalid IL or missing references)
		//IL_3402: Unknown result type (might be due to invalid IL or missing references)
		//IL_3409: Unknown result type (might be due to invalid IL or missing references)
		//IL_340e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3018: Unknown result type (might be due to invalid IL or missing references)
		//IL_301f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3024: Unknown result type (might be due to invalid IL or missing references)
		//IL_2858: Unknown result type (might be due to invalid IL or missing references)
		//IL_285d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2862: Unknown result type (might be due to invalid IL or missing references)
		//IL_284a: Unknown result type (might be due to invalid IL or missing references)
		//IL_22f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_22f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2300: Unknown result type (might be due to invalid IL or missing references)
		//IL_2305: Unknown result type (might be due to invalid IL or missing references)
		//IL_2307: Unknown result type (might be due to invalid IL or missing references)
		//IL_2329: Unknown result type (might be due to invalid IL or missing references)
		//IL_232f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2331: Unknown result type (might be due to invalid IL or missing references)
		//IL_2336: Unknown result type (might be due to invalid IL or missing references)
		//IL_2338: Unknown result type (might be due to invalid IL or missing references)
		//IL_118f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1194: Unknown result type (might be due to invalid IL or missing references)
		//IL_1199: Unknown result type (might be due to invalid IL or missing references)
		//IL_1181: Unknown result type (might be due to invalid IL or missing references)
		//IL_2866: Unknown result type (might be due to invalid IL or missing references)
		//IL_286d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2874: Unknown result type (might be due to invalid IL or missing references)
		//IL_287b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2354: Unknown result type (might be due to invalid IL or missing references)
		//IL_2359: Unknown result type (might be due to invalid IL or missing references)
		//IL_235e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2346: Unknown result type (might be due to invalid IL or missing references)
		//IL_341c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3421: Unknown result type (might be due to invalid IL or missing references)
		//IL_3428: Unknown result type (might be due to invalid IL or missing references)
		//IL_342d: Unknown result type (might be due to invalid IL or missing references)
		//IL_342f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3440: Unknown result type (might be due to invalid IL or missing references)
		//IL_3445: Unknown result type (might be due to invalid IL or missing references)
		//IL_344a: Unknown result type (might be due to invalid IL or missing references)
		//IL_344c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3032: Unknown result type (might be due to invalid IL or missing references)
		//IL_3037: Unknown result type (might be due to invalid IL or missing references)
		//IL_303e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3059: Unknown result type (might be due to invalid IL or missing references)
		//IL_305e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3060: Unknown result type (might be due to invalid IL or missing references)
		//IL_2362: Unknown result type (might be due to invalid IL or missing references)
		//IL_2369: Unknown result type (might be due to invalid IL or missing references)
		//IL_2370: Unknown result type (might be due to invalid IL or missing references)
		//IL_2377: Unknown result type (might be due to invalid IL or missing references)
		//IL_3468: Unknown result type (might be due to invalid IL or missing references)
		//IL_346d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3472: Unknown result type (might be due to invalid IL or missing references)
		//IL_345a: Unknown result type (might be due to invalid IL or missing references)
		//IL_307c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3081: Unknown result type (might be due to invalid IL or missing references)
		//IL_3086: Unknown result type (might be due to invalid IL or missing references)
		//IL_306e: Unknown result type (might be due to invalid IL or missing references)
		//IL_295f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2966: Unknown result type (might be due to invalid IL or missing references)
		//IL_296d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2974: Unknown result type (might be due to invalid IL or missing references)
		//IL_23cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_23d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_23d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_23dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_23de: Unknown result type (might be due to invalid IL or missing references)
		//IL_2400: Unknown result type (might be due to invalid IL or missing references)
		//IL_2406: Unknown result type (might be due to invalid IL or missing references)
		//IL_2408: Unknown result type (might be due to invalid IL or missing references)
		//IL_240d: Unknown result type (might be due to invalid IL or missing references)
		//IL_240f: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11da: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3474: Unknown result type (might be due to invalid IL or missing references)
		//IL_3476: Unknown result type (might be due to invalid IL or missing references)
		//IL_347a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3481: Unknown result type (might be due to invalid IL or missing references)
		//IL_3488: Unknown result type (might be due to invalid IL or missing references)
		//IL_348f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3088: Unknown result type (might be due to invalid IL or missing references)
		//IL_3099: Unknown result type (might be due to invalid IL or missing references)
		//IL_309e: Unknown result type (might be due to invalid IL or missing references)
		//IL_30a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_30a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_30ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_30b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_30bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_28b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_28ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_28d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_28d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_28db: Unknown result type (might be due to invalid IL or missing references)
		//IL_28dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_242b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2430: Unknown result type (might be due to invalid IL or missing references)
		//IL_2435: Unknown result type (might be due to invalid IL or missing references)
		//IL_241d: Unknown result type (might be due to invalid IL or missing references)
		//IL_28f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_28fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_2903: Unknown result type (might be due to invalid IL or missing references)
		//IL_28eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2439: Unknown result type (might be due to invalid IL or missing references)
		//IL_2440: Unknown result type (might be due to invalid IL or missing references)
		//IL_2447: Unknown result type (might be due to invalid IL or missing references)
		//IL_244e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2907: Unknown result type (might be due to invalid IL or missing references)
		//IL_290e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2915: Unknown result type (might be due to invalid IL or missing references)
		//IL_291c: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[owner];
		float num = (float)Math.PI / 2f;
		Vector2 vector = player.RotatedRelativePoint(player.MountedCenter);
		int num12 = 2;
		float num23 = 0f;
		if (type == 439)
		{
			ai[0] += 1f;
			int num34 = 0;
			if (ai[0] >= 40f)
			{
				num34++;
			}
			if (ai[0] >= 80f)
			{
				num34++;
			}
			if (ai[0] >= 120f)
			{
				num34++;
			}
			int num45 = 24;
			int num56 = 6;
			ai[1] += 1f;
			bool flag = false;
			if (ai[1] >= (float)(num45 - num56 * num34))
			{
				ai[1] = 0f;
				flag = true;
			}
			frameCounter += 1 + num34;
			if (frameCounter >= 4)
			{
				frameCounter = 0;
				frame++;
				if (frame >= 6)
				{
					frame = 0;
				}
			}
			if (soundDelay <= 0)
			{
				soundDelay = num45 - num56 * num34;
				if (ai[0] != 1f)
				{
					SoundEngine.PlaySound(in SoundID.Item91, position);
				}
			}
			if (ai[1] == 1f && ai[0] != 1f)
			{
				Vector2 spinningpoint = Vector2.UnitX * 24f;
				spinningpoint = spinningpoint.RotatedBy(rotation - (float)Math.PI / 2f);
				Vector2 vector12 = base.Center + spinningpoint;
				for (int i = 0; i < 2; i++)
				{
					int num66 = Dust.NewDust(vector12 - Vector2.One * 8f, 16, 16, 135, velocity.X / 2f, velocity.Y / 2f, 100);
					Dust obj = Main.dust[num66];
					obj.velocity *= 0.66f;
					Main.dust[num66].noGravity = true;
					Main.dust[num66].scale = 1.4f;
				}
			}
			if (flag && Main.myPlayer == owner)
			{
				if (player.channel && player.CheckMana(player.inventory[player.selectedItem], -1, pay: true) && !player.noItems && !player.CCed)
				{
					float num77 = player.inventory[player.selectedItem].shootSpeed * scale;
					Vector2 vector23 = vector;
					Vector2 value = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector23;
					if (player.gravDir == -1f)
					{
						value.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector23.Y;
					}
					Vector2 vector34 = Vector2.Normalize(value);
					if (float.IsNaN(vector34.X) || float.IsNaN(vector34.Y))
					{
						vector34 = -Vector2.UnitY;
					}
					vector34 *= num77;
					if (vector34.X != velocity.X || vector34.Y != velocity.Y)
					{
						netUpdate = true;
					}
					velocity = vector34;
					int num79 = 440;
					float num2 = 14f;
					int num3 = 7;
					for (int j = 0; j < 2; j++)
					{
						vector23 = base.Center + new Vector2((float)Main.rand.Next(-num3, num3 + 1), (float)Main.rand.Next(-num3, num3 + 1));
						Vector2 spinningpoint3 = Vector2.Normalize(velocity) * num2;
						spinningpoint3 = spinningpoint3.RotatedBy(Main.rand.NextDouble() * 0.19634954631328583 - 0.09817477315664291);
						if (float.IsNaN(spinningpoint3.X) || float.IsNaN(spinningpoint3.Y))
						{
							spinningpoint3 = -Vector2.UnitY;
						}
						NewProjectile(GetProjectileSource_FromThis(), vector23.X, vector23.Y, spinningpoint3.X, spinningpoint3.Y, num79, damage, knockBack, owner);
					}
				}
				else
				{
					Kill();
				}
			}
		}
		if (type == 445)
		{
			if (soundDelay <= 0)
			{
				SoundEngine.PlaySound(in SoundID.Item132, position);
				soundDelay = 23;
			}
			localAI[0] += 1f;
			if (localAI[0] >= 60f)
			{
				localAI[0] = 0f;
			}
			if (Vector2.Distance(vector, base.Center) >= 5f)
			{
				float num4 = localAI[0] / 60f;
				if (num4 > 0.5f)
				{
					num4 = 1f - num4;
				}
				Vector3 val = new Vector3(0f, 1f, 0.7f);
				Vector3 value5 = default(Vector3);
				((Vector3)(ref value5))._002Ector(0f, 0.7f, 1f);
				Vector3 vector35 = Vector3.Lerp(val, value5, 1f - num4 * 2f) * 0.5f;
				if (Vector2.Distance(vector, base.Center) >= 30f)
				{
					Vector2 vector36 = base.Center - vector;
					((Vector2)(ref vector36)).Normalize();
					vector36 *= Vector2.Distance(vector, base.Center) - 30f;
					DelegateMethods.v3_1 = vector35 * 0.8f;
					Utils.PlotTileLine(base.Center - vector36, base.Center, 8f, DelegateMethods.CastLightOpen);
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, vector35.X, vector35.Y, vector35.Z);
			}
			if (Main.myPlayer == owner)
			{
				if (localAI[1] > 0f)
				{
					localAI[1] -= 1f;
				}
				if (!player.channel || player.noItems || player.CCed)
				{
					Kill();
				}
				else if (localAI[1] == 0f)
				{
					Vector2 vector37 = vector;
					Vector2 value6 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector37;
					if (player.gravDir == -1f)
					{
						value6.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector37.Y;
					}
					if (Main.tile[Player.tileTargetX, Player.tileTargetY].active())
					{
						value6 = new Vector2((float)Player.tileTargetX, (float)Player.tileTargetY) * 16f + Vector2.One * 8f - vector37;
						localAI[1] = 2f;
					}
					value6 = Vector2.Lerp(value6, velocity, 0.7f);
					if (float.IsNaN(value6.X) || float.IsNaN(value6.Y))
					{
						value6 = -Vector2.UnitY;
					}
					float num5 = 30f;
					if (((Vector2)(ref value6)).Length() < num5)
					{
						value6 = Vector2.Normalize(value6) * num5;
					}
					int tileBoost = player.inventory[player.selectedItem].tileBoost;
					int num6 = -Player.tileRangeX - tileBoost + 1;
					int num7 = Player.tileRangeX + tileBoost - 1;
					int num8 = -Player.tileRangeY - tileBoost;
					int num9 = Player.tileRangeY + tileBoost - 1;
					int num10 = 12;
					bool flag7 = false;
					if (value6.X < (float)(num6 * 16 - num10))
					{
						flag7 = true;
					}
					if (value6.Y < (float)(num8 * 16 - num10))
					{
						flag7 = true;
					}
					if (value6.X > (float)(num7 * 16 + num10))
					{
						flag7 = true;
					}
					if (value6.Y > (float)(num9 * 16 + num10))
					{
						flag7 = true;
					}
					if (flag7)
					{
						Vector2 vector38 = Vector2.Normalize(value6);
						float num11 = -1f;
						if (vector38.X < 0f && ((float)(num6 * 16 - num10) / vector38.X < num11 || num11 == -1f))
						{
							num11 = (float)(num6 * 16 - num10) / vector38.X;
						}
						if (vector38.X > 0f && ((float)(num7 * 16 + num10) / vector38.X < num11 || num11 == -1f))
						{
							num11 = (float)(num7 * 16 + num10) / vector38.X;
						}
						if (vector38.Y < 0f && ((float)(num8 * 16 - num10) / vector38.Y < num11 || num11 == -1f))
						{
							num11 = (float)(num8 * 16 - num10) / vector38.Y;
						}
						if (vector38.Y > 0f && ((float)(num9 * 16 + num10) / vector38.Y < num11 || num11 == -1f))
						{
							num11 = (float)(num9 * 16 + num10) / vector38.Y;
						}
						value6 = vector38 * num11;
					}
					if (value6.X != velocity.X || value6.Y != velocity.Y)
					{
						netUpdate = true;
					}
					velocity = value6;
				}
			}
		}
		if (type == 460)
		{
			ai[0] += 1f;
			int num13 = 0;
			if (ai[0] >= 80f)
			{
				num13++;
			}
			if (ai[0] >= 180f)
			{
				num13++;
			}
			bool flag8 = false;
			_ = ai[0];
			if (ai[0] == 80f || ai[0] == 180f || (ai[0] > 180f && ai[0] % 20f == 0f))
			{
				flag8 = true;
			}
			bool flag9 = ai[0] >= 180f;
			int num14 = 5;
			if (!flag9)
			{
				ai[1] += 1f;
			}
			bool flag10 = false;
			if (ai[0] == 1f)
			{
				flag10 = true;
			}
			if (flag9 && ai[0] % 20f == 0f)
			{
				flag10 = true;
			}
			if ((!flag9 && ai[1] >= (float)num14) || (flag9 && ai[0] % 5f == 0f))
			{
				if (!flag9)
				{
					ai[1] = 0f;
				}
				flag10 = true;
				float num15 = player.inventory[player.selectedItem].shootSpeed * scale;
				Vector2 vector39 = vector;
				Vector2 value7 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector39;
				if (player.gravDir == -1f)
				{
					value7.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector39.Y;
				}
				Vector2 vector2 = Vector2.Normalize(value7);
				if (float.IsNaN(vector2.X) || float.IsNaN(vector2.Y))
				{
					vector2 = -Vector2.UnitY;
				}
				vector2 *= num15;
				if (vector2.X != velocity.X || vector2.Y != velocity.Y)
				{
					netUpdate = true;
				}
				velocity = vector2;
			}
			if (soundDelay <= 0 && !flag9)
			{
				soundDelay = num14 - num13;
				soundDelay *= 2;
				if (ai[0] != 1f)
				{
					SoundEngine.PlaySound(in SoundID.Item15, position);
				}
			}
			if (ai[0] > 10f && !flag9)
			{
				Vector2 spinningpoint4 = Vector2.UnitX * 18f;
				spinningpoint4 = spinningpoint4.RotatedBy(rotation - (float)Math.PI / 2f);
				Vector2 vector3 = base.Center + spinningpoint4;
				for (int k = 0; k < num13 + 1; k++)
				{
					int num16 = 226;
					float num17 = 0.4f;
					if (k % 2 == 1)
					{
						num16 = 226;
						num17 = 0.65f;
					}
					Vector2 vector4 = vector3 + ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (12f - (float)(num13 * 2));
					int num18 = Dust.NewDust(vector4 - Vector2.One * 8f, 16, 16, num16, velocity.X / 2f, velocity.Y / 2f);
					Main.dust[num18].velocity = Vector2.Normalize(vector3 - vector4) * 1.5f * (10f - (float)num13 * 2f) / 10f;
					Main.dust[num18].noGravity = true;
					Main.dust[num18].scale = num17;
					Main.dust[num18].customData = player;
				}
			}
			if (flag9)
			{
				Vector2 spinningpoint5 = Vector2.UnitX * 14f;
				spinningpoint5 = spinningpoint5.RotatedBy(rotation - (float)Math.PI / 2f);
				Vector2 vector5 = base.Center + spinningpoint5;
				for (int l = 0; l < 2; l++)
				{
					int num19 = 226;
					float num20 = 0.35f;
					if (l % 2 == 1)
					{
						num19 = 226;
						num20 = 0.45f;
					}
					float num21 = Main.rand.NextFloatDirection();
					Vector2 vector6 = vector5 + (rotation + num21 * ((float)Math.PI / 4f) * 0.8f - (float)Math.PI / 2f).ToRotationVector2() * 6f;
					int num22 = 24;
					int num24 = Dust.NewDust(vector6 - Vector2.One * (float)(num22 / 2), num22, num22, num19, velocity.X / 2f, velocity.Y / 2f);
					Main.dust[num24].velocity = (vector6 - vector5).SafeNormalize(Vector2.Zero) * MathHelper.Lerp(1.5f, 9f, Utils.GetLerpValue(1f, 0f, Math.Abs(num21), clamped: true));
					Main.dust[num24].noGravity = true;
					Main.dust[num24].scale = num20;
					Main.dust[num24].customData = player;
					Main.dust[num24].fadeIn = 0.5f;
				}
			}
			if (flag10 && Main.myPlayer == owner)
			{
				bool flag11 = false;
				flag11 = !flag8 || player.CheckMana(player.inventory[player.selectedItem], -1, pay: true);
				if (player.channel && flag11 && !player.noItems && !player.CCed)
				{
					if (ai[0] == 180f)
					{
						Vector2 center = base.Center;
						Vector2 vector7 = Vector2.Normalize(velocity);
						if (float.IsNaN(vector7.X) || float.IsNaN(vector7.Y))
						{
							vector7 = -Vector2.UnitY;
						}
						int num25 = (int)((float)damage * 1.5f);
						int num26 = NewProjectile(GetProjectileSource_FromThis(), center.X, center.Y, vector7.X, vector7.Y, 461, num25, knockBack, owner, 0f, whoAmI);
						ai[1] = num26;
						netUpdate = true;
					}
					else if (flag9)
					{
						Projectile projectile = Main.projectile[(int)ai[1]];
						if (!projectile.active || projectile.type != 461)
						{
							Kill();
							return;
						}
					}
					else
					{
						bool flag12 = false;
						if (ai[0] == 1f)
						{
							flag12 = true;
						}
						if (ai[0] <= 50f && ai[0] % 10f == 0f)
						{
							flag12 = true;
						}
						if (ai[0] >= 80f && ai[0] < 180f && ai[0] % 30f == 0f)
						{
							flag12 = true;
						}
						if (flag12)
						{
							Vector2 vector8 = vector;
							int num27 = 459;
							float num28 = 10f;
							vector8 = base.Center;
							Vector2 vector9 = Vector2.Normalize(velocity) * num28;
							if (float.IsNaN(vector9.X) || float.IsNaN(vector9.Y))
							{
								vector9 = -Vector2.UnitY;
							}
							float num29 = 0.7f + (float)num13 * 0.3f;
							int num30 = ((num29 < 1f) ? damage : ((int)((float)damage * 2.5f)));
							NewProjectile(GetProjectileSource_FromThis(), vector8.X, vector8.Y, vector9.X, vector9.Y, num27, num30, knockBack, owner, 0f, num29);
						}
					}
				}
				else
				{
					Kill();
				}
			}
		}
		if (type == 633)
		{
			float num31 = 30f;
			if (ai[0] > 90f)
			{
				num31 = 15f;
			}
			if (ai[0] > 120f)
			{
				num31 = 5f;
			}
			damage = (int)player.GetTotalDamage(DamageClass.Magic).ApplyTo(player.inventory[player.selectedItem].damage);
			ai[0] += 1f;
			ai[1] += 1f;
			bool flag13 = false;
			if (ai[0] % num31 == 0f)
			{
				flag13 = true;
			}
			int num32 = 10;
			bool flag14 = false;
			if (ai[0] % num31 == 0f)
			{
				flag14 = true;
			}
			if (ai[1] >= 1f)
			{
				ai[1] = 0f;
				flag14 = true;
				if (Main.myPlayer == owner)
				{
					float num33 = player.inventory[player.selectedItem].shootSpeed * scale;
					Vector2 vector10 = vector;
					Vector2 value8 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector10;
					if (player.gravDir == -1f)
					{
						value8.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector10.Y;
					}
					Vector2 value9 = Vector2.Normalize(value8);
					if (float.IsNaN(value9.X) || float.IsNaN(value9.Y))
					{
						value9 = -Vector2.UnitY;
					}
					value9 = Vector2.Normalize(Vector2.Lerp(value9, Vector2.Normalize(velocity), 0.92f));
					value9 *= num33;
					if (value9.X != velocity.X || value9.Y != velocity.Y)
					{
						netUpdate = true;
					}
					velocity = value9;
				}
			}
			frameCounter++;
			int num35 = ((!(ai[0] < 120f)) ? 1 : 4);
			if (frameCounter >= num35)
			{
				frameCounter = 0;
				if (++frame >= 5)
				{
					frame = 0;
				}
			}
			if (soundDelay <= 0)
			{
				soundDelay = num32;
				soundDelay *= 2;
				if (ai[0] != 1f)
				{
					SoundEngine.PlaySound(in SoundID.Item15, position);
				}
			}
			if (flag14 && Main.myPlayer == owner)
			{
				bool flag2 = false;
				flag2 = !flag13 || player.CheckMana(player.inventory[player.selectedItem], -1, pay: true);
				if (player.channel && flag2 && !player.noItems && !player.CCed)
				{
					if (ai[0] == 1f)
					{
						Vector2 center2 = base.Center;
						Vector2 vector11 = Vector2.Normalize(velocity);
						if (float.IsNaN(vector11.X) || float.IsNaN(vector11.Y))
						{
							vector11 = -Vector2.UnitY;
						}
						int num36 = damage;
						for (int m = 0; m < 6; m++)
						{
							NewProjectile(GetProjectileSource_FromThis(), center2.X, center2.Y, vector11.X, vector11.Y, 632, num36, knockBack, owner, m, whoAmI);
						}
						netUpdate = true;
					}
				}
				else
				{
					Kill();
				}
			}
		}
		if (type == 595)
		{
			num = 0f;
			if (spriteDirection == -1)
			{
				num = (float)Math.PI;
			}
			if (++frame >= Main.projFrames[type])
			{
				frame = 0;
			}
			soundDelay--;
			if (soundDelay <= 0)
			{
				SoundEngine.PlaySound(in SoundID.Item1, base.Center);
				soundDelay = 12;
			}
			if (Main.myPlayer == owner)
			{
				if (player.channel && !player.noItems && !player.CCed)
				{
					float num37 = 1f;
					if (player.inventory[player.selectedItem].shoot == type)
					{
						num37 = player.inventory[player.selectedItem].shootSpeed * scale;
					}
					Vector2 vec = Main.MouseWorld - vector;
					((Vector2)(ref vec)).Normalize();
					if (vec.HasNaNs())
					{
						vec = Vector2.UnitX * (float)player.direction;
					}
					vec *= num37;
					if (vec.X != velocity.X || vec.Y != velocity.Y)
					{
						netUpdate = true;
					}
					velocity = vec;
				}
				else
				{
					Kill();
				}
			}
			Vector2 vector13 = base.Center + velocity * 3f;
			Lighting.AddLight(vector13, 0.8f, 0.8f, 0.8f);
			if (Main.rand.Next(3) == 0)
			{
				int num38 = Dust.NewDust(vector13 - base.Size / 2f, width, height, 63, velocity.X, velocity.Y, 100, default(Color), 2f);
				Main.dust[num38].noGravity = true;
				Dust obj2 = Main.dust[num38];
				obj2.position -= velocity;
			}
		}
		if (type == 735)
		{
			num = 0f;
			if (spriteDirection == -1)
			{
				num = (float)Math.PI;
			}
			if (++frame >= Main.projFrames[type])
			{
				frame = 0;
			}
			soundDelay--;
			if (soundDelay <= 0)
			{
				SoundEngine.PlaySound(in SoundID.Item1, base.Center);
				soundDelay = 12;
			}
			if (Main.myPlayer == owner)
			{
				if (player.channel && !player.noItems && !player.CCed)
				{
					float num39 = 1f;
					if (player.inventory[player.selectedItem].shoot == type)
					{
						num39 = player.inventory[player.selectedItem].shootSpeed * scale;
					}
					Vector2 vec2 = Main.MouseWorld - vector;
					((Vector2)(ref vec2)).Normalize();
					if (vec2.HasNaNs())
					{
						vec2 = Vector2.UnitX * (float)player.direction;
					}
					vec2 *= num39;
					if (vec2.X != velocity.X || vec2.Y != velocity.Y)
					{
						netUpdate = true;
					}
					velocity = vec2;
				}
				else
				{
					Kill();
				}
			}
			Vector2 vector14 = base.Center + velocity * 3f;
			Lighting.AddLight(vector14, 0.8f, 0.8f, 0.8f);
			if (Main.rand.Next(3) == 0)
			{
				int num40 = Dust.NewDust(vector14 - base.Size / 2f, width, height, 302, velocity.X, velocity.Y, 100, default(Color), 2f);
				Main.dust[num40].noGravity = true;
				Dust obj3 = Main.dust[num40];
				obj3.position -= velocity;
			}
		}
		if (type == 927)
		{
			num = 0f;
			scale = ai[1];
			ai[0] += 1f;
			if (ai[0] >= 8f)
			{
				ai[0] = 0f;
			}
			num12 = 9;
			num23 = Main.rand.NextFloatDirection() * ((float)Math.PI * 2f) * 0.05f;
			soundDelay--;
			if (soundDelay <= 0)
			{
				SoundEngine.PlaySound(in SoundID.Item1, base.Center);
				soundDelay = 6;
			}
			if (Main.myPlayer == owner)
			{
				if (player.channel && !player.noItems && !player.CCed)
				{
					float num41 = 1f;
					if (player.inventory[player.selectedItem].shoot == type)
					{
						num41 = player.inventory[player.selectedItem].shootSpeed;
					}
					Vector2 vec3 = Main.MouseWorld - vector;
					((Vector2)(ref vec3)).Normalize();
					if (vec3.HasNaNs())
					{
						vec3 = Vector2.UnitX * (float)player.direction;
					}
					vec3 *= num41;
					if (vec3.X != velocity.X || vec3.Y != velocity.Y)
					{
						netUpdate = true;
					}
					velocity = vec3;
				}
				else
				{
					Kill();
				}
			}
			DelegateMethods.v3_1 = new Vector3(0.5f, 0.5f, 0.5f);
			Utils.PlotTileLine(base.Center - velocity, base.Center + velocity.SafeNormalize(Vector2.Zero) * 80f, 16f, DelegateMethods.CastLightOpen);
		}
		if (type == 600)
		{
			_ = ai[0];
			ai[0] += 1f;
			if (Main.myPlayer == owner && ai[0] == 1f)
			{
				float num42 = player.inventory[player.selectedItem].shootSpeed * scale;
				Vector2 vector15 = vector;
				Vector2 value10 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector15;
				if (player.gravDir == -1f)
				{
					value10.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector15.Y;
				}
				Vector2 vector16 = Vector2.Normalize(value10);
				if (float.IsNaN(vector16.X) || float.IsNaN(vector16.Y))
				{
					vector16 = -Vector2.UnitY;
				}
				vector16 *= num42;
				if (vector16.X != velocity.X || vector16.Y != velocity.Y)
				{
					netUpdate = true;
				}
				velocity = vector16;
				int num43 = 601;
				float num44 = 3f;
				vector15 = base.Center;
				Vector2 vector17 = Vector2.Normalize(velocity) * num44;
				if (float.IsNaN(vector17.X) || float.IsNaN(vector17.Y))
				{
					vector17 = -Vector2.UnitY;
				}
				NewProjectile(GetProjectileSource_FromThis(), vector15.X, vector15.Y, vector17.X, vector17.Y, num43, damage, knockBack, owner, ai[1]);
			}
			if (ai[0] >= 30f)
			{
				Kill();
			}
		}
		if (type == 611)
		{
			if (Main.netMode != 2 && localAI[0] == 0f)
			{
				SoundEngine.PlaySound(in SoundID.Item116, base.Center);
			}
			if (localAI[1] > 0f)
			{
				localAI[1] -= 1f;
			}
			alpha -= 42;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = velocity.ToRotation();
			}
			float num46 = ((localAI[0].ToRotationVector2().X >= 0f) ? 1 : (-1));
			if (ai[1] <= 0f)
			{
				num46 *= -1f;
			}
			Vector2 spinningpoint6 = (num46 * (ai[0] / 30f * ((float)Math.PI * 2f) - (float)Math.PI / 2f)).ToRotationVector2();
			spinningpoint6.Y *= (float)Math.Sin(ai[1]);
			if (ai[1] <= 0f)
			{
				spinningpoint6.Y *= -1f;
			}
			spinningpoint6 = spinningpoint6.RotatedBy(localAI[0]);
			ai[0] += 1f;
			if (ai[0] < 30f)
			{
				velocity += 48f * spinningpoint6;
			}
			else
			{
				Kill();
			}
		}
		if (type == 615)
		{
			num = 0f;
			if (spriteDirection == -1)
			{
				num = (float)Math.PI;
			}
			ai[0] += 1f;
			int num47 = 0;
			if (ai[0] >= 40f)
			{
				num47++;
			}
			if (ai[0] >= 80f)
			{
				num47++;
			}
			if (ai[0] >= 120f)
			{
				num47++;
			}
			int num48 = 5;
			int num49 = 0;
			ai[1] -= 1f;
			bool flag3 = false;
			int num50 = -1;
			if (ai[1] <= 0f)
			{
				ai[1] = num48 - num49 * num47;
				flag3 = true;
				if ((int)ai[0] / (num48 - num49 * num47) % 7 == 0)
				{
					num50 = 0;
				}
			}
			frameCounter += 1 + num47;
			if (frameCounter >= 4)
			{
				frameCounter = 0;
				frame++;
				if (frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			if (soundDelay <= 0)
			{
				soundDelay = num48 - num49 * num47;
				if (ai[0] != 1f)
				{
					SoundEngine.PlaySound(in SoundID.Item36, position);
				}
			}
			if (flag3 && Main.myPlayer == owner)
			{
				bool canShoot = player.channel && player.HasAmmo(player.inventory[player.selectedItem], canUse: true) && !player.noItems && !player.CCed;
				int projToShoot = 14;
				float speed = 14f;
				int Damage = player.GetWeaponDamage(player.inventory[player.selectedItem]);
				float KnockBack = player.inventory[player.selectedItem].knockBack;
				if (canShoot)
				{
					player.PickAmmo(player.inventory[player.selectedItem], ref projToShoot, ref speed, ref canShoot, ref Damage, ref KnockBack, out var usedAmmoItemId);
					IEntitySource projectileSource_Item_WithPotentialAmmo = player.GetProjectileSource_Item_WithPotentialAmmo(player.HeldItem, usedAmmoItemId);
					KnockBack = player.GetWeaponKnockback(player.inventory[player.selectedItem], KnockBack);
					float num51 = player.inventory[player.selectedItem].shootSpeed * scale;
					Vector2 vector18 = vector;
					Vector2 value11 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector18;
					if (player.gravDir == -1f)
					{
						value11.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector18.Y;
					}
					Vector2 spinningpoint7 = Vector2.Normalize(value11);
					if (float.IsNaN(spinningpoint7.X) || float.IsNaN(spinningpoint7.Y))
					{
						spinningpoint7 = -Vector2.UnitY;
					}
					spinningpoint7 *= num51;
					spinningpoint7 = spinningpoint7.RotatedBy(Main.rand.NextDouble() * 0.13089969754219055 - 0.06544984877109528);
					if (spinningpoint7.X != velocity.X || spinningpoint7.Y != velocity.Y)
					{
						netUpdate = true;
					}
					velocity = spinningpoint7;
					for (int n = 0; n < 1; n++)
					{
						Vector2 spinningpoint8 = Vector2.Normalize(velocity) * speed;
						spinningpoint8 = spinningpoint8.RotatedBy(Main.rand.NextDouble() * 0.19634954631328583 - 0.09817477315664291);
						if (float.IsNaN(spinningpoint8.X) || float.IsNaN(spinningpoint8.Y))
						{
							spinningpoint8 = -Vector2.UnitY;
						}
						NewProjectile(projectileSource_Item_WithPotentialAmmo, vector18.X, vector18.Y, spinningpoint8.X, spinningpoint8.Y, projToShoot, Damage, KnockBack, owner);
					}
					if (num50 == 0)
					{
						projToShoot = 616;
						speed = 8f;
						for (int num52 = 0; num52 < 1; num52++)
						{
							Vector2 spinningpoint9 = Vector2.Normalize(velocity) * speed;
							spinningpoint9 = spinningpoint9.RotatedBy(Main.rand.NextDouble() * 0.39269909262657166 - 0.19634954631328583);
							if (float.IsNaN(spinningpoint9.X) || float.IsNaN(spinningpoint9.Y))
							{
								spinningpoint9 = -Vector2.UnitY;
							}
							NewProjectile(projectileSource_Item_WithPotentialAmmo, vector18.X, vector18.Y, spinningpoint9.X, spinningpoint9.Y, projToShoot, Damage + 20, KnockBack * 1.25f, owner);
						}
					}
				}
				else
				{
					Kill();
				}
			}
		}
		if (type == 714)
		{
			num = 0f;
			if (spriteDirection == -1)
			{
				num = (float)Math.PI;
			}
			ai[0] += 1f;
			int num53 = 0;
			int num54 = 8;
			int num55 = 0;
			ai[1] -= 1f;
			bool flag4 = false;
			int num57 = -1;
			if (ai[1] <= 0f)
			{
				ai[1] = num54 - num55 * num53;
				flag4 = true;
				int num80 = (int)ai[0] / (num54 - num55 * num53);
				if (num80 % 7 == 0)
				{
					num57 = 0;
				}
				num57 = num80 % 7;
			}
			_ = rotation;
			Vector2 center3 = base.Center;
			_ = direction;
			Vector2 v = velocity;
			frameCounter += 1 + num53;
			if (frameCounter >= 4)
			{
				frameCounter = 0;
				frame++;
				if (frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			if (soundDelay <= 0 && Main.player[owner].controlUseItem)
			{
				soundDelay = num54 - num55 * num53;
				if (ai[0] != 1f)
				{
					SoundEngine.PlaySound(in SoundID.Item156, position);
				}
			}
			if (flag4 && Main.myPlayer == owner)
			{
				bool canShoot2 = player.channel && player.HasAmmo(player.inventory[player.selectedItem], canUse: true) && !player.noItems && !player.CCed;
				int projToShoot2 = 134;
				float speed2 = 8f;
				int Damage2 = player.GetWeaponDamage(player.inventory[player.selectedItem]);
				float KnockBack2 = player.inventory[player.selectedItem].knockBack;
				if (num57 == 3)
				{
					speed2 += 1f;
				}
				if (canShoot2)
				{
					player.PickAmmo(player.inventory[player.selectedItem], ref projToShoot2, ref speed2, ref canShoot2, ref Damage2, ref KnockBack2, out var usedAmmoItemId2);
					KnockBack2 = player.GetWeaponKnockback(player.inventory[player.selectedItem], KnockBack2);
					IEntitySource projectileSource_Item_WithPotentialAmmo2 = player.GetProjectileSource_Item_WithPotentialAmmo(player.HeldItem, usedAmmoItemId2);
					float num58 = player.inventory[player.selectedItem].shootSpeed * scale;
					Vector2 vector19 = vector;
					Vector2 value2 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector19;
					if (player.gravDir == -1f)
					{
						value2.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector19.Y;
					}
					Vector2 spinningpoint10 = Vector2.Normalize(value2);
					if (float.IsNaN(spinningpoint10.X) || float.IsNaN(spinningpoint10.Y))
					{
						spinningpoint10 = -Vector2.UnitY;
					}
					spinningpoint10 *= num58;
					spinningpoint10 = spinningpoint10.RotatedBy((Main.rand.NextDouble() * 0.13089969754219055 - 0.06544984877109528) * 0.5);
					if (spinningpoint10.X != velocity.X || spinningpoint10.Y != velocity.Y)
					{
						netUpdate = true;
					}
					velocity = spinningpoint10;
					for (int num59 = 0; num59 < 1; num59++)
					{
						Vector2 spinningpoint2 = Vector2.Normalize(velocity) * speed2;
						spinningpoint2 = spinningpoint2.RotatedBy(Main.rand.NextDouble() * 0.19634954631328583 - 0.09817477315664291);
						if (float.IsNaN(spinningpoint2.X) || float.IsNaN(spinningpoint2.Y))
						{
							spinningpoint2 = -Vector2.UnitY;
						}
						NewProjectile(projectileSource_Item_WithPotentialAmmo2, vector19.X, vector19.Y, spinningpoint2.X, spinningpoint2.Y, projToShoot2, Damage2, KnockBack2, owner, num57);
						if (num57 == 5)
						{
							for (float num60 = -1f; num60 <= 1f; num60 += 2f)
							{
								Vector2 vector20 = spinningpoint2.RotatedBy((float)Math.PI * 2f * num60 * 1f / 80f);
								if (float.IsNaN(spinningpoint2.X) || float.IsNaN(spinningpoint2.Y))
								{
									vector20 = -Vector2.UnitY;
								}
								NewProjectile(projectileSource_Item_WithPotentialAmmo2, vector19.X, vector19.Y, vector20.X, vector20.Y, projToShoot2, Damage2, KnockBack2, owner, num57);
							}
						}
						if (num57 == 4)
						{
							NewProjectile(projectileSource_Item_WithPotentialAmmo2, vector19.X, vector19.Y, spinningpoint2.X, spinningpoint2.Y, projToShoot2, Damage2, KnockBack2, owner, num57, 1f);
						}
					}
				}
				else
				{
					Kill();
				}
			}
			Vector2 vector21 = base.Center + velocity.ToRotation().ToRotationVector2() * 40f;
			Vector2 vector22 = center3 + v.ToRotation().ToRotationVector2() * 40f;
			Color color = Main.hslToRgb(ai[0] / 90f % 1f, 1f, 0.5f);
			((Color)(ref color)).A = 120;
			int num61 = 267;
			Dust dust = Dust.NewDustPerfect(vector21, num61, Vector2.Zero);
			dust.color = color;
			dust.scale = 0.6f;
			dust.fadeIn = 0.9f;
			dust.noGravity = true;
			Dust dust2 = Dust.NewDustPerfect(vector21, num61, Vector2.Zero);
			dust2.color = color;
			dust2.scale = 0.6f;
			dust2.fadeIn = 0.7f;
			dust2.noGravity = true;
			dust2.velocity = -velocity.RotatedBy(2.094395160675049) / 10f;
			Dust dust3 = Dust.NewDustPerfect(vector21, num61, Vector2.Zero);
			dust3.color = color;
			dust3.scale = 0.6f;
			dust3.fadeIn = 0.7f;
			dust3.noGravity = true;
			dust3.velocity = -velocity.RotatedBy(-2.094395160675049) / 10f;
			if (vector21 != vector22)
			{
				float num62 = -1f;
				Dust dust4 = Dust.NewDustPerfect(Vector2.Lerp(vector21, vector22, 0.8f), num61, Vector2.Zero);
				dust4.velocity = (vector21 - vector22).SafeNormalize(Vector2.Zero) * 2f;
				dust4.color = color;
				dust4.scale = 0.6f;
				dust4.fadeIn = 0.9f;
				dust4.velocity *= num62;
				dust4.noGravity = true;
				Dust dust5 = Dust.NewDustPerfect(Vector2.Lerp(vector21, vector22, 0.5f), num61, Vector2.Zero);
				dust5.velocity = (vector21 - vector22).SafeNormalize(Vector2.Zero) * 2f;
				dust5.color = color;
				dust5.scale = 0.6f;
				dust5.fadeIn = 0.9f;
				dust5.velocity *= num62;
				dust5.noGravity = true;
				Dust dust6 = Dust.NewDustPerfect(Vector2.Lerp(vector21, vector22, 0.2f), num61, Vector2.Zero);
				dust6.velocity = (vector21 - vector22).SafeNormalize(Vector2.Zero) * 2f;
				dust6.color = color;
				dust6.scale = 0.6f;
				dust6.fadeIn = 0.9f;
				dust6.velocity *= num62;
				dust6.noGravity = true;
			}
		}
		if (type == 630)
		{
			num = 0f;
			if (spriteDirection == -1)
			{
				num = (float)Math.PI;
			}
			ai[0] += 1f;
			int num63 = 0;
			if (ai[0] >= 40f)
			{
				num63++;
			}
			if (ai[0] >= 80f)
			{
				num63++;
			}
			if (ai[0] >= 120f)
			{
				num63++;
			}
			int num64 = 24;
			int num65 = 2;
			ai[1] -= 1f;
			bool flag5 = false;
			if (ai[1] <= 0f)
			{
				ai[1] = num64 - num65 * num63;
				flag5 = true;
				_ = (int)ai[0] / (num64 - num65 * num63);
			}
			bool canShoot3 = player.channel && player.HasAmmo(player.inventory[player.selectedItem], canUse: true) && !player.noItems && !player.CCed;
			if (localAI[0] > 0f)
			{
				localAI[0] -= 1f;
			}
			if (soundDelay <= 0 && canShoot3)
			{
				soundDelay = num64 - num65 * num63;
				if (ai[0] != 1f)
				{
					SoundEngine.PlaySound(in SoundID.Item5, position);
				}
				localAI[0] = 12f;
			}
			player.phantasmTime = 2;
			if (flag5 && Main.myPlayer == owner)
			{
				int projToShoot3 = 14;
				float speed3 = 14f;
				int Damage3 = player.GetWeaponDamage(player.inventory[player.selectedItem]);
				float KnockBack3 = player.inventory[player.selectedItem].knockBack;
				if (canShoot3)
				{
					player.PickAmmo(player.inventory[player.selectedItem], ref projToShoot3, ref speed3, ref canShoot3, ref Damage3, ref KnockBack3, out var usedAmmoItemId3);
					IEntitySource projectileSource_Item_WithPotentialAmmo3 = player.GetProjectileSource_Item_WithPotentialAmmo(player.HeldItem, usedAmmoItemId3);
					KnockBack3 = player.GetWeaponKnockback(player.inventory[player.selectedItem], KnockBack3);
					float num67 = player.inventory[player.selectedItem].shootSpeed * scale;
					Vector2 vector24 = vector;
					Vector2 value3 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector24;
					if (player.gravDir == -1f)
					{
						value3.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector24.Y;
					}
					Vector2 vector25 = Vector2.Normalize(value3);
					if (float.IsNaN(vector25.X) || float.IsNaN(vector25.Y))
					{
						vector25 = -Vector2.UnitY;
					}
					vector25 *= num67;
					if (vector25.X != velocity.X || vector25.Y != velocity.Y)
					{
						netUpdate = true;
					}
					velocity = vector25 * 0.55f;
					for (int num68 = 0; num68 < 4; num68++)
					{
						Vector2 vector26 = Vector2.Normalize(velocity) * speed3 * (0.6f + Main.rand.NextFloat() * 0.8f);
						if (float.IsNaN(vector26.X) || float.IsNaN(vector26.Y))
						{
							vector26 = -Vector2.UnitY;
						}
						Vector2 vector27 = vector24 + Utils.RandomVector2(Main.rand, -15f, 15f);
						int num69 = NewProjectile(projectileSource_Item_WithPotentialAmmo3, vector27.X, vector27.Y, vector26.X, vector26.Y, projToShoot3, Damage3, KnockBack3, owner);
						Main.projectile[num69].noDropItem = true;
					}
				}
				else
				{
					Kill();
				}
			}
		}
		if (type == 705)
		{
			num = 0f;
			if (spriteDirection == -1)
			{
				num = (float)Math.PI;
			}
			ai[0] += 1f;
			int itemAnimationMax = player.itemAnimationMax;
			ai[1] -= 1f;
			bool flag6 = false;
			if (ai[1] <= 0f)
			{
				ai[1] = itemAnimationMax;
				flag6 = true;
			}
			bool canShoot4 = player.channel && player.HasAmmo(player.inventory[player.selectedItem], canUse: true) && !player.noItems && !player.CCed;
			if (localAI[0] > 0f)
			{
				localAI[0] -= 1f;
			}
			if (soundDelay <= 0 && canShoot4)
			{
				soundDelay = itemAnimationMax;
				if (ai[0] != 1f)
				{
					SoundEngine.PlaySound(in SoundID.Item5, position);
				}
				localAI[0] = 12f;
			}
			if (flag6 && Main.myPlayer == owner)
			{
				int projToShoot4 = 14;
				float speed4 = 12f;
				int Damage4 = player.GetWeaponDamage(player.inventory[player.selectedItem]);
				float KnockBack4 = player.inventory[player.selectedItem].knockBack;
				int num70 = 2;
				float num71 = 1.5f;
				if (canShoot4)
				{
					player.PickAmmo(player.inventory[player.selectedItem], ref projToShoot4, ref speed4, ref canShoot4, ref Damage4, ref KnockBack4, out var usedAmmoItemId4);
					IEntitySource projectileSource_Item_WithPotentialAmmo4 = player.GetProjectileSource_Item_WithPotentialAmmo(player.HeldItem, usedAmmoItemId4);
					KnockBack4 = player.GetWeaponKnockback(player.inventory[player.selectedItem], KnockBack4);
					if (projToShoot4 == 1)
					{
						projToShoot4 = 2;
					}
					if (++player.phantomPhoneixCounter >= 3)
					{
						player.phantomPhoneixCounter = 0;
						num70 = 1;
						Damage4 *= 2;
						num71 = 0f;
						ai[1] *= 1.5f;
						projToShoot4 = 706;
						speed4 = 16f;
					}
					float num72 = player.inventory[player.selectedItem].shootSpeed * scale;
					Vector2 vector28 = vector;
					Vector2 value4 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - vector28;
					if (player.gravDir == -1f)
					{
						value4.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector28.Y;
					}
					Vector2 vector29 = Vector2.Normalize(value4);
					if (float.IsNaN(vector29.X) || float.IsNaN(vector29.Y))
					{
						vector29 = -Vector2.UnitY;
					}
					vector29 *= num72;
					if (vector29.X != velocity.X || vector29.Y != velocity.Y)
					{
						netUpdate = true;
					}
					velocity = vector29 * 0.55f;
					for (int num73 = 0; num73 < num70; num73++)
					{
						Vector2 vector30 = Vector2.Normalize(velocity) * speed4;
						vector30 += Main.rand.NextVector2Square(0f - num71, num71);
						if (float.IsNaN(vector30.X) || float.IsNaN(vector30.Y))
						{
							vector30 = -Vector2.UnitY;
						}
						Vector2 vector31 = vector28;
						int num74 = NewProjectile(projectileSource_Item_WithPotentialAmmo4, vector31.X, vector31.Y, vector30.X, vector30.Y, projToShoot4, Damage4, KnockBack4, owner);
						Main.projectile[num74].noDropItem = true;
					}
				}
				else
				{
					Kill();
				}
			}
		}
		position = player.RotatedRelativePoint(player.MountedCenter, reverseRotation: false, addGfxOffY: false) - base.Size / 2f;
		rotation = velocity.ToRotation() + num;
		spriteDirection = direction;
		timeLeft = 2;
		player.ChangeDir(direction);
		player.heldProj = whoAmI;
		player.SetDummyItemTime(num12);
		player.itemRotation = MathHelper.WrapAngle((float)Math.Atan2(velocity.Y * (float)direction, velocity.X * (float)direction) + num23);
		if (type == 460 || type == 611)
		{
			Vector2 vector32 = Main.OffsetsPlayerOnhand[player.bodyFrame.Y / 56] * 2f;
			if (player.direction != 1)
			{
				vector32.X = (float)player.bodyFrame.Width - vector32.X;
			}
			if (player.gravDir != 1f)
			{
				vector32.Y = (float)player.bodyFrame.Height - vector32.Y;
			}
			vector32 -= new Vector2((float)(player.bodyFrame.Width - player.width), (float)(player.bodyFrame.Height - 42)) / 2f;
			base.Center = player.RotatedRelativePoint(player.MountedCenter - new Vector2(20f, 42f) / 2f + vector32, reverseRotation: false, addGfxOffY: false) - velocity;
		}
		if (type == 615)
		{
			position.Y += player.gravDir * 2f;
		}
		if (type == 714)
		{
			position.Y += player.gravDir * 2f;
		}
		if (type == 611 && alpha == 0)
		{
			for (int num75 = 0; num75 < 2; num75++)
			{
				Dust obj4 = Main.dust[Dust.NewDust(position + velocity * 2f, width, height, 6, 0f, 0f, 100, Color.Transparent, 2f)];
				obj4.noGravity = true;
				obj4.velocity *= 2f;
				obj4.velocity += localAI[0].ToRotationVector2();
				obj4.fadeIn = 1.5f;
			}
			float num76 = 18f;
			for (int num78 = 0; (float)num78 < num76; num78++)
			{
				if (Main.rand.Next(4) == 0)
				{
					Vector2 vector33 = position + velocity + velocity * ((float)num78 / num76);
					Dust obj5 = Main.dust[Dust.NewDust(vector33, width, height, 6, 0f, 0f, 100, Color.Transparent)];
					obj5.noGravity = true;
					obj5.fadeIn = 0.5f;
					obj5.velocity += localAI[0].ToRotationVector2();
					obj5.noLight = true;
				}
			}
		}
		if (type == 927)
		{
			player.itemAnimation = num12 - (int)ai[0];
		}
	}

	private void AI_099_1()
	{
		//IL_0220: Unknown result type (might be due to invalid IL or missing references)
		//IL_0226: Unknown result type (might be due to invalid IL or missing references)
		//IL_022b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0230: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ba5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0265: Unknown result type (might be due to invalid IL or missing references)
		//IL_026d: Unknown result type (might be due to invalid IL or missing references)
		//IL_027b: Unknown result type (might be due to invalid IL or missing references)
		//IL_028e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0291: Unknown result type (might be due to invalid IL or missing references)
		//IL_0296: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0316: Unknown result type (might be due to invalid IL or missing references)
		//IL_0320: Unknown result type (might be due to invalid IL or missing references)
		//IL_0325: Unknown result type (might be due to invalid IL or missing references)
		//IL_033a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0345: Unknown result type (might be due to invalid IL or missing references)
		//IL_0362: Unknown result type (might be due to invalid IL or missing references)
		//IL_0378: Unknown result type (might be due to invalid IL or missing references)
		//IL_0387: Unknown result type (might be due to invalid IL or missing references)
		//IL_038e: Unknown result type (might be due to invalid IL or missing references)
		//IL_080d: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0399: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_061a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0621: Unknown result type (might be due to invalid IL or missing references)
		//IL_0626: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0401: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0725: Unknown result type (might be due to invalid IL or missing references)
		//IL_072a: Unknown result type (might be due to invalid IL or missing references)
		//IL_072d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0732: Unknown result type (might be due to invalid IL or missing references)
		//IL_0737: Unknown result type (might be due to invalid IL or missing references)
		//IL_0630: Unknown result type (might be due to invalid IL or missing references)
		//IL_0646: Unknown result type (might be due to invalid IL or missing references)
		//IL_042a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0437: Unknown result type (might be due to invalid IL or missing references)
		//IL_043c: Unknown result type (might be due to invalid IL or missing references)
		//IL_043e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0445: Unknown result type (might be due to invalid IL or missing references)
		//IL_044c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0411: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c55: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c59: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c62: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c74: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c76: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c82: Unknown result type (might be due to invalid IL or missing references)
		//IL_066d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0683: Unknown result type (might be due to invalid IL or missing references)
		//IL_0652: Unknown result type (might be due to invalid IL or missing references)
		//IL_0516: Unknown result type (might be due to invalid IL or missing references)
		//IL_051b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0526: Unknown result type (might be due to invalid IL or missing references)
		//IL_0536: Unknown result type (might be due to invalid IL or missing references)
		//IL_0543: Unknown result type (might be due to invalid IL or missing references)
		//IL_0548: Unknown result type (might be due to invalid IL or missing references)
		//IL_054a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0478: Unknown result type (might be due to invalid IL or missing references)
		//IL_047d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0488: Unknown result type (might be due to invalid IL or missing references)
		//IL_0498: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_06aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_068f: Unknown result type (might be due to invalid IL or missing references)
		//IL_057b: Unknown result type (might be due to invalid IL or missing references)
		//IL_057d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0562: Unknown result type (might be due to invalid IL or missing references)
		//IL_04dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_04df: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_06fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_06cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0585: Unknown result type (might be due to invalid IL or missing references)
		//IL_0588: Unknown result type (might be due to invalid IL or missing references)
		//IL_0592: Unknown result type (might be due to invalid IL or missing references)
		//IL_0597: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0506: Unknown result type (might be due to invalid IL or missing references)
		//IL_050b: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_09db: Unknown result type (might be due to invalid IL or missing references)
		//IL_09e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_09e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0709: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b54: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_09fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a02: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a07: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a15: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a26: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_092c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0945: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b80: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b87: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a42: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a49: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a52: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a61: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a63: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a72: Unknown result type (might be due to invalid IL or missing references)
		//IL_0973: Unknown result type (might be due to invalid IL or missing references)
		//IL_0984: Unknown result type (might be due to invalid IL or missing references)
		//IL_0989: Unknown result type (might be due to invalid IL or missing references)
		//IL_098e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a89: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a90: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a95: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a99: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b04: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b10: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b14: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b23: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b25: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b34: Unknown result type (might be due to invalid IL or missing references)
		//IL_0acd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0add: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aee: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0afd: Unknown result type (might be due to invalid IL or missing references)
		timeLeft = 6;
		bool flag = true;
		float num = 250f;
		float num6 = 0.1f;
		float num7 = 15f;
		float num8 = 12f;
		num *= 0.5f;
		num7 *= 0.8f;
		num8 *= 1.5f;
		if (owner == Main.myPlayer)
		{
			bool flag2 = false;
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].active && Main.projectile[i].owner == owner && Main.projectile[i].aiStyle == 99 && (Main.projectile[i].type < 556 || Main.projectile[i].type > 561))
				{
					flag2 = true;
				}
			}
			if (!flag2)
			{
				ai[0] = -1f;
				netUpdate = true;
			}
		}
		if (Main.player[owner].yoyoString)
		{
			num += num * 0.25f + 10f;
		}
		rotation += 0.5f;
		if (Main.player[owner].dead)
		{
			Kill();
			return;
		}
		if (!flag)
		{
			Main.player[owner].heldProj = whoAmI;
			Main.player[owner].SetDummyItemTime(2);
			if (position.X + (float)(width / 2) > Main.player[owner].position.X + (float)(Main.player[owner].width / 2))
			{
				Main.player[owner].ChangeDir(1);
				direction = 1;
			}
			else
			{
				Main.player[owner].ChangeDir(-1);
				direction = -1;
			}
		}
		if (ai[0] == 0f || ai[0] == 1f)
		{
			if (ai[0] == 1f)
			{
				num *= 0.75f;
			}
			num8 *= 0.5f;
			bool flag3 = false;
			Vector2 vector = Main.player[owner].Center - base.Center;
			if ((double)((Vector2)(ref vector)).Length() > (double)num * 0.9)
			{
				flag3 = true;
			}
			if (((Vector2)(ref vector)).Length() > num)
			{
				float num9 = ((Vector2)(ref vector)).Length() - num;
				Vector2 vector2 = default(Vector2);
				vector2.X = vector.Y;
				vector2.Y = vector.X;
				((Vector2)(ref vector)).Normalize();
				vector *= num;
				position = Main.player[owner].Center - vector;
				position.X -= width / 2;
				position.Y -= height / 2;
				float num10 = ((Vector2)(ref velocity)).Length();
				((Vector2)(ref velocity)).Normalize();
				if (num9 > num10 - 1f)
				{
					num9 = num10 - 1f;
				}
				velocity *= num10 - num9;
				num10 = ((Vector2)(ref velocity)).Length();
				Vector2 vector3 = default(Vector2);
				((Vector2)(ref vector3))._002Ector(base.Center.X, base.Center.Y);
				Vector2 vector4 = default(Vector2);
				((Vector2)(ref vector4))._002Ector(Main.player[owner].Center.X, Main.player[owner].Center.Y);
				if (vector3.Y < vector4.Y)
				{
					vector2.Y = Math.Abs(vector2.Y);
				}
				else if (vector3.Y > vector4.Y)
				{
					vector2.Y = 0f - Math.Abs(vector2.Y);
				}
				if (vector3.X < vector4.X)
				{
					vector2.X = Math.Abs(vector2.X);
				}
				else if (vector3.X > vector4.X)
				{
					vector2.X = 0f - Math.Abs(vector2.X);
				}
				((Vector2)(ref vector2)).Normalize();
				vector2 *= ((Vector2)(ref velocity)).Length();
				new Vector2(vector2.X, vector2.Y);
				if (Math.Abs(velocity.X) > Math.Abs(velocity.Y))
				{
					Vector2 vector5 = velocity;
					vector5.Y += vector2.Y;
					((Vector2)(ref vector5)).Normalize();
					vector5 *= ((Vector2)(ref velocity)).Length();
					if ((double)Math.Abs(vector2.X) < 0.1 || (double)Math.Abs(vector2.Y) < 0.1)
					{
						velocity = vector5;
					}
					else
					{
						velocity = (vector5 + velocity * 2f) / 3f;
					}
				}
				else
				{
					Vector2 vector6 = velocity;
					vector6.X += vector2.X;
					((Vector2)(ref vector6)).Normalize();
					vector6 *= ((Vector2)(ref velocity)).Length();
					if ((double)Math.Abs(vector2.X) < 0.2 || (double)Math.Abs(vector2.Y) < 0.2)
					{
						velocity = vector6;
					}
					else
					{
						velocity = (vector6 + velocity * 2f) / 3f;
					}
				}
			}
			if (Main.myPlayer == owner)
			{
				if (Main.player[owner].channel)
				{
					Vector2 vector7 = default(Vector2);
					((Vector2)(ref vector7))._002Ector((float)(Main.mouseX - Main.lastMouseX), (float)(Main.mouseY - Main.lastMouseY));
					if (velocity.X != 0f || velocity.Y != 0f)
					{
						if (flag)
						{
							vector7 *= -1f;
						}
						if (flag3)
						{
							if (base.Center.X < Main.player[owner].Center.X && vector7.X < 0f)
							{
								vector7.X = 0f;
							}
							if (base.Center.X > Main.player[owner].Center.X && vector7.X > 0f)
							{
								vector7.X = 0f;
							}
							if (base.Center.Y < Main.player[owner].Center.Y && vector7.Y < 0f)
							{
								vector7.Y = 0f;
							}
							if (base.Center.Y > Main.player[owner].Center.Y && vector7.Y > 0f)
							{
								vector7.Y = 0f;
							}
						}
						velocity += vector7 * num6;
						netUpdate = true;
					}
				}
				else
				{
					ai[0] = -1f;
					netUpdate = true;
				}
			}
			if (flag || type == 562 || type == 547 || type == 555 || type == 564 || type == 552 || type == 563 || type == 549 || type == 550 || type == 554 || type == 553 || type == 603 || type == 999)
			{
				float num11 = 800f;
				Vector2 vector8 = default(Vector2);
				bool flag4 = false;
				if (type == 549)
				{
					num11 = 200f;
				}
				if (type == 554)
				{
					num11 = 400f;
				}
				if (type == 553)
				{
					num11 = 250f;
				}
				if (type == 603)
				{
					num11 = 320f;
				}
				for (int j = 0; j < 200; j++)
				{
					if (!Main.npc[j].CanBeChasedBy(this))
					{
						continue;
					}
					float num12 = Main.npc[j].position.X + (float)(Main.npc[j].width / 2);
					float num13 = Main.npc[j].position.Y + (float)(Main.npc[j].height / 2);
					float num2 = Math.Abs(position.X + (float)(width / 2) - num12) + Math.Abs(position.Y + (float)(height / 2) - num13);
					if (num2 < num11 && (type != 563 || !(num2 < 200f)) && Collision.CanHit(position, width, height, Main.npc[j].position, Main.npc[j].width, Main.npc[j].height))
					{
						Vector2 val = Main.npc[j].Center - Main.player[owner].Center;
						if ((double)((Vector2)(ref val)).Length() < (double)num * 0.9)
						{
							num11 = num2;
							vector8.X = num12;
							vector8.Y = num13;
							flag4 = true;
						}
					}
				}
				if (flag4)
				{
					vector8 -= base.Center;
					((Vector2)(ref vector8)).Normalize();
					if (type == 563)
					{
						vector8 *= 4f;
						velocity = (velocity * 14f + vector8) / 15f;
					}
					else if (type == 553)
					{
						vector8 *= 5f;
						velocity = (velocity * 12f + vector8) / 13f;
					}
					else if (type == 603)
					{
						vector8 *= 16f;
						velocity = (velocity * 9f + vector8) / 10f;
					}
					else if (type == 554)
					{
						vector8 *= 8f;
						velocity = (velocity * 6f + vector8) / 7f;
					}
					else
					{
						vector8 *= 6f;
						velocity = (velocity * 7f + vector8) / 8f;
					}
				}
			}
			if (((Vector2)(ref velocity)).Length() > num7)
			{
				((Vector2)(ref velocity)).Normalize();
				velocity *= num7;
			}
			if (((Vector2)(ref velocity)).Length() < num8)
			{
				((Vector2)(ref velocity)).Normalize();
				velocity *= num8;
			}
			return;
		}
		tileCollide = false;
		Vector2 vector9 = Main.player[owner].Center - base.Center;
		float num3 = ((Vector2)(ref vector9)).Length();
		if (num3 < 40f || vector9.HasNaNs() || num3 > 2000f)
		{
			Kill();
			return;
		}
		float num4 = num7 * 1.5f;
		if (type == 546)
		{
			num4 *= 1.5f;
		}
		if (type == 554)
		{
			num4 *= 1.25f;
		}
		if (type == 555)
		{
			num4 *= 1.35f;
		}
		if (type == 562)
		{
			num4 *= 1.25f;
		}
		float num5 = 12f;
		((Vector2)(ref vector9)).Normalize();
		vector9 *= num4;
		velocity = (velocity * (num5 - 1f) + vector9) / num5;
	}

	private void AI_099_2()
	{
		//IL_014a: Unknown result type (might be due to invalid IL or missing references)
		//IL_014f: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0194: Unknown result type (might be due to invalid IL or missing references)
		//IL_0199: Unknown result type (might be due to invalid IL or missing references)
		//IL_0469: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01af: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0304: Unknown result type (might be due to invalid IL or missing references)
		//IL_030b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0310: Unknown result type (might be due to invalid IL or missing references)
		//IL_0319: Unknown result type (might be due to invalid IL or missing references)
		//IL_0323: Unknown result type (might be due to invalid IL or missing references)
		//IL_032c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0336: Unknown result type (might be due to invalid IL or missing references)
		//IL_033e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0345: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0533: Unknown result type (might be due to invalid IL or missing references)
		//IL_0552: Unknown result type (might be due to invalid IL or missing references)
		//IL_0558: Unknown result type (might be due to invalid IL or missing references)
		//IL_0279: Unknown result type (might be due to invalid IL or missing references)
		//IL_0292: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02db: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b72: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b78: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b82: Unknown result type (might be due to invalid IL or missing references)
		//IL_0685: Unknown result type (might be due to invalid IL or missing references)
		//IL_068b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0690: Unknown result type (might be due to invalid IL or missing references)
		//IL_0695: Unknown result type (might be due to invalid IL or missing references)
		//IL_065f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0669: Unknown result type (might be due to invalid IL or missing references)
		//IL_066e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bde: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be3: Unknown result type (might be due to invalid IL or missing references)
		//IL_09e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_08cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_072e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0738: Unknown result type (might be due to invalid IL or missing references)
		//IL_073d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0742: Unknown result type (might be due to invalid IL or missing references)
		//IL_0747: Unknown result type (might be due to invalid IL or missing references)
		//IL_075a: Unknown result type (might be due to invalid IL or missing references)
		//IL_076b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0770: Unknown result type (might be due to invalid IL or missing references)
		//IL_0775: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0915: Unknown result type (might be due to invalid IL or missing references)
		//IL_0789: Unknown result type (might be due to invalid IL or missing references)
		//IL_078d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0792: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0948: Unknown result type (might be due to invalid IL or missing references)
		//IL_095e: Unknown result type (might be due to invalid IL or missing references)
		//IL_07df: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_07fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a54: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a58: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a64: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a69: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a71: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a76: Unknown result type (might be due to invalid IL or missing references)
		//IL_0991: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0814: Unknown result type (might be due to invalid IL or missing references)
		//IL_081e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0823: Unknown result type (might be due to invalid IL or missing references)
		//IL_0831: Unknown result type (might be due to invalid IL or missing references)
		//IL_0836: Unknown result type (might be due to invalid IL or missing references)
		//IL_0838: Unknown result type (might be due to invalid IL or missing references)
		//IL_083d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0abb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0acc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ace: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b39: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b3e: Unknown result type (might be due to invalid IL or missing references)
		bool flag = false;
		for (int i = 0; i < whoAmI; i++)
		{
			if (Main.projectile[i].active && Main.projectile[i].owner == owner && Main.projectile[i].type == type)
			{
				flag = true;
			}
		}
		if (owner == Main.myPlayer)
		{
			localAI[0] += 1f;
			if (flag)
			{
				localAI[0] += (float)Main.rand.Next(10, 31) * 0.1f;
			}
			float num = localAI[0] / 60f;
			num /= (1f + Main.player[owner].inverseMeleeSpeed) / 2f;
			float num8 = ProjectileID.Sets.YoyosLifeTimeMultiplier[type];
			if (num8 != -1f && num > num8)
			{
				ai[0] = -1f;
			}
		}
		if (type == 603 && owner == Main.myPlayer)
		{
			localAI[1] += 1f;
			if (localAI[1] >= 6f)
			{
				float num9 = 400f;
				Vector2 vector = velocity;
				Vector2 vector2 = default(Vector2);
				((Vector2)(ref vector2))._002Ector((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
				((Vector2)(ref vector2)).Normalize();
				vector2 *= (float)Main.rand.Next(10, 41) * 0.1f;
				if (Main.rand.Next(3) == 0)
				{
					vector2 *= 2f;
				}
				vector *= 0.25f;
				vector += vector2;
				for (int j = 0; j < 200; j++)
				{
					if (Main.npc[j].CanBeChasedBy(this))
					{
						float num10 = Main.npc[j].position.X + (float)(Main.npc[j].width / 2);
						float num11 = Main.npc[j].position.Y + (float)(Main.npc[j].height / 2);
						float num12 = Math.Abs(position.X + (float)(width / 2) - num10) + Math.Abs(position.Y + (float)(height / 2) - num11);
						if (num12 < num9 && Collision.CanHit(position, width, height, Main.npc[j].position, Main.npc[j].width, Main.npc[j].height))
						{
							num9 = num12;
							vector.X = num10;
							vector.Y = num11;
							vector -= base.Center;
							((Vector2)(ref vector)).Normalize();
							vector *= 8f;
						}
					}
				}
				vector *= 0.8f;
				NewProjectile(GetProjectileSource_FromThis(), base.Center.X - vector.X, base.Center.Y - vector.Y, vector.X, vector.Y, 604, damage, knockBack, owner);
				localAI[1] = 0f;
			}
		}
		bool flag2 = false;
		if (type >= 556 && type <= 561)
		{
			flag2 = true;
		}
		if (Main.player[owner].dead)
		{
			Kill();
			return;
		}
		if (!flag2 && !flag)
		{
			Main.player[owner].heldProj = whoAmI;
			Main.player[owner].SetDummyItemTime(2);
			if (position.X + (float)(width / 2) > Main.player[owner].position.X + (float)(Main.player[owner].width / 2))
			{
				Main.player[owner].ChangeDir(1);
				direction = 1;
			}
			else
			{
				Main.player[owner].ChangeDir(-1);
				direction = -1;
			}
		}
		if (velocity.HasNaNs())
		{
			Kill();
		}
		timeLeft = 6;
		float num13 = 10f;
		float num14 = 10f;
		float num15 = 3f;
		float num2 = 200f;
		num2 = ProjectileID.Sets.YoyosMaximumRange[type];
		num14 = ProjectileID.Sets.YoyosTopSpeed[type];
		if (type == 545)
		{
			if (Main.rand.Next(6) == 0)
			{
				int num3 = Dust.NewDust(position, width, height, 6);
				Main.dust[num3].noGravity = true;
			}
		}
		else if (type == 553 && Main.rand.Next(2) == 0)
		{
			int num4 = Dust.NewDust(position, width, height, 6);
			Main.dust[num4].noGravity = true;
			Main.dust[num4].scale = 1.6f;
		}
		if (Main.player[owner].yoyoString)
		{
			num2 = num2 * 1.25f + 30f;
		}
		num2 /= (1f + Main.player[owner].inverseMeleeSpeed * 3f) / 4f;
		num14 /= (1f + Main.player[owner].inverseMeleeSpeed * 3f) / 4f;
		num13 = 14f - num14 / 2f;
		if (num13 < 1f)
		{
			num13 = 1f;
		}
		if (num13 < 1.01f)
		{
			num13 = 1.01f;
		}
		num15 = 5f + num14 / 2f;
		if (flag)
		{
			num15 += 20f;
		}
		if (ai[0] >= 0f)
		{
			if (((Vector2)(ref velocity)).Length() > num14)
			{
				velocity *= 0.98f;
			}
			bool flag3 = false;
			bool flag4 = false;
			Vector2 vector3 = Main.player[owner].Center - base.Center;
			if (((Vector2)(ref vector3)).Length() > num2)
			{
				flag3 = true;
				if ((double)((Vector2)(ref vector3)).Length() > (double)num2 * 1.3)
				{
					flag4 = true;
				}
			}
			if (owner == Main.myPlayer)
			{
				if (!Main.player[owner].channel || Main.player[owner].stoned || Main.player[owner].frozen)
				{
					ai[0] = -1f;
					ai[1] = 0f;
					netUpdate = true;
				}
				else
				{
					Vector2 val = Main.ReverseGravitySupport(Main.MouseScreen) + Main.screenPosition;
					float x = val.X;
					float y = val.Y;
					Vector2 vector4 = new Vector2(x, y) - Main.player[owner].Center;
					if (((Vector2)(ref vector4)).Length() > num2)
					{
						((Vector2)(ref vector4)).Normalize();
						vector4 *= num2;
						vector4 = Main.player[owner].Center + vector4;
						x = vector4.X;
						y = vector4.Y;
					}
					if (ai[0] != x || ai[1] != y)
					{
						Vector2 vector5 = new Vector2(x, y) - Main.player[owner].Center;
						if (((Vector2)(ref vector5)).Length() > num2 - 1f)
						{
							((Vector2)(ref vector5)).Normalize();
							vector5 *= num2 - 1f;
							Vector2 val2 = Main.player[owner].Center + vector5;
							x = val2.X;
							y = val2.Y;
						}
						ai[0] = x;
						ai[1] = y;
						netUpdate = true;
					}
				}
			}
			if (flag4 && owner == Main.myPlayer)
			{
				ai[0] = -1f;
				netUpdate = true;
			}
			if (ai[0] >= 0f)
			{
				if (flag3)
				{
					num13 /= 2f;
					num14 *= 2f;
					if (base.Center.X > Main.player[owner].Center.X && velocity.X > 0f)
					{
						velocity.X *= 0.5f;
					}
					if (base.Center.Y > Main.player[owner].Center.Y && velocity.Y > 0f)
					{
						velocity.Y *= 0.5f;
					}
					if (base.Center.X < Main.player[owner].Center.X && velocity.X < 0f)
					{
						velocity.X *= 0.5f;
					}
					if (base.Center.Y < Main.player[owner].Center.Y && velocity.Y < 0f)
					{
						velocity.Y *= 0.5f;
					}
				}
				Vector2 vector6 = new Vector2(ai[0], ai[1]) - base.Center;
				if (flag3)
				{
					num13 = 1f;
				}
				((Vector2)(ref velocity)).Length();
				float num5 = ((Vector2)(ref vector6)).Length();
				if (num5 > num15)
				{
					((Vector2)(ref vector6)).Normalize();
					float num6 = Math.Min(num5 / 2f, num14);
					if (flag3)
					{
						num6 = Math.Min(num6, num14 / 2f);
					}
					vector6 *= num6;
					velocity = (velocity * (num13 - 1f) + vector6) / num13;
				}
				else if (flag)
				{
					if ((double)((Vector2)(ref velocity)).Length() < (double)num14 * 0.6)
					{
						vector6 = velocity;
						((Vector2)(ref vector6)).Normalize();
						vector6 *= num14 * 0.6f;
						velocity = (velocity * (num13 - 1f) + vector6) / num13;
					}
				}
				else
				{
					velocity *= 0.8f;
				}
				if (flag && !flag3 && (double)((Vector2)(ref velocity)).Length() < (double)num14 * 0.6)
				{
					((Vector2)(ref velocity)).Normalize();
					velocity *= num14 * 0.6f;
				}
			}
		}
		else
		{
			num13 = (int)((double)num13 * 0.8);
			num14 *= 1.5f;
			tileCollide = false;
			Vector2 vector7 = Main.player[owner].Center - base.Center;
			float num7 = ((Vector2)(ref vector7)).Length();
			if (num7 < num14 + 10f || num7 == 0f || num7 > 2000f)
			{
				Kill();
			}
			else
			{
				((Vector2)(ref vector7)).Normalize();
				vector7 *= num14;
				velocity = (velocity * (num13 - 1f) + vector7) / num13;
			}
		}
		rotation += 0.45f;
	}

	private void AI_130_FlameBurstTower()
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0352: Unknown result type (might be due to invalid IL or missing references)
		//IL_0366: Unknown result type (might be due to invalid IL or missing references)
		//IL_0370: Unknown result type (might be due to invalid IL or missing references)
		//IL_037b: Unknown result type (might be due to invalid IL or missing references)
		//IL_038a: Unknown result type (might be due to invalid IL or missing references)
		//IL_038f: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_066f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0683: Unknown result type (might be due to invalid IL or missing references)
		//IL_068d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0698: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0704: Unknown result type (might be due to invalid IL or missing references)
		//IL_0709: Unknown result type (might be due to invalid IL or missing references)
		//IL_0253: Unknown result type (might be due to invalid IL or missing references)
		//IL_025f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0570: Unknown result type (might be due to invalid IL or missing references)
		//IL_057c: Unknown result type (might be due to invalid IL or missing references)
		//IL_088d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0899: Unknown result type (might be due to invalid IL or missing references)
		//IL_016f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_0180: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0193: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0211: Unknown result type (might be due to invalid IL or missing references)
		//IL_0216: Unknown result type (might be due to invalid IL or missing references)
		//IL_028b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_048c: Unknown result type (might be due to invalid IL or missing references)
		//IL_048e: Unknown result type (might be due to invalid IL or missing references)
		//IL_049d: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_052e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0533: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_07bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_07cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_084b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0850: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b43: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b47: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b20: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b25: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b26: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b37: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b41: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b61: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b62: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a62: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02de: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_032a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0334: Unknown result type (might be due to invalid IL or missing references)
		//IL_0339: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a82: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_05fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0610: Unknown result type (might be due to invalid IL or missing references)
		//IL_0616: Unknown result type (might be due to invalid IL or missing references)
		//IL_0647: Unknown result type (might be due to invalid IL or missing references)
		//IL_0651: Unknown result type (might be due to invalid IL or missing references)
		//IL_0656: Unknown result type (might be due to invalid IL or missing references)
		//IL_090a: Unknown result type (might be due to invalid IL or missing references)
		//IL_090c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0911: Unknown result type (might be due to invalid IL or missing references)
		//IL_0918: Unknown result type (might be due to invalid IL or missing references)
		//IL_092d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0933: Unknown result type (might be due to invalid IL or missing references)
		//IL_0964: Unknown result type (might be due to invalid IL or missing references)
		//IL_096e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0973: Unknown result type (might be due to invalid IL or missing references)
		float num = 900f;
		float angleRatioMax = 1f;
		Vector2 vector = base.Center;
		int num3 = 664;
		int num4 = 12;
		float num5 = 12f;
		int num6 = 1;
		int num7 = 6;
		int num8 = 4;
		int num9 = 80;
		switch (type)
		{
		case 663:
		{
			Lighting.AddLight(base.Center, new Vector3(0.4f, 0.2f, 0.1f));
			Lighting.AddLight(base.Bottom + new Vector2(0f, -10f), new Vector3(0.4f, 0.2f, 0.1f));
			vector = base.Bottom + new Vector2((float)(direction * 6), -40f);
			if ((localAI[0] += 1f) >= 300f)
			{
				localAI[0] = 0f;
			}
			Rectangle r3 = default(Rectangle);
			((Rectangle)(ref r3))._002Ector((int)position.X + width / 4, (int)position.Y + height - 16, width / 4 * 3, 6);
			if (direction == 1)
			{
				r3.X -= width / 4;
			}
			for (int m = 0; m < 1; m++)
			{
				if (Main.rand.Next(2) == 0)
				{
					Dust dust3 = Dust.NewDustDirect(r3.TopLeft() + new Vector2(-2f, -2f), r3.Width + 4, r3.Height + 4, 270, -direction * 2, -2f, 200, new Color(255, 255, 255, 0));
					dust3.fadeIn = 0.6f + Main.rand.NextFloat() * 0.6f;
					dust3.scale = 0.4f;
					dust3.noGravity = true;
					dust3.noLight = true;
					dust3.velocity = Vector2.Zero;
					dust3.velocity.X = (float)(-direction) * Main.rand.NextFloat() * dust3.fadeIn;
				}
			}
			((Rectangle)(ref r3))._002Ector((int)base.Center.X, (int)base.Bottom.Y, width / 4, 10);
			if (direction == -1)
			{
				r3.X -= r3.Width;
			}
			r3.X += direction * 4;
			r3.Y -= height - 10;
			for (int n = 0; n < 1; n++)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust dust6 = Dust.NewDustDirect(r3.TopLeft(), r3.Width, r3.Height, 6);
					dust6.fadeIn = 1f;
					dust6.scale = 1f;
					dust6.noGravity = true;
					dust6.noLight = true;
					dust6.velocity *= 2f;
				}
			}
			break;
		}
		case 665:
		{
			Lighting.AddLight(base.Center, new Vector3(0.4f, 0.2f, 0.1f) * 1.2f);
			Lighting.AddLight(base.Bottom + new Vector2(0f, -10f), new Vector3(0.4f, 0.2f, 0.1f) * 1.2f);
			num9 = 70;
			num5 += 3f;
			num7 = 8;
			num3 = 666;
			vector = base.Bottom + new Vector2((float)(direction * 6), -44f);
			if ((localAI[0] += 1f) >= 300f)
			{
				localAI[0] = 0f;
			}
			Rectangle r2 = default(Rectangle);
			((Rectangle)(ref r2))._002Ector((int)position.X + width / 4, (int)position.Y + height - 16, width / 4 * 2, 6);
			if (direction == 1)
			{
				r2.X -= width / 4;
			}
			for (int k = 0; k < 1; k++)
			{
				if (Main.rand.Next(2) == 0)
				{
					Dust dust2 = Dust.NewDustDirect(r2.TopLeft() + new Vector2(-2f, -2f), r2.Width + 4, r2.Height + 4, 270, -direction * 2, -2f, 200, new Color(255, 255, 255, 0));
					dust2.fadeIn = 0.6f + Main.rand.NextFloat() * 0.6f;
					dust2.scale = 0.4f;
					dust2.noGravity = true;
					dust2.noLight = true;
					dust2.velocity = Vector2.Zero;
					dust2.velocity.X = (float)(-direction) * Main.rand.NextFloat() * dust2.fadeIn;
				}
			}
			((Rectangle)(ref r2))._002Ector((int)base.Center.X, (int)base.Bottom.Y, width / 4, 10);
			if (direction == -1)
			{
				r2.X -= r2.Width;
			}
			r2.X += direction * 4;
			r2.Y -= height - 10;
			for (int l = 0; l < 2; l++)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust dust5 = Dust.NewDustDirect(r2.TopLeft(), r2.Width, r2.Height, 6);
					dust5.fadeIn = 1f;
					dust5.scale = 1f;
					dust5.noGravity = true;
					dust5.noLight = true;
					dust5.velocity *= 2f;
				}
			}
			break;
		}
		case 667:
		{
			Lighting.AddLight(base.Center, new Vector3(0.4f, 0.2f, 0.1f) * 1.5f);
			Lighting.AddLight(base.Bottom + new Vector2(0f, -10f), new Vector3(0.4f, 0.2f, 0.1f) * 1.5f);
			num9 = 60;
			num5 += 6f;
			num7 = 8;
			num3 = 668;
			vector = base.Bottom + new Vector2((float)(direction * 6), -46f);
			if ((localAI[0] += 1f) >= 300f)
			{
				localAI[0] = 0f;
			}
			Rectangle r = default(Rectangle);
			((Rectangle)(ref r))._002Ector((int)position.X + width / 4, (int)position.Y + height - 16, width / 4 * 2, 6);
			if (direction == 1)
			{
				r.X -= width / 4;
			}
			for (int i = 0; i < 1; i++)
			{
				if (Main.rand.Next(2) == 0)
				{
					Dust dust = Dust.NewDustDirect(r.TopLeft() + new Vector2(-2f, -2f), r.Width + 4, r.Height + 4, 270, -direction * 2, -2f, 200, new Color(255, 255, 255, 0));
					dust.fadeIn = 0.6f + Main.rand.NextFloat() * 0.6f;
					dust.scale = 0.4f;
					dust.noGravity = true;
					dust.noLight = true;
					dust.velocity = Vector2.Zero;
					dust.velocity.X = (float)(-direction) * Main.rand.NextFloat() * dust.fadeIn;
				}
			}
			((Rectangle)(ref r))._002Ector((int)base.Center.X, (int)base.Bottom.Y, width / 4, 10);
			if (direction == -1)
			{
				r.X -= r.Width;
			}
			r.X += direction * 4;
			r.Y -= height - 10;
			for (int j = 0; j < 3; j++)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust dust4 = Dust.NewDustDirect(r.TopLeft(), r.Width, r.Height, 6);
					dust4.fadeIn = 1.1f;
					dust4.scale = 1f;
					dust4.noGravity = true;
					dust4.noLight = true;
					dust4.velocity *= 2.4f;
				}
			}
			break;
		}
		}
		if (Main.player[owner].setApprenticeT2)
		{
			angleRatioMax = 0.1f;
			num *= 1.5f;
			num5 *= 1.4f;
		}
		if (ai[0] == 0f)
		{
			direction = (spriteDirection = Main.player[owner].direction);
			ai[0] = 1f;
			ai[1] = 0f;
			netUpdate = true;
		}
		if (ai[0] == 1f)
		{
			frame = 0;
			bool flag = false;
			if (ai[1] > 0f)
			{
				ai[1] -= 1f;
			}
			else
			{
				flag = true;
			}
			if (flag && owner == Main.myPlayer)
			{
				int num10 = AI_130_FlameBurstTower_FindTarget(num, angleRatioMax, vector);
				if (num10 != -1)
				{
					direction = Math.Sign(DirectionTo(Main.npc[num10].Center).X);
					ai[0] = 2f;
					ai[1] = 0f;
					netUpdate = true;
				}
			}
		}
		else if (ai[0] == 2f)
		{
			frame = num6 + (int)(ai[1] / (float)num8);
			if (ai[1] == (float)num4)
			{
				Vector2 vector2 = default(Vector2);
				((Vector2)(ref vector2))._002Ector((float)direction, 0f);
				int num2 = AI_130_FlameBurstTower_FindTarget(num, angleRatioMax, vector, canChangeDirection: false);
				if (num2 != -1)
				{
					vector2 = (Main.npc[num2].Center - vector).SafeNormalize(Vector2.UnitX * (float)direction);
				}
				Vector2 vector3 = vector2 * num5;
				if (owner == Main.myPlayer)
				{
					NewProjectile(GetProjectileSource_FromThis(), vector, vector3, num3, damage, knockBack, owner);
				}
			}
			if ((ai[1] += 1f) >= (float)(num7 * num8))
			{
				ai[0] = 1f;
				ai[1] = num9;
			}
		}
		spriteDirection = direction;
		tileCollide = true;
		velocity.Y += 0.2f;
	}

	private int AI_130_FlameBurstTower_FindTarget(float shot_range, float angleRatioMax, Vector2 shootingSpot, bool canChangeDirection = true)
	{
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_0116: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_012e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		//IL_0172: Unknown result type (might be due to invalid IL or missing references)
		//IL_0177: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0166: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		int num = -1;
		NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
		if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
		{
			for (int i = 0; i < 1; i++)
			{
				if (!ownerMinionAttackTargetNPC.CanBeChasedBy(this))
				{
					continue;
				}
				float num2 = Vector2.Distance(shootingSpot, ownerMinionAttackTargetNPC.Center);
				if (!(num2 > shot_range))
				{
					Vector2 vector = (ownerMinionAttackTargetNPC.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
					if (!(Math.Abs(vector.X) < Math.Abs(vector.Y) * angleRatioMax) && (canChangeDirection || !((float)direction * vector.X < 0f)) && (num == -1 || num2 < Vector2.Distance(shootingSpot, Main.npc[num].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, ownerMinionAttackTargetNPC.Center, 0, 0))
					{
						num = ownerMinionAttackTargetNPC.whoAmI;
					}
				}
			}
			if (num != -1)
			{
				return num;
			}
		}
		for (int j = 0; j < 200; j++)
		{
			NPC nPC = Main.npc[j];
			if (!nPC.CanBeChasedBy(this))
			{
				continue;
			}
			float num3 = Vector2.Distance(shootingSpot, nPC.Center);
			if (!(num3 > shot_range))
			{
				Vector2 vector2 = (nPC.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
				if (!(Math.Abs(vector2.X) < Math.Abs(vector2.Y) * angleRatioMax) && (canChangeDirection || !((float)direction * vector2.X < 0f)) && (num == -1 || num3 < Vector2.Distance(shootingSpot, Main.npc[num].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, nPC.Center, 0, 0))
				{
					num = j;
				}
			}
		}
		return num;
	}

	private int AI_134_Ballista_FindTarget(float shot_range, float deadBottomAngle, Vector2 shootingSpot)
	{
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0102: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_0113: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0157: Unknown result type (might be due to invalid IL or missing references)
		//IL_015c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0143: Unknown result type (might be due to invalid IL or missing references)
		//IL_014b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		int num = -1;
		NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
		if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
		{
			for (int i = 0; i < 1; i++)
			{
				if (!ownerMinionAttackTargetNPC.CanBeChasedBy(this))
				{
					continue;
				}
				float num2 = Vector2.Distance(shootingSpot, ownerMinionAttackTargetNPC.Center);
				if (!(num2 > shot_range))
				{
					Vector2 vector = (ownerMinionAttackTargetNPC.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
					if ((!(Math.Abs(vector.X) < Math.Abs(vector.Y) * deadBottomAngle) || !(vector.Y > 0f)) && (num == -1 || num2 < Vector2.Distance(shootingSpot, Main.npc[num].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, ownerMinionAttackTargetNPC.Center, 0, 0))
					{
						num = ownerMinionAttackTargetNPC.whoAmI;
					}
				}
			}
			if (num != -1)
			{
				return num;
			}
		}
		for (int j = 0; j < 200; j++)
		{
			NPC nPC = Main.npc[j];
			if (!nPC.CanBeChasedBy(this))
			{
				continue;
			}
			float num3 = Vector2.Distance(shootingSpot, nPC.Center);
			if (!(num3 > shot_range))
			{
				Vector2 vector2 = (nPC.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
				if ((!(Math.Abs(vector2.X) < Math.Abs(vector2.Y) * deadBottomAngle) || !(vector2.Y > 0f)) && (num == -1 || num3 < Vector2.Distance(shootingSpot, Main.npc[num].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, nPC.Center, 0, 0))
				{
					num = j;
				}
			}
		}
		return num;
	}

	private void AI_131_FlameBurstShot()
	{
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0173: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		if (type != 664 && type != 666 && type != 668)
		{
			return;
		}
		if (localAI[0] == 0f)
		{
			localAI[0] = 1f;
			SoundEngine.PlayTrackedSound(in SoundID.DD2_FlameburstTowerShot, base.Center);
		}
		if (alpha > 0)
		{
			alpha -= 25;
			if (alpha < 0)
			{
				alpha = 0;
			}
		}
		int num = 1;
		if (type == 666)
		{
			num = 2;
		}
		if (type == 668)
		{
			num = 3;
		}
		for (int i = 0; i < num; i++)
		{
			if (Main.rand.Next(2) != 0)
			{
				Dust dust = Dust.NewDustDirect(position, width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
				dust.noGravity = true;
				dust.velocity *= 0.3f;
				if (Main.rand.Next(1) == 0)
				{
					dust.velocity.Y += (float)Math.Sign(dust.velocity.Y) * 1.2f;
					dust.fadeIn += 0.5f;
				}
			}
		}
		rotation = velocity.ToRotation() + (float)Math.PI / 2f;
	}

	private void AI_134_Ballista()
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0333: Unknown result type (might be due to invalid IL or missing references)
		//IL_030f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0314: Unknown result type (might be due to invalid IL or missing references)
		//IL_0315: Unknown result type (might be due to invalid IL or missing references)
		//IL_031a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0326: Unknown result type (might be due to invalid IL or missing references)
		//IL_032b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0330: Unknown result type (might be due to invalid IL or missing references)
		//IL_019a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0369: Unknown result type (might be due to invalid IL or missing references)
		//IL_036d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0372: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0387: Unknown result type (might be due to invalid IL or missing references)
		//IL_0388: Unknown result type (might be due to invalid IL or missing references)
		//IL_022b: Unknown result type (might be due to invalid IL or missing references)
		float shot_range = 900f;
		float deadBottomAngle = 0.75f;
		Vector2 center = base.Center;
		int num = 680;
		int num2 = 12;
		float num3 = 16f;
		int num4 = 1;
		int num5 = 5;
		int num6 = 5;
		if (Main.player[owner].setSquireT2)
		{
			num3 = 21f;
		}
		int ballistraShotDelay = GetBallistraShotDelay(Main.player[owner]);
		num2 = num6;
		if (type == 677)
		{
			center.Y -= 4f;
		}
		if (ai[0] == 0f)
		{
			direction = (spriteDirection = Main.player[owner].direction);
			ai[0] = 1f;
			ai[1] = 0f;
			netUpdate = true;
			if (direction == -1)
			{
				rotation = (float)Math.PI;
			}
		}
		if (ai[0] == 1f)
		{
			frame = 0;
			bool flag = false;
			if (Main.player[owner].ballistaPanic && ai[1] > 60f)
			{
				ai[1] = 60f;
			}
			if (Main.player[owner].ballistaPanic && Main.player[owner].setSquireT3 && ai[1] > 30f)
			{
				ai[1] = 30f;
			}
			if (ai[1] > 0f)
			{
				ai[1] -= 1f;
			}
			else
			{
				flag = true;
			}
			int num7 = AI_134_Ballista_FindTarget(shot_range, deadBottomAngle, center);
			if (num7 != -1)
			{
				Vector2 vector = (vector = (Main.npc[num7].Center - center).SafeNormalize(Vector2.UnitY));
				rotation = rotation.AngleLerp(vector.ToRotation(), 0.08f);
				if (rotation > (float)Math.PI / 2f || rotation < -(float)Math.PI / 2f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				if (flag && owner == Main.myPlayer)
				{
					direction = Math.Sign(vector.X);
					ai[0] = 2f;
					ai[1] = 0f;
					netUpdate = true;
				}
			}
			else
			{
				float targetAngle = 0f;
				if (direction == -1)
				{
					targetAngle = (float)Math.PI;
				}
				rotation = rotation.AngleLerp(targetAngle, 0.05f);
			}
		}
		else if (ai[0] == 2f)
		{
			frame = num4 + (int)(ai[1] / (float)num6);
			if (ai[1] == (float)num2)
			{
				SoundEngine.PlayTrackedSound(in SoundID.DD2_BallistaTowerShot, base.Center);
				Vector2 vector2 = default(Vector2);
				((Vector2)(ref vector2))._002Ector((float)direction, 0f);
				int num8 = AI_134_Ballista_FindTarget(shot_range, deadBottomAngle, center);
				if (num8 != -1)
				{
					vector2 = (Main.npc[num8].Center - center).SafeNormalize(Vector2.UnitX * (float)direction);
				}
				rotation = vector2.ToRotation();
				if (rotation > (float)Math.PI / 2f || rotation < -(float)Math.PI / 2f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				Vector2 vector3 = vector2 * num3;
				if (owner == Main.myPlayer)
				{
					NewProjectile(GetProjectileSource_FromThis(), center, vector3, num, damage, knockBack, owner);
				}
			}
			if ((ai[1] += 1f) >= (float)(num5 * num6))
			{
				ai[0] = 1f;
				ai[1] = ballistraShotDelay;
			}
		}
		spriteDirection = direction;
		tileCollide = true;
		velocity.Y += 0.2f;
	}

	public static int GetBallistraShotDelay(Player player)
	{
		int result = 160;
		if (player.setSquireT3)
		{
			result = 100;
		}
		if (player.ballistaPanic)
		{
			result = 60;
		}
		if (player.ballistaPanic && player.setSquireT3)
		{
			result = 30;
		}
		return result;
	}

	private void AI_135_OgreStomp()
	{
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0628: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_0615: Unknown result type (might be due to invalid IL or missing references)
		//IL_010e: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0262: Unknown result type (might be due to invalid IL or missing references)
		//IL_0267: Unknown result type (might be due to invalid IL or missing references)
		//IL_0578: Unknown result type (might be due to invalid IL or missing references)
		//IL_057d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0603: Unknown result type (might be due to invalid IL or missing references)
		//IL_0608: Unknown result type (might be due to invalid IL or missing references)
		//IL_0434: Unknown result type (might be due to invalid IL or missing references)
		//IL_0439: Unknown result type (might be due to invalid IL or missing references)
		//IL_027e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0294: Unknown result type (might be due to invalid IL or missing references)
		//IL_033b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0340: Unknown result type (might be due to invalid IL or missing references)
		//IL_035b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0365: Unknown result type (might be due to invalid IL or missing references)
		//IL_036a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0450: Unknown result type (might be due to invalid IL or missing references)
		//IL_046f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0522: Unknown result type (might be due to invalid IL or missing references)
		//IL_0527: Unknown result type (might be due to invalid IL or missing references)
		//IL_0542: Unknown result type (might be due to invalid IL or missing references)
		//IL_054c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0551: Unknown result type (might be due to invalid IL or missing references)
		float num = 40f;
		if (type == 922)
		{
			num = 30f;
		}
		ai[0] += 1f;
		if (ai[0] > 9f)
		{
			Kill();
			return;
		}
		velocity = Vector2.Zero;
		position = base.Center;
		base.Size = new Vector2(16f, 16f) * MathHelper.Lerp(5f, num, Utils.GetLerpValue(0f, 9f, ai[0]));
		base.Center = position;
		Point point = base.TopLeft.ToTileCoordinates();
		Point point2 = base.BottomRight.ToTileCoordinates();
		int num2 = point.X / 2 + point2.X / 2;
		int num3 = width / 2;
		if ((int)ai[0] % 3 != 0)
		{
			return;
		}
		int num4 = (int)ai[0] / 3;
		for (int i = point.X; i <= point2.X; i++)
		{
			for (int j = point.Y; j <= point2.Y; j++)
			{
				if (Vector2.Distance(base.Center, new Vector2((float)(i * 16), (float)(j * 16))) > (float)num3)
				{
					continue;
				}
				Tile tileSafely = Framing.GetTileSafely(i, j);
				if (!tileSafely.active() || !Main.tileSolid[tileSafely.type] || Main.tileSolidTop[tileSafely.type] || Main.tileFrameImportant[tileSafely.type])
				{
					continue;
				}
				Tile tileSafely2 = Framing.GetTileSafely(i, j - 1);
				if (tileSafely2.active() && Main.tileSolid[tileSafely2.type] && !Main.tileSolidTop[tileSafely2.type])
				{
					continue;
				}
				int num5 = WorldGen.KillTile_GetTileDustAmount(fail: true, tileSafely, i, j);
				for (int k = 0; k < num5; k++)
				{
					Dust obj = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
					obj.velocity.Y -= 3f + (float)num4 * 1.5f;
					obj.velocity.Y *= Main.rand.NextFloat();
					obj.velocity.Y *= 0.75f;
					obj.scale += (float)num4 * 0.03f;
				}
				if (num4 >= 2)
				{
					if (type == 922)
					{
						Color newColor = NPC.AI_121_QueenSlime_GetDustColor();
						((Color)(ref newColor)).A = 150;
						for (int l = 0; l < num5 - 1; l++)
						{
							int num6 = Dust.NewDust(position, 12, 12, 4, 0f, 0f, 50, newColor, 1.5f);
							Main.dust[num6].velocity.Y -= 0.1f + (float)num4 * 0.5f;
							Main.dust[num6].velocity.Y *= Main.rand.NextFloat();
							Main.dust[num6].velocity.X *= Main.rand.NextFloatDirection() * 3f;
							Main.dust[num6].position = new Vector2((float)(i * 16 + Main.rand.Next(16)), (float)(j * 16 + Main.rand.Next(16)));
							if (Main.rand.Next(3) != 0)
							{
								Dust obj2 = Main.dust[num6];
								obj2.velocity *= 0.5f;
								Main.dust[num6].noGravity = true;
							}
						}
					}
					else
					{
						for (int m = 0; m < num5 - 1; m++)
						{
							Dust obj3 = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
							obj3.velocity.Y -= 1f + (float)num4;
							obj3.velocity.Y *= Main.rand.NextFloat();
							obj3.velocity.Y *= 0.75f;
						}
					}
				}
				if (num5 <= 0 || Main.rand.Next(3) == 0)
				{
					continue;
				}
				float num7 = (float)Math.Abs(num2 - i) / (num / 2f);
				if (type == 922)
				{
					Color newColor2 = NPC.AI_121_QueenSlime_GetDustColor();
					((Color)(ref newColor2)).A = 150;
					for (int n = 0; n < 3; n++)
					{
						int num8 = Dust.NewDust(position, width, height, 31, 0f, 0f, 50, newColor2, 2f - (float)num4 * 0.15f + num7 * 0.5f);
						Main.dust[num8].velocity.Y -= 0.1f + (float)num4 * 0.5f + num7 * (float)num4 * 1f;
						Main.dust[num8].velocity.Y *= Main.rand.NextFloat();
						Main.dust[num8].velocity.X *= Main.rand.NextFloatDirection() * 3f;
						Main.dust[num8].position = new Vector2((float)(i * 16 + 20), (float)(j * 16 + 20));
						if (Main.rand.Next(3) != 0)
						{
							Dust obj4 = Main.dust[num8];
							obj4.velocity *= 0.5f;
							Main.dust[num8].noGravity = true;
						}
					}
				}
				else
				{
					Gore gore = Gore.NewGoreDirect(position, Vector2.Zero, 61 + Main.rand.Next(3), 1f - (float)num4 * 0.15f + num7 * 0.5f);
					gore.velocity.Y -= 0.1f + (float)num4 * 0.5f + num7 * (float)num4 * 1f;
					gore.velocity.Y *= Main.rand.NextFloat();
					gore.position = new Vector2((float)(i * 16 + 20), (float)(j * 16 + 20));
				}
			}
		}
	}

	private void AI_136_BetsyBreath()
	{
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0133: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_0155: Unknown result type (might be due to invalid IL or missing references)
		//IL_0160: Unknown result type (might be due to invalid IL or missing references)
		//IL_0170: Unknown result type (might be due to invalid IL or missing references)
		//IL_0176: Unknown result type (might be due to invalid IL or missing references)
		//IL_0178: Unknown result type (might be due to invalid IL or missing references)
		//IL_0182: Unknown result type (might be due to invalid IL or missing references)
		//IL_0189: Unknown result type (might be due to invalid IL or missing references)
		//IL_018e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0194: Unknown result type (might be due to invalid IL or missing references)
		//IL_019f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01af: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0204: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_020c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0216: Unknown result type (might be due to invalid IL or missing references)
		//IL_021d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0222: Unknown result type (might be due to invalid IL or missing references)
		//IL_0228: Unknown result type (might be due to invalid IL or missing references)
		//IL_0233: Unknown result type (might be due to invalid IL or missing references)
		//IL_0243: Unknown result type (might be due to invalid IL or missing references)
		//IL_0249: Unknown result type (might be due to invalid IL or missing references)
		//IL_024b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0255: Unknown result type (might be due to invalid IL or missing references)
		//IL_025b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0260: Unknown result type (might be due to invalid IL or missing references)
		//IL_0398: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0404: Unknown result type (might be due to invalid IL or missing references)
		//IL_040f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0419: Unknown result type (might be due to invalid IL or missing references)
		//IL_041e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0423: Unknown result type (might be due to invalid IL or missing references)
		//IL_0431: Unknown result type (might be due to invalid IL or missing references)
		//IL_0451: Unknown result type (might be due to invalid IL or missing references)
		//IL_0457: Unknown result type (might be due to invalid IL or missing references)
		//IL_0480: Unknown result type (might be due to invalid IL or missing references)
		//IL_0498: Unknown result type (might be due to invalid IL or missing references)
		//IL_049e: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0501: Unknown result type (might be due to invalid IL or missing references)
		//IL_0522: Unknown result type (might be due to invalid IL or missing references)
		//IL_052d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0537: Unknown result type (might be due to invalid IL or missing references)
		//IL_053e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0543: Unknown result type (might be due to invalid IL or missing references)
		//IL_0549: Unknown result type (might be due to invalid IL or missing references)
		//IL_0554: Unknown result type (might be due to invalid IL or missing references)
		//IL_055e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0564: Unknown result type (might be due to invalid IL or missing references)
		//IL_0569: Unknown result type (might be due to invalid IL or missing references)
		//IL_0570: Unknown result type (might be due to invalid IL or missing references)
		//IL_0575: Unknown result type (might be due to invalid IL or missing references)
		//IL_057b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0586: Unknown result type (might be due to invalid IL or missing references)
		//IL_0596: Unknown result type (might be due to invalid IL or missing references)
		//IL_059c: Unknown result type (might be due to invalid IL or missing references)
		//IL_059e: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_029c: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02df: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_031a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0324: Unknown result type (might be due to invalid IL or missing references)
		//IL_0329: Unknown result type (might be due to invalid IL or missing references)
		//IL_0330: Unknown result type (might be due to invalid IL or missing references)
		//IL_0336: Unknown result type (might be due to invalid IL or missing references)
		//IL_0340: Unknown result type (might be due to invalid IL or missing references)
		//IL_0345: Unknown result type (might be due to invalid IL or missing references)
		//IL_034a: Unknown result type (might be due to invalid IL or missing references)
		if (ai[1] < 0f || ai[1] > 200f)
		{
			Kill();
			return;
		}
		NPC nPC = Main.npc[(int)ai[1]];
		float num = -8f;
		Vector2 center = nPC.Center + Utils.RotatedBy(new Vector2((110f + num) * (float)nPC.spriteDirection, 30f), nPC.rotation);
		base.Center = center;
		rotation = nPC.DirectionTo(base.Center).ToRotation();
		DelegateMethods.v3_1 = new Vector3(1.2f, 1f, 0.3f);
		float num2 = ai[0] / 40f;
		if (num2 > 1f)
		{
			num2 = 1f;
		}
		float num3 = (ai[0] - 38f) / 40f;
		if (num3 < 0f)
		{
			num3 = 0f;
		}
		Utils.PlotTileLine(base.Center + rotation.ToRotationVector2() * 400f * num3, base.Center + rotation.ToRotationVector2() * 400f * num2, 16f, DelegateMethods.CastLight);
		Utils.PlotTileLine(base.Center + rotation.ToRotationVector2().RotatedBy(0.19634954631328583) * 400f * num3, base.Center + rotation.ToRotationVector2().RotatedBy(0.19634954631328583) * 400f * num2, 16f, DelegateMethods.CastLight);
		Utils.PlotTileLine(base.Center + rotation.ToRotationVector2().RotatedBy(-0.19634954631328583) * 400f * num3, base.Center + rotation.ToRotationVector2().RotatedBy(-0.19634954631328583) * 400f * num2, 16f, DelegateMethods.CastLight);
		if (num3 == 0f && num2 > 0.1f)
		{
			for (int i = 0; i < 3; i++)
			{
				Dust dust = Dust.NewDustDirect(position, width, height, 6);
				dust.fadeIn = 1.5f;
				dust.velocity = rotation.ToRotationVector2().RotatedBy(Main.rand.NextFloatDirection() * ((float)Math.PI / 12f)) * (0.5f + Main.rand.NextFloat() * 2.5f) * 15f;
				dust.velocity += nPC.velocity * 2f;
				dust.noLight = true;
				dust.noGravity = true;
				dust.alpha = 200;
			}
		}
		if (Main.rand.Next(5) == 0 && ai[0] >= 15f)
		{
			Gore gore = Gore.NewGoreDirect(base.Center + rotation.ToRotationVector2() * 300f - Utils.RandomVector2(Main.rand, -20f, 20f), Vector2.Zero, 61 + Main.rand.Next(3), 0.5f);
			gore.velocity *= 0.3f;
			gore.velocity += rotation.ToRotationVector2() * 4f;
		}
		for (int j = 0; j < 1; j++)
		{
			Dust dust2 = Dust.NewDustDirect(position, width, height, 31);
			dust2.fadeIn = 1.5f;
			dust2.scale = 0.4f;
			dust2.velocity = rotation.ToRotationVector2().RotatedBy(Main.rand.NextFloatDirection() * ((float)Math.PI / 12f)) * (0.5f + Main.rand.NextFloat() * 2.5f) * 15f;
			dust2.velocity += nPC.velocity * 2f;
			dust2.velocity *= 0.3f;
			dust2.noLight = true;
			dust2.noGravity = true;
			float num4 = Main.rand.NextFloat();
			dust2.position = Vector2.Lerp(base.Center + rotation.ToRotationVector2() * 400f * num3, base.Center + rotation.ToRotationVector2() * 400f * num2, num4);
			dust2.position += rotation.ToRotationVector2().RotatedBy(1.5707963705062866) * (20f + 100f * (num4 - 0.5f));
		}
		frameCounter++;
		ai[0] += 1f;
		if (ai[0] >= 78f)
		{
			Kill();
		}
	}

	private void AI_137_LightningAura()
	{
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_013c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0141: Unknown result type (might be due to invalid IL or missing references)
		//IL_0333: Unknown result type (might be due to invalid IL or missing references)
		//IL_0338: Unknown result type (might be due to invalid IL or missing references)
		//IL_033e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0343: Unknown result type (might be due to invalid IL or missing references)
		//IL_034d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0352: Unknown result type (might be due to invalid IL or missing references)
		//IL_0358: Unknown result type (might be due to invalid IL or missing references)
		//IL_035d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0367: Unknown result type (might be due to invalid IL or missing references)
		//IL_036c: Unknown result type (might be due to invalid IL or missing references)
		//IL_038b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0189: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Unknown result type (might be due to invalid IL or missing references)
		//IL_0199: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0232: Unknown result type (might be due to invalid IL or missing references)
		//IL_023c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0241: Unknown result type (might be due to invalid IL or missing references)
		//IL_0243: Unknown result type (might be due to invalid IL or missing references)
		//IL_024f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0254: Unknown result type (might be due to invalid IL or missing references)
		//IL_025c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0263: Unknown result type (might be due to invalid IL or missing references)
		//IL_026b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_020d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0214: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0404: Unknown result type (might be due to invalid IL or missing references)
		//IL_0409: Unknown result type (might be due to invalid IL or missing references)
		//IL_040e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0410: Unknown result type (might be due to invalid IL or missing references)
		//IL_041b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0432: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_043b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0452: Unknown result type (might be due to invalid IL or missing references)
		//IL_0458: Unknown result type (might be due to invalid IL or missing references)
		//IL_0468: Unknown result type (might be due to invalid IL or missing references)
		//IL_046a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0471: Unknown result type (might be due to invalid IL or missing references)
		//IL_0475: Unknown result type (might be due to invalid IL or missing references)
		//IL_047a: Unknown result type (might be due to invalid IL or missing references)
		//IL_047f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0484: Unknown result type (might be due to invalid IL or missing references)
		//IL_0489: Unknown result type (might be due to invalid IL or missing references)
		//IL_050a: Unknown result type (might be due to invalid IL or missing references)
		//IL_050f: Unknown result type (might be due to invalid IL or missing references)
		//IL_051c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0521: Unknown result type (might be due to invalid IL or missing references)
		//IL_0530: Unknown result type (might be due to invalid IL or missing references)
		//IL_0535: Unknown result type (might be due to invalid IL or missing references)
		//IL_053a: Unknown result type (might be due to invalid IL or missing references)
		//IL_053c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0547: Unknown result type (might be due to invalid IL or missing references)
		//IL_055b: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0603: Unknown result type (might be due to invalid IL or missing references)
		//IL_0608: Unknown result type (might be due to invalid IL or missing references)
		//IL_062d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0633: Unknown result type (might be due to invalid IL or missing references)
		//IL_0641: Unknown result type (might be due to invalid IL or missing references)
		//IL_064b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0650: Unknown result type (might be due to invalid IL or missing references)
		//IL_0657: Unknown result type (might be due to invalid IL or missing references)
		//IL_065c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0666: Unknown result type (might be due to invalid IL or missing references)
		//IL_066b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0670: Unknown result type (might be due to invalid IL or missing references)
		//IL_0564: Unknown result type (might be due to invalid IL or missing references)
		//IL_057b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0581: Unknown result type (might be due to invalid IL or missing references)
		//IL_058f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0599: Unknown result type (might be due to invalid IL or missing references)
		//IL_059e: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_05be: Unknown result type (might be due to invalid IL or missing references)
		int num = 10;
		int num2 = 999;
		int num3 = 30;
		int num4 = 40;
		int num5 = 4;
		knockBack = 0f;
		if (Main.player[owner].setMonkT2)
		{
			num3 -= 5;
		}
		if (Main.player[owner].setMonkT3)
		{
			num = 14;
			num5 = 8;
		}
		ai[0] += 1f;
		if (ai[0] >= (float)num3)
		{
			ai[0] = 0f;
		}
		if (ai[0] == 0f)
		{
			bool flag = false;
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.CanBeChasedBy(this) && nPC.Hitbox.Distance(base.Center) < (float)(width / 2) && Colliding(base.Hitbox, nPC.Hitbox))
				{
					flag = true;
					break;
				}
			}
			if (flag)
			{
				SoundEngine.PlayTrackedSound(in SoundID.DD2_LightningAuraZap, base.Center);
			}
		}
		if (localAI[0] == 0f)
		{
			localAI[0] = 1f;
			velocity = Vector2.Zero;
			Point origin = base.Center.ToTileCoordinates();
			bool flag2 = true;
			if (!WorldUtils.Find(origin, Searches.Chain(new Searches.Down(500), _cachedConditions_notNull, _cachedConditions_solid), out var result))
			{
				flag2 = false;
				position.Y += 16f;
				return;
			}
			if (!WorldUtils.Find(new Point(result.X, result.Y - 1), Searches.Chain(new Searches.Up(num), _cachedConditions_notNull, _cachedConditions_solid), out var result2))
			{
				((Point)(ref result2))._002Ector(origin.X, origin.Y - num - 1);
			}
			int num6 = 0;
			if (flag2 && Main.tile[result.X, result.Y] != null && Main.tile[result.X, result.Y].blockType() == 1)
			{
				num6 += 8;
			}
			Vector2 center = result.ToWorldCoordinates(8f, num6);
			Vector2 vector = result2.ToWorldCoordinates(8f, 0f);
			base.Size = new Vector2(1f, center.Y - vector.Y);
			if (height > num * 16)
			{
				height = num * 16;
			}
			if (height < num5 * 16)
			{
				height = num5 * 16;
			}
			height *= 2;
			width = (int)((float)height * 1f);
			if (width > num2)
			{
				width = num2;
			}
			base.Center = center;
		}
		if (++frameCounter >= 8)
		{
			frameCounter = 0;
			if (++frame >= Main.projFrames[type])
			{
				frame = 0;
			}
		}
		DelegateMethods.v3_1 = new Vector3(0.2f, 0.7f, 1f);
		Utils.PlotTileLine(base.Center + Vector2.UnitX * -40f, base.Center + Vector2.UnitX * 40f, 80f, DelegateMethods.CastLightOpen);
		Vector2 vector2 = default(Vector2);
		((Vector2)(ref vector2))._002Ector(base.Top.X, position.Y + (float)num4);
		for (int j = 0; j < 4; j++)
		{
			if (Main.rand.Next(6) != 0)
			{
				continue;
			}
			Vector2 vector3 = Main.rand.NextVector2Unit();
			if (!(Math.Abs(vector3.X) < 0.12f))
			{
				Vector2 targetPosition = base.Center + vector3 * new Vector2((float)((height - num4) / 2));
				if (!WorldGen.SolidTile((int)targetPosition.X / 16, (int)targetPosition.Y / 16) && AI_137_CanHit(targetPosition))
				{
					Dust dust = Dust.NewDustDirect(targetPosition, 0, 0, 226, 0f, 0f, 100);
					dust.position = targetPosition;
					dust.velocity = (vector2 - dust.position).SafeNormalize(Vector2.Zero);
					dust.scale = 0.7f;
					dust.fadeIn = 1f;
					dust.noGravity = true;
					dust.noLight = true;
				}
			}
		}
		for (int k = 0; k < 0; k++)
		{
			if (Main.rand.Next(10) != 0)
			{
				continue;
			}
			Vector2 vector4 = Main.rand.NextVector2Unit();
			if (!(Math.Abs(vector4.X) < 0.12f))
			{
				Vector2 targetPosition2 = base.Center + vector4 * new Vector2((float)((height - num4) / 2)) * Main.rand.NextFloat();
				if (!WorldGen.SolidTile((int)targetPosition2.X / 16, (int)targetPosition2.Y / 16) && AI_137_CanHit(targetPosition2))
				{
					Dust dust2 = Dust.NewDustDirect(targetPosition2, 0, 0, 226, 0f, 0f, 100);
					dust2.velocity *= 0.6f;
					dust2.velocity += Vector2.UnitY * -2f;
					dust2.noGravity = true;
					dust2.noLight = true;
				}
			}
		}
		for (int l = 0; l < 4; l++)
		{
			if (Main.rand.Next(10) == 0)
			{
				Dust dust3 = Dust.NewDustDirect(vector2 - new Vector2(8f, 0f), 16, height / 2 - 40, 226, 0f, 0f, 100);
				dust3.velocity *= 0.6f;
				dust3.velocity += Vector2.UnitY * -2f;
				dust3.scale = 0.7f;
				dust3.noGravity = true;
				dust3.noLight = true;
			}
		}
		tileCollide = true;
		velocity.Y += 0.2f;
	}

	private void AI_138_ExplosiveTrap()
	{
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_014a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0194: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ab: Unknown result type (might be due to invalid IL or missing references)
		spriteDirection = (direction = 1);
		int num = 694;
		int num2 = 48;
		int explosiveTrapCooldown = GetExplosiveTrapCooldown(Main.player[owner]);
		switch (type)
		{
		case 692:
			num = 695;
			break;
		case 693:
			num = 696;
			break;
		}
		Lighting.AddLight(base.Center, 0.6f, 0.5f, 0.3f);
		if (++frameCounter >= 12)
		{
			frameCounter = 0;
			if (++frame >= Main.projFrames[type])
			{
				frame = 0;
			}
		}
		if (localAI[0] > 0f)
		{
			localAI[0] -= 1f;
		}
		if (localAI[0] <= 0f && owner == Main.myPlayer)
		{
			localAI[0] = 3f;
			bool flag = false;
			Rectangle rectangle = Utils.CenteredRectangle(base.Center + new Vector2(0f, (float)(-num2)), new Vector2((float)(num2 * 3)));
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.CanBeChasedBy(this) && ((Rectangle)(ref rectangle)).Intersects(nPC.Hitbox))
				{
					flag = true;
					break;
				}
			}
			if (flag)
			{
				SoundEngine.PlayTrackedSound(in SoundID.DD2_ExplosiveTrapExplode);
				localAI[0] = explosiveTrapCooldown;
				NewProjectile(GetProjectileSource_FromThis(), base.Center + new Vector2(0f, (float)(-num2)), Vector2.Zero, num, damage, knockBack, owner);
			}
		}
		tileCollide = true;
		velocity.Y += 0.2f;
	}

	public static int GetExplosiveTrapCooldown(Player player)
	{
		int result = 90;
		if (player.setHuntressT2)
		{
			result = 60;
		}
		if (player.setHuntressT3)
		{
			result = 30;
		}
		return result;
	}

	private void AI_139_ExplosiveTrapExplosion()
	{
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		int num = Main.projFrames[type];
		int num2 = 3;
		alpha -= 25;
		if (alpha < 0)
		{
			alpha = 0;
		}
		if (localAI[0] == 0f)
		{
			localAI[0] = 1f;
		}
		if (++frameCounter >= num2)
		{
			frameCounter = 0;
			if (++frame >= num)
			{
				Kill();
				return;
			}
		}
		DelegateMethods.v3_1 = new Vector3(1.3f, 0.9f, 0.2f);
		Utils.PlotTileLine(base.Top, base.Bottom, 2f, DelegateMethods.CastLightOpen);
	}

	private void AI_140_MonkStaffT1()
	{
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_0991: Unknown result type (might be due to invalid IL or missing references)
		//IL_0994: Unknown result type (might be due to invalid IL or missing references)
		//IL_099e: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_09af: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_09bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_053e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0572: Unknown result type (might be due to invalid IL or missing references)
		//IL_0577: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_059b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_018f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0676: Unknown result type (might be due to invalid IL or missing references)
		//IL_067b: Unknown result type (might be due to invalid IL or missing references)
		//IL_067e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0680: Unknown result type (might be due to invalid IL or missing references)
		//IL_0210: Unknown result type (might be due to invalid IL or missing references)
		//IL_021f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0225: Unknown result type (might be due to invalid IL or missing references)
		//IL_022a: Unknown result type (might be due to invalid IL or missing references)
		//IL_022d: Unknown result type (might be due to invalid IL or missing references)
		//IL_070f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0714: Unknown result type (might be due to invalid IL or missing references)
		//IL_0717: Unknown result type (might be due to invalid IL or missing references)
		//IL_0719: Unknown result type (might be due to invalid IL or missing references)
		//IL_0723: Unknown result type (might be due to invalid IL or missing references)
		//IL_0246: Unknown result type (might be due to invalid IL or missing references)
		//IL_0250: Unknown result type (might be due to invalid IL or missing references)
		//IL_0255: Unknown result type (might be due to invalid IL or missing references)
		//IL_025a: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_074f: Unknown result type (might be due to invalid IL or missing references)
		//IL_075e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0764: Unknown result type (might be due to invalid IL or missing references)
		//IL_0769: Unknown result type (might be due to invalid IL or missing references)
		//IL_076c: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_06bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0269: Unknown result type (might be due to invalid IL or missing references)
		//IL_0270: Unknown result type (might be due to invalid IL or missing references)
		//IL_0275: Unknown result type (might be due to invalid IL or missing references)
		//IL_029d: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02db: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0320: Unknown result type (might be due to invalid IL or missing references)
		//IL_0326: Unknown result type (might be due to invalid IL or missing references)
		//IL_0339: Unknown result type (might be due to invalid IL or missing references)
		//IL_033e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0348: Unknown result type (might be due to invalid IL or missing references)
		//IL_034f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0359: Unknown result type (might be due to invalid IL or missing references)
		//IL_035e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0363: Unknown result type (might be due to invalid IL or missing references)
		//IL_0380: Unknown result type (might be due to invalid IL or missing references)
		//IL_0385: Unknown result type (might be due to invalid IL or missing references)
		//IL_0785: Unknown result type (might be due to invalid IL or missing references)
		//IL_078f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0794: Unknown result type (might be due to invalid IL or missing references)
		//IL_0799: Unknown result type (might be due to invalid IL or missing references)
		//IL_079d: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_07bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_07be: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07de: Unknown result type (might be due to invalid IL or missing references)
		//IL_0806: Unknown result type (might be due to invalid IL or missing references)
		//IL_080c: Unknown result type (might be due to invalid IL or missing references)
		//IL_081f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0824: Unknown result type (might be due to invalid IL or missing references)
		//IL_082e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0835: Unknown result type (might be due to invalid IL or missing references)
		//IL_083f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0844: Unknown result type (might be due to invalid IL or missing references)
		//IL_0849: Unknown result type (might be due to invalid IL or missing references)
		//IL_04bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0505: Unknown result type (might be due to invalid IL or missing references)
		//IL_0485: Unknown result type (might be due to invalid IL or missing references)
		//IL_0487: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0409: Unknown result type (might be due to invalid IL or missing references)
		//IL_040e: Unknown result type (might be due to invalid IL or missing references)
		//IL_043a: Unknown result type (might be due to invalid IL or missing references)
		//IL_043f: Unknown result type (might be due to invalid IL or missing references)
		//IL_051d: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_08cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0901: Unknown result type (might be due to invalid IL or missing references)
		//IL_0908: Unknown result type (might be due to invalid IL or missing references)
		//IL_090d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0912: Unknown result type (might be due to invalid IL or missing references)
		//IL_0919: Unknown result type (might be due to invalid IL or missing references)
		//IL_0931: Unknown result type (might be due to invalid IL or missing references)
		//IL_0938: Unknown result type (might be due to invalid IL or missing references)
		//IL_093f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0944: Unknown result type (might be due to invalid IL or missing references)
		float num = 50f;
		float num9 = 2f;
		float num10 = 20f;
		Player player = Main.player[owner];
		float num11 = -(float)Math.PI / 4f;
		Vector2 vector = player.RotatedRelativePoint(player.MountedCenter);
		Vector2 vector2 = Vector2.Zero;
		if (player.dead)
		{
			Kill();
			return;
		}
		if (type == 697)
		{
			int num12 = damage * 3;
			int num13 = Math.Sign(velocity.X);
			velocity = new Vector2((float)num13, 0f);
			if (ai[0] == 0f)
			{
				rotation = Utils.ToRotation(new Vector2((float)num13, 0f - player.gravDir)) + num11 + (float)Math.PI;
				if (velocity.X < 0f)
				{
					rotation -= (float)Math.PI / 2f;
				}
			}
			alpha -= 128;
			if (alpha < 0)
			{
				alpha = 0;
			}
			float num16 = ai[0] / num;
			float num14 = 1f;
			ai[0] += num14;
			rotation += (float)Math.PI * 2f * num9 / num * (float)num13;
			bool flag = ai[0] == (float)(int)(num / 2f);
			if (ai[0] >= num || (flag && !player.controlUseItem))
			{
				Kill();
				player.reuseDelay = 10;
			}
			else if (flag)
			{
				Vector2 mouseWorld = Main.MouseWorld;
				int num15 = ((player.DirectionTo(mouseWorld).X > 0f) ? 1 : (-1));
				if ((float)num15 != velocity.X)
				{
					player.ChangeDir(num15);
					velocity = new Vector2((float)num15, 0f);
					netUpdate = true;
					rotation -= (float)Math.PI;
				}
			}
			float num2 = rotation - (float)Math.PI / 4f * (float)num13;
			vector2 = (num2 + ((num13 == -1) ? ((float)Math.PI) : 0f)).ToRotationVector2() * (ai[0] / num) * num10;
			Vector2 vector3 = base.Center + (num2 + ((num13 == -1) ? ((float)Math.PI) : 0f)).ToRotationVector2() * 30f;
			if (Main.rand.Next(2) == 0)
			{
				Dust dust = Dust.NewDustDirect(vector3 - new Vector2(5f), 10, 10, 31, player.velocity.X, player.velocity.Y, 150);
				dust.velocity = DirectionTo(dust.position) * 0.1f + dust.velocity * 0.1f;
			}
			if (num16 >= 0.75f)
			{
				Dust dust2 = Dust.NewDustDirect(vector3 - new Vector2(5f), 10, 10, 55, player.velocity.X, player.velocity.Y, 50);
				dust2.velocity = DirectionTo(dust2.position) * 0.1f + dust2.velocity * 0.1f;
				dust2.noGravity = true;
				dust2.color = new Color(20, 255, 100, 160);
			}
			if (ai[0] >= num - 8f && ai[0] < num - 2f)
			{
				for (int i = 0; i < 5; i++)
				{
					Dust dust5 = Dust.NewDustDirect(vector3 - new Vector2(5f), 10, 10, 55, player.velocity.X, player.velocity.Y, 50);
					dust5.velocity *= 1.2f;
					dust5.noGravity = true;
					dust5.scale += 0.1f;
					dust5.color = new Color(20, 255, 100, 160);
				}
			}
			if (ai[0] == num - 3f && owner == Main.myPlayer)
			{
				if (localAI[1] == 1f || WorldUtils.Find(vector3.ToTileCoordinates(), Searches.Chain(new Searches.Down(4), _cachedConditions_notNull, _cachedConditions_solid), out var _))
				{
					NewProjectile(GetProjectileSource_FromThis(), vector3 + new Vector2((float)(num13 * 20), -60f), Vector2.Zero, 698, num12, 0f, owner);
					SoundEngine.PlayTrackedSound(in SoundID.DD2_MonkStaffGroundImpact, base.Center);
				}
				else
				{
					SoundEngine.PlayTrackedSound(in SoundID.DD2_MonkStaffGroundMiss, base.Center);
				}
			}
		}
		if (type == 707)
		{
			Lighting.AddLight(player.Center, 0.75f, 0.9f, 1.15f);
			int num3 = Math.Sign(velocity.X);
			velocity = new Vector2((float)num3, 0f);
			if (ai[0] == 0f)
			{
				rotation = Utils.ToRotation(new Vector2((float)num3, 0f - player.gravDir)) + num11 + (float)Math.PI;
				if (velocity.X < 0f)
				{
					rotation -= (float)Math.PI / 2f;
				}
			}
			alpha -= 128;
			if (alpha < 0)
			{
				alpha = 0;
			}
			_ = ai[0] / num;
			float num4 = 1f;
			ai[0] += num4;
			rotation += (float)Math.PI * 2f * num9 / num * (float)num3;
			bool flag2 = ai[0] == (float)(int)(num / 2f);
			if (ai[0] >= num || (flag2 && !player.controlUseItem))
			{
				Kill();
				player.reuseDelay = 2;
			}
			else if (flag2)
			{
				Vector2 mouseWorld2 = Main.MouseWorld;
				int num5 = ((player.DirectionTo(mouseWorld2).X > 0f) ? 1 : (-1));
				if ((float)num5 != velocity.X)
				{
					player.ChangeDir(num5);
					velocity = new Vector2((float)num5, 0f);
					netUpdate = true;
					rotation -= (float)Math.PI;
				}
			}
			if ((ai[0] == num4 || (ai[0] == (float)(int)(num / 2f) && active)) && owner == Main.myPlayer)
			{
				Vector2 mouseWorld3 = Main.MouseWorld;
				_ = player.DirectionTo(mouseWorld3) * 0f;
			}
			float num6 = rotation - (float)Math.PI / 4f * (float)num3;
			vector2 = (num6 + ((num3 == -1) ? ((float)Math.PI) : 0f)).ToRotationVector2() * (ai[0] / num) * num10;
			Vector2 vector4 = base.Center + (num6 + ((num3 == -1) ? ((float)Math.PI) : 0f)).ToRotationVector2() * 30f;
			Vector2 vector5 = num6.ToRotationVector2();
			Vector2 vector6 = vector5.RotatedBy((float)Math.PI / 2f * (float)spriteDirection);
			if (Main.rand.Next(2) == 0)
			{
				Dust dust3 = Dust.NewDustDirect(vector4 - new Vector2(5f), 10, 10, 31, player.velocity.X, player.velocity.Y, 150);
				dust3.velocity = DirectionTo(dust3.position) * 0.1f + dust3.velocity * 0.1f;
			}
			for (int j = 0; j < 4; j++)
			{
				float num7 = 1f;
				float num8 = 1f;
				switch (j)
				{
				case 1:
					num8 = -1f;
					break;
				case 2:
					num8 = 1.25f;
					num7 = 0.5f;
					break;
				case 3:
					num8 = -1.25f;
					num7 = 0.5f;
					break;
				}
				if (Main.rand.Next(6) != 0)
				{
					Dust dust4 = Dust.NewDustDirect(position, 0, 0, 226, 0f, 0f, 100);
					dust4.position = base.Center + vector5 * (60f + Main.rand.NextFloat() * 20f) * num8;
					dust4.velocity = vector6 * (4f + 4f * Main.rand.NextFloat()) * num8 * num7;
					dust4.noGravity = true;
					dust4.noLight = true;
					dust4.scale = 0.5f;
					dust4.customData = this;
					if (Main.rand.Next(4) == 0)
					{
						dust4.noGravity = false;
					}
				}
			}
		}
		position = vector - base.Size / 2f;
		position += vector2;
		spriteDirection = direction;
		timeLeft = 2;
		player.ChangeDir(direction);
		player.heldProj = whoAmI;
		player.SetDummyItemTime(2);
		player.itemRotation = MathHelper.WrapAngle(rotation);
	}

	private void AI_141_MonkStaffT1Explosion()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		Point scanAreaStart = base.TopLeft.ToTileCoordinates();
		Point scanAreaEnd = base.BottomRight.ToTileCoordinates();
		_ = scanAreaStart.X / 2;
		_ = scanAreaEnd.X / 2;
		int explosionRange = width;
		ai[0] += 1f;
		if (ai[0] > 20f)
		{
			Kill();
		}
		else if (ai[0] == 1f)
		{
			CreateImpactExplosion(6, base.Bottom, ref scanAreaStart, ref scanAreaEnd, explosionRange, out var causedShockwaves);
			CreateImpactExplosion2_SleepyOctopod(base.Bottom, causedShockwaves);
		}
	}

	public void CreateImpactExplosion(int dustAmountMultiplier, Vector2 explosionOrigin, ref Point scanAreaStart, ref Point scanAreaEnd, int explosionRange, out bool causedShockwaves)
	{
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		causedShockwaves = false;
		int num = 4;
		for (int i = scanAreaStart.X; i <= scanAreaEnd.X; i++)
		{
			for (int j = scanAreaStart.Y; j <= scanAreaEnd.Y; j++)
			{
				if (Vector2.Distance(explosionOrigin, new Vector2((float)(i * 16), (float)(j * 16))) > (float)explosionRange)
				{
					continue;
				}
				Tile tileSafely = Framing.GetTileSafely(i, j);
				if (!tileSafely.active() || !Main.tileSolid[tileSafely.type] || Main.tileSolidTop[tileSafely.type] || Main.tileFrameImportant[tileSafely.type])
				{
					continue;
				}
				Tile tileSafely2 = Framing.GetTileSafely(i, j - 1);
				if (tileSafely2.active() && Main.tileSolid[tileSafely2.type] && !Main.tileSolidTop[tileSafely2.type])
				{
					continue;
				}
				int num2 = WorldGen.KillTile_GetTileDustAmount(fail: true, tileSafely, i, j) * dustAmountMultiplier;
				for (int k = 0; k < num2; k++)
				{
					Dust obj = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
					obj.velocity.Y -= 3f + (float)num * 1.5f;
					obj.velocity.Y *= Main.rand.NextFloat();
					obj.scale += (float)num * 0.03f;
				}
				if (num >= 2)
				{
					for (int l = 0; l < num2 - 1; l++)
					{
						Dust obj2 = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
						obj2.velocity.Y -= 1f + (float)num;
						obj2.velocity.Y *= Main.rand.NextFloat();
					}
				}
				if (num2 > 0)
				{
					causedShockwaves = true;
				}
			}
		}
	}

	private void CreateImpactExplosion2_SleepyOctopod(Vector2 explosionOrigin, bool causedShockwaves)
	{
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_013c: Unknown result type (might be due to invalid IL or missing references)
		//IL_014e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0154: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		//IL_015c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_0164: Unknown result type (might be due to invalid IL or missing references)
		//IL_0184: Unknown result type (might be due to invalid IL or missing references)
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_019f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ae: Unknown result type (might be due to invalid IL or missing references)
		Vector2 spinningpoint = default(Vector2);
		((Vector2)(ref spinningpoint))._002Ector(7f, 0f);
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector(1f, 0.7f);
		Color color = default(Color);
		((Color)(ref color))._002Ector(20, 255, 100, 200);
		for (float num = 0f; num < 25f; num += 1f)
		{
			Vector2 vector2 = spinningpoint.RotatedBy(num * ((float)Math.PI * 2f) / 25f) * vector;
			Dust dust = Dust.NewDustDirect(position, width, height, 55);
			dust.alpha = 0;
			if (!causedShockwaves)
			{
				dust.alpha = 50;
			}
			dust.color = color;
			dust.position = explosionOrigin + vector2;
			dust.velocity.Y -= 3f;
			dust.velocity.X *= 0.5f;
			dust.fadeIn = 0.5f + Main.rand.NextFloat() * 0.5f;
			dust.noLight = true;
		}
		if (!causedShockwaves)
		{
			for (float num2 = 0f; num2 < 25f; num2 += 1f)
			{
				Vector2 vector3 = spinningpoint.RotatedBy(num2 * ((float)Math.PI * 2f) / 25f) * vector;
				Dust dust2 = Dust.NewDustDirect(position, width, height, 55);
				dust2.alpha = 100;
				dust2.color = color;
				dust2.position = explosionOrigin + vector3;
				dust2.velocity.Y -= 5f;
				dust2.velocity.X *= 0.8f;
				dust2.fadeIn = 0.5f + Main.rand.NextFloat() * 0.5f;
				dust2.noLight = true;
			}
		}
	}

	public void CreateImpactExplosion2_FlailTileCollision(Vector2 explosionOrigin, bool causedShockwaves, Vector2 velocityBeforeCollision)
	{
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0134: Unknown result type (might be due to invalid IL or missing references)
		//IL_013a: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0144: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_0183: Unknown result type (might be due to invalid IL or missing references)
		//IL_0189: Unknown result type (might be due to invalid IL or missing references)
		//IL_018b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Unknown result type (might be due to invalid IL or missing references)
		//IL_0191: Unknown result type (might be due to invalid IL or missing references)
		//IL_0196: Unknown result type (might be due to invalid IL or missing references)
		//IL_0199: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01db: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01de: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_023f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0244: Unknown result type (might be due to invalid IL or missing references)
		//IL_024a: Unknown result type (might be due to invalid IL or missing references)
		//IL_024f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0254: Unknown result type (might be due to invalid IL or missing references)
		Vector2 spinningpoint = default(Vector2);
		((Vector2)(ref spinningpoint))._002Ector(7f, 0f);
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector(1f, 0.7f);
		Color color = Color.White * 0.5f;
		Vector2 vector2 = velocityBeforeCollision.SafeNormalize(Vector2.Zero);
		for (float num = 0f; num < 8f; num += 1f)
		{
			Vector2 vector3 = spinningpoint.RotatedBy(num * ((float)Math.PI * 2f) / 8f) * vector;
			Dust dust = Dust.NewDustDirect(position, width, height, 31);
			dust.alpha = 0;
			if (!causedShockwaves)
			{
				dust.alpha = 50;
			}
			dust.color = color;
			dust.position = explosionOrigin + vector3;
			dust.velocity.Y -= 0.8f;
			dust.velocity.X *= 0.8f;
			dust.fadeIn = 0.3f + Main.rand.NextFloat() * 0.4f;
			dust.scale = 0.4f;
			dust.noLight = true;
			dust.velocity += vector2 * 2f;
		}
		if (!causedShockwaves)
		{
			for (float num2 = 0f; num2 < 8f; num2 += 1f)
			{
				Vector2 vector4 = spinningpoint.RotatedBy(num2 * ((float)Math.PI * 2f) / 8f) * vector;
				Dust dust2 = Dust.NewDustDirect(position, width, height, 31);
				dust2.alpha = 100;
				dust2.color = color;
				dust2.position = explosionOrigin + vector4;
				dust2.velocity.Y -= 1f;
				dust2.velocity.X *= 0.4f;
				dust2.fadeIn = 0.3f + Main.rand.NextFloat() * 0.4f;
				dust2.scale = 0.4f;
				dust2.noLight = true;
				dust2.velocity += vector2 * 1.5f;
			}
		}
	}

	private void AI_142_MonkStaffT2And3()
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_041e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0489: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0500: Unknown result type (might be due to invalid IL or missing references)
		//IL_0502: Unknown result type (might be due to invalid IL or missing references)
		//IL_0511: Unknown result type (might be due to invalid IL or missing references)
		//IL_051b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0521: Unknown result type (might be due to invalid IL or missing references)
		//IL_0523: Unknown result type (might be due to invalid IL or missing references)
		//IL_0528: Unknown result type (might be due to invalid IL or missing references)
		//IL_052d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0532: Unknown result type (might be due to invalid IL or missing references)
		//IL_0537: Unknown result type (might be due to invalid IL or missing references)
		//IL_0538: Unknown result type (might be due to invalid IL or missing references)
		//IL_053f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0545: Unknown result type (might be due to invalid IL or missing references)
		//IL_0547: Unknown result type (might be due to invalid IL or missing references)
		//IL_054c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0561: Unknown result type (might be due to invalid IL or missing references)
		//IL_056b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0571: Unknown result type (might be due to invalid IL or missing references)
		//IL_0573: Unknown result type (might be due to invalid IL or missing references)
		//IL_0578: Unknown result type (might be due to invalid IL or missing references)
		//IL_057d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0580: Unknown result type (might be due to invalid IL or missing references)
		//IL_0582: Unknown result type (might be due to invalid IL or missing references)
		//IL_0583: Unknown result type (might be due to invalid IL or missing references)
		//IL_0588: Unknown result type (might be due to invalid IL or missing references)
		//IL_058d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_013c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_014c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0152: Unknown result type (might be due to invalid IL or missing references)
		//IL_0154: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0173: Unknown result type (might be due to invalid IL or missing references)
		//IL_0175: Unknown result type (might be due to invalid IL or missing references)
		//IL_017a: Unknown result type (might be due to invalid IL or missing references)
		//IL_017f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0184: Unknown result type (might be due to invalid IL or missing references)
		//IL_0189: Unknown result type (might be due to invalid IL or missing references)
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0191: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		//IL_0199: Unknown result type (might be due to invalid IL or missing references)
		//IL_019e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_05dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_05de: Unknown result type (might be due to invalid IL or missing references)
		//IL_05df: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0208: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_020f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0215: Unknown result type (might be due to invalid IL or missing references)
		//IL_0216: Unknown result type (might be due to invalid IL or missing references)
		//IL_0218: Unknown result type (might be due to invalid IL or missing references)
		//IL_021d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0220: Unknown result type (might be due to invalid IL or missing references)
		//IL_0225: Unknown result type (might be due to invalid IL or missing references)
		//IL_022a: Unknown result type (might be due to invalid IL or missing references)
		//IL_022f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0630: Unknown result type (might be due to invalid IL or missing references)
		//IL_0641: Unknown result type (might be due to invalid IL or missing references)
		//IL_0646: Unknown result type (might be due to invalid IL or missing references)
		//IL_064b: Unknown result type (might be due to invalid IL or missing references)
		//IL_064d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0654: Unknown result type (might be due to invalid IL or missing references)
		//IL_0659: Unknown result type (might be due to invalid IL or missing references)
		//IL_0241: Unknown result type (might be due to invalid IL or missing references)
		//IL_025d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0263: Unknown result type (might be due to invalid IL or missing references)
		//IL_0273: Unknown result type (might be due to invalid IL or missing references)
		//IL_0276: Unknown result type (might be due to invalid IL or missing references)
		//IL_027b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0285: Unknown result type (might be due to invalid IL or missing references)
		//IL_028a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0292: Unknown result type (might be due to invalid IL or missing references)
		//IL_0297: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0304: Unknown result type (might be due to invalid IL or missing references)
		//IL_0309: Unknown result type (might be due to invalid IL or missing references)
		//IL_030e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0675: Unknown result type (might be due to invalid IL or missing references)
		//IL_0682: Unknown result type (might be due to invalid IL or missing references)
		//IL_0688: Unknown result type (might be due to invalid IL or missing references)
		//IL_068a: Unknown result type (might be due to invalid IL or missing references)
		//IL_068f: Unknown result type (might be due to invalid IL or missing references)
		//IL_06cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0693: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_06be: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_06cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0344: Unknown result type (might be due to invalid IL or missing references)
		//IL_0360: Unknown result type (might be due to invalid IL or missing references)
		//IL_0366: Unknown result type (might be due to invalid IL or missing references)
		//IL_0376: Unknown result type (might be due to invalid IL or missing references)
		//IL_0379: Unknown result type (might be due to invalid IL or missing references)
		//IL_037e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0388: Unknown result type (might be due to invalid IL or missing references)
		//IL_038d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0395: Unknown result type (might be due to invalid IL or missing references)
		//IL_039a: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0790: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f5: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[owner];
		Vector2 vector = player.RotatedRelativePoint(player.MountedCenter);
		direction = player.direction;
		player.heldProj = whoAmI;
		base.Center = vector;
		if (player.dead)
		{
			Kill();
			return;
		}
		if (!player.frozen)
		{
			if (type == 699)
			{
				spriteDirection = (direction = player.direction);
				Vector2 vector2 = vector;
				alpha -= 127;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (localAI[0] > 0f)
				{
					localAI[0] -= 1f;
				}
				float num = (float)player.itemAnimation / (float)player.itemAnimationMax;
				float num6 = 1f - num;
				float num7 = velocity.ToRotation();
				float num8 = ((Vector2)(ref velocity)).Length();
				float num9 = 22f;
				Vector2 spinningpoint = Utils.RotatedBy(new Vector2(1f, 0f), (float)Math.PI + num6 * ((float)Math.PI * 2f)) * new Vector2(num8, ai[0]);
				position += spinningpoint.RotatedBy(num7) + Utils.RotatedBy(new Vector2(num8 + num9, 0f), num7);
				Vector2 target = vector2 + spinningpoint.RotatedBy(num7) + Utils.RotatedBy(new Vector2(num8 + num9 + 40f, 0f), num7);
				rotation = vector2.AngleTo(target) + (float)Math.PI / 4f * (float)player.direction;
				if (spriteDirection == -1)
				{
					rotation += (float)Math.PI;
				}
				vector2.DirectionTo(base.Center);
				Vector2 vector3 = vector2.DirectionTo(target);
				Vector2 vector4 = velocity.SafeNormalize(Vector2.UnitY);
				float num10 = 2f;
				for (int i = 0; (float)i < num10; i++)
				{
					Dust dust = Dust.NewDustDirect(base.Center, 14, 14, 228, 0f, 0f, 110);
					dust.velocity = vector2.DirectionTo(dust.position) * 2f;
					dust.position = base.Center + vector4.RotatedBy(num6 * ((float)Math.PI * 2f) * 2f + (float)i / num10 * ((float)Math.PI * 2f)) * 10f;
					dust.scale = 1f + 0.6f * Main.rand.NextFloat();
					dust.velocity += vector4 * 3f;
					dust.noGravity = true;
				}
				for (int j = 0; j < 1; j++)
				{
					if (Main.rand.Next(3) == 0)
					{
						Dust dust2 = Dust.NewDustDirect(base.Center, 20, 20, 228, 0f, 0f, 110);
						dust2.velocity = vector2.DirectionTo(dust2.position) * 2f;
						dust2.position = base.Center + vector3 * -110f;
						dust2.scale = 0.45f + 0.4f * Main.rand.NextFloat();
						dust2.fadeIn = 0.7f + 0.4f * Main.rand.NextFloat();
						dust2.noGravity = true;
						dust2.noLight = true;
					}
				}
			}
			else if (type == 708)
			{
				Lighting.AddLight(player.Center, 0.75f, 0.9f, 1.15f);
				spriteDirection = (direction = player.direction);
				alpha -= 127;
				if (alpha < 0)
				{
					alpha = 0;
				}
				float num11 = (float)player.itemAnimation / (float)player.itemAnimationMax;
				float num12 = 1f - num11;
				float num13 = velocity.ToRotation();
				float num2 = ((Vector2)(ref velocity)).Length();
				float num3 = 22f;
				Vector2 spinningpoint2 = Utils.RotatedBy(new Vector2(1f, 0f), (float)Math.PI + num12 * ((float)Math.PI * 2f)) * new Vector2(num2, ai[0]);
				position += spinningpoint2.RotatedBy(num13) + Utils.RotatedBy(new Vector2(num2 + num3, 0f), num13);
				Vector2 vector5 = vector + spinningpoint2.RotatedBy(num13) + Utils.RotatedBy(new Vector2(num2 + num3 + 40f, 0f), num13);
				rotation = (vector5 - vector).SafeNormalize(Vector2.UnitX).ToRotation() + (float)Math.PI / 4f * (float)player.direction;
				if (spriteDirection == -1)
				{
					rotation += (float)Math.PI;
				}
				(base.Center - vector).SafeNormalize(Vector2.Zero);
				(vector5 - vector).SafeNormalize(Vector2.Zero);
				Vector2 vector6 = velocity.SafeNormalize(Vector2.UnitY);
				if ((player.itemAnimation == 2 || player.itemAnimation == 6 || player.itemAnimation == 10) && owner == Main.myPlayer)
				{
					Vector2 vector7 = vector6 + Main.rand.NextVector2Square(-0.2f, 0.2f);
					vector7 *= 12f;
					switch (player.itemAnimation)
					{
					case 2:
						vector7 = vector6.RotatedBy(0.3839724659919739);
						break;
					case 6:
						vector7 = vector6.RotatedBy(-0.3839724659919739);
						break;
					case 10:
						vector7 = vector6.RotatedBy(0.0);
						break;
					}
					vector7 *= 10f + (float)Main.rand.Next(4);
					NewProjectile(GetProjectileSource_FromThis(), base.Center, vector7, 709, damage, 0f, owner);
				}
				for (int k = 0; k < 3; k += 2)
				{
					float num4 = 1f;
					float num5 = 1f;
					switch (k)
					{
					case 1:
						num5 = -1f;
						break;
					case 2:
						num5 = 1.25f;
						num4 = 0.5f;
						break;
					case 3:
						num5 = -1.25f;
						num4 = 0.5f;
						break;
					}
					if (Main.rand.Next(6) != 0)
					{
						num5 *= 1.2f;
						Dust dust3 = Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 100);
						dust3.velocity = vector6 * (4f + 4f * Main.rand.NextFloat()) * num5 * num4;
						dust3.noGravity = true;
						dust3.noLight = true;
						dust3.scale = 0.75f;
						dust3.fadeIn = 0.8f;
						dust3.customData = this;
						if (Main.rand.Next(3) == 0)
						{
							dust3.noGravity = false;
							dust3.fadeIn = 0f;
						}
					}
				}
			}
		}
		if (player.whoAmI == Main.myPlayer && player.itemAnimation <= 2)
		{
			Kill();
			player.reuseDelay = 2;
		}
	}

	private void AI_143_MonkStaffT2Ghast()
	{
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0203: Unknown result type (might be due to invalid IL or missing references)
		//IL_0209: Unknown result type (might be due to invalid IL or missing references)
		//IL_0216: Unknown result type (might be due to invalid IL or missing references)
		//IL_021c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0221: Unknown result type (might be due to invalid IL or missing references)
		//IL_0228: Unknown result type (might be due to invalid IL or missing references)
		//IL_022d: Unknown result type (might be due to invalid IL or missing references)
		//IL_024c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0252: Unknown result type (might be due to invalid IL or missing references)
		//IL_0254: Unknown result type (might be due to invalid IL or missing references)
		//IL_025e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0263: Unknown result type (might be due to invalid IL or missing references)
		//IL_0268: Unknown result type (might be due to invalid IL or missing references)
		//IL_028b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0290: Unknown result type (might be due to invalid IL or missing references)
		//IL_0296: Unknown result type (might be due to invalid IL or missing references)
		//IL_029b: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a0: Unknown result type (might be due to invalid IL or missing references)
		if (ai[0] == 0f)
		{
			localAI[1] = SoundEngine.PlayTrackedSound(in SoundID.DD2_GhastlyGlaiveImpactGhost, base.Center).ToFloat();
		}
		ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
		if (activeSound == null)
		{
			localAI[1] = SlotId.Invalid.ToFloat();
		}
		else
		{
			activeSound.Position = base.Center;
		}
		ai[0] += 1f;
		if (ai[0] > 50f)
		{
			alpha += 25;
			if (alpha > 255)
			{
				alpha = 255;
			}
		}
		else
		{
			alpha -= 25;
			if (alpha < 100)
			{
				alpha = 100;
			}
		}
		velocity *= 0.98f;
		if (++frameCounter >= 5)
		{
			frameCounter = 0;
			if (++frame >= 4)
			{
				frame = 0;
			}
		}
		if (ai[0] >= 60f)
		{
			Kill();
		}
		direction = (spriteDirection = ((velocity.X > 0f) ? 1 : (-1)));
		rotation = velocity.ToRotation();
		if (spriteDirection == -1)
		{
			rotation += (float)Math.PI;
		}
		if (ai[0] >= 10f && ai[0] < 34f)
		{
			Vector2 vector = velocity.SafeNormalize(Vector2.UnitY);
			float num = ai[0] / 60f;
			float num2 = 2f;
			for (int i = 0; (float)i < num2; i++)
			{
				Dust dust = Dust.NewDustDirect(base.Center, 14, 14, 228, 0f, 0f, 110);
				dust.velocity = vector * 2f;
				dust.position = base.Center + vector.RotatedBy(num * ((float)Math.PI * 2f) * 2f + (float)i / num2 * ((float)Math.PI * 2f)) * 7f;
				dust.scale = 1f + 0.6f * Main.rand.NextFloat();
				dust.velocity += vector * 3f;
				dust.noGravity = true;
			}
		}
	}

	private void AI_144_DD2Pet()
	{
		//IL_0625: Unknown result type (might be due to invalid IL or missing references)
		//IL_062a: Unknown result type (might be due to invalid IL or missing references)
		//IL_062c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0631: Unknown result type (might be due to invalid IL or missing references)
		//IL_0634: Unknown result type (might be due to invalid IL or missing references)
		//IL_0639: Unknown result type (might be due to invalid IL or missing references)
		//IL_065b: Unknown result type (might be due to invalid IL or missing references)
		//IL_065e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0663: Unknown result type (might be due to invalid IL or missing references)
		//IL_0668: Unknown result type (might be due to invalid IL or missing references)
		//IL_064a: Unknown result type (might be due to invalid IL or missing references)
		//IL_064f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0651: Unknown result type (might be due to invalid IL or missing references)
		//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_0683: Unknown result type (might be due to invalid IL or missing references)
		//IL_0685: Unknown result type (might be due to invalid IL or missing references)
		//IL_066f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0679: Unknown result type (might be due to invalid IL or missing references)
		//IL_067e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0202: Unknown result type (might be due to invalid IL or missing references)
		//IL_0208: Unknown result type (might be due to invalid IL or missing references)
		//IL_020e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0218: Unknown result type (might be due to invalid IL or missing references)
		//IL_021d: Unknown result type (might be due to invalid IL or missing references)
		//IL_023a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0240: Unknown result type (might be due to invalid IL or missing references)
		//IL_025d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0263: Unknown result type (might be due to invalid IL or missing references)
		//IL_0269: Unknown result type (might be due to invalid IL or missing references)
		//IL_0273: Unknown result type (might be due to invalid IL or missing references)
		//IL_0278: Unknown result type (might be due to invalid IL or missing references)
		//IL_0295: Unknown result type (might be due to invalid IL or missing references)
		//IL_029b: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0141: Unknown result type (might be due to invalid IL or missing references)
		//IL_04bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04db: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_019b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0506: Unknown result type (might be due to invalid IL or missing references)
		//IL_050c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0511: Unknown result type (might be due to invalid IL or missing references)
		//IL_0550: Unknown result type (might be due to invalid IL or missing references)
		//IL_0556: Unknown result type (might be due to invalid IL or missing references)
		//IL_042b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0431: Unknown result type (might be due to invalid IL or missing references)
		//IL_0436: Unknown result type (might be due to invalid IL or missing references)
		//IL_0475: Unknown result type (might be due to invalid IL or missing references)
		//IL_047b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0489: Unknown result type (might be due to invalid IL or missing references)
		//IL_0493: Unknown result type (might be due to invalid IL or missing references)
		//IL_0498: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[owner];
		float num = 4f;
		int num4 = 6;
		int num5 = 4;
		int num6 = Main.projFrames[type];
		int num7 = 0;
		float num8 = 0.08f;
		bool flag = false;
		float num9 = 0.1f;
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector((float)(player.direction * 30), -20f);
		if (player.dead)
		{
			Kill();
			return;
		}
		bool flag2 = true;
		switch (type)
		{
		case 702:
		{
			if (player.petFlagDD2Ghost)
			{
				timeLeft = 2;
			}
			vector.Y += (float)Math.Cos(localAI[0] * ((float)Math.PI / 60f)) * 2f;
			num5 = 4;
			num4 = 10;
			flag2 = false;
			num = 6f;
			Vector2 vector3 = Utils.RotatedBy(new Vector2((float)((spriteDirection == -1) ? (-6) : (-2)), -26f), rotation);
			if (Main.rand.Next(24) == 0)
			{
				Dust dust2 = Dust.NewDustDirect(base.Center + vector3, 4, 4, 135, 0f, 0f, 100);
				if (Main.rand.Next(3) != 0)
				{
					dust2.noGravity = true;
					dust2.velocity.Y -= 3f;
					dust2.noLight = true;
				}
				else if (Main.rand.Next(2) != 0)
				{
					dust2.noLight = true;
				}
				dust2.velocity *= 0.5f;
				dust2.velocity.Y -= 0.9f;
				dust2.scale += 0.1f + Main.rand.NextFloat() * 0.6f;
			}
			DelegateMethods.v3_1 = new Vector3(0.3f, 0.5f, 1f);
			Utils.PlotTileLine(base.Center, base.Center + velocity * 6f, 20f, DelegateMethods.CastLightOpen);
			Utils.PlotTileLine(base.Left, base.Right, 20f, DelegateMethods.CastLightOpen);
			Utils.PlotTileLine(player.Center, player.Center + player.velocity * 6f, 40f, DelegateMethods.CastLightOpen);
			Utils.PlotTileLine(player.Left, player.Right, 40f, DelegateMethods.CastLightOpen);
			break;
		}
		case 703:
			if (player.petFlagDD2Gato)
			{
				timeLeft = 2;
			}
			vector.Y += (float)Math.Cos(localAI[0] * ((float)Math.PI / 30f)) * 2f;
			num4 = 4;
			num5 = 2;
			num = 3f;
			num6 = 4;
			break;
		case 701:
			if (player.petFlagDD2Dragon)
			{
				timeLeft = 2;
			}
			break;
		case 764:
		{
			num9 = 0.025f;
			num8 = 0.04f;
			flag = true;
			localAI[0] += 1f;
			if (localAI[0] > 120f)
			{
				localAI[0] = 0f;
			}
			localAI[1] += velocity.X * 0.01f;
			localAI[1] += 1f / 120f;
			if (localAI[1] < (float)Math.PI * -2f)
			{
				localAI[1] += (float)Math.PI * 2f;
			}
			if (localAI[1] > (float)Math.PI * 2f)
			{
				localAI[1] -= (float)Math.PI * 2f;
			}
			if (((Vector2)(ref velocity)).Length() < 4f)
			{
				localAI[1] *= 0.9f;
				if (((Vector2)(ref velocity)).Length() > 0.1f && Main.rand.Next(30) == 0)
				{
					Dust dust3 = Dust.NewDustDirect(position - velocity, width, height, 292, velocity.X * 0.5f, velocity.Y * 0.5f, 150);
					dust3.velocity *= 0.3f;
					dust3.noLightEmittence = true;
				}
			}
			else
			{
				Vector2 vector2 = default(Vector2);
				((Vector2)(ref vector2))._002Ector((float)Main.screenWidth, (float)Main.screenHeight);
				Rectangle hitbox = base.Hitbox;
				((Rectangle)(ref hitbox)).Intersects(Utils.CenteredRectangle(Main.screenPosition + vector2 / 2f, vector2 + new Vector2(400f)));
				if (Main.rand.Next(15) == 0)
				{
					Dust.NewDustDirect(position - velocity, width, height, 292, velocity.X * 0.5f, velocity.Y * 0.5f, 150, default(Color), 0.9f).noLightEmittence = true;
				}
			}
			float num10 = localAI[0] / 120f * 2f;
			if (num10 > 1f)
			{
				num10 = 2f - num10;
			}
			Opacity = MathHelper.Lerp(0.4f, 0.75f, num10);
			vector.Y += (float)Math.Cos(localAI[0] / 120f * ((float)Math.PI * 2f)) * 2f;
			if (player.petFlagUpbeatStar)
			{
				timeLeft = 2;
			}
			break;
		}
		}
		if (flag2 && (player.suspiciouslookingTentacle || player.petFlagDD2Ghost))
		{
			vector.X += -player.direction * 64;
		}
		direction = (spriteDirection = player.direction);
		Vector2 vector4 = player.MountedCenter + vector;
		float num11 = Vector2.Distance(base.Center, vector4);
		if (num11 > 1000f)
		{
			base.Center = player.Center + vector;
		}
		Vector2 vector5 = vector4 - base.Center;
		if (num11 < num)
		{
			velocity *= 0.25f;
		}
		if (vector5 != Vector2.Zero)
		{
			if (((Vector2)(ref vector5)).Length() < num * 0.5f)
			{
				velocity = vector5;
			}
			else
			{
				velocity = vector5 * num9;
			}
		}
		if (((Vector2)(ref velocity)).Length() > 6f)
		{
			float num2 = velocity.X * num8 + velocity.Y * (float)spriteDirection * 0.02f;
			if (Math.Abs(rotation - num2) >= (float)Math.PI)
			{
				if (num2 < rotation)
				{
					rotation -= (float)Math.PI * 2f;
				}
				else
				{
					rotation += (float)Math.PI * 2f;
				}
			}
			float num3 = 12f;
			rotation = (rotation * (num3 - 1f) + num2) / num3;
			if (++frameCounter >= num5)
			{
				frameCounter = 0;
				if (++frame >= num6)
				{
					frame = num7;
				}
			}
		}
		else
		{
			if (rotation > (float)Math.PI)
			{
				rotation -= (float)Math.PI * 2f;
			}
			if (rotation > -0.005f && rotation < 0.005f)
			{
				rotation = 0f;
			}
			else
			{
				rotation *= 0.96f;
			}
			if (++frameCounter >= num4)
			{
				frameCounter = 0;
				if (++frame >= num6)
				{
					frame = num7;
				}
			}
		}
		if (!flag)
		{
			localAI[0] += 1f;
			if (localAI[0] > 120f)
			{
				localAI[0] = 0f;
			}
		}
	}

	private void AI_145_BookStaffStorm()
	{
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_0108: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_015a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0186: Unknown result type (might be due to invalid IL or missing references)
		//IL_0193: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_039d: Unknown result type (might be due to invalid IL or missing references)
		//IL_039f: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03be: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03db: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_041d: Unknown result type (might be due to invalid IL or missing references)
		//IL_052c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0540: Unknown result type (might be due to invalid IL or missing references)
		//IL_0546: Unknown result type (might be due to invalid IL or missing references)
		//IL_054b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0550: Unknown result type (might be due to invalid IL or missing references)
		//IL_057c: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_060a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0610: Unknown result type (might be due to invalid IL or missing references)
		//IL_0615: Unknown result type (might be due to invalid IL or missing references)
		//IL_061a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0646: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_06bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f5: Unknown result type (might be due to invalid IL or missing references)
		float num = 300f;
		if (soundDelay == 0)
		{
			soundDelay = -1;
			localAI[1] = SoundEngine.PlayTrackedSound(in SoundID.DD2_BookStaffTwisterLoop, base.Center).ToFloat();
		}
		ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
		if (activeSound != null)
		{
			activeSound.Position = base.Center;
			activeSound.Volume = 1f - Math.Max(ai[0] - (num - 15f), 0f) / 15f;
		}
		else
		{
			localAI[1] = SlotId.Invalid.ToFloat();
		}
		if (localAI[0] >= 16f && ai[0] < num - 15f)
		{
			ai[0] = num - 15f;
		}
		ai[0] += 1f;
		if (ai[0] >= num)
		{
			Kill();
		}
		Vector2 top = base.Top;
		Vector2 bottom = base.Bottom;
		Vector2 vector = Vector2.Lerp(top, bottom, 0.5f);
		Vector2 vector2 = default(Vector2);
		((Vector2)(ref vector2))._002Ector(0f, bottom.Y - top.Y);
		vector2.X = vector2.Y * 0.2f;
		int num2 = 16;
		int num3 = 160;
		Vector2 vector3 = default(Vector2);
		for (int i = 0; i < 1; i++)
		{
			((Vector2)(ref vector3))._002Ector(base.Center.X - (float)(num2 / 2), position.Y + (float)height - (float)num3);
			if (Collision.SolidCollision(vector3, num2, num3) || Collision.WetCollision(vector3, num2, num3))
			{
				if (velocity.Y > 0f)
				{
					velocity.Y = 0f;
				}
				if (velocity.Y > -4f)
				{
					velocity.Y -= 2f;
				}
				else
				{
					velocity.Y -= 4f;
					localAI[0] += 2f;
				}
				if (velocity.Y < -16f)
				{
					velocity.Y = -16f;
				}
				continue;
			}
			localAI[0] -= 1f;
			if (localAI[0] < 0f)
			{
				localAI[0] = 0f;
			}
			if (velocity.Y < 0f)
			{
				velocity.Y = 0f;
			}
			if (velocity.Y < 4f)
			{
				velocity.Y += 2f;
			}
			else
			{
				velocity.Y += 4f;
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
		}
		if (ai[0] < num - 30f)
		{
			Vector2 vector4 = default(Vector2);
			Vector2 vector5 = default(Vector2);
			for (int j = 0; j < 1; j++)
			{
				float value = -1f;
				float value2 = 0.9f;
				float amount = Main.rand.NextFloat();
				((Vector2)(ref vector4))._002Ector(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()), MathHelper.Lerp(value, value2, amount));
				vector4.X *= MathHelper.Lerp(2.2f, 0.6f, amount);
				vector4.X *= -1f;
				((Vector2)(ref vector5))._002Ector(6f, 10f);
				Vector2 vector6 = vector + vector2 * vector4 * 0.5f + vector5;
				Dust dust = Main.dust[Dust.NewDust(vector6, 0, 0, 274)];
				dust.position = vector6;
				dust.fadeIn = 1.3f;
				dust.scale = 0.87f;
				dust.alpha = 211;
				if (vector4.X > -1.2f)
				{
					dust.velocity.X = 1f + Main.rand.NextFloat();
				}
				dust.noGravity = true;
				dust.velocity.Y = Main.rand.NextFloat() * -0.5f - 1.3f;
				dust.velocity.X += velocity.X * 2.1f;
				dust.noLight = true;
			}
		}
		Vector2 vector7 = base.Bottom + new Vector2(-25f, -25f);
		for (int k = 0; k < 4; k++)
		{
			Dust dust2 = Dust.NewDustDirect(vector7, 50, 25, 31, velocity.X, -2f, 100);
			dust2.fadeIn = 1.1f;
			dust2.noGravity = true;
		}
		for (int l = 0; l < 1; l++)
		{
			if (Main.rand.Next(5) == 0)
			{
				Gore gore = Gore.NewGoreDirect(base.TopLeft + Main.rand.NextVector2Square(0f, 1f) * base.Size, new Vector2(velocity.X * 1.5f, (0f - Main.rand.NextFloat()) * 16f), Utils.SelectRandom<int>(Main.rand, 1007, 1008, 1008));
				gore.timeLeft = 60;
				gore.alpha = 50;
				gore.velocity.X += velocity.X;
			}
		}
		for (int m = 0; m < 1; m++)
		{
			if (Main.rand.Next(7) == 0)
			{
				Gore gore2 = Gore.NewGoreDirect(base.TopLeft + Main.rand.NextVector2Square(0f, 1f) * base.Size, new Vector2(velocity.X * 1.5f, (0f - Main.rand.NextFloat()) * 16f), Utils.SelectRandom<int>(Main.rand, 1007, 1008, 1008));
				gore2.timeLeft = 0;
				gore2.alpha = 80;
			}
		}
		for (int n = 0; n < 1; n++)
		{
			if (Main.rand.Next(7) == 0)
			{
				Gore gore3 = Gore.NewGoreDirect(base.TopLeft + Main.rand.NextVector2Square(0f, 1f) * base.Size, new Vector2(velocity.X * 1.5f, (0f - Main.rand.NextFloat()) * 16f), Utils.SelectRandom<int>(Main.rand, 1007, 1008, 1008));
				gore3.timeLeft = 0;
				gore3.alpha = 80;
			}
		}
	}

	public bool AI_137_CanHit(Vector2 targetPosition)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		if (WorldGen.SolidTile((int)targetPosition.X / 16, (int)targetPosition.Y / 16))
		{
			return false;
		}
		Vector2 vector = base.Top + Vector2.UnitY * 20f;
		bool flag = Collision.CanHitLine(vector, 0, 0, targetPosition, 0, 0);
		if (!flag)
		{
			Vector2 v = targetPosition - vector;
			Vector2 spinningpoint = v.SafeNormalize(Vector2.UnitY);
			Vector2 vector2 = Vector2.Lerp(vector, targetPosition, 0.5f);
			Vector2 vector3 = vector2 + spinningpoint.RotatedBy(1.5707963705062866) * ((Vector2)(ref v)).Length() * 0.2f;
			if (Collision.CanHitLine(vector, 0, 0, vector3, 0, 0) && Collision.CanHitLine(vector3, 0, 0, targetPosition, 0, 0))
			{
				flag = true;
			}
			if (!flag)
			{
				Vector2 vector4 = vector2 + spinningpoint.RotatedBy(-1.5707963705062866) * ((Vector2)(ref v)).Length() * 0.2f;
				if (Collision.CanHitLine(vector, 0, 0, vector4, 0, 0) && Collision.CanHitLine(vector4, 0, 0, targetPosition, 0, 0))
				{
					flag = true;
				}
			}
		}
		return flag;
	}

	private Point GetScarabBombDigDirectionSnap8()
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[owner];
		Vector2 vector = DirectionTo(player.Center);
		Point result = default(Point);
		((Point)(ref result))._002Ector((!(vector.X > 0f)) ? 1 : (-1), (!(vector.Y > 0f)) ? 1 : (-1));
		if (Math.Abs(vector.X) > Math.Abs(vector.Y) * 2f)
		{
			result.Y = 0;
		}
		else if (Math.Abs(vector.Y) > Math.Abs(vector.X) * 2f)
		{
			result.X = 0;
		}
		return result;
	}

	public Color GetFirstFractalColor()
	{
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		return Main.hslToRgb(ai[1], 1f, 0.5f);
	}

	public void Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(Point pt, float size, Utils.TileActionAttempt plot)
	{
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		Tile tile = Main.tile[pt.X, pt.Y];
		if (tile != null && tile.active() && tile.halfBrick())
		{
			int num = pt.Y - 1;
			if (num >= 0)
			{
				tile = Main.tile[pt.X, num];
				if (!WorldGen.SolidOrSlopedTile(tile))
				{
					pt.Y--;
				}
			}
		}
		DelegateMethods.v2_1 = pt.ToVector2();
		DelegateMethods.f_1 = size;
		Utils.PlotTileArea(pt.X, pt.Y, plot);
	}

	public bool IsAttachedTo(NPC npc)
	{
		if (aiStyle == 113 && ai[0] == 1f && ai[1] == (float)npc.whoAmI)
		{
			return true;
		}
		return false;
	}

	private void BoulderExplosion()
	{
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		int num = Main.rand.Next(2, 5);
		Vector2 vector = default(Vector2);
		for (int i = 0; i < num; i++)
		{
			float num2 = 8f;
			((Vector2)(ref vector))._002Ector(Main.rand.NextFloat() - 0.5f, (0f - Main.rand.NextFloat()) / 2f);
			((Vector2)(ref vector)).Normalize();
			vector *= num2;
			int num3 = (int)((double)damage * 0.75);
			int num4 = NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector.X, vector.Y, 1005, num3, 0f, Main.myPlayer);
			Main.projectile[num4].timeLeft = 300;
		}
	}

	private void SpawnWebs()
	{
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		int num = 6;
		int num2 = (int)(base.Center.X / 16f);
		int num3 = (int)(base.Center.Y / 16f);
		int num4 = num2 - num;
		int num5 = num2 + num;
		int num6 = num3 - num;
		int num7 = num3 + num;
		if (num4 < 1)
		{
			num4 = 1;
		}
		if (num5 > Main.maxTilesX - 1)
		{
			num5 = Main.maxTilesX - 1;
		}
		if (num6 < 1)
		{
			num6 = 1;
		}
		if (num7 > Main.maxTilesY - 1)
		{
			num7 = Main.maxTilesY - 1;
		}
		for (int i = num4; i < num5; i++)
		{
			for (int j = num6; j < num7; j++)
			{
				if (!Main.tile[i, j].active() && Main.rand.Next(5) != 0 && Math.Abs(i - num2) * Math.Abs(i - num2) + Math.Abs(j - num3) * Math.Abs(j - num3) < num * num)
				{
					WorldGen.PlaceTile(i, j, 51);
					if (Main.tile[i, j].active() && Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i, j);
					}
				}
			}
		}
	}

	public void Kill()
	{
		//IL_03dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_040c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0411: Unknown result type (might be due to invalid IL or missing references)
		//IL_0413: Unknown result type (might be due to invalid IL or missing references)
		//IL_0427: Unknown result type (might be due to invalid IL or missing references)
		//IL_042d: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		//IL_014e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0153: Unknown result type (might be due to invalid IL or missing references)
		//IL_229a: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_0468: Unknown result type (might be due to invalid IL or missing references)
		//IL_0472: Unknown result type (might be due to invalid IL or missing references)
		//IL_0477: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a98: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aac: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0abc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0acc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0add: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aed: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b02: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b15: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b49: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b59: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b63: Unknown result type (might be due to invalid IL or missing references)
		//IL_0547: Unknown result type (might be due to invalid IL or missing references)
		//IL_054e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0577: Unknown result type (might be due to invalid IL or missing references)
		//IL_0582: Unknown result type (might be due to invalid IL or missing references)
		//IL_0587: Unknown result type (might be due to invalid IL or missing references)
		//IL_058c: Unknown result type (might be due to invalid IL or missing references)
		//IL_059a: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05be: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_05da: Unknown result type (might be due to invalid IL or missing references)
		//IL_05dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_05eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0604: Unknown result type (might be due to invalid IL or missing references)
		//IL_060a: Unknown result type (might be due to invalid IL or missing references)
		//IL_060f: Unknown result type (might be due to invalid IL or missing references)
		//IL_061f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0625: Unknown result type (might be due to invalid IL or missing references)
		//IL_0627: Unknown result type (might be due to invalid IL or missing references)
		//IL_0631: Unknown result type (might be due to invalid IL or missing references)
		//IL_0640: Unknown result type (might be due to invalid IL or missing references)
		//IL_064e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0654: Unknown result type (might be due to invalid IL or missing references)
		//IL_0671: Unknown result type (might be due to invalid IL or missing references)
		//IL_0678: Unknown result type (might be due to invalid IL or missing references)
		//IL_0687: Unknown result type (might be due to invalid IL or missing references)
		//IL_0691: Unknown result type (might be due to invalid IL or missing references)
		//IL_0696: Unknown result type (might be due to invalid IL or missing references)
		//IL_069b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0499: Unknown result type (might be due to invalid IL or missing references)
		//IL_049e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_0178: Unknown result type (might be due to invalid IL or missing references)
		//IL_019d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_0da7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dac: Unknown result type (might be due to invalid IL or missing references)
		//IL_0db4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c05: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c20: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c33: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c67: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c77: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c81: Unknown result type (might be due to invalid IL or missing references)
		//IL_22b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2301: Unknown result type (might be due to invalid IL or missing references)
		//IL_2303: Unknown result type (might be due to invalid IL or missing references)
		//IL_2318: Unknown result type (might be due to invalid IL or missing references)
		//IL_231d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1017: Unknown result type (might be due to invalid IL or missing references)
		//IL_101c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1024: Unknown result type (might be due to invalid IL or missing references)
		//IL_1036: Unknown result type (might be due to invalid IL or missing references)
		//IL_103b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ccf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cee: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cf3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d09: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d16: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d36: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d46: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d50: Unknown result type (might be due to invalid IL or missing references)
		//IL_2431: Unknown result type (might be due to invalid IL or missing references)
		//IL_2442: Unknown result type (might be due to invalid IL or missing references)
		//IL_2448: Unknown result type (might be due to invalid IL or missing references)
		//IL_244a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2465: Unknown result type (might be due to invalid IL or missing references)
		//IL_246a: Unknown result type (might be due to invalid IL or missing references)
		//IL_246c: Unknown result type (might be due to invalid IL or missing references)
		//IL_246f: Unknown result type (might be due to invalid IL or missing references)
		//IL_247e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2483: Unknown result type (might be due to invalid IL or missing references)
		//IL_2488: Unknown result type (might be due to invalid IL or missing references)
		//IL_248a: Unknown result type (might be due to invalid IL or missing references)
		//IL_248f: Unknown result type (might be due to invalid IL or missing references)
		//IL_232c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2336: Unknown result type (might be due to invalid IL or missing references)
		//IL_233b: Unknown result type (might be due to invalid IL or missing references)
		//IL_070d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0714: Unknown result type (might be due to invalid IL or missing references)
		//IL_073d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0748: Unknown result type (might be due to invalid IL or missing references)
		//IL_074d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0752: Unknown result type (might be due to invalid IL or missing references)
		//IL_0766: Unknown result type (might be due to invalid IL or missing references)
		//IL_076e: Unknown result type (might be due to invalid IL or missing references)
		//IL_077b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0785: Unknown result type (might be due to invalid IL or missing references)
		//IL_0790: Unknown result type (might be due to invalid IL or missing references)
		//IL_0795: Unknown result type (might be due to invalid IL or missing references)
		//IL_079a: Unknown result type (might be due to invalid IL or missing references)
		//IL_079c: Unknown result type (might be due to invalid IL or missing references)
		//IL_079e: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_07aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_07bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_07bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_07dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0803: Unknown result type (might be due to invalid IL or missing references)
		//IL_0812: Unknown result type (might be due to invalid IL or missing references)
		//IL_0820: Unknown result type (might be due to invalid IL or missing references)
		//IL_0826: Unknown result type (might be due to invalid IL or missing references)
		//IL_0843: Unknown result type (might be due to invalid IL or missing references)
		//IL_084a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0859: Unknown result type (might be due to invalid IL or missing references)
		//IL_0863: Unknown result type (might be due to invalid IL or missing references)
		//IL_0868: Unknown result type (might be due to invalid IL or missing references)
		//IL_086d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0214: Unknown result type (might be due to invalid IL or missing references)
		//IL_0219: Unknown result type (might be due to invalid IL or missing references)
		//IL_021f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0241: Unknown result type (might be due to invalid IL or missing references)
		//IL_025a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0264: Unknown result type (might be due to invalid IL or missing references)
		//IL_0269: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0de5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0deb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2662: Unknown result type (might be due to invalid IL or missing references)
		//IL_268a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2690: Unknown result type (might be due to invalid IL or missing references)
		//IL_2692: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_26bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_26cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_26d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_26d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2702: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_25ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_25b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_25cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_25f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_25f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2622: Unknown result type (might be due to invalid IL or missing references)
		//IL_2628: Unknown result type (might be due to invalid IL or missing references)
		//IL_262d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2632: Unknown result type (might be due to invalid IL or missing references)
		//IL_237e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2383: Unknown result type (might be due to invalid IL or missing references)
		//IL_2358: Unknown result type (might be due to invalid IL or missing references)
		//IL_2362: Unknown result type (might be due to invalid IL or missing references)
		//IL_2367: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_23bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_23cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_23d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1727: Unknown result type (might be due to invalid IL or missing references)
		//IL_1739: Unknown result type (might be due to invalid IL or missing references)
		//IL_173e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1058: Unknown result type (might be due to invalid IL or missing references)
		//IL_105d: Unknown result type (might be due to invalid IL or missing references)
		//IL_105f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1061: Unknown result type (might be due to invalid IL or missing references)
		//IL_274b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2773: Unknown result type (might be due to invalid IL or missing references)
		//IL_2779: Unknown result type (might be due to invalid IL or missing references)
		//IL_277b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2796: Unknown result type (might be due to invalid IL or missing references)
		//IL_279b: Unknown result type (might be due to invalid IL or missing references)
		//IL_279e: Unknown result type (might be due to invalid IL or missing references)
		//IL_27a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_27bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_27d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_08df: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_090f: Unknown result type (might be due to invalid IL or missing references)
		//IL_091a: Unknown result type (might be due to invalid IL or missing references)
		//IL_091f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0924: Unknown result type (might be due to invalid IL or missing references)
		//IL_0938: Unknown result type (might be due to invalid IL or missing references)
		//IL_0940: Unknown result type (might be due to invalid IL or missing references)
		//IL_094d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0957: Unknown result type (might be due to invalid IL or missing references)
		//IL_0962: Unknown result type (might be due to invalid IL or missing references)
		//IL_0967: Unknown result type (might be due to invalid IL or missing references)
		//IL_096c: Unknown result type (might be due to invalid IL or missing references)
		//IL_096e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0970: Unknown result type (might be due to invalid IL or missing references)
		//IL_0977: Unknown result type (might be due to invalid IL or missing references)
		//IL_097c: Unknown result type (might be due to invalid IL or missing references)
		//IL_097e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0980: Unknown result type (might be due to invalid IL or missing references)
		//IL_098a: Unknown result type (might be due to invalid IL or missing references)
		//IL_098f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0991: Unknown result type (might be due to invalid IL or missing references)
		//IL_0993: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_09cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_09e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a15: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a35: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_028e: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d21: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d33: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d38: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e67: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e69: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e70: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e75: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_282d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2855: Unknown result type (might be due to invalid IL or missing references)
		//IL_285b: Unknown result type (might be due to invalid IL or missing references)
		//IL_285d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2878: Unknown result type (might be due to invalid IL or missing references)
		//IL_287d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2880: Unknown result type (might be due to invalid IL or missing references)
		//IL_288f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2894: Unknown result type (might be due to invalid IL or missing references)
		//IL_28ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_28b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_28bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2511: Unknown result type (might be due to invalid IL or missing references)
		//IL_2525: Unknown result type (might be due to invalid IL or missing references)
		//IL_2530: Unknown result type (might be due to invalid IL or missing references)
		//IL_2535: Unknown result type (might be due to invalid IL or missing references)
		//IL_2541: Unknown result type (might be due to invalid IL or missing references)
		//IL_2548: Unknown result type (might be due to invalid IL or missing references)
		//IL_2550: Unknown result type (might be due to invalid IL or missing references)
		//IL_257b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2581: Unknown result type (might be due to invalid IL or missing references)
		//IL_2586: Unknown result type (might be due to invalid IL or missing references)
		//IL_258b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1750: Unknown result type (might be due to invalid IL or missing references)
		//IL_1755: Unknown result type (might be due to invalid IL or missing references)
		//IL_1757: Unknown result type (might be due to invalid IL or missing references)
		//IL_1759: Unknown result type (might be due to invalid IL or missing references)
		//IL_133c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1341: Unknown result type (might be due to invalid IL or missing references)
		//IL_2907: Unknown result type (might be due to invalid IL or missing references)
		//IL_292f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2935: Unknown result type (might be due to invalid IL or missing references)
		//IL_2937: Unknown result type (might be due to invalid IL or missing references)
		//IL_2952: Unknown result type (might be due to invalid IL or missing references)
		//IL_2957: Unknown result type (might be due to invalid IL or missing references)
		//IL_295a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2969: Unknown result type (might be due to invalid IL or missing references)
		//IL_296e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2987: Unknown result type (might be due to invalid IL or missing references)
		//IL_298e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2997: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d51: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d53: Unknown result type (might be due to invalid IL or missing references)
		//IL_178d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1792: Unknown result type (might be due to invalid IL or missing references)
		//IL_15db: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_15f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_15fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_15ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1609: Unknown result type (might be due to invalid IL or missing references)
		//IL_160e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10de: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ea9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ec9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ede: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ee3: Unknown result type (might be due to invalid IL or missing references)
		//IL_29e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_29ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a00: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a05: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a14: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a41: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a43: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a72: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a81: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d81: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d86: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ad5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1af5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1afb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b22: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b31: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b73: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b79: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b83: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b88: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bef: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c09: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c13: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c18: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c43: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c52: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c57: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c95: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1caf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b95: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2106: Unknown result type (might be due to invalid IL or missing references)
		//IL_210c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2133: Unknown result type (might be due to invalid IL or missing references)
		//IL_213d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2142: Unknown result type (might be due to invalid IL or missing references)
		//IL_2190: Unknown result type (might be due to invalid IL or missing references)
		//IL_2196: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_21aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_21f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_21fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2214: Unknown result type (might be due to invalid IL or missing references)
		//IL_221e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2223: Unknown result type (might be due to invalid IL or missing references)
		//IL_2248: Unknown result type (might be due to invalid IL or missing references)
		//IL_224e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2258: Unknown result type (might be due to invalid IL or missing references)
		//IL_225d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2262: Unknown result type (might be due to invalid IL or missing references)
		//IL_1802: Unknown result type (might be due to invalid IL or missing references)
		//IL_1804: Unknown result type (might be due to invalid IL or missing references)
		//IL_1806: Unknown result type (might be due to invalid IL or missing references)
		//IL_180b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1810: Unknown result type (might be due to invalid IL or missing references)
		//IL_1815: Unknown result type (might be due to invalid IL or missing references)
		//IL_1817: Unknown result type (might be due to invalid IL or missing references)
		//IL_1819: Unknown result type (might be due to invalid IL or missing references)
		//IL_13cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_13dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1641: Unknown result type (might be due to invalid IL or missing references)
		//IL_1679: Unknown result type (might be due to invalid IL or missing references)
		//IL_16aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1102: Unknown result type (might be due to invalid IL or missing references)
		//IL_1120: Unknown result type (might be due to invalid IL or missing references)
		//IL_1140: Unknown result type (might be due to invalid IL or missing references)
		//IL_1155: Unknown result type (might be due to invalid IL or missing references)
		//IL_115a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ab9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2abf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ad3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ad8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2add: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ae7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b14: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b16: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b31: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b40: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b45: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b54: Unknown result type (might be due to invalid IL or missing references)
		//IL_0315: Unknown result type (might be due to invalid IL or missing references)
		//IL_031a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0345: Unknown result type (might be due to invalid IL or missing references)
		//IL_034f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0354: Unknown result type (might be due to invalid IL or missing references)
		//IL_0381: Unknown result type (might be due to invalid IL or missing references)
		//IL_038c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0396: Unknown result type (might be due to invalid IL or missing references)
		//IL_039b: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e04: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e09: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_122f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1234: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f18: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f37: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2be8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c19: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c21: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c50: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1406: Unknown result type (might be due to invalid IL or missing references)
		//IL_1424: Unknown result type (might be due to invalid IL or missing references)
		//IL_1444: Unknown result type (might be due to invalid IL or missing references)
		//IL_1459: Unknown result type (might be due to invalid IL or missing references)
		//IL_145e: Unknown result type (might be due to invalid IL or missing references)
		//IL_14c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_14cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_14d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_14d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_14dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1508: Unknown result type (might be due to invalid IL or missing references)
		//IL_150a: Unknown result type (might be due to invalid IL or missing references)
		//IL_150c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1519: Unknown result type (might be due to invalid IL or missing references)
		//IL_1520: Unknown result type (might be due to invalid IL or missing references)
		//IL_1525: Unknown result type (might be due to invalid IL or missing references)
		//IL_3207: Unknown result type (might be due to invalid IL or missing references)
		//IL_320c: Unknown result type (might be due to invalid IL or missing references)
		//IL_199d: Unknown result type (might be due to invalid IL or missing references)
		//IL_19df: Unknown result type (might be due to invalid IL or missing references)
		//IL_19e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a13: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a22: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a33: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a38: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a44: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a49: Unknown result type (might be due to invalid IL or missing references)
		//IL_1837: Unknown result type (might be due to invalid IL or missing references)
		//IL_1855: Unknown result type (might be due to invalid IL or missing references)
		//IL_1875: Unknown result type (might be due to invalid IL or missing references)
		//IL_188a: Unknown result type (might be due to invalid IL or missing references)
		//IL_188f: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_18fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1902: Unknown result type (might be due to invalid IL or missing references)
		//IL_1907: Unknown result type (might be due to invalid IL or missing references)
		//IL_158a: Unknown result type (might be due to invalid IL or missing references)
		//IL_158f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3937: Unknown result type (might be due to invalid IL or missing references)
		//IL_393c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3941: Unknown result type (might be due to invalid IL or missing references)
		//IL_3946: Unknown result type (might be due to invalid IL or missing references)
		//IL_3949: Unknown result type (might be due to invalid IL or missing references)
		//IL_394e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3955: Unknown result type (might be due to invalid IL or missing references)
		//IL_395a: Unknown result type (might be due to invalid IL or missing references)
		//IL_395f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fba: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fe9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ff3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ff8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ffd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cad: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cda: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d06: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d26: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d65: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d73: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d84: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d90: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d95: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e49: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e69: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e83: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ee2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ee7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eee: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ef3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ef8: Unknown result type (might be due to invalid IL or missing references)
		//IL_198e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1993: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e06: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e24: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e29: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e46: Unknown result type (might be due to invalid IL or missing references)
		//IL_2020: Unknown result type (might be due to invalid IL or missing references)
		//IL_202a: Unknown result type (might be due to invalid IL or missing references)
		//IL_202f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2040: Unknown result type (might be due to invalid IL or missing references)
		//IL_2045: Unknown result type (might be due to invalid IL or missing references)
		//IL_204c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2051: Unknown result type (might be due to invalid IL or missing references)
		//IL_2056: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f84: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aa9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aac: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ab1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ab8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3abd: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ac2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3032: Unknown result type (might be due to invalid IL or missing references)
		//IL_3051: Unknown result type (might be due to invalid IL or missing references)
		//IL_3057: Unknown result type (might be due to invalid IL or missing references)
		//IL_306e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3073: Unknown result type (might be due to invalid IL or missing references)
		//IL_3081: Unknown result type (might be due to invalid IL or missing references)
		//IL_3091: Unknown result type (might be due to invalid IL or missing references)
		//IL_309d: Unknown result type (might be due to invalid IL or missing references)
		//IL_30a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_30ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_30b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_30d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_30e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_30e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3990: Unknown result type (might be due to invalid IL or missing references)
		//IL_39ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_39b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_39c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_39cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_39d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_39da: Unknown result type (might be due to invalid IL or missing references)
		//IL_39df: Unknown result type (might be due to invalid IL or missing references)
		//IL_39f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_39f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a00: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a05: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a25: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a37: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a39: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a40: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a45: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3976: Unknown result type (might be due to invalid IL or missing references)
		//IL_3978: Unknown result type (might be due to invalid IL or missing references)
		//IL_397f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3984: Unknown result type (might be due to invalid IL or missing references)
		//IL_3989: Unknown result type (might be due to invalid IL or missing references)
		//IL_326f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3271: Unknown result type (might be due to invalid IL or missing references)
		//IL_3293: Unknown result type (might be due to invalid IL or missing references)
		//IL_3299: Unknown result type (might be due to invalid IL or missing references)
		//IL_32cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_32d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_32da: Unknown result type (might be due to invalid IL or missing references)
		//IL_2da7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ca3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ca8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3be1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3351: Unknown result type (might be due to invalid IL or missing references)
		//IL_3356: Unknown result type (might be due to invalid IL or missing references)
		//IL_3365: Unknown result type (might be due to invalid IL or missing references)
		//IL_336a: Unknown result type (might be due to invalid IL or missing references)
		//IL_311b: Unknown result type (might be due to invalid IL or missing references)
		//IL_313b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3141: Unknown result type (might be due to invalid IL or missing references)
		//IL_3158: Unknown result type (might be due to invalid IL or missing references)
		//IL_315d: Unknown result type (might be due to invalid IL or missing references)
		//IL_316b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3171: Unknown result type (might be due to invalid IL or missing references)
		//IL_317e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3184: Unknown result type (might be due to invalid IL or missing references)
		//IL_3186: Unknown result type (might be due to invalid IL or missing references)
		//IL_3192: Unknown result type (might be due to invalid IL or missing references)
		//IL_319c: Unknown result type (might be due to invalid IL or missing references)
		//IL_31a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_31a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_31cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_31d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_31da: Unknown result type (might be due to invalid IL or missing references)
		//IL_3af3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b10: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b16: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b28: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b33: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b42: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b53: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b59: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b63: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b68: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b88: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ba3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ba8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bad: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ad9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3adb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ae2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ae7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aec: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d31: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d48: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d77: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d81: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d86: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3412: Unknown result type (might be due to invalid IL or missing references)
		//IL_3414: Unknown result type (might be due to invalid IL or missing references)
		//IL_3436: Unknown result type (might be due to invalid IL or missing references)
		//IL_343c: Unknown result type (might be due to invalid IL or missing references)
		//IL_346b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3475: Unknown result type (might be due to invalid IL or missing references)
		//IL_347a: Unknown result type (might be due to invalid IL or missing references)
		//IL_439e: Unknown result type (might be due to invalid IL or missing references)
		//IL_34e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_34ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_34fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3500: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3de4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dea: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e00: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e34: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e39: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e59: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_35a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_35a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_35c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_35cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_35fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_3608: Unknown result type (might be due to invalid IL or missing references)
		//IL_360d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3624: Unknown result type (might be due to invalid IL or missing references)
		//IL_362a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3634: Unknown result type (might be due to invalid IL or missing references)
		//IL_3639: Unknown result type (might be due to invalid IL or missing references)
		//IL_363e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3727: Unknown result type (might be due to invalid IL or missing references)
		//IL_3747: Unknown result type (might be due to invalid IL or missing references)
		//IL_374d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3793: Unknown result type (might be due to invalid IL or missing references)
		//IL_379d: Unknown result type (might be due to invalid IL or missing references)
		//IL_37a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4417: Unknown result type (might be due to invalid IL or missing references)
		//IL_4438: Unknown result type (might be due to invalid IL or missing references)
		//IL_443e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4466: Unknown result type (might be due to invalid IL or missing references)
		//IL_4470: Unknown result type (might be due to invalid IL or missing references)
		//IL_4475: Unknown result type (might be due to invalid IL or missing references)
		//IL_4490: Unknown result type (might be due to invalid IL or missing references)
		//IL_44b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_44b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_44de: Unknown result type (might be due to invalid IL or missing references)
		//IL_44e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_44ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_36ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_36b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_36bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_36c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ed1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ef2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ef8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f09: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f38: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f42: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f47: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f67: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ccd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cde: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cea: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cef: Unknown result type (might be due to invalid IL or missing references)
		//IL_49dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_49e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_49ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_49f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_49f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a03: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a64: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a69: Unknown result type (might be due to invalid IL or missing references)
		//IL_37e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3804: Unknown result type (might be due to invalid IL or missing references)
		//IL_380a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3850: Unknown result type (might be due to invalid IL or missing references)
		//IL_385a: Unknown result type (might be due to invalid IL or missing references)
		//IL_385f: Unknown result type (might be due to invalid IL or missing references)
		//IL_387a: Unknown result type (might be due to invalid IL or missing references)
		//IL_387f: Unknown result type (might be due to invalid IL or missing references)
		//IL_38a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_38ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_38b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_38c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d70: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d83: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d88: Unknown result type (might be due to invalid IL or missing references)
		//IL_4da6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d54: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d64: Unknown result type (might be due to invalid IL or missing references)
		//IL_4547: Unknown result type (might be due to invalid IL or missing references)
		//IL_4567: Unknown result type (might be due to invalid IL or missing references)
		//IL_456d: Unknown result type (might be due to invalid IL or missing references)
		//IL_45af: Unknown result type (might be due to invalid IL or missing references)
		//IL_45b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_45be: Unknown result type (might be due to invalid IL or missing references)
		//IL_45d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_45f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_45ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_462f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4639: Unknown result type (might be due to invalid IL or missing references)
		//IL_463e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4678: Unknown result type (might be due to invalid IL or missing references)
		//IL_467f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4685: Unknown result type (might be due to invalid IL or missing references)
		//IL_46b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_46bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_46c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_471d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4724: Unknown result type (might be due to invalid IL or missing references)
		//IL_472a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4758: Unknown result type (might be due to invalid IL or missing references)
		//IL_4762: Unknown result type (might be due to invalid IL or missing references)
		//IL_4767: Unknown result type (might be due to invalid IL or missing references)
		//IL_47c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_47c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_47cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_47fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4807: Unknown result type (might be due to invalid IL or missing references)
		//IL_480c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4867: Unknown result type (might be due to invalid IL or missing references)
		//IL_486e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4874: Unknown result type (might be due to invalid IL or missing references)
		//IL_48a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_48ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_48b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fef: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ff4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4002: Unknown result type (might be due to invalid IL or missing references)
		//IL_4008: Unknown result type (might be due to invalid IL or missing references)
		//IL_4015: Unknown result type (might be due to invalid IL or missing references)
		//IL_401b: Unknown result type (might be due to invalid IL or missing references)
		//IL_401d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4029: Unknown result type (might be due to invalid IL or missing references)
		//IL_4033: Unknown result type (might be due to invalid IL or missing references)
		//IL_4038: Unknown result type (might be due to invalid IL or missing references)
		//IL_403d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4062: Unknown result type (might be due to invalid IL or missing references)
		//IL_406c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4071: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ab4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ac0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aea: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b23: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b32: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b38: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b48: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b52: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b88: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_40a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_40c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_40cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_40e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_40e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_40f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_40fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_410a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4110: Unknown result type (might be due to invalid IL or missing references)
		//IL_4112: Unknown result type (might be due to invalid IL or missing references)
		//IL_411e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4128: Unknown result type (might be due to invalid IL or missing references)
		//IL_412d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4132: Unknown result type (might be due to invalid IL or missing references)
		//IL_4157: Unknown result type (might be due to invalid IL or missing references)
		//IL_4161: Unknown result type (might be due to invalid IL or missing references)
		//IL_4166: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e35: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e63: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e83: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e88: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e96: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ea6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4eb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ebc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ec1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ec6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4efb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f05: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f32: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f42: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f47: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f67: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f92: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4fe1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4feb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ff0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ff5: Unknown result type (might be due to invalid IL or missing references)
		//IL_5018: Unknown result type (might be due to invalid IL or missing references)
		//IL_5022: Unknown result type (might be due to invalid IL or missing references)
		//IL_5027: Unknown result type (might be due to invalid IL or missing references)
		//IL_5060: Unknown result type (might be due to invalid IL or missing references)
		//IL_506a: Unknown result type (might be due to invalid IL or missing references)
		//IL_506f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5092: Unknown result type (might be due to invalid IL or missing references)
		//IL_5097: Unknown result type (might be due to invalid IL or missing references)
		//IL_50a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_50ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_50b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_529e: Unknown result type (might be due to invalid IL or missing references)
		//IL_52a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_52a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_52af: Unknown result type (might be due to invalid IL or missing references)
		//IL_52b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_52b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_50f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_511b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5121: Unknown result type (might be due to invalid IL or missing references)
		//IL_5141: Unknown result type (might be due to invalid IL or missing references)
		//IL_5146: Unknown result type (might be due to invalid IL or missing references)
		//IL_5154: Unknown result type (might be due to invalid IL or missing references)
		//IL_515a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5167: Unknown result type (might be due to invalid IL or missing references)
		//IL_516d: Unknown result type (might be due to invalid IL or missing references)
		//IL_516f: Unknown result type (might be due to invalid IL or missing references)
		//IL_517b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5185: Unknown result type (might be due to invalid IL or missing references)
		//IL_518a: Unknown result type (might be due to invalid IL or missing references)
		//IL_518f: Unknown result type (might be due to invalid IL or missing references)
		//IL_51c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_51ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_51d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_51f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_51fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_5217: Unknown result type (might be due to invalid IL or missing references)
		//IL_521c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5221: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ba2: Unknown result type (might be due to invalid IL or missing references)
		//IL_5aff: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b04: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_530c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5312: Unknown result type (might be due to invalid IL or missing references)
		//IL_52cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_52d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_52e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_52ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_4187: Unknown result type (might be due to invalid IL or missing references)
		//IL_41c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_41c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_41ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_41d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_41d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_41e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_41e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_420b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4210: Unknown result type (might be due to invalid IL or missing references)
		//IL_421e: Unknown result type (might be due to invalid IL or missing references)
		//IL_422e: Unknown result type (might be due to invalid IL or missing references)
		//IL_423a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4244: Unknown result type (might be due to invalid IL or missing references)
		//IL_4249: Unknown result type (might be due to invalid IL or missing references)
		//IL_424e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4265: Unknown result type (might be due to invalid IL or missing references)
		//IL_426a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4274: Unknown result type (might be due to invalid IL or missing references)
		//IL_4279: Unknown result type (might be due to invalid IL or missing references)
		//IL_427e: Unknown result type (might be due to invalid IL or missing references)
		//IL_57fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_5800: Unknown result type (might be due to invalid IL or missing references)
		//IL_6324: Unknown result type (might be due to invalid IL or missing references)
		//IL_6329: Unknown result type (might be due to invalid IL or missing references)
		//IL_6346: Unknown result type (might be due to invalid IL or missing references)
		//IL_636a: Unknown result type (might be due to invalid IL or missing references)
		//IL_637c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6381: Unknown result type (might be due to invalid IL or missing references)
		//IL_638b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6390: Unknown result type (might be due to invalid IL or missing references)
		//IL_6395: Unknown result type (might be due to invalid IL or missing references)
		//IL_42c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_42cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_42d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_54c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_54ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_54f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a23: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a40: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a64: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c20: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c54: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c59: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_63bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_63e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_63e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_6405: Unknown result type (might be due to invalid IL or missing references)
		//IL_640a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6418: Unknown result type (might be due to invalid IL or missing references)
		//IL_6428: Unknown result type (might be due to invalid IL or missing references)
		//IL_6434: Unknown result type (might be due to invalid IL or missing references)
		//IL_643e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6443: Unknown result type (might be due to invalid IL or missing references)
		//IL_6448: Unknown result type (might be due to invalid IL or missing references)
		//IL_5a19: Unknown result type (might be due to invalid IL or missing references)
		//IL_5a3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5a42: Unknown result type (might be due to invalid IL or missing references)
		//IL_5a79: Unknown result type (might be due to invalid IL or missing references)
		//IL_5a83: Unknown result type (might be due to invalid IL or missing references)
		//IL_5a88: Unknown result type (might be due to invalid IL or missing references)
		//IL_5997: Unknown result type (might be due to invalid IL or missing references)
		//IL_59a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_553a: Unknown result type (might be due to invalid IL or missing references)
		//IL_555d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5563: Unknown result type (might be due to invalid IL or missing references)
		//IL_55a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_55af: Unknown result type (might be due to invalid IL or missing references)
		//IL_55b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a97: Unknown result type (might be due to invalid IL or missing references)
		//IL_6abb: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ac1: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ae0: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ae5: Unknown result type (might be due to invalid IL or missing references)
		//IL_6af3: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b03: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b19: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b23: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ca3: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ccc: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ceb: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d24: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d29: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d63: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d72: Unknown result type (might be due to invalid IL or missing references)
		//IL_5dc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_5de5: Unknown result type (might be due to invalid IL or missing references)
		//IL_5deb: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e39: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e43: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e48: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e70: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5883: Unknown result type (might be due to invalid IL or missing references)
		//IL_5889: Unknown result type (might be due to invalid IL or missing references)
		//IL_58b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_58bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_5901: Unknown result type (might be due to invalid IL or missing references)
		//IL_590b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5910: Unknown result type (might be due to invalid IL or missing references)
		//IL_55e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_560d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5613: Unknown result type (might be due to invalid IL or missing references)
		//IL_5643: Unknown result type (might be due to invalid IL or missing references)
		//IL_564d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5652: Unknown result type (might be due to invalid IL or missing references)
		//IL_75a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_75e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_75e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_6477: Unknown result type (might be due to invalid IL or missing references)
		//IL_649c: Unknown result type (might be due to invalid IL or missing references)
		//IL_64a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_64c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_64c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_64d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_64e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_64f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_64fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_64ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_6504: Unknown result type (might be due to invalid IL or missing references)
		//IL_654b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6555: Unknown result type (might be due to invalid IL or missing references)
		//IL_655a: Unknown result type (might be due to invalid IL or missing references)
		//IL_657d: Unknown result type (might be due to invalid IL or missing references)
		//IL_658f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6594: Unknown result type (might be due to invalid IL or missing references)
		//IL_65af: Unknown result type (might be due to invalid IL or missing references)
		//IL_65b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_65b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_65be: Unknown result type (might be due to invalid IL or missing references)
		//IL_65e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_65e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_6605: Unknown result type (might be due to invalid IL or missing references)
		//IL_660a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6618: Unknown result type (might be due to invalid IL or missing references)
		//IL_6628: Unknown result type (might be due to invalid IL or missing references)
		//IL_6634: Unknown result type (might be due to invalid IL or missing references)
		//IL_663e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6643: Unknown result type (might be due to invalid IL or missing references)
		//IL_6648: Unknown result type (might be due to invalid IL or missing references)
		//IL_666b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6675: Unknown result type (might be due to invalid IL or missing references)
		//IL_667a: Unknown result type (might be due to invalid IL or missing references)
		//IL_66b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_66bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_66c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_66f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_6709: Unknown result type (might be due to invalid IL or missing references)
		//IL_670e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6718: Unknown result type (might be due to invalid IL or missing references)
		//IL_671d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6722: Unknown result type (might be due to invalid IL or missing references)
		//IL_56ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_56e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_56ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_56f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_56fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_5700: Unknown result type (might be due to invalid IL or missing references)
		//IL_5707: Unknown result type (might be due to invalid IL or missing references)
		//IL_570d: Unknown result type (might be due to invalid IL or missing references)
		//IL_574b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5755: Unknown result type (might be due to invalid IL or missing references)
		//IL_575a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7992: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b68: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b92: Unknown result type (might be due to invalid IL or missing references)
		//IL_6bb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_6bb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_6bc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_6bd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_6be0: Unknown result type (might be due to invalid IL or missing references)
		//IL_6bea: Unknown result type (might be due to invalid IL or missing references)
		//IL_6bef: Unknown result type (might be due to invalid IL or missing references)
		//IL_6bf4: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c29: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c33: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c38: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c53: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c74: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c99: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6cac: Unknown result type (might be due to invalid IL or missing references)
		//IL_6cbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_6cc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_6cd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_6cd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_6cdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_6cff: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d09: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d47: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d51: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d56: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f25: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f44: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f69: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f82: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f95: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f97: Unknown result type (might be due to invalid IL or missing references)
		//IL_5fa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_5fad: Unknown result type (might be due to invalid IL or missing references)
		//IL_5fb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_5fb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_5fec: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ff6: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ffb: Unknown result type (might be due to invalid IL or missing references)
		//IL_77bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_77fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_7801: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d20: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d25: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d31: Unknown result type (might be due to invalid IL or missing references)
		//IL_76ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_76f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_76fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_7720: Unknown result type (might be due to invalid IL or missing references)
		//IL_7726: Unknown result type (might be due to invalid IL or missing references)
		//IL_7730: Unknown result type (might be due to invalid IL or missing references)
		//IL_7735: Unknown result type (might be due to invalid IL or missing references)
		//IL_773a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6752: Unknown result type (might be due to invalid IL or missing references)
		//IL_6773: Unknown result type (might be due to invalid IL or missing references)
		//IL_6779: Unknown result type (might be due to invalid IL or missing references)
		//IL_6798: Unknown result type (might be due to invalid IL or missing references)
		//IL_679d: Unknown result type (might be due to invalid IL or missing references)
		//IL_67ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_67b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_67be: Unknown result type (might be due to invalid IL or missing references)
		//IL_67c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_67c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_67d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_67dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_67e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_67e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_682d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6837: Unknown result type (might be due to invalid IL or missing references)
		//IL_683c: Unknown result type (might be due to invalid IL or missing references)
		//IL_685f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6871: Unknown result type (might be due to invalid IL or missing references)
		//IL_6876: Unknown result type (might be due to invalid IL or missing references)
		//IL_6880: Unknown result type (might be due to invalid IL or missing references)
		//IL_6885: Unknown result type (might be due to invalid IL or missing references)
		//IL_688a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e59: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e78: Unknown result type (might be due to invalid IL or missing references)
		//IL_79c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a04: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6dbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_6dc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_6de1: Unknown result type (might be due to invalid IL or missing references)
		//IL_6de6: Unknown result type (might be due to invalid IL or missing references)
		//IL_6df4: Unknown result type (might be due to invalid IL or missing references)
		//IL_6dfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e07: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e25: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e64: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e73: Unknown result type (might be due to invalid IL or missing references)
		//IL_6079: Unknown result type (might be due to invalid IL or missing references)
		//IL_6099: Unknown result type (might be due to invalid IL or missing references)
		//IL_609f: Unknown result type (might be due to invalid IL or missing references)
		//IL_60be: Unknown result type (might be due to invalid IL or missing references)
		//IL_60c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_60d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_60d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_60e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_60ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_60ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_60f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_6102: Unknown result type (might be due to invalid IL or missing references)
		//IL_6107: Unknown result type (might be due to invalid IL or missing references)
		//IL_610c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6141: Unknown result type (might be due to invalid IL or missing references)
		//IL_614b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6150: Unknown result type (might be due to invalid IL or missing references)
		//IL_7907: Unknown result type (might be due to invalid IL or missing references)
		//IL_7911: Unknown result type (might be due to invalid IL or missing references)
		//IL_7916: Unknown result type (might be due to invalid IL or missing references)
		//IL_7939: Unknown result type (might be due to invalid IL or missing references)
		//IL_793f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7949: Unknown result type (might be due to invalid IL or missing references)
		//IL_794e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7953: Unknown result type (might be due to invalid IL or missing references)
		//IL_7eb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d53: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d61: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d76: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d87: Unknown result type (might be due to invalid IL or missing references)
		//IL_7da0: Unknown result type (might be due to invalid IL or missing references)
		//IL_7da6: Unknown result type (might be due to invalid IL or missing references)
		//IL_7dc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_7dc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_7dd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_7dd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_7de1: Unknown result type (might be due to invalid IL or missing references)
		//IL_7de6: Unknown result type (might be due to invalid IL or missing references)
		//IL_7deb: Unknown result type (might be due to invalid IL or missing references)
		//IL_7df6: Unknown result type (might be due to invalid IL or missing references)
		//IL_7dfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_68ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_68de: Unknown result type (might be due to invalid IL or missing references)
		//IL_68e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_6903: Unknown result type (might be due to invalid IL or missing references)
		//IL_6908: Unknown result type (might be due to invalid IL or missing references)
		//IL_6916: Unknown result type (might be due to invalid IL or missing references)
		//IL_691c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6929: Unknown result type (might be due to invalid IL or missing references)
		//IL_692f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6931: Unknown result type (might be due to invalid IL or missing references)
		//IL_693d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6947: Unknown result type (might be due to invalid IL or missing references)
		//IL_694c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6951: Unknown result type (might be due to invalid IL or missing references)
		//IL_6986: Unknown result type (might be due to invalid IL or missing references)
		//IL_6990: Unknown result type (might be due to invalid IL or missing references)
		//IL_6995: Unknown result type (might be due to invalid IL or missing references)
		//IL_69b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_69ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_69cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_69d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_69de: Unknown result type (might be due to invalid IL or missing references)
		//IL_69e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_81eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_81f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_820e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8224: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b10: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b42: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b48: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b52: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b57: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6eb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_6edc: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ee2: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f01: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f06: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f14: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f27: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f45: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f84: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f93: Unknown result type (might be due to invalid IL or missing references)
		//IL_6181: Unknown result type (might be due to invalid IL or missing references)
		//IL_61ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_61bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_61c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_61ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_61d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_61da: Unknown result type (might be due to invalid IL or missing references)
		//IL_61e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_620d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6212: Unknown result type (might be due to invalid IL or missing references)
		//IL_6220: Unknown result type (might be due to invalid IL or missing references)
		//IL_6230: Unknown result type (might be due to invalid IL or missing references)
		//IL_623c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6246: Unknown result type (might be due to invalid IL or missing references)
		//IL_624b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6250: Unknown result type (might be due to invalid IL or missing references)
		//IL_6273: Unknown result type (might be due to invalid IL or missing references)
		//IL_627d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6282: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ee4: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f05: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f59: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f63: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f68: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_87ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_87b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_87cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_826e: Unknown result type (might be due to invalid IL or missing references)
		//IL_828e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8294: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c02: Unknown result type (might be due to invalid IL or missing references)
		//IL_6fc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ffd: Unknown result type (might be due to invalid IL or missing references)
		//IL_7002: Unknown result type (might be due to invalid IL or missing references)
		//IL_7007: Unknown result type (might be due to invalid IL or missing references)
		//IL_7011: Unknown result type (might be due to invalid IL or missing references)
		//IL_7016: Unknown result type (might be due to invalid IL or missing references)
		//IL_701d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7023: Unknown result type (might be due to invalid IL or missing references)
		//IL_7050: Unknown result type (might be due to invalid IL or missing references)
		//IL_7055: Unknown result type (might be due to invalid IL or missing references)
		//IL_7063: Unknown result type (might be due to invalid IL or missing references)
		//IL_7073: Unknown result type (might be due to invalid IL or missing references)
		//IL_707f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7089: Unknown result type (might be due to invalid IL or missing references)
		//IL_708e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7093: Unknown result type (might be due to invalid IL or missing references)
		//IL_70b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_70c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_70c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_866f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8689: Unknown result type (might be due to invalid IL or missing references)
		//IL_868f: Unknown result type (might be due to invalid IL or missing references)
		//IL_86bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_86c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_86ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_8715: Unknown result type (might be due to invalid IL or missing references)
		//IL_871a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8724: Unknown result type (might be due to invalid IL or missing references)
		//IL_8729: Unknown result type (might be due to invalid IL or missing references)
		//IL_872e: Unknown result type (might be due to invalid IL or missing references)
		//IL_874b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8751: Unknown result type (might be due to invalid IL or missing references)
		//IL_875b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8760: Unknown result type (might be due to invalid IL or missing references)
		//IL_85c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_85e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_85ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_838e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8393: Unknown result type (might be due to invalid IL or missing references)
		//IL_83a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_83b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_83bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_83c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_83cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_83d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_841a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8424: Unknown result type (might be due to invalid IL or missing references)
		//IL_8429: Unknown result type (might be due to invalid IL or missing references)
		//IL_832b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8330: Unknown result type (might be due to invalid IL or missing references)
		//IL_8341: Unknown result type (might be due to invalid IL or missing references)
		//IL_834f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8355: Unknown result type (might be due to invalid IL or missing references)
		//IL_8357: Unknown result type (might be due to invalid IL or missing references)
		//IL_8372: Unknown result type (might be due to invalid IL or missing references)
		//IL_8377: Unknown result type (might be due to invalid IL or missing references)
		//IL_7fb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_7fd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_7fd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ff7: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ffc: Unknown result type (might be due to invalid IL or missing references)
		//IL_800a: Unknown result type (might be due to invalid IL or missing references)
		//IL_801a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8026: Unknown result type (might be due to invalid IL or missing references)
		//IL_8030: Unknown result type (might be due to invalid IL or missing references)
		//IL_8035: Unknown result type (might be due to invalid IL or missing references)
		//IL_803a: Unknown result type (might be due to invalid IL or missing references)
		//IL_806f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8079: Unknown result type (might be due to invalid IL or missing references)
		//IL_807e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c31: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c51: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c87: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c92: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c14: Unknown result type (might be due to invalid IL or missing references)
		//IL_8827: Unknown result type (might be due to invalid IL or missing references)
		//IL_8848: Unknown result type (might be due to invalid IL or missing references)
		//IL_884e: Unknown result type (might be due to invalid IL or missing references)
		//IL_886d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8872: Unknown result type (might be due to invalid IL or missing references)
		//IL_8880: Unknown result type (might be due to invalid IL or missing references)
		//IL_8890: Unknown result type (might be due to invalid IL or missing references)
		//IL_889c: Unknown result type (might be due to invalid IL or missing references)
		//IL_88a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_88ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_88b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_8473: Unknown result type (might be due to invalid IL or missing references)
		//IL_8493: Unknown result type (might be due to invalid IL or missing references)
		//IL_8499: Unknown result type (might be due to invalid IL or missing references)
		//IL_84b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_84bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_84cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_84d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_84de: Unknown result type (might be due to invalid IL or missing references)
		//IL_84e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_84e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_84f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_84fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_8501: Unknown result type (might be due to invalid IL or missing references)
		//IL_8506: Unknown result type (might be due to invalid IL or missing references)
		//IL_8562: Unknown result type (might be due to invalid IL or missing references)
		//IL_856c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8571: Unknown result type (might be due to invalid IL or missing references)
		//IL_9081: Unknown result type (might be due to invalid IL or missing references)
		//IL_9086: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c76: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c97: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8cdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ce9: Unknown result type (might be due to invalid IL or missing references)
		//IL_8cee: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d27: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d37: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d41: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d68: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d93: Unknown result type (might be due to invalid IL or missing references)
		//IL_8dd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ddf: Unknown result type (might be due to invalid IL or missing references)
		//IL_8de4: Unknown result type (might be due to invalid IL or missing references)
		//IL_80c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_80e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_80ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_8109: Unknown result type (might be due to invalid IL or missing references)
		//IL_810e: Unknown result type (might be due to invalid IL or missing references)
		//IL_811c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8122: Unknown result type (might be due to invalid IL or missing references)
		//IL_812f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8135: Unknown result type (might be due to invalid IL or missing references)
		//IL_8137: Unknown result type (might be due to invalid IL or missing references)
		//IL_8143: Unknown result type (might be due to invalid IL or missing references)
		//IL_814d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8152: Unknown result type (might be due to invalid IL or missing references)
		//IL_8157: Unknown result type (might be due to invalid IL or missing references)
		//IL_818c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8196: Unknown result type (might be due to invalid IL or missing references)
		//IL_819b: Unknown result type (might be due to invalid IL or missing references)
		//IL_88f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_891c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8922: Unknown result type (might be due to invalid IL or missing references)
		//IL_8941: Unknown result type (might be due to invalid IL or missing references)
		//IL_8946: Unknown result type (might be due to invalid IL or missing references)
		//IL_8954: Unknown result type (might be due to invalid IL or missing references)
		//IL_8964: Unknown result type (might be due to invalid IL or missing references)
		//IL_8970: Unknown result type (might be due to invalid IL or missing references)
		//IL_897a: Unknown result type (might be due to invalid IL or missing references)
		//IL_897f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8984: Unknown result type (might be due to invalid IL or missing references)
		//IL_89b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_89c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_89c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_90d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_90f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_9137: Unknown result type (might be due to invalid IL or missing references)
		//IL_9141: Unknown result type (might be due to invalid IL or missing references)
		//IL_9146: Unknown result type (might be due to invalid IL or missing references)
		//IL_917f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9185: Unknown result type (might be due to invalid IL or missing references)
		//IL_918f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9194: Unknown result type (might be due to invalid IL or missing references)
		//IL_9199: Unknown result type (might be due to invalid IL or missing references)
		//IL_91c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_91e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_9228: Unknown result type (might be due to invalid IL or missing references)
		//IL_9232: Unknown result type (might be due to invalid IL or missing references)
		//IL_9237: Unknown result type (might be due to invalid IL or missing references)
		//IL_8e77: Unknown result type (might be due to invalid IL or missing references)
		//IL_8e9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ea2: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ed2: Unknown result type (might be due to invalid IL or missing references)
		//IL_8edc: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ee1: Unknown result type (might be due to invalid IL or missing references)
		//IL_a396: Unknown result type (might be due to invalid IL or missing references)
		//IL_a3a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_9292: Unknown result type (might be due to invalid IL or missing references)
		//IL_92cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_92d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_9301: Unknown result type (might be due to invalid IL or missing references)
		//IL_930b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9310: Unknown result type (might be due to invalid IL or missing references)
		//IL_934a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9350: Unknown result type (might be due to invalid IL or missing references)
		//IL_9355: Unknown result type (might be due to invalid IL or missing references)
		//IL_935f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9364: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f56: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f95: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_8faa: Unknown result type (might be due to invalid IL or missing references)
		//IL_8faf: Unknown result type (might be due to invalid IL or missing references)
		//IL_8feb: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ff5: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ffa: Unknown result type (might be due to invalid IL or missing references)
		//IL_9000: Unknown result type (might be due to invalid IL or missing references)
		//IL_9005: Unknown result type (might be due to invalid IL or missing references)
		//IL_9041: Unknown result type (might be due to invalid IL or missing references)
		//IL_904b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9050: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a31: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a37: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a56: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a69: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a82: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a84: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a90: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8aa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ad9: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ae3: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ae8: Unknown result type (might be due to invalid IL or missing references)
		//IL_93d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_93f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_93fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_945c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9466: Unknown result type (might be due to invalid IL or missing references)
		//IL_946b: Unknown result type (might be due to invalid IL or missing references)
		//IL_a988: Unknown result type (might be due to invalid IL or missing references)
		//IL_a99a: Unknown result type (might be due to invalid IL or missing references)
		//IL_a3c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_a3c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_a3d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_a3d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_a400: Unknown result type (might be due to invalid IL or missing references)
		//IL_a406: Unknown result type (might be due to invalid IL or missing references)
		//IL_a430: Unknown result type (might be due to invalid IL or missing references)
		//IL_a436: Unknown result type (might be due to invalid IL or missing references)
		//IL_a43b: Unknown result type (might be due to invalid IL or missing references)
		//IL_a440: Unknown result type (might be due to invalid IL or missing references)
		//IL_a445: Unknown result type (might be due to invalid IL or missing references)
		//IL_a452: Unknown result type (might be due to invalid IL or missing references)
		//IL_a457: Unknown result type (might be due to invalid IL or missing references)
		//IL_a464: Unknown result type (might be due to invalid IL or missing references)
		//IL_a46f: Unknown result type (might be due to invalid IL or missing references)
		//IL_a474: Unknown result type (might be due to invalid IL or missing references)
		//IL_a479: Unknown result type (might be due to invalid IL or missing references)
		//IL_7249: Unknown result type (might be due to invalid IL or missing references)
		//IL_725d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7262: Unknown result type (might be due to invalid IL or missing references)
		//IL_7267: Unknown result type (might be due to invalid IL or missing references)
		//IL_94e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_9507: Unknown result type (might be due to invalid IL or missing references)
		//IL_950d: Unknown result type (might be due to invalid IL or missing references)
		//IL_956f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9579: Unknown result type (might be due to invalid IL or missing references)
		//IL_957e: Unknown result type (might be due to invalid IL or missing references)
		//IL_a63c: Unknown result type (might be due to invalid IL or missing references)
		//IL_a660: Unknown result type (might be due to invalid IL or missing references)
		//IL_a666: Unknown result type (might be due to invalid IL or missing references)
		//IL_a696: Unknown result type (might be due to invalid IL or missing references)
		//IL_a6a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_a6a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_a4b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_a4cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_a4d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_a4da: Unknown result type (might be due to invalid IL or missing references)
		//IL_a48e: Unknown result type (might be due to invalid IL or missing references)
		//IL_a4a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_a4a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b54: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b73: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b78: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b86: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b99: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ba1: Unknown result type (might be due to invalid IL or missing references)
		//IL_8bad: Unknown result type (might be due to invalid IL or missing references)
		//IL_8bb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_8bbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_8bc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_8bf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c00: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c05: Unknown result type (might be due to invalid IL or missing references)
		//IL_72c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_95e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_9601: Unknown result type (might be due to invalid IL or missing references)
		//IL_9607: Unknown result type (might be due to invalid IL or missing references)
		//IL_964d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9657: Unknown result type (might be due to invalid IL or missing references)
		//IL_965c: Unknown result type (might be due to invalid IL or missing references)
		//IL_a9c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_a9c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_a9d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_a9d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_a9ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa05: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa35: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa44: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa51: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa56: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa63: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa73: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa78: Unknown result type (might be due to invalid IL or missing references)
		//IL_a513: Unknown result type (might be due to invalid IL or missing references)
		//IL_a518: Unknown result type (might be due to invalid IL or missing references)
		//IL_a529: Unknown result type (might be due to invalid IL or missing references)
		//IL_a52e: Unknown result type (might be due to invalid IL or missing references)
		//IL_a538: Unknown result type (might be due to invalid IL or missing references)
		//IL_a53d: Unknown result type (might be due to invalid IL or missing references)
		//IL_72f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_72d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_73e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_73f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_73fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_7401: Unknown result type (might be due to invalid IL or missing references)
		//IL_ae49: Unknown result type (might be due to invalid IL or missing references)
		//IL_ae4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_aab5: Unknown result type (might be due to invalid IL or missing references)
		//IL_aaca: Unknown result type (might be due to invalid IL or missing references)
		//IL_aad4: Unknown result type (might be due to invalid IL or missing references)
		//IL_aad9: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_aaa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_aaa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_a70f: Unknown result type (might be due to invalid IL or missing references)
		//IL_a716: Unknown result type (might be due to invalid IL or missing references)
		//IL_a71c: Unknown result type (might be due to invalid IL or missing references)
		//IL_a760: Unknown result type (might be due to invalid IL or missing references)
		//IL_a76a: Unknown result type (might be due to invalid IL or missing references)
		//IL_a76f: Unknown result type (might be due to invalid IL or missing references)
		//IL_731b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7336: Unknown result type (might be due to invalid IL or missing references)
		//IL_733b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7347: Unknown result type (might be due to invalid IL or missing references)
		//IL_7352: Unknown result type (might be due to invalid IL or missing references)
		//IL_735d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7368: Unknown result type (might be due to invalid IL or missing references)
		//IL_745b: Unknown result type (might be due to invalid IL or missing references)
		//IL_96d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_96f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_96f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_9742: Unknown result type (might be due to invalid IL or missing references)
		//IL_974c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9751: Unknown result type (might be due to invalid IL or missing references)
		//IL_b1ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_b1f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad89: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad94: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad99: Unknown result type (might be due to invalid IL or missing references)
		//IL_ada6: Unknown result type (might be due to invalid IL or missing references)
		//IL_adb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_adbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_adc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab12: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab17: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab28: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab37: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_748a: Unknown result type (might be due to invalid IL or missing references)
		//IL_746d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c61: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c66: Unknown result type (might be due to invalid IL or missing references)
		//IL_97bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_97e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_97e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_9849: Unknown result type (might be due to invalid IL or missing references)
		//IL_9853: Unknown result type (might be due to invalid IL or missing references)
		//IL_9858: Unknown result type (might be due to invalid IL or missing references)
		//IL_b698: Unknown result type (might be due to invalid IL or missing references)
		//IL_b69d: Unknown result type (might be due to invalid IL or missing references)
		//IL_b6ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_b6d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_aec2: Unknown result type (might be due to invalid IL or missing references)
		//IL_aee3: Unknown result type (might be due to invalid IL or missing references)
		//IL_aee9: Unknown result type (might be due to invalid IL or missing references)
		//IL_a8da: Unknown result type (might be due to invalid IL or missing references)
		//IL_a8e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_a8e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_74b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_74d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_74d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_74e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_74ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_74f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_7502: Unknown result type (might be due to invalid IL or missing references)
		//IL_98d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_98f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_98fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_9958: Unknown result type (might be due to invalid IL or missing references)
		//IL_9962: Unknown result type (might be due to invalid IL or missing references)
		//IL_9967: Unknown result type (might be due to invalid IL or missing references)
		//IL_bda5: Unknown result type (might be due to invalid IL or missing references)
		//IL_bdaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_bdc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_bddd: Unknown result type (might be due to invalid IL or missing references)
		//IL_b269: Unknown result type (might be due to invalid IL or missing references)
		//IL_b28a: Unknown result type (might be due to invalid IL or missing references)
		//IL_b290: Unknown result type (might be due to invalid IL or missing references)
		//IL_b2bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_b2d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_b2dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_b2df: Unknown result type (might be due to invalid IL or missing references)
		//IL_b2ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_b2f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_b2fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_b2ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_99a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_99b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_99b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_b703: Unknown result type (might be due to invalid IL or missing references)
		//IL_b724: Unknown result type (might be due to invalid IL or missing references)
		//IL_b72a: Unknown result type (might be due to invalid IL or missing references)
		//IL_b749: Unknown result type (might be due to invalid IL or missing references)
		//IL_b74e: Unknown result type (might be due to invalid IL or missing references)
		//IL_b75c: Unknown result type (might be due to invalid IL or missing references)
		//IL_b76c: Unknown result type (might be due to invalid IL or missing references)
		//IL_b778: Unknown result type (might be due to invalid IL or missing references)
		//IL_b782: Unknown result type (might be due to invalid IL or missing references)
		//IL_b787: Unknown result type (might be due to invalid IL or missing references)
		//IL_b78c: Unknown result type (might be due to invalid IL or missing references)
		//IL_af33: Unknown result type (might be due to invalid IL or missing references)
		//IL_af56: Unknown result type (might be due to invalid IL or missing references)
		//IL_af5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_af9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_afa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_afad: Unknown result type (might be due to invalid IL or missing references)
		//IL_afc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_afec: Unknown result type (might be due to invalid IL or missing references)
		//IL_aff2: Unknown result type (might be due to invalid IL or missing references)
		//IL_b022: Unknown result type (might be due to invalid IL or missing references)
		//IL_b02c: Unknown result type (might be due to invalid IL or missing references)
		//IL_b031: Unknown result type (might be due to invalid IL or missing references)
		//IL_99da: Unknown result type (might be due to invalid IL or missing references)
		//IL_99df: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a41: Unknown result type (might be due to invalid IL or missing references)
		//IL_be10: Unknown result type (might be due to invalid IL or missing references)
		//IL_be31: Unknown result type (might be due to invalid IL or missing references)
		//IL_be37: Unknown result type (might be due to invalid IL or missing references)
		//IL_be56: Unknown result type (might be due to invalid IL or missing references)
		//IL_be5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_be69: Unknown result type (might be due to invalid IL or missing references)
		//IL_be79: Unknown result type (might be due to invalid IL or missing references)
		//IL_be85: Unknown result type (might be due to invalid IL or missing references)
		//IL_be8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_be94: Unknown result type (might be due to invalid IL or missing references)
		//IL_be99: Unknown result type (might be due to invalid IL or missing references)
		//IL_b344: Unknown result type (might be due to invalid IL or missing references)
		//IL_b367: Unknown result type (might be due to invalid IL or missing references)
		//IL_b36d: Unknown result type (might be due to invalid IL or missing references)
		//IL_b399: Unknown result type (might be due to invalid IL or missing references)
		//IL_b3b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_b3ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_b3bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_b3cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_b3d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_b3d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_b3dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_b411: Unknown result type (might be due to invalid IL or missing references)
		//IL_b41b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b420: Unknown result type (might be due to invalid IL or missing references)
		//IL_b43b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b45f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b465: Unknown result type (might be due to invalid IL or missing references)
		//IL_b491: Unknown result type (might be due to invalid IL or missing references)
		//IL_b4ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_b4b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_b4b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_b4c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_b4ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_b4cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_b4d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_b4f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_b501: Unknown result type (might be due to invalid IL or missing references)
		//IL_b506: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ce9: Unknown result type (might be due to invalid IL or missing references)
		//IL_9cef: Unknown result type (might be due to invalid IL or missing references)
		//IL_9d15: Unknown result type (might be due to invalid IL or missing references)
		//IL_9d1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9d61: Unknown result type (might be due to invalid IL or missing references)
		//IL_9d6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9d70: Unknown result type (might be due to invalid IL or missing references)
		//IL_c671: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4df: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_c527: Unknown result type (might be due to invalid IL or missing references)
		//IL_c52d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c541: Unknown result type (might be due to invalid IL or missing references)
		//IL_c54b: Unknown result type (might be due to invalid IL or missing references)
		//IL_c550: Unknown result type (might be due to invalid IL or missing references)
		//IL_c555: Unknown result type (might be due to invalid IL or missing references)
		//IL_b7d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_b7f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_b7fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_b819: Unknown result type (might be due to invalid IL or missing references)
		//IL_b81e: Unknown result type (might be due to invalid IL or missing references)
		//IL_b82c: Unknown result type (might be due to invalid IL or missing references)
		//IL_b83c: Unknown result type (might be due to invalid IL or missing references)
		//IL_b848: Unknown result type (might be due to invalid IL or missing references)
		//IL_b852: Unknown result type (might be due to invalid IL or missing references)
		//IL_b857: Unknown result type (might be due to invalid IL or missing references)
		//IL_b85c: Unknown result type (might be due to invalid IL or missing references)
		//IL_b891: Unknown result type (might be due to invalid IL or missing references)
		//IL_b89b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b8a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_b8bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_b8db: Unknown result type (might be due to invalid IL or missing references)
		//IL_b8e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_b900: Unknown result type (might be due to invalid IL or missing references)
		//IL_b905: Unknown result type (might be due to invalid IL or missing references)
		//IL_b913: Unknown result type (might be due to invalid IL or missing references)
		//IL_b923: Unknown result type (might be due to invalid IL or missing references)
		//IL_b92f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b939: Unknown result type (might be due to invalid IL or missing references)
		//IL_b93e: Unknown result type (might be due to invalid IL or missing references)
		//IL_b943: Unknown result type (might be due to invalid IL or missing references)
		//IL_b966: Unknown result type (might be due to invalid IL or missing references)
		//IL_b970: Unknown result type (might be due to invalid IL or missing references)
		//IL_b975: Unknown result type (might be due to invalid IL or missing references)
		//IL_b074: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_b111: Unknown result type (might be due to invalid IL or missing references)
		//IL_b11b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b120: Unknown result type (might be due to invalid IL or missing references)
		//IL_9df7: Unknown result type (might be due to invalid IL or missing references)
		//IL_9dfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e10: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ab0: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce96: Unknown result type (might be due to invalid IL or missing references)
		//IL_c59b: Unknown result type (might be due to invalid IL or missing references)
		//IL_c5bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_c5c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_c603: Unknown result type (might be due to invalid IL or missing references)
		//IL_c609: Unknown result type (might be due to invalid IL or missing references)
		//IL_c613: Unknown result type (might be due to invalid IL or missing references)
		//IL_c618: Unknown result type (might be due to invalid IL or missing references)
		//IL_c61d: Unknown result type (might be due to invalid IL or missing references)
		//IL_bede: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf02: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf08: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf27: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf56: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf60: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf65: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_bfa9: Unknown result type (might be due to invalid IL or missing references)
		//IL_bfae: Unknown result type (might be due to invalid IL or missing references)
		//IL_bfc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_bfea: Unknown result type (might be due to invalid IL or missing references)
		//IL_bff0: Unknown result type (might be due to invalid IL or missing references)
		//IL_c00f: Unknown result type (might be due to invalid IL or missing references)
		//IL_c014: Unknown result type (might be due to invalid IL or missing references)
		//IL_c022: Unknown result type (might be due to invalid IL or missing references)
		//IL_c032: Unknown result type (might be due to invalid IL or missing references)
		//IL_c03e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c048: Unknown result type (might be due to invalid IL or missing references)
		//IL_c04d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c052: Unknown result type (might be due to invalid IL or missing references)
		//IL_c075: Unknown result type (might be due to invalid IL or missing references)
		//IL_c07f: Unknown result type (might be due to invalid IL or missing references)
		//IL_c084: Unknown result type (might be due to invalid IL or missing references)
		//IL_b549: Unknown result type (might be due to invalid IL or missing references)
		//IL_b582: Unknown result type (might be due to invalid IL or missing references)
		//IL_b587: Unknown result type (might be due to invalid IL or missing references)
		//IL_b58c: Unknown result type (might be due to invalid IL or missing references)
		//IL_b596: Unknown result type (might be due to invalid IL or missing references)
		//IL_b59b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b5a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_b5a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_b5e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_b5f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_b5f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ee0: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ee6: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f12: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f55: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f64: Unknown result type (might be due to invalid IL or missing references)
		//IL_d014: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba02: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba08: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba27: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba40: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba53: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba55: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba61: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba70: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba75: Unknown result type (might be due to invalid IL or missing references)
		//IL_baaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_bab4: Unknown result type (might be due to invalid IL or missing references)
		//IL_bab9: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ff1: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ff6: Unknown result type (might be due to invalid IL or missing references)
		//IL_a005: Unknown result type (might be due to invalid IL or missing references)
		//IL_a00a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9aeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_d219: Unknown result type (might be due to invalid IL or missing references)
		//IL_ceb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_ced7: Unknown result type (might be due to invalid IL or missing references)
		//IL_cedd: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf19: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf24: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf33: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf62: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf67: Unknown result type (might be due to invalid IL or missing references)
		//IL_cfa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_cfb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_cfbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_caba: Unknown result type (might be due to invalid IL or missing references)
		//IL_cac0: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb02: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb11: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_c112: Unknown result type (might be due to invalid IL or missing references)
		//IL_c118: Unknown result type (might be due to invalid IL or missing references)
		//IL_c137: Unknown result type (might be due to invalid IL or missing references)
		//IL_c13c: Unknown result type (might be due to invalid IL or missing references)
		//IL_c14a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c150: Unknown result type (might be due to invalid IL or missing references)
		//IL_c15d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c163: Unknown result type (might be due to invalid IL or missing references)
		//IL_c165: Unknown result type (might be due to invalid IL or missing references)
		//IL_c171: Unknown result type (might be due to invalid IL or missing references)
		//IL_c17b: Unknown result type (might be due to invalid IL or missing references)
		//IL_c180: Unknown result type (might be due to invalid IL or missing references)
		//IL_c185: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_a0d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_a0dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_a103: Unknown result type (might be due to invalid IL or missing references)
		//IL_a109: Unknown result type (might be due to invalid IL or missing references)
		//IL_a14c: Unknown result type (might be due to invalid IL or missing references)
		//IL_a156: Unknown result type (might be due to invalid IL or missing references)
		//IL_a15b: Unknown result type (might be due to invalid IL or missing references)
		//IL_a17e: Unknown result type (might be due to invalid IL or missing references)
		//IL_a184: Unknown result type (might be due to invalid IL or missing references)
		//IL_a18e: Unknown result type (might be due to invalid IL or missing references)
		//IL_a193: Unknown result type (might be due to invalid IL or missing references)
		//IL_a198: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2df: Unknown result type (might be due to invalid IL or missing references)
		//IL_a341: Unknown result type (might be due to invalid IL or missing references)
		//IL_a34b: Unknown result type (might be due to invalid IL or missing references)
		//IL_a350: Unknown result type (might be due to invalid IL or missing references)
		//IL_d597: Unknown result type (might be due to invalid IL or missing references)
		//IL_d047: Unknown result type (might be due to invalid IL or missing references)
		//IL_d082: Unknown result type (might be due to invalid IL or missing references)
		//IL_d088: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_baff: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb25: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb44: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb49: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb57: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb70: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb72: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb88: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb92: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_a225: Unknown result type (might be due to invalid IL or missing references)
		//IL_a22a: Unknown result type (might be due to invalid IL or missing references)
		//IL_a239: Unknown result type (might be due to invalid IL or missing references)
		//IL_a23e: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d24c: Unknown result type (might be due to invalid IL or missing references)
		//IL_d287: Unknown result type (might be due to invalid IL or missing references)
		//IL_d28d: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb57: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb78: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_cbae: Unknown result type (might be due to invalid IL or missing references)
		//IL_cbb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_cbbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_c70b: Unknown result type (might be due to invalid IL or missing references)
		//IL_c728: Unknown result type (might be due to invalid IL or missing references)
		//IL_c20f: Unknown result type (might be due to invalid IL or missing references)
		//IL_c22f: Unknown result type (might be due to invalid IL or missing references)
		//IL_c235: Unknown result type (might be due to invalid IL or missing references)
		//IL_c254: Unknown result type (might be due to invalid IL or missing references)
		//IL_c259: Unknown result type (might be due to invalid IL or missing references)
		//IL_c267: Unknown result type (might be due to invalid IL or missing references)
		//IL_c26d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c27a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c280: Unknown result type (might be due to invalid IL or missing references)
		//IL_c282: Unknown result type (might be due to invalid IL or missing references)
		//IL_c28e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c298: Unknown result type (might be due to invalid IL or missing references)
		//IL_c29d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c2a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_c2d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_c2e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_c2e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_d6cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_d6d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_d6ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_d5ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_d605: Unknown result type (might be due to invalid IL or missing references)
		//IL_d60b: Unknown result type (might be due to invalid IL or missing references)
		//IL_d64d: Unknown result type (might be due to invalid IL or missing references)
		//IL_d653: Unknown result type (might be due to invalid IL or missing references)
		//IL_d65d: Unknown result type (might be due to invalid IL or missing references)
		//IL_d662: Unknown result type (might be due to invalid IL or missing references)
		//IL_d667: Unknown result type (might be due to invalid IL or missing references)
		//IL_d18e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d198: Unknown result type (might be due to invalid IL or missing references)
		//IL_d19d: Unknown result type (might be due to invalid IL or missing references)
		//IL_d1c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_d1c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_d1d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_d1d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_d1da: Unknown result type (might be due to invalid IL or missing references)
		//IL_c89b: Unknown result type (might be due to invalid IL or missing references)
		//IL_c8a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_c8a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_c8ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_c8bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_c8c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_c8c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_c8cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc07: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc40: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc45: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc54: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc59: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc60: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc66: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc93: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc98: Unknown result type (might be due to invalid IL or missing references)
		//IL_bca6: Unknown result type (might be due to invalid IL or missing references)
		//IL_bcb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_bcc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_bccc: Unknown result type (might be due to invalid IL or missing references)
		//IL_bcd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_bcd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_bcf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd03: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd08: Unknown result type (might be due to invalid IL or missing references)
		//IL_d393: Unknown result type (might be due to invalid IL or missing references)
		//IL_d39d: Unknown result type (might be due to invalid IL or missing references)
		//IL_d3a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_d3c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_d3cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_d3d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_d3da: Unknown result type (might be due to invalid IL or missing references)
		//IL_d3df: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc18: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc38: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc80: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_ccaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_ccca: Unknown result type (might be due to invalid IL or missing references)
		//IL_ccd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_cd00: Unknown result type (might be due to invalid IL or missing references)
		//IL_cd0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_cd0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_cd48: Unknown result type (might be due to invalid IL or missing references)
		//IL_cd4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_cd55: Unknown result type (might be due to invalid IL or missing references)
		//IL_cd93: Unknown result type (might be due to invalid IL or missing references)
		//IL_cd9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_cda2: Unknown result type (might be due to invalid IL or missing references)
		//IL_c317: Unknown result type (might be due to invalid IL or missing references)
		//IL_c350: Unknown result type (might be due to invalid IL or missing references)
		//IL_c355: Unknown result type (might be due to invalid IL or missing references)
		//IL_c35a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c364: Unknown result type (might be due to invalid IL or missing references)
		//IL_c369: Unknown result type (might be due to invalid IL or missing references)
		//IL_c370: Unknown result type (might be due to invalid IL or missing references)
		//IL_c376: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_c409: Unknown result type (might be due to invalid IL or missing references)
		//IL_c413: Unknown result type (might be due to invalid IL or missing references)
		//IL_c418: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c01: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c07: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c11: Unknown result type (might be due to invalid IL or missing references)
		//IL_d737: Unknown result type (might be due to invalid IL or missing references)
		//IL_d758: Unknown result type (might be due to invalid IL or missing references)
		//IL_d75e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d78a: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd03: Unknown result type (might be due to invalid IL or missing references)
		//IL_dcbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_d485: Unknown result type (might be due to invalid IL or missing references)
		//IL_c97d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c989: Unknown result type (might be due to invalid IL or missing references)
		//IL_c98e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c95b: Unknown result type (might be due to invalid IL or missing references)
		//IL_c961: Unknown result type (might be due to invalid IL or missing references)
		//IL_c967: Unknown result type (might be due to invalid IL or missing references)
		//IL_c96c: Unknown result type (might be due to invalid IL or missing references)
		//IL_d817: Unknown result type (might be due to invalid IL or missing references)
		//IL_d83a: Unknown result type (might be due to invalid IL or missing references)
		//IL_d840: Unknown result type (might be due to invalid IL or missing references)
		//IL_d86c: Unknown result type (might be due to invalid IL or missing references)
		//IL_d887: Unknown result type (might be due to invalid IL or missing references)
		//IL_d88d: Unknown result type (might be due to invalid IL or missing references)
		//IL_d88f: Unknown result type (might be due to invalid IL or missing references)
		//IL_d89f: Unknown result type (might be due to invalid IL or missing references)
		//IL_d8a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_d8aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_d8af: Unknown result type (might be due to invalid IL or missing references)
		//IL_d8e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_d8ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_d8f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_d4b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_d4cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_d4d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_d50a: Unknown result type (might be due to invalid IL or missing references)
		//IL_d515: Unknown result type (might be due to invalid IL or missing references)
		//IL_d497: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca01: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca16: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca21: Unknown result type (might be due to invalid IL or missing references)
		//IL_c9c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_c9c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_c9cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_c9d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_c9e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_c9ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_c9f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd34: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd54: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd84: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd93: Unknown result type (might be due to invalid IL or missing references)
		//IL_ddb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_ddb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_ddc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_ddc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_d928: Unknown result type (might be due to invalid IL or missing references)
		//IL_d961: Unknown result type (might be due to invalid IL or missing references)
		//IL_d966: Unknown result type (might be due to invalid IL or missing references)
		//IL_d96b: Unknown result type (might be due to invalid IL or missing references)
		//IL_d975: Unknown result type (might be due to invalid IL or missing references)
		//IL_d97a: Unknown result type (might be due to invalid IL or missing references)
		//IL_d981: Unknown result type (might be due to invalid IL or missing references)
		//IL_d987: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_df1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_df3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_df44: Unknown result type (might be due to invalid IL or missing references)
		//IL_df86: Unknown result type (might be due to invalid IL or missing references)
		//IL_df90: Unknown result type (might be due to invalid IL or missing references)
		//IL_df95: Unknown result type (might be due to invalid IL or missing references)
		//IL_dfb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_dfbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_dfc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_dfcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_dfd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_de0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_de20: Unknown result type (might be due to invalid IL or missing references)
		//IL_de25: Unknown result type (might be due to invalid IL or missing references)
		//IL_de2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_e033: Unknown result type (might be due to invalid IL or missing references)
		//IL_e04d: Unknown result type (might be due to invalid IL or missing references)
		//IL_e053: Unknown result type (might be due to invalid IL or missing references)
		//IL_e083: Unknown result type (might be due to invalid IL or missing references)
		//IL_e08d: Unknown result type (might be due to invalid IL or missing references)
		//IL_e092: Unknown result type (might be due to invalid IL or missing references)
		//IL_e0d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_e0d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_e0e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_e0e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_de6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_de71: Unknown result type (might be due to invalid IL or missing references)
		//IL_de76: Unknown result type (might be due to invalid IL or missing references)
		//IL_de7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_de80: Unknown result type (might be due to invalid IL or missing references)
		//IL_de86: Unknown result type (might be due to invalid IL or missing references)
		//IL_de94: Unknown result type (might be due to invalid IL or missing references)
		//IL_de99: Unknown result type (might be due to invalid IL or missing references)
		//IL_dea6: Unknown result type (might be due to invalid IL or missing references)
		//IL_deb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_debb: Unknown result type (might be due to invalid IL or missing references)
		//IL_dec6: Unknown result type (might be due to invalid IL or missing references)
		//IL_da8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_da9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_e223: Unknown result type (might be due to invalid IL or missing references)
		//IL_e248: Unknown result type (might be due to invalid IL or missing references)
		//IL_e27b: Unknown result type (might be due to invalid IL or missing references)
		//IL_e29c: Unknown result type (might be due to invalid IL or missing references)
		//IL_e2a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_e30f: Unknown result type (might be due to invalid IL or missing references)
		//IL_e320: Unknown result type (might be due to invalid IL or missing references)
		//IL_e32a: Unknown result type (might be due to invalid IL or missing references)
		//IL_e32f: Unknown result type (might be due to invalid IL or missing references)
		//IL_e334: Unknown result type (might be due to invalid IL or missing references)
		//IL_dbc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_dbd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_dc4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_e1ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_e1b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_e38c: Unknown result type (might be due to invalid IL or missing references)
		//IL_e3a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_e3ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_e3dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_e3e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_e3eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_e42c: Unknown result type (might be due to invalid IL or missing references)
		//IL_e432: Unknown result type (might be due to invalid IL or missing references)
		//IL_e43c: Unknown result type (might be due to invalid IL or missing references)
		//IL_e441: Unknown result type (might be due to invalid IL or missing references)
		//IL_e4ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_e4c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_e4cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_e4fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_e505: Unknown result type (might be due to invalid IL or missing references)
		//IL_e50a: Unknown result type (might be due to invalid IL or missing references)
		//IL_e54b: Unknown result type (might be due to invalid IL or missing references)
		//IL_e555: Unknown result type (might be due to invalid IL or missing references)
		//IL_e55b: Unknown result type (might be due to invalid IL or missing references)
		//IL_e56f: Unknown result type (might be due to invalid IL or missing references)
		//IL_e579: Unknown result type (might be due to invalid IL or missing references)
		//IL_e57e: Unknown result type (might be due to invalid IL or missing references)
		//IL_e583: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_e614: Unknown result type (might be due to invalid IL or missing references)
		//IL_e62d: Unknown result type (might be due to invalid IL or missing references)
		//IL_e633: Unknown result type (might be due to invalid IL or missing references)
		//IL_e663: Unknown result type (might be due to invalid IL or missing references)
		//IL_e66d: Unknown result type (might be due to invalid IL or missing references)
		//IL_e672: Unknown result type (might be due to invalid IL or missing references)
		//IL_e6b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_e6b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_e6c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_e6c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_e980: Unknown result type (might be due to invalid IL or missing references)
		//IL_e720: Unknown result type (might be due to invalid IL or missing references)
		//IL_e73a: Unknown result type (might be due to invalid IL or missing references)
		//IL_e740: Unknown result type (might be due to invalid IL or missing references)
		//IL_e770: Unknown result type (might be due to invalid IL or missing references)
		//IL_e77a: Unknown result type (might be due to invalid IL or missing references)
		//IL_e77f: Unknown result type (might be due to invalid IL or missing references)
		//IL_e7c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_e7c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_e7d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_e7d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_db27: Unknown result type (might be due to invalid IL or missing references)
		//IL_db2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_db30: Unknown result type (might be due to invalid IL or missing references)
		//IL_e83f: Unknown result type (might be due to invalid IL or missing references)
		//IL_e859: Unknown result type (might be due to invalid IL or missing references)
		//IL_e85f: Unknown result type (might be due to invalid IL or missing references)
		//IL_e88f: Unknown result type (might be due to invalid IL or missing references)
		//IL_e899: Unknown result type (might be due to invalid IL or missing references)
		//IL_e89e: Unknown result type (might be due to invalid IL or missing references)
		//IL_e8e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_e8ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_e8f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_e8f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_e8fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_e91b: Unknown result type (might be due to invalid IL or missing references)
		//IL_e921: Unknown result type (might be due to invalid IL or missing references)
		//IL_e92b: Unknown result type (might be due to invalid IL or missing references)
		//IL_e930: Unknown result type (might be due to invalid IL or missing references)
		//IL_db62: Unknown result type (might be due to invalid IL or missing references)
		//IL_db73: Unknown result type (might be due to invalid IL or missing references)
		//IL_db78: Unknown result type (might be due to invalid IL or missing references)
		//IL_db82: Unknown result type (might be due to invalid IL or missing references)
		//IL_db87: Unknown result type (might be due to invalid IL or missing references)
		//IL_e9b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_e9d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_e9da: Unknown result type (might be due to invalid IL or missing references)
		//IL_ea0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_ea14: Unknown result type (might be due to invalid IL or missing references)
		//IL_ea19: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec25: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec34: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec54: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec84: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec93: Unknown result type (might be due to invalid IL or missing references)
		//IL_ea6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_ea79: Unknown result type (might be due to invalid IL or missing references)
		//IL_ecfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed02: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed11: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed31: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed61: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed70: Unknown result type (might be due to invalid IL or missing references)
		//IL_edd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_eddf: Unknown result type (might be due to invalid IL or missing references)
		//IL_ede9: Unknown result type (might be due to invalid IL or missing references)
		//IL_edee: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee08: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee48: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_eba6: Unknown result type (might be due to invalid IL or missing references)
		//IL_ebb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_f084: Unknown result type (might be due to invalid IL or missing references)
		//IL_f097: Unknown result type (might be due to invalid IL or missing references)
		//IL_f09c: Unknown result type (might be due to invalid IL or missing references)
		//IL_eea4: Unknown result type (might be due to invalid IL or missing references)
		//IL_eebc: Unknown result type (might be due to invalid IL or missing references)
		//IL_eec2: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef04: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef14: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef19: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_f43e: Unknown result type (might be due to invalid IL or missing references)
		//IL_f451: Unknown result type (might be due to invalid IL or missing references)
		//IL_f456: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef77: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_efbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_efc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_efce: Unknown result type (might be due to invalid IL or missing references)
		//IL_eff1: Unknown result type (might be due to invalid IL or missing references)
		//IL_eff7: Unknown result type (might be due to invalid IL or missing references)
		//IL_f001: Unknown result type (might be due to invalid IL or missing references)
		//IL_f006: Unknown result type (might be due to invalid IL or missing references)
		//IL_f00b: Unknown result type (might be due to invalid IL or missing references)
		//IL_f10d: Unknown result type (might be due to invalid IL or missing references)
		//IL_f12e: Unknown result type (might be due to invalid IL or missing references)
		//IL_f134: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb06: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_f17e: Unknown result type (might be due to invalid IL or missing references)
		//IL_f1a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_f1a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_f1e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_f1f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_f1f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_f213: Unknown result type (might be due to invalid IL or missing references)
		//IL_f237: Unknown result type (might be due to invalid IL or missing references)
		//IL_f23d: Unknown result type (might be due to invalid IL or missing references)
		//IL_f26d: Unknown result type (might be due to invalid IL or missing references)
		//IL_f277: Unknown result type (might be due to invalid IL or missing references)
		//IL_f27c: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb41: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb52: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb57: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb61: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb66: Unknown result type (might be due to invalid IL or missing references)
		//IL_f4fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_f510: Unknown result type (might be due to invalid IL or missing references)
		//IL_f515: Unknown result type (might be due to invalid IL or missing references)
		//IL_f89a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f8a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_f8a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_f2bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_f2f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_f2fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_f302: Unknown result type (might be due to invalid IL or missing references)
		//IL_f30c: Unknown result type (might be due to invalid IL or missing references)
		//IL_f311: Unknown result type (might be due to invalid IL or missing references)
		//IL_f318: Unknown result type (might be due to invalid IL or missing references)
		//IL_f31e: Unknown result type (might be due to invalid IL or missing references)
		//IL_f35c: Unknown result type (might be due to invalid IL or missing references)
		//IL_f366: Unknown result type (might be due to invalid IL or missing references)
		//IL_f36b: Unknown result type (might be due to invalid IL or missing references)
		//IL_f99b: Unknown result type (might be due to invalid IL or missing references)
		//IL_f9ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_f9b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_f9b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_f9c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_f9d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_f9de: Unknown result type (might be due to invalid IL or missing references)
		//IL_f9e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_f9ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_f586: Unknown result type (might be due to invalid IL or missing references)
		//IL_f5a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_f5ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_f8c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_f8cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_f8e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_f8ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_f8f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_f90a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f944: Unknown result type (might be due to invalid IL or missing references)
		//IL_f949: Unknown result type (might be due to invalid IL or missing references)
		//IL_f5f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_f61e: Unknown result type (might be due to invalid IL or missing references)
		//IL_f624: Unknown result type (might be due to invalid IL or missing references)
		//IL_f666: Unknown result type (might be due to invalid IL or missing references)
		//IL_f670: Unknown result type (might be due to invalid IL or missing references)
		//IL_f675: Unknown result type (might be due to invalid IL or missing references)
		//IL_f690: Unknown result type (might be due to invalid IL or missing references)
		//IL_f6b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_f6bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_f6ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_f6f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_f6fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb66: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb86: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa66: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa84: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa89: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa96: Unknown result type (might be due to invalid IL or missing references)
		//IL_faa1: Unknown result type (might be due to invalid IL or missing references)
		//IL_faab: Unknown result type (might be due to invalid IL or missing references)
		//IL_fab6: Unknown result type (might be due to invalid IL or missing references)
		//IL_f73f: Unknown result type (might be due to invalid IL or missing references)
		//IL_f778: Unknown result type (might be due to invalid IL or missing references)
		//IL_f77d: Unknown result type (might be due to invalid IL or missing references)
		//IL_f782: Unknown result type (might be due to invalid IL or missing references)
		//IL_f78c: Unknown result type (might be due to invalid IL or missing references)
		//IL_f791: Unknown result type (might be due to invalid IL or missing references)
		//IL_f798: Unknown result type (might be due to invalid IL or missing references)
		//IL_f79e: Unknown result type (might be due to invalid IL or missing references)
		//IL_f7dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_f7e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_f7eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_fbf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_fed3: Unknown result type (might be due to invalid IL or missing references)
		//IL_fedf: Unknown result type (might be due to invalid IL or missing references)
		//IL_fc5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_fc7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_fcaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_fcb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_fcbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_fd10: Unknown result type (might be due to invalid IL or missing references)
		//IL_fd15: Unknown result type (might be due to invalid IL or missing references)
		//IL_fd1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_fd24: Unknown result type (might be due to invalid IL or missing references)
		//IL_fd3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_fd41: Unknown result type (might be due to invalid IL or missing references)
		//IL_fd71: Unknown result type (might be due to invalid IL or missing references)
		//IL_fd7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_fd80: Unknown result type (might be due to invalid IL or missing references)
		//IL_fdb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_fdba: Unknown result type (might be due to invalid IL or missing references)
		//IL_fdc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe14: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe68: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe78: Unknown result type (might be due to invalid IL or missing references)
		//IL_1031a: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff11: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff16: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff34: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff43: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff49: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff72: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff78: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff80: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff85: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff90: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff97: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffa1: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffa7: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffad: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffe5: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10033: Unknown result type (might be due to invalid IL or missing references)
		//IL_10852: Unknown result type (might be due to invalid IL or missing references)
		//IL_10857: Unknown result type (might be due to invalid IL or missing references)
		//IL_10862: Unknown result type (might be due to invalid IL or missing references)
		//IL_10867: Unknown result type (might be due to invalid IL or missing references)
		//IL_1086c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10878: Unknown result type (might be due to invalid IL or missing references)
		//IL_10891: Unknown result type (might be due to invalid IL or missing references)
		//IL_103e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_10405: Unknown result type (might be due to invalid IL or missing references)
		//IL_1040b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10118: Unknown result type (might be due to invalid IL or missing references)
		//IL_10130: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c30: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c58: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c88: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ca3: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cad: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d36: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d52: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d62: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d67: Unknown result type (might be due to invalid IL or missing references)
		//IL_108c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_108ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_108d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_108de: Unknown result type (might be due to invalid IL or missing references)
		//IL_108e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_108ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_1090b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10911: Unknown result type (might be due to invalid IL or missing references)
		//IL_10941: Unknown result type (might be due to invalid IL or missing references)
		//IL_1094b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10950: Unknown result type (might be due to invalid IL or missing references)
		//IL_10455: Unknown result type (might be due to invalid IL or missing references)
		//IL_10475: Unknown result type (might be due to invalid IL or missing references)
		//IL_1047b: Unknown result type (might be due to invalid IL or missing references)
		//IL_104bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_104c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_104cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_104e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10507: Unknown result type (might be due to invalid IL or missing references)
		//IL_1050d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1053d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10547: Unknown result type (might be due to invalid IL or missing references)
		//IL_1054c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10097: Unknown result type (might be due to invalid IL or missing references)
		//IL_100ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d79: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10da0: Unknown result type (might be due to invalid IL or missing references)
		//IL_10dca: Unknown result type (might be due to invalid IL or missing references)
		//IL_10dd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_10dd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ddf: Unknown result type (might be due to invalid IL or missing references)
		//IL_10de4: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e07: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e17: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e21: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e44: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e53: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e70: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e80: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e85: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ee5: Unknown result type (might be due to invalid IL or missing references)
		//IL_10eea: Unknown result type (might be due to invalid IL or missing references)
		//IL_10efc: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f01: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f07: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f18: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f22: Unknown result type (might be due to invalid IL or missing references)
		//IL_11076: Unknown result type (might be due to invalid IL or missing references)
		//IL_1107b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1108d: Unknown result type (might be due to invalid IL or missing references)
		//IL_11092: Unknown result type (might be due to invalid IL or missing references)
		//IL_11098: Unknown result type (might be due to invalid IL or missing references)
		//IL_1109e: Unknown result type (might be due to invalid IL or missing references)
		//IL_110a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_110ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_110b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_10981: Unknown result type (might be due to invalid IL or missing references)
		//IL_10986: Unknown result type (might be due to invalid IL or missing references)
		//IL_10991: Unknown result type (might be due to invalid IL or missing references)
		//IL_10996: Unknown result type (might be due to invalid IL or missing references)
		//IL_1099b: Unknown result type (might be due to invalid IL or missing references)
		//IL_109a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_109c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_109c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a14: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a19: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a24: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a34: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a39: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a45: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a60: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a66: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a96: Unknown result type (might be due to invalid IL or missing references)
		//IL_10aa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_10aa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1058f: Unknown result type (might be due to invalid IL or missing references)
		//IL_105c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_105cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_105d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_105dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_105e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_105e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_105ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_1062c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10636: Unknown result type (might be due to invalid IL or missing references)
		//IL_1063b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f34: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f55: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f85: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f90: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fff: Unknown result type (might be due to invalid IL or missing references)
		//IL_11009: Unknown result type (might be due to invalid IL or missing references)
		//IL_1100e: Unknown result type (might be due to invalid IL or missing references)
		//IL_11025: Unknown result type (might be due to invalid IL or missing references)
		//IL_1102b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11036: Unknown result type (might be due to invalid IL or missing references)
		//IL_1103b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11040: Unknown result type (might be due to invalid IL or missing references)
		//IL_110c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_110e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_110eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_11114: Unknown result type (might be due to invalid IL or missing references)
		//IL_11119: Unknown result type (might be due to invalid IL or missing references)
		//IL_11136: Unknown result type (might be due to invalid IL or missing references)
		//IL_1113c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11141: Unknown result type (might be due to invalid IL or missing references)
		//IL_1114b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11150: Unknown result type (might be due to invalid IL or missing references)
		//IL_11173: Unknown result type (might be due to invalid IL or missing references)
		//IL_11178: Unknown result type (might be due to invalid IL or missing references)
		//IL_1117e: Unknown result type (might be due to invalid IL or missing references)
		//IL_11183: Unknown result type (might be due to invalid IL or missing references)
		//IL_111a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_111b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_111b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_111cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_111d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_111dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_111e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_111e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_11281: Unknown result type (might be due to invalid IL or missing references)
		//IL_112a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_112a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b76: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b88: Unknown result type (might be due to invalid IL or missing references)
		//IL_1071b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10747: Unknown result type (might be due to invalid IL or missing references)
		//IL_1074d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10793: Unknown result type (might be due to invalid IL or missing references)
		//IL_1079d: Unknown result type (might be due to invalid IL or missing references)
		//IL_107a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1130e: Unknown result type (might be due to invalid IL or missing references)
		//IL_11331: Unknown result type (might be due to invalid IL or missing references)
		//IL_11337: Unknown result type (might be due to invalid IL or missing references)
		//IL_113a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_113ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_113b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_11670: Unknown result type (might be due to invalid IL or missing references)
		//IL_1167a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1167f: Unknown result type (might be due to invalid IL or missing references)
		//IL_113d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_113fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_11402: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a31: Unknown result type (might be due to invalid IL or missing references)
		//IL_116a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_116c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11925: Unknown result type (might be due to invalid IL or missing references)
		//IL_11949: Unknown result type (might be due to invalid IL or missing references)
		//IL_1194f: Unknown result type (might be due to invalid IL or missing references)
		//IL_119d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_119df: Unknown result type (might be due to invalid IL or missing references)
		//IL_119e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_119ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_119f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ab0: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ad6: Unknown result type (might be due to invalid IL or missing references)
		//IL_11adc: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b28: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e70: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_11bbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_11bc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_12007: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e85: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11caa: Unknown result type (might be due to invalid IL or missing references)
		//IL_11cb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_11511: Unknown result type (might be due to invalid IL or missing references)
		//IL_1151b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11520: Unknown result type (might be due to invalid IL or missing references)
		//IL_11543: Unknown result type (might be due to invalid IL or missing references)
		//IL_11549: Unknown result type (might be due to invalid IL or missing references)
		//IL_1154e: Unknown result type (might be due to invalid IL or missing references)
		//IL_11553: Unknown result type (might be due to invalid IL or missing references)
		//IL_11576: Unknown result type (might be due to invalid IL or missing references)
		//IL_11596: Unknown result type (might be due to invalid IL or missing references)
		//IL_1159b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11615: Unknown result type (might be due to invalid IL or missing references)
		//IL_1161a: Unknown result type (might be due to invalid IL or missing references)
		//IL_120c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ea4: Unknown result type (might be due to invalid IL or missing references)
		//IL_11dbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_11dc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_11dcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_11df0: Unknown result type (might be due to invalid IL or missing references)
		//IL_11df6: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e00: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e05: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d18: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d22: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d27: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d50: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d64: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d87: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d91: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d96: Unknown result type (might be due to invalid IL or missing references)
		//IL_117db: Unknown result type (might be due to invalid IL or missing references)
		//IL_117e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_117ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_1180d: Unknown result type (might be due to invalid IL or missing references)
		//IL_11813: Unknown result type (might be due to invalid IL or missing references)
		//IL_11818: Unknown result type (might be due to invalid IL or missing references)
		//IL_1181d: Unknown result type (might be due to invalid IL or missing references)
		//IL_11840: Unknown result type (might be due to invalid IL or missing references)
		//IL_11860: Unknown result type (might be due to invalid IL or missing references)
		//IL_11865: Unknown result type (might be due to invalid IL or missing references)
		//IL_118df: Unknown result type (might be due to invalid IL or missing references)
		//IL_118e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_11eb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ebe: Unknown result type (might be due to invalid IL or missing references)
		//IL_12108: Unknown result type (might be due to invalid IL or missing references)
		//IL_1212c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12132: Unknown result type (might be due to invalid IL or missing references)
		//IL_12040: Unknown result type (might be due to invalid IL or missing references)
		//IL_12064: Unknown result type (might be due to invalid IL or missing references)
		//IL_1206a: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ed3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ed8: Unknown result type (might be due to invalid IL or missing references)
		//IL_121e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_12204: Unknown result type (might be due to invalid IL or missing references)
		//IL_1220a: Unknown result type (might be due to invalid IL or missing references)
		//IL_12289: Unknown result type (might be due to invalid IL or missing references)
		//IL_122a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_122af: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12336: Unknown result type (might be due to invalid IL or missing references)
		//IL_12359: Unknown result type (might be due to invalid IL or missing references)
		//IL_1235f: Unknown result type (might be due to invalid IL or missing references)
		//IL_123b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_123bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_123c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_123cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_123d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1242b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1244e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12454: Unknown result type (might be due to invalid IL or missing references)
		//IL_124ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_124b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_124bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_124c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_124c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_12554: Unknown result type (might be due to invalid IL or missing references)
		//IL_12573: Unknown result type (might be due to invalid IL or missing references)
		//IL_12579: Unknown result type (might be due to invalid IL or missing references)
		//IL_2622f: Unknown result type (might be due to invalid IL or missing references)
		//IL_26234: Unknown result type (might be due to invalid IL or missing references)
		//IL_2623a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2625a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2627a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2629a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1260c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1262b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12631: Unknown result type (might be due to invalid IL or missing references)
		//IL_12682: Unknown result type (might be due to invalid IL or missing references)
		//IL_1268d: Unknown result type (might be due to invalid IL or missing references)
		//IL_126f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_12701: Unknown result type (might be due to invalid IL or missing references)
		//IL_2630b: Unknown result type (might be due to invalid IL or missing references)
		//IL_260ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_2610a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1295a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1297b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12981: Unknown result type (might be due to invalid IL or missing references)
		//IL_129c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_129cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_129d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a11: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a20: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a25: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a70: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a76: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ab8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ac2: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ac7: Unknown result type (might be due to invalid IL or missing references)
		//IL_127b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_127d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_127de: Unknown result type (might be due to invalid IL or missing references)
		//IL_12820: Unknown result type (might be due to invalid IL or missing references)
		//IL_1282a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1282f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12868: Unknown result type (might be due to invalid IL or missing references)
		//IL_1286e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12878: Unknown result type (might be due to invalid IL or missing references)
		//IL_1287d: Unknown result type (might be due to invalid IL or missing references)
		//IL_12882: Unknown result type (might be due to invalid IL or missing references)
		//IL_128a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_128cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_128d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_12915: Unknown result type (might be due to invalid IL or missing references)
		//IL_1291f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12924: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b22: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b46: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b98: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bda: Unknown result type (might be due to invalid IL or missing references)
		//IL_2618d: Unknown result type (might be due to invalid IL or missing references)
		//IL_26198: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c35: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c59: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ca1: Unknown result type (might be due to invalid IL or missing references)
		//IL_12cab: Unknown result type (might be due to invalid IL or missing references)
		//IL_12cb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_12cd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_12cd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ce3: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ce8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ced: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d48: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d72: Unknown result type (might be due to invalid IL or missing references)
		//IL_12db4: Unknown result type (might be due to invalid IL or missing references)
		//IL_12dbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_12dc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_12de6: Unknown result type (might be due to invalid IL or missing references)
		//IL_12dec: Unknown result type (might be due to invalid IL or missing references)
		//IL_12df6: Unknown result type (might be due to invalid IL or missing references)
		//IL_12dfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e00: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e71: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ea9: Unknown result type (might be due to invalid IL or missing references)
		//IL_12eaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f05: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f14: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f99: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fec: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ff6: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ffb: Unknown result type (might be due to invalid IL or missing references)
		//IL_13194: Unknown result type (might be due to invalid IL or missing references)
		//IL_131bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_13322: Unknown result type (might be due to invalid IL or missing references)
		//IL_1333b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13341: Unknown result type (might be due to invalid IL or missing references)
		//IL_133a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_133b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_133b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_133da: Unknown result type (might be due to invalid IL or missing references)
		//IL_133e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_133e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_133ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_133f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_133f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_13220: Unknown result type (might be due to invalid IL or missing references)
		//IL_13243: Unknown result type (might be due to invalid IL or missing references)
		//IL_13249: Unknown result type (might be due to invalid IL or missing references)
		//IL_1328b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13295: Unknown result type (might be due to invalid IL or missing references)
		//IL_1329a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1305f: Unknown result type (might be due to invalid IL or missing references)
		//IL_13082: Unknown result type (might be due to invalid IL or missing references)
		//IL_13088: Unknown result type (might be due to invalid IL or missing references)
		//IL_130b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_130bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_130c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_13462: Unknown result type (might be due to invalid IL or missing references)
		//IL_13478: Unknown result type (might be due to invalid IL or missing references)
		//IL_1347e: Unknown result type (might be due to invalid IL or missing references)
		//IL_134f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_13501: Unknown result type (might be due to invalid IL or missing references)
		//IL_13506: Unknown result type (might be due to invalid IL or missing references)
		//IL_13529: Unknown result type (might be due to invalid IL or missing references)
		//IL_1352f: Unknown result type (might be due to invalid IL or missing references)
		//IL_13534: Unknown result type (might be due to invalid IL or missing references)
		//IL_1353e: Unknown result type (might be due to invalid IL or missing references)
		//IL_13543: Unknown result type (might be due to invalid IL or missing references)
		//IL_13548: Unknown result type (might be due to invalid IL or missing references)
		//IL_135b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_135c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_135cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_13646: Unknown result type (might be due to invalid IL or missing references)
		//IL_13650: Unknown result type (might be due to invalid IL or missing references)
		//IL_13655: Unknown result type (might be due to invalid IL or missing references)
		//IL_13678: Unknown result type (might be due to invalid IL or missing references)
		//IL_1367e: Unknown result type (might be due to invalid IL or missing references)
		//IL_13683: Unknown result type (might be due to invalid IL or missing references)
		//IL_1368d: Unknown result type (might be due to invalid IL or missing references)
		//IL_13692: Unknown result type (might be due to invalid IL or missing references)
		//IL_13697: Unknown result type (might be due to invalid IL or missing references)
		//IL_26676: Unknown result type (might be due to invalid IL or missing references)
		//IL_2667b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1371d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1373d: Unknown result type (might be due to invalid IL or missing references)
		//IL_13743: Unknown result type (might be due to invalid IL or missing references)
		//IL_266a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_266ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_266cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_266ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_2670c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2672c: Unknown result type (might be due to invalid IL or missing references)
		//IL_138b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_138c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_137cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_137ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_137f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_13837: Unknown result type (might be due to invalid IL or missing references)
		//IL_1383d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1384c: Unknown result type (might be due to invalid IL or missing references)
		//IL_13851: Unknown result type (might be due to invalid IL or missing references)
		//IL_13856: Unknown result type (might be due to invalid IL or missing references)
		//IL_13927: Unknown result type (might be due to invalid IL or missing references)
		//IL_13932: Unknown result type (might be due to invalid IL or missing references)
		//IL_139e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a15: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2679d: Unknown result type (might be due to invalid IL or missing references)
		//IL_267cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ad5: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b05: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a66: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a70: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a75: Unknown result type (might be due to invalid IL or missing references)
		//IL_13bb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_13be4: Unknown result type (might be due to invalid IL or missing references)
		//IL_13bea: Unknown result type (might be due to invalid IL or missing references)
		//IL_13fe3: Unknown result type (might be due to invalid IL or missing references)
		//IL_14013: Unknown result type (might be due to invalid IL or missing references)
		//IL_14019: Unknown result type (might be due to invalid IL or missing references)
		//IL_2685f: Unknown result type (might be due to invalid IL or missing references)
		//IL_13dca: Unknown result type (might be due to invalid IL or missing references)
		//IL_13dd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_141f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_141ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_2687a: Unknown result type (might be due to invalid IL or missing references)
		//IL_268a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_268a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_268d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_268e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_14c25: Unknown result type (might be due to invalid IL or missing references)
		//IL_14bbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_14bdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_14be1: Unknown result type (might be due to invalid IL or missing references)
		//IL_27657: Unknown result type (might be due to invalid IL or missing references)
		//IL_27662: Unknown result type (might be due to invalid IL or missing references)
		//IL_14c58: Unknown result type (might be due to invalid IL or missing references)
		//IL_14c78: Unknown result type (might be due to invalid IL or missing references)
		//IL_14c7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_14cc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_14cc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_14cd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_14cd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_14cda: Unknown result type (might be due to invalid IL or missing references)
		//IL_14d5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_14d7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_14d85: Unknown result type (might be due to invalid IL or missing references)
		//IL_14dc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_14dcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_14dd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ddc: Unknown result type (might be due to invalid IL or missing references)
		//IL_14de1: Unknown result type (might be due to invalid IL or missing references)
		//IL_14e66: Unknown result type (might be due to invalid IL or missing references)
		//IL_14e86: Unknown result type (might be due to invalid IL or missing references)
		//IL_14e8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ece: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ed4: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ede: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ee3: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ee8: Unknown result type (might be due to invalid IL or missing references)
		//IL_14f6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_14f8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_14f93: Unknown result type (might be due to invalid IL or missing references)
		//IL_14fd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_14fdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_14fe5: Unknown result type (might be due to invalid IL or missing references)
		//IL_14fea: Unknown result type (might be due to invalid IL or missing references)
		//IL_14fef: Unknown result type (might be due to invalid IL or missing references)
		//IL_15169: Unknown result type (might be due to invalid IL or missing references)
		//IL_15178: Unknown result type (might be due to invalid IL or missing references)
		//IL_151ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_151c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_151c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_15074: Unknown result type (might be due to invalid IL or missing references)
		//IL_15094: Unknown result type (might be due to invalid IL or missing references)
		//IL_1509a: Unknown result type (might be due to invalid IL or missing references)
		//IL_150dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_150e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_150ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_150f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_150f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1466e: Unknown result type (might be due to invalid IL or missing references)
		//IL_14693: Unknown result type (might be due to invalid IL or missing references)
		//IL_14699: Unknown result type (might be due to invalid IL or missing references)
		//IL_146db: Unknown result type (might be due to invalid IL or missing references)
		//IL_146e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_146ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a17: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a41: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a83: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a92: Unknown result type (might be due to invalid IL or missing references)
		//IL_15228: Unknown result type (might be due to invalid IL or missing references)
		//IL_15249: Unknown result type (might be due to invalid IL or missing references)
		//IL_1524f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1540f: Unknown result type (might be due to invalid IL or missing references)
		//IL_15433: Unknown result type (might be due to invalid IL or missing references)
		//IL_15439: Unknown result type (might be due to invalid IL or missing references)
		//IL_15488: Unknown result type (might be due to invalid IL or missing references)
		//IL_15492: Unknown result type (might be due to invalid IL or missing references)
		//IL_15497: Unknown result type (might be due to invalid IL or missing references)
		//IL_154e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_154e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_15579: Unknown result type (might be due to invalid IL or missing references)
		//IL_15598: Unknown result type (might be due to invalid IL or missing references)
		//IL_1559e: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c55: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c72: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c83: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c88: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_15669: Unknown result type (might be due to invalid IL or missing references)
		//IL_15688: Unknown result type (might be due to invalid IL or missing references)
		//IL_1568e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1569d: Unknown result type (might be due to invalid IL or missing references)
		//IL_156a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_156ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_155ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_155f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_155fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c33: Unknown result type (might be due to invalid IL or missing references)
		//IL_158d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_158f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_158fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_15ef8: Unknown result type (might be due to invalid IL or missing references)
		//IL_159da: Unknown result type (might be due to invalid IL or missing references)
		//IL_159fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_15a03: Unknown result type (might be due to invalid IL or missing references)
		//IL_1595c: Unknown result type (might be due to invalid IL or missing references)
		//IL_15966: Unknown result type (might be due to invalid IL or missing references)
		//IL_1596b: Unknown result type (might be due to invalid IL or missing references)
		//IL_156d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_15712: Unknown result type (might be due to invalid IL or missing references)
		//IL_15718: Unknown result type (might be due to invalid IL or missing references)
		//IL_1574e: Unknown result type (might be due to invalid IL or missing references)
		//IL_15758: Unknown result type (might be due to invalid IL or missing references)
		//IL_1575d: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c90: Unknown result type (might be due to invalid IL or missing references)
		//IL_15a52: Unknown result type (might be due to invalid IL or missing references)
		//IL_15a5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_15a61: Unknown result type (might be due to invalid IL or missing references)
		//IL_16015: Unknown result type (might be due to invalid IL or missing references)
		//IL_15f16: Unknown result type (might be due to invalid IL or missing references)
		//IL_15f55: Unknown result type (might be due to invalid IL or missing references)
		//IL_15f5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_157bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_157f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_157fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_15831: Unknown result type (might be due to invalid IL or missing references)
		//IL_1583b: Unknown result type (might be due to invalid IL or missing references)
		//IL_15840: Unknown result type (might be due to invalid IL or missing references)
		//IL_16254: Unknown result type (might be due to invalid IL or missing references)
		//IL_1623b: Unknown result type (might be due to invalid IL or missing references)
		//IL_15cc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_15cd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_15cf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_15cfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d00: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_16033: Unknown result type (might be due to invalid IL or missing references)
		//IL_1606f: Unknown result type (might be due to invalid IL or missing references)
		//IL_16075: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d72: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_15da1: Unknown result type (might be due to invalid IL or missing references)
		//IL_15da7: Unknown result type (might be due to invalid IL or missing references)
		//IL_15da9: Unknown result type (might be due to invalid IL or missing references)
		//IL_15dc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_15dd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e22: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e27: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e30: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e40: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e45: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e50: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e55: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_16277: Unknown result type (might be due to invalid IL or missing references)
		//IL_162b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_162b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_160dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_16104: Unknown result type (might be due to invalid IL or missing references)
		//IL_1614c: Unknown result type (might be due to invalid IL or missing references)
		//IL_16156: Unknown result type (might be due to invalid IL or missing references)
		//IL_1615b: Unknown result type (might be due to invalid IL or missing references)
		//IL_163fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_162f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_162fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_16300: Unknown result type (might be due to invalid IL or missing references)
		//IL_15b3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_15b4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_16336: Unknown result type (might be due to invalid IL or missing references)
		//IL_1635d: Unknown result type (might be due to invalid IL or missing references)
		//IL_16415: Unknown result type (might be due to invalid IL or missing references)
		//IL_16451: Unknown result type (might be due to invalid IL or missing references)
		//IL_16457: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e73: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e87: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e97: Unknown result type (might be due to invalid IL or missing references)
		//IL_163a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_163b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_163b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1698b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1648a: Unknown result type (might be due to invalid IL or missing references)
		//IL_164b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_16771: Unknown result type (might be due to invalid IL or missing references)
		//IL_16791: Unknown result type (might be due to invalid IL or missing references)
		//IL_16797: Unknown result type (might be due to invalid IL or missing references)
		//IL_167d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_167e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_167e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_169be: Unknown result type (might be due to invalid IL or missing references)
		//IL_169ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_169f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_16a48: Unknown result type (might be due to invalid IL or missing references)
		//IL_16a4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1659d: Unknown result type (might be due to invalid IL or missing references)
		//IL_165c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_16af8: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b27: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b73: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b79: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b83: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b88: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_16c95: Unknown result type (might be due to invalid IL or missing references)
		//IL_16beb: Unknown result type (might be due to invalid IL or missing references)
		//IL_16bf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_16bfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_16cc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ce8: Unknown result type (might be due to invalid IL or missing references)
		//IL_16cee: Unknown result type (might be due to invalid IL or missing references)
		//IL_16df5: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d35: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f28: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e28: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e51: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f61: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f87: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_16fbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_16fc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_16fcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e98: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1740c: Unknown result type (might be due to invalid IL or missing references)
		//IL_171ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_1721c: Unknown result type (might be due to invalid IL or missing references)
		//IL_17222: Unknown result type (might be due to invalid IL or missing references)
		//IL_17292: Unknown result type (might be due to invalid IL or missing references)
		//IL_1729c: Unknown result type (might be due to invalid IL or missing references)
		//IL_172a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_170b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_170e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_170e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_17158: Unknown result type (might be due to invalid IL or missing references)
		//IL_17162: Unknown result type (might be due to invalid IL or missing references)
		//IL_17167: Unknown result type (might be due to invalid IL or missing references)
		//IL_17311: Unknown result type (might be due to invalid IL or missing references)
		//IL_1734d: Unknown result type (might be due to invalid IL or missing references)
		//IL_17353: Unknown result type (might be due to invalid IL or missing references)
		//IL_1743c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1745f: Unknown result type (might be due to invalid IL or missing references)
		//IL_17465: Unknown result type (might be due to invalid IL or missing references)
		//IL_173be: Unknown result type (might be due to invalid IL or missing references)
		//IL_173c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_173cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_174d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_174f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_174fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1757b: Unknown result type (might be due to invalid IL or missing references)
		//IL_17585: Unknown result type (might be due to invalid IL or missing references)
		//IL_1758a: Unknown result type (might be due to invalid IL or missing references)
		//IL_175d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_17762: Unknown result type (might be due to invalid IL or missing references)
		//IL_17783: Unknown result type (might be due to invalid IL or missing references)
		//IL_17789: Unknown result type (might be due to invalid IL or missing references)
		//IL_17607: Unknown result type (might be due to invalid IL or missing references)
		//IL_17627: Unknown result type (might be due to invalid IL or missing references)
		//IL_1762d: Unknown result type (might be due to invalid IL or missing references)
		//IL_17806: Unknown result type (might be due to invalid IL or missing references)
		//IL_17826: Unknown result type (might be due to invalid IL or missing references)
		//IL_1782c: Unknown result type (might be due to invalid IL or missing references)
		//IL_178d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_178f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_178f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_17949: Unknown result type (might be due to invalid IL or missing references)
		//IL_17954: Unknown result type (might be due to invalid IL or missing references)
		//IL_179ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_179f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a90: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b17: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b37: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_17bc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_17be8: Unknown result type (might be due to invalid IL or missing references)
		//IL_17bee: Unknown result type (might be due to invalid IL or missing references)
		//IL_17c75: Unknown result type (might be due to invalid IL or missing references)
		//IL_17c96: Unknown result type (might be due to invalid IL or missing references)
		//IL_17c9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_17dad: Unknown result type (might be due to invalid IL or missing references)
		//IL_17dd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_17dd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_17d19: Unknown result type (might be due to invalid IL or missing references)
		//IL_17d23: Unknown result type (might be due to invalid IL or missing references)
		//IL_17d28: Unknown result type (might be due to invalid IL or missing references)
		//IL_17f0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_17f46: Unknown result type (might be due to invalid IL or missing references)
		//IL_17f4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_17e54: Unknown result type (might be due to invalid IL or missing references)
		//IL_17e5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_17e63: Unknown result type (might be due to invalid IL or missing references)
		//IL_180fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_17fd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1800a: Unknown result type (might be due to invalid IL or missing references)
		//IL_18010: Unknown result type (might be due to invalid IL or missing references)
		//IL_181fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_18093: Unknown result type (might be due to invalid IL or missing references)
		//IL_180b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_180bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_18228: Unknown result type (might be due to invalid IL or missing references)
		//IL_1822d: Unknown result type (might be due to invalid IL or missing references)
		//IL_18251: Unknown result type (might be due to invalid IL or missing references)
		//IL_18256: Unknown result type (might be due to invalid IL or missing references)
		//IL_1854d: Unknown result type (might be due to invalid IL or missing references)
		//IL_18557: Unknown result type (might be due to invalid IL or missing references)
		//IL_1855c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1814f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1818f: Unknown result type (might be due to invalid IL or missing references)
		//IL_18195: Unknown result type (might be due to invalid IL or missing references)
		//IL_1828b: Unknown result type (might be due to invalid IL or missing references)
		//IL_182c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_182cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1856b: Unknown result type (might be due to invalid IL or missing references)
		//IL_185a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_185ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e95: Unknown result type (might be due to invalid IL or missing references)
		//IL_187b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_187e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1881c: Unknown result type (might be due to invalid IL or missing references)
		//IL_18822: Unknown result type (might be due to invalid IL or missing references)
		//IL_1882c: Unknown result type (might be due to invalid IL or missing references)
		//IL_18831: Unknown result type (might be due to invalid IL or missing references)
		//IL_18836: Unknown result type (might be due to invalid IL or missing references)
		//IL_18851: Unknown result type (might be due to invalid IL or missing references)
		//IL_18880: Unknown result type (might be due to invalid IL or missing references)
		//IL_188b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_188bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_188c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_188ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_188cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_188da: Unknown result type (might be due to invalid IL or missing references)
		//IL_18306: Unknown result type (might be due to invalid IL or missing references)
		//IL_18310: Unknown result type (might be due to invalid IL or missing references)
		//IL_18335: Unknown result type (might be due to invalid IL or missing references)
		//IL_1833b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1833d: Unknown result type (might be due to invalid IL or missing references)
		//IL_18358: Unknown result type (might be due to invalid IL or missing references)
		//IL_18367: Unknown result type (might be due to invalid IL or missing references)
		//IL_1942e: Unknown result type (might be due to invalid IL or missing references)
		//IL_199d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ec8: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ee9: Unknown result type (might be due to invalid IL or missing references)
		//IL_18eef: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f29: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1890d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1892e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18934: Unknown result type (might be due to invalid IL or missing references)
		//IL_18964: Unknown result type (might be due to invalid IL or missing references)
		//IL_1896e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18973: Unknown result type (might be due to invalid IL or missing references)
		//IL_183b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_183ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_183df: Unknown result type (might be due to invalid IL or missing references)
		//IL_183e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_183e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_18402: Unknown result type (might be due to invalid IL or missing references)
		//IL_18411: Unknown result type (might be due to invalid IL or missing references)
		//IL_18460: Unknown result type (might be due to invalid IL or missing references)
		//IL_18465: Unknown result type (might be due to invalid IL or missing references)
		//IL_18469: Unknown result type (might be due to invalid IL or missing references)
		//IL_1846e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18479: Unknown result type (might be due to invalid IL or missing references)
		//IL_1847e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18483: Unknown result type (might be due to invalid IL or missing references)
		//IL_1848e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18493: Unknown result type (might be due to invalid IL or missing references)
		//IL_18498: Unknown result type (might be due to invalid IL or missing references)
		//IL_1860d: Unknown result type (might be due to invalid IL or missing references)
		//IL_18634: Unknown result type (might be due to invalid IL or missing references)
		//IL_19461: Unknown result type (might be due to invalid IL or missing references)
		//IL_19482: Unknown result type (might be due to invalid IL or missing references)
		//IL_19488: Unknown result type (might be due to invalid IL or missing references)
		//IL_194b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_194c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_194c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_199f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a17: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_19aa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_19aa9: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f74: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f94: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_18fdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_18fe6: Unknown result type (might be due to invalid IL or missing references)
		//IL_18feb: Unknown result type (might be due to invalid IL or missing references)
		//IL_19006: Unknown result type (might be due to invalid IL or missing references)
		//IL_19026: Unknown result type (might be due to invalid IL or missing references)
		//IL_1902c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1905c: Unknown result type (might be due to invalid IL or missing references)
		//IL_19066: Unknown result type (might be due to invalid IL or missing references)
		//IL_1906b: Unknown result type (might be due to invalid IL or missing references)
		//IL_190a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_190ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_190b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_190f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_190fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_190ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_19162: Unknown result type (might be due to invalid IL or missing references)
		//IL_19169: Unknown result type (might be due to invalid IL or missing references)
		//IL_1916f: Unknown result type (might be due to invalid IL or missing references)
		//IL_191ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_191b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_191bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1921f: Unknown result type (might be due to invalid IL or missing references)
		//IL_19226: Unknown result type (might be due to invalid IL or missing references)
		//IL_1922c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1926a: Unknown result type (might be due to invalid IL or missing references)
		//IL_19274: Unknown result type (might be due to invalid IL or missing references)
		//IL_19279: Unknown result type (might be due to invalid IL or missing references)
		//IL_192dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_192e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_192e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_19327: Unknown result type (might be due to invalid IL or missing references)
		//IL_19331: Unknown result type (might be due to invalid IL or missing references)
		//IL_19336: Unknown result type (might be due to invalid IL or missing references)
		//IL_189b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_189d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_189df: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a21: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a30: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a71: Unknown result type (might be due to invalid IL or missing references)
		//IL_18aa1: Unknown result type (might be due to invalid IL or missing references)
		//IL_18aab: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ab0: Unknown result type (might be due to invalid IL or missing references)
		//IL_18aea: Unknown result type (might be due to invalid IL or missing references)
		//IL_18af1: Unknown result type (might be due to invalid IL or missing references)
		//IL_18af7: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b35: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b44: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ba7: Unknown result type (might be due to invalid IL or missing references)
		//IL_18bae: Unknown result type (might be due to invalid IL or missing references)
		//IL_18bb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_18bf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_18bfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c01: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c64: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c71: Unknown result type (might be due to invalid IL or missing references)
		//IL_18caf: Unknown result type (might be due to invalid IL or missing references)
		//IL_18cb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_18cbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d21: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d28: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d76: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_19f3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1950d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1952d: Unknown result type (might be due to invalid IL or missing references)
		//IL_19533: Unknown result type (might be due to invalid IL or missing references)
		//IL_19575: Unknown result type (might be due to invalid IL or missing references)
		//IL_1957f: Unknown result type (might be due to invalid IL or missing references)
		//IL_19584: Unknown result type (might be due to invalid IL or missing references)
		//IL_1959f: Unknown result type (might be due to invalid IL or missing references)
		//IL_195bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_195c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_195f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_195ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_19604: Unknown result type (might be due to invalid IL or missing references)
		//IL_1963e: Unknown result type (might be due to invalid IL or missing references)
		//IL_19645: Unknown result type (might be due to invalid IL or missing references)
		//IL_1964b: Unknown result type (might be due to invalid IL or missing references)
		//IL_19689: Unknown result type (might be due to invalid IL or missing references)
		//IL_19693: Unknown result type (might be due to invalid IL or missing references)
		//IL_19698: Unknown result type (might be due to invalid IL or missing references)
		//IL_196fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_19702: Unknown result type (might be due to invalid IL or missing references)
		//IL_19708: Unknown result type (might be due to invalid IL or missing references)
		//IL_19746: Unknown result type (might be due to invalid IL or missing references)
		//IL_19750: Unknown result type (might be due to invalid IL or missing references)
		//IL_19755: Unknown result type (might be due to invalid IL or missing references)
		//IL_197b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_197bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_197c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_19803: Unknown result type (might be due to invalid IL or missing references)
		//IL_1980d: Unknown result type (might be due to invalid IL or missing references)
		//IL_19812: Unknown result type (might be due to invalid IL or missing references)
		//IL_19875: Unknown result type (might be due to invalid IL or missing references)
		//IL_1987c: Unknown result type (might be due to invalid IL or missing references)
		//IL_19882: Unknown result type (might be due to invalid IL or missing references)
		//IL_198c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_198ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_198cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_184b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_184c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_184d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_18691: Unknown result type (might be due to invalid IL or missing references)
		//IL_186cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_186d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a3d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a3da: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a3f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_19b1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_19b66: Unknown result type (might be due to invalid IL or missing references)
		//IL_19b6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_19f6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_19f8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_19f94: Unknown result type (might be due to invalid IL or missing references)
		//IL_18706: Unknown result type (might be due to invalid IL or missing references)
		//IL_1872d: Unknown result type (might be due to invalid IL or missing references)
		//IL_19d4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_19d52: Unknown result type (might be due to invalid IL or missing references)
		//IL_19d57: Unknown result type (might be due to invalid IL or missing references)
		//IL_19d61: Unknown result type (might be due to invalid IL or missing references)
		//IL_19fe3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a003: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a009: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a04b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a055: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a05a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a075: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a095: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a09b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a0cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a0d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a0da: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a11f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a126: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a12c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a16a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a174: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a179: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a41a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a420: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a43c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a45b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a460: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a467: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a46c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a499: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a49f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a4b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a5b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a5b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a5d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a774: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a501: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a50f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a515: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a517: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a51c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a523: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a528: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a546: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a54c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a553: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a55f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a564: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a606: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a620: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a626: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a656: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a660: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a665: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a6ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a6b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a6b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a6d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a6dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a6e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a6e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a864: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a86a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a886: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab41: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1acdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a8b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a8ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a8d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a904: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a90e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a913: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a95a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a960: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a965: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a980: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a98a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a98f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a994: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a9f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a9fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa02: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa25: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa34: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa57: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa68: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa72: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa77: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aba7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1abad: Unknown result type (might be due to invalid IL or missing references)
		//IL_1abdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1abe7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1abec: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac33: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac38: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac42: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac47: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac69: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac79: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ad10: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ad54: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ad5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ad9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ada6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1adab: Unknown result type (might be due to invalid IL or missing references)
		//IL_1adc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae10: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae40: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aaae: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aab3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aaf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab00: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab05: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b04e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aec1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1af09: Unknown result type (might be due to invalid IL or missing references)
		//IL_1af0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1af51: Unknown result type (might be due to invalid IL or missing references)
		//IL_1af5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1af60: Unknown result type (might be due to invalid IL or missing references)
		//IL_1af7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1afc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1afc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aff9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b003: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b008: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b081: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b0c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b0cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b115: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b11f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b124: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b13f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b184: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b18a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b1c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b1cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b1d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b24f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b26e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b274: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b304: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b324: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b32a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b35a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b364: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b369: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b525: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b545: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b54b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b57b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b585: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b58a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b60b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b62b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b631: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b661: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b66b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b670: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b6f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b711: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b717: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b747: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b751: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b756: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b7da: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b7fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b803: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b833: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b83d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b842: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b412: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b442: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b448: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b48a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b490: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b49a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b49f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b4a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b8c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b8e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b8e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b919: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b923: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b928: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b9c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b9e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b9e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba99: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb23: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bbac: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bbe3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bbe9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be01: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc99: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bcd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd15: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd78: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bdb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bdb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be34: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be61: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be67: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bea1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bece: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bed4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf18: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c34f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf48: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf69: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c382: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c3a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c3a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c3d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c3e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c3e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cbbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c6e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c70a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c710: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bfbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bfdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bfe5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c027: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c031: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c036: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c051: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c071: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c077: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c0a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c0b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c0b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c0ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c0f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c0fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c13a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c144: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c149: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c1cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c1d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c1d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c217: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c221: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c226: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c42e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c44e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c454: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c496: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c4a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c4a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c4c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c4e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c4e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c516: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c520: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c525: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ee27: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d0a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cbee: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc15: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc45: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc54: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc95: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd21: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd30: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd52: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd58: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cdde: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cde8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cded: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ce08: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ce0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ce15: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ce9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cea5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ceaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cec5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cecc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ced2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cf58: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cf62: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cf67: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c7a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c7c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c7cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c7fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c806: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c80b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c550: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c570: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c576: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c5a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c5b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c5b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f4a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f4b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f4be: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c9f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c9f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c9ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca04: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca15: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca20: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca25: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca61: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca67: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca74: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca79: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cac6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cad1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eede: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eeff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ef05: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ef35: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ef3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ef44: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f4d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f4f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f522: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f52c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f531: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d59d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d5a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f85e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f845: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ef8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1efaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1efb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eff2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1effc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f001: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f01c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f03c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f042: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f072: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f07c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f081: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f55f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f582: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f5da: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f5e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f5e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f5ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f612: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f65e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f668: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f66d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f86f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f874: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df80: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df86: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e395: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e39a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e3a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e3a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d37a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d395: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d39b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d140: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d15b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d161: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f88f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f8ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f8dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f8e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f8eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f0e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f0ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f0f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f131: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f13c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f141: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f1a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f1ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f1b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f1ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f1fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f1ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f262: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f269: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f26f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f2ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f2b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f2bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f320: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f327: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f32d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f36b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f376: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f37b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d60b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d24f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d259: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d25e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f7b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f7b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f7bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f7c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e8ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e8f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e06d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e088: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e08e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0be: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e101: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e106: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e10b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dff7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e00c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e012: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e014: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e019: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f919: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f93c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f994: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f99e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f9a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f9a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f9cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fa18: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fa22: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fa27: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fc18: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fbff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d63b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d641: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d643: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d648: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d820: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d9d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d9e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d9eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d9ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d9f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1da58: Unknown result type (might be due to invalid IL or missing references)
		//IL_1da73: Unknown result type (might be due to invalid IL or missing references)
		//IL_1da79: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fc29: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fc2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e1c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e1db: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e1e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1db67: Unknown result type (might be due to invalid IL or missing references)
		//IL_1db71: Unknown result type (might be due to invalid IL or missing references)
		//IL_1db76: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f6b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f6bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f6f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e470: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e48c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e492: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e494: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e499: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e40a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e426: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e42c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e42e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e433: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e439: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e43f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e2cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e2d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e2de: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d65e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d664: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d677: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d67c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d6bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d6d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d6dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d70c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d716: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d71b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d750: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d755: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d761: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d766: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d76b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d850: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d856: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d858: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d85d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb71: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb76: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fc46: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fc65: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fc93: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fc9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fca2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e966: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eb10: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eb25: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eb2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eb2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eb32: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e4eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e506: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e50c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e53c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e546: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e54b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e56e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e573: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e57f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e584: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e589: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dcde: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dcf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dcff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f710: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f715: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f732: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f745: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f74a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f74f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d873: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d879: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d88c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d891: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d8d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d8f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d8f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d927: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d931: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d936: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d96b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d970: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d97c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d981: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d986: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fcd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fcf3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd21: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd30: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd36: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd59: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd87: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd91: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd96: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff87: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e996: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e99c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e99e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ebc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ebdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ebe2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e717: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e732: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e738: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e756: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e75b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e76c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e778: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e77d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fa70: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fa75: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fab0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff98: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ecd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ecda: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ecdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e7a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e7b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e7bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e7bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e7c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dea4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1deae: Unknown result type (might be due to invalid IL or missing references)
		//IL_1deb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea17: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea31: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea37: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea67: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea71: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea76: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eaab: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eab0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eabc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eac1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eac6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e82d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e837: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e83c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e85f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e864: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e86a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e86f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e7ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e7fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e802: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e804: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e809: Unknown result type (might be due to invalid IL or missing references)
		//IL_1faca: Unknown result type (might be due to invalid IL or missing references)
		//IL_1facf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1faec: Unknown result type (might be due to invalid IL or missing references)
		//IL_1faff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb04: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb09: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fedb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fee0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fee5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1feec: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ffb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ffd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_20005: Unknown result type (might be due to invalid IL or missing references)
		//IL_2000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_20014: Unknown result type (might be due to invalid IL or missing references)
		//IL_20042: Unknown result type (might be due to invalid IL or missing references)
		//IL_20065: Unknown result type (might be due to invalid IL or missing references)
		//IL_20093: Unknown result type (might be due to invalid IL or missing references)
		//IL_2009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_200a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_200a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_200cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_200f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_20103: Unknown result type (might be due to invalid IL or missing references)
		//IL_20108: Unknown result type (might be due to invalid IL or missing references)
		//IL_202f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_202e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fddf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fde4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2030a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2030f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe39: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe73: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe78: Unknown result type (might be due to invalid IL or missing references)
		//IL_2024d: Unknown result type (might be due to invalid IL or missing references)
		//IL_20252: Unknown result type (might be due to invalid IL or missing references)
		//IL_20257: Unknown result type (might be due to invalid IL or missing references)
		//IL_2025e: Unknown result type (might be due to invalid IL or missing references)
		//IL_20327: Unknown result type (might be due to invalid IL or missing references)
		//IL_20346: Unknown result type (might be due to invalid IL or missing references)
		//IL_20374: Unknown result type (might be due to invalid IL or missing references)
		//IL_2037e: Unknown result type (might be due to invalid IL or missing references)
		//IL_20383: Unknown result type (might be due to invalid IL or missing references)
		//IL_203b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_203d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_20402: Unknown result type (might be due to invalid IL or missing references)
		//IL_2040c: Unknown result type (might be due to invalid IL or missing references)
		//IL_20411: Unknown result type (might be due to invalid IL or missing references)
		//IL_20417: Unknown result type (might be due to invalid IL or missing references)
		//IL_2043a: Unknown result type (might be due to invalid IL or missing references)
		//IL_20468: Unknown result type (might be due to invalid IL or missing references)
		//IL_20472: Unknown result type (might be due to invalid IL or missing references)
		//IL_20477: Unknown result type (might be due to invalid IL or missing references)
		//IL_20679: Unknown result type (might be due to invalid IL or missing references)
		//IL_20151: Unknown result type (might be due to invalid IL or missing references)
		//IL_20156: Unknown result type (might be due to invalid IL or missing references)
		//IL_20191: Unknown result type (might be due to invalid IL or missing references)
		//IL_20692: Unknown result type (might be due to invalid IL or missing references)
		//IL_201ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_201b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_201cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_201e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_201e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_201ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_205bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_205c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_205c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_205cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_206c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_206e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_206ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_2070a: Unknown result type (might be due to invalid IL or missing references)
		//IL_20710: Unknown result type (might be due to invalid IL or missing references)
		//IL_20715: Unknown result type (might be due to invalid IL or missing references)
		//IL_2071a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2071f: Unknown result type (might be due to invalid IL or missing references)
		//IL_20724: Unknown result type (might be due to invalid IL or missing references)
		//IL_20741: Unknown result type (might be due to invalid IL or missing references)
		//IL_2075e: Unknown result type (might be due to invalid IL or missing references)
		//IL_20763: Unknown result type (might be due to invalid IL or missing references)
		//IL_20793: Unknown result type (might be due to invalid IL or missing references)
		//IL_2079d: Unknown result type (might be due to invalid IL or missing references)
		//IL_207a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_207ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_207f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_207fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2082e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2084e: Unknown result type (might be due to invalid IL or missing references)
		//IL_20854: Unknown result type (might be due to invalid IL or missing references)
		//IL_2088e: Unknown result type (might be due to invalid IL or missing references)
		//IL_20894: Unknown result type (might be due to invalid IL or missing references)
		//IL_20899: Unknown result type (might be due to invalid IL or missing references)
		//IL_2089e: Unknown result type (might be due to invalid IL or missing references)
		//IL_208a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_208a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_208c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_208e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_208e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_20913: Unknown result type (might be due to invalid IL or missing references)
		//IL_20933: Unknown result type (might be due to invalid IL or missing references)
		//IL_20939: Unknown result type (might be due to invalid IL or missing references)
		//IL_20957: Unknown result type (might be due to invalid IL or missing references)
		//IL_2095d: Unknown result type (might be due to invalid IL or missing references)
		//IL_20962: Unknown result type (might be due to invalid IL or missing references)
		//IL_20967: Unknown result type (might be due to invalid IL or missing references)
		//IL_2096c: Unknown result type (might be due to invalid IL or missing references)
		//IL_20971: Unknown result type (might be due to invalid IL or missing references)
		//IL_209b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_209d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_209d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_209fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a21: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a55: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a60: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a65: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_20aaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_20aaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_204c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_204c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_20500: Unknown result type (might be due to invalid IL or missing references)
		//IL_20b30: Unknown result type (might be due to invalid IL or missing references)
		//IL_20b4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_20b52: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f40: Unknown result type (might be due to invalid IL or missing references)
		//IL_2051a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2051f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2053c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2054f: Unknown result type (might be due to invalid IL or missing references)
		//IL_20554: Unknown result type (might be due to invalid IL or missing references)
		//IL_20559: Unknown result type (might be due to invalid IL or missing references)
		//IL_20bf3: Unknown result type (might be due to invalid IL or missing references)
		//IL_20bf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_20bfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c13: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c18: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c34: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c41: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c54: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c59: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c60: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c65: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c70: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c84: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c91: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_20ca5: Unknown result type (might be due to invalid IL or missing references)
		//IL_20ceb: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d13: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d30: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d35: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d40: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d51: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d56: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d73: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d82: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f53: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f72: Unknown result type (might be due to invalid IL or missing references)
		//IL_20fb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_20fba: Unknown result type (might be due to invalid IL or missing references)
		//IL_20fbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_20ff0: Unknown result type (might be due to invalid IL or missing references)
		//IL_21012: Unknown result type (might be due to invalid IL or missing references)
		//IL_2104c: Unknown result type (might be due to invalid IL or missing references)
		//IL_21056: Unknown result type (might be due to invalid IL or missing references)
		//IL_2105b: Unknown result type (might be due to invalid IL or missing references)
		//IL_21061: Unknown result type (might be due to invalid IL or missing references)
		//IL_21083: Unknown result type (might be due to invalid IL or missing references)
		//IL_210b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_210bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_210c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_21341: Unknown result type (might be due to invalid IL or missing references)
		//IL_20dec: Unknown result type (might be due to invalid IL or missing references)
		//IL_20df1: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e43: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e60: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e73: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e78: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_210fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2111e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2114c: Unknown result type (might be due to invalid IL or missing references)
		//IL_21156: Unknown result type (might be due to invalid IL or missing references)
		//IL_2115b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2136b: Unknown result type (might be due to invalid IL or missing references)
		//IL_21370: Unknown result type (might be due to invalid IL or missing references)
		//IL_2135a: Unknown result type (might be due to invalid IL or missing references)
		//IL_21380: Unknown result type (might be due to invalid IL or missing references)
		//IL_2139f: Unknown result type (might be due to invalid IL or missing references)
		//IL_213cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_213d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_213dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2140a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2142c: Unknown result type (might be due to invalid IL or missing references)
		//IL_21466: Unknown result type (might be due to invalid IL or missing references)
		//IL_21470: Unknown result type (might be due to invalid IL or missing references)
		//IL_21475: Unknown result type (might be due to invalid IL or missing references)
		//IL_2147b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2149d: Unknown result type (might be due to invalid IL or missing references)
		//IL_214cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_214d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_214da: Unknown result type (might be due to invalid IL or missing references)
		//IL_211b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_211b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_211f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_211fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_21202: Unknown result type (might be due to invalid IL or missing references)
		//IL_21247: Unknown result type (might be due to invalid IL or missing references)
		//IL_2125a: Unknown result type (might be due to invalid IL or missing references)
		//IL_21264: Unknown result type (might be due to invalid IL or missing references)
		//IL_21269: Unknown result type (might be due to invalid IL or missing references)
		//IL_2126e: Unknown result type (might be due to invalid IL or missing references)
		//IL_21517: Unknown result type (might be due to invalid IL or missing references)
		//IL_21539: Unknown result type (might be due to invalid IL or missing references)
		//IL_21567: Unknown result type (might be due to invalid IL or missing references)
		//IL_21571: Unknown result type (might be due to invalid IL or missing references)
		//IL_21576: Unknown result type (might be due to invalid IL or missing references)
		//IL_2192a: Unknown result type (might be due to invalid IL or missing references)
		//IL_21943: Unknown result type (might be due to invalid IL or missing references)
		//IL_219fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a21: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a51: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a60: Unknown result type (might be due to invalid IL or missing references)
		//IL_215ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_215cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2160a: Unknown result type (might be due to invalid IL or missing references)
		//IL_21aa6: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ac6: Unknown result type (might be due to invalid IL or missing references)
		//IL_21acc: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b18: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b38: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b58: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b98: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_21624: Unknown result type (might be due to invalid IL or missing references)
		//IL_21629: Unknown result type (might be due to invalid IL or missing references)
		//IL_21646: Unknown result type (might be due to invalid IL or missing references)
		//IL_21659: Unknown result type (might be due to invalid IL or missing references)
		//IL_2165e: Unknown result type (might be due to invalid IL or missing references)
		//IL_21663: Unknown result type (might be due to invalid IL or missing references)
		//IL_2177c: Unknown result type (might be due to invalid IL or missing references)
		//IL_21797: Unknown result type (might be due to invalid IL or missing references)
		//IL_2179c: Unknown result type (might be due to invalid IL or missing references)
		//IL_217a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_217a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_217b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_217b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_217bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_217c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_217ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c02: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c09: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c58: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_21cc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_21cc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ccd: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d16: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d85: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_21dc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_21dd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_21dd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e43: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e49: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e87: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e92: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e97: Unknown result type (might be due to invalid IL or missing references)
		//IL_21f9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_21f85: Unknown result type (might be due to invalid IL or missing references)
		//IL_22055: Unknown result type (might be due to invalid IL or missing references)
		//IL_22076: Unknown result type (might be due to invalid IL or missing references)
		//IL_2207c: Unknown result type (might be due to invalid IL or missing references)
		//IL_220ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_220b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_220bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2214e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2216e: Unknown result type (might be due to invalid IL or missing references)
		//IL_22174: Unknown result type (might be due to invalid IL or missing references)
		//IL_221b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_221c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_221c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_221e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_22200: Unknown result type (might be due to invalid IL or missing references)
		//IL_22206: Unknown result type (might be due to invalid IL or missing references)
		//IL_22236: Unknown result type (might be due to invalid IL or missing references)
		//IL_22240: Unknown result type (might be due to invalid IL or missing references)
		//IL_22245: Unknown result type (might be due to invalid IL or missing references)
		//IL_226dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_22bde: Unknown result type (might be due to invalid IL or missing references)
		//IL_222de: Unknown result type (might be due to invalid IL or missing references)
		//IL_222e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_222eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_22329: Unknown result type (might be due to invalid IL or missing references)
		//IL_22334: Unknown result type (might be due to invalid IL or missing references)
		//IL_22339: Unknown result type (might be due to invalid IL or missing references)
		//IL_223bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_223c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_223c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_22407: Unknown result type (might be due to invalid IL or missing references)
		//IL_22412: Unknown result type (might be due to invalid IL or missing references)
		//IL_22417: Unknown result type (might be due to invalid IL or missing references)
		//IL_2249a: Unknown result type (might be due to invalid IL or missing references)
		//IL_224a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_224a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_224e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_224f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_224f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_22578: Unknown result type (might be due to invalid IL or missing references)
		//IL_2257f: Unknown result type (might be due to invalid IL or missing references)
		//IL_22585: Unknown result type (might be due to invalid IL or missing references)
		//IL_225c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_225ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_225d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_22f4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_22f62: Unknown result type (might be due to invalid IL or missing references)
		//IL_22f67: Unknown result type (might be due to invalid IL or missing references)
		//IL_22f81: Unknown result type (might be due to invalid IL or missing references)
		//IL_22710: Unknown result type (might be due to invalid IL or missing references)
		//IL_22731: Unknown result type (might be due to invalid IL or missing references)
		//IL_22737: Unknown result type (might be due to invalid IL or missing references)
		//IL_22767: Unknown result type (might be due to invalid IL or missing references)
		//IL_22771: Unknown result type (might be due to invalid IL or missing references)
		//IL_22776: Unknown result type (might be due to invalid IL or missing references)
		//IL_23541: Unknown result type (might be due to invalid IL or missing references)
		//IL_23546: Unknown result type (might be due to invalid IL or missing references)
		//IL_2354b: Unknown result type (might be due to invalid IL or missing references)
		//IL_23551: Unknown result type (might be due to invalid IL or missing references)
		//IL_2357b: Unknown result type (might be due to invalid IL or missing references)
		//IL_23580: Unknown result type (might be due to invalid IL or missing references)
		//IL_23586: Unknown result type (might be due to invalid IL or missing references)
		//IL_2358c: Unknown result type (might be due to invalid IL or missing references)
		//IL_22c11: Unknown result type (might be due to invalid IL or missing references)
		//IL_22c32: Unknown result type (might be due to invalid IL or missing references)
		//IL_22c38: Unknown result type (might be due to invalid IL or missing references)
		//IL_22c68: Unknown result type (might be due to invalid IL or missing references)
		//IL_22c72: Unknown result type (might be due to invalid IL or missing references)
		//IL_22c77: Unknown result type (might be due to invalid IL or missing references)
		//IL_24041: Unknown result type (might be due to invalid IL or missing references)
		//IL_235c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_22fad: Unknown result type (might be due to invalid IL or missing references)
		//IL_22fdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_22fe2: Unknown result type (might be due to invalid IL or missing references)
		//IL_23012: Unknown result type (might be due to invalid IL or missing references)
		//IL_2301c: Unknown result type (might be due to invalid IL or missing references)
		//IL_23021: Unknown result type (might be due to invalid IL or missing references)
		//IL_227bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_227dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_227e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_22824: Unknown result type (might be due to invalid IL or missing references)
		//IL_2282e: Unknown result type (might be due to invalid IL or missing references)
		//IL_22833: Unknown result type (might be due to invalid IL or missing references)
		//IL_2284e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2286e: Unknown result type (might be due to invalid IL or missing references)
		//IL_22874: Unknown result type (might be due to invalid IL or missing references)
		//IL_228a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_228ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_228b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_228ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_228f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_228f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_22937: Unknown result type (might be due to invalid IL or missing references)
		//IL_22941: Unknown result type (might be due to invalid IL or missing references)
		//IL_22946: Unknown result type (might be due to invalid IL or missing references)
		//IL_235db: Unknown result type (might be due to invalid IL or missing references)
		//IL_22cbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_22cdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ce2: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d24: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d33: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d74: Unknown result type (might be due to invalid IL or missing references)
		//IL_22da4: Unknown result type (might be due to invalid IL or missing references)
		//IL_22dae: Unknown result type (might be due to invalid IL or missing references)
		//IL_22db3: Unknown result type (might be due to invalid IL or missing references)
		//IL_22dec: Unknown result type (might be due to invalid IL or missing references)
		//IL_22df3: Unknown result type (might be due to invalid IL or missing references)
		//IL_22df9: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e37: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e41: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e46: Unknown result type (might be due to invalid IL or missing references)
		//IL_2308e: Unknown result type (might be due to invalid IL or missing references)
		//IL_230bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_230c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_23105: Unknown result type (might be due to invalid IL or missing references)
		//IL_2310f: Unknown result type (might be due to invalid IL or missing references)
		//IL_23114: Unknown result type (might be due to invalid IL or missing references)
		//IL_2312f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2315e: Unknown result type (might be due to invalid IL or missing references)
		//IL_23164: Unknown result type (might be due to invalid IL or missing references)
		//IL_23194: Unknown result type (might be due to invalid IL or missing references)
		//IL_2319e: Unknown result type (might be due to invalid IL or missing references)
		//IL_231a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_24114: Unknown result type (might be due to invalid IL or missing references)
		//IL_24135: Unknown result type (might be due to invalid IL or missing references)
		//IL_2413b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2416b: Unknown result type (might be due to invalid IL or missing references)
		//IL_24175: Unknown result type (might be due to invalid IL or missing references)
		//IL_2417a: Unknown result type (might be due to invalid IL or missing references)
		//IL_23603: Unknown result type (might be due to invalid IL or missing references)
		//IL_23624: Unknown result type (might be due to invalid IL or missing references)
		//IL_2362a: Unknown result type (might be due to invalid IL or missing references)
		//IL_23672: Unknown result type (might be due to invalid IL or missing references)
		//IL_2367c: Unknown result type (might be due to invalid IL or missing references)
		//IL_23681: Unknown result type (might be due to invalid IL or missing references)
		//IL_2368c: Unknown result type (might be due to invalid IL or missing references)
		//IL_23696: Unknown result type (might be due to invalid IL or missing references)
		//IL_2369b: Unknown result type (might be due to invalid IL or missing references)
		//IL_231ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_231f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_231fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2323e: Unknown result type (might be due to invalid IL or missing references)
		//IL_23248: Unknown result type (might be due to invalid IL or missing references)
		//IL_2324d: Unknown result type (might be due to invalid IL or missing references)
		//IL_22b24: Unknown result type (might be due to invalid IL or missing references)
		//IL_22b3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_236e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_236f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_236f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_232c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_232c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_232cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_23311: Unknown result type (might be due to invalid IL or missing references)
		//IL_2331b: Unknown result type (might be due to invalid IL or missing references)
		//IL_23320: Unknown result type (might be due to invalid IL or missing references)
		//IL_241ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_241d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_241d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_24218: Unknown result type (might be due to invalid IL or missing references)
		//IL_24222: Unknown result type (might be due to invalid IL or missing references)
		//IL_24227: Unknown result type (might be due to invalid IL or missing references)
		//IL_2422d: Unknown result type (might be due to invalid IL or missing references)
		//IL_24252: Unknown result type (might be due to invalid IL or missing references)
		//IL_24258: Unknown result type (might be due to invalid IL or missing references)
		//IL_24288: Unknown result type (might be due to invalid IL or missing references)
		//IL_24292: Unknown result type (might be due to invalid IL or missing references)
		//IL_24297: Unknown result type (might be due to invalid IL or missing references)
		//IL_242bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_242c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_242c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_24307: Unknown result type (might be due to invalid IL or missing references)
		//IL_24311: Unknown result type (might be due to invalid IL or missing references)
		//IL_24316: Unknown result type (might be due to invalid IL or missing references)
		//IL_24364: Unknown result type (might be due to invalid IL or missing references)
		//IL_2436b: Unknown result type (might be due to invalid IL or missing references)
		//IL_24371: Unknown result type (might be due to invalid IL or missing references)
		//IL_243af: Unknown result type (might be due to invalid IL or missing references)
		//IL_243b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_243be: Unknown result type (might be due to invalid IL or missing references)
		//IL_2440c: Unknown result type (might be due to invalid IL or missing references)
		//IL_24413: Unknown result type (might be due to invalid IL or missing references)
		//IL_24419: Unknown result type (might be due to invalid IL or missing references)
		//IL_24457: Unknown result type (might be due to invalid IL or missing references)
		//IL_24461: Unknown result type (might be due to invalid IL or missing references)
		//IL_24466: Unknown result type (might be due to invalid IL or missing references)
		//IL_244b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_244bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_244c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_244ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_24509: Unknown result type (might be due to invalid IL or missing references)
		//IL_2450e: Unknown result type (might be due to invalid IL or missing references)
		//IL_23727: Unknown result type (might be due to invalid IL or missing references)
		//IL_23748: Unknown result type (might be due to invalid IL or missing references)
		//IL_2374e: Unknown result type (might be due to invalid IL or missing references)
		//IL_239ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_239de: Unknown result type (might be due to invalid IL or missing references)
		//IL_23393: Unknown result type (might be due to invalid IL or missing references)
		//IL_2339a: Unknown result type (might be due to invalid IL or missing references)
		//IL_233a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_233e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_233ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_233f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_24569: Unknown result type (might be due to invalid IL or missing references)
		//IL_2456e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2460d: Unknown result type (might be due to invalid IL or missing references)
		//IL_24613: Unknown result type (might be due to invalid IL or missing references)
		//IL_237f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_237fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_23802: Unknown result type (might be due to invalid IL or missing references)
		//IL_23813: Unknown result type (might be due to invalid IL or missing references)
		//IL_23821: Unknown result type (might be due to invalid IL or missing references)
		//IL_23827: Unknown result type (might be due to invalid IL or missing references)
		//IL_23829: Unknown result type (might be due to invalid IL or missing references)
		//IL_2382e: Unknown result type (might be due to invalid IL or missing references)
		//IL_23834: Unknown result type (might be due to invalid IL or missing references)
		//IL_23855: Unknown result type (might be due to invalid IL or missing references)
		//IL_2385b: Unknown result type (might be due to invalid IL or missing references)
		//IL_23885: Unknown result type (might be due to invalid IL or missing references)
		//IL_2388f: Unknown result type (might be due to invalid IL or missing references)
		//IL_23894: Unknown result type (might be due to invalid IL or missing references)
		//IL_238a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_238b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_238b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_238bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_238c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_238e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_23905: Unknown result type (might be due to invalid IL or missing references)
		//IL_2390b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2396f: Unknown result type (might be due to invalid IL or missing references)
		//IL_23979: Unknown result type (might be due to invalid IL or missing references)
		//IL_2397e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2398f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2399d: Unknown result type (might be due to invalid IL or missing references)
		//IL_239a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_239a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_239aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_23466: Unknown result type (might be due to invalid IL or missing references)
		//IL_2346d: Unknown result type (might be due to invalid IL or missing references)
		//IL_23473: Unknown result type (might be due to invalid IL or missing references)
		//IL_234b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_234c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_234c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c44: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a49: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a54: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a64: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a69: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a75: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a90: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ad6: Unknown result type (might be due to invalid IL or missing references)
		//IL_23af3: Unknown result type (might be due to invalid IL or missing references)
		//IL_23af8: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b43: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b45: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_23bbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_23bc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_23bc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_23be4: Unknown result type (might be due to invalid IL or missing references)
		//IL_23be9: Unknown result type (might be due to invalid IL or missing references)
		//IL_23bee: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b74: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b95: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_23d91: Unknown result type (might be due to invalid IL or missing references)
		//IL_23d96: Unknown result type (might be due to invalid IL or missing references)
		//IL_23d9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_23da1: Unknown result type (might be due to invalid IL or missing references)
		//IL_23db1: Unknown result type (might be due to invalid IL or missing references)
		//IL_23db6: Unknown result type (might be due to invalid IL or missing references)
		//IL_23dcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_246b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_23dd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c74: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c83: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c88: Unknown result type (might be due to invalid IL or missing references)
		//IL_23cb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_23cc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_23cc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_23cd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_23cd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_23cdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_23cf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_23d0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_23d15: Unknown result type (might be due to invalid IL or missing references)
		//IL_23d1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_23d1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2477b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2479c: Unknown result type (might be due to invalid IL or missing references)
		//IL_247a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_247d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_247dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_247e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e14: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e24: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e30: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e44: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e50: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e55: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e76: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e83: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e90: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_24827: Unknown result type (might be due to invalid IL or missing references)
		//IL_24847: Unknown result type (might be due to invalid IL or missing references)
		//IL_2484d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2488f: Unknown result type (might be due to invalid IL or missing references)
		//IL_24899: Unknown result type (might be due to invalid IL or missing references)
		//IL_2489e: Unknown result type (might be due to invalid IL or missing references)
		//IL_248b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_248d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_248df: Unknown result type (might be due to invalid IL or missing references)
		//IL_2490f: Unknown result type (might be due to invalid IL or missing references)
		//IL_24919: Unknown result type (might be due to invalid IL or missing references)
		//IL_2491e: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ee9: Unknown result type (might be due to invalid IL or missing references)
		//IL_23eef: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ef5: Unknown result type (might be due to invalid IL or missing references)
		//IL_23eff: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f15: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f25: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f30: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f37: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f47: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f51: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f78: Unknown result type (might be due to invalid IL or missing references)
		//IL_24984: Unknown result type (might be due to invalid IL or missing references)
		//IL_2498b: Unknown result type (might be due to invalid IL or missing references)
		//IL_24991: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a45: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a52: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b06: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b13: Unknown result type (might be due to invalid IL or missing references)
		//IL_24bc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_24bce: Unknown result type (might be due to invalid IL or missing references)
		//IL_24bd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d50: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d70: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d76: Unknown result type (might be due to invalid IL or missing references)
		//IL_251c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_24edc: Unknown result type (might be due to invalid IL or missing references)
		//IL_24efc: Unknown result type (might be due to invalid IL or missing references)
		//IL_24f02: Unknown result type (might be due to invalid IL or missing references)
		//IL_2506b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2508b: Unknown result type (might be due to invalid IL or missing references)
		//IL_25091: Unknown result type (might be due to invalid IL or missing references)
		//IL_24dc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_24de0: Unknown result type (might be due to invalid IL or missing references)
		//IL_24de6: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e57: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2523f: Unknown result type (might be due to invalid IL or missing references)
		//IL_25262: Unknown result type (might be due to invalid IL or missing references)
		//IL_25268: Unknown result type (might be due to invalid IL or missing references)
		//IL_252aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_252b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_252b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_252e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_25305: Unknown result type (might be due to invalid IL or missing references)
		//IL_2530b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2533b: Unknown result type (might be due to invalid IL or missing references)
		//IL_25345: Unknown result type (might be due to invalid IL or missing references)
		//IL_2534a: Unknown result type (might be due to invalid IL or missing references)
		//IL_25386: Unknown result type (might be due to invalid IL or missing references)
		//IL_24f4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_24f6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_24f72: Unknown result type (might be due to invalid IL or missing references)
		//IL_24fd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_24fe3: Unknown result type (might be due to invalid IL or missing references)
		//IL_24fe8: Unknown result type (might be due to invalid IL or missing references)
		//IL_254fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_250db: Unknown result type (might be due to invalid IL or missing references)
		//IL_250fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_25104: Unknown result type (might be due to invalid IL or missing references)
		//IL_2516b: Unknown result type (might be due to invalid IL or missing references)
		//IL_25175: Unknown result type (might be due to invalid IL or missing references)
		//IL_2517a: Unknown result type (might be due to invalid IL or missing references)
		//IL_25679: Unknown result type (might be due to invalid IL or missing references)
		//IL_25405: Unknown result type (might be due to invalid IL or missing references)
		//IL_25428: Unknown result type (might be due to invalid IL or missing references)
		//IL_2542e: Unknown result type (might be due to invalid IL or missing references)
		//IL_25476: Unknown result type (might be due to invalid IL or missing references)
		//IL_25499: Unknown result type (might be due to invalid IL or missing references)
		//IL_2549f: Unknown result type (might be due to invalid IL or missing references)
		//IL_25842: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a23: Unknown result type (might be due to invalid IL or missing references)
		//IL_256f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2571b: Unknown result type (might be due to invalid IL or missing references)
		//IL_25721: Unknown result type (might be due to invalid IL or missing references)
		//IL_25763: Unknown result type (might be due to invalid IL or missing references)
		//IL_2576d: Unknown result type (might be due to invalid IL or missing references)
		//IL_25772: Unknown result type (might be due to invalid IL or missing references)
		//IL_2579b: Unknown result type (might be due to invalid IL or missing references)
		//IL_257be: Unknown result type (might be due to invalid IL or missing references)
		//IL_257c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_257f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_257fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_25803: Unknown result type (might be due to invalid IL or missing references)
		//IL_25b04: Unknown result type (might be due to invalid IL or missing references)
		//IL_258c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_258e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_258ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_2592f: Unknown result type (might be due to invalid IL or missing references)
		//IL_25939: Unknown result type (might be due to invalid IL or missing references)
		//IL_2593e: Unknown result type (might be due to invalid IL or missing references)
		//IL_25967: Unknown result type (might be due to invalid IL or missing references)
		//IL_2598d: Unknown result type (might be due to invalid IL or missing references)
		//IL_25993: Unknown result type (might be due to invalid IL or missing references)
		//IL_259c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_259cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_259d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_255b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_255e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_255e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_25619: Unknown result type (might be due to invalid IL or missing references)
		//IL_25623: Unknown result type (might be due to invalid IL or missing references)
		//IL_25628: Unknown result type (might be due to invalid IL or missing references)
		//IL_25cb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a41: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a74: Unknown result type (might be due to invalid IL or missing references)
		//IL_25ab6: Unknown result type (might be due to invalid IL or missing references)
		//IL_25ac0: Unknown result type (might be due to invalid IL or missing references)
		//IL_25ac5: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e59: Unknown result type (might be due to invalid IL or missing references)
		//IL_25b34: Unknown result type (might be due to invalid IL or missing references)
		//IL_25b54: Unknown result type (might be due to invalid IL or missing references)
		//IL_25b5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_25ce3: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d03: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d09: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_25ea0: Unknown result type (might be due to invalid IL or missing references)
		//IL_25ee1: Unknown result type (might be due to invalid IL or missing references)
		//IL_25f02: Unknown result type (might be due to invalid IL or missing references)
		//IL_25f36: Unknown result type (might be due to invalid IL or missing references)
		//IL_25f40: Unknown result type (might be due to invalid IL or missing references)
		//IL_25f45: Unknown result type (might be due to invalid IL or missing references)
		//IL_25f6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_25f74: Unknown result type (might be due to invalid IL or missing references)
		//IL_25fb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_25fd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2600a: Unknown result type (might be due to invalid IL or missing references)
		//IL_26014: Unknown result type (might be due to invalid IL or missing references)
		//IL_26019: Unknown result type (might be due to invalid IL or missing references)
		//IL_25bc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_25bc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_25bd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_25bd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_25bdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_25bf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_25bfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c00: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d71: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d81: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d88: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d98: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_25da2: Unknown result type (might be due to invalid IL or missing references)
		//IL_25db6: Unknown result type (might be due to invalid IL or missing references)
		//IL_25dc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_25dc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_25dcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_25dd4: Unknown result type (might be due to invalid IL or missing references)
		if (!active)
		{
			return;
		}
		Main.projectileIdentity[owner, identity] = -1;
		int num = timeLeft;
		timeLeft = 0;
		bool flag = true;
		if (type >= 0 && ProjectileID.Sets.DontCancelChannelOnKill[type])
		{
			flag = false;
		}
		if (owner == Main.myPlayer && flag)
		{
			Main.player[owner].TryCancelChannel(this);
		}
		if (!ProjectileLoader.PreKill(this, num))
		{
			active = false;
			return;
		}
		if (Main.getGoodWorld && aiStyle == 16)
		{
			TryGettingHitByOtherPlayersExplosives();
		}
		if (Main.netMode != 1 && Main.getGoodWorld)
		{
			if (type == 472)
			{
				SpawnWebs();
			}
			if (type == 99)
			{
				BoulderExplosion();
			}
		}
		Vector2 center4;
		if (type == 1020)
		{
			if (position.Y - (float)height <= (float)(16 * Main.offScreenRange) && owner == Main.myPlayer)
			{
				Main.Achievements.GetCondition("TO_INFINITY_AND_BEYOND", "Do").Complete();
			}
			SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[2]))?.Stop();
			SoundEngine.PlaySound(in SoundID.Item62, position);
			Color transparent = Color.Transparent;
			for (int i = 0; i < 15; i++)
			{
				Dust dust = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, transparent, 0.8f);
				dust.fadeIn = 0f;
				Dust dust75 = dust;
				Dust dust334 = dust75;
				dust334.velocity *= 0.5f;
			}
			for (int j = 0; j < 5; j++)
			{
				Dust dust284 = Dust.NewDustDirect(position, width, height, 228, 0f, 0f, 100, transparent, 2.5f);
				dust284.noGravity = true;
				Dust dust76 = dust284;
				Dust dust334 = dust76;
				dust334.velocity *= 2.5f;
				dust284 = Dust.NewDustDirect(position, width, height, 228, 0f, 0f, 100, transparent, 1.1f);
				dust76 = dust284;
				dust334 = dust76;
				dust334.velocity *= 2f;
				dust284.noGravity = true;
			}
			for (int k = 0; k < 3; k++)
			{
				Dust dust295 = Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 100, transparent, 1.1f);
				Dust dust79 = dust295;
				Dust dust334 = dust79;
				dust334.velocity *= 2f;
				dust295.noGravity = true;
			}
			for (int l = -1; l <= 1; l += 2)
			{
				for (int m = -1; m <= 1; m += 2)
				{
					if (Main.rand.Next(5) == 0)
					{
						Gore gore = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
						Gore gore14 = gore;
						Gore gore64 = gore14;
						gore64.velocity *= 0.2f;
						gore14 = gore;
						gore64 = gore14;
						gore64.scale *= 0.65f;
						gore14 = gore;
						gore64 = gore14;
						gore64.velocity += new Vector2((float)l, (float)m) * 0.5f;
					}
				}
			}
		}
		else if (type == 949)
		{
			SoundEngine.PlaySound(in SoundID.Item10, base.Center);
			int num141 = (int)ai[0];
			float num252 = 20f;
			for (float num363 = 0f; num363 < num252; num363++)
			{
				Vector2 vector = position;
				int num474 = Dust.NewDust(vector, 4, 4, num141, 0f, 0f, 100);
				if (Main.rand.Next(3) != 0)
				{
					Main.dust[num474].noGravity = true;
				}
				Dust dust74 = Main.dust[num474];
				Dust dust334 = dust74;
				dust334.velocity *= 0.8f;
				if (num141 == 66)
				{
					Main.dust[num474].color = new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
					Main.dust[num474].noGravity = true;
				}
			}
		}
		else if (type == 985)
		{
			if (localAI[1] != 1f)
			{
				Color value = default(Color);
				((Color)(ref value))._002Ector(64, 220, 96);
				Color value6 = default(Color);
				((Color)(ref value6))._002Ector(15, 84, 125);
				for (int n = 0; n < 20; n++)
				{
					float num585 = Main.rand.NextFloatDirection();
					float num695 = 1f - Math.Abs(num585);
					float f = rotation + num585 * ((float)Math.PI / 2f) * 0.9f;
					Vector2 vector12 = base.Center + f.ToRotationVector2() * Utils.Remap(Main.rand.NextFloat(), 0f, 1f, 60f, 85f) * scale;
					float num806 = Main.rand.NextFloat();
					vector12 -= rotation.ToRotationVector2() * num806 * 70f * scale;
					Color value7 = Color.Lerp(value6, value, 1f);
					value7 = Color.Lerp(value7, Color.White, 0.5f);
					Color.Lerp(value7, Color.White, Main.rand.NextFloat() * 0.3f);
					Vector2 val = vector12;
					Vector2 spinningpoint3 = velocity;
					double radians = num585 * ((float)Math.PI / 4f);
					center4 = default(Vector2);
					Dust dust306 = Dust.NewDustPerfect(val, 107, spinningpoint3.RotatedBy(radians, center4) * 0.2f * Main.rand.NextFloat(), 100, default(Color), 1.4f * num695);
					Dust dust69 = dust306;
					Dust dust334 = dust69;
					dust334.position -= dust306.velocity * Main.rand.NextFloat() * 3f;
					dust69 = dust306;
					dust334 = dust69;
					dust334.scale *= 1f - num806;
				}
				for (int num917 = 0; num917 < 10; num917++)
				{
					float num2 = Main.rand.NextFloatDirection();
					float num42 = 1f - Math.Abs(num2);
					float f2 = rotation + num2 * ((float)Math.PI / 2f) * 0.9f;
					Vector2 vector23 = base.Center + f2.ToRotationVector2() * Utils.Remap(Main.rand.NextFloat(), 0f, 1f, 70f, 85f) * scale;
					float num53 = Main.rand.NextFloat() * 0.25f;
					vector23 -= rotation.ToRotationVector2() * (0.2f + num53) * 70f * scale;
					Color value8 = Color.Lerp(value6, value, 0.66f);
					value8 = Color.Lerp(value8, Color.White, 0.33f);
					Color.Lerp(value8, Color.White, Main.rand.NextFloat() * 0.3f);
					Vector2 val2 = vector23;
					Vector2 spinningpoint4 = velocity;
					double radians2 = num2 * ((float)Math.PI / 4f);
					center4 = default(Vector2);
					Dust dust317 = Dust.NewDustPerfect(val2, 107, spinningpoint4.RotatedBy(radians2, center4) * 0.2f * Main.rand.NextFloat(), 100, default(Color), 1.4f * num42);
					Dust dust70 = dust317;
					Dust dust334 = dust70;
					dust334.position -= dust317.velocity * Main.rand.NextFloat() * 3f;
					dust70 = dust317;
					dust334 = dust70;
					dust334.scale *= 1f - num53;
				}
				for (int num64 = 0; num64 < 10; num64++)
				{
					float num75 = Main.rand.NextFloatDirection();
					float num86 = 1f - Math.Abs(num75);
					float f3 = rotation + num75 * ((float)Math.PI / 2f) * 0.9f;
					Vector2 vector34 = base.Center + f3.ToRotationVector2() * Utils.Remap(Main.rand.NextFloat(), 0f, 1f, 60f, 75f) * scale;
					float num97 = Main.rand.NextFloat() * 0.25f;
					vector34 -= rotation.ToRotationVector2() * (0.5f + num97) * 70f * scale;
					Color value9 = Color.Lerp(value6, value, 0.33f);
					value9 = Color.Lerp(value9, Color.White, 0.16f);
					Color.Lerp(value9, Color.White, Main.rand.NextFloat() * 0.3f);
					Vector2 val3 = vector34;
					Vector2 spinningpoint5 = velocity;
					double radians3 = num75 * ((float)Math.PI / 4f);
					center4 = default(Vector2);
					Dust dust328 = Dust.NewDustPerfect(val3, 107, spinningpoint5.RotatedBy(radians3, center4) * 0.2f * Main.rand.NextFloat(), 100, default(Color), 1.4f * num86);
					Dust dust71 = dust328;
					Dust dust334 = dust71;
					dust334.position -= dust328.velocity * Main.rand.NextFloat() * 3f;
					dust71 = dust328;
					dust334 = dust71;
					dust334.scale *= 1f - num97;
				}
			}
		}
		else if (type == 756)
		{
			for (float num108 = 0f; num108 < 1f; num108 += 0.025f)
			{
				Dust dust332 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(16f, 16f) * scale + velocity.SafeNormalize(Vector2.UnitY) * num108 * 200f * scale, 5, Main.rand.NextVector2Circular(3f, 3f));
				dust332.velocity.Y += -0.3f;
				Dust dust66 = dust332;
				Dust dust334 = dust66;
				dust334.velocity += velocity * 0.2f;
				dust332.scale = 1f;
				dust332.alpha = 100;
			}
		}
		else if (type == 961)
		{
			for (float num119 = 0f; num119 < 1f; num119 += 0.25f)
			{
				Dust dust333 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(16f, 16f) * scale + velocity.SafeNormalize(Vector2.UnitY) * num119 * 200f * scale, 16, Main.rand.NextVector2Circular(3f, 3f));
				dust333.velocity.Y += -0.3f;
				Dust dust65 = dust333;
				Dust dust334 = dust65;
				dust334.velocity += velocity * 0.2f;
				dust333.scale = 1f;
				dust333.alpha = 100;
			}
		}
		else if (type == 962)
		{
			for (int num130 = 0; num130 < 20; num130++)
			{
				Dust dust2 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(16f, 16f) * scale, 16, Main.rand.NextVector2Circular(2f, 2f));
				Dust dust64 = dust2;
				Dust dust334 = dust64;
				dust334.velocity += velocity * 0.1f;
				dust2.scale = 1f;
				dust2.alpha = 100;
			}
		}
		else if (type == 932)
		{
			Color fairyQueenWeaponsColor = GetFairyQueenWeaponsColor();
			SoundEngine.PlaySound(in SoundID.Item10, base.Center);
			Vector2 target = base.Center;
			Main.rand.NextFloat();
			int num142 = 10;
			for (int num153 = 0; num153 < num142; num153++)
			{
				Vector2 vector45 = position - velocity * (float)num153;
				int num164 = Main.rand.Next(1, 3);
				float num175 = MathHelper.Lerp(0.3f, 1f, Utils.GetLerpValue(num142, 0f, num153, clamped: true));
				if ((float)num153 >= (float)oldPos.Length * 0.3f)
				{
					num164--;
				}
				if ((float)num153 >= (float)oldPos.Length * 0.75f)
				{
					num164 -= 2;
				}
				vector45.DirectionTo(target).SafeNormalize(Vector2.Zero);
				target = vector45;
				for (float num186 = 0f; num186 < (float)num164; num186++)
				{
					int num197 = Dust.NewDust(vector45, width, height, 267, 0f, 0f, 0, fairyQueenWeaponsColor);
					Dust dust59 = Main.dust[num197];
					Dust dust334 = dust59;
					dust334.velocity *= Main.rand.NextFloat() * 0.8f;
					Main.dust[num197].noGravity = true;
					Main.dust[num197].scale = 0.9f + Main.rand.NextFloat() * 1.2f;
					Main.dust[num197].fadeIn = Main.rand.NextFloat() * 1.2f * num175;
					dust59 = Main.dust[num197];
					dust334 = dust59;
					dust334.scale *= num175;
					if (num197 != 6000)
					{
						Dust dust3 = Dust.CloneDust(num197);
						dust59 = dust3;
						dust334 = dust59;
						dust334.scale /= 2f;
						dust59 = dust3;
						dust334 = dust59;
						dust334.fadeIn *= 0.85f;
						dust3.color = new Color(255, 255, 255, 255);
					}
				}
			}
		}
		else if (type == 931)
		{
			Color fairyQueenWeaponsColor2 = GetFairyQueenWeaponsColor();
			SoundEngine.PlaySound(in SoundID.Item10, base.Center);
			Vector2 target2 = base.Center;
			Main.rand.NextFloat();
			for (int num208 = 0; num208 < oldPos.Length; num208++)
			{
				Vector2 vector56 = oldPos[num208];
				if (vector56 == Vector2.Zero)
				{
					break;
				}
				int num219 = Main.rand.Next(1, 3);
				float num230 = MathHelper.Lerp(0.3f, 1f, Utils.GetLerpValue(oldPos.Length, 0f, num208, clamped: true));
				if ((float)num208 >= (float)oldPos.Length * 0.3f)
				{
					num219--;
				}
				if ((float)num208 >= (float)oldPos.Length * 0.75f)
				{
					num219 -= 2;
				}
				vector56.DirectionTo(target2).SafeNormalize(Vector2.Zero);
				target2 = vector56;
				for (float num241 = 0f; num241 < (float)num219; num241++)
				{
					int num253 = Dust.NewDust(vector56, width, height, 267, 0f, 0f, 0, fairyQueenWeaponsColor2);
					Dust dust51 = Main.dust[num253];
					Dust dust334 = dust51;
					dust334.velocity *= Main.rand.NextFloat() * 0.8f;
					Main.dust[num253].noGravity = true;
					Main.dust[num253].scale = 0.9f + Main.rand.NextFloat() * 1.2f;
					Main.dust[num253].fadeIn = Main.rand.NextFloat() * 1.2f * num230;
					dust51 = Main.dust[num253];
					dust334 = dust51;
					dust334.scale *= num230;
					if (num253 != 6000)
					{
						Dust dust4 = Dust.CloneDust(num253);
						dust51 = dust4;
						dust334 = dust51;
						dust334.scale /= 2f;
						dust51 = dust4;
						dust334 = dust51;
						dust334.fadeIn *= 0.85f;
						dust4.color = new Color(255, 255, 255, 255);
					}
				}
			}
		}
		else if (type == 79)
		{
			int newWidth = width;
			int newHeight = height;
			Resize(128, 128);
			maxPenetrate = -1;
			penetrate = -1;
			Damage();
			Resize(newWidth, newHeight);
			SoundEngine.PlaySound(in SoundID.Item10, base.Center);
			Vector2 target3 = base.Center;
			float num264 = Main.rand.NextFloat();
			for (int num275 = 0; num275 < oldPos.Length; num275++)
			{
				Vector2 vector67 = oldPos[num275];
				if (vector67 == Vector2.Zero)
				{
					break;
				}
				Color newColor = Main.hslToRgb((num264 + Utils.GetLerpValue(oldPos.Length, 0f, num275, clamped: true)) % 1f, 1f, 0.65f);
				int num286 = Main.rand.Next(1, 4);
				float lerpValue = Utils.GetLerpValue(oldPos.Length, 0f, num275, clamped: true);
				float num297 = MathHelper.Lerp(0.3f, 1f, lerpValue);
				if ((float)num275 >= (float)oldPos.Length * 0.3f)
				{
					num286--;
				}
				if ((float)num275 >= (float)oldPos.Length * 0.65f)
				{
					num286 -= 2;
				}
				if ((float)num275 >= (float)oldPos.Length * 0.85f)
				{
					num286 -= 3;
				}
				Vector2 vector77 = vector67.DirectionTo(target3).SafeNormalize(Vector2.Zero);
				target3 = vector67;
				Vector2 vector78 = base.Size / 2f;
				for (float num308 = 0f; num308 < (float)num286; num308++)
				{
					int num319 = Dust.NewDust(vector67, width, height, 267, 0f, 0f, 0, newColor);
					Dust dust46 = Main.dust[num319];
					Dust dust334 = dust46;
					dust334.velocity *= Main.rand.NextFloat() * 0.8f;
					Main.dust[num319].noGravity = true;
					Main.dust[num319].scale = 0.9f + Main.rand.NextFloat() * 1.2f;
					Main.dust[num319].fadeIn = Main.rand.NextFloat() * 1.2f * num297;
					dust46 = Main.dust[num319];
					dust334 = dust46;
					dust334.velocity += vector77 * 6f;
					dust46 = Main.dust[num319];
					dust334 = dust46;
					dust334.scale *= num297;
					Main.dust[num319].position = Vector2.Lerp(vector67 + vector78, Main.dust[num319].position, lerpValue);
					if (num319 != 6000)
					{
						Dust dust5 = Dust.CloneDust(num319);
						dust46 = dust5;
						dust334 = dust46;
						dust334.scale /= 2f;
						dust46 = dust5;
						dust334 = dust46;
						dust334.fadeIn *= 0.85f;
						dust5.color = new Color(255, 255, 255, 255);
					}
				}
			}
			for (float num330 = 0f; num330 < 0.5f; num330 += 0.25f)
			{
				ParticleOrchestraSettings settings = new ParticleOrchestraSettings
				{
					PositionInWorld = base.Center
				};
				Vector2 unitX = Vector2.UnitX;
				double radians4 = num330 * ((float)Math.PI * 2f);
				center4 = default(Vector2);
				settings.MovementVector = unitX.RotatedBy(radians4, center4) * 16f;
				ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.RainbowRodHit, settings, owner);
			}
			for (int num341 = 0; num341 < 14; num341++)
			{
				int num352 = Dust.NewDust(position, width, height, 66, 0f, 0f, 100, Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f), 1.7f);
				Main.dust[num352].noGravity = true;
				Dust dust50 = Main.dust[num352];
				Dust dust334 = dust50;
				dust334.velocity *= 3f;
			}
		}
		else if (type == 16)
		{
			int newWidth2 = width;
			int newHeight2 = height;
			Resize(128, 128);
			maxPenetrate = -1;
			penetrate = -1;
			Damage();
			Resize(newWidth2, newHeight2);
			SoundEngine.PlaySound(in SoundID.Item10, base.Center);
			Vector2 target4 = base.Center;
			for (int num364 = 0; num364 < oldPos.Length; num364++)
			{
				Vector2 vector2 = oldPos[num364];
				if (vector2 == Vector2.Zero)
				{
					break;
				}
				Color newColor2 = Main.hslToRgb(4f / 9f + Main.rand.NextFloat() * (2f / 9f), 1f, 0.65f);
				int num375 = Main.rand.Next(1, 4);
				float num386 = MathHelper.Lerp(0.3f, 1f, Utils.GetLerpValue(oldPos.Length, 0f, num364, clamped: true));
				if ((float)num364 >= (float)oldPos.Length * 0.3f)
				{
					num375--;
				}
				if ((float)num364 >= (float)oldPos.Length * 0.75f)
				{
					num375 -= 2;
				}
				Vector2 vector3 = vector2.DirectionTo(target4).SafeNormalize(Vector2.Zero);
				target4 = vector2;
				for (float num397 = 0f; num397 < (float)num375; num397++)
				{
					if (Main.rand.Next(3) == 0)
					{
						int num408 = Dust.NewDust(vector2, width, height, 267, 0f, 0f, 0, newColor2);
						Dust dust34 = Main.dust[num408];
						Dust dust334 = dust34;
						dust334.velocity *= Main.rand.NextFloat() * 0.8f;
						Main.dust[num408].noGravity = true;
						Main.dust[num408].scale = Main.rand.NextFloat() * 0.8f;
						Main.dust[num408].fadeIn = Main.rand.NextFloat() * 1.2f * num386;
						dust34 = Main.dust[num408];
						dust334 = dust34;
						dust334.velocity += vector3 * 6f;
						dust34 = Main.dust[num408];
						dust334 = dust34;
						dust334.scale *= num386;
						if (num408 != 6000)
						{
							Dust dust6 = Dust.CloneDust(num408);
							dust34 = dust6;
							dust334 = dust34;
							dust334.scale /= 2f;
							dust34 = dust6;
							dust334 = dust34;
							dust334.fadeIn /= 2f;
							dust6.color = new Color(255, 255, 255, 255);
						}
					}
					else
					{
						Dust dust7 = Dust.NewDustDirect(vector2, width, height, 15, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100);
						Main.rand.Next(2);
						dust7.noGravity = true;
						Dust dust32 = dust7;
						Dust dust334 = dust32;
						dust334.velocity *= 2f;
						dust32 = dust7;
						dust334 = dust32;
						dust334.velocity += vector3 * 9f;
						dust32 = dust7;
						dust334 = dust32;
						dust334.scale *= num386;
						dust7.fadeIn = (0.6f + Main.rand.NextFloat() * 0.4f) * num386;
						dust7.noLightEmittence = (dust7.noLight = true);
					}
				}
			}
			for (int num419 = 0; num419 < 20; num419++)
			{
				Dust dust8 = Dust.NewDustDirect(position, width, height, 15);
				dust8.noGravity = true;
				dust8.velocity = Main.rand.NextVector2Circular(1f, 1f) * 1.5f;
				dust8.scale = 1.2f + Main.rand.NextFloat() * 0.5f;
				dust8.noLightEmittence = (dust8.noLight = true);
				Dust dust36 = dust8;
				Dust dust334 = dust36;
				dust334.velocity += velocity * 0.01f;
				dust36 = dust8;
				dust334 = dust36;
				dust334.position += dust8.velocity * (float)Main.rand.Next(1, 16);
				dust8 = Dust.NewDustDirect(position, width, height, 15, 0f, 0f, 100);
				dust36 = dust8;
				dust334 = dust36;
				dust334.velocity *= 1.2f;
				dust8.noLightEmittence = (dust8.noLight = true);
				dust36 = dust8;
				dust334 = dust36;
				dust334.velocity += velocity * 0.01f;
				dust36 = dust8;
				dust334 = dust36;
				dust334.scale *= 0.8f + Main.rand.NextFloat() * 0.2f;
				dust36 = dust8;
				dust334 = dust36;
				dust334.position += dust8.velocity * (float)Main.rand.Next(1, 16);
			}
		}
		else if (type == 34)
		{
			int newWidth3 = width;
			int newHeight3 = height;
			Resize(96, 96);
			maxPenetrate = -1;
			penetrate = -1;
			Damage();
			Resize(newWidth3, newHeight3);
			SoundEngine.PlaySound(in SoundID.Item10, position);
			Vector2 target5 = base.Center;
			for (int num430 = 0; num430 < oldPos.Length; num430++)
			{
				Vector2 vector4 = oldPos[num430];
				if (vector4 == Vector2.Zero)
				{
					break;
				}
				Color newColor3 = Main.hslToRgb(Main.rand.NextFloat() * (1f / 9f), 1f, 0.5f);
				int num441 = Main.rand.Next(1, 5);
				float num452 = MathHelper.Lerp(0.3f, 1f, Utils.GetLerpValue(oldPos.Length, 0f, num430, clamped: true));
				if ((float)num430 >= (float)oldPos.Length * 0.3f)
				{
					num441--;
				}
				if ((float)num430 >= (float)oldPos.Length * 0.75f)
				{
					num441 -= 2;
				}
				Vector2 vector5 = vector4.DirectionTo(target5).SafeNormalize(Vector2.Zero);
				target5 = vector4;
				for (float num463 = 0f; num463 < (float)num441; num463++)
				{
					if (Main.rand.Next(3) == 0)
					{
						int num475 = Dust.NewDust(vector4, width, height, 267, 0f, 0f, 0, newColor3);
						Dust dust25 = Main.dust[num475];
						Dust dust334 = dust25;
						dust334.velocity *= Main.rand.NextFloat() * 0.8f;
						Main.dust[num475].noGravity = true;
						Main.dust[num475].scale = Main.rand.NextFloat() * 1f;
						Main.dust[num475].fadeIn = Main.rand.NextFloat() * 2f;
						dust25 = Main.dust[num475];
						dust334 = dust25;
						dust334.velocity += vector5 * 8f;
						dust25 = Main.dust[num475];
						dust334 = dust25;
						dust334.scale *= num452;
						if (num475 != 6000)
						{
							Dust dust9 = Dust.CloneDust(num475);
							dust25 = dust9;
							dust334 = dust25;
							dust334.scale /= 2f;
							dust25 = dust9;
							dust334 = dust25;
							dust334.fadeIn /= 2f;
							dust9.color = new Color(255, 255, 255, 255);
						}
					}
					else
					{
						Dust dust10 = Dust.NewDustDirect(vector4, width, height, 6, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100);
						Dust dust20;
						Dust dust334;
						if (Main.rand.Next(2) == 0)
						{
							dust10.noGravity = true;
							dust20 = dust10;
							dust334 = dust20;
							dust334.scale *= 2.5f;
						}
						dust20 = dust10;
						dust334 = dust20;
						dust334.velocity *= 2f;
						dust20 = dust10;
						dust334 = dust20;
						dust334.velocity += vector5 * 6f;
						dust20 = dust10;
						dust334 = dust20;
						dust334.scale *= num452;
						dust10.noLightEmittence = (dust10.noLight = true);
					}
				}
			}
			for (int num486 = 0; num486 < 20; num486++)
			{
				Dust dust11 = Dust.NewDustDirect(position, width, height, 6, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100);
				dust11.noGravity = true;
				dust11.velocity = Main.rand.NextVector2Circular(1f, 1f) * 6f;
				dust11.scale = 1.6f;
				dust11.fadeIn = 1.3f + Main.rand.NextFloat() * 1f;
				dust11.noLightEmittence = (dust11.noLight = true);
				Dust dust30 = dust11;
				Dust dust334 = dust30;
				dust334.velocity += velocity * 0.1f;
				dust11 = Dust.NewDustDirect(position, width, height, 6, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100);
				dust30 = dust11;
				dust334 = dust30;
				dust334.velocity *= 2f;
				dust11.noLightEmittence = (dust11.noLight = true);
				dust30 = dust11;
				dust334 = dust30;
				dust334.velocity += velocity * 0.1f;
			}
		}
		if (type == 873)
		{
			int num497 = 20;
			float num508 = (float)Math.PI * 2f / (float)num497;
			float num519 = velocity.ToRotation();
			Color value10 = AI_171_GetColor();
			for (int num530 = 0; num530 < num497; num530++)
			{
				Dust dust274 = Dust.NewDustPerfect(base.Center, 267);
				dust274.fadeIn = 1f;
				dust274.noGravity = true;
				dust274.alpha = 100;
				dust274.color = Color.Lerp(value10, Color.White, Main.rand.NextFloat() * 0.4f);
				if (num530 % 4 == 0)
				{
					dust274.velocity = num519.ToRotationVector2() * 3.2f;
					dust274.scale = 2.3f;
				}
				else if (num530 % 2 == 0)
				{
					dust274.velocity = num519.ToRotationVector2() * 1.8f;
					dust274.scale = 1.9f;
				}
				else
				{
					dust274.velocity = num519.ToRotationVector2();
					dust274.scale = 1.6f;
				}
				num519 += num508;
				Dust dust82 = dust274;
				Dust dust334 = dust82;
				dust334.velocity += velocity * Main.rand.NextFloat() * 0.5f;
			}
		}
		_ = type;
		if (type == 1012)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num541 = 0; num541 < 40; num541++)
			{
				Vector2 unitY = Vector2.UnitY;
				double radians5 = (float)num541 * ((float)Math.PI * 2f);
				center4 = default(Vector2);
				Vector2 vector6 = unitY.RotatedBy(radians5, center4) * (2f + Main.rand.NextFloat() * 0.5f);
				vector6 += velocity * Main.rand.NextFloat();
				Color white = Color.White;
				if (Main.rand.Next(3) == 0)
				{
					switch (Main.rand.Next(3))
					{
					default:
						((Color)(ref white))._002Ector(176, 64, 36);
						break;
					case 0:
						((Color)(ref white))._002Ector(226, 116, 56);
						break;
					case 1:
						((Color)(ref white))._002Ector(243, 175, 93);
						break;
					case 2:
						((Color)(ref white))._002Ector(254, 210, 146);
						break;
					}
					Dust dust275 = Dust.NewDustDirect(position + Main.rand.NextVector2Circular(18f, 18f) * scale, 2, 2, 284, vector6.X, vector6.Y, 0, white, Main.rand.NextFloat() * 1f + 1f);
					Dust dust86 = dust275;
					Dust dust334 = dust86;
					dust334.position -= velocity;
					dust275.fadeIn = 1f;
				}
				else
				{
					vector6 *= 0.3f;
					Dust dust276 = Dust.NewDustDirect(position + Main.rand.NextVector2Circular(18f, 18f) * scale, 2, 2, 138, vector6.X, vector6.Y, 0, default(Color), Main.rand.NextFloat() * 0.3f + 0.6f);
					Dust dust84 = dust276;
					Dust dust334 = dust84;
					dust334.position -= velocity;
				}
			}
		}
		if (type == 920)
		{
			for (int num552 = 0; num552 < 6; num552++)
			{
				Vector2 unitY2 = Vector2.UnitY;
				double radians6 = (float)num552 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f;
				center4 = default(Vector2);
				Vector2 vector7 = unitY2.RotatedBy(radians6, center4) * (2f + Main.rand.NextFloat() * 0.5f);
				int num563 = Dust.NewDust(position + base.Size * Main.rand.NextVector2Square(0f, 1f), 4, 4, 4, vector7.X, vector7.Y, 80, new Color(78, 136, 255, 150), 1.5f);
				Main.dust[num563].noGravity = true;
			}
		}
		if (type == 921)
		{
			for (int num574 = 0; num574 < 12; num574++)
			{
				Vector2 unitY3 = Vector2.UnitY;
				double radians7 = (float)num574 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f;
				center4 = default(Vector2);
				Vector2 vector8 = unitY3.RotatedBy(radians7, center4) * (3f + Main.rand.NextFloat() * 0.5f);
				int num586 = Dust.NewDust(position + base.Size * Main.rand.NextVector2Square(0f, 1f), 6, 6, 243, vector8.X, vector8.Y, 80, default(Color), 1.5f);
				Main.dust[num586].noGravity = true;
			}
		}
		if (type == 926)
		{
			for (int num597 = 0; num597 < 22; num597++)
			{
				Vector2 unitY4 = Vector2.UnitY;
				double radians8 = (float)num597 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f;
				center4 = default(Vector2);
				Vector2 vector9 = unitY4.RotatedBy(radians8, center4) * (3f + Main.rand.NextFloat() * 0.5f);
				int num608 = Dust.NewDust(position - new Vector2(8f, 8f), width + 16, height + 16, 31, vector9.X, vector9.Y, 40, NPC.AI_121_QueenSlime_GetDustColor(), 1.5f);
				Main.dust[num608].noGravity = true;
			}
		}
		if (type == 937)
		{
			for (int num619 = 0; num619 < 12; num619++)
			{
				Vector2 unitY5 = Vector2.UnitY;
				double radians9 = (float)num619 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f;
				center4 = default(Vector2);
				Vector2 vector10 = unitY5.RotatedBy(radians9, center4) * (3f + Main.rand.NextFloat() * 0.5f);
				int num630 = Dust.NewDust(position - new Vector2(8f, 8f), width + 16, height + 16, 31, vector10.X, vector10.Y, 40, NPC.AI_121_QueenSlime_GetDustColor(), 1.5f);
				Main.dust[num630].noGravity = true;
			}
		}
		if (type == 818)
		{
			for (float num640 = 0f; num640 < 1f; num640 += 0.34f)
			{
				Vector2 val4 = position + base.Size * Main.rand.NextVector2Square(0f, 1f);
				Vector2 unitY6 = Vector2.UnitY;
				double radians10 = num640 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f;
				center4 = default(Vector2);
				Dust.NewDustPerfect(val4, 278, unitY6.RotatedBy(radians10, center4) * (2f + Main.rand.NextFloat() * 0.5f), 150, Color.Lerp(Color.White, Color.Gold, Main.rand.NextFloat()), 0.4f).noGravity = true;
			}
			for (float num651 = 0f; num651 < 1f; num651 += 0.34f)
			{
				Vector2 val5 = position + base.Size * Main.rand.NextVector2Square(0f, 1f);
				Vector2 unitY7 = Vector2.UnitY;
				double radians11 = num651 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f;
				center4 = default(Vector2);
				Dust.NewDustPerfect(val5, 278, unitY7.RotatedBy(radians11, center4) * (1f + Main.rand.NextFloat() * 0.5f), 150, Color.Lerp(Color.White, Main.OurFavoriteColor, Main.rand.NextFloat()), 0.7f).noGravity = true;
			}
		}
		Rectangle val6;
		if (type == 856)
		{
			for (int num662 = 0; num662 < 6; num662++)
			{
				Dust.NewDust(position, width, height, 58, 0f, 0f, 150, default(Color), 0.8f);
			}
			for (float num673 = 0f; num673 < 1f; num673 += 0.34f)
			{
				Vector2 center5 = base.Center;
				Vector2 unitY8 = Vector2.UnitY;
				double radians12 = num673 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f;
				center4 = default(Vector2);
				Dust.NewDustPerfect(center5, 278, unitY8.RotatedBy(radians12, center4) * (4f + Main.rand.NextFloat() * 2f), 150, Color.Lerp(Color.White, Color.HotPink, Main.rand.NextFloat() * 0.5f + 0.5f)).noGravity = true;
			}
			for (float num684 = 0f; num684 < 1f; num684 += 0.34f)
			{
				Vector2 center6 = base.Center;
				Vector2 unitY9 = Vector2.UnitY;
				double radians13 = num684 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f;
				center4 = default(Vector2);
				Dust.NewDustPerfect(center6, 278, unitY9.RotatedBy(radians13, center4) * (2f + Main.rand.NextFloat() * 1f), 150, Color.Lerp(Color.White, Color.Orange, Main.rand.NextFloat() * 0.5f + 0.5f)).noGravity = true;
			}
			Vector2 vector11 = default(Vector2);
			((Vector2)(ref vector11))._002Ector((float)Main.screenWidth, (float)Main.screenHeight);
			val6 = base.Hitbox;
			if (((Rectangle)(ref val6)).Intersects(Utils.CenteredRectangle(Main.screenPosition + vector11 / 2f, vector11 + new Vector2(400f))))
			{
				for (int num696 = 0; num696 < 1; num696++)
				{
					Gore.NewGore(position, Main.rand.NextVector2CircularEdge(0.5f, 0.5f) * 3f, Utils.SelectRandom<int>(Main.rand, 16));
				}
			}
			ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.StellarTune, new ParticleOrchestraSettings
			{
				PositionInWorld = base.Center
			}, owner);
			position = base.Center;
			width = (height = 128);
			base.Center = position;
			maxPenetrate = -1;
			penetrate = -1;
			Damage();
		}
		if (type == 818)
		{
			Damage();
		}
		if (type == 686)
		{
			SoundEngine.PlayTrackedSound(in SoundID.DD2_BetsyFireballImpact, base.Center);
		}
		else if (type == 711)
		{
			SoundEngine.PlayTrackedSound(in SoundID.DD2_BetsysWrathImpact, base.Center);
		}
		else if (type == 704)
		{
			ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
			if (activeSound != null)
			{
				activeSound.Volume = 0f;
				activeSound.Stop();
			}
		}
		if (type == 710)
		{
			ai[1] = -1f;
			position = base.Center;
			width = (height = 40);
			base.Center = position;
			Damage();
			SoundEngine.PlaySound(in SoundID.Item14, position);
			for (int num707 = 0; num707 < 2; num707++)
			{
				int num718 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num718].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
			}
			for (int num729 = 0; num729 < 10; num729++)
			{
				int num740 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.5f);
				Main.dust[num740].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				Main.dust[num740].noGravity = true;
				Dust dust108 = Main.dust[num740];
				Dust dust334 = dust108;
				dust334.velocity *= 2f;
			}
			for (int num751 = 0; num751 < 5; num751++)
			{
				int num762 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
				Dust obj = Main.dust[num762];
				Vector2 center7 = base.Center;
				Vector2 spinningpoint6 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
				double radians14 = velocity.ToRotation();
				center4 = default(Vector2);
				obj.position = center7 + spinningpoint6.RotatedBy(radians14, center4) * (float)width / 2f;
				Main.dust[num762].noGravity = true;
				Dust dust109 = Main.dust[num762];
				Dust dust334 = dust109;
				dust334.velocity *= 2f;
			}
		}
		else if (type == 711)
		{
			Rectangle hitbox = base.Hitbox;
			for (int num773 = 0; num773 < oldPos.Length / 2; num773 += 2)
			{
				hitbox.X = (int)oldPos[num773].X;
				hitbox.Y = (int)oldPos[num773].Y;
				for (int num784 = 0; num784 < 2; num784++)
				{
					int num795 = Utils.SelectRandom<int>(Main.rand, 6, 55, 158);
					int num807 = Dust.NewDust(hitbox.TopLeft(), width, height, num795, direction, -2.5f);
					Main.dust[num807].alpha = 200;
					Dust dust94 = Main.dust[num807];
					Dust dust334 = dust94;
					dust334.velocity *= 2.4f;
					dust94 = Main.dust[num807];
					dust334 = dust94;
					dust334.scale += Main.rand.NextFloat();
					dust94 = Main.dust[num807];
					dust334 = dust94;
					dust334.scale -= 0.5f;
					if (Main.dust[num807].type == 55)
					{
						Main.dust[num807].color = Color.Lerp(new Color(128, 0, 180, 128), Color.Gold, Main.rand.NextFloat());
					}
					Main.dust[num807].noLight = true;
				}
			}
			for (int num818 = 10; num818 < oldPos.Length; num818 += 2)
			{
				hitbox.X = (int)oldPos[num818].X;
				hitbox.Y = (int)oldPos[num818].Y;
				for (int num829 = 0; num829 < 2; num829++)
				{
					if (Main.rand.Next(3) != 0)
					{
						int num840 = Utils.SelectRandom<int>(Main.rand, 55);
						int num851 = Dust.NewDust(hitbox.TopLeft(), width, height, num840, direction, -2.5f);
						Main.dust[num851].alpha = 120;
						Dust dust101 = Main.dust[num851];
						Dust dust334 = dust101;
						dust334.velocity *= 2.4f;
						dust101 = Main.dust[num851];
						dust334 = dust101;
						dust334.scale += Main.rand.NextFloat() * 0.7f;
						dust101 = Main.dust[num851];
						dust334 = dust101;
						dust334.scale -= 0.5f;
						if (Main.dust[num851].type == 55)
						{
							Main.dust[num851].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
						}
						Main.dust[num851].noLight = true;
					}
				}
			}
			for (int num862 = 5; num862 < oldPos.Length; num862++)
			{
				hitbox.X = (int)oldPos[num862].X;
				hitbox.Y = (int)oldPos[num862].Y;
				for (int num873 = 0; num873 < 1; num873++)
				{
					if (Main.rand.Next(3) != 0)
					{
						int num884 = Utils.SelectRandom<int>(Main.rand, 55);
						int num895 = Dust.NewDust(hitbox.TopLeft(), width, height, num884, direction, -2.5f);
						Main.dust[num895].alpha = 80;
						Dust dust104 = Main.dust[num895];
						Dust dust334 = dust104;
						dust334.velocity *= 0.3f;
						dust104 = Main.dust[num895];
						dust334 = dust104;
						dust334.velocity += velocity * 0.5f;
						dust104 = Main.dust[num895];
						dust334 = dust104;
						dust334.scale += Main.rand.NextFloat() * 0.7f;
						dust104 = Main.dust[num895];
						dust334 = dust104;
						dust334.scale -= 0.5f;
						if (Main.dust[num895].type == 55)
						{
							Main.dust[num895].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
						}
						Main.dust[num895].noLight = true;
					}
				}
			}
			for (int num906 = 0; num906 < 20; num906++)
			{
				if (Main.rand.Next(3) != 0)
				{
					int num918 = 228;
					Dust dust277 = Main.dust[Dust.NewDust(position, width, height, num918)];
					dust277.noGravity = true;
					dust277.scale = 1.25f + Main.rand.NextFloat();
					dust277.fadeIn = 1.5f;
					Dust dust105 = dust277;
					Dust dust334 = dust105;
					dust334.velocity *= 6f;
					dust277.noLight = true;
				}
			}
			for (int num929 = 0; num929 < 20; num929++)
			{
				if (Main.rand.Next(3) != 0)
				{
					int num940 = 55;
					Dust dust278 = Main.dust[Dust.NewDust(position, width, height, num940)];
					dust278.noGravity = true;
					dust278.scale = 1.25f + Main.rand.NextFloat();
					dust278.fadeIn = 1.5f;
					Dust dust106 = dust278;
					Dust dust334 = dust106;
					dust334.velocity *= 6f;
					dust278.noLight = true;
					dust278.color = new Color(0, 0, 220, 128);
				}
			}
			if (owner == Main.myPlayer)
			{
				position = base.Center;
				base.Size = new Vector2(140f);
				base.Center = position;
				penetrate = -1;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
				Damage();
			}
		}
		else if (type == 662 || type == 685)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			Vector2 vector13 = oldVelocity.SafeNormalize(Vector2.Zero);
			Vector2 vector14 = position + vector13 * 16f;
			for (int num951 = 0; num951 < 16; num951++)
			{
				if (Main.rand.Next(2) == 0)
				{
					vector14 -= vector13 * 8f;
					continue;
				}
				Dust dust279 = Dust.NewDustDirect(vector14, width, height, 11);
				dust279.position = (dust279.position + base.Center) / 2f;
				Dust dust90 = dust279;
				Dust dust334 = dust90;
				dust334.velocity += oldVelocity * 0.4f;
				dust90 = dust279;
				dust334 = dust90;
				dust334.velocity *= 0.5f;
				dust279.noGravity = true;
				vector14 -= vector13 * 8f;
			}
		}
		if (type == 680)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			Vector2 vector15 = oldVelocity.SafeNormalize(Vector2.Zero);
			Vector2 vector16 = position + vector15 * 16f;
			for (int num965 = 0; num965 < 16; num965++)
			{
				if (Main.rand.Next(2) == 0)
				{
					vector16 -= vector15 * 8f;
					continue;
				}
				Dust dust280 = Dust.NewDustDirect(vector16, width, height, 11);
				dust280.position = (dust280.position + base.Center) / 2f;
				Dust dust114 = dust280;
				Dust dust334 = dust114;
				dust334.velocity += oldVelocity * 0.4f;
				dust114 = dust280;
				dust334 = dust114;
				dust334.velocity *= 0.5f;
				dust280.noGravity = true;
				vector16 -= vector15 * 8f;
			}
			Dust.NewDustDirect(position, width, height, 11, 0f, 0f, 0, Color.Red, 1.6f).noGravity = true;
		}
		if (type == 664 || type == 666 || type == 668 || type == 706)
		{
			int num976 = 4;
			int num987 = 20;
			int num998 = 10;
			int num1009 = 20;
			int num1019 = 20;
			int num3 = 4;
			float num14 = 1.5f;
			int num25 = 6;
			int num35 = 6;
			if (Main.player[owner].setApprenticeT3)
			{
				num976 += 4;
				num1019 += 10;
				num987 += 20;
				num1009 += 30;
				num998 /= 2;
				num3 += 4;
				num14 += 0.5f;
				num25 += 7;
				num35 = 270;
			}
			position = base.Center;
			width = (height = 16 * num25);
			base.Center = position;
			Damage();
			SoundEngine.PlaySound(in SoundID.Item100, position);
			for (int num36 = 0; num36 < num976; num36++)
			{
				int num37 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num37].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
			}
			for (int num38 = 0; num38 < num987; num38++)
			{
				Dust dust281 = Dust.NewDustDirect(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 200, default(Color), 2.5f);
				dust281.position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 10f;
				Dust dust132 = dust281;
				Dust dust334 = dust132;
				dust334.velocity *= 16f;
				if (dust281.velocity.Y > -2f)
				{
					dust281.velocity.Y *= -0.4f;
				}
				dust281.noLight = true;
				dust281.noGravity = true;
			}
			for (int num39 = 0; num39 < num1009; num39++)
			{
				Dust dust282 = Dust.NewDustDirect(new Vector2(position.X, position.Y), width, height, num35, 0f, 0f, 100, default(Color), 1.5f);
				dust282.position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				Dust dust139 = dust282;
				Dust dust334 = dust139;
				dust334.velocity *= 2f;
				dust282.noGravity = true;
				dust282.fadeIn = num14;
			}
			for (int num40 = 0; num40 < num998; num40++)
			{
				int num41 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.7f);
				Dust obj2 = Main.dust[num41];
				Vector2 center8 = base.Center;
				Vector2 spinningpoint7 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
				double radians15 = velocity.ToRotation();
				center4 = default(Vector2);
				obj2.position = center8 + spinningpoint7.RotatedBy(radians15, center4) * (float)width / 2f;
				Main.dust[num41].noGravity = true;
				Dust dust144 = Main.dust[num41];
				Dust dust334 = dust144;
				dust334.velocity *= 3f;
			}
			for (int num43 = 0; num43 < num1019; num43++)
			{
				int num44 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
				Dust obj3 = Main.dust[num44];
				Vector2 center9 = base.Center;
				Vector2 spinningpoint8 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
				double radians16 = velocity.ToRotation();
				center4 = default(Vector2);
				obj3.position = center9 + spinningpoint8.RotatedBy(radians16, center4) * (float)width / 2f;
				Main.dust[num44].noGravity = true;
				Dust dust147 = Main.dust[num44];
				Dust dust334 = dust147;
				dust334.velocity *= 3f;
			}
			for (int num45 = 0; num45 < num3; num45++)
			{
				Vector2 val7 = position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f;
				center4 = default(Vector2);
				int num46 = Gore.NewGore(val7, center4, Main.rand.Next(61, 64));
				Main.gore[num46].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				Gore gore31 = Main.gore[num46];
				Gore gore64 = gore31;
				gore64.position -= Vector2.One * 16f;
				if (Main.rand.Next(2) == 0)
				{
					Main.gore[num46].position.Y -= 30f;
				}
				gore31 = Main.gore[num46];
				gore64 = gore31;
				gore64.velocity *= 0.3f;
				Main.gore[num46].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num46].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
		}
		else if (type == 681)
		{
			position.X += width / 2;
			position.Y += height / 2;
			SoundEngine.PlaySound(in SoundID.DD2_GoblinBomb, position);
			width = 22;
			height = 22;
			position.X -= width / 2;
			position.Y -= height / 2;
			for (int num47 = 0; num47 < 10; num47++)
			{
				int num48 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Dust dust117 = Main.dust[num48];
				Dust dust334 = dust117;
				dust334.velocity *= 1.4f;
				num48 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
				dust117 = Main.dust[num48];
				dust334 = dust117;
				dust334.velocity *= 1.4f;
				Main.dust[num48].noGravity = true;
				Main.dust[num48].fadeIn = 2f;
			}
			for (int num49 = 0; num49 < 10; num49++)
			{
				int num50 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
				Main.dust[num50].noGravity = true;
				Dust dust121 = Main.dust[num50];
				Dust dust334 = dust121;
				dust334.velocity *= 5f;
				num50 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
				dust121 = Main.dust[num50];
				dust334 = dust121;
				dust334.velocity *= 3f;
			}
			Vector2 val8 = new Vector2(position.X, position.Y);
			center4 = default(Vector2);
			int num51 = Gore.NewGore(val8, center4, Main.rand.Next(61, 64));
			Gore gore21 = Main.gore[num51];
			Gore gore64 = gore21;
			gore64.velocity *= 0.4f;
			Main.gore[num51].velocity.X += 1f;
			Main.gore[num51].velocity.Y += 1f;
			Vector2 val9 = new Vector2(position.X, position.Y);
			center4 = default(Vector2);
			num51 = Gore.NewGore(val9, center4, Main.rand.Next(61, 64));
			gore21 = Main.gore[num51];
			gore64 = gore21;
			gore64.velocity *= 0.4f;
			Main.gore[num51].velocity.X -= 1f;
			Main.gore[num51].velocity.Y += 1f;
			Vector2 val10 = new Vector2(position.X, position.Y);
			center4 = default(Vector2);
			num51 = Gore.NewGore(val10, center4, Main.rand.Next(61, 64));
			gore21 = Main.gore[num51];
			gore64 = gore21;
			gore64.velocity *= 0.4f;
			Main.gore[num51].velocity.X += 1f;
			Main.gore[num51].velocity.Y -= 1f;
			Vector2 val11 = new Vector2(position.X, position.Y);
			center4 = default(Vector2);
			num51 = Gore.NewGore(val11, center4, Main.rand.Next(61, 64));
			gore21 = Main.gore[num51];
			gore64 = gore21;
			gore64.velocity *= 0.4f;
			Main.gore[num51].velocity.X -= 1f;
			Main.gore[num51].velocity.Y -= 1f;
			position.X += width / 2;
			position.Y += height / 2;
			width = 80;
			height = 80;
			position.X -= width / 2;
			position.Y -= height / 2;
			Damage();
		}
		if (type == 669)
		{
			SoundEngine.PlaySound(13, (int)position.X, (int)position.Y);
			Vector2 vector17 = default(Vector2);
			((Vector2)(ref vector17))._002Ector(20f, 20f);
			for (int num52 = 0; num52 < 10; num52++)
			{
				Dust dust283 = Dust.NewDustDirect(base.Center - vector17 / 2f, (int)vector17.X, (int)vector17.Y, 4, 0f, 0f, 100, new Color(255, 255, 255, 110), 1.1f);
				Dust dust155 = dust283;
				Dust dust334 = dust155;
				dust334.velocity *= 1.4f;
			}
			for (int num54 = 0; num54 < 40; num54++)
			{
				Dust dust285 = Dust.NewDustDirect(base.Center - vector17 / 2f, (int)vector17.X, (int)vector17.Y, 4, 0f, 0f, 50, new Color(245, 200, 30, 155), 1.2f);
				dust285.noGravity = true;
				Dust dust158 = dust285;
				Dust dust334 = dust158;
				dust334.velocity *= 4f;
				dust285 = Dust.NewDustDirect(base.Center - vector17 / 2f, (int)vector17.X, (int)vector17.Y, 4, 0f, 0f, 50, new Color(245, 200, 30, 155), 0.8f);
				dust158 = dust285;
				dust334 = dust158;
				dust334.velocity *= 2f;
			}
		}
		if (Main.myPlayer == owner && bobber)
		{
			PopupText.ClearSonarText();
			if (ai[1] > 0f)
			{
				AI_061_FishingBobber_GiveItemToPlayer(Main.player[owner], (int)ai[1]);
			}
			ai[1] = 0f;
		}
		if (type == 634 || type == 635)
		{
			int num55 = Utils.SelectRandom<int>(Main.rand, 242, 73, 72, 71, 255);
			int num56 = 255;
			int num57 = 255;
			int num58 = 50;
			float num59 = 1.7f;
			float num60 = 0.8f;
			float num61 = 2f;
			Vector2 vector18 = (rotation - (float)Math.PI / 2f).ToRotationVector2();
			Vector2 vector19 = vector18 * ((Vector2)(ref velocity)).Length() * (float)MaxUpdates;
			if (type == 635)
			{
				num56 = 88;
				num57 = 88;
				num55 = Utils.SelectRandom<int>(Main.rand, 242, 59, 88);
				num59 = 3.7f;
				num60 = 1.5f;
				num61 = 2.2f;
				vector19 *= 0.5f;
			}
			SoundEngine.PlaySound(in SoundID.Item14, position);
			position = base.Center;
			width = (height = num58);
			base.Center = position;
			maxPenetrate = -1;
			penetrate = -1;
			Damage();
			for (int num62 = 0; num62 < 40; num62++)
			{
				num55 = Utils.SelectRandom<int>(Main.rand, 242, 73, 72, 71, 255);
				if (type == 635)
				{
					num55 = Utils.SelectRandom<int>(Main.rand, 242, 59, 88);
				}
				int num63 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num55, 0f, 0f, 200, default(Color), num59);
				Main.dust[num63].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				Main.dust[num63].noGravity = true;
				Dust dust162 = Main.dust[num63];
				Dust dust334 = dust162;
				dust334.velocity *= 3f;
				dust162 = Main.dust[num63];
				dust334 = dust162;
				dust334.velocity += vector19 * Main.rand.NextFloat();
				num63 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num56, 0f, 0f, 100, default(Color), num60);
				Main.dust[num63].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				dust162 = Main.dust[num63];
				dust334 = dust162;
				dust334.velocity *= 2f;
				Main.dust[num63].noGravity = true;
				Main.dust[num63].fadeIn = 1f;
				Main.dust[num63].color = Color.Crimson * 0.5f;
				dust162 = Main.dust[num63];
				dust334 = dust162;
				dust334.velocity += vector19 * Main.rand.NextFloat();
			}
			for (int num65 = 0; num65 < 20; num65++)
			{
				int num66 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num57, 0f, 0f, 0, default(Color), num61);
				Dust obj4 = Main.dust[num66];
				Vector2 center10 = base.Center;
				Vector2 spinningpoint9 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
				double radians17 = velocity.ToRotation();
				center4 = default(Vector2);
				obj4.position = center10 + spinningpoint9.RotatedBy(radians17, center4) * (float)width / 3f;
				Main.dust[num66].noGravity = true;
				Dust dust163 = Main.dust[num66];
				Dust dust334 = dust163;
				dust334.velocity *= 0.5f;
				dust163 = Main.dust[num66];
				dust334 = dust163;
				dust334.velocity += vector19 * (0.6f + 0.6f * Main.rand.NextFloat());
			}
		}
		else if (type == 651)
		{
			if (localAI[0] == 1f && owner == Main.myPlayer)
			{
				Player master = Main.player[owner];
				Point ps = Utils.ToPoint(new Vector2(ai[0], ai[1]));
				Point pe = base.Center.ToTileCoordinates();
				if (Main.netMode == 1)
				{
					NetMessage.SendData(109, -1, -1, null, ps.X, ps.Y, pe.X, pe.Y, (int)WiresUI.Settings.ToolMode);
				}
				else
				{
					Wiring.MassWireOperation(ps, pe, master);
				}
			}
		}
		else if (type == 641)
		{
			if (owner == Main.myPlayer)
			{
				for (int num67 = 0; num67 < 1000; num67++)
				{
					if (Main.projectile[num67].active && Main.projectile[num67].owner == owner && Main.projectile[num67].type == 642)
					{
						Main.projectile[num67].Kill();
					}
				}
			}
		}
		else if (type == 643)
		{
			if (owner == Main.myPlayer)
			{
				for (int num68 = 0; num68 < 1000; num68++)
				{
					if (Main.projectile[num68].active && Main.projectile[num68].owner == owner && Main.projectile[num68].type == 644)
					{
						Main.projectile[num68].Kill();
					}
				}
			}
		}
		else if (type == 645)
		{
			bool flag2 = WorldGen.SolidTile(Framing.GetTileSafely((int)position.X / 16, (int)position.Y / 16));
			for (int num69 = 0; num69 < 4; num69++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
			}
			for (int num70 = 0; num70 < 4; num70++)
			{
				int num71 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 0, default(Color), 2.5f);
				Main.dust[num71].noGravity = true;
				Dust dust161 = Main.dust[num71];
				Dust dust334 = dust161;
				dust334.velocity *= 3f;
				if (flag2)
				{
					Main.dust[num71].noLight = true;
				}
				num71 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 100, default(Color), 1.5f);
				dust161 = Main.dust[num71];
				dust334 = dust161;
				dust334.velocity *= 2f;
				Main.dust[num71].noGravity = true;
				if (flag2)
				{
					Main.dust[num71].noLight = true;
				}
			}
			for (int num72 = 0; num72 < 1; num72++)
			{
				Vector2 val12 = position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f;
				center4 = default(Vector2);
				int num73 = Gore.NewGore(val12, center4, Main.rand.Next(61, 64));
				Gore gore34 = Main.gore[num73];
				Gore gore64 = gore34;
				gore64.velocity *= 0.3f;
				Main.gore[num73].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num73].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
		}
		else if (type == 636)
		{
			Rectangle hitbox2 = base.Hitbox;
			for (int num74 = 0; num74 < 6; num74 += 3)
			{
				hitbox2.X = (int)oldPos[num74].X;
				hitbox2.Y = (int)oldPos[num74].Y;
				for (int num76 = 0; num76 < 5; num76++)
				{
					int num77 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
					int num78 = Dust.NewDust(hitbox2.TopLeft(), width, height, num77, 2.5f * (float)direction, -2.5f);
					Main.dust[num78].alpha = 200;
					Dust dust160 = Main.dust[num78];
					Dust dust334 = dust160;
					dust334.velocity *= 2.4f;
					dust160 = Main.dust[num78];
					dust334 = dust160;
					dust334.scale += Main.rand.NextFloat();
				}
			}
			if (Main.myPlayer == owner)
			{
				NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 953, damage, 10f, owner, 0f, 0.85f + Main.rand.NextFloat() * 1.15f);
			}
		}
		else if (type == 614)
		{
			for (int num79 = 0; num79 < 10; num79++)
			{
				Dust dust286 = Main.dust[Dust.NewDust(position, width, height, 229)];
				dust286.noGravity = true;
				Dust dust159 = dust286;
				Dust dust334 = dust159;
				dust334.velocity *= 3f;
			}
		}
		if (type == 644)
		{
			DoRainbowCrystalStaffExplosion();
			if (Main.myPlayer == owner)
			{
				friendly = true;
				int num80 = width;
				int num81 = height;
				int num82 = penetrate;
				position = base.Center;
				width = (height = 60);
				base.Center = position;
				penetrate = -1;
				maxPenetrate = -1;
				Damage();
				penetrate = num82;
				position = base.Center;
				width = num80;
				height = num81;
				base.Center = position;
			}
		}
		if (type == 608)
		{
			maxPenetrate = -1;
			penetrate = -1;
			Damage();
			SoundEngine.PlaySound(in SoundID.Item14, position);
			for (int num83 = 0; num83 < 4; num83++)
			{
				int num84 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num84].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
			}
			for (int num85 = 0; num85 < 30; num85++)
			{
				int num87 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 200, default(Color), 3.7f);
				Main.dust[num87].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				Main.dust[num87].noGravity = true;
				Dust dust173 = Main.dust[num87];
				Dust dust334 = dust173;
				dust334.velocity *= 3f;
				Main.dust[num87].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].ArmorSetDye(), Main.player[owner]);
				num87 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num87].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				dust173 = Main.dust[num87];
				dust334 = dust173;
				dust334.velocity *= 2f;
				Main.dust[num87].noGravity = true;
				Main.dust[num87].fadeIn = 2.5f;
				Main.dust[num87].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].ArmorSetDye(), Main.player[owner]);
			}
			for (int num88 = 0; num88 < 10; num88++)
			{
				int num89 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.7f);
				Dust obj5 = Main.dust[num89];
				Vector2 center11 = base.Center;
				Vector2 spinningpoint10 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
				double radians18 = velocity.ToRotation();
				center4 = default(Vector2);
				obj5.position = center11 + spinningpoint10.RotatedBy(radians18, center4) * (float)width / 2f;
				Main.dust[num89].noGravity = true;
				Dust dust174 = Main.dust[num89];
				Dust dust334 = dust174;
				dust334.velocity *= 3f;
				Main.dust[num89].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].ArmorSetDye(), Main.player[owner]);
			}
			for (int num90 = 0; num90 < 10; num90++)
			{
				int num91 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
				Dust obj6 = Main.dust[num91];
				Vector2 center12 = base.Center;
				Vector2 spinningpoint11 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
				double radians19 = velocity.ToRotation();
				center4 = default(Vector2);
				obj6.position = center12 + spinningpoint11.RotatedBy(radians19, center4) * (float)width / 2f;
				Main.dust[num91].noGravity = true;
				Dust dust175 = Main.dust[num91];
				Dust dust334 = dust175;
				dust334.velocity *= 3f;
			}
			for (int num92 = 0; num92 < 2; num92++)
			{
				Vector2 val13 = position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f;
				center4 = default(Vector2);
				int num93 = Gore.NewGore(val13, center4, Main.rand.Next(61, 64));
				Main.gore[num93].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				Gore gore36 = Main.gore[num93];
				Gore gore64 = gore36;
				gore64.velocity *= 0.3f;
				Main.gore[num93].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num93].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
		}
		else if (type == 661)
		{
			position = base.Center;
			width = (height = 160);
			base.Center = position;
			maxPenetrate = -1;
			penetrate = -1;
			Damage();
			SoundEngine.PlaySound(in SoundID.Item14, position);
			Vector2 vector20 = base.Center + Vector2.One * -20f;
			int num94 = 40;
			int num95 = num94;
			for (int num96 = 0; num96 < 4; num96++)
			{
				int num98 = Dust.NewDust(vector20, num94, num95, 240, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num98].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)num94 / 2f;
			}
			for (int num99 = 0; num99 < 20; num99++)
			{
				int num100 = Dust.NewDust(vector20, num94, num95, 62, 0f, 0f, 200, default(Color), 3.7f);
				Main.dust[num100].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)num94 / 2f;
				Main.dust[num100].noGravity = true;
				Main.dust[num100].noLight = true;
				Dust dust170 = Main.dust[num100];
				Dust dust334 = dust170;
				dust334.velocity *= 3f;
				dust170 = Main.dust[num100];
				dust334 = dust170;
				dust334.velocity += DirectionTo(Main.dust[num100].position) * (2f + Main.rand.NextFloat() * 4f);
				num100 = Dust.NewDust(vector20, num94, num95, 62, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num100].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)num94 / 2f;
				dust170 = Main.dust[num100];
				dust334 = dust170;
				dust334.velocity *= 2f;
				Main.dust[num100].noGravity = true;
				Main.dust[num100].fadeIn = 1f;
				Main.dust[num100].color = Color.Crimson * 0.5f;
				Main.dust[num100].noLight = true;
				dust170 = Main.dust[num100];
				dust334 = dust170;
				dust334.velocity += DirectionTo(Main.dust[num100].position) * 8f;
			}
			for (int num101 = 0; num101 < 20; num101++)
			{
				int num102 = Dust.NewDust(vector20, num94, num95, 62, 0f, 0f, 0, default(Color), 2.7f);
				Dust obj7 = Main.dust[num102];
				Vector2 center13 = base.Center;
				Vector2 spinningpoint12 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
				double radians20 = velocity.ToRotation();
				center4 = default(Vector2);
				obj7.position = center13 + spinningpoint12.RotatedBy(radians20, center4) * (float)num94 / 2f;
				Main.dust[num102].noGravity = true;
				Main.dust[num102].noLight = true;
				Dust dust171 = Main.dust[num102];
				Dust dust334 = dust171;
				dust334.velocity *= 3f;
				dust171 = Main.dust[num102];
				dust334 = dust171;
				dust334.velocity += DirectionTo(Main.dust[num102].position) * 2f;
			}
			for (int num103 = 0; num103 < 70; num103++)
			{
				int num104 = Dust.NewDust(vector20, num94, num95, 240, 0f, 0f, 0, default(Color), 1.5f);
				Dust obj8 = Main.dust[num104];
				Vector2 center14 = base.Center;
				Vector2 spinningpoint13 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
				double radians21 = velocity.ToRotation();
				center4 = default(Vector2);
				obj8.position = center14 + spinningpoint13.RotatedBy(radians21, center4) * (float)num94 / 2f;
				Main.dust[num104].noGravity = true;
				Dust dust172 = Main.dust[num104];
				Dust dust334 = dust172;
				dust334.velocity *= 3f;
				dust172 = Main.dust[num104];
				dust334 = dust172;
				dust334.velocity += DirectionTo(Main.dust[num104].position) * 3f;
			}
		}
		else if (type == 617)
		{
			position = base.Center;
			width = (height = 176);
			base.Center = position;
			maxPenetrate = -1;
			penetrate = -1;
			Damage();
			SoundEngine.PlaySound(in SoundID.Item14, position);
			for (int num105 = 0; num105 < 4; num105++)
			{
				int num106 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 240, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num106].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
			}
			for (int num107 = 0; num107 < 30; num107++)
			{
				int num109 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 62, 0f, 0f, 200, default(Color), 3.7f);
				Main.dust[num109].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				Main.dust[num109].noGravity = true;
				Dust dust167 = Main.dust[num109];
				Dust dust334 = dust167;
				dust334.velocity *= 3f;
				num109 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 90, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num109].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				dust167 = Main.dust[num109];
				dust334 = dust167;
				dust334.velocity *= 2f;
				Main.dust[num109].noGravity = true;
				Main.dust[num109].fadeIn = 1f;
				Main.dust[num109].color = Color.Crimson * 0.5f;
			}
			for (int num110 = 0; num110 < 10; num110++)
			{
				int num111 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 62, 0f, 0f, 0, default(Color), 2.7f);
				Dust obj9 = Main.dust[num111];
				Vector2 center15 = base.Center;
				Vector2 spinningpoint14 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
				double radians22 = velocity.ToRotation();
				center4 = default(Vector2);
				obj9.position = center15 + spinningpoint14.RotatedBy(radians22, center4) * (float)width / 2f;
				Main.dust[num111].noGravity = true;
				Dust dust168 = Main.dust[num111];
				Dust dust334 = dust168;
				dust334.velocity *= 3f;
			}
			for (int num112 = 0; num112 < 10; num112++)
			{
				int num113 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 240, 0f, 0f, 0, default(Color), 1.5f);
				Dust obj10 = Main.dust[num113];
				Vector2 center16 = base.Center;
				Vector2 spinningpoint15 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
				double radians23 = velocity.ToRotation();
				center4 = default(Vector2);
				obj10.position = center16 + spinningpoint15.RotatedBy(radians23, center4) * (float)width / 2f;
				Main.dust[num113].noGravity = true;
				Dust dust169 = Main.dust[num113];
				Dust dust334 = dust169;
				dust334.velocity *= 3f;
			}
			for (int num114 = 0; num114 < 2; num114++)
			{
				Vector2 val14 = position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f;
				center4 = default(Vector2);
				int num115 = Gore.NewGore(val14, center4, Main.rand.Next(61, 64));
				Main.gore[num115].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				Gore gore35 = Main.gore[num115];
				Gore gore64 = gore35;
				gore64.velocity *= 0.3f;
				Main.gore[num115].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num115].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
			if (Main.myPlayer == owner)
			{
				for (int num116 = 0; num116 < 1000; num116++)
				{
					if (Main.projectile[num116].active && Main.projectile[num116].type == 618 && Main.projectile[num116].ai[1] == (float)whoAmI)
					{
						Main.projectile[num116].Kill();
					}
				}
				int num117 = Main.rand.Next(5, 9);
				int num118 = Main.rand.Next(5, 9);
				int num120 = Utils.SelectRandom<int>(Main.rand, 86, 90);
				int num121 = ((num120 == 86) ? 90 : 86);
				Vector2 vector22 = default(Vector2);
				for (int num122 = 0; num122 < num117; num122++)
				{
					Vector2 vector21 = base.Center + Utils.RandomVector2(Main.rand, -30f, 30f);
					((Vector2)(ref vector22))._002Ector((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
					while (vector22.X == 0f && vector22.Y == 0f)
					{
						((Vector2)(ref vector22))._002Ector((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
					}
					((Vector2)(ref vector22)).Normalize();
					if (vector22.Y > 0.2f)
					{
						vector22.Y *= -1f;
					}
					vector22 *= (float)Main.rand.Next(70, 101) * 0.1f;
					NewProjectile(GetProjectileSource_FromThis(), vector21.X, vector21.Y, vector22.X, vector22.Y, 620, (int)((double)damage * 0.65), knockBack * 0.8f, owner, num120);
				}
				Vector2 vector25 = default(Vector2);
				for (int num123 = 0; num123 < num118; num123++)
				{
					Vector2 vector24 = base.Center + Utils.RandomVector2(Main.rand, -30f, 30f);
					((Vector2)(ref vector25))._002Ector((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
					while (vector25.X == 0f && vector25.Y == 0f)
					{
						((Vector2)(ref vector25))._002Ector((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
					}
					((Vector2)(ref vector25)).Normalize();
					if (vector25.Y > 0.4f)
					{
						vector25.Y *= -1f;
					}
					vector25 *= (float)Main.rand.Next(40, 81) * 0.1f;
					NewProjectile(GetProjectileSource_FromThis(), vector24.X, vector24.Y, vector25.X, vector25.Y, 620, (int)((double)damage * 0.65), knockBack * 0.8f, owner, num121);
				}
			}
		}
		else if (type == 658)
		{
			for (int num124 = 0; num124 < 10; num124++)
			{
				int num125 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 269, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.5f);
				Dust dust166;
				Dust dust334;
				if (Main.rand.Next(3) == 0)
				{
					Main.dust[num125].fadeIn = 0.75f + (float)Main.rand.Next(-10, 11) * 0.01f;
					Main.dust[num125].scale = 0.25f + (float)Main.rand.Next(-10, 11) * 0.005f;
					dust166 = Main.dust[num125];
					dust334 = dust166;
					dust334.type++;
				}
				else
				{
					Main.dust[num125].scale = 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
				}
				Main.dust[num125].noGravity = true;
				dust166 = Main.dust[num125];
				dust334 = dust166;
				dust334.velocity *= 1.25f;
				dust166 = Main.dust[num125];
				dust334 = dust166;
				dust334.velocity -= oldVelocity / 10f;
			}
		}
		else if (type == 620 || type == 618)
		{
			if (type == 618)
			{
				ai[0] = 86f;
			}
			for (int num126 = 0; num126 < 10; num126++)
			{
				int num127 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, (int)ai[0], velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.5f);
				Dust dust165;
				Dust dust334;
				if (Main.rand.Next(3) == 0)
				{
					Main.dust[num127].fadeIn = 0.75f + (float)Main.rand.Next(-10, 11) * 0.01f;
					Main.dust[num127].scale = 0.25f + (float)Main.rand.Next(-10, 11) * 0.005f;
					dust165 = Main.dust[num127];
					dust334 = dust165;
					dust334.type++;
				}
				else
				{
					Main.dust[num127].scale = 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
				}
				Main.dust[num127].noGravity = true;
				dust165 = Main.dust[num127];
				dust334 = dust165;
				dust334.velocity *= 1.25f;
				dust165 = Main.dust[num127];
				dust334 = dust165;
				dust334.velocity -= oldVelocity / 10f;
			}
		}
		else if (type == 619)
		{
			SoundEngine.PlaySound(in SoundID.Item50, position);
			for (int num128 = 0; num128 < 20; num128++)
			{
				int num129 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, (int)ai[0], velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.5f);
				Dust dust164;
				Dust dust334;
				if (Main.rand.Next(3) == 0)
				{
					Main.dust[num129].fadeIn = 1.1f + (float)Main.rand.Next(-10, 11) * 0.01f;
					Main.dust[num129].scale = 0.35f + (float)Main.rand.Next(-10, 11) * 0.01f;
					dust164 = Main.dust[num129];
					dust334 = dust164;
					dust334.type++;
				}
				else
				{
					Main.dust[num129].scale = 1.2f + (float)Main.rand.Next(-10, 11) * 0.01f;
				}
				Main.dust[num129].noGravity = true;
				dust164 = Main.dust[num129];
				dust334 = dust164;
				dust334.velocity *= 2.5f;
				dust164 = Main.dust[num129];
				dust334 = dust164;
				dust334.velocity -= oldVelocity / 10f;
			}
			if (Main.myPlayer == owner)
			{
				int num131 = Main.rand.Next(3, 6);
				Vector2 vector26 = default(Vector2);
				for (int num132 = 0; num132 < num131; num132++)
				{
					((Vector2)(ref vector26))._002Ector((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
					while (vector26.X == 0f && vector26.Y == 0f)
					{
						((Vector2)(ref vector26))._002Ector((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
					}
					((Vector2)(ref vector26)).Normalize();
					vector26 *= (float)Main.rand.Next(70, 101) * 0.1f;
					NewProjectile(GetProjectileSource_FromThis(), oldPosition.X + (float)(width / 2), oldPosition.Y + (float)(height / 2), vector26.X, vector26.Y, 620, (int)((double)damage * 0.8), knockBack * 0.8f, owner, ai[0]);
				}
			}
		}
		if (type == 601)
		{
			Color portalColor = PortalHelper.GetPortalColor(owner, (int)ai[0]);
			Color color = portalColor;
			((Color)(ref color)).A = byte.MaxValue;
			for (int num133 = 0; num133 < 6; num133++)
			{
				Vector2 vector27 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (3f * Main.rand.NextFloat());
				Dust dust287 = Main.dust[Dust.NewDust(base.Center, 0, 0, 263)];
				dust287.position = base.Center;
				dust287.velocity = vector27 + velocity / 5f;
				dust287.color = color;
				dust287.scale = 2f;
				dust287.noLight = true;
				dust287.noGravity = true;
			}
		}
		if (type == 596)
		{
			position = base.Center;
			width = (height = 60);
			base.Center = position;
			int num134 = 30;
			if (Main.expertMode)
			{
				num134 = 22;
			}
			damage = num134;
			Damage();
			SoundEngine.PlaySound(in SoundID.Item14, position);
			for (int num135 = 0; num135 < 4; num135++)
			{
				int num136 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num136].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
			}
			for (int num137 = 0; num137 < 20; num137++)
			{
				int num138 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, 0f, 0f, 0, default(Color), 2.5f);
				Main.dust[num138].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				Main.dust[num138].noGravity = true;
				Dust dust176 = Main.dust[num138];
				Dust dust334 = dust176;
				dust334.velocity *= 2f;
			}
			for (int num139 = 0; num139 < 10; num139++)
			{
				int num140 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
				Dust obj11 = Main.dust[num140];
				Vector2 center17 = base.Center;
				Vector2 spinningpoint16 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
				double radians24 = velocity.ToRotation();
				center4 = default(Vector2);
				obj11.position = center17 + spinningpoint16.RotatedBy(radians24, center4) * (float)width / 2f;
				Main.dust[num140].noGravity = true;
				Dust dust177 = Main.dust[num140];
				Dust dust334 = dust177;
				dust334.velocity *= 2f;
			}
		}
		if (type == 659)
		{
			if (ai[0] >= 0f)
			{
				int num143 = 80;
				position = base.Center;
				width = (height = num143);
				base.Center = position;
				Damage();
				SoundEngine.PlaySound(in SoundID.Item14, position);
				int num144 = 15;
				int num145 = num144 + 15;
				for (int num146 = 0; num146 < num145; num146++)
				{
					int num147 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, 0f, 0f, 0, default(Color), 2f + Main.rand.NextFloat() * 0.5f);
					Main.dust[num147].noGravity = true;
					if (num146 < num144)
					{
						float num148 = (float)(num146 + 1) / (float)num144 * ((float)Math.PI * 2f);
						Main.dust[num147].fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
						Main.dust[num147].position = base.Center;
						Dust obj12 = Main.dust[num147];
						Vector2 unitY10 = Vector2.UnitY;
						double radians25 = num148;
						center4 = default(Vector2);
						obj12.velocity = unitY10.RotatedBy(radians25, center4) * (5f + Main.rand.NextFloat() * 1.5f);
					}
					else
					{
						Main.dust[num147].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * Main.rand.NextFloat() * (float)width / 3f;
						Main.dust[num147].fadeIn = 0.5f + Main.rand.NextFloat() * 0.5f;
						Dust dust178 = Main.dust[num147];
						Dust dust334 = dust178;
						dust334.velocity *= 2f;
					}
				}
				for (int num149 = 0; num149 < 10; num149++)
				{
					int num150 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Dust obj13 = Main.dust[num150];
					Vector2 center18 = base.Center;
					Vector2 spinningpoint17 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
					double radians26 = velocity.ToRotation();
					center4 = default(Vector2);
					obj13.position = center18 + spinningpoint17.RotatedBy(radians26, center4) * (float)width / 3f;
					Main.dust[num150].fadeIn = 0.5f + Main.rand.NextFloat() * 0.5f;
					Main.dust[num150].noGravity = true;
					Dust dust179 = Main.dust[num150];
					Dust dust334 = dust179;
					dust334.velocity *= 1.5f;
				}
			}
		}
		else if (type >= 625 && type <= 628)
		{
			for (int num151 = 0; num151 < 6; num151++)
			{
				int num152 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100, default(Color), 2f);
				Main.dust[num152].noGravity = true;
				Main.dust[num152].noLight = true;
			}
		}
		if (type == 631)
		{
			int num154 = Main.rand.Next(5, 10);
			for (int num155 = 0; num155 < num154; num155++)
			{
				int num156 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100);
				Dust dust180 = Main.dust[num156];
				Dust dust334 = dust180;
				dust334.velocity *= 1.6f;
				Main.dust[num156].velocity.Y -= 1f;
				dust180 = Main.dust[num156];
				dust334 = dust180;
				dust334.position -= Vector2.One * 4f;
				Main.dust[num156].position = Vector2.Lerp(Main.dust[num156].position, base.Center, 0.5f);
				Main.dust[num156].noGravity = true;
			}
		}
		if (type == 539)
		{
			position = base.Center;
			width = (height = 80);
			base.Center = position;
			Damage();
			SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 7);
			for (int num157 = 0; num157 < 4; num157++)
			{
				int num158 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num158].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
			}
			for (int num159 = 0; num159 < 20; num159++)
			{
				int num160 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 176, 0f, 0f, 200, default(Color), 3.7f);
				Main.dust[num160].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				Main.dust[num160].noGravity = true;
				Dust dust201 = Main.dust[num160];
				Dust dust334 = dust201;
				dust334.velocity *= 3f;
			}
			for (int num161 = 0; num161 < 20; num161++)
			{
				int num162 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 180, 0f, 0f, 0, default(Color), 2.7f);
				Dust obj14 = Main.dust[num162];
				Vector2 center19 = base.Center;
				Vector2 spinningpoint18 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
				double radians27 = velocity.ToRotation();
				center4 = default(Vector2);
				obj14.position = center19 + spinningpoint18.RotatedBy(radians27, center4) * (float)width / 2f;
				Main.dust[num162].noGravity = true;
				Dust dust202 = Main.dust[num162];
				Dust dust334 = dust202;
				dust334.velocity *= 3f;
			}
			for (int num163 = 0; num163 < 10; num163++)
			{
				int num165 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
				Dust obj15 = Main.dust[num165];
				Vector2 center20 = base.Center;
				Vector2 spinningpoint19 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
				double radians28 = velocity.ToRotation();
				center4 = default(Vector2);
				obj15.position = center20 + spinningpoint19.RotatedBy(radians28, center4) * (float)width / 2f;
				Main.dust[num165].noGravity = true;
				Dust dust205 = Main.dust[num165];
				Dust dust334 = dust205;
				dust334.velocity *= 3f;
			}
		}
		else if (type == 585)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y, 27);
			for (int num166 = 0; num166 < 20; num166++)
			{
				int num167 = Dust.NewDust(position, width, height, 26, 0f, 0f, 100);
				Main.dust[num167].noGravity = true;
				Dust dust200 = Main.dust[num167];
				Dust dust334 = dust200;
				dust334.velocity *= 1.2f;
				Main.dust[num167].scale = 1.3f;
				dust200 = Main.dust[num167];
				dust334 = dust200;
				dust334.velocity -= oldVelocity * 0.3f;
				num167 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, 27, 0f, 0f, 100, default(Color), 2f);
				Main.dust[num167].noGravity = true;
				dust200 = Main.dust[num167];
				dust334 = dust200;
				dust334.velocity *= 3f;
			}
		}
		else if (type == 590)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y, 27);
			int num168 = 165;
			if (ai[2] == 1f)
			{
				num168 = 31;
			}
			for (int num169 = 0; num169 < 10; num169++)
			{
				int num170 = Dust.NewDust(position, width, height, num168, 0f, 0f, 50, default(Color), 1.5f);
				Dust dust197 = Main.dust[num170];
				Dust dust334 = dust197;
				dust334.velocity *= 2f;
				Main.dust[num170].noGravity = true;
			}
			float num171 = 0.6f + Main.rand.NextFloat() * 0.4f;
			int num172 = 375;
			if (ai[2] == 1f)
			{
				num172 = 61;
			}
			int num173 = Gore.NewGore(position, Vector2.Zero, num172, num171);
			Gore gore38 = Main.gore[num173];
			Gore gore64 = gore38;
			gore64.velocity *= 0.3f;
			num173 = Gore.NewGore(position, Vector2.Zero, num172 + 1, num171);
			gore38 = Main.gore[num173];
			gore64 = gore38;
			gore64.velocity *= 0.3f;
			num173 = Gore.NewGore(position, Vector2.Zero, num172 + 2, num171);
			gore38 = Main.gore[num173];
			gore64 = gore38;
			gore64.velocity *= 0.3f;
		}
		else if (type == 587)
		{
			Color newColor4 = Main.hslToRgb(ai[1], 1f, 0.5f);
			((Color)(ref newColor4)).A = 200;
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num174 = 0; num174 < 10; num174++)
			{
				int num176 = Dust.NewDust(position, width, height, 76, 0f, 0f, 0, newColor4);
				Main.dust[num176].noGravity = true;
				Dust dust195 = Main.dust[num176];
				Dust dust334 = dust195;
				dust334.velocity *= 1.2f;
				Main.dust[num176].scale = 0.9f;
				dust195 = Main.dust[num176];
				dust334 = dust195;
				dust334.velocity -= oldVelocity * 0.3f;
				num176 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, 76, 0f, 0f, 0, newColor4, 1.1f);
				Main.dust[num176].noGravity = true;
				dust195 = Main.dust[num176];
				dust334 = dust195;
				dust334.velocity *= 2f;
			}
		}
		else if (type == 572)
		{
			for (int num177 = 0; num177 < 15; num177++)
			{
				int num178 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 40, velocity.X * 0.1f, velocity.Y * 0.1f, 100);
				Dust dust194 = Main.dust[num178];
				Dust dust334 = dust194;
				dust334.velocity *= 3f;
				Main.dust[num178].noGravity = true;
				Main.dust[num178].scale = 1.25f;
				Main.dust[num178].position = (base.Center + position) / 2f;
			}
		}
		else if (type == 581)
		{
			for (int num179 = 0; num179 < 30; num179++)
			{
				int num180 = Utils.SelectRandom<int>(Main.rand, 229, 229, 161);
				Dust dust288 = Main.dust[Dust.NewDust(position, width, height, num180)];
				dust288.noGravity = true;
				dust288.scale = 1.25f + Main.rand.NextFloat();
				dust288.fadeIn = 0.25f;
				Dust dust193 = dust288;
				Dust dust334 = dust193;
				dust334.velocity *= 2f;
				dust288.noLight = true;
			}
		}
		else if (type == 671)
		{
			for (int num181 = 0; num181 < 30; num181++)
			{
				int num182 = Utils.SelectRandom<int>(Main.rand, 27, 27, 62);
				Dust dust289 = Main.dust[Dust.NewDust(position, width, height, num182)];
				dust289.noGravity = true;
				dust289.scale = 1.25f + Main.rand.NextFloat();
				dust289.fadeIn = 0.25f;
				Dust dust192 = dust289;
				Dust dust334 = dust192;
				dust334.velocity *= 2f;
				dust289.noLight = true;
			}
		}
		else if (type == 811 || type == 814)
		{
			for (int num183 = 0; num183 < 30; num183++)
			{
				Dust dust290 = Main.dust[Dust.NewDust(position, width, height, 5)];
				dust290.scale = 1.25f + Main.rand.NextFloat();
				Dust dust190 = dust290;
				Dust dust334 = dust190;
				dust334.velocity *= 2f;
			}
		}
		else if (type == 819)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num184 = 0; num184 < 20; num184++)
			{
				Dust dust291 = Main.dust[Dust.NewDust(position, width, height, 5)];
				dust291.scale = 1f + Main.rand.NextFloat() * 0.5f;
				Dust dust189 = dust291;
				Dust dust334 = dust189;
				dust334.velocity *= 1.5f;
			}
		}
		else if (type == 675)
		{
			for (int num185 = 0; num185 < 40; num185++)
			{
				int num187 = Utils.SelectRandom<int>(Main.rand, 27, 242, 73, 72, 71, 255, 255, 255);
				Dust dust292 = Main.dust[Dust.NewDust(position, width, height, num187)];
				dust292.noGravity = true;
				dust292.scale = 1.25f + Main.rand.NextFloat();
				dust292.fadeIn = 0.25f;
				Dust dust188 = dust292;
				Dust dust334 = dust188;
				dust334.velocity *= 3f;
				dust292.noLight = true;
			}
		}
		else if (type == 676)
		{
			for (int num188 = 0; num188 < 120; num188++)
			{
				int num189 = Utils.SelectRandom<int>(Main.rand, 4, 256);
				Dust dust293 = Main.dust[Dust.NewDust(position, width, height, num189, 0f, 0f, 100)];
				dust293.scale = 0.8f + Main.rand.NextFloat() * 0.6f;
				dust293.fadeIn = 0.5f;
				Dust dust187 = dust293;
				Dust dust334 = dust187;
				dust334.velocity *= 4.5f;
				dust293.noLight = true;
				if (dust293.velocity.Y > 0f)
				{
					dust187 = dust293;
					dust334 = dust187;
					dust334.velocity *= -0.5f;
				}
				if (dust293.type == 4)
				{
					dust293.color = new Color(80, 170, 40, 120);
				}
			}
			for (int num190 = 0; num190 < 10; num190++)
			{
				Gore.NewGoreDirect(base.Center, new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()), (0f - Main.rand.NextFloat()) * 5f), 1024);
			}
			for (int num191 = 0; num191 < 10; num191++)
			{
				Gore.NewGoreDirect(base.Center, new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()), (0f - Main.rand.NextFloat()) * 5f), 1025);
			}
			for (int num192 = 0; num192 < 10; num192++)
			{
				Gore.NewGoreDirect(base.Center, new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()), (0f - Main.rand.NextFloat()) * 5f), 1026);
			}
			for (int num193 = 0; num193 < 20; num193++)
			{
				Gore.NewGoreDirect(base.Center, new Vector2(MathHelper.Lerp(-0.5f, 0.5f, Main.rand.NextFloat()), (0f - Main.rand.NextFloat()) * 2f), 1026);
			}
			if (Main.netMode != 2)
			{
				Player player = Main.player[Main.myPlayer];
				if (!player.dead && player.active)
				{
					center4 = player.Center - base.Center;
					if (((Vector2)(ref center4)).Length() < 300f && !player.creativeGodMode)
					{
						player.AddBuff(197, 900, quiet: false);
					}
				}
			}
		}
		else if (type == 686)
		{
			Rectangle hitbox3 = base.Hitbox;
			for (int num194 = 0; num194 < oldPos.Length / 2; num194 += 2)
			{
				hitbox3.X = (int)oldPos[num194].X;
				hitbox3.Y = (int)oldPos[num194].Y;
				for (int num195 = 0; num195 < 3; num195++)
				{
					int num196 = Utils.SelectRandom<int>(Main.rand, 6, 55, 158);
					int num198 = Dust.NewDust(hitbox3.TopLeft(), width, height, num196, direction, -2.5f);
					Main.dust[num198].alpha = 200;
					Dust dust181 = Main.dust[num198];
					Dust dust334 = dust181;
					dust334.velocity *= 2.4f;
					dust181 = Main.dust[num198];
					dust334 = dust181;
					dust334.scale += Main.rand.NextFloat();
					dust181 = Main.dust[num198];
					dust334 = dust181;
					dust334.scale -= 0.5f;
					if (Main.dust[num198].type == 55)
					{
						Main.dust[num198].color = Color.Lerp(Color.Red, Color.Gold, Main.rand.NextFloat());
					}
					Main.dust[num198].noLight = true;
				}
			}
			for (int num199 = 10; num199 < oldPos.Length; num199 += 2)
			{
				hitbox3.X = (int)oldPos[num199].X;
				hitbox3.Y = (int)oldPos[num199].Y;
				for (int num200 = 0; num200 < 2; num200++)
				{
					int num201 = Utils.SelectRandom<int>(Main.rand, 55);
					int num202 = Dust.NewDust(hitbox3.TopLeft(), width, height, num201, direction, -2.5f);
					Main.dust[num202].alpha = 120;
					Dust dust183 = Main.dust[num202];
					Dust dust334 = dust183;
					dust334.velocity *= 2.4f;
					dust183 = Main.dust[num202];
					dust334 = dust183;
					dust334.scale += Main.rand.NextFloat() * 0.7f;
					dust183 = Main.dust[num202];
					dust334 = dust183;
					dust334.scale -= 0.5f;
					if (Main.dust[num202].type == 55)
					{
						Main.dust[num202].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
					}
					Main.dust[num202].noLight = true;
				}
			}
			for (int num203 = 5; num203 < oldPos.Length; num203++)
			{
				hitbox3.X = (int)oldPos[num203].X;
				hitbox3.Y = (int)oldPos[num203].Y;
				for (int num204 = 0; num204 < 1; num204++)
				{
					int num205 = Utils.SelectRandom<int>(Main.rand, 55);
					int num206 = Dust.NewDust(hitbox3.TopLeft(), width, height, num205, direction, -2.5f);
					Main.dust[num206].alpha = 80;
					Dust dust184 = Main.dust[num206];
					Dust dust334 = dust184;
					dust334.velocity *= 0.3f;
					dust184 = Main.dust[num206];
					dust334 = dust184;
					dust334.velocity += velocity * 0.5f;
					dust184 = Main.dust[num206];
					dust334 = dust184;
					dust334.scale += Main.rand.NextFloat() * 0.7f;
					dust184 = Main.dust[num206];
					dust334 = dust184;
					dust334.scale -= 0.5f;
					if (Main.dust[num206].type == 55)
					{
						Main.dust[num206].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
					}
					Main.dust[num206].noLight = true;
				}
			}
			for (int num207 = 0; num207 < 30; num207++)
			{
				int num209 = 228;
				Dust dust294 = Main.dust[Dust.NewDust(position, width, height, num209)];
				dust294.noGravity = true;
				dust294.scale = 1.25f + Main.rand.NextFloat();
				dust294.fadeIn = 1.5f;
				Dust dust186 = dust294;
				Dust dust334 = dust186;
				dust334.velocity *= 6f;
				dust294.noLight = true;
			}
		}
		if (type == 405)
		{
			SoundEngine.PlaySound(in SoundID.Item54, position);
			_ = base.Center;
			for (int num210 = 0; num210 < 20; num210++)
			{
				int num211 = 10;
				int num212 = Dust.NewDust(base.Center - Vector2.One * (float)num211, num211 * 2, num211 * 2, 212);
				Dust dust296 = Main.dust[num212];
				Vector2 vector28 = Vector2.Normalize(dust296.position - base.Center);
				dust296.position = base.Center + vector28 * (float)num211 * scale;
				if (num210 < 30)
				{
					dust296.velocity = vector28 * ((Vector2)(ref dust296.velocity)).Length();
				}
				else
				{
					dust296.velocity = vector28 * (float)Main.rand.Next(45, 91) / 10f;
				}
				dust296.color = Main.hslToRgb((float)(0.4000000059604645 + Main.rand.NextDouble() * 0.20000000298023224), 0.9f, 0.5f);
				dust296.color = Color.Lerp(dust296.color, Color.White, 0.3f);
				dust296.noGravity = true;
				dust296.scale = 0.7f;
			}
		}
		if (type == 501)
		{
			SoundEngine.PlaySound(13, (int)position.X, (int)position.Y);
			int num213 = 20;
			position.X -= num213;
			position.Y -= num213;
			width += num213 * 2;
			height += num213 * 2;
			num213 += 20;
			for (int num214 = 0; num214 < 20; num214++)
			{
				int num215 = Dust.NewDust(position, width, height, 188, 0f, 0f, 100, default(Color), 1.5f);
				Dust dust206 = Main.dust[num215];
				Dust dust334 = dust206;
				dust334.velocity *= 0.5f;
			}
			for (int num216 = 0; num216 < 5; num216++)
			{
				Vector2 val15 = new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height));
				center4 = default(Vector2);
				int num217 = Gore.NewGore(val15, center4, Main.rand.Next(435, 438));
				Gore gore45 = Main.gore[num217];
				Gore gore64 = gore45;
				gore64.velocity *= 0.5f;
				switch (num216)
				{
				case 0:
					Main.gore[num217].velocity.X += 1f;
					Main.gore[num217].velocity.Y += 1f;
					break;
				case 1:
					Main.gore[num217].velocity.X -= 1f;
					Main.gore[num217].velocity.Y += 1f;
					break;
				case 2:
					Main.gore[num217].velocity.X += 1f;
					Main.gore[num217].velocity.Y -= 1f;
					break;
				default:
					Main.gore[num217].velocity.X -= 1f;
					Main.gore[num217].velocity.Y -= 1f;
					break;
				}
				gore45 = Main.gore[num217];
				gore64 = gore45;
				gore64.velocity *= 0.5f;
			}
			position.X -= num213;
			position.Y -= num213;
			width += num213 * 2;
			height += num213 * 2;
			Damage();
		}
		if (type == 410)
		{
			SoundEngine.PlaySound(in SoundID.Item54, position);
			_ = base.Center;
			for (int num218 = 0; num218 < 10; num218++)
			{
				int num220 = (int)(10f * ai[1]);
				int num221 = Dust.NewDust(base.Center - Vector2.One * (float)num220, num220 * 2, num220 * 2, 212);
				Dust dust297 = Main.dust[num221];
				Vector2 vector29 = Vector2.Normalize(dust297.position - base.Center);
				dust297.position = base.Center + vector29 * (float)num220 * scale;
				if (num218 < 30)
				{
					dust297.velocity = vector29 * ((Vector2)(ref dust297.velocity)).Length();
				}
				else
				{
					dust297.velocity = vector29 * (float)Main.rand.Next(45, 91) / 10f;
				}
				dust297.color = Main.hslToRgb((float)(0.4000000059604645 + Main.rand.NextDouble() * 0.20000000298023224), 0.9f, 0.5f);
				dust297.color = Color.Lerp(dust297.color, Color.White, 0.3f);
				dust297.noGravity = true;
				dust297.scale = 0.7f;
			}
		}
		if (type == 629 && Main.netMode != 1)
		{
			switch (Main.npc[(int)ai[0]].type)
			{
			case 517:
				if (NPC.ShieldStrengthTowerSolar != 0)
				{
					Main.npc[(int)ai[0]].ai[3] = 1f;
				}
				NPC.ShieldStrengthTowerSolar = (int)MathHelper.Clamp((float)(NPC.ShieldStrengthTowerSolar - 1), 0f, (float)NPC.ShieldStrengthTowerMax);
				break;
			case 422:
				if (NPC.ShieldStrengthTowerVortex != 0)
				{
					Main.npc[(int)ai[0]].ai[3] = 1f;
				}
				NPC.ShieldStrengthTowerVortex = (int)MathHelper.Clamp((float)(NPC.ShieldStrengthTowerVortex - 1), 0f, (float)NPC.ShieldStrengthTowerMax);
				break;
			case 507:
				if (NPC.ShieldStrengthTowerNebula != 0)
				{
					Main.npc[(int)ai[0]].ai[3] = 1f;
				}
				NPC.ShieldStrengthTowerNebula = (int)MathHelper.Clamp((float)(NPC.ShieldStrengthTowerNebula - 1), 0f, (float)NPC.ShieldStrengthTowerMax);
				break;
			case 493:
				if (NPC.ShieldStrengthTowerStardust != 0)
				{
					Main.npc[(int)ai[0]].ai[3] = 1f;
				}
				NPC.ShieldStrengthTowerStardust = (int)MathHelper.Clamp((float)(NPC.ShieldStrengthTowerStardust - 1), 0f, (float)NPC.ShieldStrengthTowerMax);
				break;
			}
			Main.npc[(int)ai[0]].netUpdate = true;
			NetMessage.SendData(101);
		}
		if (aiStyle == 105 && owner == Main.myPlayer && ai[1] == 0f)
		{
			Vector2 vector30 = default(Vector2);
			((Vector2)(ref vector30))._002Ector((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
			((Vector2)(ref vector30)).Normalize();
			vector30 *= 0.3f;
			NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector30.X, vector30.Y, Main.rand.Next(569, 572), damage, 0f, owner);
		}
		if (type == 452)
		{
			SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 103);
			position = base.Center;
			width = (height = 144);
			position.X -= width / 2;
			position.Y -= height / 2;
			for (int num222 = 0; num222 < 4; num222++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
			}
			for (int num223 = 0; num223 < 40; num223++)
			{
				int num224 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 0, default(Color), 2.5f);
				Main.dust[num224].noGravity = true;
				Dust dust208 = Main.dust[num224];
				Dust dust334 = dust208;
				dust334.velocity *= 3f;
				num224 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 100, default(Color), 1.5f);
				dust208 = Main.dust[num224];
				dust334 = dust208;
				dust334.velocity *= 2f;
				Main.dust[num224].noGravity = true;
			}
			for (int num225 = 0; num225 < 1; num225++)
			{
				Vector2 val16 = position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f;
				center4 = default(Vector2);
				int num226 = Gore.NewGore(val16, center4, Main.rand.Next(61, 64));
				Gore gore46 = Main.gore[num226];
				Gore gore64 = gore46;
				gore64.velocity *= 0.3f;
				Main.gore[num226].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num226].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
			Damage();
		}
		if (type == 454)
		{
			SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 6);
			position = base.Center;
			width = (height = 208);
			position.X -= width / 2;
			position.Y -= height / 2;
			for (int num227 = 0; num227 < 7; num227++)
			{
				int num228 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Dust obj16 = Main.dust[num228];
				Vector2 spinningpoint20 = new Vector2((float)(width / 2), 0f);
				double radians29 = 6.2831854820251465 * Main.rand.NextDouble();
				center4 = default(Vector2);
				obj16.position = Utils.RotatedBy(spinningpoint20, radians29, center4) * (float)Main.rand.NextDouble() + base.Center;
			}
			for (int num229 = 0; num229 < 60; num229++)
			{
				int num231 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 0, default(Color), 2.5f);
				Dust obj17 = Main.dust[num231];
				Vector2 spinningpoint21 = new Vector2((float)(width / 2), 0f);
				double radians30 = 6.2831854820251465 * Main.rand.NextDouble();
				center4 = default(Vector2);
				obj17.position = Utils.RotatedBy(spinningpoint21, radians30, center4) * (float)Main.rand.NextDouble() + base.Center;
				Main.dust[num231].noGravity = true;
				Dust dust210 = Main.dust[num231];
				Dust dust334 = dust210;
				dust334.velocity *= 1f;
				num231 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 100, default(Color), 1.5f);
				Dust obj18 = Main.dust[num231];
				Vector2 spinningpoint22 = new Vector2((float)(width / 2), 0f);
				double radians31 = 6.2831854820251465 * Main.rand.NextDouble();
				center4 = default(Vector2);
				obj18.position = Utils.RotatedBy(spinningpoint22, radians31, center4) * (float)Main.rand.NextDouble() + base.Center;
				dust210 = Main.dust[num231];
				dust334 = dust210;
				dust334.velocity *= 1f;
				Main.dust[num231].noGravity = true;
			}
			for (int num232 = 0; num232 < 3; num232++)
			{
				Vector2 val17 = position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f;
				center4 = default(Vector2);
				int num233 = Gore.NewGore(val17, center4, Main.rand.Next(61, 64));
				Gore gore47 = Main.gore[num233];
				Gore gore64 = gore47;
				gore64.velocity *= 0.3f;
				Main.gore[num233].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num233].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
			Damage();
		}
		if (type == 467)
		{
			position = base.Center;
			width = (height = 176);
			base.Center = position;
			Damage();
			SoundEngine.PlaySound(in SoundID.Item14, position);
			for (int num234 = 0; num234 < 4; num234++)
			{
				int num235 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num235].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
			}
			for (int num236 = 0; num236 < 30; num236++)
			{
				int num237 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 200, default(Color), 3.7f);
				Main.dust[num237].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				Main.dust[num237].noGravity = true;
				Dust dust211 = Main.dust[num237];
				Dust dust334 = dust211;
				dust334.velocity *= 3f;
				num237 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num237].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				dust211 = Main.dust[num237];
				dust334 = dust211;
				dust334.velocity *= 2f;
				Main.dust[num237].noGravity = true;
				Main.dust[num237].fadeIn = 2.5f;
			}
			for (int num238 = 0; num238 < 10; num238++)
			{
				int num239 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.7f);
				Dust obj19 = Main.dust[num239];
				Vector2 center21 = base.Center;
				Vector2 spinningpoint23 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
				double radians32 = velocity.ToRotation();
				center4 = default(Vector2);
				obj19.position = center21 + spinningpoint23.RotatedBy(radians32, center4) * (float)width / 2f;
				Main.dust[num239].noGravity = true;
				Dust dust213 = Main.dust[num239];
				Dust dust334 = dust213;
				dust334.velocity *= 3f;
			}
			for (int num240 = 0; num240 < 10; num240++)
			{
				int num242 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
				Dust obj20 = Main.dust[num242];
				Vector2 center22 = base.Center;
				Vector2 spinningpoint24 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
				double radians33 = velocity.ToRotation();
				center4 = default(Vector2);
				obj20.position = center22 + spinningpoint24.RotatedBy(radians33, center4) * (float)width / 2f;
				Main.dust[num242].noGravity = true;
				Dust dust214 = Main.dust[num242];
				Dust dust334 = dust214;
				dust334.velocity *= 3f;
			}
			for (int num243 = 0; num243 < 2; num243++)
			{
				Vector2 val18 = position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f;
				center4 = default(Vector2);
				int num244 = Gore.NewGore(val18, center4, Main.rand.Next(61, 64));
				Main.gore[num244].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				Gore gore48 = Main.gore[num244];
				Gore gore64 = gore48;
				gore64.velocity *= 0.3f;
				Main.gore[num244].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num244].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
		}
		if (type == 468)
		{
			position = base.Center;
			width = (height = 176);
			base.Center = position;
			Damage();
			SoundEngine.PlaySound(in SoundID.Item14, position);
			for (int num245 = 0; num245 < 4; num245++)
			{
				int num246 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num246].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
			}
			for (int num247 = 0; num247 < 20; num247++)
			{
				int num248 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, 0f, 0f, 200, default(Color), 3.7f);
				Main.dust[num248].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				Main.dust[num248].noGravity = true;
				Dust dust215 = Main.dust[num248];
				Dust dust334 = dust215;
				dust334.velocity *= 3f;
				num248 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num248].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				dust215 = Main.dust[num248];
				dust334 = dust215;
				dust334.velocity *= 2f;
				Main.dust[num248].noGravity = true;
				Main.dust[num248].fadeIn = 2.5f;
			}
			for (int num249 = 0; num249 < 10; num249++)
			{
				int num250 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, 0f, 0f, 0, default(Color), 2.7f);
				Dust obj21 = Main.dust[num250];
				Vector2 center23 = base.Center;
				Vector2 spinningpoint25 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
				double radians34 = velocity.ToRotation();
				center4 = default(Vector2);
				obj21.position = center23 + spinningpoint25.RotatedBy(radians34, center4) * (float)width / 2f;
				Main.dust[num250].noGravity = true;
				Dust dust216 = Main.dust[num250];
				Dust dust334 = dust216;
				dust334.velocity *= 3f;
			}
			for (int num251 = 0; num251 < 10; num251++)
			{
				int num254 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
				Dust obj22 = Main.dust[num254];
				Vector2 center24 = base.Center;
				Vector2 spinningpoint26 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
				double radians35 = velocity.ToRotation();
				center4 = default(Vector2);
				obj22.position = center24 + spinningpoint26.RotatedBy(radians35, center4) * (float)width / 2f;
				Main.dust[num254].noGravity = true;
				Dust dust217 = Main.dust[num254];
				Dust dust334 = dust217;
				dust334.velocity *= 3f;
			}
			for (int num255 = 0; num255 < 2; num255++)
			{
				Vector2 val19 = position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f;
				center4 = default(Vector2);
				int num256 = Gore.NewGore(val19, center4, Main.rand.Next(61, 64));
				Main.gore[num256].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)width / 2f;
				Gore gore50 = Main.gore[num256];
				Gore gore64 = gore50;
				gore64.velocity *= 0.3f;
				Main.gore[num256].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num256].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
		}
		if (type == 485)
		{
			for (int num257 = 0; num257 < 15; num257++)
			{
				int num258 = Dust.NewDust(position, width, height, 6);
				Main.dust[num258].noGravity = true;
				Dust dust224 = Main.dust[num258];
				Dust dust334 = dust224;
				dust334.velocity -= oldVelocity * (float)Main.rand.Next(20, 60) * 0.01f;
			}
		}
		else if (type == 484)
		{
			for (int num259 = 0; num259 < 5; num259++)
			{
				int num260 = Dust.NewDust(position, width, height, 78);
				Main.dust[num260].noGravity = true;
				Dust dust223 = Main.dust[num260];
				Dust dust334 = dust223;
				dust334.velocity -= oldVelocity / 5f;
				Main.dust[num260].scale = 0.85f;
			}
		}
		else if (type == 483)
		{
			SoundEngine.PlaySound(in SoundID.Item14, position);
			if (owner == Main.myPlayer)
			{
				int num261 = Main.rand.Next(4, 8);
				int[] array = new int[num261];
				int num262 = 0;
				for (int num263 = 0; num263 < 200; num263++)
				{
					if (!Main.npc[num263].CanBeChasedBy(this, ignoreDontTakeDamage: true))
					{
						continue;
					}
					float num265 = Distance(Main.npc[num263].Center);
					if (!(num265 > 2000f) && Collision.CanHitLine(position, width, height, Main.npc[num263].position, Main.npc[num263].width, Main.npc[num263].height))
					{
						array[num262] = num263;
						num262++;
						if (num262 == num261)
						{
							break;
						}
					}
				}
				if (num262 > 1)
				{
					for (int num266 = 0; num266 < 100; num266++)
					{
						int num267 = Main.rand.Next(num262);
						int num268;
						for (num268 = num267; num268 == num267; num268 = Main.rand.Next(num262))
						{
						}
						int num269 = array[num267];
						array[num267] = array[num268];
						array[num268] = num269;
					}
				}
				Vector2 vector31 = default(Vector2);
				((Vector2)(ref vector31))._002Ector(-1f, -1f);
				for (int num270 = 0; num270 < num262; num270++)
				{
					Vector2 vector32 = Main.npc[array[num270]].Center - base.Center;
					((Vector2)(ref vector32)).Normalize();
					vector31 += vector32;
				}
				((Vector2)(ref vector31)).Normalize();
				Vector2 vector33 = default(Vector2);
				for (int num271 = 0; num271 < num261; num271++)
				{
					float num272 = Main.rand.Next(8, 15);
					((Vector2)(ref vector33))._002Ector((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
					((Vector2)(ref vector33)).Normalize();
					if (num262 > 0)
					{
						vector33 += vector31;
						((Vector2)(ref vector33)).Normalize();
					}
					vector33 *= num272;
					if (num262 > 0)
					{
						num262--;
						vector33 = Main.npc[array[num262]].Center - base.Center;
						((Vector2)(ref vector33)).Normalize();
						vector33 *= num272;
					}
					NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector33.X, vector33.Y, 484, (int)((double)damage * 0.7), knockBack * 0.7f, owner);
				}
			}
			for (int num273 = 0; num273 < 20; num273++)
			{
				int num274 = Dust.NewDust(position, width, height, 78);
				Main.dust[num274].noGravity = true;
				Dust dust220 = Main.dust[num274];
				Dust dust334 = dust220;
				dust334.velocity *= 4f;
			}
			for (int num276 = 0; num276 < 7; num276++)
			{
				int num277 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Dust dust221 = Main.dust[num277];
				Dust dust334 = dust221;
				dust334.velocity *= 0.9f;
				Main.dust[num277].scale = 0.9f;
			}
			for (int num278 = 0; num278 < 3; num278++)
			{
				int num279 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
				Main.dust[num279].noGravity = true;
				Dust dust222 = Main.dust[num279];
				Dust dust334 = dust222;
				dust334.velocity *= 3f;
				num279 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
				dust222 = Main.dust[num279];
				dust334 = dust222;
				dust334.velocity *= 2f;
			}
			Vector2 val20 = new Vector2(position.X, position.Y);
			center4 = default(Vector2);
			int num280 = Gore.NewGore(val20, center4, Main.rand.Next(61, 64));
			Gore gore51 = Main.gore[num280];
			Gore gore64 = gore51;
			gore64.velocity *= 0.3f;
			Main.gore[num280].velocity.X += Main.rand.Next(-1, 2);
			Main.gore[num280].velocity.Y += Main.rand.Next(-1, 2);
			if (owner == Main.myPlayer)
			{
				int num281 = 100;
				position.X -= num281 / 2;
				position.Y -= num281 / 2;
				width += num281;
				height++;
				penetrate = -1;
				Damage();
			}
		}
		if (type == 523)
		{
			SoundEngine.PlaySound(in SoundID.Item54, position);
			for (int num282 = 0; num282 < 25; num282++)
			{
				int num283 = Dust.NewDust(position, width, height, 256);
				Main.dust[num283].noGravity = true;
				Main.dust[num283].position = (Main.dust[num283].position + position) / 2f;
				Main.dust[num283].velocity = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
				((Vector2)(ref Main.dust[num283].velocity)).Normalize();
				Dust dust229 = Main.dust[num283];
				Dust dust334 = dust229;
				dust334.velocity *= (float)Main.rand.Next(1, 30) * 0.1f;
				Main.dust[num283].alpha = alpha;
			}
		}
		else if (type == 522)
		{
			SoundEngine.PlaySound(in SoundID.Item118, position);
			for (int num284 = 0; num284 < 10; num284++)
			{
				int num285 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 254, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.5f);
				Dust dust226;
				Dust dust334;
				if (Main.rand.Next(3) == 0)
				{
					Main.dust[num285].fadeIn = 0.75f + (float)Main.rand.Next(-10, 11) * 0.01f;
					Main.dust[num285].scale = 0.25f + (float)Main.rand.Next(-10, 11) * 0.005f;
					dust226 = Main.dust[num285];
					dust334 = dust226;
					dust334.type++;
				}
				else
				{
					Main.dust[num285].scale = 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
				}
				Main.dust[num285].noGravity = true;
				dust226 = Main.dust[num285];
				dust334 = dust226;
				dust334.velocity *= 1.25f;
				dust226 = Main.dust[num285];
				dust334 = dust226;
				dust334.velocity -= oldVelocity / 10f;
			}
		}
		else if (type == 521)
		{
			SoundEngine.PlaySound(in SoundID.Item110, position);
			for (int num287 = 0; num287 < 20; num287++)
			{
				int num288 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 254, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.5f);
				Dust dust225;
				Dust dust334;
				if (Main.rand.Next(3) == 0)
				{
					Main.dust[num288].fadeIn = 1.1f + (float)Main.rand.Next(-10, 11) * 0.01f;
					Main.dust[num288].scale = 0.35f + (float)Main.rand.Next(-10, 11) * 0.01f;
					dust225 = Main.dust[num288];
					dust334 = dust225;
					dust334.type++;
				}
				else
				{
					Main.dust[num288].scale = 1.2f + (float)Main.rand.Next(-10, 11) * 0.01f;
				}
				Main.dust[num288].noGravity = true;
				dust225 = Main.dust[num288];
				dust334 = dust225;
				dust334.velocity *= 2.5f;
				dust225 = Main.dust[num288];
				dust334 = dust225;
				dust334.velocity -= oldVelocity / 10f;
			}
			if (Main.myPlayer == owner)
			{
				int num289 = Main.rand.Next(3, 6);
				Vector2 vector35 = default(Vector2);
				for (int num290 = 0; num290 < num289; num290++)
				{
					((Vector2)(ref vector35))._002Ector((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
					while (vector35.X == 0f && vector35.Y == 0f)
					{
						((Vector2)(ref vector35))._002Ector((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
					}
					((Vector2)(ref vector35)).Normalize();
					vector35 *= (float)Main.rand.Next(70, 101) * 0.1f;
					NewProjectile(GetProjectileSource_FromThis(), oldPosition.X + (float)(width / 2), oldPosition.Y + (float)(height / 2), vector35.X, vector35.Y, 522, (int)((double)damage * 0.8), knockBack * 0.8f, owner);
				}
			}
		}
		if (type == 520)
		{
			SoundEngine.PlaySound(in SoundID.Item50, position);
			for (int num291 = 0; num291 < 10; num291++)
			{
				int num292 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 252, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.75f);
				Main.dust[num292].noGravity = true;
				Dust dust231 = Main.dust[num292];
				Dust dust334 = dust231;
				dust334.velocity -= oldVelocity / 3f;
			}
		}
		if (type == 459 || type == 709)
		{
			int num293 = 3;
			int num294 = 10;
			int num295 = 0;
			if (scale >= 1f)
			{
				position = base.Center;
				width = (height = 144);
				base.Center = position;
				num293 = 7;
				num294 = 30;
				num295 = 2;
				Damage();
			}
			for (int num296 = 0; num296 < num293; num296++)
			{
				int num298 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Dust obj23 = Main.dust[num298];
				Vector2 spinningpoint27 = new Vector2((float)(width / 2), 0f);
				double radians36 = 6.2831854820251465 * Main.rand.NextDouble();
				center4 = default(Vector2);
				obj23.position = Utils.RotatedBy(spinningpoint27, radians36, center4) * (float)Main.rand.NextDouble() + base.Center;
			}
			for (int num299 = 0; num299 < num294; num299++)
			{
				int num300 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 226, 0f, 0f, 0, default(Color), 1.5f);
				Dust obj24 = Main.dust[num300];
				Vector2 spinningpoint28 = new Vector2((float)(width / 2), 0f);
				double radians37 = 6.2831854820251465 * Main.rand.NextDouble();
				center4 = default(Vector2);
				obj24.position = Utils.RotatedBy(spinningpoint28, radians37, center4) * (float)Main.rand.NextDouble() + base.Center;
				Main.dust[num300].noGravity = true;
				Dust dust234 = Main.dust[num300];
				Dust dust334 = dust234;
				dust334.velocity *= 1f;
			}
			for (int num301 = 0; num301 < num295; num301++)
			{
				Vector2 val21 = position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f;
				center4 = default(Vector2);
				int num302 = Gore.NewGore(val21, center4, Main.rand.Next(61, 64));
				Gore gore52 = Main.gore[num302];
				Gore gore64 = gore52;
				gore64.velocity *= 0.3f;
				Main.gore[num302].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num302].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
			if (type == 709 && Main.myPlayer == owner)
			{
				Rectangle value11 = default(Rectangle);
				((Rectangle)(ref value11))._002Ector((int)base.Center.X - 40, (int)base.Center.Y - 40, 80, 80);
				for (int num303 = 0; num303 < 1000; num303++)
				{
					if (num303 != whoAmI && Main.projectile[num303].active && Main.projectile[num303].owner == owner && Main.projectile[num303].type == 443)
					{
						val6 = Main.projectile[num303].getRect();
						if (((Rectangle)(ref val6)).Intersects(value11))
						{
							Main.projectile[num303].ai[1] = 1f;
							Main.projectile[num303].velocity = (base.Center - Main.projectile[num303].Center) / 5f;
							Main.projectile[num303].netUpdate = true;
						}
					}
				}
				int num304 = NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 443, damage, 0f, owner);
				Main.projectile[num304].timeLeft = 30 * Main.rand.Next(2, 6);
				Main.projectile[num304].localAI[0] = SoundEngine.PlayTrackedSound(in SoundID.DD2_SkyDragonsFuryCircle, base.Center).ToFloat();
			}
		}
		if (owner != Main.myPlayer && type == 453 && Main.player[owner].mount.AbilityActive)
		{
			Main.player[owner].mount.UseAbility(Main.player[owner], position, toggleOn: false);
		}
		if (type == 441)
		{
			Main.player[owner].mount.StopAbilityCharge();
		}
		if (type == 444)
		{
			SoundEngine.PlaySound(in SoundID.Item96, position);
			int num305 = Main.rand.Next(5, 9);
			for (int num306 = 0; num306 < num305; num306++)
			{
				int num307 = Dust.NewDust(base.Center, 0, 0, 171, 0f, 0f, 100, default(Color), 1.4f);
				Dust dust235 = Main.dust[num307];
				Dust dust334 = dust235;
				dust334.velocity *= 0.8f;
				Main.dust[num307].position = Vector2.Lerp(Main.dust[num307].position, base.Center, 0.5f);
				Main.dust[num307].noGravity = true;
			}
			if (owner == Main.myPlayer)
			{
				Vector2 vector36 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY);
				if (Main.player[owner].gravDir == -1f)
				{
					vector36.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y;
				}
				Vector2 vector37 = Vector2.Normalize(vector36 - base.Center);
				vector37 *= localAI[1];
				NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector37.X, vector37.Y, (int)localAI[0], damage, knockBack, owner);
			}
		}
		if (type == 472)
		{
			for (int num309 = 0; num309 < 20; num309++)
			{
				int num310 = Dust.NewDust(position, width, height, 30);
				Main.dust[num310].noGravity = true;
				Dust dust237 = Main.dust[num310];
				Dust dust334 = dust237;
				dust334.velocity *= 0.45f;
				dust237 = Main.dust[num310];
				dust334 = dust237;
				dust334.velocity += velocity * 0.9f;
			}
		}
		if (type == 639 || type == 640)
		{
			int num311 = Main.rand.Next(5, 10);
			for (int num312 = 0; num312 < num311; num312++)
			{
				int num313 = Dust.NewDust(base.Center, 0, 0, 220, 0f, 0f, 100, default(Color), 0.5f);
				Dust dust238 = Main.dust[num313];
				Dust dust334 = dust238;
				dust334.velocity *= 1.6f;
				Main.dust[num313].velocity.Y -= 1f;
				Main.dust[num313].position = Vector2.Lerp(Main.dust[num313].position, base.Center, 0.5f);
				Main.dust[num313].noGravity = true;
			}
			if (owner == Main.myPlayer && type == 639)
			{
				int num314 = num + 1;
				int nextSlot = GetNextSlot();
				if (Main.ProjectileUpdateLoopIndex < nextSlot && Main.ProjectileUpdateLoopIndex != -1)
				{
					num314++;
				}
				Vector2 vector38 = default(Vector2);
				((Vector2)(ref vector38))._002Ector(ai[0], ai[1]);
				NewProjectile(GetProjectileSource_FromThis(), localAI[0], localAI[1], vector38.X, vector38.Y, 640, damage, knockBack, owner, 0f, num314);
			}
		}
		if (type == 684)
		{
			int num315 = Main.rand.Next(15, 25);
			for (int num316 = 0; num316 < num315; num316++)
			{
				int num317 = Dust.NewDust(base.Center, 0, 0, 60, 0f, 0f, 100, new Color(255, 255, 255, 0), 1.3f);
				Dust dust240 = Main.dust[num317];
				Dust dust334 = dust240;
				dust334.velocity *= 8f * (0.3f + 0.7f * Main.rand.NextFloat());
				Main.dust[num317].fadeIn = 1.3f + Main.rand.NextFloat() * 0.2f;
				Main.dust[num317].noLight = true;
				Main.dust[num317].noGravity = true;
				dust240 = Main.dust[num317];
				dust334 = dust240;
				dust334.position += Main.dust[num317].velocity * 4f;
			}
		}
		if (type == 435)
		{
			int num318 = Main.rand.Next(5, 10);
			for (int num320 = 0; num320 < num318; num320++)
			{
				int num321 = Dust.NewDust(base.Center, 0, 0, 226, 0f, 0f, 100, default(Color), 0.5f);
				Dust dust242 = Main.dust[num321];
				Dust dust334 = dust242;
				dust334.velocity *= 1.6f;
				Main.dust[num321].velocity.Y -= 1f;
				Main.dust[num321].position = Vector2.Lerp(Main.dust[num321].position, base.Center, 0.5f);
				Main.dust[num321].noGravity = true;
			}
		}
		if (type == 732)
		{
			int num322 = Main.rand.Next(5, 10);
			for (int num323 = 0; num323 < num322; num323++)
			{
				int num324 = Dust.NewDust(base.Center, 0, 0, 226, 0f, 0f, 100, default(Color), 0.5f);
				Dust dust243 = Main.dust[num324];
				Dust dust334 = dust243;
				dust334.velocity *= 1.6f;
				Main.dust[num324].velocity.Y -= 1f;
				Main.dust[num324].velocity = Main.dust[num324].velocity * 0.5f + velocity * ((float)num323 / (float)num322) * 0.7f;
				Main.dust[num324].position = Vector2.Lerp(Main.dust[num324].position, base.Center, 0.5f);
				Main.dust[num324].noGravity = true;
			}
		}
		if (type == 682)
		{
			int num325 = 22;
			for (int num326 = 0; num326 < num325; num326++)
			{
				int num327 = Dust.NewDust(base.Center, 0, 0, 272, 0f, 0f, 0, default(Color), 0.5f);
				Dust dust245 = Main.dust[num327];
				Dust dust334 = dust245;
				dust334.velocity *= 1.6f;
				Main.dust[num327].velocity.Y -= 1f;
				Main.dust[num327].position = Vector2.Lerp(Main.dust[num327].position, base.Center, 0.5f);
			}
		}
		if (type == 436)
		{
			int num328 = Main.rand.Next(5, 10);
			for (int num329 = 0; num329 < num328; num329++)
			{
				int num331 = Dust.NewDust(base.Center, 0, 0, 220, 0f, 0f, 100, default(Color), 0.5f);
				Dust dust247 = Main.dust[num331];
				Dust dust334 = dust247;
				dust334.velocity *= 1.6f;
				Main.dust[num331].velocity.Y -= 1f;
				Main.dust[num331].position = Vector2.Lerp(Main.dust[num331].position, base.Center, 0.5f);
				Main.dust[num331].noGravity = true;
			}
		}
		if (type == 462)
		{
			int num332 = Main.rand.Next(5, 10);
			for (int num333 = 0; num333 < num332; num333++)
			{
				int num334 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, default(Color), 0.5f);
				Dust dust248 = Main.dust[num334];
				Dust dust334 = dust248;
				dust334.velocity *= 1.6f;
				Main.dust[num334].velocity.Y -= 1f;
				dust248 = Main.dust[num334];
				dust334 = dust248;
				dust334.position -= Vector2.One * 4f;
				Main.dust[num334].position = Vector2.Lerp(Main.dust[num334].position, base.Center, 0.5f);
				Main.dust[num334].noGravity = true;
			}
		}
		if (type == 442)
		{
			SoundEngine.PlaySound(in SoundID.Item94, position);
			int num335 = Main.rand.Next(3, 7);
			for (int num336 = 0; num336 < num335; num336++)
			{
				int num337 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100, default(Color), 2.1f);
				Dust dust249 = Main.dust[num337];
				Dust dust334 = dust249;
				dust334.velocity *= 2f;
				Main.dust[num337].noGravity = true;
			}
			if (Main.myPlayer == owner)
			{
				Rectangle value12 = default(Rectangle);
				((Rectangle)(ref value12))._002Ector((int)base.Center.X - 40, (int)base.Center.Y - 40, 80, 80);
				for (int num338 = 0; num338 < 1000; num338++)
				{
					if (num338 != whoAmI && Main.projectile[num338].active && Main.projectile[num338].owner == owner && Main.projectile[num338].type == 443)
					{
						val6 = Main.projectile[num338].getRect();
						if (((Rectangle)(ref val6)).Intersects(value12))
						{
							Main.projectile[num338].ai[1] = 1f;
							Main.projectile[num338].velocity = (base.Center - Main.projectile[num338].Center) / 5f;
							Main.projectile[num338].netUpdate = true;
						}
					}
				}
				NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 443, damage, 0f, owner);
			}
		}
		if (type == 440)
		{
			int num339 = Main.rand.Next(3, 7);
			for (int num340 = 0; num340 < num339; num340++)
			{
				int num342 = Dust.NewDust(base.Center - velocity / 2f, 0, 0, 135, 0f, 0f, 100, default(Color), 2.1f);
				Dust dust250 = Main.dust[num342];
				Dust dust334 = dust250;
				dust334.velocity *= 2f;
				Main.dust[num342].noGravity = true;
			}
		}
		if (type == 606)
		{
			int num343 = Main.rand.Next(3, 7);
			for (int num344 = 0; num344 < num343; num344++)
			{
				int num345 = Dust.NewDust(base.Center - velocity / 2f, 0, 0, 182, 0f, 0f, 100, default(Color), 1.6f);
				Dust dust252 = Main.dust[num345];
				Dust dust334 = dust252;
				dust334.velocity *= 1.5f;
				Main.dust[num345].noGravity = true;
			}
		}
		if (type == 449)
		{
			int num346 = Main.rand.Next(3, 7);
			for (int num347 = 0; num347 < num346; num347++)
			{
				int num348 = Dust.NewDust(base.Center - velocity / 2f, 0, 0, 228, 0f, 0f, 100, default(Color), 2.1f);
				Dust dust253 = Main.dust[num348];
				Dust dust334 = dust253;
				dust334.velocity *= 2f;
				Main.dust[num348].noGravity = true;
			}
		}
		if (type == 495)
		{
			for (int num349 = 0; num349 < 15; num349++)
			{
				int num350 = Dust.NewDust(base.Center, 10, 10, 27);
				Main.dust[num350].noGravity = true;
				Dust dust254 = Main.dust[num350];
				Dust dust334 = dust254;
				dust334.velocity -= oldVelocity * 0.3f;
			}
		}
		if (type == 497)
		{
			for (int num351 = 0; num351 < 15; num351++)
			{
				int num353 = Dust.NewDust(base.Center, 10, 10, 27);
				Main.dust[num353].noGravity = true;
				Dust dust256 = Main.dust[num353];
				Dust dust334 = dust256;
				dust334.velocity *= 2f;
				dust256 = Main.dust[num353];
				dust334 = dust256;
				dust334.velocity -= oldVelocity * 0.3f;
				dust256 = Main.dust[num353];
				dust334 = dust256;
				dust334.scale += (float)Main.rand.Next(150) * 0.001f;
			}
		}
		if (type == 448)
		{
			SoundEngine.PlaySound(in SoundID.Item14, position);
			position = base.Center;
			width = (height = 112);
			position.X -= width / 2;
			position.Y -= height / 2;
			for (int num354 = 0; num354 < 4; num354++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
			}
			for (int num355 = 0; num355 < 40; num355++)
			{
				int num356 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 0, default(Color), 2.5f);
				Main.dust[num356].noGravity = true;
				Dust dust259 = Main.dust[num356];
				Dust dust334 = dust259;
				dust334.velocity *= 3f;
				num356 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 100, default(Color), 1.5f);
				dust259 = Main.dust[num356];
				dust334 = dust259;
				dust334.velocity *= 2f;
				Main.dust[num356].noGravity = true;
			}
			for (int num357 = 0; num357 < 1; num357++)
			{
				Vector2 val22 = position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f;
				center4 = default(Vector2);
				int num358 = Gore.NewGore(val22, center4, Main.rand.Next(61, 64));
				Gore gore53 = Main.gore[num358];
				Gore gore64 = gore53;
				gore64.velocity *= 0.3f;
				Main.gore[num358].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num358].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
			Damage();
		}
		else if (type == 715 || type == 716 || type == 717 || type == 718)
		{
			SoundEngine.PlaySound(in SoundID.Item14, position);
			position = base.Center;
			width = (height = 128);
			if (type == 717 || type == 718)
			{
				width = (height = 240);
			}
			position.X -= width / 2;
			position.Y -= height / 2;
			Damage();
			AI_147_Explosion();
		}
		if (type == 616)
		{
			SoundEngine.PlaySound(in SoundID.Item14, position);
			position = base.Center;
			width = (height = 80);
			position.X -= width / 2;
			position.Y -= height / 2;
			for (int num359 = 0; num359 < 4; num359++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
			}
			for (int num360 = 0; num360 < 40; num360++)
			{
				int num361 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 200, default(Color), 2.5f);
				Main.dust[num361].noGravity = true;
				Dust dust262 = Main.dust[num361];
				Dust dust334 = dust262;
				dust334.velocity *= 2f;
				num361 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 200, default(Color), 1.5f);
				dust262 = Main.dust[num361];
				dust334 = dust262;
				dust334.velocity *= 1.2f;
				Main.dust[num361].noGravity = true;
			}
			for (int num362 = 0; num362 < 1; num362++)
			{
				Vector2 val23 = position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f;
				center4 = default(Vector2);
				int num365 = Gore.NewGore(val23, center4, Main.rand.Next(61, 64));
				Gore gore54 = Main.gore[num365];
				Gore gore64 = gore54;
				gore64.velocity *= 0.3f;
				Main.gore[num365].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num365].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
			Damage();
		}
		if (type == 502)
		{
			Vector2 vector39 = new Vector2((float)width, (float)height) / 2f;
			for (int num366 = 0; num366 < oldPos.Length; num366++)
			{
				if (!(oldPos[num366] == Vector2.Zero))
				{
					int num367 = Dust.NewDust(oldPos[num366] + vector39, 0, 0, 66, 0f, 0f, 150, Color.Transparent, 0.7f);
					Main.dust[num367].color = Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f);
					Main.dust[num367].noGravity = true;
				}
			}
		}
		if (type == 510)
		{
			SoundEngine.PlaySound(in SoundID.Item107, position);
			Gore.NewGore(base.Center, -oldVelocity * 0.2f, 704);
			Gore.NewGore(base.Center, -oldVelocity * 0.2f, 705);
			if (owner == Main.myPlayer)
			{
				int num368 = Main.rand.Next(20, 31);
				Vector2 vector40 = default(Vector2);
				for (int num369 = 0; num369 < num368; num369++)
				{
					((Vector2)(ref vector40))._002Ector((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
					((Vector2)(ref vector40)).Normalize();
					vector40 *= (float)Main.rand.Next(10, 201) * 0.01f;
					NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector40.X, vector40.Y, 511 + Main.rand.Next(3), damage, 1f, owner);
				}
			}
		}
		if (type == 868 || type == 869 || type == 996)
		{
			SoundEngine.PlaySound(in SoundID.Item107, position);
			for (int num370 = 0; num370 < 15; num370++)
			{
				Dust.NewDust(position, width, height, 13, 0f, -2f, 0, default(Color), 1.5f);
			}
			if (Main.netMode != 1)
			{
				switch (type)
				{
				case 868:
					WorldGen.TreeTops.RandomizeTreeStyleBasedOnWorldPosition(Main.rand, base.Center);
					break;
				case 869:
					WorldGen.RandomizeBackgroundBasedOnPlayer(Main.rand, Main.player[owner]);
					break;
				case 996:
					WorldGen.RandomizeMoonState(Main.rand, garenteeNewStyle: true);
					break;
				}
				NetMessage.SendData(7);
			}
		}
		else if (type == 836)
		{
			for (int num371 = 0; num371 < 3; num371++)
			{
				int num372 = Dust.NewDust(position, width, height, 31, 0f, 0f, 50, Color.White, 0.8f);
				Dust dust264 = Main.dust[num372];
				Dust dust334 = dust264;
				dust334.velocity *= 0.5f;
				Main.dust[num372].noGravity = true;
			}
		}
		if (type == 408)
		{
			for (int num373 = 0; num373 < 15; num373++)
			{
				int num374 = Dust.NewDust(base.Center - Vector2.One * 10f, 50, 50, 5, 0f, -2f);
				Dust dust266 = Main.dust[num374];
				Dust dust334 = dust266;
				dust334.velocity /= 2f;
			}
			int num376 = 0;
			int num377 = 10;
			num376 = Gore.NewGore(base.Center, velocity * 0.8f, 584);
			Gore gore55 = Main.gore[num376];
			Gore gore64 = gore55;
			gore64.timeLeft /= num377;
			num376 = Gore.NewGore(base.Center, velocity * 0.9f, 585);
			gore55 = Main.gore[num376];
			gore64 = gore55;
			gore64.timeLeft /= num377;
			num376 = Gore.NewGore(base.Center, velocity * 1f, 586);
			gore55 = Main.gore[num376];
			gore64 = gore55;
			gore64.timeLeft /= num377;
		}
		if (type == 385)
		{
			SoundEngine.PlaySound(4, (int)base.Center.X, (int)base.Center.Y, 19);
			int num378 = 36;
			for (int num379 = 0; num379 < num378; num379++)
			{
				Vector2 spinningpoint = Vector2.Normalize(velocity) * new Vector2((float)width / 2f, (float)height) * 0.75f;
				Vector2 spinningpoint29 = spinningpoint;
				double radians38 = (float)(num379 - (num378 / 2 - 1)) * ((float)Math.PI * 2f) / (float)num378;
				center4 = default(Vector2);
				spinningpoint = spinningpoint29.RotatedBy(radians38, center4) + base.Center;
				Vector2 vector41 = spinningpoint - base.Center;
				int num380 = Dust.NewDust(spinningpoint + vector41, 0, 0, 172, vector41.X * 2f, vector41.Y * 2f, 100, default(Color), 1.4f);
				Main.dust[num380].noGravity = true;
				Main.dust[num380].noLight = true;
				Main.dust[num380].velocity = vector41;
			}
			if (owner == Main.myPlayer)
			{
				if (ai[1] < 1f)
				{
					int num381 = (Main.expertMode ? 25 : 40);
					int num382 = NewProjectile(GetProjectileSource_FromThis(), base.Center.X - (float)(direction * 30), base.Center.Y - 4f, (float)(-direction) * 0.01f, 0f, 384, num381, 4f, owner, 16f, 15f);
					Main.projectile[num382].netUpdate = true;
				}
				else
				{
					int num383 = (int)(base.Center.Y / 16f);
					int num384 = (int)(base.Center.X / 16f);
					int num385 = 100;
					if (num384 < 10)
					{
						num384 = 10;
					}
					if (num384 > Main.maxTilesX - 10)
					{
						num384 = Main.maxTilesX - 10;
					}
					if (num383 < 10)
					{
						num383 = 10;
					}
					if (num383 > Main.maxTilesY - num385 - 10)
					{
						num383 = Main.maxTilesY - num385 - 10;
					}
					int num387 = num383 + num385;
					int num388 = num383 + 15;
					for (int num389 = num383; num389 < num387; num389++)
					{
						Tile tile = Main.tile[num384, num389];
						if (tile.active() && (Main.tileSolid[tile.type] || tile.liquid != 0))
						{
							num388 = num389;
							break;
						}
					}
					num383 = num388;
					int num390 = (Main.expertMode ? 50 : 80);
					int num391 = NewProjectile(GetProjectileSource_FromThis(), num384 * 16 + 8, num383 * 16 - 24, 0f, 0f, 386, num390, 4f, Main.myPlayer, 16f, 24f);
					Main.projectile[num391].netUpdate = true;
				}
			}
		}
		else if (type >= 424 && type <= 426)
		{
			SoundEngine.PlaySound(in SoundID.Item89, position);
			position.X += width / 2;
			position.Y += height / 2;
			width = (int)(128f * scale);
			height = (int)(128f * scale);
			position.X -= width / 2;
			position.Y -= height / 2;
			for (int num392 = 0; num392 < 8; num392++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
			}
			for (int num393 = 0; num393 < 32; num393++)
			{
				int num394 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
				Main.dust[num394].noGravity = true;
				Dust dust268 = Main.dust[num394];
				Dust dust334 = dust268;
				dust334.velocity *= 3f;
				num394 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
				dust268 = Main.dust[num394];
				dust334 = dust268;
				dust334.velocity *= 2f;
				Main.dust[num394].noGravity = true;
			}
			for (int num395 = 0; num395 < 2; num395++)
			{
				Vector2 val24 = position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f;
				center4 = default(Vector2);
				int num396 = Gore.NewGore(val24, center4, Main.rand.Next(61, 64));
				Gore gore56 = Main.gore[num396];
				Gore gore64 = gore56;
				gore64.velocity *= 0.3f;
				Main.gore[num396].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num396].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
			if (owner == Main.myPlayer)
			{
				localAI[1] = -1f;
				maxPenetrate = 0;
				Damage();
			}
			for (int num398 = 0; num398 < 5; num398++)
			{
				int num399 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
				int num400 = Dust.NewDust(position, width, height, num399, 2.5f * (float)direction, -2.5f);
				Main.dust[num400].alpha = 200;
				Dust dust271 = Main.dust[num400];
				Dust dust334 = dust271;
				dust334.velocity *= 2.4f;
				dust271 = Main.dust[num400];
				dust334 = dust271;
				dust334.scale += Main.rand.NextFloat();
			}
		}
		if (type == 399)
		{
			SoundEngine.PlaySound(13, (int)position.X, (int)position.Y);
			Vector2 vector42 = default(Vector2);
			((Vector2)(ref vector42))._002Ector(20f, 20f);
			for (int num401 = 0; num401 < 5; num401++)
			{
				Dust.NewDust(base.Center - vector42 / 2f, (int)vector42.X, (int)vector42.Y, 12, 0f, 0f, 0, Color.Red);
			}
			for (int num402 = 0; num402 < 10; num402++)
			{
				int num403 = Dust.NewDust(base.Center - vector42 / 2f, (int)vector42.X, (int)vector42.Y, 31, 0f, 0f, 100, default(Color), 1.5f);
				Dust dust273 = Main.dust[num403];
				Dust dust334 = dust273;
				dust334.velocity *= 1.4f;
			}
			for (int num404 = 0; num404 < 20; num404++)
			{
				int num405 = Dust.NewDust(base.Center - vector42 / 2f, (int)vector42.X, (int)vector42.Y, 6, 0f, 0f, 100, default(Color), 2.5f);
				Main.dust[num405].noGravity = true;
				Dust dust272 = Main.dust[num405];
				Dust dust334 = dust272;
				dust334.velocity *= 5f;
				num405 = Dust.NewDust(base.Center - vector42 / 2f, (int)vector42.X, (int)vector42.Y, 6, 0f, 0f, 100, default(Color), 1.5f);
				dust272 = Main.dust[num405];
				dust334 = dust272;
				dust334.velocity *= 3f;
			}
			if (Main.myPlayer == owner)
			{
				for (int num406 = 0; num406 < 6; num406++)
				{
					float num407 = (0f - velocity.X) * (float)Main.rand.Next(20, 50) * 0.01f + (float)Main.rand.Next(-20, 21) * 0.4f;
					float num409 = (0f - Math.Abs(velocity.Y)) * (float)Main.rand.Next(30, 50) * 0.01f + (float)Main.rand.Next(-20, 5) * 0.4f;
					NewProjectile(GetProjectileSource_FromThis(), base.Center.X + num407, base.Center.Y + num409, num407, num409, 400 + Main.rand.Next(3), (int)((double)damage * 0.5), 0f, owner);
				}
			}
		}
		if (type == 384 || type == 386)
		{
			for (int num410 = 0; num410 < 20; num410++)
			{
				int num411 = Dust.NewDust(position, width, height, 212, direction * 2, 0f, 100, default(Color), 1.4f);
				Dust dust298 = Main.dust[num411];
				dust298.color = Color.CornflowerBlue;
				dust298.color = Color.Lerp(dust298.color, Color.White, 0.3f);
				dust298.noGravity = true;
			}
		}
		if (type == 507 || type == 508)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			Vector2 vector43 = position;
			Vector2 vector44 = oldVelocity;
			((Vector2)(ref vector44)).Normalize();
			vector43 += vector44 * 16f;
			for (int num412 = 0; num412 < 20; num412++)
			{
				int num413 = Dust.NewDust(vector43, width, height, 81);
				Main.dust[num413].position = (Main.dust[num413].position + base.Center) / 2f;
				Dust dust270 = Main.dust[num413];
				Dust dust334 = dust270;
				dust334.velocity += oldVelocity * 0.4f;
				dust270 = Main.dust[num413];
				dust334 = dust270;
				dust334.velocity *= 0.5f;
				Main.dust[num413].noGravity = true;
				vector43 -= vector44 * 8f;
			}
		}
		if (type == 598)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			Vector2 vector46 = position;
			Vector2 vector47 = (rotation - (float)Math.PI / 2f).ToRotationVector2();
			vector46 += vector47 * 16f;
			for (int num414 = 0; num414 < 20; num414++)
			{
				int num415 = Dust.NewDust(vector46, width, height, 81);
				Main.dust[num415].position = (Main.dust[num415].position + base.Center) / 2f;
				Dust dust269 = Main.dust[num415];
				Dust dust334 = dust269;
				dust334.velocity += vector47 * 2f;
				dust269 = Main.dust[num415];
				dust334 = dust269;
				dust334.velocity *= 0.5f;
				Main.dust[num415].noGravity = true;
				vector46 -= vector47 * 8f;
			}
		}
		if (type == 971)
		{
			Vector2 vector48 = position;
			Vector2 vector49 = (rotation - (float)Math.PI / 2f).ToRotationVector2();
			vector48 += vector49 * 8f;
			for (int num416 = 0; num416 < 6; num416++)
			{
				int num417 = Dust.NewDust(vector48, width, height, 4);
				Main.dust[num417].color = new Color(10, 10, 10, 150);
				Main.dust[num417].position = (Main.dust[num417].position + base.Center) / 2f;
				Dust dust267 = Main.dust[num417];
				Dust dust334 = dust267;
				dust334.velocity += vector49;
				dust267 = Main.dust[num417];
				dust334 = dust267;
				dust334.velocity *= 0.5f;
				Main.dust[num417].noGravity = true;
				vector48 -= vector49 * 4f;
			}
		}
		if (type == 1 || type == 81 || type == 98 || type == 980)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num418 = 0; num418 < 10; num418++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 7);
			}
		}
		if (type == 336 || type == 345)
		{
			for (int num420 = 0; num420 < 6; num420++)
			{
				int num421 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 196);
				Main.dust[num421].noGravity = true;
				Main.dust[num421].scale = scale;
			}
		}
		if (type == 358)
		{
			velocity = oldVelocity * 0.2f;
			for (int num422 = 0; num422 < 100; num422++)
			{
				int num423 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 211, 0f, 0f, 75, default(Color), 1.2f);
				Dust dust265;
				Dust dust334;
				if (Main.rand.Next(2) == 0)
				{
					dust265 = Main.dust[num423];
					dust334 = dust265;
					dust334.alpha += 25;
				}
				if (Main.rand.Next(2) == 0)
				{
					dust265 = Main.dust[num423];
					dust334 = dust265;
					dust334.alpha += 25;
				}
				if (Main.rand.Next(2) == 0)
				{
					dust265 = Main.dust[num423];
					dust334 = dust265;
					dust334.alpha += 25;
				}
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num423].scale = 0.6f;
				}
				else
				{
					Main.dust[num423].noGravity = true;
				}
				dust265 = Main.dust[num423];
				dust334 = dust265;
				dust334.velocity *= 0.3f;
				dust265 = Main.dust[num423];
				dust334 = dust265;
				dust334.velocity += velocity;
				dust265 = Main.dust[num423];
				dust334 = dust265;
				dust334.velocity *= 1f + (float)Main.rand.Next(-100, 101) * 0.01f;
				Main.dust[num423].velocity.X += (float)Main.rand.Next(-50, 51) * 0.015f;
				Main.dust[num423].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.015f;
				Main.dust[num423].position = base.Center;
			}
		}
		if (type == 406)
		{
			int num424 = 175;
			Color newColor5 = default(Color);
			((Color)(ref newColor5))._002Ector(0, 80, 255, 100);
			velocity = oldVelocity * 0.2f;
			for (int num425 = 0; num425 < 40; num425++)
			{
				int num426 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 4, 0f, 0f, num424, newColor5, 1.6f);
				Dust dust263;
				Dust dust334;
				if (Main.rand.Next(2) == 0)
				{
					dust263 = Main.dust[num426];
					dust334 = dust263;
					dust334.alpha += 25;
				}
				if (Main.rand.Next(2) == 0)
				{
					dust263 = Main.dust[num426];
					dust334 = dust263;
					dust334.alpha += 25;
				}
				if (Main.rand.Next(2) == 0)
				{
					dust263 = Main.dust[num426];
					dust334 = dust263;
					dust334.alpha += 25;
				}
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num426].scale = 0.6f;
				}
				else
				{
					Main.dust[num426].noGravity = true;
				}
				dust263 = Main.dust[num426];
				dust334 = dust263;
				dust334.velocity *= 0.3f;
				dust263 = Main.dust[num426];
				dust334 = dust263;
				dust334.velocity += velocity;
				dust263 = Main.dust[num426];
				dust334 = dust263;
				dust334.velocity *= 1f + (float)Main.rand.Next(-100, 101) * 0.01f;
				Main.dust[num426].velocity.X += (float)Main.rand.Next(-50, 51) * 0.015f;
				Main.dust[num426].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.015f;
				Main.dust[num426].position = base.Center;
			}
		}
		if (type == 344)
		{
			for (int num427 = 0; num427 < 8; num427++)
			{
				int num428 = Dust.NewDust(position, width, height, 197, 0f, 0f, 50);
				Main.dust[num428].noGravity = true;
				Main.dust[num428].velocity.X *= 0.75f;
				Main.dust[num428].velocity.Y *= 0.75f;
				Dust dust260 = Main.dust[num428];
				Dust dust334 = dust260;
				dust334.velocity -= velocity * 0.025f;
			}
		}
		else if (type == 343)
		{
			SoundEngine.PlaySound(in SoundID.Item27, position);
			for (int num429 = 4; num429 < 31; num429++)
			{
				float num431 = oldVelocity.X * (30f / (float)num429);
				float num432 = oldVelocity.Y * (30f / (float)num429);
				int num433 = Dust.NewDust(new Vector2(oldPosition.X - num431, oldPosition.Y - num432), 8, 8, 197, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.2f);
				Main.dust[num433].noGravity = true;
				Dust dust261 = Main.dust[num433];
				Dust dust334 = dust261;
				dust334.velocity *= 0.5f;
			}
		}
		else if (type == 349)
		{
			SoundEngine.PlaySound(in SoundID.Item27, position);
			for (int num434 = 0; num434 < 3; num434++)
			{
				int num435 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 76);
				Main.dust[num435].noGravity = true;
				Main.dust[num435].noLight = true;
				Main.dust[num435].scale = 0.7f;
			}
		}
		if (type == 323)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num436 = 0; num436 < 20; num436++)
			{
				int num437 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 7);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num437].noGravity = true;
					Main.dust[num437].scale = 1.3f;
					Dust dust257 = Main.dust[num437];
					Dust dust334 = dust257;
					dust334.velocity *= 1.5f;
					dust257 = Main.dust[num437];
					dust334 = dust257;
					dust334.velocity -= oldVelocity * 0.5f;
					dust257 = Main.dust[num437];
					dust334 = dust257;
					dust334.velocity *= 1.5f;
				}
				else
				{
					Dust dust258 = Main.dust[num437];
					Dust dust334 = dust258;
					dust334.velocity *= 0.75f;
					dust258 = Main.dust[num437];
					dust334 = dust258;
					dust334.velocity -= oldVelocity * 0.25f;
					Main.dust[num437].scale = 0.8f;
				}
			}
		}
		if (type == 589)
		{
			SoundEngine.PlaySound(in SoundID.Item27, position);
			Color newColor6 = Color.Red;
			if (ai[1] == 1f)
			{
				newColor6 = Color.Green;
			}
			if (ai[1] == 2f)
			{
				newColor6 = Color.Purple;
			}
			if (ai[1] == 3f)
			{
				newColor6 = Color.Gold;
			}
			if (ai[1] == 4f)
			{
				newColor6 = Color.White;
			}
			((Color)(ref newColor6)).A = 100;
			for (int num438 = 0; num438 < 30; num438++)
			{
				int num439 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 11, 0f, 0f, 0, newColor6);
				Dust dust255 = Main.dust[num439];
				Dust dust334 = dust255;
				dust334.velocity *= 1f + Main.rand.NextFloat() * 1f;
				if (num438 < 10)
				{
					Main.dust[num439].noGravity = true;
					dust255 = Main.dust[num439];
					dust334 = dust255;
					dust334.velocity *= 0.5f;
				}
			}
		}
		if (type == 346)
		{
			SoundEngine.PlaySound(in SoundID.Item27, position);
			for (int num440 = 0; num440 < 20; num440++)
			{
				int num442 = 10;
				if (ai[1] == 1f)
				{
					num442 = 4;
				}
				int num443 = Dust.NewDust(position, width, height, num442);
				Main.dust[num443].noGravity = true;
			}
		}
		if (type == 335)
		{
			SoundEngine.PlaySound(in SoundID.Item27, position);
			for (int num444 = 0; num444 < 20; num444++)
			{
				int num445 = 90 - (int)ai[1];
				int num446 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num445);
				Main.dust[num446].noLight = true;
				Main.dust[num446].scale = 0.8f;
			}
		}
		if (type == 318)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num447 = 0; num447 < 10; num447++)
			{
				int num448 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 30);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num448].noGravity = true;
				}
			}
		}
		if (type == 378)
		{
			for (int num449 = 0; num449 < 10; num449++)
			{
				int num450 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 30);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num450].noGravity = true;
				}
			}
		}
		else if (type == 311)
		{
			for (int num451 = 0; num451 < 5; num451++)
			{
				int num453 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 189);
				Main.dust[num453].scale = 0.85f;
				Main.dust[num453].noGravity = true;
				Dust dust12 = Main.dust[num453];
				Dust dust334 = dust12;
				dust334.velocity += velocity * 0.5f;
			}
		}
		else if (type == 316)
		{
			for (int num454 = 0; num454 < 5; num454++)
			{
				int num455 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 195);
				Main.dust[num455].scale = 0.85f;
				Main.dust[num455].noGravity = true;
				Dust dust13 = Main.dust[num455];
				Dust dust334 = dust13;
				dust334.velocity += velocity * 0.5f;
			}
		}
		else if (type == 184 || type == 195)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num456 = 0; num456 < 5; num456++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 7);
			}
		}
		else if (type == 275 || type == 276)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num457 = 0; num457 < 5; num457++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 7);
			}
		}
		else if (type == 291)
		{
			if (owner == Main.myPlayer)
			{
				NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 292, damage, knockBack, owner);
			}
		}
		else if (type == 295)
		{
			if (owner == Main.myPlayer)
			{
				NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 296, (int)((double)damage * 0.75), knockBack, owner);
			}
		}
		else if (type == 270 || type == 837)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y, 27);
			if (type == 270)
			{
				for (int num458 = 0; num458 < 20; num458++)
				{
					int num459 = Dust.NewDust(position, width, height, 26, 0f, 0f, 100);
					Main.dust[num459].noGravity = true;
					Dust dust14 = Main.dust[num459];
					Dust dust334 = dust14;
					dust334.velocity *= 1.2f;
					Main.dust[num459].scale = 1.3f;
					dust14 = Main.dust[num459];
					dust334 = dust14;
					dust334.velocity -= oldVelocity * 0.3f;
					num459 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, 5, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num459].noGravity = true;
					dust14 = Main.dust[num459];
					dust334 = dust14;
					dust334.velocity *= 3f;
				}
			}
			else
			{
				for (int num460 = 0; num460 < 20; num460++)
				{
					int num461 = Dust.NewDust(position, width, height, 26, 0f, 0f, 100);
					Main.dust[num461].noGravity = true;
					Dust dust15 = Main.dust[num461];
					Dust dust334 = dust15;
					dust334.velocity *= 1.2f;
					Main.dust[num461].scale = 1.3f;
					dust15 = Main.dust[num461];
					dust334 = dust15;
					dust334.velocity -= oldVelocity * 0.3f;
					num461 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, 6, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num461].noGravity = true;
					dust15 = Main.dust[num461];
					dust334 = dust15;
					dust334.velocity *= 3f;
				}
			}
		}
		else if (type == 265)
		{
			for (int num462 = 0; num462 < 15; num462++)
			{
				int num464 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 163, 0f, 0f, 100, default(Color), 1.2f);
				Main.dust[num464].noGravity = true;
				Dust dust16 = Main.dust[num464];
				Dust dust334 = dust16;
				dust334.velocity *= 1.2f;
				dust16 = Main.dust[num464];
				dust334 = dust16;
				dust334.velocity -= oldVelocity * 0.3f;
			}
		}
		else if (type == 355)
		{
			for (int num465 = 0; num465 < 15; num465++)
			{
				int num466 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 205, 0f, 0f, 100, default(Color), 1.2f);
				Main.dust[num466].noGravity = true;
				Dust dust17 = Main.dust[num466];
				Dust dust334 = dust17;
				dust334.velocity *= 1.2f;
				dust17 = Main.dust[num466];
				dust334 = dust17;
				dust334.velocity -= oldVelocity * 0.3f;
			}
		}
		else if (type == 304)
		{
			for (int num467 = 0; num467 < 3; num467++)
			{
				int num468 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 182, 0f, 0f, 100, default(Color), 0.8f);
				Main.dust[num468].noGravity = true;
				Dust dust18 = Main.dust[num468];
				Dust dust334 = dust18;
				dust334.velocity *= 1.2f;
				dust18 = Main.dust[num468];
				dust334 = dust18;
				dust334.velocity -= oldVelocity * 0.3f;
			}
		}
		else if (type == 263)
		{
			SoundEngine.PlaySound(in SoundID.Item27, position);
			for (int num469 = 0; num469 < 15; num469++)
			{
				int num470 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 92, velocity.X, velocity.Y, Main.rand.Next(0, 101), default(Color), 1f + (float)Main.rand.Next(40) * 0.01f);
				Main.dust[num470].noGravity = true;
				Dust dust19 = Main.dust[num470];
				Dust dust334 = dust19;
				dust334.velocity *= 2f;
			}
		}
		else if (type == 261)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num471 = 0; num471 < 15; num471++)
			{
				Dust dust299 = Dust.NewDustDirect(new Vector2(position.X, position.Y), width, height, 148);
				Dust dust22 = dust299;
				Dust dust334 = dust22;
				dust334.velocity *= 2f;
				dust299.velocity.Y -= 0.4f;
			}
			for (int num472 = 0; num472 < 3; num472++)
			{
				Dust dust300 = Dust.NewDustDirect(new Vector2(position.X, position.Y), width, height, 228);
				Dust dust21 = dust300;
				Dust dust334 = dust21;
				dust334.velocity *= 2f;
				dust300.noLight = true;
				dust21 = dust300;
				dust334 = dust21;
				dust334.scale *= 0.8f;
				dust300.velocity.Y -= 0.3f;
			}
		}
		else if (type == 928)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num473 = 0; num473 < 25; num473++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 5, velocity.X, velocity.Y, 0, Color.White, 1.3f);
			}
		}
		else if (type == 229)
		{
			for (int num476 = 0; num476 < 25; num476++)
			{
				int num477 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 157);
				Main.dust[num477].noGravity = true;
				Dust dust23 = Main.dust[num477];
				Dust dust334 = dust23;
				dust334.velocity *= 1.5f;
				Main.dust[num477].scale = 1.5f;
			}
		}
		else if (type == 239)
		{
			if (velocity.Y > 0f)
			{
				int num478 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height - 2f), 2, 2, 154);
				Main.dust[num478].position.X -= 2f;
				Main.dust[num478].alpha = 38;
				Dust dust24 = Main.dust[num478];
				Dust dust334 = dust24;
				dust334.velocity *= 0.1f;
				dust24 = Main.dust[num478];
				dust334 = dust24;
				dust334.velocity += -oldVelocity * 0.25f;
				Main.dust[num478].scale = 0.95f;
			}
		}
		else if (type == 245)
		{
			if (velocity.Y > 0f)
			{
				int num479 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height - 2f), 2, 2, 114);
				Main.dust[num479].noGravity = true;
				Main.dust[num479].position.X -= 2f;
				Main.dust[num479].alpha = 38;
				Dust dust26 = Main.dust[num479];
				Dust dust334 = dust26;
				dust334.velocity *= 0.1f;
				dust26 = Main.dust[num479];
				dust334 = dust26;
				dust334.velocity += -oldVelocity * 0.25f;
				Main.dust[num479].scale = 0.95f;
			}
		}
		else if (type == 264)
		{
			if (velocity.Y > 0f)
			{
				int num480 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height - 2f), 2, 2, 54);
				Main.dust[num480].noGravity = true;
				Main.dust[num480].position.X -= 2f;
				Main.dust[num480].alpha = 38;
				Dust dust27 = Main.dust[num480];
				Dust dust334 = dust27;
				dust334.velocity *= 0.1f;
				dust27 = Main.dust[num480];
				dust334 = dust27;
				dust334.velocity += -oldVelocity * 0.25f;
				Main.dust[num480].scale = 0.95f;
			}
		}
		else if (type == 206 || type == 225)
		{
			SoundEngine.PlaySound(6, (int)position.X, (int)position.Y);
			for (int num481 = 0; num481 < 5; num481++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 40);
			}
		}
		else if (type == 227)
		{
			SoundEngine.PlaySound(6, (int)position.X, (int)position.Y);
			for (int num482 = 0; num482 < 15; num482++)
			{
				int num483 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 157);
				Main.dust[num483].noGravity = true;
				Dust dust28 = Main.dust[num483];
				Dust dust334 = dust28;
				dust334.velocity += oldVelocity * Main.rand.NextFloat();
				Main.dust[num483].scale = 1.5f;
			}
		}
		else if (type == 237 && owner == Main.myPlayer)
		{
			NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 238, damage, knockBack, owner);
		}
		else if (type == 243 && owner == Main.myPlayer)
		{
			NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 244, damage, knockBack, owner);
		}
		else if (type == 120)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num484 = 0; num484 < 10; num484++)
			{
				int num485 = Dust.NewDust(new Vector2(position.X - velocity.X, position.Y - velocity.Y), width, height, 67, velocity.X, velocity.Y, 100);
				if (num484 < 5)
				{
					Main.dust[num485].noGravity = true;
				}
				Dust dust29 = Main.dust[num485];
				Dust dust334 = dust29;
				dust334.velocity *= 0.2f;
			}
		}
		else if (type == 181 || type == 189 || type == 566)
		{
			for (int num487 = 0; num487 < 6; num487++)
			{
				int num488 = Dust.NewDust(position, width, height, 150, velocity.X, velocity.Y, 50);
				Main.dust[num488].noGravity = true;
				Main.dust[num488].scale = 1f;
			}
		}
		else if (type == 178)
		{
			for (int num489 = 0; num489 < 85; num489++)
			{
				int num490 = Main.rand.Next(139, 143);
				int num491 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num490, velocity.X, velocity.Y, 0, default(Color), 1.2f);
				Main.dust[num491].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num491].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num491].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num491].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num491].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
				Main.dust[num491].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
				Dust dust31 = Main.dust[num491];
				Dust dust334 = dust31;
				dust334.scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
			}
			for (int num492 = 0; num492 < 40; num492++)
			{
				int num493 = Main.rand.Next(276, 283);
				int num494 = Gore.NewGore(position, velocity, num493);
				Main.gore[num494].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.gore[num494].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.gore[num494].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.gore[num494].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Gore gore7 = Main.gore[num494];
				Gore gore64 = gore7;
				gore64.scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
				Main.gore[num494].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
				Main.gore[num494].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
			}
		}
		else if (type == 289)
		{
			for (int num495 = 0; num495 < 30; num495++)
			{
				int num496 = Main.rand.Next(139, 143);
				int num498 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num496, velocity.X, velocity.Y, 0, default(Color), 1.2f);
				Main.dust[num498].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num498].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num498].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num498].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num498].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
				Main.dust[num498].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
				Dust dust33 = Main.dust[num498];
				Dust dust334 = dust33;
				dust334.scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
			}
			for (int num499 = 0; num499 < 15; num499++)
			{
				int num500 = Main.rand.Next(276, 283);
				int num501 = Gore.NewGore(position, velocity, num500);
				Main.gore[num501].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.gore[num501].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.gore[num501].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.gore[num501].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Gore gore8 = Main.gore[num501];
				Gore gore64 = gore8;
				gore64.scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
				Main.gore[num501].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
				Main.gore[num501].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
			}
		}
		else if (type == 475 || type == 505 || type == 506)
		{
			if (ai[1] == 0f)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			}
			if (ai[1] < 10f)
			{
				Vector2 vector50 = default(Vector2);
				((Vector2)(ref vector50))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num502 = 0f - velocity.X;
				float num503 = 0f - velocity.Y;
				float num504 = 1f;
				if (ai[0] <= 17f)
				{
					num504 = ai[0] / 17f;
				}
				int num505 = (int)(30f * num504);
				float num506 = 1f;
				if (ai[0] <= 30f)
				{
					num506 = ai[0] / 30f;
				}
				float num507 = 0.4f * num506;
				float num509 = num507;
				num503 += num509;
				for (int num510 = 0; num510 < num505; num510++)
				{
					float num511 = (float)Math.Sqrt(num502 * num502 + num503 * num503);
					float num512 = 5.6f;
					if (Math.Abs(num502) + Math.Abs(num503) < 1f)
					{
						num512 *= Math.Abs(num502) + Math.Abs(num503) / 1f;
					}
					num511 = num512 / num511;
					num502 *= num511;
					num503 *= num511;
					Math.Atan2(num503, num502);
					int num513 = 3;
					if (type == 506)
					{
						num513 = 30;
					}
					if (type == 505)
					{
						num513 = 239;
					}
					if ((float)num510 > ai[1])
					{
						for (int num514 = 0; num514 < 4; num514++)
						{
							int num515 = Dust.NewDust(vector50, width, height, num513);
							Main.dust[num515].noGravity = true;
							Dust dust35 = Main.dust[num515];
							Dust dust334 = dust35;
							dust334.velocity *= 0.3f;
						}
					}
					vector50.X += num502;
					vector50.Y += num503;
					num502 = 0f - velocity.X;
					num503 = 0f - velocity.Y;
					num509 += num507;
					num503 += num509;
				}
			}
		}
		else if (type == 171)
		{
			if (ai[1] == 0f)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			}
			if (ai[1] < 10f)
			{
				Vector2 vector51 = default(Vector2);
				((Vector2)(ref vector51))._002Ector(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num516 = 0f - velocity.X;
				float num517 = 0f - velocity.Y;
				float num518 = 1f;
				if (ai[0] <= 17f)
				{
					num518 = ai[0] / 17f;
				}
				int num520 = (int)(30f * num518);
				float num521 = 1f;
				if (ai[0] <= 30f)
				{
					num521 = ai[0] / 30f;
				}
				float num522 = 0.4f * num521;
				float num523 = num522;
				num517 += num523;
				for (int num524 = 0; num524 < num520; num524++)
				{
					float num525 = (float)Math.Sqrt(num516 * num516 + num517 * num517);
					float num526 = 5.6f;
					if (Math.Abs(num516) + Math.Abs(num517) < 1f)
					{
						num526 *= Math.Abs(num516) + Math.Abs(num517) / 1f;
					}
					num525 = num526 / num525;
					num516 *= num525;
					num517 *= num525;
					Math.Atan2(num517, num516);
					if ((float)num524 > ai[1])
					{
						for (int num527 = 0; num527 < 4; num527++)
						{
							int num528 = Dust.NewDust(vector51, width, height, 129);
							Main.dust[num528].noGravity = true;
							Dust dust37 = Main.dust[num528];
							Dust dust334 = dust37;
							dust334.velocity *= 0.3f;
						}
					}
					vector51.X += num516;
					vector51.Y += num517;
					num516 = 0f - velocity.X;
					num517 = 0f - velocity.Y;
					num523 += num522;
					num517 += num523;
				}
			}
		}
		else if (type == 117)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num529 = 0; num529 < 10; num529++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 26);
			}
		}
		else if (type == 166)
		{
			SoundEngine.PlaySound(in SoundID.Item51, position);
			for (int num531 = 0; num531 < 10; num531++)
			{
				int num532 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 76);
				Main.dust[num532].noGravity = true;
				Dust dust38 = Main.dust[num532];
				Dust dust334 = dust38;
				dust334.velocity -= oldVelocity * 0.25f;
			}
		}
		else if (type == 158)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num533 = 0; num533 < 10; num533++)
			{
				int num534 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 9);
				Main.dust[num534].noGravity = true;
				Dust dust39 = Main.dust[num534];
				Dust dust334 = dust39;
				dust334.velocity -= velocity * 0.5f;
			}
		}
		else if (type == 159)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num535 = 0; num535 < 10; num535++)
			{
				int num536 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 11);
				Main.dust[num536].noGravity = true;
				Dust dust40 = Main.dust[num536];
				Dust dust334 = dust40;
				dust334.velocity -= velocity * 0.5f;
			}
		}
		else if (type == 160)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num537 = 0; num537 < 10; num537++)
			{
				int num538 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 19);
				Main.dust[num538].noGravity = true;
				Dust dust41 = Main.dust[num538];
				Dust dust334 = dust41;
				dust334.velocity -= velocity * 0.5f;
			}
		}
		else if (type == 161)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num539 = 0; num539 < 10; num539++)
			{
				int num540 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 11);
				Main.dust[num540].noGravity = true;
				Dust dust42 = Main.dust[num540];
				Dust dust334 = dust42;
				dust334.velocity -= velocity * 0.5f;
			}
		}
		else if (type >= 191 && type <= 194)
		{
			int num542 = Gore.NewGore(new Vector2(position.X - (float)(width / 2), position.Y - (float)(height / 2)), new Vector2(0f, 0f), Main.rand.Next(61, 64), scale);
			Gore gore9 = Main.gore[num542];
			Gore gore64 = gore9;
			gore64.velocity *= 0.1f;
		}
		else if (!Main.projPet[type])
		{
			if (type == 93)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num543 = 0; num543 < 10; num543++)
				{
					int num544 = Dust.NewDust(position, width, height, 57, 0f, 0f, 100);
					Main.dust[num544].noGravity = true;
					Main.dust[num544].fadeIn = 1f;
					Main.dust[num544].velocity.X *= 2f;
					Main.dust[num544].velocity.Y *= 2f;
					Main.dust[num544].velocity.Y -= Main.rand.NextFloat() * 1.5f;
				}
			}
			else if (type == 99 || type == 1013 || type == 727 || type == 1014 || type == 1021)
			{
				short num545 = 1;
				num545 = type switch
				{
					1013 => 243, 
					727 => 40, 
					1014 => 12, 
					1021 => 323, 
					_ => 1, 
				};
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num546 = 0; num546 < 30; num546++)
				{
					int num547 = Dust.NewDust(position, width, height, num545);
					if (Main.rand.Next(2) == 0)
					{
						Dust dust43 = Main.dust[num547];
						Dust dust334 = dust43;
						dust334.scale *= 1.4f;
					}
					velocity *= 1.9f;
				}
				if (type == 1014 && owner == Main.myPlayer)
				{
					int number = Item.NewItem(new EntitySource_Loot(this), position, base.Size, 29);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number, 1f);
					}
				}
			}
			else if (type == 1005)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num548 = 0; num548 < 10; num548++)
				{
					int num549 = Dust.NewDust(position, width, height, 1);
					if (Main.rand.Next(2) == 0)
					{
						Dust dust44 = Main.dust[num549];
						Dust dust334 = dust44;
						dust334.scale *= 1.1f;
					}
					velocity *= 1.6f;
				}
			}
			else if (type == 772)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num550 = 0; num550 < 6; num550++)
				{
					Dust.NewDust(position, width, height, 1);
					velocity *= 1.9f;
				}
				for (int num551 = 0; num551 < 20; num551++)
				{
					Dust dust301 = Dust.NewDustDirect(position, width, height, Main.rand.NextFromList<int>(86, 87, 88, 89, 90), 0f, 0f, 0, default(Color), 0.7f);
					dust301.noGravity = true;
					Dust dust47 = dust301;
					Dust dust334 = dust47;
					dust334.velocity *= 2.9f;
					dust301.velocity.Y *= 0.8f;
					dust301.fadeIn = 1.1f;
				}
				for (int num553 = 0; num553 < 7; num553++)
				{
					Dust dust302 = Dust.NewDustDirect(position, width, height, Main.rand.NextFromList<int>(86, 87, 88, 89, 90), 0f, 0f, 0, default(Color), 0.7f);
					dust302.noGravity = true;
					Dust dust45 = dust302;
					Dust dust334 = dust45;
					dust334.velocity *= 2.9f;
					dust302.velocity.Y *= 0.8f;
					dust302.fadeIn = 1.1f;
					dust302.noLight = true;
				}
				if (owner == Main.myPlayer)
				{
					DropGeodeGems();
				}
			}
			else if (type == 763)
			{
				for (int num554 = 0; num554 < 4; num554++)
				{
					int num555 = Dust.NewDust(position, width, height, 40);
					if (Main.rand.Next(2) == 0)
					{
						Dust dust48 = Main.dust[num555];
						Dust dust334 = dust48;
						dust334.scale *= 0.8f;
					}
					Main.dust[num555].noGravity = true;
					velocity *= 1.9f;
				}
			}
			else if (type == 655)
			{
				SoundEngine.PlaySound(4, (int)position.X, (int)position.Y);
				for (int num556 = 0; num556 < 30; num556++)
				{
					int num557 = Dust.NewDust(position, width, height, 147);
					if (Main.rand.Next(2) == 0)
					{
						Dust dust49 = Main.dust[num557];
						Dust dust334 = dust49;
						dust334.scale *= 1.4f;
					}
					velocity *= 1.9f;
				}
				if (Main.netMode != 1 && !wet)
				{
					int num558 = 2;
					if (Main.rand.Next(3) == 0)
					{
						num558++;
					}
					if (Main.rand.Next(3) == 0)
					{
						num558++;
					}
					if (Main.rand.Next(3) == 0)
					{
						num558++;
					}
					int availableAmountOfNPCsToSpawnUpToSlot = NPC.GetAvailableAmountOfNPCsToSpawnUpToSlot(num558);
					for (int num559 = 0; num559 < availableAmountOfNPCsToSpawnUpToSlot; num559++)
					{
						int num560 = Main.rand.Next(210, 212);
						int num561 = NPC.NewNPC(GetNPCSource_FromThis(), (int)base.Center.X, (int)base.Center.Y, num560, 1);
						Main.npc[num561].velocity.X = (float)Main.rand.Next(-200, 201) * 0.002f;
						Main.npc[num561].velocity.Y = (float)Main.rand.Next(-200, 201) * 0.002f;
						Main.npc[num561].netUpdate = true;
					}
				}
			}
			else if (type == 728)
			{
				SoundEngine.PlaySound(in SoundID.Item10, position);
				for (int num562 = 0; num562 < 7; num562++)
				{
					Dust.NewDust(position, width, height, 58, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 0.8f);
				}
				for (float num564 = 0f; num564 < 1f; num564 += 0.125f)
				{
					Vector2 center25 = base.Center;
					Vector2 unitY11 = Vector2.UnitY;
					double radians39 = num564 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * 0.5f;
					center4 = default(Vector2);
					Dust.NewDustPerfect(center25, 278, unitY11.RotatedBy(radians39, center4) * (4f + Main.rand.NextFloat() * 4f), 150, Color.CornflowerBlue).noGravity = true;
				}
				for (float num565 = 0f; num565 < 1f; num565 += 0.25f)
				{
					Vector2 center26 = base.Center;
					Vector2 unitY12 = Vector2.UnitY;
					double radians40 = num565 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * 0.5f;
					center4 = default(Vector2);
					Dust.NewDustPerfect(center26, 278, unitY12.RotatedBy(radians40, center4) * (2f + Main.rand.NextFloat() * 3f), 150, Color.Gold).noGravity = true;
				}
				Vector2 vector52 = default(Vector2);
				((Vector2)(ref vector52))._002Ector((float)Main.screenWidth, (float)Main.screenHeight);
				val6 = base.Hitbox;
				if (((Rectangle)(ref val6)).Intersects(Utils.CenteredRectangle(Main.screenPosition + vector52 / 2f, vector52 + new Vector2(400f))))
				{
					for (int num566 = 0; num566 < 7; num566++)
					{
						Gore.NewGore(position, Main.rand.NextVector2CircularEdge(0.5f, 0.5f) * ((Vector2)(ref velocity)).Length(), Utils.SelectRandom<int>(Main.rand, 16, 17, 17, 17, 17, 17, 17, 17));
					}
				}
			}
			else if (type == 729)
			{
				SoundEngine.PlaySound(in SoundID.Item10, position);
				for (int num567 = 0; num567 < 10; num567++)
				{
					Dust dust303 = Dust.NewDustDirect(position, width, height, 279, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 1.2f);
					dust303.noGravity = true;
					dust303.velocity.X *= 2f;
				}
			}
			else if (type == 723 || type == 724 || type == 725 || type == 726 || type == 907)
			{
				if (type == 723)
				{
					SoundEngine.PlaySound(in SoundID.Item10, position);
					for (int num568 = 0; num568 < 10; num568++)
					{
						Dust dust304 = Dust.NewDustDirect(position, width, height, 88, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 1.2f);
						dust304.noGravity = true;
						dust304.velocity.X *= 2f;
					}
					for (int num569 = 0; num569 < 3; num569++)
					{
						Gore gore57 = Gore.NewGoreDirect(position, new Vector2(velocity.X * 0.05f, velocity.Y * 0.05f), Utils.SelectRandom<int>(Main.rand, 16, 17, 17));
						Gore gore10 = gore57;
						Gore gore64 = gore10;
						gore64.velocity *= 2f;
					}
					if (owner == Main.myPlayer && Main.player[owner].starCloakCooldown == 0)
					{
						Main.player[owner].starCloakCooldown = 60;
						int number2 = Item.NewItem(GetItemSource_DropAsItem(), (int)position.X, (int)position.Y, width, height, 4143);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number2, 1f);
						}
					}
				}
				else
				{
					if (type == 907)
					{
						SoundEngine.PlaySound(in SoundID.Item27, position);
					}
					else
					{
						SoundEngine.PlaySound(in SoundID.Item10, position);
					}
					for (int num570 = 0; num570 < 10; num570++)
					{
						Dust dust305 = Main.dust[Dust.NewDust(position, width, height, 58, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 1.2f)];
						if (type == 907)
						{
							Dust dust52 = dust305;
							Dust dust334 = dust52;
							dust334.velocity *= 0.75f;
						}
					}
					for (int num571 = 0; num571 < 3; num571++)
					{
						Gore gore58 = Main.gore[Gore.NewGore(position, new Vector2(velocity.X * 0.05f, velocity.Y * 0.05f), Main.rand.Next(16, 18))];
						if (type == 907)
						{
							Gore gore11 = gore58;
							Gore gore64 = gore11;
							gore64.velocity *= 0.5f;
						}
					}
				}
			}
			else if (type == 91 || type == 92)
			{
				SoundEngine.PlaySound(in SoundID.Item10, position);
				for (int num572 = 0; num572 < 10; num572++)
				{
					Dust.NewDust(position, width, height, 58, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 1.2f);
				}
				for (int num573 = 0; num573 < 3; num573++)
				{
					Gore.NewGore(position, new Vector2(velocity.X * 0.05f, velocity.Y * 0.05f), Main.rand.Next(16, 18));
				}
				if ((type == 91 || (type == 92 && ai[0] > 0f)) && owner == Main.myPlayer)
				{
					float x = position.X + (float)Main.rand.Next(-400, 400);
					float y = position.Y - (float)Main.rand.Next(600, 900);
					Vector2 vector53 = default(Vector2);
					((Vector2)(ref vector53))._002Ector(x, y);
					float num575 = position.X + (float)(width / 2) - vector53.X;
					float num576 = position.Y + (float)(height / 2) - vector53.Y;
					int num577 = 22;
					float num578 = (float)Math.Sqrt(num575 * num575 + num576 * num576);
					num578 = (float)num577 / num578;
					num575 *= num578;
					num576 *= num578;
					int num579 = damage;
					if (type == 91)
					{
						num579 /= 3;
					}
					int num580 = NewProjectile(GetProjectileSource_FromThis(), x, y, num575, num576, 92, num579, knockBack, owner);
					if (type == 91)
					{
						Main.projectile[num580].ai[1] = position.Y;
						Main.projectile[num580].ai[0] = 1f;
					}
					else
					{
						Main.projectile[num580].ai[1] = position.Y;
					}
				}
			}
			else if (type == 89)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num581 = 0; num581 < 5; num581++)
				{
					int num582 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 68);
					Main.dust[num582].noGravity = true;
					Dust dust53 = Main.dust[num582];
					Dust dust334 = dust53;
					dust334.velocity *= 1.5f;
					dust53 = Main.dust[num582];
					dust334 = dust53;
					dust334.scale *= 0.9f;
				}
				if (type == 89 && owner == Main.myPlayer)
				{
					for (int num583 = 0; num583 < 2; num583++)
					{
						float num584 = (0f - velocity.X) * (float)Main.rand.Next(40, 70) * 0.01f + (float)Main.rand.Next(-20, 21) * 0.4f;
						float num587 = (0f - velocity.Y) * (float)Main.rand.Next(40, 70) * 0.01f + (float)Main.rand.Next(-20, 21) * 0.4f;
						NewProjectile(GetProjectileSource_FromThis(), position.X + num584, position.Y + num587, num584, num587, 90, (int)((double)damage * 0.5), 0f, owner);
					}
				}
			}
			else if (type == 967)
			{
				SoundEngine.PlaySound(in SoundID.Item45, position);
				for (int num588 = 0; num588 < 20; num588++)
				{
					int num589 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 219, velocity.X, velocity.Y, 0, default(Color), 0.5f + (float)Main.rand.Next(-20, 40) * 0.01f);
					Main.dust[num589].noGravity = true;
					Main.dust[num589].velocity = Main.rand.NextVector2Circular(6f, 6f);
				}
			}
			else if (type == 969)
			{
				ActiveSound activeSound2 = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
				if (activeSound2 != null)
				{
					activeSound2.Volume = 0f;
					activeSound2.Stop();
				}
			}
			else if (type == 177)
			{
				for (int num590 = 0; num590 < 20; num590++)
				{
					int num591 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 137, 0f, 0f, Main.rand.Next(0, 101), default(Color), 1f + (float)Main.rand.Next(-20, 40) * 0.01f);
					Dust dust54 = Main.dust[num591];
					Dust dust334 = dust54;
					dust334.velocity -= oldVelocity * 0.2f;
					if (Main.rand.Next(3) == 0)
					{
						dust54 = Main.dust[num591];
						dust334 = dust54;
						dust334.scale *= 0.8f;
						dust54 = Main.dust[num591];
						dust334 = dust54;
						dust334.velocity *= 0.5f;
					}
					else
					{
						Main.dust[num591].noGravity = true;
					}
				}
			}
			else if (type == 119 || type == 118 || type == 128 || type == 359)
			{
				int num592 = 10;
				if (type == 119 || type == 359)
				{
					num592 = 20;
				}
				SoundEngine.PlaySound(in SoundID.Item27, position);
				for (int num593 = 0; num593 < num592; num593++)
				{
					int num594 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 92);
					if (Main.rand.Next(3) != 0)
					{
						Dust dust55 = Main.dust[num594];
						Dust dust334 = dust55;
						dust334.velocity *= 2f;
						Main.dust[num594].noGravity = true;
						dust55 = Main.dust[num594];
						dust334 = dust55;
						dust334.scale *= 1.75f;
					}
					else
					{
						Dust dust56 = Main.dust[num594];
						Dust dust334 = dust56;
						dust334.scale *= 0.5f;
					}
				}
			}
			else if (type == 309)
			{
				int num595 = 10;
				SoundEngine.PlaySound(in SoundID.Item27, position);
				for (int num596 = 0; num596 < num595; num596++)
				{
					int num598 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 185);
					if (Main.rand.Next(2) == 0)
					{
						Dust dust57 = Main.dust[num598];
						Dust dust334 = dust57;
						dust334.velocity *= 2f;
						Main.dust[num598].noGravity = true;
						dust57 = Main.dust[num598];
						dust334 = dust57;
						dust334.scale *= 1.75f;
					}
				}
			}
			else if (type == 308)
			{
				int num599 = 80;
				SoundEngine.PlaySound(in SoundID.Item27, position);
				for (int num600 = 0; num600 < num599; num600++)
				{
					int num601 = Dust.NewDust(new Vector2(position.X, position.Y + 16f), width, height - 16, 185);
					Dust dust58 = Main.dust[num601];
					Dust dust334 = dust58;
					dust334.velocity *= 2f;
					Main.dust[num601].noGravity = true;
					dust58 = Main.dust[num601];
					dust334 = dust58;
					dust334.scale *= 1.15f;
				}
			}
			else if (aiStyle == 29 && type <= 126)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				int num602 = type - 121 + 86;
				for (int num603 = 0; num603 < 15; num603++)
				{
					int num604 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num602, oldVelocity.X, oldVelocity.Y, 50, default(Color), 1.2f);
					Main.dust[num604].noGravity = true;
					Dust dust60 = Main.dust[num604];
					Dust dust334 = dust60;
					dust334.scale *= 1.25f;
					dust60 = Main.dust[num604];
					dust334 = dust60;
					dust334.velocity *= 0.5f;
				}
			}
			else if (type == 597)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num605 = 0; num605 < 15; num605++)
				{
					int num606 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 262, oldVelocity.X, oldVelocity.Y, 50, default(Color), 1.2f);
					Main.dust[num606].noGravity = true;
					Dust dust61 = Main.dust[num606];
					Dust dust334 = dust61;
					dust334.scale *= 1.25f;
					dust61 = Main.dust[num606];
					dust334 = dust61;
					dust334.velocity *= 0.5f;
				}
			}
			else if (type == 731)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num607 = 0; num607 < 15; num607++)
				{
					Dust dust307 = Dust.NewDustDirect(position, width, height, 226, oldVelocity.X * 0.5f, oldVelocity.Y * 0.5f, 50, default(Color), 0.5f);
					if (Main.rand.Next(3) != 0)
					{
						dust307.noGravity = true;
						Dust dust62 = dust307;
						Dust dust334 = dust62;
						dust334.scale *= 1.5f;
						dust62 = dust307;
						dust334 = dust62;
						dust334.velocity *= 0.5f;
					}
				}
			}
			else if (type == 337)
			{
				SoundEngine.PlaySound(in SoundID.Item27, position);
				for (int num609 = 0; num609 < 10; num609++)
				{
					int num610 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 197);
					Main.dust[num610].noGravity = true;
				}
			}
			else if (type == 379 || type == 377)
			{
				for (int num611 = 0; num611 < 5; num611++)
				{
					int num612 = Dust.NewDust(position, width, height, 171, 0f, 0f, 100);
					Main.dust[num612].scale = (float)Main.rand.Next(1, 10) * 0.1f;
					Main.dust[num612].noGravity = true;
					Main.dust[num612].fadeIn = 1.5f;
					Dust dust63 = Main.dust[num612];
					Dust dust334 = dust63;
					dust334.velocity *= 0.75f;
				}
			}
			else if (type == 80)
			{
				if (ai[0] >= 0f)
				{
					SoundEngine.PlaySound(in SoundID.Item27, position);
					for (int num613 = 0; num613 < 10; num613++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 67);
					}
				}
				int num614 = (int)position.X / 16;
				int num615 = (int)position.Y / 16;
				if (Main.tile[num614, num615] == null)
				{
					Main.tile[num614, num615] = default(Tile);
				}
				if (Main.tile[num614, num615].type == 127 && Main.tile[num614, num615].active())
				{
					WorldGen.KillTile(num614, num615);
				}
			}
			else if (type == 76 || type == 77 || type == 78)
			{
				for (int num616 = 0; num616 < 5; num616++)
				{
					int num617 = Dust.NewDust(position, width, height, 27, 0f, 0f, 80, default(Color), 1.5f);
					Main.dust[num617].noGravity = true;
				}
			}
			else if (type == 55 || type == 719)
			{
				for (int num618 = 0; num618 < 5; num618++)
				{
					int num620 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 18, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num620].noGravity = true;
				}
			}
			else if (type == 51 || type == 267)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num621 = 0; num621 < 5; num621++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 0, 0f, 0f, 0, default(Color), 0.7f);
				}
			}
			else if (type == 478)
			{
				if (owner == Main.myPlayer)
				{
					NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 480, (int)((double)damage * 0.8), knockBack * 0.5f, owner);
				}
			}
			else if (type == 477 || type == 479)
			{
				for (int num622 = 0; num622 < 5; num622++)
				{
				}
				Collision.HitTiles(position, velocity, width, height);
			}
			else if (type == 2 || type == 82)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num623 = 0; num623 < 10; num623++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100);
				}
			}
			else if (type == 474)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num624 = 0; num624 < 20; num624++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 26, 0f, 0f, 0, default(Color), 0.9f);
				}
			}
			else if (type == 172)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num625 = 0; num625 < 20; num625++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 135, 0f, 0f, 100);
				}
			}
			else if (type == 103)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num626 = 0; num626 < 20; num626++)
				{
					int num627 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 75, 0f, 0f, 100);
					if (Main.rand.Next(2) == 0)
					{
						Dust dust67 = Main.dust[num627];
						Dust dust334 = dust67;
						dust334.scale *= 2.5f;
						Main.dust[num627].noGravity = true;
						dust67 = Main.dust[num627];
						dust334 = dust67;
						dust334.velocity *= 5f;
					}
				}
			}
			else if (type == 278)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num628 = 0; num628 < 20; num628++)
				{
					int num629 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 169, 0f, 0f, 100);
					if (Main.rand.Next(2) == 0)
					{
						Dust dust68 = Main.dust[num629];
						Dust dust334 = dust68;
						dust334.scale *= 1.5f;
						Main.dust[num629].noGravity = true;
						dust68 = Main.dust[num629];
						dust334 = dust68;
						dust334.velocity *= 5f;
					}
				}
			}
			else if (type == 3 || type == 48 || type == 54 || type == 599 || type == 909)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num631 = 0; num631 < 10; num631++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 1, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.75f);
				}
			}
			else if (type == 330)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num632 = 0; num632 < 10; num632++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 0, velocity.X * 0.4f, velocity.Y * 0.4f, 0, default(Color), 0.75f);
				}
			}
			else if (type == 4)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num633 = 0; num633 < 10; num633++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 14, 0f, 0f, 150, default(Color), 1.1f);
				}
			}
			else if (type == 5)
			{
				SoundEngine.PlaySound(in SoundID.Item10, position);
				for (int num634 = 0; num634 < 60; num634++)
				{
					int num1030 = Main.rand.Next(3);
					Dust.NewDust(position, width, height, num1030 switch
					{
						0 => 15, 
						1 => 57, 
						_ => 58, 
					}, velocity.X * 0.5f, velocity.Y * 0.5f, 150, default(Color), 1.5f);
				}
			}
			else if (type == 9 || type == 12 || type == 503 || type == 955)
			{
				SoundEngine.PlaySound(in SoundID.Item10, position);
				if (type == 12 || type == 955)
				{
					Color newColor7 = Color.CornflowerBlue;
					if (Main.tenthAnniversaryWorld && (type == 12 || type == 955))
					{
						newColor7 = Color.HotPink;
						ref Color reference = ref newColor7;
						((Color)(ref reference)).A = (byte)(((Color)(ref reference)).A / 2);
					}
					for (int num635 = 0; num635 < 7; num635++)
					{
						Dust.NewDust(position, width, height, 58, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 0.8f);
					}
					for (float num636 = 0f; num636 < 1f; num636 += 0.125f)
					{
						Vector2 center27 = base.Center;
						Vector2 unitY13 = Vector2.UnitY;
						double radians41 = num636 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * 0.5f;
						center4 = default(Vector2);
						Dust.NewDustPerfect(center27, 278, unitY13.RotatedBy(radians41, center4) * (4f + Main.rand.NextFloat() * 4f), 150, newColor7).noGravity = true;
					}
					for (float num637 = 0f; num637 < 1f; num637 += 0.25f)
					{
						Vector2 center28 = base.Center;
						Vector2 unitY14 = Vector2.UnitY;
						double radians42 = num637 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * 0.5f;
						center4 = default(Vector2);
						Dust.NewDustPerfect(center28, 278, unitY14.RotatedBy(radians42, center4) * (2f + Main.rand.NextFloat() * 3f), 150, Color.Gold).noGravity = true;
					}
					Vector2 vector54 = default(Vector2);
					((Vector2)(ref vector54))._002Ector((float)Main.screenWidth, (float)Main.screenHeight);
					val6 = base.Hitbox;
					if (((Rectangle)(ref val6)).Intersects(Utils.CenteredRectangle(Main.screenPosition + vector54 / 2f, vector54 + new Vector2(400f))))
					{
						for (int num638 = 0; num638 < 7; num638++)
						{
							Gore.NewGore(position, Main.rand.NextVector2CircularEdge(0.5f, 0.5f) * ((Vector2)(ref velocity)).Length(), Utils.SelectRandom<int>(Main.rand, 16, 17, 17, 17, 17, 17, 17, 17));
						}
					}
				}
				else
				{
					int num639 = 10;
					int num641 = 3;
					if (type == 503)
					{
						num639 = 40;
						num641 = 2;
						velocity /= 2f;
					}
					for (int num642 = 0; num642 < num639; num642++)
					{
						Dust.NewDust(position, width, height, 58, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 1.2f);
					}
					for (int num643 = 0; num643 < num641; num643++)
					{
						int num644 = Main.rand.Next(16, 18);
						if (type == 503)
						{
							num644 = 16;
						}
						Gore.NewGore(position, new Vector2(velocity.X * 0.05f, velocity.Y * 0.05f), num644);
					}
					if (type == 12 && damage < 100)
					{
						for (int num645 = 0; num645 < 10; num645++)
						{
							Dust.NewDust(position, width, height, 57, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 1.2f);
						}
						for (int num646 = 0; num646 < 3; num646++)
						{
							Gore.NewGore(position, new Vector2(velocity.X * 0.05f, velocity.Y * 0.05f), Main.rand.Next(16, 18));
						}
					}
				}
			}
			else if (type == 281)
			{
				if (ai[0] != -3f)
				{
					SoundEngine.PlaySound(4, (int)position.X, (int)position.Y);
					int num647 = Gore.NewGore(position, new Vector2((float)Main.rand.Next(-20, 21) * 0.2f, (float)Main.rand.Next(-20, 21) * 0.2f), 76);
					Gore gore12 = Main.gore[num647];
					Gore gore64 = gore12;
					gore64.velocity -= velocity * 0.5f;
					num647 = Gore.NewGore(new Vector2(position.X, position.Y), new Vector2((float)Main.rand.Next(-20, 21) * 0.2f, (float)Main.rand.Next(-20, 21) * 0.2f), 77);
					gore12 = Main.gore[num647];
					gore64 = gore12;
					gore64.velocity -= velocity * 0.5f;
					SoundEngine.PlaySound(in SoundID.Item14, position);
					for (int num648 = 0; num648 < 20; num648++)
					{
						int num649 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust73 = Main.dust[num649];
						Dust dust334 = dust73;
						dust334.velocity *= 1.4f;
					}
					for (int num650 = 0; num650 < 10; num650++)
					{
						int num652 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num652].noGravity = true;
						Dust dust72 = Main.dust[num652];
						Dust dust334 = dust72;
						dust334.velocity *= 5f;
						num652 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust72 = Main.dust[num652];
						dust334 = dust72;
						dust334.velocity *= 3f;
					}
					Vector2 val25 = new Vector2(position.X, position.Y);
					center4 = default(Vector2);
					num647 = Gore.NewGore(val25, center4, Main.rand.Next(61, 64));
					gore12 = Main.gore[num647];
					gore64 = gore12;
					gore64.velocity *= 0.4f;
					Main.gore[num647].velocity.X += 1f;
					Main.gore[num647].velocity.Y += 1f;
					Vector2 val26 = new Vector2(position.X, position.Y);
					center4 = default(Vector2);
					num647 = Gore.NewGore(val26, center4, Main.rand.Next(61, 64));
					gore12 = Main.gore[num647];
					gore64 = gore12;
					gore64.velocity *= 0.4f;
					Main.gore[num647].velocity.X -= 1f;
					Main.gore[num647].velocity.Y += 1f;
					Vector2 val27 = new Vector2(position.X, position.Y);
					center4 = default(Vector2);
					num647 = Gore.NewGore(val27, center4, Main.rand.Next(61, 64));
					gore12 = Main.gore[num647];
					gore64 = gore12;
					gore64.velocity *= 0.4f;
					Main.gore[num647].velocity.X += 1f;
					Main.gore[num647].velocity.Y -= 1f;
					Vector2 val28 = new Vector2(position.X, position.Y);
					center4 = default(Vector2);
					num647 = Gore.NewGore(val28, center4, Main.rand.Next(61, 64));
					gore12 = Main.gore[num647];
					gore64 = gore12;
					gore64.velocity *= 0.4f;
					Main.gore[num647].velocity.X -= 1f;
					Main.gore[num647].velocity.Y -= 1f;
					if (damage > 0)
					{
						position.X += width / 2;
						position.Y += height / 2;
						width = 128;
						height = 128;
						position.X -= width / 2;
						position.Y -= height / 2;
						if (ai[0] == -2f)
						{
							hostile = true;
						}
						Damage();
					}
				}
			}
			else if (type == 162)
			{
				SoundEngine.PlaySound(in SoundID.Item14, position);
				for (int num653 = 0; num653 < 20; num653++)
				{
					int num654 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust78 = Main.dust[num654];
					Dust dust334 = dust78;
					dust334.velocity *= 1.4f;
				}
				for (int num655 = 0; num655 < 10; num655++)
				{
					int num656 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
					Main.dust[num656].noGravity = true;
					Dust dust77 = Main.dust[num656];
					Dust dust334 = dust77;
					dust334.velocity *= 5f;
					num656 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust77 = Main.dust[num656];
					dust334 = dust77;
					dust334.velocity *= 3f;
				}
				Vector2 val29 = new Vector2(position.X, position.Y);
				center4 = default(Vector2);
				int num657 = Gore.NewGore(val29, center4, Main.rand.Next(61, 64));
				Gore gore13 = Main.gore[num657];
				Gore gore64 = gore13;
				gore64.velocity *= 0.4f;
				Main.gore[num657].velocity.X += 1f;
				Main.gore[num657].velocity.Y += 1f;
				Vector2 val30 = new Vector2(position.X, position.Y);
				center4 = default(Vector2);
				num657 = Gore.NewGore(val30, center4, Main.rand.Next(61, 64));
				gore13 = Main.gore[num657];
				gore64 = gore13;
				gore64.velocity *= 0.4f;
				Main.gore[num657].velocity.X -= 1f;
				Main.gore[num657].velocity.Y += 1f;
				Vector2 val31 = new Vector2(position.X, position.Y);
				center4 = default(Vector2);
				num657 = Gore.NewGore(val31, center4, Main.rand.Next(61, 64));
				gore13 = Main.gore[num657];
				gore64 = gore13;
				gore64.velocity *= 0.4f;
				Main.gore[num657].velocity.X += 1f;
				Main.gore[num657].velocity.Y -= 1f;
				Vector2 val32 = new Vector2(position.X, position.Y);
				center4 = default(Vector2);
				num657 = Gore.NewGore(val32, center4, Main.rand.Next(61, 64));
				gore13 = Main.gore[num657];
				gore64 = gore13;
				gore64.velocity *= 0.4f;
				Main.gore[num657].velocity.X -= 1f;
				Main.gore[num657].velocity.Y -= 1f;
				position.X += width / 2;
				position.Y += height / 2;
				width = 128;
				height = 128;
				position.X -= width / 2;
				position.Y -= height / 2;
				Damage();
			}
			else if (type == 240)
			{
				SoundEngine.PlaySound(in SoundID.Item14, position);
				for (int num658 = 0; num658 < 20; num658++)
				{
					int num659 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust81 = Main.dust[num659];
					Dust dust334 = dust81;
					dust334.velocity *= 1.4f;
				}
				for (int num660 = 0; num660 < 10; num660++)
				{
					int num661 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
					Main.dust[num661].noGravity = true;
					Dust dust80 = Main.dust[num661];
					Dust dust334 = dust80;
					dust334.velocity *= 5f;
					num661 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust80 = Main.dust[num661];
					dust334 = dust80;
					dust334.velocity *= 3f;
				}
				Vector2 val33 = new Vector2(position.X, position.Y);
				center4 = default(Vector2);
				int num663 = Gore.NewGore(val33, center4, Main.rand.Next(61, 64));
				Gore gore15 = Main.gore[num663];
				Gore gore64 = gore15;
				gore64.velocity *= 0.4f;
				Main.gore[num663].velocity.X += 1f;
				Main.gore[num663].velocity.Y += 1f;
				Vector2 val34 = new Vector2(position.X, position.Y);
				center4 = default(Vector2);
				num663 = Gore.NewGore(val34, center4, Main.rand.Next(61, 64));
				gore15 = Main.gore[num663];
				gore64 = gore15;
				gore64.velocity *= 0.4f;
				Main.gore[num663].velocity.X -= 1f;
				Main.gore[num663].velocity.Y += 1f;
				Vector2 val35 = new Vector2(position.X, position.Y);
				center4 = default(Vector2);
				num663 = Gore.NewGore(val35, center4, Main.rand.Next(61, 64));
				gore15 = Main.gore[num663];
				gore64 = gore15;
				gore64.velocity *= 0.4f;
				Main.gore[num663].velocity.X += 1f;
				Main.gore[num663].velocity.Y -= 1f;
				Vector2 val36 = new Vector2(position.X, position.Y);
				center4 = default(Vector2);
				num663 = Gore.NewGore(val36, center4, Main.rand.Next(61, 64));
				gore15 = Main.gore[num663];
				gore64 = gore15;
				gore64.velocity *= 0.4f;
				Main.gore[num663].velocity.X -= 1f;
				Main.gore[num663].velocity.Y -= 1f;
				position.X += width / 2;
				position.Y += height / 2;
				width = 96;
				height = 96;
				position.X -= width / 2;
				position.Y -= height / 2;
				Damage();
			}
			else
			{
				_ = type;
				if (type == 283 || type == 282)
				{
					SoundEngine.PlaySound(in SoundID.Item10, position);
					for (int num664 = 0; num664 < 10; num664++)
					{
						int num665 = Dust.NewDust(position, width, height, 171, 0f, 0f, 100);
						Main.dust[num665].scale = (float)Main.rand.Next(1, 10) * 0.1f;
						Main.dust[num665].noGravity = true;
						Main.dust[num665].fadeIn = 1.5f;
						Dust dust83 = Main.dust[num665];
						Dust dust334 = dust83;
						dust334.velocity *= 0.75f;
					}
				}
				else if (type == 284)
				{
					for (int num666 = 0; num666 < 10; num666++)
					{
						int num667 = Main.rand.Next(139, 143);
						int num668 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num667, (0f - velocity.X) * 0.3f, (0f - velocity.Y) * 0.3f, 0, default(Color), 1.2f);
						Main.dust[num668].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.dust[num668].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.dust[num668].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.dust[num668].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.dust[num668].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
						Main.dust[num668].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
						Dust dust85 = Main.dust[num668];
						Dust dust334 = dust85;
						dust334.scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
					}
					for (int num669 = 0; num669 < 5; num669++)
					{
						int num670 = Main.rand.Next(276, 283);
						int num671 = Gore.NewGore(position, -velocity * 0.3f, num670);
						Main.gore[num671].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.gore[num671].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.gore[num671].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.gore[num671].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
						Gore gore16 = Main.gore[num671];
						Gore gore64 = gore16;
						gore64.scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
						Main.gore[num671].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
						Main.gore[num671].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
					}
				}
				else if (type == 286)
				{
					SoundEngine.PlaySound(in SoundID.Item14, position);
					for (int num672 = 0; num672 < 7; num672++)
					{
						int num674 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					}
					for (int num675 = 0; num675 < 3; num675++)
					{
						int num676 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num676].noGravity = true;
						Dust dust87 = Main.dust[num676];
						Dust dust334 = dust87;
						dust334.velocity *= 3f;
						num676 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust87 = Main.dust[num676];
						dust334 = dust87;
						dust334.velocity *= 2f;
					}
					Vector2 val37 = new Vector2(position.X - 10f, position.Y - 10f);
					center4 = default(Vector2);
					int num677 = Gore.NewGore(val37, center4, Main.rand.Next(61, 64));
					Gore gore17 = Main.gore[num677];
					Gore gore64 = gore17;
					gore64.velocity *= 0.3f;
					Main.gore[num677].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num677].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
					if (owner == Main.myPlayer)
					{
						localAI[1] = -1f;
						maxPenetrate = 0;
						position.X += width / 2;
						position.Y += height / 2;
						width = 80;
						height = 80;
						position.X -= width / 2;
						position.Y -= height / 2;
						Damage();
					}
				}
				else if (type == 14 || type == 20 || type == 36 || type == 83 || type == 84 || type == 389 || type == 104 || type == 279 || type == 100 || type == 110 || type == 180 || type == 207 || type == 357 || type == 242 || type == 302 || type == 257 || type == 259 || type == 285 || type == 287 || type == 576 || type == 577 || type == 876 || type == 968)
				{
					Collision.HitTiles(position, velocity, width, height);
					SoundEngine.PlaySound(in SoundID.Item10, position);
				}
				else if (type == 981)
				{
					Collision.HitTiles(position, velocity, width, height);
					SoundEngine.PlaySound(in SoundID.Item10, position);
					ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.SilverBulletSparkle, new ParticleOrchestraSettings
					{
						PositionInWorld = base.Center,
						MovementVector = Vector2.Zero
					}, owner);
				}
				else if (type == 1006)
				{
					Collision.HitTiles(position, velocity, width, height);
					SoundEngine.PlaySound(0, position);
					float num678 = Main.rand.NextFloat() * ((float)Math.PI * 2f);
					for (float num679 = 0f; num679 < 1f; num679 += 1f)
					{
						float num680 = num678 + (float)Math.PI * 2f * num679;
						Vector2 unitX2 = Vector2.UnitX;
						double radians43 = num680;
						center4 = default(Vector2);
						Vector2 vector55 = unitX2.RotatedBy(radians43, center4);
						Vector2 center = base.Center;
						float num681 = 0.4f;
						ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.ShimmerArrow, new ParticleOrchestraSettings
						{
							PositionInWorld = center,
							MovementVector = vector55 * num681
						}, owner);
					}
				}
				else if (type == 660)
				{
					Collision.HitTiles(position, velocity, width, height);
					SoundEngine.PlaySound(in SoundID.Item10, position);
					int num682 = Main.rand.Next(4, 10);
					for (int num683 = 0; num683 < num682; num683++)
					{
						int num685 = Dust.NewDust(base.Center, 0, 0, 180, 0f, 0f, 100);
						Dust dust88 = Main.dust[num685];
						Dust dust334 = dust88;
						dust334.velocity *= 1.6f;
						Main.dust[num685].velocity.Y -= 1f;
						dust88 = Main.dust[num685];
						dust334 = dust88;
						dust334.velocity += -velocity * (Main.rand.NextFloat() * 2f - 1f) * 0.5f;
						Main.dust[num685].scale = 2f;
						Main.dust[num685].fadeIn = 0.5f;
						Main.dust[num685].noGravity = true;
					}
				}
				else if (type == 761 || type == 762)
				{
					SoundEngine.PlaySound(in SoundID.Item10, position);
					if (owner == Main.myPlayer && !noDropItem)
					{
						int num686 = 4343;
						if (type == 762)
						{
							num686 = 4344;
						}
						int num687 = Item.NewItem(GetItemSource_DropAsItem(), (int)position.X, (int)position.Y, width, height, num686);
						Main.item[num687].noGrabDelay = 0;
						if (Main.netMode == 1 && num687 >= 0)
						{
							NetMessage.SendData(21, -1, -1, null, num687, 1f);
						}
					}
				}
				else if (type == 712)
				{
					Collision.HitTiles(position, velocity, width, height);
					SoundEngine.PlaySound(in SoundID.Item10, position);
					int num688 = Main.rand.Next(6, 12);
					for (int num689 = 0; num689 < num688; num689++)
					{
						int num690 = Dust.NewDust(base.Center, 0, 0, 15, 0f, 0f, 100);
						Dust dust89 = Main.dust[num690];
						Dust dust334 = dust89;
						dust334.velocity *= 1.6f;
						Main.dust[num690].velocity.Y -= 1f;
						dust89 = Main.dust[num690];
						dust334 = dust89;
						dust334.velocity += -velocity * (Main.rand.NextFloat() * 2f - 1f) * 0.5f;
						Main.dust[num690].scale = 1f;
						Main.dust[num690].fadeIn = 1.5f;
						Main.dust[num690].noGravity = true;
						Main.dust[num690].color = new Color(255, 255, 255, 0) * 0.3f;
						dust89 = Main.dust[num690];
						dust334 = dust89;
						dust334.velocity *= 0.7f;
						dust89 = Main.dust[num690];
						dust334 = dust89;
						dust334.position += Main.dust[num690].velocity * 5f;
					}
					for (int num691 = 0; num691 < 3; num691++)
					{
						Gore gore59 = Gore.NewGoreDirect(position, Vector2.Zero, 1008, 1f + Main.rand.NextFloatDirection() * 0.2f);
						Gore gore18 = gore59;
						Gore gore64 = gore18;
						gore64.velocity *= 4f;
					}
				}
				else if (type == 638)
				{
					Collision.HitTiles(position, velocity, width, height);
					SoundEngine.PlaySound(in SoundID.Item10, position);
					int num692 = Main.rand.Next(2, 5);
					for (int num693 = 0; num693 < num692; num693++)
					{
						int num694 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100);
						Dust dust91 = Main.dust[num694];
						Dust dust334 = dust91;
						dust334.velocity *= 1.6f;
						Main.dust[num694].velocity.Y -= 1f;
						dust91 = Main.dust[num694];
						dust334 = dust91;
						dust334.position -= Vector2.One * 4f;
						Main.dust[num694].position = Vector2.Lerp(Main.dust[num694].position, base.Center, 0.5f);
						Main.dust[num694].noGravity = true;
					}
				}
				else if (type == 15 || type == 321)
				{
					SoundEngine.PlaySound(in SoundID.Item10, position);
					for (int num697 = 0; num697 < 20; num697++)
					{
						int num698 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 2f);
						Main.dust[num698].noGravity = true;
						Dust dust92 = Main.dust[num698];
						Dust dust334 = dust92;
						dust334.velocity *= 2f;
						num698 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100);
						dust92 = Main.dust[num698];
						dust334 = dust92;
						dust334.velocity *= 2f;
					}
				}
				else if (type == 253)
				{
					SoundEngine.PlaySound(in SoundID.Item10, position);
					for (int num699 = 0; num699 < 20; num699++)
					{
						int num700 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 135, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 2f);
						Main.dust[num700].noGravity = true;
						Dust dust93 = Main.dust[num700];
						Dust dust334 = dust93;
						dust334.velocity *= 2f;
						num700 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 135, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100);
						dust93 = Main.dust[num700];
						dust334 = dust93;
						dust334.velocity *= 2f;
					}
				}
				else if (type == 95 || type == 96)
				{
					SoundEngine.PlaySound(in SoundID.Item10, position);
					for (int num701 = 0; num701 < 20; num701++)
					{
						int num702 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 75, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 2f * scale);
						Main.dust[num702].noGravity = true;
						Dust dust95 = Main.dust[num702];
						Dust dust334 = dust95;
						dust334.velocity *= 2f;
						num702 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 75, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 1f * scale);
						dust95 = Main.dust[num702];
						dust334 = dust95;
						dust334.velocity *= 2f;
					}
				}
				else if (type == 17)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num703 = 0; num703 < 5; num703++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 0);
					}
				}
				else if (type == 31 || type == 42)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num704 = 0; num704 < 5; num704++)
					{
						int num705 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 32);
						Dust dust96 = Main.dust[num705];
						Dust dust334 = dust96;
						dust334.velocity *= 0.6f;
					}
				}
				else if (type >= 411 && type <= 414)
				{
					int num706 = 9;
					if (type == 412 || type == 414)
					{
						num706 = 11;
					}
					if (type == 413)
					{
						num706 = 19;
					}
					for (int num708 = 0; num708 < 5; num708++)
					{
						int num709 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num706, 0f, velocity.Y / 2f);
						Main.dust[num709].noGravity = true;
						Dust dust97 = Main.dust[num709];
						Dust dust334 = dust97;
						dust334.velocity -= velocity * 0.5f;
					}
				}
				else if (type == 109)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num710 = 0; num710 < 5; num710++)
					{
						int num711 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 51, 0f, 0f, 0, default(Color), 0.6f);
						Dust dust98 = Main.dust[num711];
						Dust dust334 = dust98;
						dust334.velocity *= 0.6f;
					}
				}
				else if (type == 39)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num712 = 0; num712 < 5; num712++)
					{
						int num713 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 38);
						Dust dust99 = Main.dust[num713];
						Dust dust334 = dust99;
						dust334.velocity *= 0.6f;
					}
				}
				else if (type == 71)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num714 = 0; num714 < 5; num714++)
					{
						int num715 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 53);
						Dust dust100 = Main.dust[num715];
						Dust dust334 = dust100;
						dust334.velocity *= 0.6f;
					}
				}
				else if (type == 179)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num716 = 0; num716 < 5; num716++)
					{
						int num717 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 149);
						Dust dust102 = Main.dust[num717];
						Dust dust334 = dust102;
						dust334.velocity *= 0.6f;
					}
				}
				else if (type == 40)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num719 = 0; num719 < 5; num719++)
					{
						int num720 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 36);
						Dust dust103 = Main.dust[num720];
						Dust dust334 = dust103;
						dust334.velocity *= 0.6f;
					}
				}
				else if (type == 21 || type == 471 || type == 532)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num721 = 0; num721 < 10; num721++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 26, 0f, 0f, 0, default(Color), 0.8f);
					}
				}
				else if (type == 583)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num722 = 0; num722 < 10; num722++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 4, 0f, 0f, 100, new Color(20, 250, 20, 240), 0.8f);
					}
				}
				else if (type == 584)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num723 = 0; num723 < 10; num723++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 4, 0f, 0f, 100, new Color(250, 20, 120, 240), 0.8f);
					}
				}
				else if (type == 24)
				{
					for (int num724 = 0; num724 < 10; num724++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 1, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.75f);
					}
				}
				else if (type == 27)
				{
					SoundEngine.PlaySound(in SoundID.Item10, position);
					for (int num725 = 0; num725 < 30; num725++)
					{
						int num726 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 172, velocity.X * 0.1f, velocity.Y * 0.1f, 100);
						Main.dust[num726].noGravity = true;
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 172, velocity.X * 0.1f, velocity.Y * 0.1f, 100, default(Color), 0.5f);
					}
				}
				else if (type == 38)
				{
					for (int num727 = 0; num727 < 10; num727++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 42, velocity.X * 0.1f, velocity.Y * 0.1f);
					}
				}
				else if (type == 44 || type == 45)
				{
					SoundEngine.PlaySound(in SoundID.Item10, position);
					for (int num728 = 0; num728 < 30; num728++)
					{
						int num730 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, velocity.X, velocity.Y, 100, default(Color), 1.7f);
						Main.dust[num730].noGravity = true;
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, velocity.X, velocity.Y, 100);
					}
				}
				else if (type == 41)
				{
					SoundEngine.PlaySound(in SoundID.Item14, position);
					for (int num731 = 0; num731 < 10; num731++)
					{
						int num732 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					}
					for (int num733 = 0; num733 < 5; num733++)
					{
						int num734 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num734].noGravity = true;
						Dust dust107 = Main.dust[num734];
						Dust dust334 = dust107;
						dust334.velocity *= 3f;
						num734 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust107 = Main.dust[num734];
						dust334 = dust107;
						dust334.velocity *= 2f;
					}
					Vector2 val38 = new Vector2(position.X, position.Y);
					center4 = default(Vector2);
					int num735 = Gore.NewGore(val38, center4, Main.rand.Next(61, 64));
					Gore gore19 = Main.gore[num735];
					Gore gore64 = gore19;
					gore64.velocity *= 0.4f;
					Main.gore[num735].velocity.X += (float)Main.rand.Next(-10, 11) * 0.1f;
					Main.gore[num735].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.1f;
					Vector2 val39 = new Vector2(position.X, position.Y);
					center4 = default(Vector2);
					num735 = Gore.NewGore(val39, center4, Main.rand.Next(61, 64));
					gore19 = Main.gore[num735];
					gore64 = gore19;
					gore64.velocity *= 0.4f;
					Main.gore[num735].velocity.X += (float)Main.rand.Next(-10, 11) * 0.1f;
					Main.gore[num735].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.1f;
					if (owner == Main.myPlayer)
					{
						penetrate = -1;
						position.X += width / 2;
						position.Y += height / 2;
						width = 64;
						height = 64;
						position.X -= width / 2;
						position.Y -= height / 2;
						Damage();
					}
				}
				else if (type == 514)
				{
					SoundEngine.PlaySound(in SoundID.Item14, position);
					for (int num736 = 0; num736 < 10; num736++)
					{
						int num737 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.3f);
						Dust dust111 = Main.dust[num737];
						Dust dust334 = dust111;
						dust334.velocity *= 1.4f;
					}
					for (int num738 = 0; num738 < 6; num738++)
					{
						int num739 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.1f);
						Main.dust[num739].noGravity = true;
						Dust dust110 = Main.dust[num739];
						Dust dust334 = dust110;
						dust334.velocity *= 4.6f;
						num739 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.3f);
						dust110 = Main.dust[num739];
						dust334 = dust110;
						dust334.velocity *= 3.3f;
						if (Main.rand.Next(2) == 0)
						{
							num739 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.1f);
							dust110 = Main.dust[num739];
							dust334 = dust110;
							dust334.velocity *= 2.7f;
						}
					}
					if (owner == Main.myPlayer)
					{
						penetrate = -1;
						position.X += width / 2;
						position.Y += height / 2;
						width = 112;
						height = 112;
						position.X -= width / 2;
						position.Y -= height / 2;
						ai[0] = 2f;
						Damage();
					}
				}
				else if (type == 306)
				{
					SoundEngine.PlaySound(3, (int)position.X, (int)position.Y);
					for (int num741 = 0; num741 < 20; num741++)
					{
						int num742 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 184);
						Dust dust113 = Main.dust[num742];
						Dust dust334 = dust113;
						dust334.scale *= 1.1f;
						Main.dust[num742].noGravity = true;
					}
					for (int num743 = 0; num743 < 30; num743++)
					{
						int num744 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 184);
						Dust dust112 = Main.dust[num744];
						Dust dust334 = dust112;
						dust334.velocity *= 2.5f;
						dust112 = Main.dust[num744];
						dust334 = dust112;
						dust334.scale *= 0.8f;
						Main.dust[num744].noGravity = true;
					}
					if (owner == Main.myPlayer)
					{
						int num745 = Main.rand.Next(2, 5);
						if (Main.rand.Next(1, 101) == 100)
						{
							num745 = 15;
						}
						for (int num746 = 0; num746 < num745; num746++)
						{
							float num747 = (float)Main.rand.Next(-35, 36) * 0.02f;
							float num748 = (float)Main.rand.Next(-35, 36) * 0.02f;
							num747 *= 10f;
							num748 *= 10f;
							NewProjectile(GetProjectileSource_FromThis(), position.X, position.Y, num747, num748, 307, (int)((double)damage * 0.75), (int)((double)knockBack * 0.35), Main.myPlayer);
						}
					}
				}
				else if (type == 469)
				{
					if (owner == Main.myPlayer)
					{
						int num749 = 6;
						for (int num750 = 0; num750 < num749; num750++)
						{
							if (num750 % 2 != 1 || Main.rand.Next(3) == 0)
							{
								Vector2 vector57 = position;
								Vector2 vector58 = oldVelocity;
								((Vector2)(ref vector58)).Normalize();
								vector58 *= 8f;
								float num752 = (float)Main.rand.Next(-35, 36) * 0.01f;
								float num753 = (float)Main.rand.Next(-35, 36) * 0.01f;
								vector57 -= vector58 * (float)num750;
								num752 += oldVelocity.X / 6f;
								num753 += oldVelocity.Y / 6f;
								int num754 = NewProjectile(GetProjectileSource_FromThis(), vector57.X, vector57.Y, num752, num753, Main.player[owner].beeType(), Main.player[owner].beeDamage(damage / 3), Main.player[owner].beeKB(0f), Main.myPlayer);
								Main.projectile[num754].magic = false;
								Main.projectile[num754].ranged = true;
								Main.projectile[num754].penetrate = 2;
							}
						}
					}
				}
				else if (type == 183)
				{
					SoundEngine.PlaySound(in SoundID.Item14, position);
					for (int num755 = 0; num755 < 20; num755++)
					{
						int num756 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust115 = Main.dust[num756];
						Dust dust334 = dust115;
						dust334.velocity *= 1f;
					}
					Vector2 val40 = new Vector2(position.X, position.Y);
					center4 = default(Vector2);
					int num757 = Gore.NewGore(val40, center4, Main.rand.Next(61, 64));
					Main.gore[num757].velocity.X += 1f;
					Main.gore[num757].velocity.Y += 1f;
					Gore gore20 = Main.gore[num757];
					Gore gore64 = gore20;
					gore64.velocity *= 0.3f;
					Vector2 val41 = new Vector2(position.X, position.Y);
					center4 = default(Vector2);
					num757 = Gore.NewGore(val41, center4, Main.rand.Next(61, 64));
					Main.gore[num757].velocity.X -= 1f;
					Main.gore[num757].velocity.Y += 1f;
					gore20 = Main.gore[num757];
					gore64 = gore20;
					gore64.velocity *= 0.3f;
					Vector2 val42 = new Vector2(position.X, position.Y);
					center4 = default(Vector2);
					num757 = Gore.NewGore(val42, center4, Main.rand.Next(61, 64));
					Main.gore[num757].velocity.X += 1f;
					Main.gore[num757].velocity.Y -= 1f;
					gore20 = Main.gore[num757];
					gore64 = gore20;
					gore64.velocity *= 0.3f;
					Vector2 val43 = new Vector2(position.X, position.Y);
					center4 = default(Vector2);
					num757 = Gore.NewGore(val43, center4, Main.rand.Next(61, 64));
					Main.gore[num757].velocity.X -= 1f;
					Main.gore[num757].velocity.Y -= 1f;
					gore20 = Main.gore[num757];
					gore64 = gore20;
					gore64.velocity *= 0.3f;
					if (owner == Main.myPlayer)
					{
						int num758 = Main.rand.Next(15, 25);
						for (int num759 = 0; num759 < num758; num759++)
						{
							float speedX = (float)Main.rand.Next(-35, 36) * 0.02f;
							float speedY = (float)Main.rand.Next(-35, 36) * 0.02f;
							NewProjectile(GetProjectileSource_FromThis(), position.X, position.Y, speedX, speedY, Main.player[owner].beeType(), Main.player[owner].beeDamage(damage), Main.player[owner].beeKB(0f), Main.myPlayer);
						}
					}
				}
				else if (aiStyle == 34)
				{
					if (owner != Main.myPlayer)
					{
						timeLeft = 60;
					}
					SoundEngine.PlaySound(in SoundID.Item14, position);
					if (type == 167)
					{
						for (int num760 = 0; num760 < 400; num760++)
						{
							float num761 = 16f;
							if (num760 < 300)
							{
								num761 = 12f;
							}
							if (num760 < 200)
							{
								num761 = 8f;
							}
							if (num760 < 100)
							{
								num761 = 4f;
							}
							int num763 = 130;
							int num764 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num763, 0f, 0f, 100);
							float num765 = Main.dust[num764].velocity.X;
							float y2 = Main.dust[num764].velocity.Y;
							if (num765 == 0f && y2 == 0f)
							{
								num765 = 1f;
							}
							float num766 = (float)Math.Sqrt(num765 * num765 + y2 * y2);
							num766 = num761 / num766;
							num765 *= num766;
							y2 *= num766;
							Dust dust129 = Main.dust[num764];
							Dust dust334 = dust129;
							dust334.velocity *= 0.5f;
							Main.dust[num764].velocity.X += num765;
							Main.dust[num764].velocity.Y += y2;
							Main.dust[num764].scale = 1.3f;
							Main.dust[num764].noGravity = true;
						}
					}
					if (type == 168)
					{
						for (int num767 = 0; num767 < 400; num767++)
						{
							float num768 = 2f * ((float)num767 / 100f);
							if (num767 > 100)
							{
								num768 = 10f;
							}
							if (num767 > 250)
							{
								num768 = 13f;
							}
							int num769 = 131;
							int num770 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num769, 0f, 0f, 100);
							float num771 = Main.dust[num770].velocity.X;
							float y3 = Main.dust[num770].velocity.Y;
							if (num771 == 0f && y3 == 0f)
							{
								num771 = 1f;
							}
							float num772 = (float)Math.Sqrt(num771 * num771 + y3 * y3);
							num772 = num768 / num772;
							if (num767 <= 200)
							{
								num771 *= num772;
								y3 *= num772;
							}
							else
							{
								num771 = num771 * num772 * 1.25f;
								y3 = y3 * num772 * 0.75f;
							}
							Dust dust128 = Main.dust[num770];
							Dust dust334 = dust128;
							dust334.velocity *= 0.5f;
							Main.dust[num770].velocity.X += num771;
							Main.dust[num770].velocity.Y += y3;
							if (num767 > 100)
							{
								Main.dust[num770].scale = 1.3f;
								Main.dust[num770].noGravity = true;
							}
						}
					}
					if (type == 169)
					{
						Vector2 vector59 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2();
						float num774 = Main.rand.Next(5, 9);
						float num775 = Main.rand.Next(12, 17);
						float value13 = Main.rand.Next(3, 7);
						float num776 = 20f;
						for (float num777 = 0f; num777 < num774; num777++)
						{
							for (int num778 = 0; num778 < 2; num778++)
							{
								Vector2 spinningpoint30 = vector59;
								double radians44 = ((num778 == 0) ? 1f : (-1f)) * ((float)Math.PI * 2f) / (num774 * 2f);
								center4 = default(Vector2);
								Vector2 value2 = spinningpoint30.RotatedBy(radians44, center4);
								for (float num779 = 0f; num779 < num776; num779++)
								{
									Vector2 vector60 = Vector2.Lerp(vector59, value2, num779 / num776);
									float num780 = MathHelper.Lerp(num775, value13, num779 / num776);
									int num781 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, 133, 0f, 0f, 100, default(Color), 1.3f);
									Dust dust127 = Main.dust[num781];
									Dust dust334 = dust127;
									dust334.velocity *= 0.1f;
									Main.dust[num781].noGravity = true;
									dust127 = Main.dust[num781];
									dust334 = dust127;
									dust334.velocity += vector60 * num780;
								}
							}
							Vector2 spinningpoint31 = vector59;
							double radians45 = (float)Math.PI * 2f / num774;
							center4 = default(Vector2);
							vector59 = spinningpoint31.RotatedBy(radians45, center4);
						}
						for (float num782 = 0f; num782 < num774; num782++)
						{
							for (int num783 = 0; num783 < 2; num783++)
							{
								Vector2 spinningpoint32 = vector59;
								double radians46 = ((num783 == 0) ? 1f : (-1f)) * ((float)Math.PI * 2f) / (num774 * 2f);
								center4 = default(Vector2);
								Vector2 value3 = spinningpoint32.RotatedBy(radians46, center4);
								for (float num785 = 0f; num785 < num776; num785++)
								{
									Vector2 vector61 = Vector2.Lerp(vector59, value3, num785 / num776);
									float num786 = MathHelper.Lerp(num775, value13, num785 / num776) / 2f;
									int num787 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, 133, 0f, 0f, 100, default(Color), 1.3f);
									Dust dust126 = Main.dust[num787];
									Dust dust334 = dust126;
									dust334.velocity *= 0.1f;
									Main.dust[num787].noGravity = true;
									dust126 = Main.dust[num787];
									dust334 = dust126;
									dust334.velocity += vector61 * num786;
								}
							}
							Vector2 spinningpoint33 = vector59;
							double radians47 = (float)Math.PI * 2f / num774;
							center4 = default(Vector2);
							vector59 = spinningpoint33.RotatedBy(radians47, center4);
						}
						for (int num788 = 0; num788 < 100; num788++)
						{
							float num789 = num775;
							int num790 = 132;
							int num791 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num790, 0f, 0f, 100);
							float num792 = Main.dust[num791].velocity.X;
							float y4 = Main.dust[num791].velocity.Y;
							if (num792 == 0f && y4 == 0f)
							{
								num792 = 1f;
							}
							float num793 = (float)Math.Sqrt(num792 * num792 + y4 * y4);
							num793 = num789 / num793;
							num792 *= num793;
							y4 *= num793;
							Dust dust125 = Main.dust[num791];
							Dust dust334 = dust125;
							dust334.velocity *= 0.5f;
							Main.dust[num791].velocity.X += num792;
							Main.dust[num791].velocity.Y += y4;
							Main.dust[num791].scale = 1.3f;
							Main.dust[num791].noGravity = true;
						}
					}
					if (type == 170)
					{
						for (int num794 = 0; num794 < 400; num794++)
						{
							int num796 = 133;
							float num797 = 16f;
							if (num794 > 100)
							{
								num797 = 11f;
							}
							if (num794 > 100)
							{
								num796 = 134;
							}
							if (num794 > 200)
							{
								num797 = 8f;
							}
							if (num794 > 200)
							{
								num796 = 133;
							}
							if (num794 > 300)
							{
								num797 = 5f;
							}
							if (num794 > 300)
							{
								num796 = 134;
							}
							int num798 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num796, 0f, 0f, 100);
							float num799 = Main.dust[num798].velocity.X;
							float y5 = Main.dust[num798].velocity.Y;
							if (num799 == 0f && y5 == 0f)
							{
								num799 = 1f;
							}
							float num800 = (float)Math.Sqrt(num799 * num799 + y5 * y5);
							num800 = num797 / num800;
							if (num794 > 300)
							{
								num799 = num799 * num800 * 0.7f;
								y5 *= num800;
							}
							else if (num794 > 200)
							{
								num799 *= num800;
								y5 = y5 * num800 * 0.7f;
							}
							else if (num794 > 100)
							{
								num799 = num799 * num800 * 0.7f;
								y5 *= num800;
							}
							else
							{
								num799 *= num800;
								y5 = y5 * num800 * 0.7f;
							}
							Dust dust124 = Main.dust[num798];
							Dust dust334 = dust124;
							dust334.velocity *= 0.5f;
							Main.dust[num798].velocity.X += num799;
							Main.dust[num798].velocity.Y += y5;
							if (Main.rand.Next(3) != 0)
							{
								Main.dust[num798].scale = 1.3f;
								Main.dust[num798].noGravity = true;
							}
						}
					}
					if (type == 415)
					{
						Vector2 vector62 = (vector62 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2());
						float num801 = Main.rand.Next(5, 9);
						float num802 = (float)Main.rand.Next(10, 15) * 0.66f;
						float num803 = (float)Main.rand.Next(4, 7) / 2f;
						int num804 = 30;
						for (int num805 = 0; (float)num805 < (float)num804 * num801; num805++)
						{
							if (num805 % num804 == 0)
							{
								Vector2 spinningpoint34 = vector62;
								double radians48 = (float)Math.PI * 2f / num801;
								center4 = default(Vector2);
								vector62 = spinningpoint34.RotatedBy(radians48, center4);
							}
							float num808 = MathHelper.Lerp(num803, num802, (float)(num805 % num804) / (float)num804);
							int num809 = 130;
							int num810 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num809, 0f, 0f, 100);
							Dust dust123 = Main.dust[num810];
							Dust dust334 = dust123;
							dust334.velocity *= 0.1f;
							dust123 = Main.dust[num810];
							dust334 = dust123;
							dust334.velocity += vector62 * num808;
							Main.dust[num810].scale = 1.3f;
							Main.dust[num810].noGravity = true;
						}
						for (int num811 = 0; num811 < 100; num811++)
						{
							float num812 = num802;
							if (num811 < 30)
							{
								num812 = (num803 + num802) / 2f;
							}
							int num813 = 130;
							int num814 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num813, 0f, 0f, 100);
							float num815 = Main.dust[num814].velocity.X;
							float y6 = Main.dust[num814].velocity.Y;
							if (num815 == 0f && y6 == 0f)
							{
								num815 = 1f;
							}
							float num816 = (float)Math.Sqrt(num815 * num815 + y6 * y6);
							num816 = num812 / num816;
							num815 *= num816;
							y6 *= num816;
							Dust dust122 = Main.dust[num814];
							Dust dust334 = dust122;
							dust334.velocity *= 0.5f;
							Main.dust[num814].velocity.X += num815;
							Main.dust[num814].velocity.Y += y6;
							Main.dust[num814].scale = 1.3f;
							Main.dust[num814].noGravity = true;
						}
					}
					if (type == 416)
					{
						Vector2 vector63 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2();
						Vector2 vector64 = vector63;
						float num817 = Main.rand.Next(3, 6) * 2;
						int num819 = 20;
						float num820 = ((Main.rand.Next(2) == 0) ? 1f : (-1f));
						bool flag3 = true;
						for (int num821 = 0; (float)num821 < (float)num819 * num817; num821++)
						{
							if (num821 % num819 == 0)
							{
								Vector2 spinningpoint35 = vector64;
								double radians49 = num820 * ((float)Math.PI * 2f / num817);
								center4 = default(Vector2);
								vector64 = spinningpoint35.RotatedBy(radians49, center4);
								vector63 = vector64;
								flag3 = !flag3;
							}
							else
							{
								float num822 = (float)Math.PI * 2f / ((float)num819 * num817);
								Vector2 spinningpoint36 = vector63;
								double radians50 = num822 * num820 * 3f;
								center4 = default(Vector2);
								vector63 = spinningpoint36.RotatedBy(radians50, center4);
							}
							float num823 = MathHelper.Lerp(1f, 8f, (float)(num821 % num819) / (float)num819);
							int num824 = 131;
							int num825 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num824, 0f, 0f, 100, default(Color), 1.4f);
							Dust dust120 = Main.dust[num825];
							Dust dust334 = dust120;
							dust334.velocity *= 0.1f;
							dust120 = Main.dust[num825];
							dust334 = dust120;
							dust334.velocity += vector63 * num823;
							if (flag3)
							{
								Main.dust[num825].scale = 0.9f;
							}
							Main.dust[num825].noGravity = true;
						}
					}
					if (type == 417)
					{
						float num826 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
						float num827 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
						float num828 = 4f + (float)Main.rand.NextDouble() * 3f;
						float num830 = 4f + (float)Main.rand.NextDouble() * 3f;
						float num831 = num828;
						if (num830 > num831)
						{
							num831 = num830;
						}
						for (int num832 = 0; num832 < 150; num832++)
						{
							int num833 = 132;
							float num834 = num831;
							if (num832 > 50)
							{
								num834 = num830;
							}
							if (num832 > 50)
							{
								num833 = 133;
							}
							if (num832 > 100)
							{
								num834 = num828;
							}
							if (num832 > 100)
							{
								num833 = 132;
							}
							int num835 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num833, 0f, 0f, 100);
							Vector2 vector65 = Main.dust[num835].velocity;
							((Vector2)(ref vector65)).Normalize();
							vector65 *= num834;
							if (num832 > 100)
							{
								vector65.X *= 0.5f;
								Vector2 spinningpoint37 = vector65;
								double radians51 = num826;
								center4 = default(Vector2);
								vector65 = spinningpoint37.RotatedBy(radians51, center4);
							}
							else if (num832 > 50)
							{
								vector65.Y *= 0.5f;
								Vector2 spinningpoint38 = vector65;
								double radians52 = num827;
								center4 = default(Vector2);
								vector65 = spinningpoint38.RotatedBy(radians52, center4);
							}
							Dust dust119 = Main.dust[num835];
							Dust dust334 = dust119;
							dust334.velocity *= 0.2f;
							dust119 = Main.dust[num835];
							dust334 = dust119;
							dust334.velocity += vector65;
							if (num832 <= 200)
							{
								Main.dust[num835].scale = 1.3f;
								Main.dust[num835].noGravity = true;
							}
						}
					}
					if (type == 418)
					{
						Vector2 vector66 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2();
						float num836 = Main.rand.Next(5, 12);
						float num837 = (float)Main.rand.Next(9, 14) * 0.66f;
						float num838 = (float)Main.rand.Next(2, 4) * 0.66f;
						float num839 = 15f;
						for (float num841 = 0f; num841 < num836; num841++)
						{
							for (int num842 = 0; num842 < 2; num842++)
							{
								Vector2 spinningpoint39 = vector66;
								double radians53 = ((num842 == 0) ? 1f : (-1f)) * ((float)Math.PI * 2f) / (num836 * 2f);
								center4 = default(Vector2);
								Vector2 value4 = spinningpoint39.RotatedBy(radians53, center4);
								for (float num843 = 0f; num843 < num839; num843++)
								{
									Vector2 vector68 = Vector2.SmoothStep(vector66, value4, num843 / num839);
									float num844 = MathHelper.SmoothStep(num837, num838, num843 / num839);
									int num845 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, 134, 0f, 0f, 100, default(Color), 1.3f);
									Dust dust118 = Main.dust[num845];
									Dust dust334 = dust118;
									dust334.velocity *= 0.1f;
									Main.dust[num845].noGravity = true;
									dust118 = Main.dust[num845];
									dust334 = dust118;
									dust334.velocity += vector68 * num844;
								}
							}
							Vector2 spinningpoint40 = vector66;
							double radians54 = (float)Math.PI * 2f / num836;
							center4 = default(Vector2);
							vector66 = spinningpoint40.RotatedBy(radians54, center4);
						}
						for (int num846 = 0; num846 < 120; num846++)
						{
							float num847 = num837;
							int num848 = 133;
							if (num846 < 80)
							{
								num847 = num838 - 0.5f;
							}
							else
							{
								num848 = 131;
							}
							int num849 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num848, 0f, 0f, 100);
							float num850 = Main.dust[num849].velocity.X;
							float y7 = Main.dust[num849].velocity.Y;
							if (num850 == 0f && y7 == 0f)
							{
								num850 = 1f;
							}
							float num852 = (float)Math.Sqrt(num850 * num850 + y7 * y7);
							num852 = num847 / num852;
							num850 *= num852;
							y7 *= num852;
							Dust dust116 = Main.dust[num849];
							Dust dust334 = dust116;
							dust334.velocity *= 0.2f;
							Main.dust[num849].velocity.X += num850;
							Main.dust[num849].velocity.Y += y7;
							Main.dust[num849].scale = 1.3f;
							Main.dust[num849].noGravity = true;
						}
					}
					position.X += width / 2;
					position.Y += height / 2;
					width = 192;
					height = 192;
					position.X -= width / 2;
					position.Y -= height / 2;
					penetrate = -1;
					Damage();
				}
				else if (type == 312)
				{
					SoundEngine.PlaySound(in SoundID.Item14, position);
					position.X += width / 2;
					position.Y += height / 2;
					width = 22;
					height = 22;
					position.X -= width / 2;
					position.Y -= height / 2;
					for (int num853 = 0; num853 < 30; num853++)
					{
						int num854 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust131 = Main.dust[num854];
						Dust dust334 = dust131;
						dust334.velocity *= 1.4f;
					}
					for (int num855 = 0; num855 < 20; num855++)
					{
						int num856 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 3.5f);
						Main.dust[num856].noGravity = true;
						Dust dust130 = Main.dust[num856];
						Dust dust334 = dust130;
						dust334.velocity *= 7f;
						num856 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust130 = Main.dust[num856];
						dust334 = dust130;
						dust334.velocity *= 3f;
					}
					for (int num857 = 0; num857 < 2; num857++)
					{
						float num858 = 0.4f;
						if (num857 == 1)
						{
							num858 = 0.8f;
						}
						Vector2 val44 = new Vector2(position.X, position.Y);
						center4 = default(Vector2);
						int num859 = Gore.NewGore(val44, center4, Main.rand.Next(61, 64));
						Gore gore22 = Main.gore[num859];
						Gore gore64 = gore22;
						gore64.velocity *= num858;
						Main.gore[num859].velocity.X += 1f;
						Main.gore[num859].velocity.Y += 1f;
						Vector2 val45 = new Vector2(position.X, position.Y);
						center4 = default(Vector2);
						num859 = Gore.NewGore(val45, center4, Main.rand.Next(61, 64));
						gore22 = Main.gore[num859];
						gore64 = gore22;
						gore64.velocity *= num858;
						Main.gore[num859].velocity.X -= 1f;
						Main.gore[num859].velocity.Y += 1f;
						Vector2 val46 = new Vector2(position.X, position.Y);
						center4 = default(Vector2);
						num859 = Gore.NewGore(val46, center4, Main.rand.Next(61, 64));
						gore22 = Main.gore[num859];
						gore64 = gore22;
						gore64.velocity *= num858;
						Main.gore[num859].velocity.X += 1f;
						Main.gore[num859].velocity.Y -= 1f;
						Vector2 val47 = new Vector2(position.X, position.Y);
						center4 = default(Vector2);
						num859 = Gore.NewGore(val47, center4, Main.rand.Next(61, 64));
						gore22 = Main.gore[num859];
						gore64 = gore22;
						gore64.velocity *= num858;
						Main.gore[num859].velocity.X -= 1f;
						Main.gore[num859].velocity.Y -= 1f;
					}
					position.X += width / 2;
					position.Y += height / 2;
					width = 128;
					height = 128;
					position.X -= width / 2;
					position.Y -= height / 2;
					Damage();
				}
				else if (type == 910 || type == 911)
				{
					Resize(22, 22);
					SoundEngine.PlaySound(in SoundID.Item14, position);
					Color transparent2 = Color.Transparent;
					int num860 = 0;
					for (int num861 = 0; num861 < 30; num861++)
					{
						Dust dust308 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, transparent2, 1.5f);
						Dust dust134 = dust308;
						Dust dust334 = dust134;
						dust334.velocity *= 1.4f;
					}
					for (int num863 = 0; num863 < 80; num863++)
					{
						Dust dust309 = Dust.NewDustDirect(position, width, height, num860, 0f, 0f, 100, transparent2, 2.2f);
						dust309.noGravity = true;
						dust309.velocity.Y -= 1.2f;
						Dust dust133 = dust309;
						Dust dust334 = dust133;
						dust334.velocity *= 4f;
						dust309 = Dust.NewDustDirect(position, width, height, num860, 0f, 0f, 100, transparent2, 1.3f);
						dust309.velocity.Y -= 1.2f;
						dust133 = dust309;
						dust334 = dust133;
						dust334.velocity *= 2f;
					}
					for (int num864 = 1; num864 <= 2; num864++)
					{
						for (int num865 = -1; num865 <= 1; num865 += 2)
						{
							for (int num866 = -1; num866 <= 1; num866 += 2)
							{
								Gore gore60 = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
								Gore gore23 = gore60;
								Gore gore64 = gore23;
								gore64.velocity *= ((num864 == 1) ? 0.4f : 0.8f);
								gore23 = gore60;
								gore64 = gore23;
								gore64.velocity += new Vector2((float)num865, (float)num866);
							}
						}
					}
					if (Main.netMode != 1)
					{
						Point pt = base.Center.ToTileCoordinates();
						Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt, 4.2f, DelegateMethods.SpreadDirt);
					}
				}
				else if (type == 784 || type == 785 || type == 786 || type == 805 || type == 903)
				{
					Resize(22, 22);
					if (type == 785)
					{
						SoundEngine.PlaySound(in SoundID.Item62, position);
					}
					else
					{
						SoundEngine.PlaySound(in SoundID.Item14, position);
					}
					Color transparent3 = Color.Transparent;
					int num867 = Dust.dustWater();
					for (int num868 = 0; num868 < 30; num868++)
					{
						Dust dust310 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, transparent3, 1.5f);
						Dust dust136 = dust310;
						Dust dust334 = dust136;
						dust334.velocity *= 1.4f;
					}
					for (int num869 = 0; num869 < 80; num869++)
					{
						Dust dust311 = Dust.NewDustDirect(position, width, height, num867, 0f, 0f, 100, transparent3, 2.2f);
						dust311.noGravity = true;
						dust311.velocity.Y -= 1.2f;
						Dust dust135 = dust311;
						Dust dust334 = dust135;
						dust334.velocity *= 7f;
						dust311 = Dust.NewDustDirect(position, width, height, num867, 0f, 0f, 100, transparent3, 1.3f);
						dust311.velocity.Y -= 1.2f;
						dust135 = dust311;
						dust334 = dust135;
						dust334.velocity *= 4f;
					}
					for (int num870 = 1; num870 <= 2; num870++)
					{
						for (int num871 = -1; num871 <= 1; num871 += 2)
						{
							for (int num872 = -1; num872 <= 1; num872 += 2)
							{
								Gore gore61 = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
								Gore gore24 = gore61;
								Gore gore64 = gore24;
								gore64.velocity *= ((num870 == 1) ? 0.4f : 0.8f);
								gore24 = gore61;
								gore64 = gore24;
								gore64.velocity += new Vector2((float)num871, (float)num872);
							}
						}
					}
					if (Main.netMode != 1)
					{
						Point pt2 = base.Center.ToTileCoordinates();
						Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt2, 3f, DelegateMethods.SpreadWater);
					}
				}
				else if (type == 787 || type == 788 || type == 789 || type == 806 || type == 904)
				{
					Resize(22, 22);
					if (type == 788)
					{
						SoundEngine.PlaySound(in SoundID.Item62, position);
					}
					else
					{
						SoundEngine.PlaySound(in SoundID.Item14, position);
					}
					Color transparent4 = Color.Transparent;
					int num874 = 35;
					for (int num875 = 0; num875 < 30; num875++)
					{
						Dust dust312 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, transparent4, 1.5f);
						Dust dust138 = dust312;
						Dust dust334 = dust138;
						dust334.velocity *= 1.4f;
					}
					for (int num876 = 0; num876 < 80; num876++)
					{
						Dust dust313 = Dust.NewDustDirect(position, width, height, num874, 0f, 0f, 100, transparent4, 1.2f);
						Dust dust137 = dust313;
						Dust dust334 = dust137;
						dust334.velocity *= 7f;
						dust313 = Dust.NewDustDirect(position, width, height, num874, 0f, 0f, 100, transparent4, 0.3f);
						dust137 = dust313;
						dust334 = dust137;
						dust334.velocity *= 4f;
					}
					for (int num877 = 1; num877 <= 2; num877++)
					{
						for (int num878 = -1; num878 <= 1; num878 += 2)
						{
							for (int num879 = -1; num879 <= 1; num879 += 2)
							{
								Gore gore62 = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
								Gore gore25 = gore62;
								Gore gore64 = gore25;
								gore64.velocity *= ((num877 == 1) ? 0.4f : 0.8f);
								gore25 = gore62;
								gore64 = gore25;
								gore64.velocity += new Vector2((float)num878, (float)num879);
							}
						}
					}
					if (Main.netMode != 1)
					{
						Point pt3 = base.Center.ToTileCoordinates();
						Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt3, 3f, DelegateMethods.SpreadLava);
					}
				}
				else if (type == 790 || type == 791 || type == 792 || type == 807 || type == 905)
				{
					Resize(22, 22);
					if (type == 791)
					{
						SoundEngine.PlaySound(in SoundID.Item62, position);
					}
					else
					{
						SoundEngine.PlaySound(in SoundID.Item14, position);
					}
					Color transparent5 = Color.Transparent;
					int num880 = 152;
					for (int num881 = 0; num881 < 30; num881++)
					{
						Dust dust314 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, transparent5, 1.5f);
						Dust dust141 = dust314;
						Dust dust334 = dust141;
						dust334.velocity *= 1.4f;
					}
					for (int num882 = 0; num882 < 80; num882++)
					{
						Dust dust315 = Dust.NewDustDirect(position, width, height, num880, 0f, 0f, 100, transparent5, 2.2f);
						Dust dust140 = dust315;
						Dust dust334 = dust140;
						dust334.velocity *= 7f;
						dust315 = Dust.NewDustDirect(position, width, height, num880, 0f, 0f, 100, transparent5, 1.3f);
						dust140 = dust315;
						dust334 = dust140;
						dust334.velocity *= 4f;
					}
					for (int num883 = 1; num883 <= 2; num883++)
					{
						for (int num885 = -1; num885 <= 1; num885 += 2)
						{
							for (int num886 = -1; num886 <= 1; num886 += 2)
							{
								Gore gore63 = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
								Gore gore26 = gore63;
								Gore gore64 = gore26;
								gore64.velocity *= ((num883 == 1) ? 0.4f : 0.8f);
								gore26 = gore63;
								gore64 = gore26;
								gore64.velocity += new Vector2((float)num885, (float)num886);
							}
						}
					}
					if (Main.netMode != 1)
					{
						Point pt4 = base.Center.ToTileCoordinates();
						Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt4, 3f, DelegateMethods.SpreadHoney);
					}
				}
				else if (type == 799 || type == 800 || type == 801 || type == 810 || type == 906)
				{
					Resize(22, 22);
					if (type == 800)
					{
						SoundEngine.PlaySound(in SoundID.Item62, position);
					}
					else
					{
						SoundEngine.PlaySound(in SoundID.Item14, position);
					}
					Color transparent6 = Color.Transparent;
					int num887 = 31;
					for (int num888 = 0; num888 < 30; num888++)
					{
						Dust dust316 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, transparent6, 1.5f);
						Dust dust143 = dust316;
						Dust dust334 = dust143;
						dust334.velocity *= 1.4f;
					}
					for (int num889 = 0; num889 < 80; num889++)
					{
						Dust dust318 = Dust.NewDustDirect(position, width, height, num887, 0f, 0f, 100, transparent6, 1.2f);
						Dust dust142 = dust318;
						Dust dust334 = dust142;
						dust334.velocity *= 7f;
						dust318 = Dust.NewDustDirect(position, width, height, num887, 0f, 0f, 100, transparent6, 0.3f);
						dust142 = dust318;
						dust334 = dust142;
						dust334.velocity *= 4f;
					}
					for (int num890 = 1; num890 <= 2; num890++)
					{
						for (int num891 = -1; num891 <= 1; num891 += 2)
						{
							for (int num892 = -1; num892 <= 1; num892 += 2)
							{
								Gore gore2 = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
								Gore gore27 = gore2;
								Gore gore64 = gore27;
								gore64.velocity *= ((num890 == 1) ? 0.4f : 0.8f);
								gore27 = gore2;
								gore64 = gore27;
								gore64.velocity += new Vector2((float)num891, (float)num892);
							}
						}
					}
					if (Main.netMode != 1)
					{
						Point pt5 = base.Center.ToTileCoordinates();
						Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt5, 3.5f, DelegateMethods.SpreadDry);
					}
				}
				else if (type == 793 || type == 796 || type == 794 || type == 797 || type == 795 || type == 798 || type == 808 || type == 809)
				{
					if (type == 794 || type == 797)
					{
						SoundEngine.PlaySound(in SoundID.Item62, base.Center);
					}
					else
					{
						SoundEngine.PlaySound(in SoundID.Item14, base.Center);
					}
					Resize(50, 50);
					float num893 = 3f;
					for (int num894 = 0; num894 < 50; num894++)
					{
						Dust dust319 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, default(Color), 2f);
						dust319.velocity = (dust319.position - base.Center).SafeNormalize(Vector2.Zero);
						Dust dust148 = dust319;
						Dust dust334 = dust148;
						dust334.velocity *= 2f + (float)Main.rand.Next(5) * 0.1f;
						dust319.velocity.Y -= num893 * 0.5f;
						dust319.color = Color.Black * 0.9f;
						if (Main.rand.Next(2) == 0)
						{
							dust319.scale = 0.5f;
							dust319.fadeIn = 1f + (float)Main.rand.Next(10) * 0.1f;
							dust319.color = Color.Black * 0.8f;
						}
					}
					for (int num896 = 0; num896 < 30; num896++)
					{
						Dust dust320 = Dust.NewDustDirect(position, width, height, 6, 0f, 0f, 100);
						dust320.noGravity = true;
						dust320.fadeIn = 1.4f;
						dust320.velocity = (dust320.position - base.Center).SafeNormalize(Vector2.Zero);
						Dust dust146 = dust320;
						Dust dust334 = dust146;
						dust334.velocity *= 5.5f + (float)Main.rand.Next(61) * 0.1f;
						dust320.velocity.Y -= num893 * 0.5f;
						dust320 = Dust.NewDustDirect(position, width, height, 6, 0f, 0f, 100);
						dust320.velocity = (dust320.position - base.Center).SafeNormalize(Vector2.Zero);
						dust320.velocity.Y -= num893 * 0.25f;
						dust146 = dust320;
						dust334 = dust146;
						dust334.velocity *= 1.5f + (float)Main.rand.Next(5) * 0.1f;
						dust320.fadeIn = 0f;
						dust320.scale = 0.6f;
						dust320 = Dust.NewDustDirect(position, width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust320.noGravity = num896 % 2 == 0;
						dust320.velocity = (dust320.position - base.Center).SafeNormalize(Vector2.Zero);
						dust146 = dust320;
						dust334 = dust146;
						dust334.velocity *= 3f + (float)Main.rand.Next(21) * 0.2f;
						dust320.velocity.Y -= num893 * 0.5f;
						dust320.fadeIn = 1.2f;
						if (!dust320.noGravity)
						{
							dust320.scale = 0.4f;
							dust320.fadeIn = 0f;
							continue;
						}
						dust146 = dust320;
						dust334 = dust146;
						dust334.velocity *= 2f + (float)Main.rand.Next(5) * 0.2f;
						dust320.velocity.Y -= num893 * 0.5f;
					}
					int num897 = 0;
					for (int num898 = 1; num898 <= 3; num898++)
					{
						float num899 = (float)Math.PI * 2f * Main.rand.NextFloat();
						for (float num900 = 0f; num900 < 1f; num900 += 1f / 11f)
						{
							float f4 = (float)Math.PI * 2f * num900 + num899;
							Vector2 spinningpoint2 = f4.ToRotationVector2();
							spinningpoint2 *= new Vector2(1f, 0.4f);
							Vector2 spinningpoint41 = spinningpoint2;
							double radians55 = (float)num897 - (float)Math.PI;
							center4 = default(Vector2);
							spinningpoint2 = spinningpoint41.RotatedBy(radians55, center4);
							Vector2 vector69 = ((float)num897 - (float)Math.PI / 2f).ToRotationVector2();
							Vector2 vector70 = base.Center + vector69 * 16f * 0f;
							Dust dust321 = Dust.NewDustPerfect(vector70, 6, spinningpoint2);
							dust321.fadeIn = 1.8f;
							dust321.noGravity = true;
							Dust dust145 = dust321;
							Dust dust334 = dust145;
							dust334.velocity *= (float)num898 * (Main.rand.NextFloat() * 2f + 0.2f);
							dust145 = dust321;
							dust334 = dust145;
							dust334.velocity += vector69 * 0.8f * (float)num898;
							dust145 = dust321;
							dust334 = dust145;
							dust334.velocity *= 2f;
						}
					}
					for (int num901 = 1; num901 <= 3; num901++)
					{
						for (int num902 = -1; num902 <= 1; num902 += 2)
						{
							for (int num903 = -1; num903 <= 1; num903 += 2)
							{
								Gore gore3 = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
								Gore gore28 = gore3;
								Gore gore64 = gore28;
								gore64.velocity *= (float)num901 / 3f;
								gore28 = gore3;
								gore64 = gore28;
								gore64.velocity += new Vector2((float)num902, (float)num903);
							}
						}
					}
					Resize(10, 10);
				}
				else if (type == 779 || type == 783 || type == 862 || type == 863)
				{
					Resize(22, 22);
					SoundEngine.PlaySound(in SoundID.Item62, position);
					Color transparent7 = Color.Transparent;
					for (int num904 = 0; num904 < 15; num904++)
					{
						Dust dust322 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, transparent7, 0.8f);
						dust322.fadeIn = 0f;
						Dust dust151 = dust322;
						Dust dust334 = dust151;
						dust334.velocity *= 0.5f;
					}
					for (int num905 = 0; num905 < 5; num905++)
					{
						Dust dust323 = Dust.NewDustDirect(position, width, height, 228, 0f, 0f, 100, transparent7, 2.5f);
						dust323.noGravity = true;
						Dust dust150 = dust323;
						Dust dust334 = dust150;
						dust334.velocity *= 2.5f;
						dust323 = Dust.NewDustDirect(position, width, height, 228, 0f, 0f, 100, transparent7, 1.1f);
						dust150 = dust323;
						dust334 = dust150;
						dust334.velocity *= 2f;
						dust323.noGravity = true;
					}
					for (int num907 = 0; num907 < 3; num907++)
					{
						Dust dust324 = Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 100, transparent7, 1.1f);
						Dust dust149 = dust324;
						Dust dust334 = dust149;
						dust334.velocity *= 2f;
						dust324.noGravity = true;
					}
					for (int num908 = -1; num908 <= 1; num908 += 2)
					{
						for (int num909 = -1; num909 <= 1; num909 += 2)
						{
							if (Main.rand.Next(5) == 0)
							{
								Gore gore4 = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
								Gore gore29 = gore4;
								Gore gore64 = gore29;
								gore64.velocity *= 0.2f;
								gore29 = gore4;
								gore64 = gore29;
								gore64.scale *= 0.65f;
								gore29 = gore4;
								gore64 = gore29;
								gore64.velocity += new Vector2((float)num908, (float)num909) * 0.5f;
							}
						}
					}
				}
				else if (type == 776 || type == 780 || type == 777 || type == 781 || type == 778 || type == 782 || type == 803 || type == 804)
				{
					Resize(22, 22);
					if (type == 777 || type == 781)
					{
						SoundEngine.PlaySound(in SoundID.Item62, position);
					}
					else
					{
						SoundEngine.PlaySound(in SoundID.Item14, position);
					}
					Color transparent8 = Color.Transparent;
					for (int num910 = 0; num910 < 30; num910++)
					{
						Dust dust325 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, transparent8, 1.5f);
						Dust dust154 = dust325;
						Dust dust334 = dust154;
						dust334.velocity *= 1.4f;
					}
					for (int num911 = 0; num911 < 40; num911++)
					{
						Dust dust326 = Dust.NewDustDirect(position, width, height, 228, 0f, 0f, 100, transparent8, 3.5f);
						dust326.noGravity = true;
						Dust dust153 = dust326;
						Dust dust334 = dust153;
						dust334.velocity *= 7f;
						dust326 = Dust.NewDustDirect(position, width, height, 228, 0f, 0f, 100, transparent8, 1.3f);
						dust153 = dust326;
						dust334 = dust153;
						dust334.velocity *= 4f;
						dust326.noGravity = true;
					}
					for (int num912 = 0; num912 < 8; num912++)
					{
						Dust dust327 = Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 100, transparent8, 1.3f);
						Dust dust152 = dust327;
						Dust dust334 = dust152;
						dust334.velocity *= 4f;
						dust327.noGravity = true;
					}
					for (int num913 = 2; num913 <= 2; num913++)
					{
						for (int num914 = -1; num914 <= 1; num914 += 2)
						{
							for (int num915 = -1; num915 <= 1; num915 += 2)
							{
								Gore gore5 = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
								Gore gore30 = gore5;
								Gore gore64 = gore30;
								gore64.velocity *= ((num913 == 1) ? 0.4f : 0.8f);
								gore30 = gore5;
								gore64 = gore30;
								gore64.velocity += new Vector2((float)num914, (float)num915);
							}
						}
					}
					if (owner == Main.myPlayer)
					{
						int num916 = 779;
						if (type == 780 || type == 781 || type == 782)
						{
							num916 = 783;
						}
						if (type == 803)
						{
							num916 = 862;
						}
						if (type == 804)
						{
							num916 = 863;
						}
						float num919 = Main.rand.NextFloat() * ((float)Math.PI * 2f);
						for (float num920 = 0f; num920 < 1f; num920 += 1f / 6f)
						{
							float f5 = num919 + num920 * ((float)Math.PI * 2f);
							Vector2 vector71 = f5.ToRotationVector2() * (4f + Main.rand.NextFloat() * 2f);
							vector71 += Vector2.UnitY * -1f;
							int num921 = NewProjectile(GetProjectileSource_FromThis(), base.Center, vector71, num916, damage / 2, 0f, owner);
							Projectile projectile = Main.projectile[num921];
							Projectile projectile2 = projectile;
							Projectile projectile3 = projectile2;
							projectile3.timeLeft -= Main.rand.Next(30);
						}
					}
				}
				else if (type == 133 || type == 134 || type == 135 || type == 136 || type == 137 || type == 138 || type == 303 || type == 338 || type == 339 || type == 930)
				{
					if (type == 30 || type == 133 || type == 136)
					{
						SoundEngine.PlaySound(in SoundID.Item62, position);
					}
					else
					{
						SoundEngine.PlaySound(in SoundID.Item14, position);
					}
					position.X += width / 2;
					position.Y += height / 2;
					width = 22;
					height = 22;
					position.X -= width / 2;
					position.Y -= height / 2;
					for (int num922 = 0; num922 < 30; num922++)
					{
						int num923 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust157 = Main.dust[num923];
						Dust dust334 = dust157;
						dust334.velocity *= 1.4f;
					}
					for (int num924 = 0; num924 < 20; num924++)
					{
						int num925 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 3.5f);
						Main.dust[num925].noGravity = true;
						Dust dust156 = Main.dust[num925];
						Dust dust334 = dust156;
						dust334.velocity *= 7f;
						num925 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust156 = Main.dust[num925];
						dust334 = dust156;
						dust334.velocity *= 3f;
					}
					for (int num926 = 0; num926 < 2; num926++)
					{
						float num927 = 0.4f;
						if (num926 == 1)
						{
							num927 = 0.8f;
						}
						Vector2 val48 = new Vector2(position.X, position.Y);
						center4 = default(Vector2);
						int num928 = Gore.NewGore(val48, center4, Main.rand.Next(61, 64));
						Gore gore32 = Main.gore[num928];
						Gore gore64 = gore32;
						gore64.velocity *= num927;
						Main.gore[num928].velocity.X += 1f;
						Main.gore[num928].velocity.Y += 1f;
						Vector2 val49 = new Vector2(position.X, position.Y);
						center4 = default(Vector2);
						num928 = Gore.NewGore(val49, center4, Main.rand.Next(61, 64));
						gore32 = Main.gore[num928];
						gore64 = gore32;
						gore64.velocity *= num927;
						Main.gore[num928].velocity.X -= 1f;
						Main.gore[num928].velocity.Y += 1f;
						Vector2 val50 = new Vector2(position.X, position.Y);
						center4 = default(Vector2);
						num928 = Gore.NewGore(val50, center4, Main.rand.Next(61, 64));
						gore32 = Main.gore[num928];
						gore64 = gore32;
						gore64.velocity *= num927;
						Main.gore[num928].velocity.X += 1f;
						Main.gore[num928].velocity.Y -= 1f;
						Vector2 val51 = new Vector2(position.X, position.Y);
						center4 = default(Vector2);
						num928 = Gore.NewGore(val51, center4, Main.rand.Next(61, 64));
						gore32 = Main.gore[num928];
						gore64 = gore32;
						gore64.velocity *= num927;
						Main.gore[num928].velocity.X -= 1f;
						Main.gore[num928].velocity.Y -= 1f;
					}
				}
				else if (type == 139 || type == 140 || type == 141 || type == 142 || type == 143 || type == 144 || type == 340 || type == 341)
				{
					if (type == 139)
					{
						SoundEngine.PlaySound(in SoundID.Item62, position);
					}
					else
					{
						SoundEngine.PlaySound(in SoundID.Item14, position);
					}
					position.X += width / 2;
					position.Y += height / 2;
					width = 80;
					height = 80;
					position.X -= width / 2;
					position.Y -= height / 2;
					for (int num930 = 0; num930 < 40; num930++)
					{
						int num931 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 2f);
						Dust dust185 = Main.dust[num931];
						Dust dust334 = dust185;
						dust334.velocity *= 3f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num931].scale = 0.5f;
							Main.dust[num931].fadeIn = 1f + (float)Main.rand.Next(10) * 0.1f;
						}
					}
					for (int num932 = 0; num932 < 70; num932++)
					{
						int num933 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 3f);
						Main.dust[num933].noGravity = true;
						Dust dust182 = Main.dust[num933];
						Dust dust334 = dust182;
						dust334.velocity *= 5f;
						num933 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
						dust182 = Main.dust[num933];
						dust334 = dust182;
						dust334.velocity *= 2f;
					}
					for (int num934 = 0; num934 < 3; num934++)
					{
						float num935 = 0.33f;
						if (num934 == 1)
						{
							num935 = 0.66f;
						}
						if (num934 == 2)
						{
							num935 = 1f;
						}
						Vector2 val52 = new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f);
						center4 = default(Vector2);
						int num936 = Gore.NewGore(val52, center4, Main.rand.Next(61, 64));
						Gore gore33 = Main.gore[num936];
						Gore gore64 = gore33;
						gore64.velocity *= num935;
						Main.gore[num936].velocity.X += 1f;
						Main.gore[num936].velocity.Y += 1f;
						Vector2 val53 = new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f);
						center4 = default(Vector2);
						num936 = Gore.NewGore(val53, center4, Main.rand.Next(61, 64));
						gore33 = Main.gore[num936];
						gore64 = gore33;
						gore64.velocity *= num935;
						Main.gore[num936].velocity.X -= 1f;
						Main.gore[num936].velocity.Y += 1f;
						Vector2 val54 = new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f);
						center4 = default(Vector2);
						num936 = Gore.NewGore(val54, center4, Main.rand.Next(61, 64));
						gore33 = Main.gore[num936];
						gore64 = gore33;
						gore64.velocity *= num935;
						Main.gore[num936].velocity.X += 1f;
						Main.gore[num936].velocity.Y -= 1f;
						Vector2 val55 = new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f);
						center4 = default(Vector2);
						num936 = Gore.NewGore(val55, center4, Main.rand.Next(61, 64));
						gore33 = Main.gore[num936];
						gore64 = gore33;
						gore64.velocity *= num935;
						Main.gore[num936].velocity.X -= 1f;
						Main.gore[num936].velocity.Y -= 1f;
					}
					position.X += width / 2;
					position.Y += height / 2;
					width = 10;
					height = 10;
					position.X -= width / 2;
					position.Y -= height / 2;
				}
				else if (type == 246)
				{
					SoundEngine.PlaySound(in SoundID.Item14, position);
					for (int num937 = 0; num937 < 10; num937++)
					{
						int num938 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust196 = Main.dust[num938];
						Dust dust334 = dust196;
						dust334.velocity *= 0.9f;
					}
					for (int num939 = 0; num939 < 5; num939++)
					{
						int num941 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num941].noGravity = true;
						Dust dust191 = Main.dust[num941];
						Dust dust334 = dust191;
						dust334.velocity *= 3f;
						num941 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust191 = Main.dust[num941];
						dust334 = dust191;
						dust334.velocity *= 2f;
					}
					Vector2 val56 = new Vector2(position.X, position.Y);
					center4 = default(Vector2);
					int num942 = Gore.NewGore(val56, center4, Main.rand.Next(61, 64));
					Gore gore37 = Main.gore[num942];
					Gore gore64 = gore37;
					gore64.velocity *= 0.3f;
					Main.gore[num942].velocity.X += Main.rand.Next(-1, 2);
					Main.gore[num942].velocity.Y += Main.rand.Next(-1, 2);
					position.X += width / 2;
					position.Y += height / 2;
					width = 150;
					height = 150;
					position.X -= width / 2;
					position.Y -= height / 2;
					penetrate = -1;
					maxPenetrate = 0;
					Damage();
					if (owner == Main.myPlayer)
					{
						int num943 = Main.rand.Next(2, 6);
						for (int num944 = 0; num944 < num943; num944++)
						{
							float num945 = Main.rand.Next(-100, 101);
							num945 += 0.01f;
							float num946 = Main.rand.Next(-100, 101);
							num945 -= 0.01f;
							float num947 = (float)Math.Sqrt(num945 * num945 + num946 * num946);
							num947 = 8f / num947;
							num945 *= num947;
							num946 *= num947;
							int num948 = NewProjectile(GetProjectileSource_FromThis(), base.Center.X - oldVelocity.X, base.Center.Y - oldVelocity.Y, num945, num946, 249, damage, knockBack, owner);
							Main.projectile[num948].maxPenetrate = 0;
						}
					}
				}
				else if (type == 249)
				{
					SoundEngine.PlaySound(in SoundID.Item14, position);
					for (int num949 = 0; num949 < 7; num949++)
					{
						int num950 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust199 = Main.dust[num950];
						Dust dust334 = dust199;
						dust334.velocity *= 0.8f;
					}
					for (int num952 = 0; num952 < 2; num952++)
					{
						int num953 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num953].noGravity = true;
						Dust dust198 = Main.dust[num953];
						Dust dust334 = dust198;
						dust334.velocity *= 2.5f;
						num953 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust198 = Main.dust[num953];
						dust334 = dust198;
						dust334.velocity *= 1.5f;
					}
					Vector2 val57 = new Vector2(position.X, position.Y);
					center4 = default(Vector2);
					int num954 = Gore.NewGore(val57, center4, Main.rand.Next(61, 64));
					Gore gore39 = Main.gore[num954];
					Gore gore64 = gore39;
					gore64.velocity *= 0.2f;
					Main.gore[num954].velocity.X += Main.rand.Next(-1, 2);
					Main.gore[num954].velocity.Y += Main.rand.Next(-1, 2);
					position.X += width / 2;
					position.Y += height / 2;
					width = 100;
					height = 100;
					position.X -= width / 2;
					position.Y -= height / 2;
					penetrate = -1;
					Damage();
				}
				else if (type == 588)
				{
					SoundEngine.PlaySound(in SoundID.Item14, position);
					position = base.Center;
					width = (height = 22);
					base.Center = position;
					for (int num955 = 0; num955 < 8; num955++)
					{
						int num956 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 219 + Main.rand.Next(5));
						Dust dust204 = Main.dust[num956];
						Dust dust334 = dust204;
						dust334.velocity *= 1.4f;
						Main.dust[num956].fadeIn = 1f;
						Main.dust[num956].noGravity = true;
					}
					for (int num957 = 0; num957 < 15; num957++)
					{
						int num958 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 139 + Main.rand.Next(4), 0f, 0f, 0, default(Color), 1.6f);
						Main.dust[num958].noGravity = true;
						Dust dust203 = Main.dust[num958];
						Dust dust334 = dust203;
						dust334.velocity *= 5f;
						num958 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 139 + Main.rand.Next(4), 0f, 0f, 0, default(Color), 1.9f);
						dust203 = Main.dust[num958];
						dust334 = dust203;
						dust334.velocity *= 3f;
					}
					if (Main.rand.Next(2) == 0)
					{
						Vector2 val58 = new Vector2(position.X, position.Y);
						center4 = default(Vector2);
						int num962 = Gore.NewGore(val58, center4, Main.rand.Next(276, 283));
						Gore gore43 = Main.gore[num962];
						Gore gore64 = gore43;
						gore64.velocity *= 0.4f;
						Main.gore[num962].velocity.X += 1f;
						Main.gore[num962].velocity.Y += 1f;
					}
					if (Main.rand.Next(2) == 0)
					{
						Vector2 val59 = new Vector2(position.X, position.Y);
						center4 = default(Vector2);
						int num961 = Gore.NewGore(val59, center4, Main.rand.Next(276, 283));
						Gore gore42 = Main.gore[num961];
						Gore gore64 = gore42;
						gore64.velocity *= 0.4f;
						Main.gore[num961].velocity.X -= 1f;
						Main.gore[num961].velocity.Y += 1f;
					}
					if (Main.rand.Next(2) == 0)
					{
						Vector2 val60 = new Vector2(position.X, position.Y);
						center4 = default(Vector2);
						int num960 = Gore.NewGore(val60, center4, Main.rand.Next(276, 283));
						Gore gore41 = Main.gore[num960];
						Gore gore64 = gore41;
						gore64.velocity *= 0.4f;
						Main.gore[num960].velocity.X += 1f;
						Main.gore[num960].velocity.Y -= 1f;
					}
					if (Main.rand.Next(2) == 0)
					{
						Vector2 val61 = new Vector2(position.X, position.Y);
						center4 = default(Vector2);
						int num959 = Gore.NewGore(val61, center4, Main.rand.Next(276, 283));
						Gore gore40 = Main.gore[num959];
						Gore gore64 = gore40;
						gore64.velocity *= 0.4f;
						Main.gore[num959].velocity.X -= 1f;
						Main.gore[num959].velocity.Y -= 1f;
					}
				}
				else if (type == 773)
				{
					Player player2 = Main.player[owner];
					Vector2 v = DirectionTo(player2.Center);
					float num963 = v.ToRotation() + (float)Math.PI / 2f;
					num963 += (float)Math.PI;
					Point scarabBombDigDirectionSnap = GetScarabBombDigDirectionSnap8();
					num963 = scarabBombDigDirectionSnap.ToVector2().ToRotation() + (float)Math.PI / 2f;
					if (type == 794 || type == 797)
					{
						SoundEngine.PlaySound(in SoundID.Item62, base.Center);
					}
					else
					{
						SoundEngine.PlaySound(in SoundID.Item14, base.Center);
					}
					Resize(80, 80);
					for (int num964 = 0; num964 < 60; num964++)
					{
						Dust dust329 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, default(Color), 2f);
						dust329.velocity.Y -= 0.5f;
						Dust dust212 = dust329;
						Dust dust334 = dust212;
						dust334.velocity *= 1.2f;
						dust329.color = Color.Black * 0.9f;
						if (Main.rand.Next(2) == 0)
						{
							dust329.scale = 0.5f;
							dust329.fadeIn = 1f + (float)Main.rand.Next(10) * 0.1f;
							dust329.color = Color.Black * 0.8f;
						}
					}
					for (int num966 = 0; num966 < 30; num966++)
					{
						Dust dust330 = Dust.NewDustDirect(position, width, height, 59, 0f, 0f, 100);
						dust330.noGravity = true;
						if (Math.Abs(velocity.X) > 0.25f)
						{
							velocity.X *= 0.25f / Math.Abs(velocity.X);
						}
						dust330.velocity.Y -= 0.5f;
						dust330.fadeIn = 1.2f;
						Dust dust209 = dust330;
						Dust dust334 = dust209;
						dust334.velocity *= 8f;
						Dust dust335 = dust330;
						Vector2 spinningpoint42 = dust330.velocity;
						double radians56 = num963;
						center4 = default(Vector2);
						dust335.velocity = spinningpoint42.RotatedBy(radians56, center4);
						dust330 = Dust.NewDustDirect(position, width, height, 59, 0f, 0f, 100, default(Color), 1.5f);
						dust209 = dust330;
						dust334 = dust209;
						dust334.velocity *= 2f;
						Dust dust336 = dust330;
						Vector2 spinningpoint43 = dust330.velocity;
						double radians57 = num963;
						center4 = default(Vector2);
						dust336.velocity = spinningpoint43.RotatedBy(radians57, center4);
						dust330.velocity.Y -= 1.5f;
						dust330 = Dust.NewDustDirect(position, width, height, 59, 0f, 0f, 100, default(Color), 1.5f);
						dust330.noGravity = true;
						dust330.velocity.Y -= 1f;
						dust330.fadeIn = 2f;
						dust209 = dust330;
						dust334 = dust209;
						dust334.velocity *= 4f;
						Dust dust337 = dust330;
						Vector2 spinningpoint44 = dust330.velocity;
						double radians58 = num963;
						center4 = default(Vector2);
						dust337.velocity = spinningpoint44.RotatedBy(radians58, center4);
					}
					bool flag4 = Math.Abs(scarabBombDigDirectionSnap.X) + Math.Abs(scarabBombDigDirectionSnap.Y) == 1;
					for (int num967 = 1; num967 <= 3; num967++)
					{
						float num968 = (float)Math.PI * 2f * Main.rand.NextFloat();
						for (float num969 = 0f; num969 < 1f; num969 += 1f / 12f)
						{
							float f6 = (float)Math.PI * 2f * num969 + num968;
							Vector2 value5 = f6.ToRotationVector2();
							value5 *= new Vector2(0.7f, 0.3f);
							Dust dust331 = Dust.NewDustPerfect(base.Center, 59, value5);
							dust331.fadeIn = 2f;
							dust331.noGravity = true;
							Dust dust207 = dust331;
							Dust dust334 = dust207;
							dust334.velocity *= (float)num967 + Main.rand.NextFloat() * 0.6f;
							dust331.velocity.Y -= (float)num967 * 0.8f;
							Vector2 spinningpoint45 = dust331.velocity;
							double radians59 = num963;
							center4 = default(Vector2);
							dust331.velocity = spinningpoint45.RotatedBy(radians59, center4);
							if (flag4)
							{
								dust207 = dust331;
								dust334 = dust207;
								dust334.velocity += scarabBombDigDirectionSnap.ToVector2() * (Main.rand.NextFloat() * 11f + 6f);
							}
							else
							{
								dust207 = dust331;
								dust334 = dust207;
								dust334.velocity += scarabBombDigDirectionSnap.ToVector2() * (Main.rand.NextFloat() * 7f + 5f);
							}
						}
					}
					Vector2 vector72 = (num963 - (float)Math.PI / 2f).ToRotationVector2();
					for (int num970 = 1; num970 <= 1; num970++)
					{
						for (int num971 = -1; num971 <= 1; num971 += 2)
						{
							for (int num972 = -1; num972 <= 1; num972 += 2)
							{
								Gore gore6 = Gore.NewGoreDirect(base.Center - Vector2.One * 20f, Vector2.Zero, Main.rand.Next(61, 64));
								gore6.velocity = gore6.velocity * 0.5f + vector72 * 3f;
								Gore gore44 = gore6;
								Gore gore64 = gore44;
								gore64.velocity += new Vector2((float)num971, (float)num972) * 0.2f;
							}
						}
					}
					Resize(10, 10);
					if (owner == Main.myPlayer)
					{
						Point p = base.Center.ToTileCoordinates();
						Vector2 vector73 = p.ToWorldCoordinates();
						bool wallSplode = false;
						int num973 = 15;
						if (scarabBombDigDirectionSnap.X == 0 || scarabBombDigDirectionSnap.Y == 0)
						{
							num973 = (int)((double)num973 * Math.Sqrt(2.0));
						}
						for (int num974 = 0; num974 < num973; num974++)
						{
							Vector2 vec = vector73 + scarabBombDigDirectionSnap.ToVector2() * 16f * (float)num974 * 1f;
							Point p2 = vec.ToTileCoordinates();
							if (ShouldWallExplode(p2.ToWorldCoordinates(), 9999, p2.X - 1, p2.X + 1, p2.Y - 1, p2.Y + 1))
							{
								wallSplode = true;
								break;
							}
						}
						for (int num975 = 0; num975 < num973; num975++)
						{
							Vector2 vec2 = vector73 + scarabBombDigDirectionSnap.ToVector2() * 16f * (float)num975 * 1f;
							Point p3 = vec2.ToTileCoordinates();
							ExplodeTiles(p3.ToWorldCoordinates(), 9999, p3.X - 1, p3.X + 1, p3.Y - 1, p3.Y + 1, wallSplode);
						}
					}
				}
				else if (type == 28 || type == 30 || type == 37 || type == 75 || type == 102 || type == 164 || type == 397 || type == 517 || type == 516 || type == 519 || type == 773)
				{
					SoundEngine.PlaySound(in SoundID.Item14, position);
					position.X += width / 2;
					position.Y += height / 2;
					width = 22;
					height = 22;
					position.X -= width / 2;
					position.Y -= height / 2;
					int num977 = 6;
					if (type == 773)
					{
						num977 = 59;
					}
					for (int num978 = 0; num978 < 20; num978++)
					{
						int num979 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust219 = Main.dust[num979];
						Dust dust334 = dust219;
						dust334.velocity *= 1.4f;
					}
					for (int num980 = 0; num980 < 10; num980++)
					{
						int num981 = Dust.NewDust(position, width, height, num977, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num981].noGravity = true;
						Dust dust218 = Main.dust[num981];
						Dust dust334 = dust218;
						dust334.velocity *= 5f;
						num981 = Dust.NewDust(position, width, height, num977, 0f, 0f, 100, default(Color), 1.5f);
						dust218 = Main.dust[num981];
						dust334 = dust218;
						dust334.velocity *= 3f;
					}
					Vector2 val62 = position;
					center4 = default(Vector2);
					int num982 = Gore.NewGore(val62, center4, Main.rand.Next(61, 64));
					Gore gore49 = Main.gore[num982];
					Gore gore64 = gore49;
					gore64.velocity *= 0.4f;
					Main.gore[num982].velocity.X += 1f;
					Main.gore[num982].velocity.Y += 1f;
					Vector2 val63 = position;
					center4 = default(Vector2);
					num982 = Gore.NewGore(val63, center4, Main.rand.Next(61, 64));
					gore49 = Main.gore[num982];
					gore64 = gore49;
					gore64.velocity *= 0.4f;
					Main.gore[num982].velocity.X -= 1f;
					Main.gore[num982].velocity.Y += 1f;
					Vector2 val64 = position;
					center4 = default(Vector2);
					num982 = Gore.NewGore(val64, center4, Main.rand.Next(61, 64));
					gore49 = Main.gore[num982];
					gore64 = gore49;
					gore64.velocity *= 0.4f;
					Main.gore[num982].velocity.X += 1f;
					Main.gore[num982].velocity.Y -= 1f;
					Vector2 val65 = position;
					center4 = default(Vector2);
					num982 = Gore.NewGore(val65, center4, Main.rand.Next(61, 64));
					gore49 = Main.gore[num982];
					gore64 = gore49;
					gore64.velocity *= 0.4f;
					Main.gore[num982].velocity.X -= 1f;
					Main.gore[num982].velocity.Y -= 1f;
					if (type == 102)
					{
						Vector2 vector74 = position;
						position.X += width / 2;
						position.Y += height / 2;
						width = 128;
						height = 128;
						position.X -= width / 2;
						position.Y -= height / 2;
						damage = 40;
						Damage();
						position = vector74;
						width = 22;
						height = 22;
					}
					if (type == 75)
					{
						Resize(128, 128);
						damage = 60;
						knockBack = 8f;
						Damage();
						Resize(22, 22);
					}
				}
				else if (type == 29 || type == 108 || type == 470 || type == 637 || type == 1002)
				{
					SoundEngine.PlaySound(in SoundID.Item14, position);
					if (type == 29)
					{
						position.X += width / 2;
						position.Y += height / 2;
						width = 200;
						height = 200;
						position.X -= width / 2;
						position.Y -= height / 2;
					}
					for (int num983 = 0; num983 < 50; num983++)
					{
						int num984 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 2f);
						Dust dust228 = Main.dust[num984];
						Dust dust334 = dust228;
						dust334.velocity *= 1.4f;
					}
					for (int num985 = 0; num985 < 80; num985++)
					{
						int num986 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 3f);
						Main.dust[num986].noGravity = true;
						Dust dust227 = Main.dust[num986];
						Dust dust334 = dust227;
						dust334.velocity *= 5f;
						num986 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
						dust227 = Main.dust[num986];
						dust334 = dust227;
						dust334.velocity *= 3f;
					}
					for (int num988 = 0; num988 < 2; num988++)
					{
						Vector2 val66 = new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f);
						center4 = default(Vector2);
						int num989 = Gore.NewGore(val66, center4, Main.rand.Next(61, 64));
						Main.gore[num989].scale = 1.5f;
						Main.gore[num989].velocity.X += 1.5f;
						Main.gore[num989].velocity.Y += 1.5f;
						Vector2 val67 = new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f);
						center4 = default(Vector2);
						num989 = Gore.NewGore(val67, center4, Main.rand.Next(61, 64));
						Main.gore[num989].scale = 1.5f;
						Main.gore[num989].velocity.X -= 1.5f;
						Main.gore[num989].velocity.Y += 1.5f;
						Vector2 val68 = new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f);
						center4 = default(Vector2);
						num989 = Gore.NewGore(val68, center4, Main.rand.Next(61, 64));
						Main.gore[num989].scale = 1.5f;
						Main.gore[num989].velocity.X += 1.5f;
						Main.gore[num989].velocity.Y -= 1.5f;
						Vector2 val69 = new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f);
						center4 = default(Vector2);
						num989 = Gore.NewGore(val69, center4, Main.rand.Next(61, 64));
						Main.gore[num989].scale = 1.5f;
						Main.gore[num989].velocity.X -= 1.5f;
						Main.gore[num989].velocity.Y -= 1.5f;
					}
					position.X += width / 2;
					position.Y += height / 2;
					width = 10;
					height = 10;
					position.X -= width / 2;
					position.Y -= height / 2;
				}
				else if (type == 69)
				{
					SoundEngine.PlaySound(13, (int)position.X, (int)position.Y);
					for (int num990 = 0; num990 < 5; num990++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 13);
					}
					for (int num991 = 0; num991 < 30; num991++)
					{
						int num992 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 33, 0f, -2f, 0, default(Color), 1.1f);
						Main.dust[num992].alpha = 100;
						Main.dust[num992].velocity.X *= 1.5f;
						Dust dust230 = Main.dust[num992];
						Dust dust334 = dust230;
						dust334.velocity *= 3f;
					}
				}
				else if (type == 70)
				{
					SoundEngine.PlaySound(13, (int)position.X, (int)position.Y);
					for (int num993 = 0; num993 < 5; num993++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 13);
					}
					for (int num994 = 0; num994 < 30; num994++)
					{
						int num995 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 52, 0f, -2f, 0, default(Color), 1.1f);
						Main.dust[num995].alpha = 100;
						Main.dust[num995].velocity.X *= 1.5f;
						Dust dust232 = Main.dust[num995];
						Dust dust334 = dust232;
						dust334.velocity *= 3f;
					}
				}
				else if (type == 621)
				{
					SoundEngine.PlaySound(13, (int)position.X, (int)position.Y);
					for (int num996 = 0; num996 < 5; num996++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 13);
					}
					for (int num997 = 0; num997 < 30; num997++)
					{
						int num999 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 266, 0f, -2f, 0, default(Color), 1.1f);
						Main.dust[num999].alpha = 100;
						Main.dust[num999].velocity.X *= 1.5f;
						Dust dust233 = Main.dust[num999];
						Dust dust334 = dust233;
						dust334.velocity *= 3f;
					}
				}
				else if (type == 114 || type == 115)
				{
					SoundEngine.PlaySound(in SoundID.Item10, position);
					for (int num1000 = 4; num1000 < 31; num1000++)
					{
						float num1001 = oldVelocity.X * (30f / (float)num1000);
						float num1002 = oldVelocity.Y * (30f / (float)num1000);
						int num1003 = Dust.NewDust(new Vector2(position.X - num1001, position.Y - num1002), 8, 8, 27, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.4f);
						Main.dust[num1003].noGravity = true;
						Dust dust236 = Main.dust[num1003];
						Dust dust334 = dust236;
						dust334.velocity *= 0.5f;
						num1003 = Dust.NewDust(new Vector2(position.X - num1001, position.Y - num1002), 8, 8, 27, oldVelocity.X, oldVelocity.Y, 100, default(Color), 0.9f);
						dust236 = Main.dust[num1003];
						dust334 = dust236;
						dust334.velocity *= 0.5f;
					}
				}
				else if (type == 116)
				{
					SoundEngine.PlaySound(in SoundID.Item10, position);
					for (int num1004 = 4; num1004 < 31; num1004++)
					{
						float num1005 = oldVelocity.X * (30f / (float)num1004);
						float num1006 = oldVelocity.Y * (30f / (float)num1004);
						int num1007 = Dust.NewDust(new Vector2(position.X - num1005, position.Y - num1006), 8, 8, 64, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.8f);
						Main.dust[num1007].noGravity = true;
						num1007 = Dust.NewDust(new Vector2(position.X - num1005, position.Y - num1006), 8, 8, 64, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.4f);
						Main.dust[num1007].noGravity = true;
					}
				}
				else if (type == 173)
				{
					SoundEngine.PlaySound(in SoundID.Item10, position);
					for (int num1008 = 4; num1008 < 24; num1008++)
					{
						float num1010 = oldVelocity.X * (30f / (float)num1008);
						float num1011 = oldVelocity.Y * (30f / (float)num1008);
						int num1030 = Main.rand.Next(3);
						int num1012 = Dust.NewDust(new Vector2(position.X - num1010, position.Y - num1011), 8, 8, num1030 switch
						{
							0 => 15, 
							1 => 57, 
							_ => 58, 
						}, oldVelocity.X * 0.2f, oldVelocity.Y * 0.2f, 100, default(Color), 1.8f);
						Dust dust239 = Main.dust[num1012];
						Dust dust334 = dust239;
						dust334.velocity *= 1.5f;
						Main.dust[num1012].noGravity = true;
					}
				}
				else if (type == 132)
				{
					SoundEngine.PlaySound(in SoundID.Item10, position);
					for (int num1013 = 4; num1013 < 31; num1013++)
					{
						float num1014 = oldVelocity.X * (30f / (float)num1013);
						float num1015 = oldVelocity.Y * (30f / (float)num1013);
						int num1016 = Dust.NewDust(new Vector2(oldPosition.X - num1014, oldPosition.Y - num1015), 8, 8, 107, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.8f);
						Main.dust[num1016].noGravity = true;
						Dust dust241 = Main.dust[num1016];
						Dust dust334 = dust241;
						dust334.velocity *= 0.5f;
						num1016 = Dust.NewDust(new Vector2(oldPosition.X - num1014, oldPosition.Y - num1015), 8, 8, 107, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.4f);
						dust241 = Main.dust[num1016];
						dust334 = dust241;
						dust334.velocity *= 0.05f;
					}
				}
				else if (type == 156)
				{
					SoundEngine.PlaySound(in SoundID.Item10, position);
					for (int num1017 = 4; num1017 < 31; num1017++)
					{
						float num1018 = oldVelocity.X * (30f / (float)num1017);
						float num1020 = oldVelocity.Y * (30f / (float)num1017);
						int num1021 = Dust.NewDust(new Vector2(oldPosition.X - num1018, oldPosition.Y - num1020), 8, 8, 73, oldVelocity.X, oldVelocity.Y, 255, default(Color), 1.8f);
						Main.dust[num1021].noGravity = true;
						Dust dust244 = Main.dust[num1021];
						Dust dust334 = dust244;
						dust334.velocity *= 0.5f;
						num1021 = Dust.NewDust(new Vector2(oldPosition.X - num1018, oldPosition.Y - num1020), 8, 8, 73, oldVelocity.X, oldVelocity.Y, 255, default(Color), 1.4f);
						dust244 = Main.dust[num1021];
						dust334 = dust244;
						dust334.velocity *= 0.05f;
						Main.dust[num1021].noGravity = true;
					}
				}
				else if (type == 157)
				{
					SoundEngine.PlaySound(in SoundID.Item10, position);
					for (int num1022 = 4; num1022 < 31; num1022++)
					{
						int num1023 = Dust.NewDust(position, width, height, 107, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.8f);
						Main.dust[num1023].noGravity = true;
						Dust dust246 = Main.dust[num1023];
						Dust dust334 = dust246;
						dust334.velocity *= 0.5f;
					}
				}
				else if (type == 370)
				{
					SoundEngine.PlaySound(in SoundID.Item4, position);
					for (int num1024 = 0; num1024 < 5; num1024++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 13);
					}
					Vector2 vector75 = default(Vector2);
					for (int num1025 = 0; num1025 < 30; num1025++)
					{
						((Vector2)(ref vector75))._002Ector((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
						((Vector2)(ref vector75)).Normalize();
						int num1026 = Gore.NewGore(base.Center + vector75 * 10f, vector75 * (float)Main.rand.Next(4, 9) * 0.66f + Vector2.UnitY * 1.5f, 331, (float)Main.rand.Next(40, 141) * 0.01f);
						Main.gore[num1026].sticky = false;
					}
				}
				else if (type == 371)
				{
					SoundEngine.PlaySound(13, (int)position.X, (int)position.Y);
					SoundEngine.PlaySound(in SoundID.Item16, position);
					for (int num1027 = 0; num1027 < 5; num1027++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 13);
					}
					Vector2 vector76 = default(Vector2);
					for (int num1028 = 0; num1028 < 30; num1028++)
					{
						((Vector2)(ref vector76))._002Ector((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
						((Vector2)(ref vector76)).Normalize();
						vector76 *= 0.4f;
						int num1029 = Gore.NewGore(base.Center + vector76 * 10f, vector76 * (float)Main.rand.Next(4, 9) * 0.66f + Vector2.UnitY * 1.5f, Main.rand.Next(435, 438), (float)Main.rand.Next(20, 100) * 0.01f);
						Main.gore[num1029].sticky = false;
					}
				}
				else if (type == 936)
				{
					SoundEngine.PlaySound(in SoundID.Item21, position);
					for (int num4 = 0; num4 < 20; num4++)
					{
						Color newColor8 = Main.hslToRgb(0.7f + 0.2f * Main.rand.NextFloat(), 1f, 0.7f);
						ref Color reference = ref newColor8;
						((Color)(ref reference)).A = (byte)(((Color)(ref reference)).A / 2);
						int num5 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 4, 0f, 0f, 150, newColor8);
						Dust dust251 = Main.dust[num5];
						Dust dust334 = dust251;
						dust334.velocity *= 1.5f;
						newColor8 = Main.hslToRgb(0.7f + 0.2f * Main.rand.NextFloat(), 1f, 0.5f);
						reference = ref newColor8;
						((Color)(ref reference)).A = (byte)(((Color)(ref reference)).A / 2);
						num5 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 4, 0f, 0f, 150, newColor8, 1.8f);
						dust251 = Main.dust[num5];
						dust334 = dust251;
						dust334.velocity *= 3f;
						Main.dust[num5].noGravity = true;
					}
				}
			}
		}
		if (owner == Main.myPlayer && (type == 370 || type == 371 || type == 936))
		{
			float num6 = 80f;
			int num7 = 119;
			if (type == 371)
			{
				num7 = 120;
			}
			if (type == 936)
			{
				num7 = 320;
			}
			for (int num8 = 0; num8 < 255; num8++)
			{
				Player player3 = Main.player[num8];
				if (player3.active && !player3.dead && Vector2.Distance(base.Center, player3.Center) < num6)
				{
					player3.AddBuff(num7, 1800, quiet: false);
				}
			}
			for (int num9 = 0; num9 < 200; num9++)
			{
				NPC nPC = Main.npc[num9];
				if (nPC.active && nPC.life > 0 && Vector2.Distance(base.Center, nPC.Center) < num6)
				{
					nPC.AddBuff(num7, 1800);
				}
			}
		}
		if (owner == Main.myPlayer)
		{
			if (type == 30 || type == 517 || type == 397 || type == 588)
			{
				int num10 = 4;
				Vector2 center2 = base.Center;
				int num11 = (int)(center2.X / 16f - (float)num10);
				int num12 = (int)(center2.X / 16f + (float)num10);
				int num13 = (int)(center2.Y / 16f - (float)num10);
				int num15 = (int)(center2.Y / 16f + (float)num10);
				if (num11 < 0)
				{
					num11 = 0;
				}
				if (num12 > Main.maxTilesX)
				{
					num12 = Main.maxTilesX;
				}
				if (num13 < 0)
				{
					num13 = 0;
				}
				if (num15 > Main.maxTilesY)
				{
					num15 = Main.maxTilesY;
				}
				ExplodeCrackedTiles(center2, num10, num11, num12, num13, num15);
			}
			if (type == 28 || type == 29 || type == 37 || type == 108 || type == 136 || type == 137 || type == 138 || type == 142 || type == 143 || type == 144 || type == 339 || type == 341 || type == 470 || type == 516 || type == 519 || type == 637 || type == 716 || type == 718 || type == 780 || type == 781 || type == 782 || type == 804 || type == 783 || type == 863 || type == 796 || type == 797 || type == 798 || type == 809 || (type == 102 && Main.getGoodWorld && !Main.remixWorld))
			{
				int num16 = 3;
				if (type == 102)
				{
					num16 = 4;
				}
				if (type == 28 || type == 37 || type == 516 || type == 519)
				{
					num16 = 4;
				}
				if (type == 29 || type == 470 || type == 637 || type == 796 || type == 797 || type == 798 || type == 809)
				{
					num16 = 7;
				}
				if (type == 142 || type == 143 || type == 144 || type == 341)
				{
					num16 = 5;
				}
				if (type == 716 || type == 780 || type == 781 || type == 782 || type == 804 || type == 783 || type == 863)
				{
					num16 = 3;
				}
				if (type == 718)
				{
					num16 = 5;
				}
				if (type == 108)
				{
					num16 = 10;
				}
				if (type == 1002)
				{
					num16 = 10;
				}
				Vector2 center3 = position;
				if (type == 716 || type == 718 || type == 773)
				{
					center3 = base.Center;
				}
				int num17 = num16;
				int num18 = num16;
				int num19 = (int)(center3.X / 16f - (float)num17);
				int num20 = (int)(center3.X / 16f + (float)num17);
				int num21 = (int)(center3.Y / 16f - (float)num18);
				int num22 = (int)(center3.Y / 16f + (float)num18);
				if (num19 < 0)
				{
					num19 = 0;
				}
				if (num20 > Main.maxTilesX)
				{
					num20 = Main.maxTilesX;
				}
				if (num21 < 0)
				{
					num21 = 0;
				}
				if (num22 > Main.maxTilesY)
				{
					num22 = Main.maxTilesY;
				}
				bool wallSplode2 = ShouldWallExplode(center3, num16, num19, num20, num21, num22);
				ExplodeTiles(center3, num16, num19, num20, num21, num22, wallSplode2);
			}
			if (Main.netMode != 0)
			{
				NetMessage.SendData(29, -1, -1, null, identity, owner);
			}
			if (!noDropItem)
			{
				int num23 = -1;
				if (type >= 736 && type <= 738)
				{
					SoundEngine.PlaySound(in SoundID.Item127, position);
					for (int num24 = 0; num24 < 3; num24++)
					{
						Dust.NewDust(position, 16, 16, type - 736 + 275);
					}
					int num26 = (int)(base.Center.X / 16f);
					int num27 = (int)(base.Center.Y / 16f) + 1;
					if (Main.myPlayer == owner && Main.tile[num26, num27].active() && TileID.Sets.CrackedBricks[Main.tile[num26, num27].type] && Main.rand.Next(2) == 0)
					{
						WorldGen.KillTile(num26, num27);
						if (Main.netMode != 0)
						{
							NetMessage.SendData(17, -1, -1, null, 20, num26, num27);
						}
					}
				}
				else if (aiStyle == 10)
				{
					int num28 = (int)(position.X + (float)(width / 2)) / 16;
					int num29 = (int)(position.Y + (float)(height / 2)) / 16;
					int num30 = 0;
					int num31 = 2;
					if (type == 109)
					{
						num30 = 147;
						num31 = 0;
					}
					if (type == 31)
					{
						num30 = 53;
						num31 = 169;
						if (ai[0] == 2f)
						{
							num31 = 0;
						}
					}
					if (type == 42)
					{
						num30 = 53;
						num31 = 0;
					}
					if (type == 56)
					{
						num30 = 112;
						num31 = 370;
					}
					if (type == 65)
					{
						num30 = 112;
						num31 = 0;
					}
					if (type == 67)
					{
						num30 = 116;
						num31 = 408;
					}
					if (type == 68)
					{
						num30 = 116;
						num31 = 0;
					}
					if (type == 71)
					{
						num30 = 123;
						num31 = 424;
					}
					if (type == 39)
					{
						num30 = 59;
						num31 = 0;
					}
					if (type == 40)
					{
						num30 = 57;
						num31 = 0;
					}
					if (type == 179)
					{
						num30 = 224;
						num31 = 1103;
					}
					if (type == 241)
					{
						num30 = 234;
						num31 = 1246;
					}
					if (type == 354)
					{
						num30 = 234;
						num31 = 0;
					}
					if (type == 411)
					{
						num30 = 330;
						num31 = 71;
					}
					if (type == 412)
					{
						num30 = 331;
						num31 = 72;
					}
					if (type == 413)
					{
						num30 = 332;
						num31 = 73;
					}
					if (type == 414)
					{
						num30 = 333;
						num31 = 74;
					}
					if (type == 812)
					{
						num30 = 495;
						num31 = 4090;
					}
					if (type == 109)
					{
						int num32 = Player.FindClosest(position, width, height);
						center4 = base.Center - Main.player[num32].Center;
						if ((double)((Vector2)(ref center4)).Length() > (double)Main.LogicCheckScreenWidth * 0.75)
						{
							num30 = -1;
							num31 = 593;
						}
					}
					if (Main.tile[num28, num29].nactive() && Main.tile[num28, num29].halfBrick() && velocity.Y > 0f && Math.Abs(velocity.Y) > Math.Abs(velocity.X))
					{
						num29--;
					}
					if (!Main.tile[num28, num29].active() && num30 >= 0)
					{
						bool flag5 = false;
						bool flag6 = false;
						if (num29 < Main.maxTilesY - 2)
						{
							Tile tile2 = Main.tile[num28, num29 + 1];
							if (tile2 != null && tile2.active())
							{
								if (tile2.active() && tile2.type == 314)
								{
									flag6 = true;
								}
								if (tile2.active() && WorldGen.BlockBelowMakesSandFall(num28, num29))
								{
									flag6 = true;
								}
							}
						}
						if (!flag6)
						{
							flag5 = WorldGen.PlaceTile(num28, num29, num30, mute: false, forced: true);
						}
						if (!flag6 && Main.tile[num28, num29].active() && Main.tile[num28, num29].type == num30)
						{
							if (Main.tile[num28, num29 + 1].halfBrick() || Main.tile[num28, num29 + 1].slope() != 0)
							{
								WorldGen.SlopeTile(num28, num29 + 1);
								if (Main.netMode != 0)
								{
									NetMessage.SendData(17, -1, -1, null, 14, num28, num29 + 1);
								}
							}
							if (Main.netMode != 0)
							{
								NetMessage.SendData(17, -1, -1, null, 1, num28, num29, num30);
							}
						}
						else if (!flag5 && num31 > 0)
						{
							num23 = Item.NewItem(GetItemSource_DropAsItem(), (int)position.X, (int)position.Y, width, height, num31);
						}
					}
					else if (num31 > 0)
					{
						num23 = Item.NewItem(GetItemSource_DropAsItem(), (int)position.X, (int)position.Y, width, height, num31);
					}
				}
				if (type == 171)
				{
					if (ai[1] == 0f)
					{
						num23 = Item.NewItem(GetItemSource_DropAsItem(), (int)position.X, (int)position.Y, width, height, 985);
						Main.item[num23].noGrabDelay = 0;
					}
					else if (ai[1] < 10f)
					{
						num23 = Item.NewItem(GetItemSource_DropAsItem(), (int)position.X, (int)position.Y, width, height, 965, (int)(10f - ai[1]));
						Main.item[num23].noGrabDelay = 0;
					}
				}
				if (type == 475)
				{
					if (ai[1] == 0f)
					{
						num23 = Item.NewItem(GetItemSource_DropAsItem(), (int)position.X, (int)position.Y, width, height, 3005);
						Main.item[num23].noGrabDelay = 0;
					}
					else if (ai[1] < 10f)
					{
						num23 = Item.NewItem(GetItemSource_DropAsItem(), (int)position.X, (int)position.Y, width, height, 2996, (int)(10f - ai[1]));
						Main.item[num23].noGrabDelay = 0;
					}
				}
				if (type == 505)
				{
					if (ai[1] == 0f)
					{
						num23 = Item.NewItem(GetItemSource_DropAsItem(), (int)position.X, (int)position.Y, width, height, 3079);
						Main.item[num23].noGrabDelay = 0;
					}
					else if (ai[1] < 10f)
					{
						num23 = Item.NewItem(GetItemSource_DropAsItem(), (int)position.X, (int)position.Y, width, height, 3077, (int)(10f - ai[1]));
						Main.item[num23].noGrabDelay = 0;
					}
				}
				if (type == 506)
				{
					if (ai[1] == 0f)
					{
						num23 = Item.NewItem(GetItemSource_DropAsItem(), (int)position.X, (int)position.Y, width, height, 3080);
						Main.item[num23].noGrabDelay = 0;
					}
					else if (ai[1] < 10f)
					{
						num23 = Item.NewItem(GetItemSource_DropAsItem(), (int)position.X, (int)position.Y, width, height, 3078, (int)(10f - ai[1]));
						Main.item[num23].noGrabDelay = 0;
					}
				}
				if (type == 12 && damage > 500 && !Main.remixWorld)
				{
					num23 = Item.NewItem(GetItemSource_DropAsItem(), (int)position.X, (int)position.Y, width, height, 75);
				}
				if (type == 155)
				{
					num23 = Item.NewItem(GetItemSource_DropAsItem(), (int)position.X, (int)position.Y, width, height, 859);
				}
				if (type == 861)
				{
					num23 = Item.NewItem(GetItemSource_DropAsItem(), (int)position.X, (int)position.Y, width, height, 4743);
				}
				if (Main.netMode == 1 && num23 >= 0)
				{
					NetMessage.SendData(21, -1, -1, null, num23, 1f);
				}
			}
			if (type == 69 || type == 70 || type == 621)
			{
				int i2 = (int)(position.X + (float)(width / 2)) / 16;
				int j2 = (int)(position.Y + (float)(height / 2)) / 16;
				if (type == 69)
				{
					WorldGen.Convert(i2, j2, 2);
				}
				if (type == 70)
				{
					WorldGen.Convert(i2, j2, 1);
				}
				if (type == 621)
				{
					WorldGen.Convert(i2, j2, 4);
				}
			}
			if (type == 378)
			{
				int num33 = Main.rand.Next(2, 4);
				if (Main.rand.Next(5) == 0)
				{
					num33++;
				}
				for (int num34 = 0; num34 < num33; num34++)
				{
					float x2 = velocity.X;
					float y8 = velocity.Y;
					x2 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
					y8 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
					NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, x2, y8, 379, damage, knockBack, owner);
				}
			}
		}
		ProjectileLoader.OnKill(this, num);
		active = false;
	}

	private void DropGeodeGems()
	{
		DropGeodeLoot(this);
	}

	private void TryGettingHitByOtherPlayersExplosives()
	{
		if (owner != Main.myPlayer)
		{
			PrepareBombToBlow();
			Damage();
		}
	}

	private void DoRainbowCrystalStaffExplosion()
	{
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0179: Unknown result type (might be due to invalid IL or missing references)
		//IL_017e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0218: Unknown result type (might be due to invalid IL or missing references)
		//IL_021d: Unknown result type (might be due to invalid IL or missing references)
		//IL_022b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0240: Unknown result type (might be due to invalid IL or missing references)
		//IL_0245: Unknown result type (might be due to invalid IL or missing references)
		//IL_02da: Unknown result type (might be due to invalid IL or missing references)
		//IL_02df: Unknown result type (might be due to invalid IL or missing references)
		Vector2 spinningpoint = Utils.RotatedByRandom(new Vector2(0f, -3f), 3.1415927410125732);
		float num = Main.rand.Next(7, 13);
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector(2.1f, 2f);
		Color newColor = Main.hslToRgb(ai[0], 1f, 0.5f);
		((Color)(ref newColor)).A = byte.MaxValue;
		for (float num2 = 0f; num2 < num; num2 += 1f)
		{
			int num3 = Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 0, newColor);
			Main.dust[num3].position = base.Center;
			Main.dust[num3].velocity = spinningpoint.RotatedBy((float)Math.PI * 2f * num2 / num) * vector * (0.8f + Main.rand.NextFloat() * 0.4f);
			Main.dust[num3].noGravity = true;
			Main.dust[num3].scale = 2f;
			Main.dust[num3].fadeIn = Main.rand.NextFloat() * 2f;
			if (num3 != 6000)
			{
				Dust dust = Dust.CloneDust(num3);
				dust.scale /= 2f;
				dust.fadeIn /= 2f;
				dust.color = new Color(255, 255, 255, 255);
			}
		}
		for (float num4 = 0f; num4 < num; num4 += 1f)
		{
			int num5 = Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 0, newColor);
			Main.dust[num5].position = base.Center;
			Main.dust[num5].velocity = spinningpoint.RotatedBy((float)Math.PI * 2f * num4 / num) * vector * (0.8f + Main.rand.NextFloat() * 0.4f);
			Dust obj = Main.dust[num5];
			obj.velocity *= Main.rand.NextFloat() * 0.8f;
			Main.dust[num5].noGravity = true;
			Main.dust[num5].scale = Main.rand.NextFloat() * 1f;
			Main.dust[num5].fadeIn = Main.rand.NextFloat() * 2f;
			if (num5 != 6000)
			{
				Dust dust2 = Dust.CloneDust(num5);
				dust2.scale /= 2f;
				dust2.fadeIn /= 2f;
				dust2.color = new Color(255, 255, 255, 255);
			}
		}
	}

	/// <summary>
	/// Determines if walls should be exploded by checking if there is an empty wall within the specified radius and bounds. Use in conjunction with <see cref="M:Terraria.Projectile.ExplodeTiles(Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" />.
	/// </summary>
	public bool ShouldWallExplode(Vector2 compareSpot, int radius, int minI, int maxI, int minJ, int maxJ)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		bool result = false;
		for (int i = minI; i <= maxI; i++)
		{
			for (int j = minJ; j <= maxJ; j++)
			{
				float num3 = Math.Abs((float)i - compareSpot.X / 16f);
				float num2 = Math.Abs((float)j - compareSpot.Y / 16f);
				if (Math.Sqrt(num3 * num3 + num2 * num2) < (double)radius && Main.tile[i, j] != null && Main.tile[i, j].wall == 0)
				{
					result = true;
					break;
				}
			}
		}
		return result;
	}

	public Color GetFloatingDaggerMinionGlowColor()
	{
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		float num = (float)(whoAmI % 6) / 6f;
		return Main.hslToRgb(0.66f + 0.33f * num, 0.7f, 0.6f) * 0.7f;
	}

	public bool CanExplodeTile(int x, int y)
	{
		if (Main.tileDungeon[Main.tile[x, y].type] || TileID.Sets.BasicChest[Main.tile[x, y].type])
		{
			return false;
		}
		if (!TileLoader.CanExplode(x, y))
		{
			return false;
		}
		switch (Main.tile[x, y].type)
		{
		case 26:
		case 88:
		case 107:
		case 108:
		case 111:
		case 211:
		case 221:
		case 222:
		case 223:
		case 226:
		case 237:
		case 470:
		case 475:
			return false;
		case 37:
		case 58:
			if (!Main.hardMode)
			{
				return false;
			}
			break;
		case 77:
			if (!Main.hardMode && y >= Main.UnderworldLayer)
			{
				return false;
			}
			break;
		case 48:
		case 232:
			if (Main.getGoodWorld)
			{
				return false;
			}
			break;
		case 137:
			if (!NPC.downedGolemBoss && (uint)(Main.tile[x, y].frameY / 18 - 1) <= 3u)
			{
				return false;
			}
			break;
		}
		return true;
	}

	/// <summary>
	/// Explodes tiles within a radius of the given position and within the bounds passed in. The <paramref name="wallSplode" /> parameter should be the result of <see cref="M:Terraria.Projectile.ShouldWallExplode(Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /> and dictates if walls will also be destroyed. This method honors the tile and wall explosion conditions.
	/// </summary>
	public void ExplodeTiles(Vector2 compareSpot, int radius, int minI, int maxI, int minJ, int maxJ, bool wallSplode)
	{
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		AchievementsHelper.CurrentlyMining = true;
		for (int i = minI; i <= maxI; i++)
		{
			for (int j = minJ; j <= maxJ; j++)
			{
				float num3 = Math.Abs((float)i - compareSpot.X / 16f);
				float num2 = Math.Abs((float)j - compareSpot.Y / 16f);
				if (!(Math.Sqrt(num3 * num3 + num2 * num2) < (double)radius))
				{
					continue;
				}
				bool flag = true;
				if (Main.tile[i, j] != null && Main.tile[i, j].active())
				{
					flag = CanExplodeTile(i, j);
					if (flag)
					{
						WorldGen.KillTile(i, j);
						if (!Main.tile[i, j].active() && Main.netMode != 0)
						{
							NetMessage.SendData(17, -1, -1, null, 0, i, j);
						}
					}
				}
				if (!flag)
				{
					continue;
				}
				for (int k = i - 1; k <= i + 1; k++)
				{
					for (int l = j - 1; l <= j + 1; l++)
					{
						if (Main.tile[k, l] != null && Main.tile[k, l].wall > 0 && wallSplode && WallLoader.CanExplode(k, l, Main.tile[k, l].wall))
						{
							WorldGen.KillWall(k, l);
							if (Main.tile[k, l].wall == 0 && Main.netMode != 0)
							{
								NetMessage.SendData(17, -1, -1, null, 2, k, l);
							}
						}
					}
				}
			}
		}
		AchievementsHelper.CurrentlyMining = false;
	}

	public void ExplodeCrackedTiles(Vector2 compareSpot, int radius, int minI, int maxI, int minJ, int maxJ)
	{
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		AchievementsHelper.CurrentlyMining = true;
		for (int i = minI; i <= maxI; i++)
		{
			for (int j = minJ; j <= maxJ; j++)
			{
				float num3 = Math.Abs((float)i - compareSpot.X / 16f);
				float num2 = Math.Abs((float)j - compareSpot.Y / 16f);
				if (Math.Sqrt(num3 * num3 + num2 * num2) < (double)radius && Main.tile[i, j] != null && Main.tile[i, j].active() && TileID.Sets.CrackedBricks[Main.tile[i, j].type])
				{
					WorldGen.KillTile(i, j);
					if (!Main.tile[i, j].active() && Main.netMode != 0)
					{
						NetMessage.SendData(17, -1, -1, null, 20, i, j);
					}
				}
			}
		}
		AchievementsHelper.CurrentlyMining = false;
	}

	public bool TryGetContainerIndex(out int containerIndex)
	{
		containerIndex = -1;
		if (type == 525 || type == 960)
		{
			containerIndex = -2;
			return true;
		}
		if (type == 734)
		{
			containerIndex = -5;
			return true;
		}
		return false;
	}

	public bool IsInteractible()
	{
		int num = type;
		if (num == 525 || num == 734 || num == 960)
		{
			return true;
		}
		return false;
	}

	public Color GetAlpha(Color newColor)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_014e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_0172: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0187: Unknown result type (might be due to invalid IL or missing references)
		//IL_0207: Unknown result type (might be due to invalid IL or missing references)
		//IL_0212: Unknown result type (might be due to invalid IL or missing references)
		//IL_0225: Unknown result type (might be due to invalid IL or missing references)
		//IL_0232: Unknown result type (might be due to invalid IL or missing references)
		//IL_023c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0241: Unknown result type (might be due to invalid IL or missing references)
		//IL_025d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0268: Unknown result type (might be due to invalid IL or missing references)
		//IL_026d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0301: Unknown result type (might be due to invalid IL or missing references)
		//IL_0302: Unknown result type (might be due to invalid IL or missing references)
		//IL_030c: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_039e: Unknown result type (might be due to invalid IL or missing references)
		//IL_039f: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0378: Unknown result type (might be due to invalid IL or missing references)
		//IL_0379: Unknown result type (might be due to invalid IL or missing references)
		//IL_037d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0382: Unknown result type (might be due to invalid IL or missing references)
		//IL_0384: Unknown result type (might be due to invalid IL or missing references)
		//IL_0385: Unknown result type (might be due to invalid IL or missing references)
		//IL_038a: Unknown result type (might be due to invalid IL or missing references)
		//IL_038e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0398: Unknown result type (might be due to invalid IL or missing references)
		//IL_0427: Unknown result type (might be due to invalid IL or missing references)
		//IL_0432: Unknown result type (might be due to invalid IL or missing references)
		//IL_0452: Unknown result type (might be due to invalid IL or missing references)
		//IL_0453: Unknown result type (might be due to invalid IL or missing references)
		//IL_045d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0470: Unknown result type (might be due to invalid IL or missing references)
		//IL_047b: Unknown result type (might be due to invalid IL or missing references)
		//IL_04af: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0515: Unknown result type (might be due to invalid IL or missing references)
		//IL_051a: Unknown result type (might be due to invalid IL or missing references)
		//IL_051f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0521: Unknown result type (might be due to invalid IL or missing references)
		//IL_0528: Unknown result type (might be due to invalid IL or missing references)
		//IL_055e: Unknown result type (might be due to invalid IL or missing references)
		//IL_055f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0569: Unknown result type (might be due to invalid IL or missing references)
		//IL_0537: Unknown result type (might be due to invalid IL or missing references)
		//IL_053e: Unknown result type (might be due to invalid IL or missing references)
		//IL_054d: Unknown result type (might be due to invalid IL or missing references)
		//IL_054e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0558: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_063c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0681: Unknown result type (might be due to invalid IL or missing references)
		//IL_0694: Unknown result type (might be due to invalid IL or missing references)
		//IL_0695: Unknown result type (might be due to invalid IL or missing references)
		//IL_069f: Unknown result type (might be due to invalid IL or missing references)
		//IL_06aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_266b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0747: Unknown result type (might be due to invalid IL or missing references)
		//IL_077b: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0834: Unknown result type (might be due to invalid IL or missing references)
		//IL_085b: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_08de: Unknown result type (might be due to invalid IL or missing references)
		//IL_0902: Unknown result type (might be due to invalid IL or missing references)
		//IL_090d: Unknown result type (might be due to invalid IL or missing references)
		//IL_094d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0974: Unknown result type (might be due to invalid IL or missing references)
		//IL_0996: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_09bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_09cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_09e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_09e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a17: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a18: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a22: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a27: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a32: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a41: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a43: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b70: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b97: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c17: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ca6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cde: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d06: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d55: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d97: Unknown result type (might be due to invalid IL or missing references)
		//IL_0de7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e35: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e69: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e90: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ee3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0faf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fba: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fda: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ffa: Unknown result type (might be due to invalid IL or missing references)
		//IL_107e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1103: Unknown result type (might be due to invalid IL or missing references)
		//IL_1108: Unknown result type (might be due to invalid IL or missing references)
		//IL_1127: Unknown result type (might be due to invalid IL or missing references)
		//IL_112b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1152: Unknown result type (might be due to invalid IL or missing references)
		//IL_116a: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1223: Unknown result type (might be due to invalid IL or missing references)
		//IL_122e: Unknown result type (might be due to invalid IL or missing references)
		//IL_125b: Unknown result type (might be due to invalid IL or missing references)
		//IL_125c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1266: Unknown result type (might be due to invalid IL or missing references)
		//IL_126b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1287: Unknown result type (might be due to invalid IL or missing references)
		//IL_1292: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1310: Unknown result type (might be due to invalid IL or missing references)
		//IL_1344: Unknown result type (might be due to invalid IL or missing references)
		//IL_135c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1383: Unknown result type (might be due to invalid IL or missing references)
		//IL_139b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_13fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1424: Unknown result type (might be due to invalid IL or missing references)
		//IL_1437: Unknown result type (might be due to invalid IL or missing references)
		//IL_1438: Unknown result type (might be due to invalid IL or missing references)
		//IL_1442: Unknown result type (might be due to invalid IL or missing references)
		//IL_145a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1487: Unknown result type (might be due to invalid IL or missing references)
		//IL_1488: Unknown result type (might be due to invalid IL or missing references)
		//IL_1492: Unknown result type (might be due to invalid IL or missing references)
		//IL_14aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1514: Unknown result type (might be due to invalid IL or missing references)
		//IL_152c: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_14cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_14d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_1592: Unknown result type (might be due to invalid IL or missing references)
		//IL_15a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_15f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_160c: Unknown result type (might be due to invalid IL or missing references)
		//IL_161f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1626: Unknown result type (might be due to invalid IL or missing references)
		//IL_164d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1665: Unknown result type (might be due to invalid IL or missing references)
		//IL_168c: Unknown result type (might be due to invalid IL or missing references)
		//IL_16a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_1720: Unknown result type (might be due to invalid IL or missing references)
		//IL_172b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1752: Unknown result type (might be due to invalid IL or missing references)
		//IL_176a: Unknown result type (might be due to invalid IL or missing references)
		//IL_177d: Unknown result type (might be due to invalid IL or missing references)
		//IL_177e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1788: Unknown result type (might be due to invalid IL or missing references)
		//IL_178d: Unknown result type (might be due to invalid IL or missing references)
		//IL_17c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_17f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_17f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1801: Unknown result type (might be due to invalid IL or missing references)
		//IL_1806: Unknown result type (might be due to invalid IL or missing references)
		//IL_181f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1832: Unknown result type (might be due to invalid IL or missing references)
		//IL_1833: Unknown result type (might be due to invalid IL or missing references)
		//IL_183d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1842: Unknown result type (might be due to invalid IL or missing references)
		//IL_185b: Unknown result type (might be due to invalid IL or missing references)
		//IL_186e: Unknown result type (might be due to invalid IL or missing references)
		//IL_186f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1879: Unknown result type (might be due to invalid IL or missing references)
		//IL_187e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1897: Unknown result type (might be due to invalid IL or missing references)
		//IL_18be: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_191a: Unknown result type (might be due to invalid IL or missing references)
		//IL_19d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1997: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a52: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a76: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a96: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b10: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b33: Unknown result type (might be due to invalid IL or missing references)
		//IL_1af0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b67: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c53: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c34: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c77: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cca: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cac: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c99: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d20: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d95: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dce: Unknown result type (might be due to invalid IL or missing references)
		//IL_1daa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e34: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e73: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ebe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e93: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f09: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ede: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f59: Unknown result type (might be due to invalid IL or missing references)
		//IL_1faa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2005: Unknown result type (might be due to invalid IL or missing references)
		//IL_2029: Unknown result type (might be due to invalid IL or missing references)
		//IL_206a: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2097: Unknown result type (might be due to invalid IL or missing references)
		//IL_2135: Unknown result type (might be due to invalid IL or missing references)
		//IL_2140: Unknown result type (might be due to invalid IL or missing references)
		//IL_2111: Unknown result type (might be due to invalid IL or missing references)
		//IL_210b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2163: Unknown result type (might be due to invalid IL or missing references)
		//IL_216e: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_21fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_235f: Unknown result type (might be due to invalid IL or missing references)
		//IL_228f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2398: Unknown result type (might be due to invalid IL or missing references)
		//IL_2374: Unknown result type (might be due to invalid IL or missing references)
		//IL_2321: Unknown result type (might be due to invalid IL or missing references)
		//IL_2446: Unknown result type (might be due to invalid IL or missing references)
		//IL_2440: Unknown result type (might be due to invalid IL or missing references)
		//IL_2488: Unknown result type (might be due to invalid IL or missing references)
		//IL_24ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_256c: Unknown result type (might be due to invalid IL or missing references)
		//IL_25fc: Unknown result type (might be due to invalid IL or missing references)
		Color? val = ProjectileLoader.GetAlpha(this, newColor);
		if (val.HasValue)
		{
			return val.GetValueOrDefault();
		}
		if (type == 920 || type == 921)
		{
			return Color.Lerp(newColor, Color.White, 0.4f) * Opacity;
		}
		if (type == 47 && Main.player[owner].wet)
		{
			return Color.White;
		}
		if (type == 937)
		{
			((Color)(ref newColor)).A = (byte)((float)(int)((Color)(ref newColor)).A * 0.75f);
		}
		if (type == 880 || type == 929)
		{
			((Color)(ref newColor)).A = (byte)(((Color)(ref newColor)).A / 2);
		}
		if (type == 963)
		{
			float num = 0.85f;
			newColor *= num;
			((Color)(ref newColor)).A = (byte)((float)(int)((Color)(ref newColor)).A * num);
			if (ai[0] >= 2f)
			{
				((Color)(ref newColor)).G = (byte)((float)(int)((Color)(ref newColor)).G * 0.7f);
				((Color)(ref newColor)).B = (byte)((float)(int)((Color)(ref newColor)).B * 0.7f);
			}
		}
		if (type == 1021)
		{
			return Color.White;
		}
		if (type == 1006)
		{
			return Color.White;
		}
		if (type == 981)
		{
			return Color.White;
		}
		if (type == 75)
		{
			return Color.Lerp(newColor, Color.White, 0.66f) * Opacity;
		}
		int r;
		int g;
		int b;
		if (type == 969)
		{
			int num4 = 210;
			r = (g = (b = num4));
			if (((Color)(ref newColor)).R < num4)
			{
				r = ((Color)(ref newColor)).R;
			}
			if (((Color)(ref newColor)).G < num4)
			{
				g = ((Color)(ref newColor)).G;
			}
			if (((Color)(ref newColor)).B < num4)
			{
				b = ((Color)(ref newColor)).B;
			}
			return new Color(r, g, b, 185) * Opacity;
		}
		if (type == 967)
		{
			return Color.White * Opacity;
		}
		if (type == 855)
		{
			newColor = Color.Lerp(newColor, new Color(255, 200, 60), 0.5f);
		}
		if (type == 933 || type == 1001)
		{
			newColor = Color.White * Opacity;
		}
		if (type == 270)
		{
			return new Color(255, 255, 255, (int)Utils.WrappedLerp(0f, 255f, (float)(timeLeft % 40) / 40f));
		}
		if (type == 837)
		{
			if (alpha > 0)
			{
				return Color.Transparent;
			}
			return new Color(255, 255, 255, 200);
		}
		if (type == 180 || type == 345)
		{
			return Color.Lerp(newColor, Color.White, 0.75f);
		}
		if (type == 586)
		{
			if (ai[2] == 1f)
			{
				Color value = default(Color);
				((Color)(ref value))._002Ector(((Color)(ref newColor)).R / 2, 0, (int)((Color)(ref newColor)).G);
				float amount = (float)Math.Sin(ai[0] % 120f * ((float)Math.PI * 2f) / 120f) * 0.5f + 0.5f;
				newColor = Color.Lerp(newColor, value, amount);
				return Color.Lerp(newColor, Color.Lerp(Color.White, value, amount), 0.75f);
			}
			return Color.Lerp(newColor, Color.White, 0.75f);
		}
		if (type == 764 || type == 856 || type == 857 || type == 864)
		{
			return Color.White;
		}
		if (type == 873 || type == 872 || type == 931 || type == 913 || type == 34)
		{
			return Color.White * Opacity;
		}
		if (type == 756 || type == 961)
		{
			return Color.Lerp(newColor, Color.Black, 0.25f);
		}
		if (type == 895)
		{
			return Color.White * Opacity;
		}
		if (type == 893 || type == 907)
		{
			return new Color(255, 255, 255, 150);
		}
		if (type == 833 || type == 834 || type == 835 || type == 912)
		{
			return Color.Lerp(newColor, Color.White, 0.25f);
		}
		if (type == 351 || type == 350)
		{
			Point point = base.Center.ToTileCoordinates();
			if (WorldGen.InWorld(point.X, point.Y) && !WorldGen.SolidTile(point.X, point.Y))
			{
				return Color.Lerp(newColor, Color.White, 0.15f);
			}
			return Color.Lerp(newColor, Color.White, 0.05f);
		}
		if (type == 346 || type == 347 || type == 325 || type == 755)
		{
			return Color.Lerp(newColor, Color.White, 0.75f);
		}
		if (type == 650)
		{
			r = (int)((double)(int)((Color)(ref newColor)).R * 1.5);
			g = (int)((double)(int)((Color)(ref newColor)).G * 1.5);
			b = (int)((double)(int)((Color)(ref newColor)).B * 1.5);
			if (r > 255)
			{
				r = 255;
			}
			if (g > 255)
			{
				g = 255;
			}
			if (b > 255)
			{
				b = 255;
			}
		}
		else
		{
			if (type == 948)
			{
				return Color.White;
			}
			if (type == 604 || type == 631)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
			}
			if (type == 342)
			{
				return Color.Lerp(newColor, Color.White, 0.75f) * Opacity;
			}
			if (type == 636)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 64 - alpha / 4);
			}
			if (type == 673 || type == 706)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 180 - alpha / 2 - alpha / 4);
			}
			if (type == 603 || type == 633)
			{
				return new Color(255, 255, 255, 200);
			}
			if (type == 623 || (type >= 625 && type <= 628) || type == 710)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
			}
			if (type == 645 || type == 643)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 127 - alpha / 2);
			}
			if (type == 611)
			{
				return new Color(255, 255, 255, 200);
			}
			if (type == 640 || type == 644 || type == 658)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
			}
			if (type == 612 || type == 953)
			{
				return new Color(255, 255, 255, 127);
			}
			if (type == 978)
			{
				return new Color(255, 255, 255, 127) * Opacity;
			}
			if (aiStyle == 105)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
			}
			if (type == 554)
			{
				return new Color(200, 200, 200, 200);
			}
			if (type == 601)
			{
				return PortalHelper.GetPortalColor(owner, (int)ai[0]);
			}
			if (type == 602)
			{
				Color portalColor = PortalHelper.GetPortalColor(owner, (int)ai[1]);
				((Color)(ref portalColor)).A = 227;
				return portalColor;
			}
			if (type == 585)
			{
				byte a = ((Color)(ref newColor)).A;
				newColor = Color.Lerp(newColor, Color.White, 0.5f);
				((Color)(ref newColor)).A = a;
				return newColor;
			}
			if (type == 714)
			{
				byte a2 = ((Color)(ref newColor)).A;
				newColor = Color.Lerp(newColor, Color.White, 0.8f);
				((Color)(ref newColor)).A = a2;
				newColor *= (float)(int)a2 / 255f;
				return newColor;
			}
			if (type == 573 || type == 578 || type == 579 || type == 617 || type == 641 || type == 707 || type == 813)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
			}
			if (type == 490)
			{
				return Color.White;
			}
			if (type == 575 || type == 596 || type == 659)
			{
				if (timeLeft < 30)
				{
					float num5 = (float)timeLeft / 30f;
					alpha = (int)(255f - 255f * num5);
				}
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 128 - alpha / 2);
			}
			if (type == 546)
			{
				return new Color(255, 200, 255, 200);
			}
			if (type == 553)
			{
				return new Color(255, 255, 200, 200);
			}
			if (type == 540)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
			}
			if (type == 498)
			{
				return new Color(255, 100, 20, 200);
			}
			if (type == 538)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
			}
			if (type == 518)
			{
				float num6 = 1f - (float)alpha / 255f;
				return new Color((int)(200f * num6), (int)(200f * num6), (int)(200f * num6), (int)(100f * num6));
			}
			if (type == 518 || type == 595 || type == 735)
			{
				Color color = Color.Lerp(newColor, Color.White, 0.85f);
				((Color)(ref color)).A = 128;
				return color * (1f - (float)alpha / 255f);
			}
			if (type == 536 || type == 607)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 63 - alpha / 4);
			}
			if (type == 591)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 63 - alpha / 4);
			}
			if (type == 493 || type == 494)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
			}
			if (type == 492)
			{
				return new Color(255, 255, 255, 255);
			}
			if (type == 491)
			{
				return new Color(255, 255, 255, 255);
			}
			if (type == 485 || type == 502)
			{
				return new Color(255, 255, 255, 200);
			}
			if (type == 488)
			{
				return new Color(255, 255, 255, 255);
			}
			if (type == 477 || type == 478 || type == 479)
			{
				if (alpha == 0)
				{
					return new Color(255, 255, 255, 200);
				}
				return new Color(0, 0, 0, 0);
			}
			if (type == 473)
			{
				return new Color(255, 255, 255, 255);
			}
			if (type == 50 || type == 53 || type == 515 || type == 870)
			{
				return new Color(255, 255, 255, 0);
			}
			if (type == 723 || type == 724 || type == 725 || type == 726 || type == 728 || type == 9)
			{
				return new Color(255, 255, 255, 0) * Opacity;
			}
			if (type == 92)
			{
				return new Color(255, 255, 255, 0);
			}
			if (type == 91)
			{
				return new Color(200, 200, 200, 0);
			}
			if (type == 34 || type == 15 || type == 93 || type == 94 || type == 95 || type == 96 || type == 253 || type == 258 || (type == 102 && alpha < 255))
			{
				return new Color(200, 200, 200, 25);
			}
			if (type == 465)
			{
				return new Color(255, 255, 255, 0) * (1f - (float)alpha / 255f);
			}
			if (type == 503)
			{
				Color val2 = Color.Lerp(newColor, Color.White, 0.5f) * (1f - (float)alpha / 255f);
				Color value2 = Color.Lerp(Color.Purple, Color.White, 0.33f);
				float amount2 = 0.25f + (float)Math.Cos(localAI[0]) * 0.25f;
				return Color.Lerp(val2, value2, amount2);
			}
			if (type == 467)
			{
				return new Color(255, 255, 255, 255) * (1f - (float)alpha / 255f);
			}
			if (type == 694 || type == 695 || type == 696)
			{
				return new Color(255, 255, 255, 127) * (1f - (float)alpha / 255f);
			}
			if (type == 634 || type == 635)
			{
				return new Color(255, 255, 255, 127) * Opacity;
			}
			if (type == 671)
			{
				return new Color(255, 255, 255, 255) * Opacity;
			}
			if (type == 664 || type == 666 || type == 668)
			{
				newColor = Color.Lerp(newColor, Color.White, 0.5f);
				return new Color((int)((Color)(ref newColor)).R, (int)((Color)(ref newColor)).G, (int)((Color)(ref newColor)).B, 200) * Opacity;
			}
			if (type == 451)
			{
				return new Color(255, 255, 255, 200) * ((255f - (float)alpha) / 255f);
			}
			if (type == 684)
			{
				return new Color(255, 255, 255, 200) * ((255f - (float)alpha) / 255f);
			}
			if (type == 454 || type == 452)
			{
				return new Color(255, 255, 255, 255) * (1f - (float)alpha / 255f);
			}
			if (type == 464)
			{
				return new Color(255, 255, 255, 255) * ((255f - (float)alpha) / 255f);
			}
			if (type == 450)
			{
				return new Color(200, 200, 200, 255 - alpha);
			}
			if (type == 459 || type == 709)
			{
				return new Color(255, 255, 255, 200);
			}
			if (type == 447)
			{
				return new Color(255, 255, 255, 200);
			}
			if (type == 446)
			{
				return Color.Lerp(newColor, Color.White, 0.8f) * (1f - (float)alpha / 255f);
			}
			if (type == 691 || type == 692 || type == 693)
			{
				return Color.Lerp(newColor, Color.White, 0.4f) * (1f - (float)alpha / 255f);
			}
			if (type >= 646 && type <= 649)
			{
				return Color.Lerp(newColor, Color.White, 0.8f) * (1f - (float)alpha / 255f);
			}
			if (type == 445)
			{
				return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
			}
			if (type == 440 || type == 449 || type == 606)
			{
				r = 255 - alpha;
				g = 255 - alpha;
				b = 255 - alpha;
			}
			else
			{
				if (type == 444)
				{
					return newColor * (1f - (float)alpha / 255f);
				}
				if (type == 443 || type == 675 || type == 686 || type == 711)
				{
					return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
				}
				if (type == 676)
				{
					return newColor * Opacity;
				}
				if (type == 438)
				{
					return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
				}
				if (type == 592)
				{
					return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
				}
				if (type == 437 || type == 700)
				{
					return new Color(255, 255, 255, 0) * (1f - (float)alpha / 255f);
				}
				if (type == 964 || type == 965)
				{
					return new Color(255, 255, 255, 255) * Opacity;
				}
				if (type == 462)
				{
					return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
				}
				if (type == 352)
				{
					Color color2 = Color.Lerp(newColor, Color.White, 0.5f);
					((Color)(ref color2)).A = (byte)((float)(int)((Color)(ref color2)).A * ((float)alpha / 255f));
					return new Color((int)((Color)(ref color2)).R, (int)((Color)(ref color2)).G, (int)((Color)(ref color2)).B, (int)((Color)(ref color2)).A);
				}
				if (type == 435 || type == 732 || type == 731)
				{
					newColor = Color.Lerp(newColor, Color.White, 0.8f);
					return new Color((int)((Color)(ref newColor)).R, (int)((Color)(ref newColor)).G, (int)((Color)(ref newColor)).B, 25);
				}
				if (type == 682)
				{
					newColor = Color.Lerp(newColor, Color.White, 0.8f);
					return new Color((int)((Color)(ref newColor)).R, (int)((Color)(ref newColor)).G, (int)((Color)(ref newColor)).B, 127);
				}
				if (type == 436)
				{
					newColor = Color.Lerp(newColor, Color.White, 0.8f);
					return new Color((int)((Color)(ref newColor)).R, (int)((Color)(ref newColor)).G, (int)((Color)(ref newColor)).B, 25);
				}
				if (type == 409)
				{
					return new Color(250, 250, 250, 200);
				}
				if (type == 348 || type == 349)
				{
					return new Color(200, 200, 200, alpha);
				}
				if (type == 337)
				{
					return new Color(250, 250, 250, 150);
				}
				if (type >= 424 && type <= 426)
				{
					byte b2 = 150;
					if (((Color)(ref newColor)).R < b2)
					{
						((Color)(ref newColor)).R = b2;
					}
					if (((Color)(ref newColor)).G < b2)
					{
						((Color)(ref newColor)).G = b2;
					}
					if (((Color)(ref newColor)).B < b2)
					{
						((Color)(ref newColor)).B = b2;
					}
					return new Color((int)((Color)(ref newColor)).R, (int)((Color)(ref newColor)).G, (int)((Color)(ref newColor)).B, 255);
				}
				if (type == 431 || type == 432)
				{
					return new Color(250, 250, 250, 255 - alpha);
				}
				if (type == 343 || type == 344)
				{
					float num7 = 1f - (float)alpha / 255f;
					return new Color((int)(250f * num7), (int)(250f * num7), (int)(250f * num7), (int)(100f * num7));
				}
				if (type == 332)
				{
					return new Color(255, 255, 255, 255);
				}
				if (type == 329)
				{
					return new Color(200, 200, 200, 50);
				}
				if (type >= 326 && type <= 328)
				{
					return Color.Transparent;
				}
				if (type >= 400 && type <= 402)
				{
					return Color.Transparent;
				}
				if (type == 324 && frame >= 6 && frame <= 9)
				{
					return new Color(255, 255, 255, 255);
				}
				if (type == 16)
				{
					return new Color(255, 255, 255, 0);
				}
				if (type == 321)
				{
					return new Color(200, 200, 200, 0);
				}
				if (type == 76 || type == 77 || type == 78)
				{
					return new Color(255, 255, 255, 0);
				}
				if (type == 308)
				{
					return new Color(200, 200, 255, 125);
				}
				if (type == 263)
				{
					if (timeLeft < 255)
					{
						return new Color(255, 255, 255, (int)(byte)timeLeft);
					}
					return new Color(255, 255, 255, 255);
				}
				if (type == 274)
				{
					if (timeLeft < 85)
					{
						byte b3 = (byte)(timeLeft * 3);
						byte a3 = (byte)(100f * ((float)(int)b3 / 255f));
						return new Color((int)b3, (int)b3, (int)b3, (int)a3);
					}
					return new Color(255, 255, 255, 100);
				}
				if (type == 5)
				{
					return new Color(255, 255, 255, 0);
				}
				if (type == 300)
				{
					return new Color(250, 250, 250, 50);
				}
				if (type == 301)
				{
					if (ai[0] == 1f)
					{
						return newColor;
					}
					return new Color(250, 250, 250, 50);
				}
				if (type == 712)
				{
					return Color.Lerp(newColor, Color.White, 0.4f) * Opacity;
				}
				if (type == 304)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, (int)(byte)((float)(255 - alpha) / 3f));
				}
				if (type == 116 || type == 132 || type == 156 || type == 157 || type == 157 || type == 173)
				{
					if (localAI[1] >= 15f)
					{
						return new Color(255, 255, 255, alpha);
					}
					if (localAI[1] < 5f)
					{
						return Color.Transparent;
					}
					int num11 = (int)((localAI[1] - 5f) / 10f * 255f);
					return new Color(num11, num11, num11, num11);
				}
				if (type == 254)
				{
					if (timeLeft < 30)
					{
						float num8 = (float)timeLeft / 30f;
						alpha = (int)(255f - 255f * num8);
					}
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
				}
				if (type == 265 || type == 355)
				{
					if (alpha > 0)
					{
						return Color.Transparent;
					}
					return new Color(255, 255, 255, 0);
				}
				if (type == 257)
				{
					if (alpha > 200)
					{
						return Color.Transparent;
					}
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
				}
				if (type == 259)
				{
					if (alpha > 200)
					{
						return Color.Transparent;
					}
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
				}
				if (type >= 150 && type <= 152)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
				}
				if (type == 250)
				{
					return Color.Transparent;
				}
				if (type == 251)
				{
					r = 255 - alpha;
					g = 255 - alpha;
					b = 255 - alpha;
					return new Color(r, g, b, 0);
				}
				if (type == 131)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
				}
				if (type == 211)
				{
					return new Color(255, 255, 255, 0);
				}
				if (type == 229)
				{
					return new Color(255, 255, 255, 50);
				}
				if (type == 221 || type == 729 || type == 977)
				{
					return new Color(255, 255, 255, 200);
				}
				if (type == 20)
				{
					if (alpha <= 150)
					{
						return new Color(255, 255, 255, 0);
					}
					return new Color(0, 0, 0, 0);
				}
				if (type == 207)
				{
					r = 255 - alpha;
					g = 255 - alpha;
					b = 255 - alpha;
				}
				else
				{
					if (type == 242)
					{
						if (alpha < 140)
						{
							return new Color(255, 255, 255, 100);
						}
						return Color.Transparent;
					}
					if (type == 638)
					{
						return new Color(255, 255, 255, 100) * Opacity;
					}
					if (type == 660)
					{
						return new Color(150, 255, 255, 0) * Opacity;
					}
					if (type == 209)
					{
						r = ((Color)(ref newColor)).R - alpha;
						g = ((Color)(ref newColor)).G - alpha;
						b = ((Color)(ref newColor)).B - alpha / 2;
					}
					else
					{
						if (type == 130)
						{
							return new Color(255, 255, 255, 175);
						}
						if (type == 182)
						{
							return new Color(255, 255, 255, 200);
						}
						if (type == 226)
						{
							r = 255;
							g = 255;
							b = 255;
							float num9 = (float)(int)Main.mouseTextColor / 200f - 0.3f;
							r = (int)((float)r * num9);
							g = (int)((float)g * num9);
							b = (int)((float)b * num9);
							r += 50;
							if (r > 255)
							{
								r = 255;
							}
							g += 50;
							if (g > 255)
							{
								g = 255;
							}
							b += 50;
							if (b > 255)
							{
								b = 255;
							}
							return new Color(r, g, b, 200);
						}
						if (type == 227)
						{
							r = (g = (b = 255));
							float num10 = (float)(int)Main.mouseTextColor / 100f - 1.6f;
							r = (int)((float)r * num10);
							g = (int)((float)g * num10);
							b = (int)((float)b * num10);
							int a4 = (int)(100f * num10);
							r += 50;
							if (r > 255)
							{
								r = 255;
							}
							g += 50;
							if (g > 255)
							{
								g = 255;
							}
							b += 50;
							if (b > 255)
							{
								b = 255;
							}
							return new Color(r, g, b, a4);
						}
						if (type == 114 || type == 115)
						{
							if (localAI[1] >= 15f)
							{
								return new Color(255, 255, 255, alpha);
							}
							if (localAI[1] < 5f)
							{
								return Color.Transparent;
							}
							int num12 = (int)((localAI[1] - 5f) / 10f * 255f);
							return new Color(num12, num12, num12, num12);
						}
						if (type == 83 || type == 88 || type == 89 || type == 90 || type == 100 || type == 104 || type == 279 || (type >= 283 && type <= 287) || type == 876)
						{
							if (alpha < 200)
							{
								return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
							}
							return Color.Transparent;
						}
						if (type == 34 || type == 35 || type == 15 || type == 19 || type == 44 || type == 45)
						{
							return Color.White;
						}
						if (type == 79)
						{
							r = Main.DiscoR;
							g = Main.DiscoG;
							b = Main.DiscoB;
							return default(Color);
						}
						if (type == 9 || type == 15 || type == 34 || type == 50 || type == 53 || type == 76 || type == 77 || type == 78 || type == 92 || type == 91)
						{
							r = ((Color)(ref newColor)).R - alpha / 3;
							g = ((Color)(ref newColor)).G - alpha / 3;
							b = ((Color)(ref newColor)).B - alpha / 3;
						}
						else
						{
							if (type == 18)
							{
								return new Color(255, 255, 255, 50);
							}
							if (type == 16 || type == 44 || type == 45)
							{
								r = ((Color)(ref newColor)).R;
								g = ((Color)(ref newColor)).G;
								b = ((Color)(ref newColor)).B;
							}
							else if (type == 12 || type == 72 || type == 86 || type == 87 || type == 955)
							{
								return new Color(255, 255, 255, ((Color)(ref newColor)).A - alpha);
							}
						}
					}
				}
			}
		}
		float num2 = (float)(255 - alpha) / 255f;
		r = (int)((float)(int)((Color)(ref newColor)).R * num2);
		g = (int)((float)(int)((Color)(ref newColor)).G * num2);
		b = (int)((float)(int)((Color)(ref newColor)).B * num2);
		int num3 = ((Color)(ref newColor)).A - alpha;
		if (num3 < 0)
		{
			num3 = 0;
		}
		if (num3 > 255)
		{
			num3 = 255;
		}
		return new Color(r, g, b, num3);
	}

	public override string ToString()
	{
		return "type:" + type + ", name:" + Name + ", active:" + active + ", whoAmI:" + whoAmI + ", identity:" + identity + ", ai0:" + ai[0] + ", uuid:" + projUUID;
	}

	/// <summary> Gets the instance of the specified GlobalProjectile type. This will throw exceptions on failure. </summary>
	/// <exception cref="T:System.Collections.Generic.KeyNotFoundException" />
	/// <exception cref="T:System.IndexOutOfRangeException" />
	public T GetGlobalProjectile<T>() where T : GlobalProjectile
	{
		return GlobalType<GlobalProjectile>.GetGlobal<T>(type, EntityGlobals);
	}

	/// <summary> Gets the local instance of the type of the specified GlobalProjectile instance. This will throw exceptions on failure. </summary>
	/// <exception cref="T:System.Collections.Generic.KeyNotFoundException" />
	/// <exception cref="T:System.NullReferenceException" />
	public T GetGlobalProjectile<T>(T baseInstance) where T : GlobalProjectile
	{
		return GlobalType<GlobalProjectile>.GetGlobal(type, EntityGlobals, baseInstance);
	}

	/// <summary> Gets the instance of the specified GlobalProjectile type. </summary>
	public bool TryGetGlobalProjectile<T>(out T result) where T : GlobalProjectile
	{
		return GlobalType<GlobalProjectile>.TryGetGlobal<T>(type, EntityGlobals, out result);
	}

	/// <summary> Safely attempts to get the local instance of the type of the specified GlobalProjectile instance. </summary>
	/// <returns> Whether or not the requested instance has been found. </returns>
	public bool TryGetGlobalProjectile<T>(T baseInstance, out T result) where T : GlobalProjectile
	{
		return GlobalType<GlobalProjectile>.TryGetGlobal(type, EntityGlobals, baseInstance, out result);
	}

	/// <summary>
	/// <inheritdoc cref="M:Terraria.Projectile.NewProjectile(Terraria.DataStructures.IEntitySource,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Int32,System.Single,System.Single,System.Single)" />
	/// <br /><br />This particular overload uses a Vector2 instead of X and Y to determine the actual spawn position and a Vector2 to dictate the initial velocity. The return value is the actual Projectile instance rather than the index of the spawned Projectile within the <see cref="F:Terraria.Main.projectile" /> array.
	/// <br /> A short-hand for <code> Main.projectile[Projectile.NewProjectile(...)] </code>
	/// </summary>
	public static Projectile NewProjectileDirect(IEntitySource spawnSource, Vector2 position, Vector2 velocity, int type, int damage, float knockback, int owner = -1, float ai0 = 0f, float ai1 = 0f, float ai2 = 0f)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		return Main.projectile[NewProjectile(spawnSource, position.X, position.Y, velocity.X, velocity.Y, type, damage, knockback, owner, ai0, ai1, ai2)];
	}

	/// <summary>
	/// Transfers stat modifiers from the spawn source to the projectile. <br />
	/// Adds <see cref="P:Terraria.Projectile.CritChance" /> and <see cref="P:Terraria.Projectile.ArmorPenetration" /> bonuses from players (<see cref="T:Terraria.DataStructures.EntitySource_Parent" />), weapons (<see cref="T:Terraria.DataStructures.EntitySource_ItemUse" />)<br />
	/// If the source is a <see cref="T:Terraria.DataStructures.EntitySource_Parent" /> projectile, <c>CritChance</c> and <c>ArmorPenetration</c> from the parent will be added, in order to transfer the original item/player bonus values.<br /><br />
	/// <br />
	/// To support minions, sentries and <see cref="P:Terraria.Projectile.ContinuouslyUpdateDamageStats" />, <see cref="P:Terraria.Projectile.OriginalCritChance" /> and <see cref="P:Terraria.Projectile.OriginalArmorPenetration" /> are also copied from item sources and parent projectiles.
	/// </summary>
	/// <param name="spawnSource"></param>
	public void ApplyStatsFromSource(IEntitySource spawnSource)
	{
		originalDamage = damage;
		OriginalCritChance = CritChance;
		OriginalArmorPenetration = ArmorPenetration;
		if (spawnSource is EntitySource_Parent { Entity: Player player })
		{
			if (spawnSource is IEntitySource_WithStatsFromItem entitySource_WithStatsFromItem)
			{
				Item item = entitySource_WithStatsFromItem.Item;
				if (item != null)
				{
					CritChance += player.GetWeaponCrit(item);
					ArmorPenetration += player.GetWeaponArmorPenetration(item);
					if (item.damage >= 0)
					{
						originalDamage = item.damage;
					}
					OriginalCritChance += item.crit;
					OriginalArmorPenetration += item.ArmorPenetration;
					return;
				}
			}
			CritChance += (int)(player.GetTotalCritChance(DamageType) + 5E-06f);
			ArmorPenetration += (int)(player.GetTotalArmorPenetration(DamageType) + 5E-06f);
		}
		else if (spawnSource is EntitySource_Parent { Entity: Projectile parentProjectile })
		{
			CritChance += parentProjectile.CritChance;
			ArmorPenetration += parentProjectile.ArmorPenetration;
			OriginalCritChance += parentProjectile.OriginalCritChance;
			OriginalArmorPenetration += parentProjectile.OriginalArmorPenetration;
		}
	}

	public bool TryGetOwner([NotNullWhen(true)] out Player? player)
	{
		player = null;
		if (npcProj || trap)
		{
			return false;
		}
		player = Main.player[owner];
		return player.active;
	}

	/// <summary>
	/// Will drop loot the same way as when <see cref="F:Terraria.ID.ProjectileID.Geode" /> is cracked open.
	/// </summary>
	/// <param name="entity">The entity the loot originates from</param>
	public static void DropGeodeLoot(Entity entity)
	{
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		Dictionary<int, (int, int)> dict = ItemID.Sets.GeodeDrops;
		List<int> list = dict.Keys.ToList();
		int attempts = 0;
		while (attempts < 2 && list.Count > 0)
		{
			attempts++;
			int item = Main.rand.Next(list);
			list.Remove(item);
			int stack = Main.rand.Next(dict[item].Item1, dict[item].Item2);
			int num = Item.NewItem(new EntitySource_Loot(entity), entity.position, entity.Size, item, stack);
			Main.item[num].noGrabDelay = 0;
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, num, 1f);
			}
		}
	}

	/// <inheritdoc cref="M:Terraria.Projectile.CountsAsClass(Terraria.ModLoader.DamageClass)" />
	public bool CountsAsClass<T>() where T : DamageClass
	{
		return CountsAsClass(ModContent.GetInstance<T>());
	}

	/// <summary>
	/// This is used to check if the projectile is considered to be a member of a specified <see cref="T:Terraria.ModLoader.DamageClass" />.
	/// </summary>
	/// <param name="damageClass">The DamageClass to compare with the one assigned to this projectile.</param>
	/// <returns><see langword="true" /> if this projectiles's <see cref="T:Terraria.ModLoader.DamageClass" /> matches <paramref name="damageClass" />, <see langword="false" /> otherwise</returns>
	/// <seealso cref="M:Terraria.Projectile.CountsAsClass``1" />
	public bool CountsAsClass(DamageClass damageClass)
	{
		return DamageClassLoader.effectInheritanceCache[DamageType.Type, damageClass.Type];
	}
}
